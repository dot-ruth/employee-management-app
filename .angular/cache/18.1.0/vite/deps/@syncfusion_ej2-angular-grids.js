import {
  AutoComplete,
  ComboBox,
  ContextMenu,
  DataManager,
  DataUtil,
  Deferred,
  DropDownList,
  FormValidator,
  Input,
  ListBase,
  MaskedTextBox,
  MultiSelect,
  NumericTextBox,
  Predicate,
  Query,
  RemoteSaveAdaptor,
  TextBox,
  Toolbar,
  UrlAdaptor
} from "./chunk-FCU25IV4.js";
import {
  Animation,
  ArrayBase,
  Browser,
  Button,
  CheckBox,
  ChildProperty,
  Collection,
  Complex,
  ComplexBase,
  Component as Component2,
  ComponentBase,
  ComponentMixins,
  Dialog,
  Draggable,
  Droppable,
  Event as Event2,
  EventHandler,
  HijriParser,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Popup,
  Property,
  RadioButton,
  SanitizeHtmlHelper,
  Switch,
  Template,
  Tooltip,
  Touch,
  addClass,
  append,
  attributes,
  blazorTemplates,
  calculatePosition,
  calculateRelativeBasedPosition,
  classList,
  cldrData,
  closest,
  compile,
  createCheckBox,
  createElement,
  createSpinner,
  debounce,
  defaultCurrencyCode,
  detach,
  extend,
  formatUnit,
  getDefaultDateObject,
  getEnumValue,
  getUniqueID,
  getValue,
  hideSpinner,
  initializeCSPTemplate,
  isNullOrUndefined,
  isObject,
  isUndefined,
  matches,
  merge,
  prepend,
  print,
  remove,
  removeClass,
  resetBlazorTemplate,
  rippleEffect,
  select,
  selectAll,
  setCulture,
  setStyleAttribute,
  setValue,
  setValue2,
  showSpinner,
  throwError,
  updateBlazorTemplate
} from "./chunk-XRSD2IZO.js";
import {
  CommonModule
} from "./chunk-3FTCVDZL.js";
import {
  ChangeDetectionStrategy,
  Component,
  ContentChild,
  ContentChildren,
  Directive,
  ElementRef,
  Injector,
  NgModule,
  Renderer2,
  ViewContainerRef,
  __decorate,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵloadQuery,
  ɵɵqueryRefresh
} from "./chunk-PPFKGMOX.js";

// node_modules/@syncfusion/ej2-grids/src/grid/services/value-formatter.js
var ValueFormatter = (
  /** @class */
  function() {
    function ValueFormatter3(cultureName) {
      this.intl = new Internationalization();
      if (!isNullOrUndefined(cultureName)) {
        this.intl.culture = cultureName;
      }
    }
    ValueFormatter3.prototype.getFormatFunction = function(format) {
      if (!isNullOrUndefined(format) && (format.type === "dateTime" || format.type === "datetime" || format.type === "date" || format.type === "time")) {
        return this.intl.getDateFormat(format);
      } else {
        return this.intl.getNumberFormat(format);
      }
    };
    ValueFormatter3.prototype.getParserFunction = function(format) {
      if (format.type) {
        return this.intl.getDateParser(format);
      } else {
        return this.intl.getNumberParser(format);
      }
    };
    ValueFormatter3.prototype.fromView = function(value, format, type) {
      if ((type === "date" || type === "datetime" || type === "number") && !isNullOrUndefined(format)) {
        return format(value);
      } else {
        return value;
      }
    };
    ValueFormatter3.prototype.toView = function(value, format) {
      var result = value;
      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        result = format(value);
      }
      return result;
    };
    ValueFormatter3.prototype.setCulture = function(cultureName) {
      if (!isNullOrUndefined(cultureName)) {
        setCulture(cultureName);
      }
    };
    return ValueFormatter3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/column.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Column = (
  /** @class */
  function() {
    function Column3(options, parent) {
      var _this = this;
      this.disableHtmlEncode = true;
      this.allowSorting = true;
      this.allowResizing = true;
      this.allowFiltering = true;
      this.allowGrouping = true;
      this.allowReordering = true;
      this.showColumnMenu = true;
      this.enableGroupByFormat = false;
      this.allowEditing = true;
      this.filter = {};
      this.showInColumnChooser = true;
      this.edit = {};
      this.allowSearching = true;
      this.autoFit = false;
      this.sortDirection = "Descending";
      this.getEditTemplate = function() {
        return _this.editTemplateFn;
      };
      this.getFilterTemplate = function() {
        return _this.filterTemplateFn;
      };
      merge(this, options);
      this.parent = parent;
      if (this.type === "none") {
        this.type = null;
      } else if (this.type) {
        this.type = typeof this.type === "string" ? this.type.toLowerCase() : void 0;
      }
      if (this.editType) {
        this.editType = this.editType.toLowerCase();
      }
      if (isNullOrUndefined(this.uid)) {
        this.uid = getUid("grid-column");
      }
      var valueFormatter = new ValueFormatter();
      if (options.format && (options.format.skeleton || options.format.format && typeof options.format.format === "string")) {
        this.setFormatter(valueFormatter.getFormatFunction(extend({}, options.format)));
        this.setParser(valueFormatter.getParserFunction(options.format));
      }
      this.toJSON = function() {
        var col = {};
        var skip = ["filter", "dataSource", "headerText", "template", "headerTemplate", "edit", "editTemplate", "filterTemplate", "commandsTemplate", "parent"];
        var keys = Object.keys(_this);
        for (var i = 0; i < keys.length; i++) {
          if (keys[parseInt(i.toString(), 10)] === "columns") {
            col[keys[parseInt(i.toString(), 10)]] = [];
            for (var j = 0; j < _this[keys[parseInt(i.toString(), 10)]].length; j++) {
              col[keys[parseInt(i.toString(), 10)]].push(_this[keys[parseInt(i.toString(), 10)]][parseInt(j.toString(), 10)].toJSON());
            }
          } else if (skip.indexOf(keys[parseInt(i.toString(), 10)]) < 0) {
            col[keys[parseInt(i.toString(), 10)]] = _this[keys[parseInt(i.toString(), 10)]];
          }
        }
        return col;
      };
      if (!this.field) {
        this.allowFiltering = false;
        this.allowGrouping = false;
        this.allowSorting = false;
        if (this.columns) {
          this.allowResizing = this.columns.some(function(col) {
            return col.allowResizing;
          });
        }
      }
      if (this.commands && !this.textAlign) {
        this.textAlign = "Right";
      }
      if (this.template || this.commandsTemplate) {
        this.templateFn = templateCompiler(this.template || this.commandsTemplate);
      }
      if (this.headerTemplate) {
        this.headerTemplateFn = templateCompiler(this.headerTemplate);
      }
      if (!isNullOrUndefined(this.filter) && this.filter.itemTemplate) {
        this.fltrTemplateFn = templateCompiler(this.filter.itemTemplate);
      }
      if (this.editTemplate) {
        this.editTemplateFn = templateCompiler(this.editTemplate);
      }
      if (this.filterTemplate) {
        this.filterTemplateFn = templateCompiler(this.filterTemplate);
      }
      if (this.isForeignColumn() && (isNullOrUndefined(this.editType) || this.editType === "dropdownedit" || this.editType === "defaultedit")) {
        this.editType = "dropdownedit";
        if (this.edit.params && this.edit.params.dataSource) {
          this.edit.params.ddEditedData = true;
        }
        this.edit.params = extend({
          dataSource: this.dataSource,
          query: new Query(),
          fields: {
            value: this.foreignKeyField || this.field,
            text: this.foreignKeyValue
          }
        }, this.edit.params);
      }
      if (this.sortComparer) {
        var a_1 = this.sortComparer;
        this.sortComparer = function(x, y, xObj, yObj) {
          if (typeof a_1 === "string") {
            a_1 = getObject(a_1, window);
          }
          if (_this.sortDirection === "Descending") {
            var z = x;
            x = y;
            y = z;
            var obj = xObj;
            xObj = yObj;
            yObj = obj;
          }
          return a_1(x, y, xObj, yObj);
        };
      }
      if (!this.sortComparer && this.isForeignColumn()) {
        this.sortComparer = function(x, y) {
          x = getObject(_this.foreignKeyValue, getForeignData(_this, {}, x)[0]);
          y = getObject(_this.foreignKeyValue, getForeignData(_this, {}, y)[0]);
          return _this.sortDirection === "Descending" ? DataUtil.fnDescending(x, y) : DataUtil.fnAscending(x, y);
        };
      }
    }
    Column3.prototype.getSortDirection = function() {
      return this.sortDirection;
    };
    Column3.prototype.setSortDirection = function(direction) {
      this.sortDirection = direction;
    };
    Column3.prototype.getFreezeTableName = function() {
      return this.freezeTable;
    };
    Column3.prototype.setProperties = function(column) {
      var keys = Object.keys(column);
      var _loop_1 = function(i2) {
        if (keys[parseInt(i2.toString(), 10)] === "columns") {
          var cols_1 = column[keys[parseInt(i2.toString(), 10)]];
          var _loop_2 = function(j2) {
            this_1.columns.find(function(col) {
              return col.field === cols_1[parseInt(j2.toString(), 10)].field;
            }).setProperties(cols_1[parseInt(j2.toString(), 10)]);
          };
          for (var j = 0; j < cols_1.length; j++) {
            _loop_2(j);
          }
        } else {
          this_1[keys[parseInt(i2.toString(), 10)]] = column[keys[parseInt(i2.toString(), 10)]];
        }
        if (this_1.parent && this_1.parent.isReact) {
          if (keys[parseInt(i2.toString(), 10)] === "template") {
            this_1.templateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
            this_1.parent.refreshReactColumnTemplateByUid(this_1.uid, true);
          } else if (keys[parseInt(i2.toString(), 10)] === "headerTemplate") {
            this_1.headerTemplateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
            this_1.parent.refreshReactHeaderTemplateByUid(this_1.uid);
          } else if (keys[parseInt(i2.toString(), 10)] === "editTemplate") {
            this_1.editTemplateFn = templateCompiler(column[keys[parseInt(i2.toString(), 10)]]);
          }
        }
      };
      var this_1 = this;
      for (var i = 0; i < keys.length; i++) {
        _loop_1(i);
      }
    };
    Column3.prototype.isForeignColumn = function() {
      return !!(this.dataSource && this.foreignKeyValue);
    };
    Column3.prototype.getFormatter = function() {
      return this.formatFn;
    };
    Column3.prototype.setFormatter = function(value) {
      this.formatFn = value;
    };
    Column3.prototype.getParser = function() {
      return this.parserFn;
    };
    Column3.prototype.setParser = function(value) {
      this.parserFn = value;
    };
    Column3.prototype.getColumnTemplate = function() {
      return this.templateFn;
    };
    Column3.prototype.getHeaderTemplate = function() {
      return this.headerTemplateFn;
    };
    Column3.prototype.getFilterItemTemplate = function() {
      return this.fltrTemplateFn;
    };
    Column3.prototype.getDomSetter = function() {
      return this.disableHtmlEncode ? "textContent" : "innerHTML";
    };
    return Column3;
  }()
);
var CommandColumnModel = (
  /** @class */
  function() {
    function CommandColumnModel2() {
    }
    __decorate2([Property()], CommandColumnModel2.prototype, "title", void 0);
    __decorate2([Property()], CommandColumnModel2.prototype, "type", void 0);
    __decorate2([Property()], CommandColumnModel2.prototype, "buttonOption", void 0);
    return CommandColumnModel2;
  }()
);
var GridColumn = (
  /** @class */
  function(_super) {
    __extends(GridColumn2, _super);
    function GridColumn2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([Property(null)], GridColumn2.prototype, "columns", void 0);
    return GridColumn2;
  }(Column)
);
var StackedColumn = (
  /** @class */
  function(_super) {
    __extends(StackedColumn2, _super);
    function StackedColumn2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return StackedColumn2;
  }(GridColumn)
);

// node_modules/@syncfusion/ej2-grids/src/grid/base/constant.js
var created = "create";
var destroyed = "destroy";
var load = "load";
var rowDataBound = "rowDataBound";
var queryCellInfo = "queryCellInfo";
var headerCellInfo = "headerCellInfo";
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var actionFailure = "actionFailure";
var dataBound = "dataBound";
var rowSelecting = "rowSelecting";
var rowSelected = "rowSelected";
var rowDeselecting = "rowDeselecting";
var rowDeselected = "rowDeselected";
var cellSelecting = "cellSelecting";
var cellSelected = "cellSelected";
var cellDeselecting = "cellDeselecting";
var cellDeselected = "cellDeselected";
var columnSelecting = "columnSelecting";
var columnSelected = "columnSelected";
var columnDeselecting = "columnDeselecting";
var columnDeselected = "columnDeselected";
var columnDragStart = "columnDragStart";
var columnDrag = "columnDrag";
var columnDrop = "columnDrop";
var rowDragStartHelper = "rowDragStartHelper";
var rowDragStart = "rowDragStart";
var rowDrag = "rowDrag";
var rowDrop = "rowDrop";
var beforePrint = "beforePrint";
var printComplete = "printComplete";
var detailDataBound = "detailDataBound";
var toolbarClick = "toolbarClick";
var batchAdd = "batchAdd";
var batchCancel = "batchCancel";
var batchDelete = "batchDelete";
var beforeBatchAdd = "beforeBatchAdd";
var beforeBatchDelete = "beforeBatchDelete";
var beforeBatchSave = "beforeBatchSave";
var beginEdit = "beginEdit";
var cellEdit = "cellEdit";
var cellSave = "cellSave";
var cellSaved = "cellSaved";
var endAdd = "endAdd";
var endDelete = "endDelete";
var endEdit = "endEdit";
var recordDoubleClick = "recordDoubleClick";
var recordClick = "recordClick";
var beforeDataBound = "beforeDataBound";
var beforeOpenColumnChooser = "beforeOpenColumnChooser";
var beforeOpenAdaptiveDialog = "beforeOpenAdaptiveDialog";
var resizeStart = "resizeStart";
var onResize = "resizing";
var resizeStop = "resizeStop";
var checkBoxChange = "checkBoxChange";
var beforeCopy = "beforeCopy";
var beforePaste = "beforePaste";
var beforeAutoFill = "beforeAutoFill";
var filterChoiceRequest = "filterchoicerequest";
var filterAfterOpen = "filterAfterOpen";
var filterBeforeOpen = "filterBeforeOpen";
var filterSearchBegin = "filterSearchBegin";
var commandClick = "commandClick";
var exportGroupCaption = "exportGroupCaption";
var lazyLoadGroupExpand = "lazyLoadGroupExpand";
var lazyLoadGroupCollapse = "lazyLoadGroupCollapse";
var initialLoad = "initial-load";
var initialEnd = "initial-end";
var dataReady = "data-ready";
var contentReady = "content-ready";
var uiUpdate = "ui-update";
var onEmpty = "on-empty";
var inBoundModelChanged = "inbound-model-changed";
var modelChanged = "model-changed";
var colGroupRefresh = "colgroup-refresh";
var headerRefreshed = "header-refreshed";
var pageBegin = "paging-begin";
var pageComplete = "paging-complete";
var sortBegin = "sorting-begin";
var sortComplete = "sorting-complete";
var filterBegin = "filtering-begin";
var filterComplete = "filtering-complete";
var searchBegin = "searching-begin";
var searchComplete = "searching-complete";
var reorderBegin = "reorder-begin";
var reorderComplete = "reorder-complete";
var rowDragAndDropBegin = "rowdraganddrop-begin";
var rowDragAndDropComplete = "rowdraganddrop-complete";
var groupBegin = "grouping-begin";
var groupComplete = "grouping-complete";
var ungroupBegin = "ungrouping-begin";
var ungroupComplete = "ungrouping-complete";
var groupAggregates = "group-aggregates";
var refreshFooterRenderer = "refresh-footer-rendered";
var refreshAggregateCell = "refresh-aggregate-cell";
var refreshAggregates = "refresh-aggregates";
var rowSelectionBegin = "rowselecting";
var rowSelectionComplete = "rowselected";
var columnSelectionBegin = "columnselecting";
var columnSelectionComplete = "columnselected";
var cellSelectionBegin = "cellselecting";
var cellSelectionComplete = "cellselected";
var destroyAutoFillElements = "destroy-autofill-elements";
var beforeCellFocused = "beforecellfocused";
var cellFocused = "cellfocused";
var keyPressed = "key-pressed";
var click = "click";
var destroy = "destroy";
var columnVisibilityChanged = "column-visible-changed";
var scroll = "scroll";
var columnWidthChanged = "column-width-changed";
var columnPositionChanged = "column-position-changed";
var rowDragAndDrop = "row-drag-and-drop";
var rowsAdded = "rows-added";
var rowsRemoved = "rows-removed";
var columnDragStop = "column-drag-stop";
var headerDrop = "header-drop";
var dataSourceModified = "datasource-modified";
var refreshComplete = "refresh-complete";
var refreshVirtualBlock = "refresh-virtual-block";
var dblclick = "dblclick";
var toolbarRefresh = "toolbar-refresh";
var bulkSave = "bulk-save";
var autoCol = "auto-col";
var tooltipDestroy = "tooltip-destroy";
var updateData = "update-data";
var editBegin = "edit-begin";
var editComplete = "edit-complete";
var addBegin = "add-begin";
var addComplete = "add-complete";
var saveComplete = "save-complete";
var deleteBegin = "delete-begin";
var deleteComplete = "delete-complete";
var preventBatch = "prevent-batch";
var dialogDestroy = "dialog-destroy";
var crudAction = "crud-Action";
var addDeleteAction = "add-delete-Action";
var destroyForm = "destroy-form";
var doubleTap = "double-tap";
var beforeExcelExport = "beforeExcelExport";
var excelExportComplete = "excelExportComplete";
var excelQueryCellInfo = "excelQueryCellInfo";
var excelHeaderQueryCellInfo = "excelHeaderQueryCellInfo";
var exportDetailDataBound = "exportDetailDataBound";
var exportDetailTemplate = "exportDetailTemplate";
var beforePdfExport = "beforePdfExport";
var pdfExportComplete = "pdfExportComplete";
var pdfQueryCellInfo = "pdfQueryCellInfo";
var pdfHeaderQueryCellInfo = "pdfHeaderQueryCellInfo";
var accessPredicate = "access-predicate";
var contextMenuClick = "contextMenuClick";
var freezeRender = "freezerender";
var freezeRefresh = "freezerefresh";
var contextMenuOpen = "contextMenuOpen";
var columnMenuClick = "columnMenuClick";
var columnMenuOpen = "columnMenuOpen";
var filterOpen = "filterOpen";
var filterDialogCreated = "filterDialogCreated";
var filterMenuClose = "filter-menu-close";
var initForeignKeyColumn = "initForeignKeyColumn";
var getForeignKeyData = "getForeignKeyData";
var generateQuery = "generateQuery";
var showEmptyGrid = "showEmptyGrid";
var foreignKeyData = "foreignKeyData";
var columnDataStateChange = "columnDataStateChange";
var dataStateChange = "dataStateChange";
var dataSourceChanged = "dataSourceChanged";
var rtlUpdated = "rtl-updated";
var beforeFragAppend = "beforeFragAppend";
var frozenHeight = "frozenHeight";
var textWrapRefresh = "textWrapRefresh";
var recordAdded = "recordAdded";
var cancelBegin = "cancel-Begin";
var editNextValCell = "editNextValCell";
var hierarchyPrint = "hierarchyprint";
var expandChildGrid = "expandchildgrid";
var printGridInit = "printGrid-Init";
var exportRowDataBound = "export-RowDataBound";
var exportDataBound = "export-DataBound";
var rowPositionChanged = "row-position-changed";
var columnChooserOpened = "columnChooserOpened";
var batchForm = "batchedit-form";
var beforeStartEdit = "edit-form";
var beforeBatchCancel = "before-batch-cancel";
var batchEditFormRendered = "batcheditform-rendered";
var partialRefresh = "partial-refresh";
var beforeCustomFilterOpen = "beforeCustomFilterOpen";
var selectVirtualRow = "select-virtual-Row";
var columnsPrepared = "columns-prepared";
var cBoxFltrBegin = "cbox-filter-begin";
var cBoxFltrComplete = "cbox-filter-complete";
var fltrPrevent = "filter-Prevent";
var beforeFltrcMenuOpen = "before-filter-cmenu-open";
var valCustomPlacement = "validation-custom-placement";
var filterCboxValue = "filter-cbox-value";
var componentRendered = "component-rendered";
var restoreFocus = "restore-Focus";
var detailStateChange = "detail-state-change";
var detailIndentCellInfo = "detail-indentcell-info";
var virtaulKeyHandler = "virtaul-key-handler";
var virtaulCellFocus = "virtaul-cell-focus";
var virtualScrollEditActionBegin = "virtual-scroll-edit-action-begin";
var virtualScrollEditSuccess = "virtual-scroll-edit-success";
var virtualScrollEditCancel = "virtual-scroll-edit-cancel";
var virtualScrollEdit = "virtual-scroll-edit";
var refreshVirtualCache = "refresh-virtual-cache";
var editReset = "edit-reset";
var virtualScrollAddActionBegin = "virtual-scroll-add-action-begin";
var getVirtualData = "get-virtual-data";
var refreshInfiniteModeBlocks = "refresh-infinite-mode-blocks";
var resetInfiniteBlocks = "reset-infinite-blocks";
var infiniteScrollHandler = "infinite-scroll-handler";
var infinitePageQuery = "infinite-page-query";
var infiniteShowHide = "infinite-show-hide";
var appendInfiniteContent = "append-infinite-content";
var removeInfiniteRows = "remove-infinite-rows";
var setInfiniteCache = "set-infinite-cache";
var infiniteEditHandler = "infinite-edit-handler";
var initialCollapse = "initial-collapse";
var getAggregateQuery = "get-aggregate-query";
var closeFilterDialog = "close-filter-dialog";
var columnChooserCancelBtnClick = "columnChooserCancelBtnClick";
var getFilterBarOperator = "get-filterbar-operator";
var resetColumns = "reset-columns";
var pdfAggregateQueryCellInfo = "pdfAggregateQueryCellInfo";
var excelAggregateQueryCellInfo = "excelAggregateQueryCellInfo";
var setGroupCache = "group-cache";
var lazyLoadScrollHandler = "lazy-load-scroll-handler";
var groupCollapse = "group-collapse";
var beforeCheckboxRenderer = "beforeCheckboxRenderer";
var refreshHandlers = "refreshResizeHandlers";
var refreshFrozenColumns = "refresh-frozen-columns";
var setReorderDestinationElement = "set-reorder-destination-element";
var refreshVirtualFrozenHeight = "refresh-virtual-frozen-height";
var setFreezeSelection = "set-freeze-selection";
var setInfiniteFrozenHeight = "set-infinite-frozen-height";
var setInfiniteColFrozenHeight = "set-infinite-col-frozen-height";
var beforeRefreshOnDataChange = "before-refresh-on-data-change";
var immutableBatchCancel = "immutable-batch-cancel";
var refreshVirtualFrozenRows = "refresh-virtual-frozenrows";
var checkScrollReset = "check-scroll-reset";
var refreshFrozenHeight = "refresh-frozen-height";
var setHeightToFrozenElement = "set-height-to-frozen-element";
var preventFrozenScrollRefresh = "prevent-frozen-scroll-refresh";
var nextCellIndex = "next-cell-index";
var refreshInfiniteCurrentViewData = "refresh-infinite-current-view-data";
var infiniteCrudCancel = "infinite-crud-cancel";
var filterDialogClose = "filter-dialog-close";
var refreshCustomFilterOkBtn = "refresh-cutsom-filter-ok-button";
var refreshCustomFilterClearBtn = "refresh-cutsom-filter-clear-button";
var renderResponsiveCmenu = "render-responsive-cmenu";
var filterCmenuSelect = "filter-cmenu-select";
var customFilterClose = "custom-filter-close";
var setFullScreenDialog = "set-fullscreen-dialog";
var refreshExpandandCollapse = "refresh-Expand-and-Collapse";
var rowModeChange = "row-mode-change";
var enterKeyHandler = "enter-key-handler";
var refreshVirtualMaxPage = "refresh-virtual-max-page";
var setVirtualPageQuery = "set-virtual-page-query";
var selectRowOnContextOpen = "select-row-on-context-open";
var pagerRefresh = "pager-refresh";
var closeInline = "closeinline";
var closeBatch = "closebatch";
var closeEdit = "close-edit";
var resetVirtualFocus = "reset-virtual-focus";
var afterContentRender = "after-content-renderer";
var refreshVirtualEditFormCells = "refresh-virtual-editform-cells";
var scrollToEdit = "scroll-to-edit";
var beforeCheckboxRendererQuery = "before-checkbox-renderer-query";
var createVirtualValidationForm = "create-virtual-validation-form";
var validateVirtualForm = "validate-virtual-form";
var destroyChildGrid = "destroy-child-grid";
var stickyScrollComplete = "sticky-scroll-complete";
var captionActionComplete = "infinite-group-collapse";
var refreshInfinitePersistSelection = "refresh-infinite-persist-selection";
var refreshInfiniteEditrowindex = "refresh-infinite-editrowindex";
var afterFilterColumnMenuClose = "after-filter-column-menu-close";
var beforeCheckboxfilterRenderer = "beforeCheckboxfilterRenderer";
var commandColumnDestroy = "commandColumnDestroy";
var batchCnfrmDlgCancel = "cancelcnfrmDlg";
var refreshVirtualLazyLoadCache = "refresh-Virtual-LazyLoad-Cache";
var refreshFrozenPosition = "refresh-Frozen-Position";
var refreshResizePosition = "refresh-Resize-Position";
var refreshSplitFrozenColumn = "refresh-Split-Frozen-Column";
var renderResponsiveChangeAction = "render-Responsive-Change-Action";
var renderResponsiveColumnChooserDiv = "render-Responsive-Column-Chooser-Div";
var showAddNewRowFocus = "show-Add-New-Row-Focus";
var infiniteScrollComplete = "infinitescroll-complete";

// node_modules/@syncfusion/ej2-grids/src/grid/base/enum.js
var CellType;
(function(CellType2) {
  CellType2[CellType2["Data"] = 0] = "Data";
  CellType2[CellType2["Header"] = 1] = "Header";
  CellType2[CellType2["Summary"] = 2] = "Summary";
  CellType2[CellType2["GroupSummary"] = 3] = "GroupSummary";
  CellType2[CellType2["CaptionSummary"] = 4] = "CaptionSummary";
  CellType2[CellType2["Filter"] = 5] = "Filter";
  CellType2[CellType2["Indent"] = 6] = "Indent";
  CellType2[CellType2["GroupCaption"] = 7] = "GroupCaption";
  CellType2[CellType2["GroupCaptionEmpty"] = 8] = "GroupCaptionEmpty";
  CellType2[CellType2["Expand"] = 9] = "Expand";
  CellType2[CellType2["HeaderIndent"] = 10] = "HeaderIndent";
  CellType2[CellType2["StackedHeader"] = 11] = "StackedHeader";
  CellType2[CellType2["DetailHeader"] = 12] = "DetailHeader";
  CellType2[CellType2["DetailExpand"] = 13] = "DetailExpand";
  CellType2[CellType2["CommandColumn"] = 14] = "CommandColumn";
  CellType2[CellType2["DetailFooterIntent"] = 15] = "DetailFooterIntent";
  CellType2[CellType2["RowDragIcon"] = 16] = "RowDragIcon";
  CellType2[CellType2["RowDragHIcon"] = 17] = "RowDragHIcon";
})(CellType || (CellType = {}));
var RenderType;
(function(RenderType2) {
  RenderType2[RenderType2["Header"] = 0] = "Header";
  RenderType2[RenderType2["Content"] = 1] = "Content";
  RenderType2[RenderType2["Summary"] = 2] = "Summary";
})(RenderType || (RenderType = {}));
var ToolbarItem;
(function(ToolbarItem2) {
  ToolbarItem2[ToolbarItem2["Add"] = 0] = "Add";
  ToolbarItem2[ToolbarItem2["Edit"] = 1] = "Edit";
  ToolbarItem2[ToolbarItem2["Update"] = 2] = "Update";
  ToolbarItem2[ToolbarItem2["Delete"] = 3] = "Delete";
  ToolbarItem2[ToolbarItem2["Cancel"] = 4] = "Cancel";
  ToolbarItem2[ToolbarItem2["Print"] = 5] = "Print";
  ToolbarItem2[ToolbarItem2["Search"] = 6] = "Search";
  ToolbarItem2[ToolbarItem2["ColumnChooser"] = 7] = "ColumnChooser";
  ToolbarItem2[ToolbarItem2["PdfExport"] = 8] = "PdfExport";
  ToolbarItem2[ToolbarItem2["ExcelExport"] = 9] = "ExcelExport";
  ToolbarItem2[ToolbarItem2["CsvExport"] = 10] = "CsvExport";
  ToolbarItem2[ToolbarItem2["WordExport"] = 11] = "WordExport";
})(ToolbarItem || (ToolbarItem = {}));
var ResponsiveDialogAction;
(function(ResponsiveDialogAction2) {
  ResponsiveDialogAction2[ResponsiveDialogAction2["isEdit"] = 0] = "isEdit";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isAdd"] = 1] = "isAdd";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isSort"] = 2] = "isSort";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isFilter"] = 3] = "isFilter";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isColMenu"] = 4] = "isColMenu";
  ResponsiveDialogAction2[ResponsiveDialogAction2["isColumnChooser"] = 5] = "isColumnChooser";
})(ResponsiveDialogAction || (ResponsiveDialogAction = {}));
var ResponsiveToolbarAction;
(function(ResponsiveToolbarAction2) {
  ResponsiveToolbarAction2[ResponsiveToolbarAction2["isInitial"] = 0] = "isInitial";
  ResponsiveToolbarAction2[ResponsiveToolbarAction2["isSearch"] = 1] = "isSearch";
})(ResponsiveToolbarAction || (ResponsiveToolbarAction = {}));

// node_modules/@syncfusion/ej2-grids/src/grid/actions/data.js
var Data = (
  /** @class */
  function() {
    function Data2(parent, serviceLocator) {
      this.dataState = {
        isPending: false,
        resolver: null,
        group: []
      };
      this.foreignKeyDataState = {
        isPending: false,
        resolver: null
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.initDataManager();
      if (this.parent.isDestroyed || this.getModuleName() === "foreignKey") {
        return;
      }
      this.parent.on(rowsAdded, this.addRows, this);
      this.parent.on(rowPositionChanged, this.reorderRows, this);
      this.parent.on(rowsRemoved, this.removeRows, this);
      this.parent.on(dataSourceModified, this.initDataManager, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(updateData, this.crudActions, this);
      this.parent.on(addDeleteAction, this.getData, this);
      this.parent.on(autoCol, this.refreshFilteredCols, this);
      this.parent.on(columnsPrepared, this.refreshFilteredCols, this);
    }
    Data2.prototype.reorderRows = function(e) {
      if (this.parent.getDataModule().isRemote()) {
        this.parent.getCurrentViewRecords().splice(e.toIndex, 0, this.parent.getCurrentViewRecords().splice(e.fromIndex, 1)[0]);
      } else {
        this.dataManager.dataSource.json.splice(e.toIndex, 0, this.dataManager.dataSource.json.splice(e.fromIndex, 1)[0]);
      }
    };
    Data2.prototype.getModuleName = function() {
      return "data";
    };
    Data2.prototype.initDataManager = function() {
      var gObj = this.parent;
      this.dataManager = gObj.dataSource instanceof DataManager ? gObj.dataSource : isNullOrUndefined(gObj.dataSource) ? new DataManager() : new DataManager(gObj.dataSource);
      if (gObj.isAngular && !(gObj.query instanceof Query)) {
        gObj.setProperties({
          query: new Query()
        }, true);
      } else {
        this.isQueryInvokedFromData = true;
        if (!(gObj.query instanceof Query)) {
          gObj.query = new Query();
        }
      }
    };
    Data2.prototype.generateQuery = function(skipPage, isAutoCompleteCall) {
      var gObj = this.parent;
      var query = !isNullOrUndefined(gObj.getQuery()) ? gObj.getQuery().clone() : new Query();
      if (this.parent.columnQueryMode === "ExcludeHidden") {
        query.select(this.parent.getColumns().filter(function(column) {
          return !(column.isPrimaryKey !== true && column.visible === false || column.field === void 0);
        }).map(function(column) {
          return column.field;
        }));
      } else if (this.parent.columnQueryMode === "Schema") {
        var selectQueryFields = [];
        var columns = this.parent.columns;
        for (var i = 0; i < columns.length; i++) {
          selectQueryFields.push(columns[parseInt(i.toString(), 10)].field);
        }
        query.select(selectQueryFields);
      }
      this.filterQuery(query);
      this.searchQuery(query);
      this.aggregateQuery(query);
      this.sortQuery(query);
      if (isGroupAdaptive(this.parent)) {
        this.virtualGroupPageQuery(query);
      } else {
        this.pageQuery(query, skipPage);
      }
      if (isNullOrUndefined(isAutoCompleteCall) || !isAutoCompleteCall) {
        this.groupQuery(query);
      }
      return query;
    };
    Data2.prototype.aggregateQuery = function(query) {
      var rows = this.parent.aggregates;
      for (var i = 0; i < rows.length; i++) {
        var row2 = rows[parseInt(i.toString(), 10)];
        for (var j = 0; j < row2.columns.length; j++) {
          var cols = row2.columns[parseInt(j.toString(), 10)];
          var types = cols.type instanceof Array ? cols.type : [cols.type];
          for (var k = 0; k < types.length; k++) {
            query.aggregate(types[parseInt(k.toString(), 10)].toLowerCase(), cols.field);
          }
        }
      }
      return query;
    };
    Data2.prototype.virtualGroupPageQuery = function(query) {
      var fName = "fn";
      if (query.queries.length) {
        for (var i = 0; i < query.queries.length; i++) {
          if (query.queries[parseInt(i.toString(), 10)]["" + fName] === "onPage") {
            query.queries.splice(i, 1);
          }
        }
      }
      return query;
    };
    Data2.prototype.pageQuery = function(query, skipPage) {
      var gObj = this.parent;
      var fName = "fn";
      var args = {
        query,
        skipPage: false
      };
      gObj.notify(setVirtualPageQuery, args);
      if (args.skipPage) {
        return query;
      }
      if ((gObj.allowPaging || gObj.enableVirtualization || gObj.enableInfiniteScrolling) && skipPage !== true) {
        gObj.pageSettings.currentPage = Math.max(1, gObj.pageSettings.currentPage);
        if (gObj.pageSettings.pageCount <= 0) {
          gObj.pageSettings.pageCount = 8;
        }
        if (gObj.pageSettings.pageSize <= 0) {
          gObj.pageSettings.pageSize = 12;
        }
        if (query.queries.length) {
          for (var i = 0; i < query.queries.length; i++) {
            if (query.queries[parseInt(i.toString(), 10)]["" + fName] === "onPage") {
              query.queries.splice(i, 1);
            }
          }
        }
        if (!isNullOrUndefined(gObj.infiniteScrollModule) && gObj.enableInfiniteScrolling) {
          this.parent.notify(infinitePageQuery, query);
        } else {
          query.page(gObj.pageSettings.currentPage, gObj.allowPaging && gObj.pagerModule && gObj.pagerModule.pagerObj.isAllPage && !gObj.isManualRefresh && !this.dataManager.dataSource.offline && !(this.dataManager.adaptor instanceof RemoteSaveAdaptor) ? null : gObj.pageSettings.pageSize);
        }
      }
      return query;
    };
    Data2.prototype.groupQuery = function(query) {
      var gObj = this.parent;
      if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
        if (this.parent.groupSettings.enableLazyLoading) {
          query.lazyLoad.push({
            key: "isLazyLoad",
            value: this.parent.groupSettings.enableLazyLoading
          });
        }
        var columns = gObj.groupSettings.columns;
        for (var i = 0, len = columns.length; i < len; i++) {
          var column = this.getColumnByField(columns[parseInt(i.toString(), 10)]);
          if (!column) {
            this.parent.log("initial_action", {
              moduleName: "group",
              columnName: columns[parseInt(i.toString(), 10)]
            });
          }
          var isGrpFmt = column.enableGroupByFormat;
          var format = column.format;
          if (isGrpFmt) {
            query.group(columns[parseInt(i.toString(), 10)], this.formatGroupColumn.bind(this), format);
          } else {
            query.group(columns[parseInt(i.toString(), 10)], null);
          }
        }
      }
      return query;
    };
    Data2.prototype.sortQuery = function(query) {
      var gObj = this.parent;
      if ((gObj.allowSorting || gObj.allowGrouping) && gObj.sortSettings.columns.length) {
        var columns = gObj.sortSettings.columns;
        var sortGrp = [];
        for (var i = columns.length - 1; i > -1; i--) {
          var col = this.getColumnByField(columns[parseInt(i.toString(), 10)].field);
          if (col) {
            col.setSortDirection(columns[parseInt(i.toString(), 10)].direction);
          } else {
            this.parent.log("initial_action", {
              moduleName: "sort",
              columnName: columns[parseInt(i.toString(), 10)].field
            });
            return query;
          }
          var fn = columns[parseInt(i.toString(), 10)].direction;
          if (col.sortComparer) {
            this.parent.log("grid_sort_comparer");
            fn = !this.isRemote() ? col.sortComparer.bind(col) : columns[parseInt(i.toString(), 10)].direction;
          }
          if (gObj.groupSettings.columns.indexOf(columns[parseInt(i.toString(), 10)].field) === -1) {
            if (col.isForeignColumn() || col.sortComparer) {
              query.sortByForeignKey(col.field, fn, void 0, columns[parseInt(i.toString(), 10)].direction.toLowerCase());
            } else {
              query.sortBy(col.field, fn);
            }
          } else {
            sortGrp.push({
              direction: fn,
              field: col.field
            });
          }
        }
        for (var i = 0, len = sortGrp.length; i < len; i++) {
          if (typeof sortGrp[parseInt(i.toString(), 10)].direction === "string") {
            query.sortBy(sortGrp[parseInt(i.toString(), 10)].field, sortGrp[parseInt(i.toString(), 10)].direction);
          } else {
            var col = this.getColumnByField(sortGrp[parseInt(i.toString(), 10)].field);
            query.sortByForeignKey(sortGrp[parseInt(i.toString(), 10)].field, sortGrp[parseInt(i.toString(), 10)].direction, void 0, col.getSortDirection().toLowerCase());
          }
        }
      }
      return query;
    };
    Data2.prototype.searchQuery = function(query, fcolumn, isForeignKey) {
      var sSettings = this.parent.searchSettings;
      var fields = !isNullOrUndefined(sSettings.fields) && sSettings.fields.length ? sSettings.fields : this.getSearchColumnFieldNames();
      var predicateList = [];
      var needForeignKeySearch = false;
      if (!isNullOrUndefined(this.parent.searchSettings.key) && this.parent.searchSettings.key.length) {
        needForeignKeySearch = this.parent.getForeignKeyColumns().some(function(col) {
          return fields.indexOf(col.field) > -1;
        });
        var adaptor = !isForeignKey ? this.dataManager.adaptor : fcolumn.dataSource.adaptor;
        if (needForeignKeySearch || adaptor.getModuleName && adaptor.getModuleName() === "ODataV4Adaptor") {
          fields = isForeignKey ? [fcolumn.foreignKeyValue] : fields;
          for (var i = 0; i < fields.length; i++) {
            var column = isForeignKey ? fcolumn : this.getColumnByField(fields[parseInt(i.toString(), 10)]);
            if (column.isForeignColumn() && !isForeignKey) {
              predicateList = this.fGeneratePredicate(column, predicateList);
            } else {
              predicateList.push(new Predicate(fields[parseInt(i.toString(), 10)], sSettings.operator, sSettings.key, sSettings.ignoreCase, sSettings.ignoreAccent));
            }
          }
          var predList = Predicate.or(predicateList);
          predList.key = sSettings.key;
          query.where(predList);
        } else {
          query.search(sSettings.key, fields, sSettings.operator, sSettings.ignoreCase, sSettings.ignoreAccent);
        }
      }
      return query;
    };
    Data2.prototype.filterQuery = function(query, column, skipFoerign) {
      var gObj = this.parent;
      var predicateList = [];
      var actualFilter = [];
      var foreignColumn = this.parent.getForeignKeyColumns();
      var foreignColEmpty;
      if (gObj.allowFiltering && gObj.filterSettings.columns.length) {
        var columns = column ? column : gObj.filterSettings.columns;
        var colType = {};
        for (var _i = 0, _a = gObj.getColumns(); _i < _a.length; _i++) {
          var col = _a[_i];
          colType[col.field] = col.filter.type ? col.filter.type : gObj.filterSettings.type;
        }
        var foreignCols = [];
        var defaultFltrCols = [];
        for (var _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {
          var col = columns_1[_b];
          var gridColumn = col.isForeignKey ? gObj.getColumnByUid(col.uid) : gObj.getColumnByField(col.field);
          if (isNullOrUndefined(col.type) && gridColumn && (gridColumn.type === "date" || gridColumn.type === "datetime" || gridColumn.type === "dateonly")) {
            col.type = col.isForeignKey ? gObj.getColumnByUid(col.uid).type : gObj.getColumnByField(col.field).type;
          }
          if (col.isForeignKey) {
            foreignCols.push(col);
          } else {
            defaultFltrCols.push(col);
          }
        }
        if (defaultFltrCols.length) {
          for (var i = 0, len = defaultFltrCols.length; i < len; i++) {
            defaultFltrCols[parseInt(i.toString(), 10)].uid = defaultFltrCols[parseInt(i.toString(), 10)].uid || this.parent.grabColumnByFieldFromAllCols(defaultFltrCols[parseInt(i.toString(), 10)].field, defaultFltrCols[parseInt(i.toString(), 10)].isForeignKey).uid;
          }
          var excelPredicate = CheckBoxFilterBase.getPredicate(defaultFltrCols);
          for (var _c = 0, _d = Object.keys(excelPredicate); _c < _d.length; _c++) {
            var prop = _d[_c];
            predicateList.push(excelPredicate["" + prop]);
          }
        }
        if (foreignCols.length) {
          for (var _e = 0, foreignCols_1 = foreignCols; _e < foreignCols_1.length; _e++) {
            var col = foreignCols_1[_e];
            col.uid = col.uid || this.parent.grabColumnByFieldFromAllCols(col.field, col.isForeignKey).uid;
            var column_1 = this.parent.grabColumnByUidFromAllCols(col.uid);
            if (!column_1) {
              this.parent.log("initial_action", {
                moduleName: "filter",
                columnName: col.field
              });
            }
            if (column_1.isForeignColumn() && getColumnByForeignKeyValue(col.field, foreignColumn) && !skipFoerign) {
              actualFilter.push(col);
              if (!column_1.columnData.length) {
                foreignColEmpty = true;
              }
              predicateList = this.fGeneratePredicate(column_1, predicateList);
            } else {
              var excelPredicate = CheckBoxFilterBase.getPredicate(columns);
              for (var _f = 0, _g = Object.keys(excelPredicate); _f < _g.length; _f++) {
                var prop = _g[_f];
                predicateList.push(excelPredicate["" + prop]);
              }
            }
          }
        }
        if (predicateList.length && !foreignColEmpty) {
          query.where(Predicate.and(predicateList));
        } else {
          this.parent.notify(showEmptyGrid, {});
        }
      }
      return query;
    };
    Data2.prototype.fGeneratePredicate = function(col, predicateList) {
      var fPredicate = {};
      if (col) {
        this.parent.notify(generateQuery, {
          predicate: fPredicate,
          column: col
        });
        if (fPredicate.predicate.predicates.length) {
          predicateList.push(fPredicate.predicate);
        }
      }
      return predicateList;
    };
    Data2.prototype.getData = function(args, query) {
      var _this = this;
      if (args === void 0) {
        args = {
          requestType: ""
        };
      }
      var key = this.getKey(args.foreignKeyData && Object.keys(args.foreignKeyData).length ? args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
      this.parent.log("datasource_syntax_mismatch", {
        dataState: this.parent
      });
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        var def = this.eventPromise(args, query, key);
        return def.promise;
      } else {
        var crud = void 0;
        switch (args.requestType) {
          case "delete":
            query = query ? query : this.generateQuery();
            var len = Object.keys(args.data).length;
            if (len === 1) {
              crud = this.dataManager.remove(key, args.data[0], query.fromTable, query);
            } else {
              var changes = {
                addedRecords: [],
                deletedRecords: [],
                changedRecords: []
              };
              changes.deletedRecords = args.data;
              crud = this.dataManager.saveChanges(changes, key, query.fromTable, query.requiresCount());
            }
            break;
          case "save":
            query = query ? query : this.generateQuery();
            args.index = isNullOrUndefined(args.index) ? 0 : args.index;
            crud = this.dataManager.insert(args.data, query.fromTable, query, args.index);
            break;
        }
        var promise = "promise";
        args["" + promise] = crud;
        if (crud && !Array.isArray(crud) && !crud.hasOwnProperty("deletedRecords")) {
          return crud.then(function() {
            return _this.insert(query, args);
          });
        } else {
          return this.insert(query, args);
        }
      }
    };
    Data2.prototype.insert = function(query, args) {
      if (args.requestType === "save") {
        this.parent.notify(recordAdded, args);
      }
      return this.executeQuery(query);
    };
    Data2.prototype.executeQuery = function(query) {
      var _this = this;
      if (this.dataManager.ready) {
        var deferred_1 = new Deferred();
        var ready = this.dataManager.ready;
        ready.then(function() {
          _this.dataManager.executeQuery(query).then(function(result) {
            deferred_1.resolve(result);
          });
        }).catch(function(e) {
          deferred_1.reject(e);
        });
        return deferred_1.promise;
      } else {
        return this.dataManager.executeQuery(query);
      }
    };
    Data2.prototype.formatGroupColumn = function(value, field) {
      var serviceLocator = this.serviceLocator;
      var column = this.getColumnByField(field);
      var date = value;
      if (!column.type) {
        column.type = date.getDay ? date.getHours() > 0 || date.getMinutes() > 0 || date.getSeconds() > 0 || date.getMilliseconds() > 0 ? "datetime" : "date" : typeof value;
      }
      if (isNullOrUndefined(column.getFormatter())) {
        setFormatter(serviceLocator, column);
      }
      var formatVal = ValueFormatter.prototype.toView(value, column.getFormatter());
      return formatVal;
    };
    Data2.prototype.crudActions = function(args) {
      var query = this.generateQuery();
      var promise = null;
      var pr = "promise";
      var key = this.getKey(args.foreignKeyData && Object.keys(args.foreignKeyData).length ? args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        this.eventPromise(args, query, key);
      }
      switch (args.requestType) {
        case "save":
          promise = this.dataManager.update(key, args.data, query.fromTable, query, args.previousData);
          break;
      }
      args["" + pr] = promise ? promise : args["" + pr];
      this.parent.notify(crudAction, args);
    };
    Data2.prototype.saveChanges = function(changes, key, original, query) {
      if (query === void 0) {
        query = this.generateQuery();
      }
      query.requiresCount();
      if ("result" in this.parent.dataSource) {
        var deff = new Deferred();
        var args = {
          requestType: "batchsave",
          changes,
          key,
          query,
          endEdit: deff.resolve
        };
        this.setState({
          isPending: true,
          resolver: deff.resolve
        });
        this.parent.trigger(dataSourceChanged, args);
        return deff.promise;
      } else {
        var promise = this.dataManager.saveChanges(changes, key, query.fromTable, query, original);
        return promise;
      }
    };
    Data2.prototype.getKey = function(keys) {
      if (keys && keys.length) {
        return keys[0];
      }
      return void 0;
    };
    Data2.prototype.isRemote = function() {
      return this.dataManager.dataSource.offline !== true && this.dataManager.dataSource.url !== void 0 && this.dataManager.dataSource.url !== "";
    };
    Data2.prototype.addRows = function(e) {
      for (var i = e.records.length; i > 0; i--) {
        if (this.parent.dataSource instanceof DataManager && this.dataManager.dataSource.offline) {
          this.dataManager.dataSource.json.splice(e.toIndex, 0, e.records[i - 1]);
        } else if (!this.parent.getDataModule().isRemote() && !isNullOrUndefined(this.parent.dataSource) && !this.parent.dataSource.result) {
          this.parent.dataSource["splice"](e.toIndex, 0, e.records[i - 1]);
        }
      }
    };
    Data2.prototype.removeRows = function(e) {
      var json = this.dataManager.dataSource.json;
      if (this.parent.dataSource instanceof DataManager && this.dataManager.dataSource.offline) {
        this.dataManager.dataSource.json = json.filter(function(value) {
          return e.records.indexOf(value) === -1;
        });
      } else if (!this.parent.getDataModule().isRemote() && !isNullOrUndefined(this.parent.dataSource) && !this.parent.dataSource.result) {
        this.parent.dataSource = json.filter(function(value) {
          return e.records.indexOf(value) === -1;
        });
      }
    };
    Data2.prototype.getColumnByField = function(field) {
      var col;
      return this.parent.columnModel.some(function(column) {
        col = column;
        return column.field === field;
      }) && col;
    };
    Data2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(rowsAdded, this.addRows);
      this.parent.off(rowsRemoved, this.removeRows);
      this.parent.off(dataSourceModified, this.initDataManager);
      this.parent.off(destroy, this.destroy);
      this.parent.off(updateData, this.crudActions);
      this.parent.off(addDeleteAction, this.getData);
      this.parent.off(autoCol, this.refreshFilteredCols);
      this.parent.off(columnsPrepared, this.refreshFilteredCols);
    };
    Data2.prototype.getState = function() {
      return this.dataState;
    };
    Data2.prototype.setState = function(state) {
      return this.dataState = state;
    };
    Data2.prototype.getForeignKeyDataState = function() {
      return this.foreignKeyDataState;
    };
    Data2.prototype.setForeignKeyDataState = function(state) {
      this.foreignKeyDataState = state;
    };
    Data2.prototype.getStateEventArgument = function(query) {
      var adaptr = new UrlAdaptor();
      var dm = new DataManager({
        url: "",
        adaptor: new UrlAdaptor()
      });
      var state = adaptr.processQuery(dm, query);
      var data = JSON.parse(state.data);
      return extend(data, state.pvtData);
    };
    Data2.prototype.eventPromise = function(args, query, key) {
      var _this = this;
      var dataArgs = args;
      var state = this.getStateEventArgument(query);
      var def = new Deferred();
      var deff = new Deferred();
      if ((args.requestType !== void 0 || this.parent.groupSettings.disablePageWiseAggregates && query.queries.some(function(query2) {
        return query2.fn === "onGroup";
      })) && this.dataState.isDataChanged !== false) {
        state.action = args;
        if (args.requestType === "save" || args.requestType === "delete") {
          var editArgs_1 = args;
          editArgs_1.key = key;
          var promise = "promise";
          editArgs_1["" + promise] = deff.promise;
          editArgs_1.state = state;
          this.setState({
            isPending: true,
            resolver: deff.resolve
          });
          dataArgs.endEdit = deff.resolve;
          dataArgs.cancelEdit = deff.reject;
          this.parent.trigger(dataSourceChanged, editArgs_1);
          deff.promise.then(function() {
            _this.setState({
              isPending: true,
              resolver: def.resolve,
              group: state.group,
              aggregates: state.aggregates
            });
            if (editArgs_1.requestType === "save") {
              _this.parent.notify(recordAdded, editArgs_1);
            }
            _this.parent.trigger(dataStateChange, state);
          }).catch(function() {
            return void 0;
          });
        } else {
          this.setState({
            isPending: true,
            resolver: def.resolve,
            group: state.group,
            aggregates: state.aggregates
          });
          this.parent.trigger(dataStateChange, state);
        }
      } else {
        this.setState({});
        def.resolve(this.parent.dataSource);
      }
      return def;
    };
    Data2.prototype.getSearchColumnFieldNames = function() {
      var colFieldNames = [];
      var columns = this.parent.getColumns();
      for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var col = columns_2[_i];
        if (col.allowSearching && !isNullOrUndefined(col.field)) {
          colFieldNames.push(col.field);
        }
      }
      return colFieldNames;
    };
    Data2.prototype.refreshFilteredCols = function() {
      if (this.parent.allowFiltering && this.parent.filterSettings.columns.length) {
        refreshFilteredColsUid(this.parent, this.parent.filterSettings.columns);
      }
    };
    return Data2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/row.js
var Row = (
  /** @class */
  function() {
    function Row3(options, parent) {
      merge(this, options);
      this.parent = parent;
    }
    Row3.prototype.clone = function() {
      var row2 = new Row3({});
      merge(row2, this);
      row2.cells = this.cells.map(function(cell) {
        return cell.clone();
      });
      return row2;
    };
    Row3.prototype.setRowValue = function(data) {
      if (!this.parent) {
        return;
      }
      var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];
      this.parent.setRowData(key, data);
    };
    Row3.prototype.setCellValue = function(field, value) {
      if (!this.parent) {
        return;
      }
      var isValDiff = !(this.data["" + field].toString() === value.toString());
      if (isValDiff) {
        var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];
        var key = this.data["" + pKeyField];
        this.parent.setCellValue(key, field, value);
        this.makechanges(pKeyField, this.data);
      } else {
        return;
      }
    };
    Row3.prototype.makechanges = function(key, data) {
      if (!this.parent) {
        return;
      }
      var gObj = this.parent;
      var dataManager = gObj.getDataModule().dataManager;
      dataManager.update(key, data);
    };
    return Row3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/cell.js
var Cell = (
  /** @class */
  function() {
    function Cell3(options) {
      this.isSpanned = false;
      this.isRowSpanned = false;
      merge(this, options);
    }
    Cell3.prototype.clone = function() {
      var cell = new Cell3({});
      merge(cell, this);
      return cell;
    };
    return Cell3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-merge-renderer.js
var CellMergeRender = (
  /** @class */
  function() {
    function CellMergeRender2(serviceLocator, parent) {
      this.serviceLocator = serviceLocator;
      this.parent = parent;
    }
    CellMergeRender2.prototype.render = function(cellArgs, row2, i, td) {
      var cellRendererFact = this.serviceLocator.getService("cellRendererFactory");
      var cellRenderer = cellRendererFact.getCellRenderer(row2.cells[parseInt(i.toString(), 10)].cellType || CellType.Data);
      var colSpan = row2.cells[parseInt(i.toString(), 10)].cellSpan ? row2.cells[parseInt(i.toString(), 10)].cellSpan : cellArgs.colSpan + i <= row2.cells.length ? cellArgs.colSpan : row2.cells.length - i;
      var rowSpan = cellArgs.rowSpan;
      var visible = 0;
      var spannedCell;
      if (row2.index > 0) {
        var rowsObject = this.parent.getRowsObject();
        var cells = this.parent.groupSettings.columns.length > 0 && !rowsObject[row2.index - 1].isDataRow ? rowsObject[row2.index].cells : rowsObject[row2.index - 1].cells;
        var targetCell_1 = row2.cells[parseInt(i.toString(), 10)];
        var uid_1 = "uid";
        spannedCell = cells.filter(function(cell) {
          return cell.column.uid === targetCell_1.column["" + uid_1];
        })[0];
      }
      var colSpanLen = spannedCell && spannedCell.colSpanRange > 1 && spannedCell.rowSpanRange > 1 ? spannedCell.colSpanRange : colSpan;
      for (var j = i + 1; j < i + colSpanLen && j < row2.cells.length; j++) {
        if (row2.cells[parseInt(j.toString(), 10)].visible === false) {
          visible++;
        } else {
          row2.cells[parseInt(j.toString(), 10)].isSpanned = true;
        }
      }
      if (visible > 0) {
        for (var j = i + colSpan; j < i + colSpan + visible && j < row2.cells.length; j++) {
          row2.cells[parseInt(j.toString(), 10)].isSpanned = true;
        }
        if (i + colSpan + visible >= row2.cells.length) {
          colSpan -= i + colSpan + visible - row2.cells.length;
        }
      }
      if (row2.cells[parseInt(i.toString(), 10)].cellSpan) {
        row2.data[cellArgs.column.field] = row2.cells[parseInt(i.toString(), 10)].spanText;
        td = cellRenderer.render(row2.cells[parseInt(i.toString(), 10)], row2.data, {
          "index": !isNullOrUndefined(row2.index) ? row2.index.toString() : ""
        });
      }
      if (colSpan > 1) {
        attributes(td, {
          "colSpan": colSpan.toString(),
          "aria-colSpan": colSpan.toString()
        });
      }
      if (rowSpan > 1) {
        attributes(td, {
          "rowspan": rowSpan.toString(),
          "aria-rowspan": rowSpan.toString()
        });
        row2.cells[parseInt(i.toString(), 10)].isRowSpanned = true;
        row2.cells[parseInt(i.toString(), 10)].rowSpanRange = Number(rowSpan);
        if (colSpan > 1) {
          row2.cells[parseInt(i.toString(), 10)].colSpanRange = Number(colSpan);
        }
      }
      if (row2.index > 0 && spannedCell.rowSpanRange > 1) {
        row2.cells[parseInt(i.toString(), 10)].isSpanned = true;
        row2.cells[parseInt(i.toString(), 10)].rowSpanRange = Number(spannedCell.rowSpanRange - 1);
        row2.cells[parseInt(i.toString(), 10)].colSpanRange = spannedCell.rowSpanRange > 0 ? spannedCell.colSpanRange : 1;
      }
      if (this.parent.enableColumnVirtualization && !row2.cells[parseInt(i.toString(), 10)].cellSpan && !this.containsKey(cellArgs.column.field, cellArgs.data[cellArgs.column.field])) {
        this.backupMergeCells(cellArgs.column.field, cellArgs.data[cellArgs.column.field], cellArgs.colSpan);
      }
      return td;
    };
    CellMergeRender2.prototype.backupMergeCells = function(fName, data, span) {
      this.setMergeCells(this.generteKey(fName, data), span);
    };
    CellMergeRender2.prototype.generteKey = function(fname, data) {
      return fname + "__" + data.toString();
    };
    CellMergeRender2.prototype.splitKey = function(key) {
      return key.split("__");
    };
    CellMergeRender2.prototype.containsKey = function(fname, data) {
      return this.getMergeCells().hasOwnProperty(this.generteKey(fname, data));
    };
    CellMergeRender2.prototype.getMergeCells = function() {
      return this.parent.mergeCells;
    };
    CellMergeRender2.prototype.setMergeCells = function(key, span) {
      this.parent.mergeCells["" + key] = span;
    };
    CellMergeRender2.prototype.updateVirtualCells = function(rows) {
      var mCells = this.getMergeCells();
      for (var _i = 0, _a = Object.keys(mCells); _i < _a.length; _i++) {
        var key = _a[_i];
        var value = mCells["" + key];
        var merge2 = this.splitKey(key);
        var columnIndex = this.getIndexFromAllColumns(merge2[0]);
        var vColumnIndices = this.parent.getColumnIndexesInView();
        var span = value - (vColumnIndices[0] - columnIndex);
        if (columnIndex < vColumnIndices[0] && span > 1) {
          for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {
            var row2 = rows_1[_b];
            if (row2.data[merge2[0]].toString() === merge2[1].toString()) {
              row2.cells[0].cellSpan = span;
              row2.cells[0].spanText = merge2[1];
              break;
            }
          }
        }
      }
      return rows;
    };
    CellMergeRender2.prototype.getIndexFromAllColumns = function(field) {
      var index = iterateArrayOrObject(this.parent.getVisibleColumns(), function(item, index2) {
        if (item.field === field) {
          return index2;
        }
        return void 0;
      })[0];
      return index;
    };
    return CellMergeRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js
var rowCell = "e-rowcell";
var gridHeader = "e-gridheader";
var gridContent = "e-gridcontent";
var gridFooter = "e-gridfooter";
var headerContent = "e-headercontent";
var movableContent = "e-movablecontent";
var movableHeader = "e-movableheader";
var frozenContent = "e-frozencontent";
var frozenHeader = "e-frozenheader";
var content = "e-content";
var table = "e-table";
var row = "e-row";
var gridChkBox = "e-gridchkbox";
var editedRow = "e-editedrow";
var addedRow = "e-addedrow";
var groupCaptionRow = "e-groupcaptionrow";
var changedRecords = "changedRecords";
var addedRecords = "addedRecords";
var deletedRecords = "deletedRecords";
var leftRight = "Left-Right";
var frozenRight = "frozen-right";
var frozenLeft = "frozen-left";
var dataColIndex = "data-colindex";
var ariaColIndex = "aria-colindex";
var dataRowIndex = "data-rowindex";
var ariaRowIndex = "aria-rowindex";
var tbody = "tbody";
var colGroup = "colgroup";
var open = "open";
var change = "change";
var focus = "focus";
var create = "created";
var beforeOpen = "beforeOpen";
var downArrow = "downArrow";
var upArrow = "upArrow";
var pageUp = "PageUp";
var pageDown = "PageDown";
var enter = "enter";
var shiftEnter = "shiftEnter";
var tab = "tab";
var shiftTab = "shiftTab";
var initialFrozenColumnIndex = "initialFrozenColumnIndex";

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-renderer.js
var RowRenderer = (
  /** @class */
  function() {
    function RowRenderer2(serviceLocator, cellType, parent) {
      this.isSpan = false;
      this.cellType = cellType;
      this.serviceLocator = serviceLocator;
      this.parent = parent;
      this.element = this.parent.createElement("tr", {
        attrs: {
          role: "row"
        }
      });
    }
    RowRenderer2.prototype.render = function(row2, columns, attributes2, rowTemplate, cloneNode) {
      return this.refreshRow(row2, columns, attributes2, rowTemplate, cloneNode);
    };
    RowRenderer2.prototype.refresh = function(row2, columns, isChanged, attributes2, rowTemplate) {
      var _this = this;
      if (isChanged) {
        row2.data = extendObjWithFn({}, row2.changes);
        this.refreshMergeCells(row2);
      }
      var node = this.parent.element.querySelector("[data-uid=" + row2.uid + "]");
      var tr = this.refreshRow(row2, columns, attributes2, rowTemplate, null, isChanged);
      var cells = [].slice.call(tr.cells);
      var tempCells = [].slice.call(node.querySelectorAll(".e-templatecell"));
      if (this.parent.isReact && tempCells.length) {
        var _loop_1 = function(col2) {
          if (col2.template) {
            setTimeout(function() {
              _this.parent.refreshReactColumnTemplateByUid(col2.uid, true);
            }, 0);
            return "break";
          }
        };
        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
          var col = columns_1[_i];
          var state_1 = _loop_1(col);
          if (state_1 === "break") break;
        }
      }
      var attr = [].slice.call(tr.attributes);
      attr.map(function(item) {
        node.setAttribute(item["name"], item["value"]);
      });
      node.innerHTML = "";
      for (var _a = 0, cells_1 = cells; _a < cells_1.length; _a++) {
        var cell = cells_1[_a];
        node.appendChild(cell);
      }
    };
    RowRenderer2.prototype.refreshRow = function(row2, columns, attributes2, rowTemplate, cloneNode, isEdit) {
      var tr = !isNullOrUndefined(cloneNode) ? cloneNode : this.element.cloneNode();
      var rowArgs = {
        data: row2.data
      };
      var cellArgs = {
        data: row2.data
      };
      var chekBoxEnable = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox" && col.field;
      })[0];
      var value = false;
      var isFrozen = this.parent.isFrozenGrid();
      if (chekBoxEnable) {
        value = getObject(chekBoxEnable.field, rowArgs.data);
      }
      var selIndex = this.parent.getSelectedRowIndexes();
      if (row2.isDataRow) {
        row2.isSelected = selIndex.indexOf(row2.index) > -1 || value;
      }
      if (row2.isDataRow && this.parent.isCheckBoxSelection && this.parent.checkAllRows === "Check" && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
        row2.isSelected = true;
        if (selIndex.indexOf(row2.index) === -1) {
          selIndex.push(row2.index);
        }
      }
      this.buildAttributeFromRow(tr, row2);
      attributes(tr, extend({}, attributes2, {}));
      setStyleAndAttributes(tr, row2.attributes);
      var cellRendererFact = this.serviceLocator.getService("cellRendererFactory");
      var _loop_2 = function(i2, len2) {
        var cell = row2.cells[parseInt(i2.toString(), 10)];
        cell.isSelected = row2.isSelected;
        cell.isColumnSelected = cell.column.isSelected;
        var cellRenderer = cellRendererFact.getCellRenderer(row2.cells[parseInt(i2.toString(), 10)].cellType || CellType.Data);
        var attrs = {
          "index": !isNullOrUndefined(row2.index) ? row2.index.toString() : ""
        };
        if (row2.isExpand && row2.cells[parseInt(i2.toString(), 10)].cellType === CellType.DetailExpand) {
          attrs["class"] = this_1.parent.isPrinting ? "e-detailrowcollapse" : "e-detailrowexpand";
        }
        var td2 = cellRenderer.render(row2.cells[parseInt(i2.toString(), 10)], row2.data, attrs, row2.isExpand, isEdit);
        if (row2.cells[parseInt(i2.toString(), 10)].cellType !== CellType.Filter) {
          if (row2.cells[parseInt(i2.toString(), 10)].cellType === CellType.Data || row2.cells[parseInt(i2.toString(), 10)].cellType === CellType.CommandColumn) {
            var isReactChild2 = this_1.parent.parentDetails && this_1.parent.parentDetails.parentInstObj && this_1.parent.parentDetails.parentInstObj.isReact;
            if ((this_1.parent.isReact && this_1.parent.requireTemplateRef || isReactChild2 && this_1.parent.parentDetails.parentInstObj.requireTemplateRef) && cell.isTemplate) {
              var thisRef_1 = this_1;
              thisRef_1.parent.renderTemplates(function() {
                if (typeof cell.column.template !== "string") {
                  var ariaAttr = td2.getAttribute("aria-label");
                  td2.setAttribute("aria-label", td2.innerText + ariaAttr);
                }
                thisRef_1.parent.trigger(queryCellInfo, extend(cellArgs, {
                  cell: td2,
                  column: cell.column,
                  colSpan: 1,
                  rowSpan: 1,
                  foreignKeyData: row2.cells[parseInt(i2.toString(), 10)].foreignKeyData,
                  requestType: thisRef_1.parent.requestTypeAction
                }));
              });
            } else {
              this_1.parent.trigger(queryCellInfo, extend(cellArgs, {
                cell: td2,
                column: cell.column,
                colSpan: 1,
                rowSpan: 1,
                foreignKeyData: row2.cells[parseInt(i2.toString(), 10)].foreignKeyData,
                requestType: this_1.parent.requestTypeAction
              }));
            }
            var isRowSpanned = false;
            if (row2.index > 0 && (this_1.isSpan || this_1.parent.isSpan && isEdit)) {
              var rowsObject = this_1.parent.getRowsObject();
              var prevRowCells = this_1.parent.groupSettings.columns.length > 0 && !rowsObject[row2.index - 1].isDataRow ? rowsObject[row2.index].cells : rowsObject[row2.index - 1].cells;
              var uid_1 = "uid";
              var prevRowCell = prevRowCells.filter(function(cell2) {
                return cell2.column.uid === row2.cells[parseInt(i2.toString(), 10)].column["" + uid_1];
              })[0];
              isRowSpanned = prevRowCell.isRowSpanned ? prevRowCell.isRowSpanned : prevRowCell.rowSpanRange > 1;
            }
            if (cellArgs.rowSpan > 1 || cellArgs.colSpan > 1) {
              this_1.resetrowSpanvalue(this_1.parent.frozenRows > row2.index ? this_1.parent.frozenRows : this_1.parent.currentViewData.length, cellArgs, row2.index);
              if (cellArgs.column.visible === false) {
                cellArgs.colSpan = 1;
              } else {
                if (isFrozen) {
                  var columns_2 = this_1.parent.getColumns();
                  var right = this_1.parent.getFrozenRightColumnsCount();
                  var left = this_1.parent.getFrozenLeftCount();
                  var movableCount = columns_2.length - right;
                  var cellIdx = cellArgs.column.index;
                  if (left > cellIdx && left < cellIdx + cellArgs.colSpan) {
                    var colSpan = cellIdx + cellArgs.colSpan - left;
                    cellArgs.colSpan = cellArgs.colSpan - colSpan;
                  } else if (movableCount <= cellIdx && columns_2.length < cellIdx + cellArgs.colSpan) {
                    var colSpan = cellIdx + cellArgs.colSpan - columns_2.length;
                    cellArgs.colSpan = cellArgs.colSpan - colSpan;
                  } else if (cellArgs.column.freeze === "Fixed") {
                    var colSpan = 1;
                    var index = cellIdx;
                    for (var j2 = index + 1; j2 < index + cellArgs.colSpan; j2++) {
                      if (columns_2[parseInt(j2.toString(), 10)].freeze === "Fixed") {
                        colSpan++;
                      } else {
                        break;
                      }
                    }
                    cellArgs.colSpan = colSpan;
                  } else if (movableCount > cellIdx && movableCount < cellIdx + cellArgs.colSpan) {
                    var colSpan = cellIdx + cellArgs.colSpan - movableCount;
                    cellArgs.colSpan = cellArgs.colSpan - colSpan;
                  }
                }
              }
            }
            if (cellArgs.colSpan > 1 || row2.cells[parseInt(i2.toString(), 10)].cellSpan > 1 || cellArgs.rowSpan > 1 || isRowSpanned) {
              this_1.parent.isSpan = true;
              this_1.isSpan = true;
              var cellMerge = new CellMergeRender(this_1.serviceLocator, this_1.parent);
              td2 = cellMerge.render(cellArgs, row2, i2, td2);
              if (isFrozen) {
                resetColandRowSpanStickyPosition(this_1.parent, cellArgs.column, td2, cellArgs.colSpan);
              }
            }
          }
          if (isFrozen && this_1.isSpan) {
            var rowsObject = this_1.parent.getRowsObject();
            var isRtl = this_1.parent.enableRtl;
            if (rowsObject[row2.index - 1]) {
              var prevRowCells = rowsObject[row2.index - 1].cells;
              var prevRowCell = prevRowCells[i2 - 1];
              var nextRowCell = prevRowCells[i2 + 1];
              var direction = prevRowCells[parseInt(i2.toString(), 10)].column.freeze;
              if (prevRowCell && (prevRowCell.isRowSpanned || prevRowCell.rowSpanRange > 1) && prevRowCell.visible) {
                if (prevRowCell.column.freeze === "Fixed" && direction === "Fixed") {
                  td2.classList.add(isRtl ? "e-removefreezerightborder" : "e-removefreezeleftborder");
                } else if (!isRtl && i2 === 1 && direction === "Left") {
                  td2.classList.add("e-addfreezefirstchildborder");
                }
              }
              if (nextRowCell && (nextRowCell.isRowSpanned || nextRowCell.rowSpanRange > 1) && nextRowCell.visible && nextRowCell.column.freeze === "Fixed" && direction === "Fixed" && cellArgs.colSpan < 2) {
                td2.classList.add(isRtl ? "e-removefreezeleftborder" : "e-removefreezerightborder");
              }
            }
          }
          if (cellArgs.rowSpan > 1 && this_1.parent.currentViewData.length - row2.index === cellArgs.rowSpan) {
            td2.classList.add("e-row-span-lastrowcell");
          }
          if (!row2.cells[parseInt(i2.toString(), 10)].isSpanned) {
            tr.appendChild(td2);
          }
        }
      };
      var this_1 = this;
      for (var i = 0, len = row2.cells.length; i < len; i++) {
        _loop_2(i, len);
      }
      var emptyColspan = 0;
      if (this.parent.groupSettings.columns.length && this.parent.getFrozenLeftColumnsCount()) {
        if (tr.classList.contains("e-groupcaptionrow")) {
          var freezeCells = [].slice.call(tr.querySelectorAll(".e-leftfreeze,.e-unfreeze,.e-rightfreeze,.e-fixedfreeze,.e-freezerightborder,.e-freezeleftborder"));
          if (freezeCells.length) {
            removeClass(freezeCells, ["e-leftfreeze", "e-unfreeze", "e-rightfreeze", "e-fixedfreeze", "e-freezerightborder", "e-freezeleftborder"]);
          }
          if (tr.querySelector(".e-summarycell")) {
            groupCaptionRowLeftRightPos(tr, this.parent);
          } else {
            for (var j = 0; j < tr.childNodes.length; j++) {
              var td = tr.childNodes[parseInt(j.toString(), 10)];
              td.classList.add("e-leftfreeze");
              applyStickyLeftRightPosition(td, j * 30, this.parent.enableRtl, "Left");
              if (td.classList.contains("e-groupcaption")) {
                var oldColspan = parseInt(td.getAttribute("colspan"), 10);
                var colspan = resetColspanGroupCaption(this.parent, j);
                td.setAttribute("colspan", colspan.toString());
                emptyColspan = oldColspan - colspan;
              }
            }
            if (emptyColspan) {
              var td = this.parent.createElement("TD", {
                className: "e-groupcaption",
                attrs: {
                  colspan: emptyColspan.toString(),
                  id: this.parent.element.id + "captioncell",
                  tabindex: "-1"
                }
              });
              tr.appendChild(td);
            }
          }
        }
        if (tr.querySelectorAll(".e-leftfreeze").length && (tr.querySelectorAll(".e-indentcell").length || tr.querySelectorAll(".e-grouptopleftcell").length)) {
          var td = tr.querySelectorAll(".e-indentcell, .e-grouptopleftcell");
          for (var i = 0; i < td.length; i++) {
            td[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
            applyStickyLeftRightPosition(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, "Left");
          }
        }
      }
      var args = {
        row: tr,
        rowHeight: this.parent.rowHeight
      };
      if (row2.isDataRow) {
        var eventArg_1 = extend(rowArgs, args);
        eventArg_1.isSelectable = true;
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var cellTemplate = eventArg_1.row.querySelectorAll(".e-templatecell");
        if ((this.parent.isReact && this.parent.requireTemplateRef || isReactChild && this.parent.parentDetails.parentInstObj.requireTemplateRef) && cellTemplate.length) {
          var thisRef_2 = this;
          thisRef_2.parent.renderTemplates(function() {
            thisRef_2.parent.trigger(rowDataBound, eventArg_1);
            if (!eventArg_1.isSelectable) {
              row2.isSelectable = eventArg_1.isSelectable;
              thisRef_2.disableRowSelection(thisRef_2, row2, args, eventArg_1);
            }
          });
        } else {
          this.parent.trigger(rowDataBound, eventArg_1);
        }
        row2.isSelectable = eventArg_1.isSelectable;
        var isDraggable = this.parent.isRowDragable();
        if (this.parent.allowPaging && this.parent.selectionSettings.persistSelection) {
          var primaryKey_1 = this.parent.getPrimaryKeyFieldNames()[0];
          var pKey_1 = row2.data ? row2.data["" + primaryKey_1] : null;
          var SelectedRecords = eventArg_1.isSelectable ? this.parent.partialSelectedRecords : this.parent.disableSelectedRecords;
          if (!SelectedRecords.some(function(data) {
            return data["" + primaryKey_1] === pKey_1;
          })) {
            SelectedRecords.push(row2.data);
          }
        }
        if (!eventArg_1.isSelectable) {
          this.disableRowSelection(this, row2, args, eventArg_1);
        }
        if (this.parent.childGrid || isDraggable || this.parent.detailTemplate) {
          var td = tr.querySelectorAll(".e-rowcell:not(.e-hide)")[0];
          if (td) {
            td.classList.add("e-detailrowvisible");
          }
        }
      }
      if (this.parent.enableVirtualization) {
        rowArgs.rowHeight = this.parent.rowHeight;
      }
      if (rowArgs.rowHeight) {
        tr.style.height = rowArgs.rowHeight + "px";
      } else if (this.parent.rowHeight && (tr.querySelector(".e-headercell") || tr.querySelector(".e-groupcaption"))) {
        tr.style.height = this.parent.rowHeight + "px";
      }
      if (row2.cssClass) {
        tr.classList.add(row2.cssClass);
      }
      if (row2.lazyLoadCssClass) {
        tr.classList.add(row2.lazyLoadCssClass);
      }
      if (this.parent.rowRenderingMode === "Vertical" && this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === "Header" || this.parent.textWrapSettings.wrapMode === "Both")) {
        tr.classList.add("e-verticalwrap");
      }
      var vFTable = this.parent.enableColumnVirtualization;
      if (!vFTable && this.parent.aggregates.length && this.parent.element.scrollHeight > this.parent.height) {
        for (var i = 0; i < this.parent.aggregates.length; i++) {
          var property = "properties";
          var column = "columns";
          if (this.parent.aggregates[parseInt(i.toString(), 10)]["" + property]["" + column][0].footerTemplate) {
            var summarycell = [].slice.call(tr.getElementsByClassName("e-summarycell"));
            if (summarycell.length) {
              var lastSummaryCell = summarycell[summarycell.length - 1];
              addClass([lastSummaryCell], ["e-lastsummarycell"]);
              var firstSummaryCell = summarycell[0];
              addClass([firstSummaryCell], ["e-firstsummarycell"]);
            }
          }
        }
      }
      return tr;
    };
    RowRenderer2.prototype.resetrowSpanvalue = function(rowCount, cellArgs, rowIndex) {
      if (rowCount > rowIndex && rowCount < rowIndex + cellArgs.rowSpan) {
        var rowSpan = rowIndex + cellArgs.rowSpan - rowCount;
        cellArgs.rowSpan = cellArgs.rowSpan - rowSpan;
      }
    };
    RowRenderer2.prototype.disableRowSelection = function(thisRef, row2, args, eventArg) {
      var selIndex = this.parent.getSelectedRowIndexes();
      this.parent.selectionModule.isPartialSelection = true;
      row2.isSelected = false;
      var selRowIndex = selIndex.indexOf(row2.index);
      if (selRowIndex > -1) {
        selIndex.splice(selRowIndex, 1);
      }
      var chkBox = args.row.querySelectorAll(".e-rowcell.e-gridchkbox");
      var isDrag = eventArg.row.querySelector(".e-rowdragdrop");
      var cellIdx = thisRef.parent.groupSettings.columns.length + (isDrag || thisRef.parent.isDetail() ? 1 : 0);
      for (var i = 0; i < chkBox.length; i++) {
        chkBox[parseInt(i.toString(), 10)].firstElementChild.classList.add("e-checkbox-disabled");
        chkBox[parseInt(i.toString(), 10)].querySelector(".e-frame").classList.remove("e-check");
      }
      if (row2.cells.length) {
        for (var i = cellIdx; i < row2.cells.length; i++) {
          var cell = eventArg.row.querySelector('.e-rowcell[data-colindex="' + row2.cells[parseInt(i.toString(), 10)].index + '"]');
          if (cell) {
            removeClass([cell], ["e-selectionbackground", "e-active"]);
          }
        }
      }
      if (isDrag) {
        removeClass([isDrag], ["e-selectionbackground", "e-active"]);
      }
    };
    RowRenderer2.prototype.refreshMergeCells = function(row2) {
      for (var _i = 0, _a = row2.cells; _i < _a.length; _i++) {
        var cell = _a[_i];
        cell.isSpanned = false;
      }
      return row2;
    };
    RowRenderer2.prototype.buildAttributeFromRow = function(tr, row2) {
      var attr = {};
      var prop = {
        "rowindex": dataRowIndex,
        "dataUID": "data-uid",
        "ariaSelected": "aria-selected"
      };
      var classes = [];
      if (row2.isDataRow) {
        classes.push(row);
      }
      if (row2.isAltRow) {
        classes.push("e-altrow");
      }
      if (row2.isCaptionRow) {
        classes.push("e-groupcaptionrow");
      }
      if (row2.isAggregateRow && row2.parentUid) {
        classes.push("e-groupfooterrow");
      }
      if (!isNullOrUndefined(row2.index)) {
        attr[ariaRowIndex] = row2.index + 1;
        attr[prop.rowindex] = row2.index;
      }
      if (row2.rowSpan) {
        attr.rowSpan = row2.rowSpan;
      }
      if (row2.uid) {
        attr[prop.dataUID] = row2.uid;
      }
      if (row2.isSelected) {
        attr[prop.ariaSelected] = true;
      }
      if (row2.visible === false) {
        classes.push("e-hide");
      }
      attr.class = classes;
      setStyleAndAttributes(tr, attr);
    };
    return RowRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/row-model-generator.js
var RowModelGenerator = (
  /** @class */
  function() {
    function RowModelGenerator2(parent) {
      this.parent = parent;
    }
    RowModelGenerator2.prototype.generateRows = function(data, args) {
      var rows = [];
      var startIndex = this.parent.enableVirtualization && args ? args.startIndex : 0;
      startIndex = this.parent.enableInfiniteScrolling && args ? this.getInfiniteIndex(args) : startIndex;
      if (this.parent.enableImmutableMode && args && args.startIndex) {
        startIndex = args.startIndex;
      }
      for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {
        rows[parseInt(i.toString(), 10)] = this.generateRow(data[parseInt(i.toString(), 10)], startIndex);
      }
      return rows;
    };
    RowModelGenerator2.prototype.ensureColumns = function() {
      var cols = [];
      if (this.parent.detailTemplate || this.parent.childGrid) {
        var args = {};
        this.parent.notify(detailIndentCellInfo, args);
        cols.push(this.generateCell(args, null, CellType.DetailExpand));
      }
      if (this.parent.isRowDragable()) {
        cols.push(this.generateCell({}, null, CellType.RowDragIcon));
      }
      return cols;
    };
    RowModelGenerator2.prototype.generateRow = function(data, index, cssClass, indent, pid, tIndex, parentUid) {
      var options = {};
      options.foreignKeyData = {};
      options.uid = getUid("grid-row");
      options.data = data;
      options.index = index;
      options.indent = indent;
      options.tIndex = tIndex;
      options.isDataRow = true;
      options.parentGid = pid;
      options.parentUid = parentUid;
      if (this.parent.isPrinting) {
        if (this.parent.hierarchyPrintMode === "All") {
          options.isExpand = true;
        } else if (this.parent.hierarchyPrintMode === "Expanded" && this.parent.expandedRows && this.parent.expandedRows[parseInt(index.toString(), 10)]) {
          options.isExpand = this.parent.expandedRows[parseInt(index.toString(), 10)].isExpand;
        }
      }
      options.cssClass = cssClass;
      options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
      options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
      options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;
      this.refreshForeignKeyRow(options);
      var cells = this.ensureColumns();
      var row2 = new Row(options, this.parent);
      row2.cells = this.parent.getFrozenMode() === "Right" ? this.generateCells(options).concat(cells) : cells.concat(this.generateCells(options));
      return row2;
    };
    RowModelGenerator2.prototype.refreshForeignKeyRow = function(options) {
      var foreignKeyColumns = this.parent.getForeignKeyColumns();
      for (var i = 0; i < foreignKeyColumns.length; i++) {
        setValue(foreignKeyColumns[parseInt(i.toString(), 10)].field, getForeignData(foreignKeyColumns[parseInt(i.toString(), 10)], options.data), options.foreignKeyData);
      }
    };
    RowModelGenerator2.prototype.generateCells = function(options) {
      var dummies = this.parent.getColumns();
      var tmp = [];
      for (var i = 0; i < dummies.length; i++) {
        tmp.push(this.generateCell(dummies[parseInt(i.toString(), 10)], options.uid, isNullOrUndefined(dummies[parseInt(i.toString(), 10)].commands) ? void 0 : CellType.CommandColumn, null, i, options.foreignKeyData));
      }
      return tmp;
    };
    RowModelGenerator2.prototype.generateCell = function(column, rowId, cellType, colSpan, oIndex, foreignKeyData2) {
      var opt = {
        "visible": column.visible,
        "isDataCell": !isNullOrUndefined(column.field || column.template),
        "isTemplate": !isNullOrUndefined(column.template),
        "rowID": rowId,
        "column": column,
        "cellType": !isNullOrUndefined(cellType) ? cellType : CellType.Data,
        "colSpan": colSpan,
        "commands": column.commands,
        "isForeignKey": column.isForeignColumn && column.isForeignColumn(),
        "foreignKeyData": column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData2)
      };
      if (opt.isDataCell || opt.column.type === "checkbox" || opt.commands) {
        opt.index = oIndex;
      }
      return new Cell(opt);
    };
    RowModelGenerator2.prototype.refreshRows = function(input2) {
      for (var i = 0; i < input2.length; i++) {
        this.refreshForeignKeyRow(input2[parseInt(i.toString(), 10)]);
        input2[parseInt(i.toString(), 10)].cells = this.generateCells(input2[parseInt(i.toString(), 10)]);
      }
      return input2;
    };
    RowModelGenerator2.prototype.getInfiniteIndex = function(args) {
      return args.requestType === "infiniteScroll" || args.requestType === "delete" || args.action === "add" ? isNullOrUndefined(args.startIndex) ? args["index"] : args.startIndex : 0;
    };
    return RowModelGenerator2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/summary-model-generator.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SummaryModelGenerator = (
  /** @class */
  function() {
    function SummaryModelGenerator2(parent) {
      this.parent = parent;
    }
    SummaryModelGenerator2.prototype.getData = function() {
      var _this = this;
      var rows = [];
      var row2 = this.parent.aggregates.slice();
      for (var i = 0; i < row2.length; i++) {
        var columns = row2[parseInt(i.toString(), 10)].columns.filter(function(column) {
          return !(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate) || _this.columnSelector(column);
        });
        if (columns.length) {
          rows.push({
            columns
          });
        }
      }
      return rows;
    };
    SummaryModelGenerator2.prototype.columnSelector = function(column) {
      return column.footerTemplate !== void 0;
    };
    SummaryModelGenerator2.prototype.getColumns = function(start) {
      var columns = [];
      if (this.parent.detailTemplate || !isNullOrUndefined(this.parent.childGrid)) {
        columns.push(new Column({}));
      }
      if (this.parent.allowGrouping) {
        for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
          columns.push(new Column({}));
        }
      }
      if (this.parent.isRowDragable() && !start) {
        columns.push(new Column({}));
      }
      columns.push.apply(columns, this.parent.getColumns());
      return columns;
    };
    SummaryModelGenerator2.prototype.generateRows = function(input2, args, start, end, columns) {
      if (input2.length === 0) {
        if (args === void 0 || !(args.count || args.loadSummaryOnEmpty)) {
          return [];
        }
      }
      var data = this.buildSummaryData(input2, args);
      var rows = [];
      var row2 = this.getData();
      for (var i = 0; i < row2.length; i++) {
        rows.push(this.getGeneratedRow(row2[parseInt(i.toString(), 10)], data[parseInt(i.toString(), 10)], args ? args.level : void 0, start, end, args ? args.parentUid : void 0, columns));
      }
      return rows;
    };
    SummaryModelGenerator2.prototype.getGeneratedRow = function(summaryRow, data, raw, start, end, parentUid, columns) {
      var tmp = [];
      var indents = this.getIndentByLevel();
      var isDetailGridAlone = !isNullOrUndefined(this.parent.childGrid);
      var indentLength = this.parent.getIndentCount();
      if (this.parent.groupSettings.columns.length && this.parent.allowRowDragAndDrop) {
        indents.push("e-indentcelltop");
      } else if (this.parent.isRowDragable() && !start) {
        indents = ["e-indentcelltop"];
      }
      var values = columns ? columns : this.getColumns(start);
      for (var i = 0; i < values.length; i++) {
        tmp.push(this.getGeneratedCell(values[parseInt(i.toString(), 10)], summaryRow, i >= indentLength ? this.getCellType() : i === 0 && this.parent.childGrid ? CellType.DetailFooterIntent : CellType.Indent, indents[parseInt(i.toString(), 10)], isDetailGridAlone));
      }
      var row2 = new Row({
        data,
        attributes: {
          class: "e-summaryrow"
        }
      });
      row2.cells = tmp;
      row2.uid = getUid("grid-row");
      row2.parentUid = parentUid;
      row2.isAggregateRow = true;
      row2.visible = tmp.some(function(cell) {
        return cell.isDataCell && cell.visible;
      });
      return row2;
    };
    SummaryModelGenerator2.prototype.getGeneratedCell = function(column, summaryRow, cellType, indent, isDetailGridAlone) {
      var sColumn = summaryRow.columns.filter(function(scolumn) {
        return scolumn.columnName === column.field;
      })[0];
      var attrs = {
        "style": {
          "textAlign": column.textAlign
        },
        "e-mappinguid": column.uid,
        index: column.index
      };
      if (indent) {
        attrs.class = indent;
      }
      if (isNullOrUndefined(indent) && isDetailGridAlone) {
        attrs.class = "e-detailindentcelltop";
      }
      var opt = {
        "visible": column.visible,
        "isDataCell": !isNullOrUndefined(sColumn),
        "isTemplate": sColumn && !isNullOrUndefined(sColumn.footerTemplate || sColumn.groupFooterTemplate || sColumn.groupCaptionTemplate),
        "column": sColumn || {},
        "attributes": attrs,
        "cellType": cellType
      };
      opt.column.headerText = column.headerText;
      return new Cell(opt);
    };
    SummaryModelGenerator2.prototype.buildSummaryData = function(data, args) {
      var dummy = [];
      var summaryRows = this.getData();
      var single = {};
      for (var i = 0; i < summaryRows.length; i++) {
        single = {};
        var column = summaryRows[parseInt(i.toString(), 10)].columns;
        for (var j = 0; j < column.length; j++) {
          single = this.setTemplate(column[parseInt(j.toString(), 10)], args && args.aggregates ? args : data, single);
        }
        dummy.push(single);
      }
      return dummy;
    };
    SummaryModelGenerator2.prototype.getIndentByLevel = function() {
      return this.parent.groupSettings.columns.map(function() {
        return "e-indentcelltop";
      });
    };
    SummaryModelGenerator2.prototype.setTemplate = function(column, data, single) {
      var types = column.type;
      var helper = {};
      var formatFn = column.getFormatter() || /* @__PURE__ */ function() {
        return function(a) {
          return a;
        };
      }();
      var group = data;
      if (!(types instanceof Array)) {
        types = [column.type];
      }
      for (var i = 0; i < types.length; i++) {
        var key = column.field + " - " + types[parseInt(i.toString(), 10)].toLowerCase();
        var disp = column.columnName;
        var disablePageWiseAggregatesGroup = this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length && group.items ? true : false;
        var val = (types[parseInt(i.toString(), 10)] !== "Custom" || disablePageWiseAggregatesGroup) && group.aggregates && key in group.aggregates ? group.aggregates["" + key] : calculateAggregate(types[parseInt(i.toString(), 10)], group.aggregates ? group : data, column, this.parent);
        single["" + disp] = single["" + disp] || {};
        single["" + disp]["" + key] = val;
        single["" + disp][types[parseInt(i.toString(), 10)]] = !isNullOrUndefined(val) ? formatFn(val) : " ";
        if (group.field) {
          single["" + disp].field = group.field;
          single["" + disp].key = group.key;
        }
      }
      helper.format = column.getFormatter();
      column.setTemplate(helper);
      return single;
    };
    SummaryModelGenerator2.prototype.getCellType = function() {
      return CellType.Summary;
    };
    return SummaryModelGenerator2;
  }()
);
var GroupSummaryModelGenerator = (
  /** @class */
  function(_super) {
    __extends2(GroupSummaryModelGenerator2, _super);
    function GroupSummaryModelGenerator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupSummaryModelGenerator2.prototype.columnSelector = function(column) {
      return column.groupFooterTemplate !== void 0;
    };
    GroupSummaryModelGenerator2.prototype.getIndentByLevel = function(level) {
      if (level === void 0) {
        level = this.parent.groupSettings.columns.length;
      }
      if (this.parent.allowRowDragAndDrop && this.parent.groupSettings.columns.length) {
        level -= 1;
      }
      return this.parent.groupSettings.columns.map(function(v, indx) {
        return indx <= level - 1 ? "" : "e-indentcelltop";
      });
    };
    GroupSummaryModelGenerator2.prototype.getCellType = function() {
      return CellType.GroupSummary;
    };
    return GroupSummaryModelGenerator2;
  }(SummaryModelGenerator)
);
var CaptionSummaryModelGenerator = (
  /** @class */
  function(_super) {
    __extends2(CaptionSummaryModelGenerator2, _super);
    function CaptionSummaryModelGenerator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CaptionSummaryModelGenerator2.prototype.columnSelector = function(column) {
      return column.groupCaptionTemplate !== void 0;
    };
    CaptionSummaryModelGenerator2.prototype.getData = function() {
      var initVal = {
        columns: []
      };
      return [_super.prototype.getData.call(this).reduce(function(prev, cur) {
        prev.columns = prev.columns.concat(cur.columns);
        return prev;
      }, initVal)];
    };
    CaptionSummaryModelGenerator2.prototype.isEmpty = function() {
      return (this.getData()[0].columns || []).length === 0;
    };
    CaptionSummaryModelGenerator2.prototype.getCellType = function() {
      return CellType.CaptionSummary;
    };
    return CaptionSummaryModelGenerator2;
  }(SummaryModelGenerator)
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/group-model-generator.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupModelGenerator = (
  /** @class */
  function(_super) {
    __extends3(GroupModelGenerator2, _super);
    function GroupModelGenerator2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.rows = [];
      _this.index = 0;
      _this.infiniteChildCount = 0;
      _this.renderInfiniteAgg = true;
      _this.parent = parent;
      _this.summaryModelGen = new GroupSummaryModelGenerator(parent);
      _this.captionModelGen = new CaptionSummaryModelGenerator(parent);
      return _this;
    }
    GroupModelGenerator2.prototype.generateRows = function(data, args) {
      if (this.parent.groupSettings.columns.length === 0) {
        return _super.prototype.generateRows.call(this, data, args);
      }
      this.isInfiniteScroll = args.requestType === "infiniteScroll";
      this.rows = [];
      this.index = this.parent.enableVirtualization || this.isInfiniteScroll ? args.startIndex : 0;
      for (var i = 0, len = data.length; i < len; i++) {
        this.infiniteChildCount = 0;
        this.renderInfiniteAgg = true;
        this.getGroupedRecords(0, data[parseInt(i.toString(), 10)], data.level, i, void 0, this.rows.length);
      }
      this.index = 0;
      if (this.parent.isCollapseStateEnabled()) {
        this.ensureRowVisibility();
      }
      return this.rows;
    };
    GroupModelGenerator2.prototype.getGroupedRecords = function(index, data, raw, parentid, childId, tIndex, parentUid) {
      var _a;
      var level = raw;
      if (isNullOrUndefined(data.items)) {
        if (isNullOrUndefined(data.GroupGuid)) {
          this.rows = this.rows.concat(this.generateDataRows(data, index, parentid, this.rows.length, parentUid));
        } else {
          for (var j = 0, len = data.length; j < len; j++) {
            this.getGroupedRecords(index, data[parseInt(j.toString(), 10)], data.level, parentid, index, this.rows.length, parentUid);
          }
        }
      } else {
        var preCaption = void 0;
        var captionRow = this.generateCaptionRow(data, index, parentid, childId, tIndex, parentUid);
        if (this.isInfiniteScroll) {
          preCaption = this.getPreCaption(index, captionRow.data.key);
        }
        if (!preCaption) {
          this.rows = this.rows.concat(captionRow);
        } else {
          captionRow.uid = preCaption.uid;
        }
        if (data.items && data.items.length) {
          this.getGroupedRecords(index + 1, data.items, data.items.level, parentid, index + 1, this.rows.length, captionRow.uid);
        }
        if (this.parent.aggregates.length && this.isRenderAggregate(captionRow)) {
          var rowCnt = this.rows.length;
          (_a = this.rows).push.apply(_a, this.summaryModelGen.generateRows(data, {
            level,
            parentUid: captionRow.uid
          }));
          for (var i = rowCnt - 1; i >= 0; i--) {
            if (this.rows[parseInt(i.toString(), 10)].isCaptionRow) {
              this.rows[parseInt(i.toString(), 10)].aggregatesCount = this.rows.length - rowCnt;
            } else if (!this.rows[parseInt(i.toString(), 10)].isCaptionRow && !this.rows[parseInt(i.toString(), 10)].isDataRow) {
              break;
            }
          }
        }
        if (preCaption) {
          this.setInfiniteRowVisibility(preCaption);
        }
      }
    };
    GroupModelGenerator2.prototype.isRenderAggregate = function(data) {
      if (this.parent.enableInfiniteScrolling) {
        if (!this.renderInfiniteAgg) {
          return false;
        }
        this.getPreCaption(data.indent, data.data.key);
        this.renderInfiniteAgg = data.data.count === this.infiniteChildCount;
        return this.renderInfiniteAgg;
      }
      return !this.parent.enableInfiniteScrolling;
    };
    GroupModelGenerator2.prototype.getPreCaption = function(indent, key) {
      var rowObj = this.parent.getRowsObject().concat(this.rows);
      var preCap;
      this.infiniteChildCount = 0;
      var i = rowObj.length;
      while (i--) {
        if (rowObj[parseInt(i.toString(), 10)].isCaptionRow && rowObj[parseInt(i.toString(), 10)].indent === indent) {
          var groupKey = rowObj[parseInt(i.toString(), 10)].data.key;
          if (groupKey.toString() === key.toString() && groupKey instanceof Date || groupKey === key) {
            preCap = rowObj[parseInt(i.toString(), 10)];
          }
        }
        if (rowObj[parseInt(i.toString(), 10)].indent === indent || rowObj[parseInt(i.toString(), 10)].indent < indent) {
          break;
        }
        if (rowObj[parseInt(i.toString(), 10)].indent === indent + 1) {
          this.infiniteChildCount++;
        }
      }
      return preCap;
    };
    GroupModelGenerator2.prototype.getCaptionRowCells = function(field, indent, data) {
      var cells = [];
      var visibles = [];
      var column = this.parent.getColumnByField(field);
      var indexes = this.parent.getColumnIndexesInView();
      if (this.parent.enableColumnVirtualization) {
        column = this.parent.columns.filter(function(c) {
          return c.field === field;
        })[0];
      }
      var groupedLen = this.parent.groupSettings.columns.length;
      var gObj = this.parent;
      if (!this.parent.enableColumnVirtualization || indexes.indexOf(indent) !== -1) {
        for (var i = 0; i < indent; i++) {
          cells.push(this.generateIndentCell());
        }
        cells.push(this.generateCell({}, null, CellType.Expand));
      }
      indent = this.parent.enableColumnVirtualization ? 1 : this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) - indent + (this.parent.getVisibleColumns().length ? -1 : 0);
      if (this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {
        var captionCells = this.captionModelGen.generateRows(data)[0];
        extend(data, captionCells.data);
        var cIndex_1 = 0;
        captionCells.cells.some(function(cell, index) {
          cIndex_1 = index;
          return cell.visible && cell.isDataCell;
        });
        visibles = captionCells.cells.slice(cIndex_1).filter(function(cell) {
          return cell.visible;
        });
        if (captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field) {
          visibles = visibles.slice(1);
        }
        if (this.parent.getVisibleColumns().length === 1) {
          visibles = [];
        }
        indent = indent - visibles.length;
      }
      var cols = !this.parent.enableColumnVirtualization ? [column] : this.parent.getColumns();
      var wFlag = true;
      for (var j = 0; j < cols.length; j++) {
        var tmpFlag = wFlag && indexes.indexOf(indent) !== -1;
        if (tmpFlag) {
          wFlag = false;
        }
        var cellType = !this.parent.enableColumnVirtualization || tmpFlag ? CellType.GroupCaption : CellType.GroupCaptionEmpty;
        indent = this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent;
        if (gObj.isRowDragable()) {
          indent++;
        }
        cells.push(this.generateCell(column, null, cellType, indent));
      }
      cells.push.apply(cells, visibles);
      return cells;
    };
    GroupModelGenerator2.prototype.generateCaptionRow = function(data, indent, parentID, childID, tIndex, parentUid) {
      var options = {};
      var records = "records";
      var col = this.parent.getColumnByField(data.field);
      options.data = extend({}, data);
      if (col) {
        options.data.field = data.field;
      }
      options.isDataRow = false;
      options.isExpand = !this.parent.groupSettings.enableLazyLoading && !this.parent.isCollapseStateEnabled();
      options.parentGid = parentID;
      options.childGid = childID;
      options.tIndex = tIndex;
      options.isCaptionRow = true;
      options.parentUid = parentUid;
      options.gSummary = !isNullOrUndefined(data.items["" + records]) ? data.items["" + records].length : data.items.length;
      options.uid = getUid("grid-row");
      var row2 = new Row(options);
      row2.indent = indent;
      this.getForeignKeyData(row2);
      row2.cells = this.getCaptionRowCells(data.field, indent, row2.data);
      return row2;
    };
    GroupModelGenerator2.prototype.getForeignKeyData = function(row2) {
      var data = row2.data;
      var col = this.parent.getColumnByField(data.field);
      if (col && col.isForeignColumn && col.isForeignColumn()) {
        var fkValue = isNullOrUndefined(data.key) ? "" : col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col);
        setValue("foreignKey", fkValue, row2.data);
      }
    };
    GroupModelGenerator2.prototype.generateDataRows = function(data, indent, childID, tIndex, parentUid) {
      var rows = [];
      var indexes = this.parent.getColumnIndexesInView();
      for (var i = 0, len = data.length; i < len; i++, tIndex++) {
        rows[parseInt(i.toString(), 10)] = this.generateRow(data[parseInt(i.toString(), 10)], this.index, i ? void 0 : "e-firstchildrow", indent, childID, tIndex, parentUid);
        for (var j = 0; j < indent; j++) {
          if (this.parent.enableColumnVirtualization && indexes.indexOf(indent) === -1) {
            continue;
          }
          rows[parseInt(i.toString(), 10)].cells.unshift(this.generateIndentCell());
        }
        this.index++;
      }
      return rows;
    };
    GroupModelGenerator2.prototype.generateIndentCell = function() {
      return this.generateCell({}, null, CellType.Indent);
    };
    GroupModelGenerator2.prototype.refreshRows = function(input2) {
      var indexes = this.parent.getColumnIndexesInView();
      for (var i = 0; i < input2.length; i++) {
        if (input2[parseInt(i.toString(), 10)].isDataRow) {
          input2[parseInt(i.toString(), 10)].cells = this.generateCells(input2[parseInt(i.toString(), 10)]);
          for (var j = 0; j < input2[parseInt(i.toString(), 10)].indent; j++) {
            if (this.parent.enableColumnVirtualization && indexes.indexOf(input2[parseInt(i.toString(), 10)].indent) === -1) {
              continue;
            }
            input2[parseInt(i.toString(), 10)].cells.unshift(this.generateIndentCell());
          }
        } else {
          var cRow = this.generateCaptionRow(input2[parseInt(i.toString(), 10)].data, input2[parseInt(i.toString(), 10)].indent);
          input2[parseInt(i.toString(), 10)].cells = cRow.cells;
        }
      }
      return input2;
    };
    GroupModelGenerator2.prototype.setInfiniteRowVisibility = function(caption) {
      if (!caption.isExpand || caption.visible === false) {
        for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
          var row2 = _a[_i];
          if (row2.parentUid === caption.uid) {
            row2.visible = false;
            if (row2.isCaptionRow) {
              this.setInfiniteRowVisibility(row2);
            }
          }
        }
      }
    };
    GroupModelGenerator2.prototype.ensureRowVisibility = function() {
      for (var i = 0; i < this.rows.length; i++) {
        var row2 = this.rows[parseInt(i.toString(), 10)];
        if (!row2.isCaptionRow) {
          continue;
        }
        for (var j = i + 1; j < this.rows.length; j++) {
          var childRow = this.rows[parseInt(j.toString(), 10)];
          if (row2.uid === childRow.parentUid) {
            this.rows[parseInt(j.toString(), 10)].visible = row2.isExpand;
          }
        }
      }
    };
    return GroupModelGenerator2;
  }(RowModelGenerator)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/content-renderer.js
var ContentRender = (
  /** @class */
  function() {
    function ContentRender2(parent, serviceLocator) {
      var _this = this;
      this.rows = [];
      this.freezeRows = [];
      this.movableRows = [];
      this.freezeRowElements = [];
      this.currentInfo = {};
      this.prevCurrentView = [];
      this.isLoaded = true;
      this.drop = function(e) {
        _this.parent.notify(columnDrop, {
          target: e.target,
          droppedElement: e.droppedElement
        });
        remove(e.droppedElement);
      };
      this.infiniteCache = {};
      this.visibleRows = [];
      this.visibleFrozenRows = [];
      this.rightFreezeRows = [];
      this.isAddRows = false;
      this.isInfiniteFreeze = false;
      this.useGroupCache = false;
      this.tempFreezeRows = [];
      this.rafCallback = function(args) {
        var arg = args;
        return function() {
          _this.ariaService.setBusy(_this.getPanel().querySelector("." + content), false);
          if (_this.parent.isDestroyed) {
            return;
          }
          var rows = _this.rows.slice(0);
          if (_this.parent.enableInfiniteScrolling) {
            if (_this.parent.groupSettings.enableLazyLoading) {
              for (var i = 0; i < _this.visibleRows.length; i++) {
                _this.setRowsInLazyGroup(_this.visibleRows[parseInt(i.toString(), 10)], i);
              }
            }
            rows = _this.parent.getRowsObject();
            var prevPage = arg.prevPage;
            if (_this.parent.infiniteScrollSettings.enableCache && prevPage) {
              var maxBlock = _this.parent.infiniteScrollSettings.maxBlocks;
              rows = [];
              var rowIdx = parseInt(_this.rowElements[0].getAttribute("data-rowindex"), 10) + 1;
              var startIdx = Math.ceil(rowIdx / _this.parent.pageSettings.pageSize);
              for (var i = 0, count2 = startIdx; i < maxBlock; i++, count2++) {
                if (_this.infiniteCache[parseInt(count2.toString(), 10)]) {
                  rows = rows.concat(_this.infiniteCache[parseInt(count2.toString(), 10)]);
                }
              }
            }
          }
          _this.parent.notify(contentReady, {
            rows,
            args: arg
          });
          if (_this.parent.editSettings.showAddNewRow && _this.parent.addNewRowFocus) {
            _this.parent.notify(showAddNewRowFocus, {});
            _this.parent.addNewRowFocus = false;
          }
          if (_this.parent.autoFit) {
            _this.parent.preventAdjustColumns();
          }
          if (!_this.parent.isInitialLoad) {
            _this.parent.focusModule.setFirstFocusableTabIndex();
          }
          if (_this.isLoaded) {
            _this.parent.isManualRefresh = false;
            if (_this.parent.enableInfiniteScrolling && _this.parent.groupSettings.enableLazyLoading && args.requestType === "sorting") {
              _this.parent.infiniteScrollModule["groupCaptionAction"] = void 0;
            }
            var isReactChild = _this.parent.parentDetails && _this.parent.parentDetails.parentInstObj && _this.parent.parentDetails.parentInstObj.isReact;
            if ((_this.parent.isReact || isReactChild) && _this.parent.element.querySelectorAll(".e-templatecell").length) {
              var thisRef_1 = _this;
              thisRef_1.parent.renderTemplates(function() {
                thisRef_1.parent.trigger(dataBound, {}, function() {
                  if (thisRef_1.parent.allowTextWrap) {
                    thisRef_1.parent.notify(freezeRender, {
                      case: "textwrap"
                    });
                  }
                });
              });
            } else {
              _this.parent.trigger(dataBound, {}, function() {
                if (_this.parent.allowTextWrap) {
                  _this.parent.notify(freezeRender, {
                    case: "textwrap"
                  });
                }
              });
            }
            if (_this.parent.allowTextWrap && _this.parent.height === "auto") {
              if (_this.parent.getContentTable().scrollHeight > _this.parent.getContent().clientHeight) {
                _this.parent.scrollModule.setPadding();
              } else {
                _this.parent.scrollModule.removePadding();
              }
            }
          }
          if (arg) {
            var action = (arg.requestType || "").toLowerCase() + "-complete";
            _this.parent.notify(action, arg);
            if (args.requestType === "batchsave") {
              args.cancel = false;
              _this.parent.trigger(actionComplete, args);
            }
          }
          if (_this.isLoaded) {
            _this.parent.hideSpinner();
          }
        };
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.widthService = serviceLocator.getService("widthService");
      this.ariaService = this.serviceLocator.getService("ariaService");
      this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();
      this.generator = this.getModelGenerator();
      if (this.parent.isDestroyed) {
        return;
      }
      if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization && !this.parent.groupSettings.enableLazyLoading) {
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
      }
      this.parent.on(colGroupRefresh, this.colGroupRefresh, this);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(refreshInfiniteModeBlocks, this.refreshContentRows, this);
      this.parent.on(beforeCellFocused, this.beforeCellFocused, this);
      this.parent.on(destroy, this.droppableDestroy, this);
    }
    ContentRender2.prototype.beforeCellFocused = function(e) {
      if (e.byKey && (e.keyArgs.action === "upArrow" || e.keyArgs.action === "downArrow")) {
        this.pressedKey = e.keyArgs.action;
      } else {
        this.pressedKey = void 0;
      }
    };
    ContentRender2.prototype.renderPanel = function() {
      var gObj = this.parent;
      var div = this.parent.element.querySelector("." + gridContent);
      if (div) {
        this.ariaService.setOptions(this.parent.element.querySelector("." + content), {
          busy: false
        });
        this.setPanel(div);
        return;
      }
      div = this.parent.createElement("div", {
        className: gridContent
      });
      var innerDiv = this.parent.createElement("div", {
        className: content
      });
      this.ariaService.setOptions(innerDiv, {
        busy: false
      });
      if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid()) {
        this.renderHorizontalScrollbar(div);
        innerDiv.classList.add("e-virtual-content");
      }
      div.appendChild(innerDiv);
      this.setPanel(div);
      gObj.element.appendChild(div);
    };
    ContentRender2.prototype.renderHorizontalScrollbar = function(element) {
      var parent = this.parent.createElement("div", {
        className: "e-movablescrollbar"
      });
      var child = this.parent.createElement("div", {
        className: "e-movablechild"
      });
      var scrollbarHeight = getScrollBarWidth().toString();
      this.setScrollbarHeight(child, scrollbarHeight);
      this.setScrollbarHeight(parent, scrollbarHeight);
      parent.appendChild(child);
      element.appendChild(parent);
    };
    ContentRender2.prototype.setScrollbarHeight = function(ele, height) {
      ele.style.minHeight = height + "px";
      ele.style.maxHeight = height + "px";
    };
    ContentRender2.prototype.renderTable = function() {
      var contentDiv = this.getPanel();
      var virtualTable = contentDiv.querySelector(".e-virtualtable");
      var virtualTrack = contentDiv.querySelector(".e-virtualtrack");
      if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {
        remove(virtualTable);
        remove(virtualTrack);
      }
      contentDiv.appendChild(this.createContentTable("_content_table"));
      this.setTable(contentDiv.querySelector("." + table));
      if (this.parent.selectionSettings.type === "Multiple") {
        this.ariaService.setOptions(this.parent.element, {
          multiselectable: true
        });
      }
      this.initializeContentDrop();
      if (this.parent.frozenRows) {
        this.parent.getHeaderContent().classList.add("e-frozenhdr");
      }
    };
    ContentRender2.prototype.createContentTable = function(id) {
      var innerDiv = this.getPanel().firstElementChild;
      if (this.getTable()) {
        remove(this.getTable());
      }
      var table2 = innerDiv.querySelector("." + table) ? innerDiv.querySelector("." + table) : this.parent.createElement("table", {
        className: table,
        attrs: {
          cellspacing: "0.25px",
          role: "presentation",
          id: this.parent.element.id + id
        }
      });
      this.setColGroup(this.parent.getHeaderTable().querySelector(colGroup).cloneNode(true));
      table2.appendChild(this.getColGroup());
      table2.appendChild(this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      }));
      innerDiv.appendChild(table2);
      return innerDiv;
    };
    ContentRender2.prototype.refreshContentRows = function(args) {
      var _this = this;
      if (args === void 0) {
        args = {};
      }
      var gObj = this.parent;
      if (gObj.currentViewData.length === 0) {
        return;
      }
      if (gObj.editSettings && gObj.editModule && gObj.editSettings.mode === "Batch" && gObj.editModule.formObj && gObj.editSettings.showConfirmDialog === false) {
        gObj.editModule.destroyForm();
      }
      var dataSource = this.currentMovableRows || gObj.currentViewData;
      var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);
      var frag = isReact ? gObj.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      }) : document.createDocumentFragment();
      if (!this.initialPageRecords) {
        this.initialPageRecords = extend([], dataSource);
      }
      var hdrfrag = isReact ? gObj.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      }) : document.createDocumentFragment();
      var refFrag;
      var refHdrfrag;
      if (gObj.isReact && gObj.rowTemplate) {
        refFrag = frag;
        refHdrfrag = hdrfrag;
      }
      var columns = gObj.getColumns();
      var tr;
      var hdrTbody;
      var trElement;
      var row2 = new RowRenderer(this.serviceLocator, null, this.parent);
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType === "infiniteScroll";
      var isColumnVirtualInfiniteProcess = this.isInfiniteColumnvirtualization() && args.requestType !== "virtualscroll";
      gObj.notify(destroyChildGrid, {});
      this.rowElements = [];
      this.rows = [];
      this.tempFreezeRows = [];
      var tbdy;
      var tableName;
      var isGroupFrozenHdr = this.parent.frozenRows && this.parent.groupSettings.columns.length ? true : false;
      if (isGroupAdaptive(gObj)) {
        if (["sorting", "filtering", "searching", "grouping", "ungrouping", "reorder", "save", "delete"].some(function(value) {
          return args.requestType === value;
        })) {
          this.emptyVcRows();
        }
      }
      var modelData;
      modelData = this.checkCache(modelData, args);
      if (!this.isAddRows && !this.useGroupCache) {
        modelData = this.generator.generateRows(dataSource, args);
      }
      this.setGroupCache(modelData, args);
      this.parent.notify(setInfiniteCache, {
        isInfiniteScroll,
        modelData,
        args
      });
      var isFrozenLeft = false;
      var registeredTemplates = this.parent.registeredTemplate;
      if (!(args.requestType === "infiniteScroll" && !this.parent.infiniteScrollSettings.enableCache) && registeredTemplates && registeredTemplates.template && !args.isFrozen && !isFrozenLeft) {
        var templatetoclear = [];
        for (var i = 0; i < registeredTemplates.template.length; i++) {
          for (var j = 0; j < registeredTemplates.template[parseInt(i.toString(), 10)].rootNodes.length; j++) {
            if (isNullOrUndefined(registeredTemplates.template[parseInt(i.toString(), 10)].rootNodes[parseInt(j.toString(), 10)].parentNode)) {
              templatetoclear.push(registeredTemplates.template[parseInt(i.toString(), 10)]);
            }
          }
        }
        this.parent.destroyTemplate(["template"], templatetoclear);
      }
      if ((this.parent.isReact || this.parent.isVue) && !(args.requestType === "infiniteScroll" && !this.parent.infiniteScrollSettings.enableCache) && !args.isFrozen) {
        var templates = [this.parent.isVue ? "template" : "columnTemplate", "rowTemplate", "detailTemplate", "captionTemplate", "commandsTemplate", "groupFooterTemplate", "groupCaptionTemplate"];
        if (args.requestType === "infiniteScroll" && this.parent.infiniteScrollSettings.enableCache) {
          templates = [this.parent.isVue ? "template" : "columnTemplate", "commandsTemplate"];
        }
        clearReactVueTemplates(this.parent, templates);
      }
      if (this.parent.enableColumnVirtualization) {
        var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);
        cellMerge.updateVirtualCells(modelData);
      }
      this.tbody = this.getTable().querySelector(tbody);
      var startIndex = 0;
      var blockLoad = true;
      if (isGroupAdaptive(gObj) && gObj.vcRows.length) {
        var top_1 = "top";
        var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top : !isNullOrUndefined(args.scrollTop) ? args.scrollTop["" + top_1] : 0;
        if (scrollTop !== 0) {
          var offsets_1 = gObj.vGroupOffsets;
          var bSize = gObj.pageSettings.pageSize / 2;
          var values = Object.keys(offsets_1).map(function(key) {
            return offsets_1["" + key];
          });
          for (var m = 0; m < values.length; m++) {
            if (scrollTop < values[parseInt(m.toString(), 10)]) {
              if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === "up") {
                startIndex = m > 0 ? (m - 1) * bSize : m * bSize;
                break;
              } else {
                startIndex = m * bSize;
                if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {
                  args.virtualInfo.blockIndexes = [m, m + 1];
                }
                break;
              }
            }
          }
          if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >= this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {
            blockLoad = false;
          }
        }
      }
      var isVFFrozenOnly = gObj.frozenRows && this.parent.enableVirtualization && args.requestType === "reorder";
      if (gObj.frozenRows && args.requestType === "virtualscroll" && args.virtualInfo.sentinelInfo.axis === "X" || isVFFrozenOnly) {
        var bIndex = args.virtualInfo.blockIndexes;
        var page = args.virtualInfo.page;
        args.virtualInfo.blockIndexes = [1, 2];
        if (isVFFrozenOnly) {
          args.virtualInfo.page = 1;
        }
        var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;
        var mhdrData = this.vgenerator.generateRows(data, args);
        mhdrData.splice(this.parent.frozenRows);
        for (var i = 0; i < this.parent.frozenRows; i++) {
          tr = row2.render(mhdrData[parseInt(i.toString(), 10)], columns);
          addFixedColumnBorder(tr);
          hdrfrag.appendChild(tr);
        }
        args.virtualInfo.blockIndexes = bIndex;
        args.virtualInfo.page = page;
        if (isVFFrozenOnly && args.virtualInfo.page === 1) {
          modelData.splice(0, this.parent.frozenRows);
        }
      }
      this.virtualFrozenHdrRefresh(hdrfrag, modelData, row2, args, dataSource, columns);
      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
        (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).refRowsObj[this.parent.pageSettings.currentPage] = [];
      }
      if (this.parent.enableInfiniteScrolling && this.parent.groupSettings.enableLazyLoading && args.requestType === "delete") {
        this.visibleRows = [];
      }
      var _loop_1 = function(i2, len2) {
        this_1.rows.push(modelData[parseInt(i2.toString(), 10)]);
        if (this_1.parent.groupSettings.enableLazyLoading && !this_1.useGroupCache && this_1.parent.groupSettings.columns.length) {
          (this_1.parent.enableVirtualization ? this_1.parent.lazyLoadRender : this_1.parent.contentModule).refRowsObj[this_1.parent.pageSettings.currentPage].push(modelData[parseInt(i2.toString(), 10)]);
          this_1.setRowsInLazyGroup(modelData[parseInt(i2.toString(), 10)], i2);
          if (isNullOrUndefined(modelData[parseInt(i2.toString(), 10)].indent)) {
            return "continue";
          }
        }
        this_1.setInfiniteVisibleRows(args, modelData[parseInt(i2.toString(), 10)]);
        if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes && this_1.rowElements.length >= args.virtualInfo.blockIndexes.length * this_1.parent.contentModule.getBlockSize() && blockLoad) {
          this_1.parent.currentViewData["records"] = this_1.rows.map(function(m2) {
            return m2.data;
          });
          return "break";
        }
        if (!gObj.rowTemplate) {
          tr = row2.render(modelData[parseInt(i2.toString(), 10)], columns);
          addFixedColumnBorder(tr);
          var isVFreorder = this_1.ensureFrozenHeaderRender(args);
          if (gObj.frozenRows && (i2 < gObj.frozenRows || isGroupFrozenHdr) && !isInfiniteScroll && args.requestType !== "virtualscroll" && isVFreorder && this_1.ensureVirtualFrozenHeaderRender(args)) {
            hdrfrag.appendChild(tr);
          } else {
            frag.appendChild(tr);
          }
          var rowIdx = parseInt(tr.getAttribute("data-rowindex"), 10);
          if (rowIdx + 1 === gObj.frozenRows) {
            isGroupFrozenHdr = false;
          }
          if (modelData[parseInt(i2.toString(), 10)].isExpand) {
            gObj.notify(expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);
          }
        } else {
          var rowTemplateID = gObj.element.id + "rowTemplate";
          var elements = void 0;
          if (gObj.isReact) {
            var isHeader = gObj.frozenRows && i2 < gObj.frozenRows;
            var copied = extend({
              index: i2
            }, dataSource[parseInt(i2.toString(), 10)]);
            gObj.getRowTemplate()(copied, gObj, "rowTemplate", rowTemplateID, null, null, isHeader ? hdrfrag : frag);
            if (gObj.requireTemplateRef) {
              var thisRef_2 = this_1;
              thisRef_2.parent.renderTemplates(function() {
                if (gObj.frozenRows && i2 < gObj.frozenRows) {
                  tr = refHdrfrag.childNodes[parseInt(i2.toString(), 10)];
                } else {
                  trElement = refFrag.childNodes[parseInt(i2.toString(), 10)];
                }
                var arg2 = {
                  data: modelData[parseInt(i2.toString(), 10)].data,
                  row: trElement ? trElement : tr
                };
                thisRef_2.parent.trigger(rowDataBound, arg2);
                if (modelData[parseInt(i2.toString(), 10)].isDataRow || thisRef_2.parent.enableVirtualization && thisRef_2.parent.groupSettings.enableLazyLoading) {
                  thisRef_2.rowElements.push(arg2.row);
                }
                thisRef_2.ariaService.setOptions(thisRef_2.parent.element, {
                  colcount: gObj.getColumns().length.toString()
                });
                if (i2 === modelData.length - 1) {
                  refFrag = null;
                  refHdrfrag = null;
                }
              });
              return "continue";
            }
          } else {
            elements = gObj.getRowTemplate()(extend({
              index: i2
            }, dataSource[parseInt(i2.toString(), 10)]), gObj, "rowTemplate", rowTemplateID, void 0, void 0, void 0, this_1.parent["root"]);
          }
          if (!gObj.isReact && elements[0].tagName === "TBODY") {
            for (var j2 = 0; j2 < elements.length; j2++) {
              var isTR = elements[parseInt(j2.toString(), 10)].nodeName.toLowerCase() === "tr";
              if (isTR || elements[parseInt(j2.toString(), 10)].querySelectorAll && elements[parseInt(j2.toString(), 10)].querySelectorAll("tr").length) {
                tr = isTR ? elements[parseInt(j2.toString(), 10)] : elements[parseInt(j2.toString(), 10)].querySelector("tr");
              }
            }
            if (gObj.frozenRows && i2 < gObj.frozenRows) {
              hdrfrag.appendChild(tr);
            } else {
              frag.appendChild(tr);
            }
          } else {
            if (gObj.frozenRows && i2 < gObj.frozenRows) {
              tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;
            } else {
              if (!gObj.isReact) {
                tr = appendChildren(frag, elements);
              }
              trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;
            }
          }
          var arg = {
            data: modelData[parseInt(i2.toString(), 10)].data,
            row: trElement ? trElement : tr
          };
          this_1.parent.trigger(rowDataBound, arg);
        }
        if (modelData[parseInt(i2.toString(), 10)].isDataRow || this_1.parent.enableVirtualization && this_1.parent.groupSettings.enableLazyLoading) {
          if (!isNullOrUndefined(gObj.rowTemplate) && (gObj.isAngular || gObj.isVue3 || gObj.isVue)) {
            this_1.rowElements.push(trElement ? trElement : tr);
          } else {
            this_1.rowElements.push(tr);
          }
        }
        this_1.ariaService.setOptions(this_1.parent.element, {
          colcount: gObj.getColumns().length.toString()
        });
      };
      var this_1 = this;
      for (var i = startIndex, len = modelData.length; i < len; i++) {
        var state_1 = _loop_1(i, len);
        if (state_1 === "break") break;
      }
      var isReactChild = gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact;
      if ((gObj.isReact || isReactChild) && !gObj.requireTemplateRef) {
        gObj.renderTemplates();
      }
      if (this.parent.enableInfiniteScrolling && this.parent.groupSettings.enableLazyLoading) {
        this.parent.contentModule.refRowsObj[this.parent.pageSettings.currentPage] = this.parent.contentModule["groupCache"][this.parent.pageSettings.currentPage];
      }
      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
        this.parent.notify(refreshExpandandCollapse, {
          rows: (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).refRowsObj[this.parent.pageSettings.currentPage]
        });
      }
      gObj.removeMaskRow();
      this.parent.notify("removeGanttShimmer", {
        requestType: "hideShimmer"
      });
      if (gObj.frozenRows && args.requestType !== "virtualscroll" && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args) || args.requestType === "virtualscroll" && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === "X") {
        hdrTbody = gObj.getHeaderTable().querySelector(tbody);
        if (isReact) {
          var parentTable = hdrTbody.parentElement;
          remove(hdrTbody);
          parentTable.appendChild(hdrfrag);
        } else {
          hdrTbody.innerHTML = "";
          hdrTbody.appendChild(hdrfrag);
        }
        if (!gObj.isInitialLoad) {
          gObj.scrollModule.setHeight();
        }
      }
      args.rows = this.rows.slice(0);
      getUpdateUsingRaf(function() {
        _this.parent.notify(beforeFragAppend, args);
        if (!_this.parent.enableVirtualization && (!_this.parent.enableColumnVirtualization || isColumnVirtualInfiniteProcess) && !isInfiniteScroll) {
          if (!gObj.isReact) {
            _this.tbody.innerHTML = "";
          }
          if (!isNullOrUndefined(_this.tbody.parentElement)) {
            remove(_this.tbody);
          } else {
            remove(gObj.getContentTable().querySelector(tbody));
          }
          _this.tbody = _this.parent.createElement(tbody, {
            attrs: {
              role: "rowgroup"
            }
          });
        }
        if (gObj.rowTemplate) {
          updateBlazorTemplate(gObj.element.id + "rowTemplate", "RowTemplate", gObj);
        }
        if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && (_this.parent.enableInfiniteScrolling && !_this.isInfiniteColumnvirtualization() || isColumnVirtualInfiniteProcess)) {
          _this.isAddRows = false;
          _this.parent.notify(removeInfiniteRows, {
            args
          });
          _this.parent.notify(appendInfiniteContent, {
            tbody: tbdy ? tbdy : _this.tbody,
            frag,
            args,
            rows: _this.rows,
            rowElements: _this.rowElements,
            visibleRows: _this.visibleRows,
            tableName
          });
          if (_this.isInfiniteColumnvirtualization() && _this.parent.isFrozenGrid()) {
            var virtualTable = _this.parent.getContent().querySelector(".e-virtualtable");
            var transform = getTransformValues(virtualTable);
            _this.parent.contentModule.resetStickyLeftPos(transform.width);
            _this.widthService.refreshFrozenScrollbar();
          }
        } else {
          _this.useGroupCache = false;
          _this.appendContent(_this.tbody, frag, args);
        }
        if (_this.parent.editSettings.showAddNewRow && (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling)) {
          var newRow = _this.parent.element.querySelector(".e-addrow-removed");
          if (newRow) {
            remove(newRow);
          }
        }
        var startAdd = !_this.parent.element.querySelector("." + addedRow);
        if (_this.parent.editSettings.showAddNewRow && _this.parent.editSettings.mode === "Normal") {
          if (startAdd) {
            if (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) {
              _this.parent.isAddNewRow = true;
            }
            _this.parent.isEdit = false;
            _this.parent.addRecord();
          }
          if (startAdd || (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) && ["sorting", "filtering", "searching", "grouping", "ungrouping", "reorder"].some(function(value) {
            return args.requestType === value;
          })) {
            _this.parent.notify(showAddNewRowFocus, {});
          }
        }
        if (_this.parent.getVisibleFrozenRightCount() && _this.parent.getContent() && getScrollWidth(_this.parent) > 0) {
          _this.parent.element.classList.add("e-right-shadow");
        }
        frag = null;
      }, this.rafCallback(extend({}, args)));
    };
    ContentRender2.prototype.isInfiniteColumnvirtualization = function() {
      return this.parent.enableColumnVirtualization && this.parent.enableInfiniteScrolling;
    };
    ContentRender2.prototype.enableCacheOnInfiniteColumnVirtual = function() {
      return this.isInfiniteColumnvirtualization() && this.parent.infiniteScrollSettings.enableCache;
    };
    ContentRender2.prototype.emptyVcRows = function() {
      this.parent.vcRows = [];
      this.parent.vRows = [];
    };
    ContentRender2.prototype.appendContent = function(tbody2, frag, args, tableName) {
      var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);
      if (isReact) {
        this.getTable().appendChild(frag);
      } else {
        tbody2.appendChild(frag);
        this.getTable().appendChild(tbody2);
      }
      if (this.parent.rowRenderingMode === "Vertical" && this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === "Header" || this.parent.textWrapSettings.wrapMode === "Both")) {
        var cells = tbody2.querySelectorAll("td");
        for (var i = 0; i < cells.length; i++) {
          var headerCellHeight = parseFloat(document.defaultView.getComputedStyle(cells[parseInt(i.toString(), 10)], "::before").getPropertyValue("height"));
          var cellHeight = cells[parseInt(i.toString(), 10)].offsetHeight;
          if (headerCellHeight > cellHeight) {
            cells[parseInt(i.toString(), 10)].style.height = headerCellHeight + "px";
            cells[parseInt(i.toString(), 10)].style.boxSizing = "content-box";
          }
        }
      }
      if (this.parent.getVisibleFrozenLeftCount() && this.parent.enableColumnVirtualization) {
        this.widthService.refreshFrozenScrollbar();
      }
    };
    ContentRender2.prototype.setRowsInLazyGroup = function(row2, index) {
      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
        (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).maintainRows(row2, index);
      }
    };
    ContentRender2.prototype.setGroupCache = function(data, args) {
      if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {
        this.parent.notify(setGroupCache, {
          args,
          data
        });
      }
    };
    ContentRender2.prototype.ensureFrozenHeaderRender = function(args) {
      return !(this.parent.enableVirtualization && (args.requestType === "reorder" || args.requestType === "refresh") || this.parent.infiniteScrollSettings.enableCache && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === "delete" && this.parent.pageSettings.currentPage !== 1);
    };
    ContentRender2.prototype.ensureVirtualFrozenHeaderRender = function(args) {
      return !(this.parent.enableVirtualization && args.requestType === "delete");
    };
    ContentRender2.prototype.checkCache = function(modelData, args) {
      if (this.parent.infiniteScrollSettings.enableCache && args.requestType === "infiniteScroll") {
        this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);
        if (this.isAddRows) {
          var data = this.infiniteCache[this.parent.pageSettings.currentPage];
          modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;
        }
        return modelData;
      }
      if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (args.requestType === "paging" || args.requestType === "columnstate" || args.requestType === "reorder" || args.requestType === "virtualscroll") && (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).getGroupCache()[this.parent.pageSettings.currentPage]) {
        if (!this.parent.enableVirtualization) {
          this.useGroupCache = true;
        }
        return this.parent.enableVirtualization ? this.parent.getRowsObject() : this.parent.contentModule.initialGroupRows(args.requestType === "reorder");
      }
      return null;
    };
    ContentRender2.prototype.setInfiniteVisibleRows = function(args, data) {
      if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && !(this.isInfiniteColumnvirtualization() && args.requestType === "virtualscroll")) {
        this.visibleRows.push(data);
      }
    };
    ContentRender2.prototype.getCurrentBlockInfiniteRecords = function() {
      var data = [];
      if (this.parent.infiniteScrollSettings.enableCache) {
        if (!Object.keys(this.infiniteCache).length) {
          return [];
        }
        var rows = this.parent.getRows();
        var index = parseInt(rows[this.parent.frozenRows].getAttribute(dataRowIndex), 10);
        var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);
        index = parseInt(rows[rows.length - 1].getAttribute(dataRowIndex), 10);
        var last = Math.ceil((index + (rows.length ? 1 : 0)) / this.parent.pageSettings.pageSize);
        for (var i = first; i <= last; i++) {
          data = !data.length ? this.infiniteCache[parseInt(i.toString(), 10)] : data.concat(this.infiniteCache[parseInt(i.toString(), 10)]);
        }
        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
          data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);
        }
      }
      return data;
    };
    ContentRender2.prototype.getReorderedRows = function(args) {
      return this.parent.contentModule.getReorderedFrozenRows(args);
    };
    ContentRender2.prototype.virtualFrozenHdrRefresh = function(hdrfrag, modelData, row2, args, dataSource, columns) {
      if (this.parent.frozenRows && this.parent.enableVirtualization && (args.requestType === "reorder" || args.requestType === "refresh")) {
        var tr = void 0;
        var fhdrData = this.getReorderedRows(args);
        for (var i = 0; i < fhdrData.length; i++) {
          tr = row2.render(fhdrData[parseInt(i.toString(), 10)], columns);
          hdrfrag.appendChild(tr);
        }
        if (args.virtualInfo.page === 1) {
          modelData.splice(0, this.parent.frozenRows);
        }
      }
    };
    ContentRender2.prototype.getInfiniteRows = function() {
      var rows = [];
      if (this.parent.enableInfiniteScrolling) {
        if (this.parent.infiniteScrollSettings.enableCache) {
          var keys = Object.keys(this.infiniteCache);
          for (var i = 0; i < keys.length; i++) {
            rows = rows.concat(this.infiniteCache[keys[parseInt(i.toString(), 10)]]);
          }
        } else {
          rows = this.visibleRows;
        }
      }
      return rows;
    };
    ContentRender2.prototype.getInfiniteMovableRows = function() {
      var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();
      var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows : this.visibleRows : [];
      return infiniteRows;
    };
    ContentRender2.prototype.getPanel = function() {
      return this.contentPanel;
    };
    ContentRender2.prototype.setPanel = function(panel) {
      this.contentPanel = panel;
    };
    ContentRender2.prototype.getTable = function() {
      return this.contentTable;
    };
    ContentRender2.prototype.setTable = function(table2) {
      this.contentTable = table2;
    };
    ContentRender2.prototype.getRows = function() {
      var infiniteRows = this.getInfiniteRows();
      return infiniteRows.length ? infiniteRows : this.rows;
    };
    ContentRender2.prototype.getRowElements = function() {
      return this.rowElements;
    };
    ContentRender2.prototype.setRowElements = function(elements) {
      this.rowElements = elements;
    };
    ContentRender2.prototype.getColGroup = function() {
      return this.colgroup;
    };
    ContentRender2.prototype.setColGroup = function(colGroup2) {
      if (!isNullOrUndefined(colGroup2)) {
        colGroup2.id = "content-" + colGroup2.id;
      }
      return this.colgroup = colGroup2;
    };
    ContentRender2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var rows = this.getRows();
      var testRow;
      rows.some(function(r) {
        if (r.isDataRow) {
          testRow = r;
        }
        return r.isDataRow;
      });
      var needFullRefresh = true;
      if (!gObj.groupSettings.columns.length && testRow) {
        needFullRefresh = false;
      }
      var tr = gObj.getDataRows();
      var args = {};
      var infiniteData = this.infiniteRowVisibility();
      var contentrows = infiniteData ? infiniteData : this.rows.filter(function(row2) {
        return !row2.isDetailRow;
      });
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        var idx = this.parent.getNormalizedColumnIndex(column.uid);
        var colIdx = this.parent.getColumnIndexByUid(column.uid);
        var displayVal = column.visible === true ? "" : "none";
        if (idx !== -1 && testRow && idx < testRow.cells.length) {
          setStyleAttribute(this.getColGroup().childNodes[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        if (!needFullRefresh) {
          this.setDisplayNone(tr, colIdx, displayVal, contentrows);
        }
        if (!this.parent.invokedFromMedia && column.hideAtMedia) {
          this.parent.updateMediaColumns(column);
        }
        this.parent.invokedFromMedia = false;
      }
      if (needFullRefresh) {
        this.refreshContentRows({
          requestType: "refresh"
        });
      } else {
        this.parent.notify(partialRefresh, {
          rows: contentrows,
          args
        });
        if (this.parent.editSettings.showAddNewRow && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
    };
    ContentRender2.prototype.setDisplayNone = function(tr, idx, displayVal, rows) {
      setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());
      this.parent.notify(infiniteShowHide, {
        visible: displayVal,
        index: idx,
        isFreeze: this.isInfiniteFreeze
      });
    };
    ContentRender2.prototype.infiniteRowVisibility = function(isFreeze) {
      var infiniteData;
      if (this.parent.enableInfiniteScrolling) {
        this.isInfiniteFreeze = isFreeze;
        if (this.parent.infiniteScrollSettings.enableCache) {
          infiniteData = this.getCurrentBlockInfiniteRecords();
        } else {
          infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;
        }
      }
      return infiniteData;
    };
    ContentRender2.prototype.colGroupRefresh = function() {
      if (this.getColGroup()) {
        var colGroup2 = this.getHeaderColGroup();
        this.getTable().replaceChild(colGroup2, this.getColGroup());
        this.setColGroup(colGroup2);
      }
    };
    ContentRender2.prototype.getHeaderColGroup = function() {
      return this.parent.element.querySelector("." + gridHeader).querySelector(colGroup + ":not(.e-masked-colgroup)").cloneNode(true);
    };
    ContentRender2.prototype.initializeContentDrop = function() {
      var gObj = this.parent;
      this.droppable = new Droppable(gObj.element, {
        accept: ".e-dragclone",
        drop: this.drop
      });
    };
    ContentRender2.prototype.droppableDestroy = function() {
      if (this.droppable && !this.droppable.isDestroyed) {
        this.droppable.destroy();
      }
    };
    ContentRender2.prototype.canSkip = function(column, row2, index) {
      return isNullOrUndefined(row2) || //(1)
      isNullOrUndefined(column.visible) || //(2)
      row2.cells[parseInt(index.toString(), 10)].visible === column.visible;
    };
    ContentRender2.prototype.getModelGenerator = function() {
      return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
    };
    ContentRender2.prototype.renderEmpty = function(tbody2) {
      this.getTable().appendChild(tbody2);
      if (this.parent.frozenRows) {
        this.parent.getHeaderContent().querySelector(tbody).innerHTML = "";
      }
    };
    ContentRender2.prototype.setSelection = function(uid2, set, clearAll) {
      this.parent.notify(setFreezeSelection, {
        uid: uid2,
        set,
        clearAll
      });
      var row2 = this.getRows().filter(function(row3) {
        return clearAll || uid2 === row3.uid;
      });
      for (var j = 0; j < row2.length; j++) {
        row2[parseInt(j.toString(), 10)].isSelected = set;
        var cells = row2[parseInt(j.toString(), 10)].cells;
        for (var k = 0; k < cells.length; k++) {
          cells[parseInt(k.toString(), 10)].isSelected = set;
        }
      }
    };
    ContentRender2.prototype.getRowByIndex = function(index) {
      index = this.getInfiniteRowIndex(index);
      return !isNullOrUndefined(index) ? this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
    };
    ContentRender2.prototype.getInfiniteRowIndex = function(index) {
      if (this.parent.infiniteScrollSettings.enableCache && !isNullOrUndefined(index)) {
        var fRows = this.parent.frozenRows;
        var idx = fRows > index ? 0 : fRows;
        var firstRowIndex = parseInt(this.parent.getRows()[parseInt(idx.toString(), 10)].getAttribute(dataRowIndex), 10);
        index = fRows > index ? index : index - firstRowIndex + fRows;
      }
      return index;
    };
    ContentRender2.prototype.getVirtualRowIndex = function(index) {
      return index;
    };
    ContentRender2.prototype.enableAfterRender = function(e) {
      if (e.module === "group" && e.enable) {
        this.generator = this.getModelGenerator();
      }
    };
    ContentRender2.prototype.setRowObjects = function(rows) {
      this.rows = rows;
    };
    ContentRender2.prototype.immutableModeRendering = function(args) {
      var _this = this;
      if (args === void 0) {
        args = {};
      }
      var gObj = this.parent;
      gObj.hideSpinner();
      var key = gObj.getPrimaryKeyFieldNames()[0];
      var oldKeys = {};
      var newKeys = {};
      var newRowObjs = [];
      var oldIndexes = {};
      var oldRowObjs = gObj.getRowsObject().slice();
      var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);
      var newIndexes = {};
      var hasBatch = Object.keys(batchChangeKeys).length !== 0;
      if (gObj.getContent().querySelector(".e-emptyrow") || args.requestType === "reorder" || this.parent.groupSettings.columns.length) {
        this.refreshContentRows(args);
      } else {
        if (gObj.currentViewData.length === 0) {
          return;
        }
        var oldRowElements = {};
        var tbody2 = gObj.createElement(tbody, {
          attrs: {
            role: "rowgroup"
          }
        });
        var dataSource = gObj.currentViewData;
        var trs = [].slice.call(this.getTable().querySelector(tbody).children);
        if (this.prevCurrentView.length) {
          var prevLen = this.prevCurrentView.length;
          var currentLen = dataSource.length;
          if (prevLen === currentLen) {
            for (var i = 0; i < currentLen; i++) {
              if (this.parent.editSettings.mode === "Batch" && trs[parseInt(i.toString(), 10)].classList.contains("e-insertedrow")) {
                trs.splice(i, 1);
                --i;
                continue;
              }
              newKeys[dataSource[parseInt(i.toString(), 10)]["" + key]] = oldKeys[this.prevCurrentView[parseInt(i.toString(), 10)]["" + key]] = i;
              newIndexes[parseInt(i.toString(), 10)] = dataSource[parseInt(i.toString(), 10)]["" + key];
              oldRowElements[oldRowObjs[parseInt(i.toString(), 10)].uid] = trs[parseInt(i.toString(), 10)];
              oldIndexes[parseInt(i.toString(), 10)] = this.prevCurrentView[parseInt(i.toString(), 10)]["" + key];
            }
          } else {
            for (var i = 0; i < currentLen; i++) {
              newKeys[dataSource[parseInt(i.toString(), 10)]["" + key]] = i;
              newIndexes[parseInt(i.toString(), 10)] = dataSource[parseInt(i.toString(), 10)]["" + key];
            }
            for (var i = 0; i < prevLen; i++) {
              if (this.parent.editSettings.mode === "Batch" && trs[parseInt(i.toString(), 10)].classList.contains("e-insertedrow")) {
                trs.splice(i, 1);
                --i;
                continue;
              }
              oldRowElements[oldRowObjs[parseInt(i.toString(), 10)].uid] = trs[parseInt(i.toString(), 10)];
              oldKeys[this.prevCurrentView[parseInt(i.toString(), 10)]["" + key]] = i;
              oldIndexes[parseInt(i.toString(), 10)] = this.prevCurrentView[parseInt(i.toString(), 10)]["" + key];
            }
          }
        }
        for (var i = 0; i < dataSource.length; i++) {
          var oldIndex = oldKeys[dataSource[parseInt(i.toString(), 10)]["" + key]];
          if (!isNullOrUndefined(oldIndex)) {
            var isEqual = false;
            if (this.parent.enableDeepCompare) {
              isEqual = this.objectEqualityChecker(this.prevCurrentView[parseInt(oldIndex.toString(), 10)], dataSource[parseInt(i.toString(), 10)]);
            }
            var tr = oldRowElements[oldRowObjs[parseInt(oldIndex.toString(), 10)].uid];
            newRowObjs.push(oldRowObjs[parseInt(oldIndex.toString(), 10)]);
            if (this.rowElements[parseInt(oldIndex.toString(), 10)] && this.rowElements[parseInt(oldIndex.toString(), 10)].getAttribute("data-uid") === newRowObjs[parseInt(i.toString(), 10)].uid && (hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[parseInt(i.toString(), 10)]]) || !hasBatch && (isEqual || this.prevCurrentView[parseInt(oldIndex.toString(), 10)] === dataSource[parseInt(i.toString(), 10)]))) {
              if (oldIndex !== i) {
                this.refreshImmutableContent(i, tr, newRowObjs[parseInt(i.toString(), 10)]);
              }
              tbody2.appendChild(tr);
              continue;
            }
            if (hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[parseInt(i.toString(), 10)]]) || !this.parent.enableDeepCompare && dataSource[parseInt(i.toString(), 10)] !== this.prevCurrentView[parseInt(oldIndex.toString(), 10)] || this.parent.enableDeepCompare && !isEqual) {
              oldRowObjs[parseInt(oldIndex.toString(), 10)].setRowValue(dataSource[parseInt(i.toString(), 10)]);
            }
            tbody2.appendChild(tr);
            this.refreshImmutableContent(i, tr, newRowObjs[parseInt(i.toString(), 10)]);
          } else {
            var row2 = new RowRenderer(this.serviceLocator, null, gObj);
            var args_1 = {
              startIndex: i
            };
            var modelData = this.generator.generateRows([dataSource[parseInt(i.toString(), 10)]], args_1);
            newRowObjs.push(modelData[0]);
            var tr = row2.render(modelData[0], gObj.getColumns());
            tbody2.appendChild(tr);
            this.refreshImmutableContent(i, tr, newRowObjs[parseInt(i.toString(), 10)]);
          }
        }
        this.rows = newRowObjs;
        this.rowElements = [].slice.call(tbody2.children);
        remove(this.getTable().querySelector(tbody));
        this.getTable().appendChild(tbody2);
        this.parent.trigger(dataBound, {}, function() {
          if (_this.parent.allowTextWrap) {
            _this.parent.notify(freezeRender, {
              case: "textwrap"
            });
          }
        });
        if (args) {
          var action = (args.requestType || "").toLowerCase() + "-complete";
          this.parent.notify(action, args);
        }
      }
    };
    ContentRender2.prototype.objectEqualityChecker = function(old, next) {
      var keys = Object.keys(old);
      var isEqual = true;
      for (var i = 0; i < keys.length; i++) {
        if (old[keys[parseInt(i.toString(), 10)]] !== next[keys[parseInt(i.toString(), 10)]]) {
          var isDate = old[keys[parseInt(i.toString(), 10)]] instanceof Date && next[keys[parseInt(i.toString(), 10)]] instanceof Date;
          if (!isDate || old[keys[parseInt(i.toString(), 10)]].getTime() !== next[keys[parseInt(i.toString(), 10)]].getTime()) {
            isEqual = false;
            break;
          }
        }
      }
      return isEqual;
    };
    ContentRender2.prototype.getBatchEditedRecords = function(primaryKey, rows) {
      var keys = {};
      var changes = this.parent.getBatchChanges();
      var changedRecords2 = [];
      var addedRecords2 = [];
      if (Object.keys(changes).length) {
        changedRecords2 = changes.changedRecords;
        addedRecords2 = changes.addedRecords;
      }
      var args = {
        cancel: false
      };
      this.parent.notify(immutableBatchCancel, {
        rows,
        args
      });
      if (addedRecords2.length) {
        if (this.parent.editSettings.newRowPosition === "Bottom") {
          rows.splice(rows.length - 1, addedRecords2.length);
        } else {
          if (!args.cancel) {
            rows.splice(0, addedRecords2.length);
          }
        }
      }
      for (var i = 0; i < changedRecords2.length; i++) {
        keys[changedRecords2[parseInt(i.toString(), 10)]["" + primaryKey]] = i;
      }
      return keys;
    };
    ContentRender2.prototype.refreshImmutableContent = function(index, tr, row2) {
      row2.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
      if (row2.isAltRow) {
        tr.classList.add("e-altrow");
      } else {
        tr.classList.remove("e-altrow");
      }
      row2.index = index;
      row2.edit = void 0;
      row2.isDirty = false;
      tr.setAttribute(dataRowIndex, index.toString());
      tr.setAttribute(ariaRowIndex, (index + 1).toString());
      this.updateCellIndex(tr, index);
    };
    ContentRender2.prototype.updateCellIndex = function(rowEle, index) {
      for (var i = 0; i < rowEle.cells.length; i++) {
        rowEle.cells[parseInt(i.toString(), 10)].setAttribute("index", index.toString());
      }
    };
    return ContentRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-renderer.js
var HeaderRender = (
  /** @class */
  function() {
    function HeaderRender2(parent, serviceLocator) {
      var _this = this;
      this.frzIdx = 0;
      this.notfrzIdx = 0;
      this.isFirstCol = false;
      this.isReplaceDragEle = true;
      this.helper = function(e) {
        var gObj = _this.parent;
        var target = _this.draggable.currentStateTarget;
        var parentEle = parentsUntil(target, "e-headercell");
        if (!(gObj.allowReordering || gObj.allowGrouping) || !isNullOrUndefined(parentEle) && parentEle.getElementsByClassName("e-checkselectall").length > 0) {
          return false;
        }
        var visualElement = _this.parent.createElement("div", {
          className: "e-cloneproperties e-dragclone e-headerclone"
        });
        var element = target.classList.contains("e-headercell") ? target : parentEle;
        if (!element || !gObj.allowReordering && element.classList.contains("e-stackedheadercell")) {
          return false;
        }
        var height = element.offsetHeight;
        var headercelldiv = element.querySelector(".e-headercelldiv") || element.querySelector(".e-stackedheadercelldiv");
        var col;
        if (headercelldiv) {
          if (element.querySelector(".e-stackedheadercelldiv")) {
            col = gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.columns);
          } else {
            col = gObj.getColumnByUid(headercelldiv.getAttribute("e-mappinguid"));
          }
          _this.column = col;
          if (_this.column.lockColumn) {
            return false;
          }
          visualElement.setAttribute("e-mappinguid", _this.column.uid);
        }
        if (col && !isNullOrUndefined(col.headerTemplate)) {
          if (!isNullOrUndefined(col.headerTemplate)) {
            var colIndex = gObj.getColumnIndexByField(col.field);
            var result = col.getHeaderTemplate()(extend({
              "index": colIndex
            }, col), gObj, "headerTemplate");
            var isReactCompiler = gObj.isReact && typeof col.headerTemplate !== "string";
            var isReactChild = gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact;
            if (isReactCompiler || isReactChild) {
              gObj.renderTemplates();
            }
            appendChildren(visualElement, result);
          } else {
            visualElement.innerHTML = col.headerTemplate;
          }
          if (!isNullOrUndefined(visualElement.firstChild) && visualElement.firstChild.nodeType === 1) {
            visualElement.firstChild.style.pointerEvents = "none";
          }
        } else {
          visualElement.innerHTML = headercelldiv ? col.headerText : element.firstElementChild.innerHTML;
        }
        visualElement.style.width = element.offsetWidth + "px";
        visualElement.style.height = element.offsetHeight + "px";
        visualElement.style.lineHeight = (height - 6).toString() + "px";
        gObj.element.appendChild(visualElement);
        return visualElement;
      };
      this.dragStart = function(e) {
        var gObj = _this.parent;
        gObj.element.querySelector(".e-gridpopup").style.display = "none";
        gObj.notify(columnDragStart, {
          target: _this.draggable.currentStateTarget,
          column: _this.column,
          event: e.event
        });
      };
      this.drag = function(e) {
        var gObj = _this.parent;
        var target = e.target;
        if (target) {
          var closest2 = closest(target, ".e-grid");
          var cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
          if (!closest2 || closest2.getAttribute("id") !== gObj.element.getAttribute("id")) {
            classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
            if (gObj.allowReordering) {
              gObj.element.querySelector(".e-reorderuparrow").style.display = "none";
              gObj.element.querySelector(".e-reorderdownarrow").style.display = "none";
            }
            if (!gObj.groupSettings.allowReordering) {
              return;
            }
          }
          gObj.notify(columnDrag, {
            target: e.target,
            column: _this.column,
            event: e.event
          });
        }
      };
      this.dragStop = function(e) {
        var gObj = _this.parent;
        var cancel;
        gObj.element.querySelector(".e-gridpopup").style.display = "none";
        if (!parentsUntil(e.target, "e-headercell") && !parentsUntil(e.target, "e-groupdroparea") || !gObj.allowReordering && parentsUntil(e.target, "e-headercell") || !e.helper.getAttribute("e-mappinguid") && parentsUntil(e.target, "e-groupdroparea")) {
          remove(e.helper);
          cancel = true;
        }
        gObj.notify(columnDragStop, {
          target: e.target,
          event: e.event,
          column: _this.column,
          cancel
        });
      };
      this.drop = function(e) {
        var gObj = _this.parent;
        var uid2 = e.droppedElement.getAttribute("e-mappinguid");
        var closest2 = closest(e.target, ".e-grid");
        remove(e.droppedElement);
        if (closest2 && closest2.getAttribute("id") !== gObj.element.getAttribute("id") || !(gObj.allowReordering || gObj.allowGrouping)) {
          return;
        }
        gObj.notify(headerDrop, {
          target: e.target,
          uid: uid2,
          droppedElement: e.droppedElement
        });
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.ariaService = this.serviceLocator.getService("ariaService");
      this.widthService = this.serviceLocator.getService("widthService");
      if (this.parent.isDestroyed) {
        return;
      }
      if (!this.parent.enableColumnVirtualization) {
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
      }
      this.parent.on(columnPositionChanged, this.colPosRefresh, this);
      this.parent.on(initialEnd, this.renderCustomToolbar, this);
      if (this.parent.rowRenderingMode === "Vertical") {
        this.parent.on(uiUpdate, this.updateCustomResponsiveToolbar, this);
      }
    }
    HeaderRender2.prototype.renderPanel = function() {
      var div = this.parent.element.querySelector("." + gridHeader);
      var isRendered = div != null;
      div = isRendered ? div : this.parent.createElement("div", {
        className: "e-gridheader"
      });
      var innerDiv = isRendered ? div.querySelector("." + headerContent) : this.parent.createElement("div", {
        className: headerContent
      });
      this.toggleStackClass(div);
      div.appendChild(innerDiv);
      this.setPanel(div);
      if (!isRendered) {
        this.parent.element.appendChild(div);
      }
    };
    HeaderRender2.prototype.renderTable = function() {
      var headerDiv = this.getPanel();
      headerDiv.appendChild(this.createHeaderTable());
      this.setTable(headerDiv.querySelector("." + table));
      this.initializeHeaderDrag();
      this.initializeHeaderDrop();
      this.parent.notify(headerRefreshed, {
        rows: this.rows
      });
    };
    HeaderRender2.prototype.getPanel = function() {
      return this.headerPanel;
    };
    HeaderRender2.prototype.setPanel = function(panel) {
      this.headerPanel = panel;
    };
    HeaderRender2.prototype.getTable = function() {
      return this.headerTable;
    };
    HeaderRender2.prototype.setTable = function(table2) {
      this.headerTable = table2;
    };
    HeaderRender2.prototype.getColGroup = function() {
      return this.colgroup;
    };
    HeaderRender2.prototype.setColGroup = function(colGroup2) {
      return this.colgroup = colGroup2;
    };
    HeaderRender2.prototype.getRows = function() {
      var table2 = this.getTable();
      return table2.tHead.rows;
    };
    HeaderRender2.prototype.createHeaderTable = function() {
      var table2 = this.createTable();
      var innerDiv = this.getPanel().querySelector("." + headerContent);
      innerDiv.appendChild(table2);
      return innerDiv;
    };
    HeaderRender2.prototype.createHeader = function(tableEle, tableName) {
      if (tableEle === void 0) {
        tableEle = null;
      }
      var gObj = this.parent;
      if (this.getTable()) {
        remove(this.getTable());
      }
      var table2 = this.parent.createElement("table", {
        className: table,
        attrs: {
          cellspacing: "0.25px",
          role: "presentation"
        }
      });
      var findHeaderRow = this.createHeaderContent(tableName);
      var thead = findHeaderRow.thead;
      var tbody2 = this.parent.createElement(tbody, {
        className: this.parent.frozenRows || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow ? "" : "e-hide",
        attrs: {
          role: "rowgroup"
        }
      });
      this.caption = this.parent.createElement("caption", {
        innerHTML: this.parent.element.id + "_header_table",
        className: "e-hide"
      });
      var colGroup2 = this.parent.createElement(colGroup);
      var rowBody = this.parent.createElement("tr", {
        attrs: {
          role: "row"
        },
        className: (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow ? "e-hide" : ""
      });
      var bodyCell;
      var rows = this.rows = findHeaderRow.rows;
      for (var i = 0, len = rows.length; i < len; i++) {
        for (var j = 0, len_1 = rows[parseInt(i.toString(), 10)].cells.length; j < len_1; j++) {
          bodyCell = this.parent.createElement("td");
          rowBody.appendChild(bodyCell);
        }
      }
      if (gObj.allowFiltering || gObj.allowSorting || gObj.allowGrouping) {
        table2.classList.add("e-sortfilter");
      }
      this.updateColGroup(colGroup2);
      tbody2.appendChild(rowBody);
      table2.appendChild(this.setColGroup(colGroup2));
      table2.appendChild(thead);
      table2.appendChild(tbody2);
      table2.appendChild(this.caption);
      return table2;
    };
    HeaderRender2.prototype.createTable = function(tableEle) {
      if (tableEle === void 0) {
        tableEle = null;
      }
      return this.createHeader(tableEle);
    };
    HeaderRender2.prototype.createHeaderContent = function(tableName) {
      var gObj = this.parent;
      var columns = gObj.getColumns();
      var thead = this.parent.createElement("thead", {
        attrs: {
          "role": "rowgroup"
        }
      });
      var colHeader = this.parent.createElement("tr", {
        className: "e-columnheader",
        attrs: {
          role: "row"
        }
      });
      var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Header, gObj);
      rowRenderer.element = colHeader;
      var rows = [];
      var headerRow;
      this.colDepth = measureColumnDepth(gObj.columns);
      for (var i = 0, len = this.colDepth; i < len; i++) {
        rows[parseInt(i.toString(), 10)] = this.generateRow(i);
        rows[parseInt(i.toString(), 10)].cells = [];
      }
      rows = this.ensureColumns(rows);
      rows = this.getHeaderCells(rows, tableName);
      if (gObj.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        for (var i = 0, len = rows.length; i < len; i++) {
          rows[parseInt(i.toString(), 10)].cells.push(this.generateCell({}, CellType.RowDragHIcon));
        }
      }
      for (var i = 0, len = this.colDepth; i < len; i++) {
        headerRow = rowRenderer.render(rows[parseInt(i.toString(), 10)], columns);
        if (this.parent.rowHeight && headerRow.querySelector(".e-headercell")) {
          headerRow.style.height = this.parent.rowHeight + "px";
        }
        addFixedColumnBorder(headerRow);
        thead.appendChild(headerRow);
      }
      var findHeaderRow = {
        thead,
        rows
      };
      return findHeaderRow;
    };
    HeaderRender2.prototype.updateColGroup = function(colGroup2) {
      var cols = this.parent.getColumns();
      var col;
      var indexes = this.parent.getColumnIndexesInView();
      colGroup2.id = this.parent.element.id + colGroup;
      if (this.parent.allowGrouping) {
        for (var i = 0, len = this.parent.groupSettings.columns.length; i < len; i++) {
          if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
            continue;
          }
          col = this.parent.createElement("col", {
            className: "e-group-intent"
          });
          colGroup2.appendChild(col);
        }
      }
      if (this.parent.detailTemplate || this.parent.childGrid) {
        col = this.parent.createElement("col", {
          className: "e-detail-intent"
        });
        colGroup2.appendChild(col);
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
        col = this.parent.createElement("col", {
          className: "e-drag-intent"
        });
        colGroup2.appendChild(col);
      }
      for (var i = 0, len = cols.length; i < len; i++) {
        col = this.parent.createElement("col");
        if (cols[parseInt(i.toString(), 10)].visible === false) {
          setStyleAttribute(col, {
            "display": "none"
          });
        }
        colGroup2.appendChild(col);
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        col = this.parent.createElement("col", {
          className: "e-drag-intent"
        });
        colGroup2.appendChild(col);
      }
      return colGroup2;
    };
    HeaderRender2.prototype.ensureColumns = function(rows) {
      var gObj = this.parent;
      var indexes = this.parent.getColumnIndexesInView();
      for (var i = 0, len = rows.length; i < len; i++) {
        if (gObj.allowGrouping) {
          for (var c = 0, len_2 = gObj.groupSettings.columns.length; c < len_2; c++) {
            if (this.parent.enableColumnVirtualization && indexes.indexOf(c) === -1) {
              continue;
            }
            rows[parseInt(i.toString(), 10)].cells.push(this.generateCell({}, CellType.HeaderIndent));
          }
        }
        if (gObj.detailTemplate || gObj.childGrid) {
          var args = {};
          this.parent.notify(detailIndentCellInfo, args);
          rows[parseInt(i.toString(), 10)].cells.push(this.generateCell(args, CellType.DetailHeader));
        }
        if (gObj.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
          rows[parseInt(i.toString(), 10)].cells.push(this.generateCell({}, CellType.RowDragHIcon));
        }
      }
      return rows;
    };
    HeaderRender2.prototype.getHeaderCells = function(rows, tableName) {
      var thead = this.parent.getHeaderTable() && this.parent.getHeaderTable().querySelector("thead");
      var cols = this.parent.enableColumnVirtualization ? this.parent.getColumns(this.parent.enablePersistence) : this.parent.columns;
      this.frzIdx = 0;
      this.notfrzIdx = 0;
      if (this.parent.lockcolPositionCount) {
        for (var i = 0; i < (!isNullOrUndefined(cols) ? cols.length : 0); i++) {
          this.lockColsRendered = false;
          rows = this.appendCells(cols[parseInt(i.toString(), 10)], rows, 0, i === 0, false, i === cols.length - 1, thead, tableName, false);
        }
      }
      for (var i = 0, len = !isNullOrUndefined(cols) ? cols.length : 0; i < len; i++) {
        this.notfrzIdx = 0;
        this.lockColsRendered = true;
        rows = this.appendCells(cols[parseInt(i.toString(), 10)], rows, 0, i === 0, false, i === len - 1, thead, tableName, false);
      }
      return rows;
    };
    HeaderRender2.prototype.appendCells = function(cols, rows, index, isFirstObj, isFirstCol, isLastCol, isMovable, tableName, isStackLastCol) {
      var lastCol = isLastCol ? isStackLastCol ? "e-laststackcell" : "e-lastcell" : "";
      var isLockColumn = !this.parent.lockcolPositionCount || cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered;
      if (!cols.columns) {
        if (isLockColumn) {
          rows[parseInt(index.toString(), 10)].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? "" : isFirstCol ? "e-firstcell" : "") + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));
        }
        if (this.parent.lockcolPositionCount) {
          if (this.frzIdx + this.notfrzIdx < this.parent.frozenColumns && (cols.lockColumn && !this.lockColsRendered || !cols.lockColumn && this.lockColsRendered)) {
            this.frzIdx++;
          } else {
            this.notfrzIdx++;
          }
        } else {
          this.frzIdx++;
        }
      } else {
        this.isFirstCol = false;
        var colSpan = this.getCellCnt(cols, 0);
        if (colSpan) {
          var stackedLockColsCount = this.getStackedLockColsCount(cols, 0);
          var isStackedLockColumn = this.parent.lockcolPositionCount === 0 || !this.lockColsRendered && stackedLockColsCount !== 0 || this.lockColsRendered && colSpan - stackedLockColsCount !== 0;
          if (isStackedLockColumn) {
            rows[parseInt(index.toString(), 10)].cells.push(new Cell({
              cellType: CellType.StackedHeader,
              column: cols,
              colSpan: this.getColSpan(colSpan, stackedLockColsCount),
              className: isFirstObj ? "" : isFirstCol ? "e-firstcell" : ""
            }));
          }
        }
        if (this.parent.lockcolPositionCount && !this.lockColsRendered) {
          for (var i = 0; i < cols.columns.length; i++) {
            rows = this.appendCells(cols.columns[parseInt(i.toString(), 10)], rows, index + 1, isFirstObj, i === 0, i === cols.columns.length - 1 && isLastCol, isMovable, tableName, false);
          }
        }
        if (this.lockColsRendered) {
          for (var i = 0, len = cols.columns.length; i < len; i++) {
            isFirstObj = isFirstObj && i === 0;
            var isFirstCol_1 = this.isFirstCol = cols.columns[parseInt(i.toString(), 10)].visible && !isFirstObj;
            var isLaststackedCol = i === len - 1 && isLastCol;
            rows = this.appendCells(cols.columns[parseInt(i.toString(), 10)], rows, index + 1, isFirstObj, isFirstCol_1 && !isLaststackedCol, isLaststackedCol, isMovable, tableName, true);
          }
        }
      }
      return rows;
    };
    HeaderRender2.prototype.getStackedLockColsCount = function(col, lockColsCount) {
      if (col.columns) {
        for (var i = 0; i < col.columns.length; i++) {
          lockColsCount = this.getStackedLockColsCount(col.columns[parseInt(i.toString(), 10)], lockColsCount);
        }
      } else if (col.lockColumn) {
        lockColsCount++;
      }
      return lockColsCount;
    };
    HeaderRender2.prototype.getColSpan = function(colSpan, stackedLockColsCount) {
      colSpan = !this.lockColsRendered ? stackedLockColsCount : colSpan - stackedLockColsCount;
      return colSpan;
    };
    HeaderRender2.prototype.generateRow = function(index) {
      return new Row({});
    };
    HeaderRender2.prototype.generateCell = function(column, cellType, rowSpan, className, rowIndex, colIndex) {
      var opt = {
        "visible": column.visible,
        "isDataCell": false,
        "isTemplate": !isNullOrUndefined(column.headerTemplate),
        "rowID": "",
        "column": column,
        "cellType": cellType,
        "rowSpan": rowSpan,
        "className": className,
        "index": rowIndex,
        "colIndex": colIndex
      };
      if (!opt.rowSpan || opt.rowSpan < 2) {
        delete opt.rowSpan;
      }
      return new Cell(opt);
    };
    HeaderRender2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var displayVal;
      var idx;
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        idx = gObj.getNormalizedColumnIndex(column.uid);
        displayVal = column.visible ? "" : "none";
        setStyleAttribute(this.getColGroup().children[parseInt(idx.toString(), 10)], {
          "display": displayVal
        });
        if (gObj.editSettings.showAddNewRow && gObj.element.querySelector(".e-addedrow")) {
          setStyleAttribute(gObj.element.querySelector(".e-addedrow").querySelector("colgroup").childNodes[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
      }
      this.refreshUI();
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.isAddNewRow = true;
      }
    };
    HeaderRender2.prototype.colPosRefresh = function() {
      this.refreshUI();
    };
    HeaderRender2.prototype.refreshUI = function() {
      var headerDiv = this.getPanel();
      this.toggleStackClass(headerDiv);
      var table2 = this.freezeReorder ? this.headerPanel.querySelector("." + movableHeader).querySelector("." + table) : this.getTable();
      var tableName = void 0;
      if (table2) {
        remove(table2);
        if (this.parent.editSettings.showAddNewRow && !this.parent.isAddNewRow && table2.querySelector(".e-addedrow") && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
          table2.querySelector(".e-addedrow").classList.add("e-addrow-removed");
          this.parent.isAddNewRow = true;
        }
        table2.removeChild(table2.firstChild);
        table2.removeChild(table2.childNodes[0]);
        var colGroup2 = this.parent.createElement(colGroup);
        var findHeaderRow = this.createHeaderContent(tableName);
        this.rows = findHeaderRow.rows;
        table2.insertBefore(findHeaderRow.thead, table2.firstChild);
        this.updateColGroup(colGroup2);
        table2.insertBefore(this.setColGroup(colGroup2), table2.firstChild);
        this.appendContent(table2);
        this.parent.notify(colGroupRefresh, {});
        this.widthService.setWidthToColumns();
        this.parent.updateDefaultCursor();
        this.initializeHeaderDrag();
        var rows = [].slice.call(headerDiv.querySelectorAll("tr.e-columnheader"));
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row2 = rows_1[_i];
          var gCells = [].slice.call(row2.getElementsByClassName("e-grouptopleftcell"));
          if (gCells.length) {
            gCells[gCells.length - 1].classList.add("e-lastgrouptopleftcell");
          }
        }
        this.parent.notify(headerRefreshed, {
          rows: this.rows
        });
        if (this.parent.enableColumnVirtualization && parentsUntil(table2, movableHeader)) {
          this.parent.notify(headerRefreshed, {
            rows: this.rows,
            args: {
              isFrozen: false,
              isXaxis: true
            }
          });
        }
        if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === "Header") {
          wrap(rows, true);
        }
      }
      var firstHeaderCell = this.parent.getHeaderContent().querySelector(".e-headercell:not(.e-hide)");
      if (!isNullOrUndefined(firstHeaderCell)) {
        firstHeaderCell.tabIndex = 0;
      }
    };
    HeaderRender2.prototype.toggleStackClass = function(div) {
      var column = this.parent.columns;
      var stackedHdr = !isNullOrUndefined(column) ? column.some(function(column2) {
        return !isNullOrUndefined(column2.columns);
      }) : false;
      if (stackedHdr) {
        div.classList.add("e-stackedheader");
      } else {
        div.classList.remove("e-stackedheader");
      }
    };
    HeaderRender2.prototype.appendContent = function(table2) {
      this.getPanel().querySelector("." + headerContent).appendChild(table2);
    };
    HeaderRender2.prototype.getCellCnt = function(col, cnt) {
      if (col.columns) {
        for (var i = 0, len = col.columns.length; i < len; i++) {
          cnt = this.getCellCnt(col.columns[parseInt(i.toString(), 10)], cnt);
        }
      } else {
        if (col.visible) {
          cnt++;
        }
      }
      return cnt;
    };
    HeaderRender2.prototype.initializeHeaderDrag = function() {
      var gObj = this.parent;
      if (!(this.parent.allowReordering || this.parent.allowGrouping && this.parent.groupSettings.showDropArea)) {
        return;
      }
      this.draggable = new Draggable(gObj.getHeaderContent(), {
        dragTarget: ".e-headercell",
        distance: 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop,
        abort: ".e-rhandler",
        isReplaceDragEle: this.isReplaceDragEle
      });
      this.parent.on(destroy, this.droppableDestroy, this);
    };
    HeaderRender2.prototype.initializeHeaderDrop = function() {
      var gObj = this.parent;
      this.droppable = new Droppable(gObj.getHeaderContent(), {
        accept: ".e-dragclone",
        drop: this.drop
      });
      this.parent.on(destroy, this.droppableDestroy, this);
    };
    HeaderRender2.prototype.droppableDestroy = function() {
      if (this.droppable && !this.droppable.isDestroyed) {
        this.droppable.destroy();
      }
      if (this.draggable && !this.draggable.isDestroyed) {
        this.draggable.destroy();
      }
    };
    HeaderRender2.prototype.renderCustomToolbar = function() {
      var _this = this;
      var gObj = this.parent;
      if (gObj.rowRenderingMode === "Vertical" && !gObj.toolbar && (gObj.allowSorting || gObj.allowFiltering && gObj.filterSettings.type !== "FilterBar")) {
        var div = gObj.createElement("div", {
          className: "e-res-toolbar e-toolbar"
        });
        var toolbarItems = gObj.createElement("div", {
          className: "e-toolbar-items"
        });
        var toolbarLeft = gObj.createElement("div", {
          className: "e-toolbar-left"
        });
        var count2 = this.parent.allowFiltering && this.parent.allowSorting ? 2 : 1;
        for (var i = 0; i < count2; i++) {
          var toolbarItem = gObj.createElement("div", {
            className: "e-toolbar-item e-gridresponsiveicons e-icons e-tbtn-align"
          });
          var cls = count2 === 1 ? this.parent.allowSorting ? "sort" : "filter" : i === 1 ? "sort" : "filter";
          var button = gObj.createElement("button", {
            className: "e-tbar-btn e-control e-btn e-lib e-icon-btn"
          });
          var span = gObj.createElement("span", {
            className: "e-btn-icon e-res" + cls + "-icon e-icons"
          });
          button.appendChild(span);
          var btnObj = new Button({
            cssClass: this.parent.cssClass ? this.parent.cssClass : ""
          });
          btnObj.appendTo(button);
          button.onclick = function(e) {
            if (e.target.classList.contains("e-ressort-btn") || e.target.classList.contains("e-ressort-icon") || e.target.querySelector(".e-ressort-icon")) {
              _this.parent.showResponsiveCustomSort();
            } else {
              _this.parent.showResponsiveCustomFilter();
            }
          };
          toolbarItem.appendChild(button);
          toolbarLeft.appendChild(toolbarItem);
        }
        toolbarItems.appendChild(toolbarLeft);
        div.appendChild(toolbarItems);
        gObj.element.insertBefore(div, this.parent.element.querySelector("." + gridHeader));
      } else {
        if (gObj.enableAdaptiveUI && !gObj.toolbar) {
          gObj.getContent().classList.add("e-responsive-header");
        }
      }
    };
    HeaderRender2.prototype.updateCustomResponsiveToolbar = function(args) {
      var resToolbar = this.parent.element.querySelector(".e-responsive-toolbar");
      if (args.module === "toolbar") {
        if (resToolbar) {
          remove(resToolbar);
        } else {
          this.renderCustomToolbar();
        }
      }
    };
    return HeaderRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js
var CellRenderer = (
  /** @class */
  function() {
    function CellRenderer2(parent, locator) {
      this.localizer = locator.getService("localization");
      this.formatter = locator.getService("valueFormatter");
      this.parent = parent;
      this.element = this.parent.createElement("TD", {
        className: rowCell,
        attrs: {
          role: "gridcell",
          tabindex: "-1"
        }
      });
      this.rowChkBox = this.parent.createElement("input", {
        className: "e-checkselect",
        attrs: {
          "type": "checkbox",
          "aria-label": this.localizer.getConstant("SelectRow")
        }
      });
    }
    CellRenderer2.prototype.getGui = function() {
      return "";
    };
    CellRenderer2.prototype.format = function(column, value, data) {
      if (!isNullOrUndefined(column.format)) {
        if (column.type === "number" && isNaN(parseInt(value, 10))) {
          value = null;
        }
        if (column.type === "dateonly" && typeof value === "string" && value) {
          var arr = value.split(/[^0-9.]/);
          value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
        }
        value = this.formatter.toView(value, column.getFormatter());
      }
      return isNullOrUndefined(value) ? "" : value.toString();
    };
    CellRenderer2.prototype.evaluate = function(node, cell, data, attributes2, fData, isEdit) {
      var _a;
      var result;
      if (cell.column.template) {
        var isReactCompiler = this.parent.isReact && typeof cell.column.template !== "string" && cell.column.template.prototype && !cell.column.template.prototype.CSPTemplate;
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var literals_1 = ["index"];
        var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));
        var templateID = this.parent.element.id + cell.column.uid;
        var str = "isStringTemplate";
        if (isReactCompiler || isReactChild) {
          var copied = {
            "index": attributes2[literals_1[0]]
          };
          cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, "columnTemplate", templateID, this.parent["" + str], null, node);
        } else {
          result = cell.column.getColumnTemplate()(extend({
            "index": attributes2[literals_1[0]]
          }, dummyData), this.parent, "template", templateID, this.parent["" + str], void 0, void 0, this.parent["root"]);
        }
        if (!isReactCompiler && !isReactChild) {
          appendChildren(node, result);
        }
        this.parent.notify("template-result", {
          template: result
        });
        result = null;
        node.setAttribute("aria-label", node.innerText + this.localizer.getConstant("TemplateCell") + this.localizer.getConstant("ColumnHeader") + cell.column.headerText);
        return false;
      }
      return true;
    };
    CellRenderer2.prototype.invokeFormatter = function(column, value, data) {
      if (!isNullOrUndefined(column.formatter)) {
        if (doesImplementInterface(column.formatter, "getValue")) {
          var formatter = column.formatter;
          value = new formatter().getValue(column, data);
        } else if (typeof column.formatter === "function") {
          value = column.formatter(column, data);
        } else {
          value = column.formatter.getValue(column, data);
        }
      }
      return value;
    };
    CellRenderer2.prototype.render = function(cell, data, attributes2, isExpand, isEdit) {
      return this.refreshCell(cell, data, attributes2, isEdit);
    };
    CellRenderer2.prototype.refreshTD = function(td, cell, data, attributes2) {
      var isEdit = this.parent.editSettings.mode === "Batch" && td.classList.contains("e-editedbatchcell");
      if (this.parent.isReact) {
        var cellIndex = td.cellIndex;
        var parentRow = td.parentElement;
        remove(td);
        var newTD = this.refreshCell(cell, data, attributes2, isEdit);
        this.cloneAttributes(newTD, td);
        if (parentRow.cells.length !== cellIndex - 1) {
          parentRow.insertBefore(newTD, parentRow.cells[parseInt(cellIndex.toString(), 10)]);
        } else {
          parentRow.appendChild(newTD);
        }
      } else {
        var node = this.refreshCell(cell, data, attributes2, isEdit);
        td.innerHTML = "";
        var arialabelText = node.getAttribute("aria-label");
        arialabelText ? td.setAttribute("aria-label", arialabelText) : null;
        var elements = [].slice.call(node.childNodes);
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
          var elem = elements_1[_i];
          td.appendChild(elem);
        }
      }
    };
    CellRenderer2.prototype.cloneAttributes = function(target, source) {
      var attrs = source.attributes;
      var i = attrs.length;
      var attr;
      while (i--) {
        attr = attrs[parseInt(i.toString(), 10)];
        target.setAttribute(attr.name, attr.value);
      }
    };
    CellRenderer2.prototype.refreshCell = function(cell, data, attributes2, isEdit) {
      var _a;
      var node = this.element.cloneNode();
      var column = cell.column;
      var fData;
      if (cell.isForeignKey) {
        fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : "", _a);
      }
      var innerHtml = this.getGui();
      var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) : this.getValue(column.field, data, column);
      if ((column.type === "date" || column.type === "datetime") && !isNullOrUndefined(value)) {
        value = new Date(value);
      }
      if (column.type === "dateonly" && !isNullOrUndefined(value) && typeof value === "string") {
        var arr = value.split(/[^0-9.]/);
        value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
      }
      value = this.format(column, value, data);
      innerHtml = value.toString();
      if (column.type === "boolean" && !column.displayAsCheckBox) {
        var localeStr = value !== "true" && value !== "false" ? null : value === "true" ? "True" : "False";
        innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;
      }
      var fromFormatter = this.invokeFormatter(column, value, data);
      innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? "" : fromFormatter.toString() : innerHtml;
      if (this.evaluate(node, cell, data, attributes2, fData, isEdit) && column.type !== "checkbox") {
        this.appendHtml(node, this.parent.sanitize(innerHtml), column.getDomSetter ? column.getDomSetter() : "innerHTML");
      } else if (column.type === "checkbox") {
        node.classList.add(gridChkBox);
        if (this.parent.selectionSettings.persistSelection) {
          value = value === "true";
        } else {
          value = false;
        }
        var checkWrap = createCheckBox(this.parent.createElement, false, {
          checked: value,
          label: " "
        });
        if (this.parent.cssClass) {
          addClass([checkWrap], [this.parent.cssClass]);
        }
        this.rowChkBox.id = "checkbox-" + cell.rowID;
        checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);
        node.appendChild(checkWrap);
      }
      if (this.parent.checkAllRows === "Check" && this.parent.enableVirtualization) {
        cell.isSelected = true;
      }
      this.setAttributes(node, cell, attributes2);
      if (column.type === "boolean" && column.displayAsCheckBox) {
        var checked = isNaN(parseInt(value.toString(), 10)) ? value === "true" : parseInt(value.toString(), 10) > 0;
        var checkWrap = createCheckBox(this.parent.createElement, false, {
          checked,
          label: " "
        });
        node.innerHTML = "";
        node.classList.add("e-gridchkbox-cell");
        checkWrap.classList.add("e-checkbox-disabled");
        if (this.parent.cssClass) {
          addClass([checkWrap], [this.parent.cssClass]);
        }
        node.appendChild(checkWrap);
      }
      if (node.classList.contains("e-summarycell") && !data.key) {
        var uid2 = node.getAttribute("e-mappinguid");
        column = this.parent.getColumnByUid(uid2);
        node.setAttribute("aria-label", innerHtml + this.localizer.getConstant("ColumnHeader") + cell.column.headerText);
      }
      if (this.parent.isFrozenGrid() && (!data || data && !data.key)) {
        addStickyColumnPosition(this.parent, column, node);
      }
      return node;
    };
    CellRenderer2.prototype.appendHtml = function(node, innerHtml, property) {
      if (property === void 0) {
        property = "innerHTML";
      }
      node["" + property] = innerHtml;
      return node;
    };
    CellRenderer2.prototype.setAttributes = function(node, cell, attributes2) {
      var column = cell.column;
      this.buildAttributeFromCell(node, cell, column.type === "checkbox");
      setStyleAndAttributes(node, attributes2);
      setStyleAndAttributes(node, cell.attributes);
      if (column.customAttributes) {
        setStyleAndAttributes(node, column.customAttributes);
      }
      if (this.parent.rowRenderingMode === "Vertical") {
        setStyleAndAttributes(node, {
          "data-cell": column.headerText
        });
      }
      if (column.textAlign) {
        node.style.textAlign = column.textAlign;
      }
      if (column.clipMode === "Clip" || !column.clipMode && this.parent.clipMode === "Clip") {
        node.classList.add("e-gridclip");
      } else if (column.clipMode === "EllipsisWithTooltip" || !column.clipMode && this.parent.clipMode === "EllipsisWithTooltip" && !(this.parent.allowTextWrap && (this.parent.textWrapSettings.wrapMode === "Content" || this.parent.textWrapSettings.wrapMode === "Both"))) {
        if (column.type !== "checkbox") {
          node.classList.add("e-ellipsistooltip");
        }
      }
    };
    CellRenderer2.prototype.buildAttributeFromCell = function(node, cell, isCheckBoxType) {
      var attr = {};
      var prop = {
        "colindex": dataColIndex
      };
      var classes = [];
      if (cell.colSpan) {
        attr.colSpan = cell.colSpan;
      }
      if (cell.rowSpan) {
        attr.rowSpan = cell.rowSpan;
      }
      if (cell.isTemplate) {
        classes.push("e-templatecell");
      }
      if (cell.isSelected) {
        classes.push.apply(classes, ["e-selectionbackground", "e-active"]);
        if (isCheckBoxType) {
          node.querySelector(".e-frame").classList.add("e-check");
        }
      }
      if (cell.isColumnSelected) {
        classes.push.apply(classes, ["e-columnselection"]);
      }
      if (cell.cellType === CellType.Header) {
        attr[prop.colindex] = cell.colIndex;
        attr[ariaColIndex] = cell.colIndex + 1;
      } else if (!isNullOrUndefined(cell.index)) {
        attr[prop.colindex] = cell.index;
        attr[ariaColIndex] = cell.index + 1;
      }
      if (!cell.visible) {
        classes.push("e-hide");
      }
      attr.class = classes;
      setStyleAndAttributes(node, attr);
    };
    CellRenderer2.prototype.getValue = function(field, data, column) {
      return column.valueAccessor(field, data, column);
    };
    return CellRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/aria-service.js
var AriaService = (
  /** @class */
  function() {
    function AriaService2() {
    }
    AriaService2.prototype.setOptions = function(target, options) {
      var props = Object.keys(options);
      for (var i = 0; i < props.length; i++) {
        setStateAndProperties(target, config[props[parseInt(i.toString(), 10)]], options[props[parseInt(i.toString(), 10)]]);
      }
    };
    AriaService2.prototype.setExpand = function(target, expand) {
      setStateAndProperties(target, config.expand, expand);
    };
    AriaService2.prototype.setSort = function(target, direction) {
      setStateAndProperties(target, config.sort, direction, typeof direction === "boolean");
    };
    AriaService2.prototype.setBusy = function(target, isBusy) {
      setStateAndProperties(target, config.busy, isBusy);
      setStateAndProperties(target, config.invalid, null, true);
    };
    AriaService2.prototype.setGrabbed = function(target, isGrabbed, remove2) {
      setStateAndProperties(target, config.grabbed, isGrabbed, remove2);
    };
    AriaService2.prototype.setDropTarget = function(target, isTarget) {
      setStateAndProperties(target, config.dropeffect, "copy", !isTarget);
    };
    return AriaService2;
  }()
);
function setStateAndProperties(target, attribute, value, remove2) {
  if (remove2 && target) {
    target.removeAttribute(attribute);
    return;
  }
  if (target) {
    target.setAttribute(attribute, value);
  }
}
var config = {
  expand: "aria-expanded",
  role: "role",
  datarole: "data-role",
  selected: "aria-selected",
  multiselectable: "aria-multiselectable",
  sort: "aria-sort",
  busy: "aria-busy",
  invalid: "aria-invalid",
  grabbed: "aria-grabbed",
  dropeffect: "aria-dropeffect",
  haspopup: "aria-haspopup",
  level: "aria-level",
  colcount: "aria-colcount",
  rowcount: "aria-rowcount"
};

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-cell-renderer.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HeaderCellRenderer = (
  /** @class */
  function(_super) {
    __extends4(HeaderCellRenderer2, _super);
    function HeaderCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-headercell",
        attrs: {
          tabindex: "-1",
          role: "columnheader"
        }
      });
      _this.ariaService = new AriaService();
      _this.hTxtEle = _this.parent.createElement("span", {
        className: "e-headertext"
      });
      _this.sortEle = _this.parent.createElement("div", {
        className: "e-sortfilterdiv e-icons",
        attrs: {
          "aria-hidden": "true"
        }
      });
      _this.gui = _this.parent.createElement("div");
      _this.chkAllBox = _this.parent.createElement("input", {
        className: "e-checkselectall",
        attrs: {
          "type": "checkbox",
          "aria-label": _this.localizer.getConstant("SelectAllCheckbox")
        }
      });
      return _this;
    }
    HeaderCellRenderer2.prototype.getGui = function() {
      return this.gui.cloneNode();
    };
    HeaderCellRenderer2.prototype.render = function(cell, data, attributes2) {
      var node = this.element.cloneNode();
      var fltrMenuEle = this.parent.createElement("div", {
        className: "e-filtermenudiv e-icons e-icon-filter",
        attrs: {
          "aria-hidden": "true"
        }
      });
      return this.prepareHeader(cell, node, fltrMenuEle);
    };
    HeaderCellRenderer2.prototype.refresh = function(cell, node) {
      this.clean(node);
      var fltrMenuEle = this.parent.createElement("div", {
        className: "e-filtermenudiv e-icons e-icon-filter",
        attrs: {
          "aria-hidden": "true"
        }
      });
      return this.prepareHeader(cell, node, fltrMenuEle);
    };
    HeaderCellRenderer2.prototype.clean = function(node) {
      node.innerHTML = "";
    };
    HeaderCellRenderer2.prototype.prepareHeader = function(cell, node, fltrMenuEle) {
      var column = cell.column;
      var ariaAttr = {};
      var elementDesc = "";
      var innerDIV = this.getGui();
      var hValueAccer;
      attributes(innerDIV, {
        "e-mappinguid": column.uid,
        "class": "e-headercelldiv"
      });
      if (!isNullOrUndefined(column.headerValueAccessor)) {
        hValueAccer = this.getValue(column.headerText, column);
      }
      if (this.parent.allowSorting && column.allowSorting && !isNullOrUndefined(column.field)) {
        node.classList.add("e-sort-icon");
      }
      if (column.type !== "checkbox") {
        var value = column.headerText;
        if (!isNullOrUndefined(hValueAccer)) {
          value = hValueAccer;
        }
        var headerText = this.hTxtEle.cloneNode();
        headerText[column.getDomSetter()] = this.parent.sanitize(value);
        innerDIV.appendChild(headerText);
      } else {
        column.editType = "booleanedit";
        var checkAllWrap = createCheckBox(this.parent.createElement, false, {
          checked: false,
          label: " "
        });
        this.chkAllBox.id = "checkbox-" + column.uid;
        checkAllWrap.insertBefore(this.chkAllBox.cloneNode(), checkAllWrap.firstChild);
        if (this.parent.cssClass) {
          addClass([checkAllWrap], [this.parent.cssClass]);
        }
        innerDIV.appendChild(checkAllWrap);
        innerDIV.classList.add("e-headerchkcelldiv");
      }
      this.buildAttributeFromCell(node, cell);
      this.appendHtml(node, innerDIV);
      node.appendChild(this.sortEle.cloneNode());
      if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar" && column.allowFiltering && !isNullOrUndefined(column.field) && !(this.parent.showColumnMenu && column.showColumnMenu)) {
        attributes(fltrMenuEle, {
          "e-mappinguid": "e-flmenu-" + column.uid
        });
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("FilterDescription") : this.localizer.getConstant("FilterDescription");
        node.classList.add("e-fltr-icon");
        var matchFlColumns = [];
        if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFlColumns.length) {
          var foreignColumn = this.parent.getForeignKeyColumns();
          for (var index = 0; index < this.parent.columns.length; index++) {
            for (var count2 = 0; count2 < this.parent.filterSettings.columns.length; count2++) {
              if (this.parent.filterSettings.columns[parseInt(count2.toString(), 10)].field === column.field || foreignColumn.length && column.foreignKeyValue === this.parent.filterSettings.columns[parseInt(count2.toString(), 10)].field) {
                fltrMenuEle.classList.add("e-filtered");
                matchFlColumns.push(column.field);
                break;
              }
            }
          }
        }
        node.appendChild(fltrMenuEle.cloneNode());
      }
      if (cell.className) {
        node.classList.add(cell.className);
      }
      if (column.customAttributes) {
        setStyleAndAttributes(node, column.customAttributes);
      }
      if (this.parent.allowSorting && column.allowSorting) {
        ariaAttr.sort = "none";
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("SortDescription") : this.localizer.getConstant("SortDescription");
      }
      if (this.parent.allowGrouping && column.allowGrouping || this.parent.allowReordering && column.allowReordering) {
        ariaAttr.grabbed = false;
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("GroupDescription") : this.localizer.getConstant("GroupDescription");
      }
      if (this.parent.showColumnMenu && column.type !== "checkbox" && !column.template) {
        elementDesc = elementDesc.length ? elementDesc + ". " + this.localizer.getConstant("ColumnMenuDescription") : this.localizer.getConstant("ColumnMenuDescription");
      }
      node = this.extendPrepareHeader(column, node);
      var result;
      var gridObj = this.parent;
      var colIndex = gridObj.getColumnIndexByField(column.field);
      if (!isNullOrUndefined(column.headerTemplate)) {
        var headerTempID = gridObj.element.id + column.uid + "headerTemplate";
        var str = "isStringTemplate";
        var col = column;
        var isReactCompiler = this.parent.isReact && typeof column.headerTemplate !== "string";
        var isReactChild_1 = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        if (isReactCompiler || isReactChild_1) {
          var copied = {
            "index": colIndex
          };
          node.firstElementChild.innerHTML = "";
          column.getHeaderTemplate()(extend(copied, col), gridObj, "headerTemplate", headerTempID, this.parent["" + str], null, node.firstElementChild);
          this.parent.renderTemplates();
        } else {
          result = column.getHeaderTemplate()(extend({
            "index": colIndex
          }, col), gridObj, "headerTemplate", headerTempID, this.parent["" + str], void 0, void 0, this.parent["root"]);
          node.firstElementChild.innerHTML = "";
          appendChildren(node.firstElementChild, result);
        }
      }
      this.ariaService.setOptions(node, ariaAttr);
      if (!isNullOrUndefined(column.headerTextAlign) || !isNullOrUndefined(column.textAlign)) {
        var alignment = column.headerTextAlign || column.textAlign;
        innerDIV.style.textAlign = alignment;
        if (alignment === "Right" || alignment === "Left") {
          node.classList.add(alignment === "Right" ? "e-rightalign" : "e-leftalign");
        } else if (alignment === "Center") {
          node.classList.add("e-centeralign");
        }
      }
      if (column.clipMode === "Clip" || !column.clipMode && this.parent.clipMode === "Clip") {
        node.classList.add("e-gridclip");
      } else if ((column.clipMode === "EllipsisWithTooltip" || !column.clipMode && this.parent.clipMode === "EllipsisWithTooltip") && !(gridObj.allowTextWrap && (gridObj.textWrapSettings.wrapMode === "Header" || gridObj.textWrapSettings.wrapMode === "Both"))) {
        if (column.type !== "checkbox") {
          node.classList.add("e-ellipsistooltip");
        }
      }
      if (elementDesc) {
        var titleElem = this.parent.createElement("span", {
          id: "headerTitle-" + column.uid,
          innerHTML: elementDesc,
          attrs: {
            style: "display:none"
          }
        });
        node.appendChild(titleElem);
        node.setAttribute("aria-describedby", titleElem.id);
      }
      node.setAttribute("aria-rowspan", (!isNullOrUndefined(cell.rowSpan) ? cell.rowSpan : 1).toString());
      node.setAttribute("aria-colspan", "1");
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if ((this.parent.isReact && this.parent.requireTemplateRef || isReactChild && this.parent.parentDetails.parentInstObj.requireTemplateRef) && !isNullOrUndefined(column.headerTemplate)) {
        var thisRef_1 = this;
        thisRef_1.parent.renderTemplates(function() {
          thisRef_1.parent.trigger(headerCellInfo, {
            cell,
            node
          });
        });
      } else {
        this.parent.trigger(headerCellInfo, {
          cell,
          node
        });
      }
      if (this.parent.isFrozenGrid()) {
        addStickyColumnPosition(this.parent, column, node);
      }
      return node;
    };
    HeaderCellRenderer2.prototype.getValue = function(field, column) {
      return column.headerValueAccessor(field, column);
    };
    HeaderCellRenderer2.prototype.extendPrepareHeader = function(column, node) {
      if (this.parent.showColumnMenu && column.showColumnMenu && !isNullOrUndefined(column.field)) {
        var element = this.parent.createElement("div", {
          className: "e-icons e-columnmenu",
          attrs: {
            "aria-hidden": "true"
          }
        });
        var matchFilteredColumns = [];
        if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFilteredColumns.length) {
          for (var i = 0; i < this.parent.columns.length; i++) {
            for (var j = 0; j < this.parent.filterSettings.columns.length; j++) {
              if (this.parent.filterSettings.columns[parseInt(j.toString(), 10)].field === column.field) {
                element.classList.add("e-filtered");
                matchFilteredColumns.push(column.field);
                break;
              }
            }
          }
        }
        node.classList.add("e-fltr-icon");
        node.appendChild(element);
      }
      if (this.parent.allowResizing) {
        var handler = this.parent.createElement("div");
        handler.className = column.allowResizing ? "e-rhandler e-rcursor" : "e-rsuppress";
        node.appendChild(handler);
      }
      return node;
    };
    HeaderCellRenderer2.prototype.appendHtml = function(node, innerHtml) {
      node.appendChild(innerHtml);
      return node;
    };
    return HeaderCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/stacked-cell-renderer.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var StackedHeaderCellRenderer = (
  /** @class */
  function(_super) {
    __extends5(StackedHeaderCellRenderer2, _super);
    function StackedHeaderCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-headercell e-stackedheadercell",
        attrs: {
          tabindex: "-1",
          role: "columnheader"
        }
      });
      return _this;
    }
    StackedHeaderCellRenderer2.prototype.render = function(cell, data, attributes2) {
      var node = this.element.cloneNode();
      var div = this.parent.createElement("div", {
        className: "e-stackedheadercelldiv",
        attrs: {
          "e-mappinguid": cell.column.uid
        }
      });
      var column = cell.column;
      node.appendChild(div);
      if (!isNullOrUndefined(column.headerTemplate)) {
        appendChildren(div, column.getHeaderTemplate()(column, this.parent, "headerTemplate"));
      } else {
        this.appendHtml(div, this.parent.sanitize(column.headerText), column.getDomSetter());
      }
      if (cell.column.toolTip) {
        node.setAttribute("title", cell.column.toolTip);
      }
      if (column.clipMode === "Clip" || !column.clipMode && this.parent.clipMode === "Clip") {
        node.classList.add("e-gridclip");
      } else if (column.clipMode === "EllipsisWithTooltip" || !column.clipMode && this.parent.clipMode === "EllipsisWithTooltip") {
        node.classList.add("e-ellipsistooltip");
      }
      if (!isNullOrUndefined(cell.column.textAlign)) {
        div.style.textAlign = cell.column.textAlign;
      }
      if (cell.column.customAttributes) {
        setStyleAndAttributes(node, cell.column.customAttributes);
      }
      node.setAttribute("colspan", cell.colSpan.toString());
      node.setAttribute("aria-colspan", cell.colSpan.toString());
      node.setAttribute("aria-rowspan", "1");
      if (this.parent.allowResizing) {
        var handler = this.parent.createElement("div");
        handler.className = cell.column.allowResizing ? "e-rhandler e-rcursor" : "e-rsuppress";
        node.appendChild(handler);
      }
      if (cell.className) {
        node.classList.add(cell.className);
      }
      this.parent.trigger(headerCellInfo, {
        cell,
        node
      });
      if (frozenDirection(column) === "Left") {
        node.classList.add("e-leftfreeze");
        if (column.border === "Left") {
          node.classList.add("e-freezeleftborder");
        }
        if (column.index === 0) {
          applyStickyLeftRightPosition(node, this.parent.getIndentCount() * 30, this.parent.enableRtl, "Left");
        } else {
          var cols = this.parent.getColumns();
          var width = this.parent.getIndentCount() * 30;
          for (var i = 0; i < cols.length; i++) {
            if (column.index < cols[parseInt(i.toString(), 10)].index) {
              break;
            }
            if (cols[parseInt(i.toString(), 10)].visible) {
              width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
            }
          }
          applyStickyLeftRightPosition(node, width, this.parent.enableRtl, "Left");
        }
      } else if (frozenDirection(column) === "Right") {
        node.classList.add("e-rightfreeze");
        var cols = this.parent.getColumns();
        var width = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
        for (var i = cols.length - 1; i >= 0; i--) {
          if (isChildColumn(column, cols[parseInt(i.toString(), 10)].uid) || column.index > cols[parseInt(i.toString(), 10)].index) {
            break;
          }
          if (cols[parseInt(i.toString(), 10)].visible) {
            width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
          }
        }
        applyStickyLeftRightPosition(node, width, this.parent.enableRtl, "Right");
        if (column.border === "Right") {
          node.classList.add("e-freezerightborder");
        }
      } else if (frozenDirection(column) === "Fixed") {
        node.classList.add("e-fixedfreeze");
        var cols = this.parent.getColumns();
        var width = 0;
        if (this.parent.getVisibleFrozenLeftCount()) {
          width = this.parent.getIndentCount() * 30;
        } else if (this.parent.getFrozenMode() === "Right") {
          width = this.parent.groupSettings.columns.length * 30;
        }
        for (var i = 0; i < cols.length; i++) {
          if (column.index > cols[parseInt(i.toString(), 10)].index) {
            if (cols[parseInt(i.toString(), 10)].freeze === "Left" || cols[parseInt(i.toString(), 10)].isFrozen || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
              if (cols[parseInt(i.toString(), 10)].visible) {
                width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
              }
            }
          }
        }
        applyStickyLeftRightPosition(node, width - 1, this.parent.enableRtl, "Left");
        width = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
        for (var i = cols.length - 1; i >= 0; i--) {
          if (column.index < cols[parseInt(i.toString(), 10)].index) {
            if (isChildColumn(column, cols[parseInt(i.toString(), 10)].uid) || column.index > cols[parseInt(i.toString(), 10)].index) {
              break;
            }
            if (cols[parseInt(i.toString(), 10)].freeze === "Right" || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
              if (cols[parseInt(i.toString(), 10)].visible) {
                width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
              }
            }
          }
        }
        applyStickyLeftRightPosition(node, width - 1, this.parent.enableRtl, "Right");
      } else {
        node.classList.add("e-unfreeze");
      }
      return node;
    };
    return StackedHeaderCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/indent-cell-renderer.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IndentCellRenderer = (
  /** @class */
  function(_super) {
    __extends6(IndentCellRenderer2, _super);
    function IndentCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-indentcell"
      });
      return _this;
    }
    IndentCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      setStyleAndAttributes(node, cell.attributes);
      return node;
    };
    return IndentCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/caption-cell-renderer.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupCaptionCellRenderer = (
  /** @class */
  function(_super) {
    __extends7(GroupCaptionCellRenderer2, _super);
    function GroupCaptionCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.cellUid = 0;
      _this.element = _this.parent.createElement("TD", {
        className: "e-groupcaption",
        attrs: {
          id: _this.parent.element.id + "captioncell",
          tabindex: "-1"
        }
      });
      return _this;
    }
    GroupCaptionCellRenderer2.prototype.render = function(cell, data) {
      this.element.id = this.parent.element.id + "captioncell" + this.cellUid++;
      var node = this.element.cloneNode();
      var gObj = this.parent;
      var column = cell.column;
      var domSetter = column.getDomSetter ? column.getDomSetter() : "innerHTML";
      var result;
      var fKeyValue;
      var gTemplateValue;
      data.headerText = cell.column.headerText;
      if (cell.isForeignKey) {
        fKeyValue = this.format(cell.column, cell.column.valueAccessor("foreignKey", data, cell.column));
      }
      var value = cell.isForeignKey ? fKeyValue : cell.column.enableGroupByFormat ? data.key : this.format(cell.column, cell.column.valueAccessor("key", data, cell.column));
      for (var j = 0; j < gObj.aggregates.length; j++) {
        var _loop_1 = function(i2) {
          if (gObj.getVisibleColumns()[0].field === gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].field && gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate) {
            var gCaptionTemp = gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate;
            if (typeof gCaptionTemp === "string" && gCaptionTemp.includes("$")) {
              gTemplateValue = gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate.split("$")[0] + data[gObj.getVisibleColumns()[0].field][gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].type] + gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)].groupCaptionTemplate.split("}")[1];
            } else {
              var column_1 = gObj.aggregates[parseInt(j.toString(), 10)].columns[parseInt(i2.toString(), 10)];
              var tempObj = column_1.getTemplate(CellType.CaptionSummary);
              var tempID2 = "";
              if (!isNullOrUndefined(tempObj)) {
                var tempValue_1 = tempObj.fn(data[column_1.columnName], this_1.parent, tempObj.property, tempID2);
                if (this_1.parent.isReact && typeof column_1.groupCaptionTemplate !== "string") {
                  this_1.parent.renderTemplates(function() {
                    if (tempValue_1 && tempValue_1.length) {
                      if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
                        node.appendChild(tempValue_1[0]);
                      } else {
                        node.innerText += " " + tempValue_1[0].textContent;
                      }
                    }
                  });
                } else {
                  if (tempValue_1 && tempValue_1.length) {
                    if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
                      gTemplateValue = tempValue_1;
                    } else {
                      gTemplateValue = tempValue_1[0].textContent;
                    }
                  }
                }
              }
            }
            return "break";
          }
        };
        var this_1 = this;
        for (var i = 0; i < gObj.aggregates[parseInt(j.toString(), 10)].columns.length; i++) {
          var state_1 = _loop_1(i);
          if (state_1 === "break") break;
        }
      }
      if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
        var isReactCompiler = this.parent.isReact && typeof gObj.groupSettings.captionTemplate !== "string";
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        if (isReactCompiler || isReactChild) {
          var tempID = gObj.element.id + "captionTemplate";
          templateCompiler(gObj.groupSettings.captionTemplate)(data, this.parent, "captionTemplate", tempID, null, null, node);
          this.parent.renderTemplates();
        } else if (this.parent.isVue) {
          result = templateCompiler(gObj.groupSettings.captionTemplate)(data, this.parent);
        } else {
          result = templateCompiler(gObj.groupSettings.captionTemplate)(data);
        }
        if (!isReactCompiler && !isReactChild) {
          appendChildren(node, result);
          if (gTemplateValue && gTemplateValue.length && gTemplateValue[0].textContent) {
            node.appendChild(gTemplateValue[0]);
          }
        }
      } else {
        if (gObj.groupSettings.enableLazyLoading) {
          node["" + domSetter] = this.parent.sanitize(cell.column.headerText) + ": " + this.parent.sanitize(value) + (gTemplateValue ? "   " + gTemplateValue : "");
        } else {
          node["" + domSetter] = this.parent.sanitize(cell.column.headerText) + ": " + this.parent.sanitize(value) + " - " + data.count + " " + (data.count < 2 ? this.localizer.getConstant("Item") : this.localizer.getConstant("Items")) + (gTemplateValue ? "   " + gTemplateValue : "");
        }
      }
      node.setAttribute("colspan", cell.colSpan.toString());
      node.setAttribute("aria-label", node.innerHTML + this.localizer.getConstant("GroupCaption"));
      node.setAttribute("title", node.textContent);
      return node;
    };
    return GroupCaptionCellRenderer2;
  }(CellRenderer)
);
var GroupCaptionEmptyCellRenderer = (
  /** @class */
  function(_super) {
    __extends7(GroupCaptionEmptyCellRenderer2, _super);
    function GroupCaptionEmptyCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-groupcaption"
      });
      return _this;
    }
    GroupCaptionEmptyCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.innerHTML = "&nbsp;";
      node.setAttribute("colspan", cell.colSpan.toString());
      return node;
    };
    return GroupCaptionEmptyCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/expand-cell-renderer.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExpandCellRenderer = (
  /** @class */
  function(_super) {
    __extends8(ExpandCellRenderer2, _super);
    function ExpandCellRenderer2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ExpandCellRenderer2.prototype.render = function(cell, data, attr, isExpand) {
      var node = this.element.cloneNode();
      node.setAttribute("ej-mappingname", data.field);
      node.setAttribute("ej-mappingvalue", data.key);
      node.setAttribute("aria-expanded", isExpand ? "true" : "false");
      node.setAttribute("tabindex", "-1");
      if (this.parent.infiniteScrollSettings && this.parent.infiniteScrollSettings.enableCache && !this.parent.groupSettings.enableLazyLoading) {
        cell.cellType = CellType.Indent;
        node.className = isExpand ? "e-recordplusexpand e-disablepointer" : "e-recordpluscollapse e-disablepointer";
      } else {
        node.className = isExpand ? "e-recordplusexpand" : "e-recordpluscollapse";
        node.appendChild(this.parent.createElement("a", {
          className: isExpand ? "e-icons e-gdiagonaldown e-icon-gdownarrow" : "e-icons e-gnextforward e-icon-grightarrow",
          attrs: {
            href: "#",
            "title": isExpand ? this.localizer.getConstant("Expanded") : this.localizer.getConstant("Collapsed")
          }
        }));
      }
      return node;
    };
    return ExpandCellRenderer2;
  }(IndentCellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/header-indent-renderer.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HeaderIndentCellRenderer = (
  /** @class */
  function(_super) {
    __extends9(HeaderIndentCellRenderer2, _super);
    function HeaderIndentCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-grouptopleftcell"
      });
      return _this;
    }
    HeaderIndentCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.appendChild(this.parent.createElement("div", {
        className: "e-headercelldiv e-emptycell",
        innerHTML: ""
      }));
      return node;
    };
    return HeaderIndentCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/detail-header-indent-renderer.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DetailHeaderIndentCellRenderer = (
  /** @class */
  function(_super) {
    __extends10(DetailHeaderIndentCellRenderer2, _super);
    function DetailHeaderIndentCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-detailheadercell"
      });
      return _this;
    }
    DetailHeaderIndentCellRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.appendChild(this.parent.createElement("div", {
        className: "e-emptycell"
      }));
      return node;
    };
    return DetailHeaderIndentCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/detail-expand-cell-renderer.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DetailExpandCellRenderer = (
  /** @class */
  function(_super) {
    __extends11(DetailExpandCellRenderer2, _super);
    function DetailExpandCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-detailrowcollapse",
        attrs: {
          "aria-expanded": "false",
          tabindex: "-1"
        }
      });
      return _this;
    }
    DetailExpandCellRenderer2.prototype.render = function(cell, data, attributes2) {
      var node = this.element.cloneNode();
      if (attributes2 && !isNullOrUndefined(attributes2["class"])) {
        node.className = "";
        node.className = attributes2["class"];
        node.appendChild(this.parent.createElement("a", {
          className: "e-icons e-dtdiagonaldown e-icon-gdownarrow",
          attrs: {
            href: "#",
            "title": this.localizer.getConstant("Expanded")
          }
        }));
      } else {
        node.appendChild(this.parent.createElement("a", {
          className: "e-icons e-dtdiagonalright e-icon-grightarrow",
          attrs: {
            href: "#",
            "title": this.localizer.getConstant("Collapsed")
          }
        }));
      }
      if (cell.isSelected) {
        node.classList.add("e-selectionbackground", "e-active");
      }
      return node;
    };
    return DetailExpandCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-drag-drop-renderer.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowDragDropRenderer = (
  /** @class */
  function(_super) {
    __extends12(RowDragDropRenderer2, _super);
    function RowDragDropRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-rowdragdrop e-rowdragdropcell",
        attrs: {
          tabindex: "-1",
          role: "gridcell"
        }
      });
      return _this;
    }
    RowDragDropRenderer2.prototype.render = function(cell, data) {
      var nodeElement = this.element.cloneNode();
      nodeElement.appendChild(this.parent.createElement("div", {
        className: "e-icons e-rowcelldrag e-dtdiagonalright e-icon-rowdragicon",
        attrs: {
          "aria-hidden": "true"
        }
      }));
      if (cell.isSelected) {
        nodeElement.classList.add("e-selectionbackground");
        nodeElement.classList.add("e-active");
      }
      if (this.parent.getVisibleFrozenRightCount() || this.parent.getVisibleFrozenLeftCount()) {
        nodeElement.classList.add("e-leftfreeze");
        var width = this.parent.getFrozenMode() === "Right" ? 0 : this.parent.groupSettings.columns.length * 30;
        applyStickyLeftRightPosition(nodeElement, width, this.parent.enableRtl, this.parent.getFrozenMode() === "Right" ? "Right" : "Left");
      }
      return nodeElement;
    };
    return RowDragDropRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/row-drag-header-indent-render.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowDragDropHeaderRenderer = (
  /** @class */
  function(_super) {
    __extends13(RowDragDropHeaderRenderer2, _super);
    function RowDragDropHeaderRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-rowdragheader"
      });
      return _this;
    }
    RowDragDropHeaderRenderer2.prototype.render = function(cell, data) {
      var node = this.element.cloneNode();
      node.appendChild(createElement("div", {
        className: "e-emptycell"
      }));
      if (this.parent.getVisibleFrozenRightCount() || this.parent.getVisibleFrozenLeftCount()) {
        node.classList.add("e-leftfreeze");
        var width = this.parent.getFrozenMode() === "Right" ? 0 : this.parent.groupSettings.columns.length * 30;
        applyStickyLeftRightPosition(node, width, this.parent.enableRtl, this.parent.getFrozenMode() === "Right" ? "Right" : "Left");
      }
      return node;
    };
    return RowDragDropHeaderRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/render.js
var Render = (
  /** @class */
  function() {
    function Render2(parent, locator) {
      this.emptyGrid = false;
      this.counter = 0;
      this.parent = parent;
      this.locator = locator;
      this.data = new Data(parent, locator);
      this.l10n = locator.getService("localization");
      this.ariaService = this.locator.getService("ariaService");
      this.renderer = this.locator.getService("rendererFactory");
      this.addEventListener();
    }
    Render2.prototype.render = function() {
      var gObj = this.parent;
      this.headerRenderer = this.renderer.getRenderer(RenderType.Header);
      this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
      this.headerRenderer.renderPanel();
      this.contentRenderer.renderPanel();
      if (gObj.getColumns().length) {
        this.isLayoutRendered = true;
        this.headerRenderer.renderTable();
        this.contentRenderer.renderTable();
        this.emptyRow(false);
      }
      this.parent.scrollModule.setWidth();
      this.parent.scrollModule.setHeight();
      if (this.parent.height !== "auto") {
        this.parent.scrollModule.setPadding();
      }
      this.refreshDataManager();
    };
    Render2.prototype.refresh = function(e) {
      var _this = this;
      if (e === void 0) {
        e = {
          requestType: "refresh"
        };
      }
      var gObj = this.parent;
      gObj.notify(e.requestType + "-begin", e);
      gObj.trigger(actionBegin, e, function(args) {
        if (args === void 0) {
          args = {
            requestType: "refresh"
          };
        }
        if (args.cancel) {
          gObj.notify(cancelBegin, args);
          if (args.action === "clearFilter" && _this.parent.filterSettings.type === "Menu") {
            _this.parent.filterSettings.columns[_this.parent.filterModule.filterObjIndex] = _this.parent.filterModule.prevFilterObject;
            var iconClass = _this.parent.showColumnMenu && _this.parent.filterModule["column"].showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
            var col = _this.parent.element.querySelector('[e-mappinguid="' + _this.parent.filterModule["column"].uid + '"]').parentElement;
            var flIcon = col.querySelector(iconClass);
            if (!isNullOrUndefined(_this.parent.filterModule.prevFilterObject)) {
              flIcon.classList.add("e-filtered");
            }
          }
          if (args.action === "clear-filter" && (_this.parent.filterSettings.type === "CheckBox" || _this.parent.filterSettings.type === "Excel")) {
            _this.parent.filterSettings.columns = _this.parent.filterModule.checkboxPrevFilterObject;
          }
          if (args.requestType === "grouping") {
            var index = gObj.groupSettings.columns.indexOf(args.columnName);
            if (index !== -1) {
              gObj.setProperties({
                groupSettings: {
                  Columns: gObj.groupSettings.columns.splice(index, 1)
                }
              }, true);
              gObj.setProperties({
                sortSettings: {
                  Columns: gObj.sortSettings.columns.splice(index, 1)
                }
              }, true);
              var column = gObj.getColumnByField(args.columnName);
              var headerCell = gObj.getColumnHeaderByField(column.field);
              column.visible = !isNullOrUndefined(headerCell) && !headerCell.classList.contains("e-hide");
            }
          }
          return;
        }
        if (gObj.allowSelection && (args.action === "clearFilter" || args.action === "clear-filter" || args.requestType === "searching" && args.searchString === "" || args.action === "add")) {
          gObj.selectionModule["rmtHdrChkbxClicked"] = false;
        }
        if (gObj.allowPaging && gObj.pageSettings.pageSizes && gObj.pagerModule.pagerObj.isAllPage && args.action === "add" && args.requestType === "save" && gObj.pagerModule.pagerObj.checkAll) {
          gObj.setProperties({
            pageSettings: {
              pageSize: gObj.pageSettings.pageSize + 1
            }
          }, true);
        }
        if (args.requestType === "delete" && gObj.allowPaging) {
          var dataLength = args.data.length;
          var count2 = gObj.pageSettings.totalRecordsCount - dataLength;
          var currentViewData = gObj.getCurrentViewRecords().length;
          if (!(currentViewData - dataLength) && count2 && (gObj.pageSettings.currentPage - 1) * gObj.pageSettings.pageSize === count2 || count2 && count2 <= dataLength) {
            gObj.prevPageMoving = true;
            gObj.setProperties({
              pageSettings: {
                totalRecordsCount: count2,
                currentPage: Math.ceil(count2 / gObj.pageSettings.pageSize)
              }
            }, true);
            gObj.pagerModule.pagerObj.totalRecordsCount = count2;
          }
        }
        if (args.requestType === "reorder" && _this.parent.dataSource && "result" in _this.parent.dataSource) {
          _this.contentRenderer.refreshContentRows(args);
        } else if ((args.requestType === "paging" || args.requestType === "columnstate" || args.requestType === "reorder") && _this.parent.groupSettings.enableLazyLoading && _this.parent.groupSettings.columns.length && (_this.parent.enableVirtualization ? _this.parent.lazyLoadRender : _this.parent.contentModule).getGroupCache()[_this.parent.pageSettings.currentPage]) {
          _this.contentRenderer.refreshContentRows(args);
        } else {
          _this.refreshDataManager(args);
        }
      });
    };
    Render2.prototype.resetTemplates = function() {
      var gObj = this.parent;
      var gridColumns = gObj.getColumns();
      if (gObj.detailTemplate) {
        var detailTemplateID = gObj.element.id + "detailTemplate";
        blazorTemplates["" + detailTemplateID] = [];
        resetBlazorTemplate(detailTemplateID, "DetailTemplate");
      }
      if (gObj.groupSettings.captionTemplate) {
        resetBlazorTemplate(gObj.element.id + "captionTemplate", "CaptionTemplate");
      }
      if (gObj.rowTemplate) {
        resetBlazorTemplate(gObj.element.id + "rowTemplate", "RowTemplate");
      }
      if (gObj.toolbarTemplate) {
        resetBlazorTemplate(gObj.element.id + "toolbarTemplate", "ToolbarTemplate");
      }
      if (gObj.pageSettings.template) {
        resetBlazorTemplate(gObj.element.id + "_template", "pageSettings");
      }
      for (var i = 0; i < gridColumns.length; i++) {
        if (gridColumns[parseInt(i.toString(), 10)].template) {
          blazorTemplates[gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid] = [];
          resetBlazorTemplate(gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid, "Template");
        }
        if (gridColumns[parseInt(i.toString(), 10)].headerTemplate) {
          resetBlazorTemplate(gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid + "headerTemplate", "HeaderTemplate");
        }
        if (gridColumns[parseInt(i.toString(), 10)].filterTemplate) {
          resetBlazorTemplate(gObj.element.id + gridColumns[parseInt(i.toString(), 10)].uid + "filterTemplate", "FilterTemplate");
        }
      }
      var guid = "guid";
      for (var k = 0; k < gObj.aggregates.length; k++) {
        for (var j = 0; j < gObj.aggregates[parseInt(k.toString(), 10)].columns.length; j++) {
          if (gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)].footerTemplate) {
            var tempID = gObj.element.id + gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)]["" + guid] + "footerTemplate";
            resetBlazorTemplate(tempID, "FooterTemplate");
          }
          if (gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)].groupFooterTemplate) {
            var tempID = gObj.element.id + gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)]["" + guid] + "groupFooterTemplate";
            resetBlazorTemplate(tempID, "GroupFooterTemplate");
          }
          if (gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)].groupCaptionTemplate) {
            var tempID = gObj.element.id + gObj.aggregates[parseInt(k.toString(), 10)].columns[parseInt(j.toString(), 10)]["" + guid] + "groupCaptionTemplate";
            resetBlazorTemplate(tempID, "GroupCaptionTemplate");
          }
        }
      }
    };
    Render2.prototype.refreshComplete = function(e) {
      this.parent.trigger(actionComplete, e);
    };
    Render2.prototype.refreshDataManager = function(args) {
      var _this = this;
      if (args === void 0) {
        args = {};
      }
      var gObj = this.parent;
      var maskRow = gObj.loadingIndicator.indicatorType === "Shimmer" && args.requestType !== "virtualscroll" && args.requestType !== "infiniteScroll" || (args.requestType === "virtualscroll" || args.requestType === "infiniteScroll") && gObj.enableVirtualMaskRow;
      if (args.requestType !== "virtualscroll" && !args.isCaptionCollapse && !maskRow) {
        this.parent.showSpinner();
      }
      if (maskRow) {
        gObj.showMaskRow(args.requestType === "virtualscroll" ? args.virtualInfo.sentinelInfo.axis : args.requestType === "infiniteScroll" ? args.direction : void 0);
      }
      this.parent.notify(resetInfiniteBlocks, args);
      this.emptyGrid = false;
      var dataManager;
      var isFActon = this.isNeedForeignAction();
      this.ariaService.setBusy(this.parent.getContent().querySelector("." + content), true);
      if (isFActon) {
        var deffered = new Deferred();
        dataManager = this.getFData(deffered, args);
      }
      if (!dataManager) {
        if (gObj.allowPaging && !gObj.getDataModule().dataManager.dataSource.offline && gObj.pageSettings && gObj.pageSettings.pageSizes && gObj.pagerModule && gObj.pagerModule.pagerObj && gObj.pagerModule.pagerObj.isAllPage) {
          gObj.pagerModule.pagerObj.isAllPage = void 0;
        }
        dataManager = this.data.getData(args, this.data.generateQuery().requiresCount());
      } else {
        dataManager = dataManager.then(function(e) {
          var query = _this.data.generateQuery().requiresCount();
          if (_this.emptyGrid) {
            var def = new Deferred();
            def.resolve({
              result: [],
              count: 0
            });
            return def.promise;
          }
          return _this.data.getData(args, query);
        });
      }
      if (this.parent.getForeignKeyColumns().length && (!isFActon || this.parent.searchSettings.key.length)) {
        var deffered_1 = new Deferred();
        dataManager = dataManager.then(function(e) {
          _this.parent.notify(getForeignKeyData, {
            dataManager,
            result: e,
            promise: deffered_1,
            action: args
          });
          return deffered_1.promise;
        });
      }
      if (this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length) {
        dataManager = dataManager.then(function(e) {
          return _this.validateGroupRecords(e);
        });
      }
      dataManager.then(function(e) {
        return _this.dataManagerSuccess(e, args);
      }).catch(function(e) {
        return _this.dataManagerFailure(e, args);
      });
    };
    Render2.prototype.getFData = function(deferred, args) {
      this.parent.notify(getForeignKeyData, {
        isComplex: true,
        promise: deferred,
        action: args
      });
      return deferred.promise;
    };
    Render2.prototype.isNeedForeignAction = function() {
      var gObj = this.parent;
      return !!(gObj.allowFiltering && gObj.filterSettings.columns.length || !isNullOrUndefined(gObj.searchSettings.key) && gObj.searchSettings.key.length) && this.foreignKey(this.parent.getForeignKeyColumns());
    };
    Render2.prototype.foreignKey = function(columns) {
      var _this = this;
      return columns.some(function(col) {
        var fbool = false;
        fbool = _this.parent.filterSettings.columns.some(function(value) {
          return col.uid === value.uid;
        });
        return !!(fbool || _this.parent.searchSettings.key.length);
      });
    };
    Render2.prototype.sendBulkRequest = function(args) {
      var _this = this;
      args.requestType = "batchsave";
      var gObj = this.parent;
      if (gObj.allowPaging && gObj.pageSettings.pageSizes && gObj.pagerModule.pagerObj.isAllPage && gObj.pagerModule.pagerObj.checkAll) {
        var dataLength = args["changes"].addedRecords.length;
        if (dataLength) {
          gObj.setProperties({
            pageSettings: {
              pageSize: gObj.pageSettings.pageSize + dataLength
            }
          }, true);
        }
      }
      if (gObj.allowPaging && (args.changes.addedRecords.length || args.changes.deletedRecords.length || args.changes.changedRecords.length) && gObj.pageSettings && gObj.pageSettings.pageSizes && gObj.pagerModule && gObj.pagerModule.pagerObj && !gObj.getDataModule().dataManager.dataSource.offline && gObj.pagerModule.pagerObj.isAllPage) {
        gObj.pagerModule.pagerObj.isAllPage = void 0;
      }
      var promise = this.data.saveChanges(args.changes, this.parent.getPrimaryKeyFieldNames()[0], args.original);
      var query = this.data.generateQuery().requiresCount();
      if (this.data.dataManager.dataSource.offline) {
        this.refreshDataManager({
          requestType: "batchsave"
        });
        return;
      } else {
        promise.then(function(e) {
          _this.data.getData(args, query).then(function(e2) {
            return _this.dmSuccess(e2, args);
          }).catch(function(e2) {
            return _this.dmFailure(e2, args);
          });
        }).catch(function(e) {
          return _this.dmFailure(e, args);
        });
      }
    };
    Render2.prototype.dmSuccess = function(e, args) {
      this.dataManagerSuccess(e, args);
    };
    Render2.prototype.dmFailure = function(e, args) {
      this.dataManagerFailure(e, args);
    };
    Render2.prototype.renderEmptyRow = function() {
      this.emptyRow(true);
    };
    Render2.prototype.emptyRow = function(isTrigger) {
      var gObj = this.parent;
      var tbody2 = this.contentRenderer.getTable().querySelector(tbody);
      if (!isNullOrUndefined(tbody2)) {
        remove(tbody2);
      }
      tbody2 = this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      var spanCount = gObj.allowRowDragAndDrop && isNullOrUndefined(gObj.rowDropSettings.targetID) ? 1 : 0;
      if (gObj.detailTemplate || gObj.childGrid) {
        ++spanCount;
      }
      var className = gObj.editSettings.showAddNewRow && gObj.editSettings.newRowPosition === "Bottom" ? "e-emptyrow e-show-added-row" : "e-emptyrow";
      var tr = this.parent.createElement("tr", {
        className,
        attrs: {
          role: "row"
        }
      });
      var td;
      if (gObj.emptyRecordTemplate) {
        var emptyRecordTemplateID = gObj.element.id + "emptyRecordTemplate";
        td = this.parent.createElement("td", {
          attrs: {
            colspan: (gObj.getVisibleColumns().length + spanCount + gObj.groupSettings.columns.length).toString()
          }
        });
        if (gObj.isVue) {
          td.appendChild(gObj.getEmptyRecordTemplate()(gObj.dataSource, gObj, "emptyRecordTemplate", emptyRecordTemplateID, void 0, void 0, void 0, this.parent["root"])[1]);
        } else {
          td.appendChild(gObj.getEmptyRecordTemplate()(gObj.dataSource, gObj, "emptyRecordTemplate", emptyRecordTemplateID, void 0, void 0, void 0, this.parent["root"])[0]);
        }
        if (gObj.isReact) {
          this.parent.renderTemplates();
        }
      } else {
        td = this.parent.createElement("td", {
          innerHTML: this.l10n.getConstant("EmptyRecord"),
          attrs: {
            colspan: (gObj.getVisibleColumns().length + spanCount + (!isNullOrUndefined(gObj.groupSettings.columns) ? gObj.groupSettings.columns.length : 0)).toString()
          }
        });
      }
      if (gObj.isFrozenGrid()) {
        td.classList.add("e-leftfreeze");
        td.style.left = "0px";
      }
      if (gObj.frozenRows && gObj.element.querySelector(".e-frozenrow-border")) {
        this.parent.element.querySelector(".e-frozenrow-border").classList.add("e-frozenrow-empty");
      }
      tr.appendChild(td);
      tbody2.appendChild(tr);
      this.contentRenderer.renderEmpty(tbody2);
      if (isTrigger) {
        if (!this.parent.isInitialLoad) {
          this.parent.focusModule.setFirstFocusableTabIndex();
        }
        this.parent.trigger(dataBound, {});
        this.parent.notify(onEmpty, {
          rows: [new Row({
            isDataRow: true,
            cells: [new Cell({
              isDataCell: true,
              visible: true
            })]
          })]
        });
        if (gObj.editSettings.showAddNewRow) {
          gObj.addRecord();
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
    };
    Render2.prototype.dynamicColumnChange = function() {
      if (this.parent.getCurrentViewRecords().length) {
        this.updateColumnType(this.parent.getCurrentViewRecords()[0]);
      }
    };
    Render2.prototype.updateColumnType = function(record) {
      var columns = this.parent.getColumns();
      var value;
      var cFormat = "customFormat";
      var equalTo = "equalTo";
      var data = record && record.items ? record.items[0] : record;
      var fmtr = this.locator.getService("valueFormatter");
      for (var i = 0, len = columns.length; i < len; i++) {
        value = getObject(columns[parseInt(i.toString(), 10)].field || "", data);
        if (!isNullOrUndefined(columns[parseInt(i.toString(), 10)]["" + cFormat])) {
          columns[parseInt(i.toString(), 10)].format = columns[parseInt(i.toString(), 10)]["" + cFormat];
        }
        if (!isNullOrUndefined(columns[parseInt(i.toString(), 10)].validationRules) && !isNullOrUndefined(columns[parseInt(i.toString(), 10)].validationRules["" + equalTo])) {
          columns[parseInt(i.toString(), 10)].validationRules["" + equalTo][0] = this.parent.element.id + columns[parseInt(i.toString(), 10)].validationRules["" + equalTo][0];
        }
        if (columns[parseInt(i.toString(), 10)].isForeignColumn() && columns[parseInt(i.toString(), 10)].columnData) {
          value = getObject(columns[parseInt(i.toString(), 10)].foreignKeyValue || "", columns[parseInt(i.toString(), 10)].columnData[0]);
        }
        if (!isNullOrUndefined(value)) {
          this.isColTypeDef = true;
          if (!columns[parseInt(i.toString(), 10)].type) {
            columns[parseInt(i.toString(), 10)].type = value.getDay ? value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date" : typeof value;
          }
        } else {
          columns[parseInt(i.toString(), 10)].type = columns[parseInt(i.toString(), 10)].type || null;
        }
        var valueFormatter = new ValueFormatter();
        if (columns[parseInt(i.toString(), 10)].format && (columns[parseInt(i.toString(), 10)].format.skeleton || columns[parseInt(i.toString(), 10)].format.format && typeof columns[parseInt(i.toString(), 10)].format.format === "string")) {
          columns[parseInt(i.toString(), 10)].setFormatter(valueFormatter.getFormatFunction(extend({}, columns[parseInt(i.toString(), 10)].format)));
          columns[parseInt(i.toString(), 10)].setParser(valueFormatter.getParserFunction(columns[parseInt(i.toString(), 10)].format));
        }
        if (typeof columns[parseInt(i.toString(), 10)].format === "string") {
          setFormatter(this.locator, columns[parseInt(i.toString(), 10)]);
        } else if (!columns[parseInt(i.toString(), 10)].format && columns[parseInt(i.toString(), 10)].type === "number") {
          columns[parseInt(i.toString(), 10)].setParser(fmtr.getParserFunction({
            format: "n2"
          }));
        }
        if (columns[parseInt(i.toString(), 10)].type === "dateonly" && !columns[parseInt(i.toString(), 10)].format) {
          columns[parseInt(i.toString(), 10)].format = "yMd";
          setFormatter(this.locator, columns[parseInt(i.toString(), 10)]);
        }
      }
    };
    Render2.prototype.dataManagerSuccess = function(e, args) {
      var _this = this;
      var gObj = this.parent;
      this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
      this.headerRenderer = this.renderer.getRenderer(RenderType.Header);
      e.actionArgs = args;
      var isInfiniteDelete = this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && !gObj.groupSettings.enableLazyLoading && (args.requestType === "delete" || args.requestType === "save" && this.parent.infiniteScrollModule.requestType === "add" && !(gObj.sortSettings.columns.length || gObj.filterSettings.columns.length || this.parent.groupSettings.columns.length || gObj.searchSettings.key));
      gObj.trigger(beforeDataBound, e, function(dataArgs) {
        if (dataArgs.cancel) {
          return;
        }
        dataArgs.result = isNullOrUndefined(dataArgs.result) ? [] : dataArgs.result;
        var len = Object.keys(dataArgs.result).length;
        if (_this.parent.isDestroyed) {
          return;
        }
        if (!gObj.getColumns().length && !len && !(gObj.columns.length && gObj.columns[0] instanceof Column)) {
          gObj.hideSpinner();
          return;
        }
        if (_this.isInfiniteEnd(args) && !len) {
          _this.parent.notify(infiniteEditHandler, {
            e: args,
            result: e.result,
            count: e.count,
            agg: e.aggregates
          });
          return;
        }
        _this.parent.isEdit = false;
        _this.parent.notify(editReset, {});
        _this.parent.notify(tooltipDestroy, {});
        if (args && !((args.requestType === "infiniteScroll" || args.requestType === "delete" || args.action === "add") && gObj.enableInfiniteScrolling)) {
          _this.parent.notify(commandColumnDestroy, {
            type: "refreshCommandColumn"
          });
        }
        _this.contentRenderer.prevCurrentView = !isNullOrUndefined(_this.parent.currentViewData) && _this.parent.currentViewData.slice();
        gObj.currentViewData = dataArgs.result;
        gObj.notify(refreshInfiniteCurrentViewData, {
          args,
          data: dataArgs.result
        });
        if (dataArgs.count && !gObj.allowPaging && (gObj.enableVirtualization || gObj.enableInfiniteScrolling)) {
          gObj.totalDataRecordsCount = dataArgs.count;
        }
        if (!len && dataArgs.count && gObj.allowPaging && args && args.requestType !== "delete") {
          if (_this.parent.groupSettings.enableLazyLoading && (args.requestType === "grouping" || args.requestType === "ungrouping")) {
            _this.parent.notify(groupComplete, args);
          }
          gObj.prevPageMoving = true;
          gObj.pageSettings.totalRecordsCount = dataArgs.count;
          if (args.requestType !== "paging") {
            gObj.pageSettings.currentPage = Math.ceil(dataArgs.count / gObj.pageSettings.pageSize);
          }
          gObj.dataBind();
          return;
        }
        if ((!gObj.getColumns().length && len || !_this.isLayoutRendered) && !isGroupAdaptive(gObj)) {
          gObj.removeMaskRow();
          _this.updatesOnInitialRender(dataArgs);
        }
        if (!_this.isColTypeDef && gObj.getCurrentViewRecords()) {
          if (_this.data.dataManager.dataSource.offline && gObj.dataSource && gObj.dataSource.length) {
            _this.updateColumnType(gObj.dataSource[0]);
          } else {
            _this.updateColumnType(gObj.getCurrentViewRecords()[0]);
          }
        }
        if (!_this.parent.isInitialLoad && _this.parent.groupSettings.disablePageWiseAggregates && !_this.parent.groupSettings.columns.length) {
          dataArgs.result = _this.parent.dataSource instanceof Array ? _this.parent.dataSource : _this.parent.currentViewData;
        }
        if ((_this.parent.isReact || _this.parent.isVue) && !isNullOrUndefined(args) && args.requestType !== "infiniteScroll" && !args.isFrozen) {
          clearReactVueTemplates(_this.parent, ["footerTemplate"]);
        }
        if (_this.parent.isAngular && _this.parent.allowGrouping && _this.parent.groupSettings.captionTemplate && !(!isNullOrUndefined(args) && args.requestType === "infiniteScroll")) {
          _this.parent.destroyTemplate(["groupSettings_captionTemplate"]);
        }
        _this.parent.notify(dataReady, extend({
          count: dataArgs.count,
          result: dataArgs.result,
          aggregates: dataArgs.aggregates,
          loadSummaryOnEmpty: false
        }, args));
        if ((gObj.groupSettings.columns.length || args && args.requestType === "ungrouping") && args && args.requestType !== "filtering") {
          _this.headerRenderer.refreshUI();
        }
        if (len) {
          if (isGroupAdaptive(gObj)) {
            var content2 = "content";
            args.scrollTop = {
              top: _this.contentRenderer["" + content2].scrollTop
            };
          }
          if (!isInfiniteDelete) {
            if (_this.parent.enableImmutableMode) {
              _this.contentRenderer.immutableModeRendering(args);
            } else {
              _this.contentRenderer.refreshContentRows(args);
            }
          } else {
            _this.parent.notify(infiniteEditHandler, {
              e: args,
              result: e.result,
              count: e.count,
              agg: e.aggregates
            });
          }
        } else {
          if (args && args.isCaptionCollapse) {
            return;
          }
          if (!gObj.getColumns().length) {
            gObj.element.innerHTML = "";
            alert(_this.l10n.getConstant("EmptyDataSourceError"));
            return;
          }
          _this.contentRenderer.setRowElements([]);
          _this.contentRenderer.setRowObjects([]);
          _this.ariaService.setBusy(_this.parent.getContent().querySelector("." + content), false);
          gObj.removeMaskRow();
          _this.renderEmptyRow();
          if (gObj.enableColumnVirtualization && !len) {
            _this.parent.notify(contentReady, {
              rows: gObj.getRowsObject(),
              args: {}
            });
          }
          if (args) {
            var action = (args.requestType || "").toLowerCase() + "-complete";
            _this.parent.notify(action, args);
            if (args.requestType === "batchsave") {
              args.cancel = false;
              args.rows = [];
              args.isFrozen = !args.isFrozen;
              _this.parent.trigger(actionComplete, args);
            }
          }
          if (_this.parent.autoFit) {
            _this.parent.preventAdjustColumns();
          }
          _this.parent.hideSpinner();
        }
        _this.parent.notify(toolbarRefresh, {});
        _this.setRowCount(_this.parent.getCurrentViewRecords().length);
        if ("query" in e) {
          _this.parent.getDataModule().isQueryInvokedFromData = false;
        }
      });
    };
    Render2.prototype.dataManagerFailure = function(e, args) {
      if (!isNullOrUndefined(this.parent.contentModule)) {
        this.ariaService.setOptions(this.parent.getContent().querySelector("." + content), {
          busy: false,
          invalid: true
        });
        this.setRowCount(1);
      }
      this.parent.trigger(actionFailure, {
        error: e
      });
      this.parent.hideSpinner();
      this.parent.removeMaskRow();
      if (args.requestType === "save" || args.requestType === "delete" || args.name === "bulk-save") {
        return;
      }
      this.parent.currentViewData = [];
      this.renderEmptyRow();
      if (!this.parent.isInitialLoad) {
        this.parent.focusModule.setFirstFocusableTabIndex();
      }
      this.parent.log("actionfailure", {
        error: e
      });
    };
    Render2.prototype.setRowCount = function(dataRowCount) {
      this.ariaService.setOptions(this.parent.element, {
        rowcount: dataRowCount ? dataRowCount.toString() : "1"
      });
    };
    Render2.prototype.isInfiniteEnd = function(args) {
      return this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && args.requestType === "delete";
    };
    Render2.prototype.updatesOnInitialRender = function(e) {
      this.isLayoutRendered = true;
      var isEmptyCol = false;
      if (this.parent.columns.length < 1) {
        this.buildColumns(e.result[0]);
        isEmptyCol = true;
      }
      prepareColumns(this.parent.columns, null, this.parent);
      if (isEmptyCol) {
        this.parent.notify(refreshSplitFrozenColumn, {});
      }
      this.headerRenderer.renderTable();
      this.contentRenderer.renderTable();
      this.parent.isAutoGen = true;
      this.parent.notify(autoCol, {});
    };
    Render2.prototype.iterateComplexColumns = function(obj, field, split) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length; i++) {
        var childKeys = typeof obj[keys[parseInt(i.toString(), 10)]] === "object" && obj[keys[parseInt(i.toString(), 10)]] && !(obj[keys[parseInt(i.toString(), 10)]] instanceof Date) ? Object.keys(obj[keys[parseInt(i.toString(), 10)]]) : [];
        if (childKeys.length) {
          this.iterateComplexColumns(obj[keys[parseInt(i.toString(), 10)]], field + (keys[parseInt(i.toString(), 10)] + "."), split);
        } else {
          split[this.counter] = field + keys[parseInt(i.toString(), 10)];
          this.counter++;
        }
      }
    };
    Render2.prototype.buildColumns = function(record) {
      var cols = [];
      var complexCols = {};
      this.iterateComplexColumns(record, "", complexCols);
      var columns = Object.keys(complexCols).filter(function(e) {
        return complexCols["" + e] !== "BlazId";
      }).map(function(field) {
        return complexCols["" + field];
      });
      for (var i = 0, len = columns.length; i < len; i++) {
        cols[parseInt(i.toString(), 10)] = {
          "field": columns[parseInt(i.toString(), 10)]
        };
        if (this.parent.enableColumnVirtualization) {
          cols[parseInt(i.toString(), 10)].width = !isNullOrUndefined(cols[parseInt(i.toString(), 10)].width) ? cols[parseInt(i.toString(), 10)].width : 200;
        }
      }
      this.parent.setProperties({
        "columns": cols
      }, true);
    };
    Render2.prototype.instantiateRenderer = function() {
      this.renderer.addRenderer(RenderType.Header, new HeaderRender(this.parent, this.locator));
      this.renderer.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));
      var cellrender = this.locator.getService("cellRendererFactory");
      cellrender.addCellRenderer(CellType.Header, new HeaderCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.Data, new CellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.Indent, new IndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.GroupCaption, new GroupCaptionCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.GroupCaptionEmpty, new GroupCaptionEmptyCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.Expand, new ExpandCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.HeaderIndent, new HeaderIndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.DetailHeader, new DetailHeaderIndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.RowDragHIcon, new RowDragDropHeaderRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.DetailExpand, new DetailExpandCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.DetailFooterIntent, new IndentCellRenderer(this.parent, this.locator));
      cellrender.addCellRenderer(CellType.RowDragIcon, new RowDragDropRenderer(this.parent, this.locator));
    };
    Render2.prototype.addEventListener = function() {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on("refreshdataSource", this.dataManagerSuccess, this);
      this.parent.on(modelChanged, this.refresh, this);
      this.parent.on(refreshComplete, this.refreshComplete, this);
      this.parent.on(bulkSave, this.sendBulkRequest, this);
      this.parent.on(showEmptyGrid, function() {
        _this.emptyGrid = true;
      }, this);
      this.parent.on(autoCol, this.dynamicColumnChange, this);
    };
    Render2.prototype.validateGroupRecords = function(e) {
      var _this = this;
      var index = e.result.length - 1;
      if (index < 0) {
        return Promise.resolve(e);
      }
      var group0 = e.result[0];
      var groupN = e.result[parseInt(index.toString(), 10)];
      var predicate = [];
      var addWhere = function(input2) {
        var groups2 = [group0, groupN];
        for (var i2 = 0; i2 < groups2.length; i2++) {
          predicate.push(new Predicate("field", "==", groups2[parseInt(i2.toString(), 10)].field).and(_this.getPredicate("key", "equal", groups2[parseInt(i2.toString(), 10)].key)));
        }
        input2.where(Predicate.or(predicate));
      };
      var query = new Query();
      addWhere(query);
      var curDm = new DataManager(e.result);
      var curFilter = curDm.executeLocal(query);
      var newQuery = this.data.generateQuery(true);
      var rPredicate = [];
      if (this.data.isRemote()) {
        var groups = [group0, groupN];
        for (var i = 0; i < groups.length; i++) {
          rPredicate.push(this.getPredicate(groups[parseInt(i.toString(), 10)].field, "equal", groups[parseInt(i.toString(), 10)].key));
        }
        newQuery.where(Predicate.or(rPredicate));
      } else {
        addWhere(newQuery);
      }
      var deferred = new Deferred();
      this.data.getData({}, newQuery).then(function(r) {
        _this.updateGroupInfo(curFilter, r.result);
        deferred.resolve(e);
      }).catch(function(e2) {
        return deferred.reject(e2);
      });
      return deferred.promise;
    };
    Render2.prototype.getPredicate = function(key, operator, value) {
      if (value instanceof Date) {
        return getDatePredicate({
          field: key,
          operator,
          value
        });
      }
      return new Predicate(key, operator, value);
    };
    Render2.prototype.updateGroupInfo = function(current, untouched) {
      var dm = new DataManager(untouched);
      var elements = current;
      for (var i = 0; i < elements.length; i++) {
        var updatedGroup = dm.executeLocal(new Query().where(new Predicate("field", "==", elements[parseInt(i.toString(), 10)].field).and(this.getPredicate("key", "equal", elements[parseInt(i.toString(), 10)].key))))[0];
        if (!isNullOrUndefined(updatedGroup)) {
          elements[parseInt(i.toString(), 10)].count = updatedGroup.count;
          var itemGroup = elements[parseInt(i.toString(), 10)].items;
          var updatedGroupItem = updatedGroup.items;
          if (itemGroup.GroupGuid) {
            elements[parseInt(i.toString(), 10)].items = this.updateGroupInfo(elements[parseInt(i.toString(), 10)].items, updatedGroup.items);
          }
          var rows = this.parent.aggregates;
          for (var j = 0; j < rows.length; j++) {
            var row2 = rows[parseInt(j.toString(), 10)];
            for (var k = 0; k < row2.columns.length; k++) {
              var column = row2.columns[parseInt(k.toString(), 10)];
              var types = column.type instanceof Array ? column.type : [column.type];
              for (var l = 0; l < types.length; l++) {
                var key = column.field + " - " + types[parseInt(l.toString(), 10)].toLowerCase();
                var data = itemGroup.level ? updatedGroupItem.records : updatedGroup.items;
                var context = this.parent;
                if (types[parseInt(l.toString(), 10)] === "Custom") {
                  var data_1 = itemGroup.level ? updatedGroupItem : updatedGroup;
                  var temp = column.customAggregate;
                  if (typeof temp === "string") {
                    temp = getValue(temp, window);
                  }
                  elements[parseInt(i.toString(), 10)].aggregates["" + key] = temp ? temp.call(context, data_1, row2.columns[parseInt(k.toString(), 10)]) : "";
                } else {
                  elements[parseInt(i.toString(), 10)].aggregates["" + key] = DataUtil.aggregates[types[parseInt(l.toString(), 10)].toLowerCase()](data, row2.columns[parseInt(k.toString(), 10)].field);
                }
              }
            }
          }
        }
      }
      return current;
    };
    return Render2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/cell-render-factory.js
var CellRendererFactory = (
  /** @class */
  function() {
    function CellRendererFactory2() {
      this.cellRenderMap = {};
    }
    CellRendererFactory2.prototype.addCellRenderer = function(name, type) {
      name = typeof name === "string" ? name : getEnumValue(CellType, name);
      if (isNullOrUndefined(this.cellRenderMap["" + name])) {
        this.cellRenderMap["" + name] = type;
      }
    };
    CellRendererFactory2.prototype.getCellRenderer = function(name) {
      name = typeof name === "string" ? name : getEnumValue(CellType, name);
      if (isNullOrUndefined(this.cellRenderMap["" + name])) {
        throw "The cellRenderer " + name + " is not found";
      } else {
        return this.cellRenderMap["" + name];
      }
    };
    return CellRendererFactory2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/responsive-dialog-renderer.js
var ResponsiveDialogRenderer = (
  /** @class */
  function() {
    function ResponsiveDialogRenderer2(parent, serviceLocator) {
      this.sortedCols = [];
      this.sortPredicate = [];
      this.isCustomDialog = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    ResponsiveDialogRenderer2.prototype.addEventListener = function() {
      this.evtHandlers = [{
        event: filterDialogClose,
        handler: this.closeCustomDialog
      }, {
        event: refreshCustomFilterOkBtn,
        handler: this.refreshCustomFilterOkBtn
      }, {
        event: renderResponsiveCmenu,
        handler: this.renderResponsiveContextMenu
      }, {
        event: filterCmenuSelect,
        handler: this.renderCustomFilterDiv
      }, {
        event: customFilterClose,
        handler: this.customExFilterClose
      }, {
        event: refreshCustomFilterClearBtn,
        handler: this.refreshCustomFilterClearBtn
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.onActionCompleteFn = this.editComplate.bind(this);
      this.parent.addEventListener(actionComplete, this.onActionCompleteFn);
    };
    ResponsiveDialogRenderer2.prototype.customExFilterClose = function() {
      this.isCustomDlgRender = false;
    };
    ResponsiveDialogRenderer2.prototype.renderCustomFilterDiv = function() {
      var header = this.customResponsiveDlg.element.querySelector(".e-dlg-header-content");
      var title = header.querySelector(".e-dlg-custom-header");
      var closeBtn = header.querySelector(".e-dlg-closeicon-btn");
      this.isCustomDlgRender = true;
      this.parent.filterModule.filterModule.closeDialog();
      this.saveBtn.element.style.display = "";
      this.refreshCustomFilterOkBtn({
        disabled: false
      });
      this.backBtn.element.style.display = "none";
      closeBtn.style.display = "";
      title.innerHTML = this.parent.localeObj.getConstant("CustomFilter");
      var content2 = this.customResponsiveDlg.element.querySelector(".e-dlg-content");
      this.customExcelFilterParent = this.parent.createElement("div", {
        className: "e-xl-customfilterdiv e-default-filter"
      });
      content2.appendChild(this.customExcelFilterParent);
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveContextMenu = function(args) {
      if (this.action === ResponsiveDialogAction.isFilter) {
        var content2 = this.customResponsiveDlg.element.querySelector(".e-dlg-content");
        var header = this.customResponsiveDlg.element.querySelector(".e-dlg-header-content");
        var closeBtn = header.querySelector(".e-dlg-closeicon-btn");
        var text = header.querySelector(".e-dlg-custom-header");
        if (args.isOpen) {
          content2.firstChild.style.display = "none";
          content2.appendChild(args.target);
          closeBtn.style.display = "none";
          this.saveBtn.element.style.display = "none";
          this.filterClearBtn.element.style.display = "none";
          text.innerHTML = args.header;
          var backBtn = this.parent.createElement("button");
          var span = this.parent.createElement("span", {
            className: "e-btn-icon e-resfilterback e-icons"
          });
          backBtn.appendChild(span);
          this.backBtn = new Button({
            cssClass: this.parent.cssClass ? "e-res-back-btn " + this.parent.cssClass : "e-res-back-btn"
          });
          this.backBtn.appendTo(backBtn);
          text.parentElement.insertBefore(backBtn, text);
        } else if (this.backBtn && !this.isCustomDlgRender) {
          content2.firstChild.style.display = "";
          remove(this.backBtn.element);
          closeBtn.style.display = "";
          this.saveBtn.element.style.display = "";
          if (this.isFiltered) {
            this.filterClearBtn.element.style.display = "";
          }
          text.innerHTML = this.getHeaderTitle({
            action: ResponsiveDialogAction.isFilter
          }, args.col);
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.refreshCustomFilterClearBtn = function(args) {
      if (this.filterClearBtn) {
        this.isFiltered = args.isFiltered;
        this.filterClearBtn.element.style.display = args.isFiltered ? "" : "none";
      }
    };
    ResponsiveDialogRenderer2.prototype.refreshCustomFilterOkBtn = function(args) {
      if (this.saveBtn) {
        this.saveBtn.disabled = args.disabled;
      }
      if (this.parent.columnChooserModule && this.parent.columnChooserModule.responsiveDialogRenderer.saveBtn) {
        this.parent.columnChooserModule.responsiveDialogRenderer.saveBtn.disabled = args.disabled;
      }
    };
    ResponsiveDialogRenderer2.prototype.columnMenuResponsiveContent = function(str, locale, disabled) {
      var cDiv = this.parent.createElement("div", {
        className: "e-responsivecoldiv e-responsive" + str.toLowerCase() + "div" + (disabled ? " e-disabled" : "")
      });
      var span = this.parent.createElement("span", {
        className: "e-icons e-res" + str.toLowerCase() + "-icon e-btn-icon"
      });
      var icon = this.parent.createElement("span", {
        innerHTML: locale,
        className: "e-rescolumn-menu e-res-header-text"
      });
      cDiv.appendChild(span);
      cDiv.appendChild(icon);
      this.customColumnDiv.appendChild(cDiv);
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveContent = function(col, column) {
      var _this = this;
      var gObj = this.parent;
      var isColumnChooser = this.action === ResponsiveDialogAction.isColumnChooser;
      if (col || isColumnChooser) {
        this.filterParent = this.parent.createElement("div", {
          className: (isColumnChooser ? "e-maincolumnchooserdiv " : "") + "e-mainfilterdiv e-default-filter",
          id: (isColumnChooser ? "columchooser" : col.uid) + "-main-filter"
        });
        return this.filterParent;
      } else {
        this.customColumnDiv = gObj.createElement("div", {
          className: "columndiv columnmenudiv",
          styles: "width: 100%"
        });
        if (this.parent.showColumnMenu && this.parent.rowRenderingMode === "Horizontal" && this.action === ResponsiveDialogAction.isColMenu) {
          this.columnMenuResponsiveContent("AutoFitAll", gObj.localeObj.getConstant("AutoFitAll"));
          this.columnMenuResponsiveContent("AutoFit", gObj.localeObj.getConstant("AutoFit"));
          if (column.allowGrouping && gObj.allowGrouping) {
            this.columnMenuResponsiveContent("Group", gObj.localeObj.getConstant("Group"), gObj.groupSettings.columns.indexOf(column.field) >= 0);
            this.columnMenuResponsiveContent("UnGroup", gObj.localeObj.getConstant("Ungroup"), gObj.groupSettings.columns.indexOf(column.field) < 0);
          }
          if (column.allowSorting && gObj.allowSorting) {
            var direction = "None";
            var sortColumns = this.parent.sortSettings.columns;
            for (var i = 0; i < sortColumns.length; i++) {
              if (sortColumns[parseInt(i.toString(), 10)].field === column.field) {
                direction = sortColumns[parseInt(i.toString(), 10)].direction;
                break;
              }
            }
            this.columnMenuResponsiveContent("ascending", gObj.localeObj.getConstant("SortAscending"), direction === "Ascending");
            this.columnMenuResponsiveContent("descending", gObj.localeObj.getConstant("SortDescending"), direction === "Descending");
          }
          if (gObj.showColumnChooser) {
            this.columnMenuResponsiveContent("Column", gObj.localeObj.getConstant("Columnchooser"));
          }
          if (column.allowFiltering && gObj.allowFiltering) {
            this.columnMenuResponsiveContent("Filter", gObj.localeObj.getConstant("FilterMenu"));
          }
        } else {
          var cols = gObj.getColumns();
          var sortBtnParent = gObj.createElement("div", {
            className: "e-ressortbutton-parent"
          });
          var filteredCols = [];
          var isSort = this.action === ResponsiveDialogAction.isSort;
          var isFilter = this.action === ResponsiveDialogAction.isFilter;
          if (isFilter) {
            for (var i = 0; i < gObj.filterSettings.columns.length; i++) {
              filteredCols.push(gObj.filterSettings.columns[parseInt(i.toString(), 10)].field);
            }
          }
          for (var i = 0; i < cols.length; i++) {
            if (!cols[parseInt(i.toString(), 10)].visible || !cols[parseInt(i.toString(), 10)].allowSorting && isSort || !cols[parseInt(i.toString(), 10)].allowFiltering && isFilter) {
              continue;
            }
            var cDiv = gObj.createElement("div", {
              className: "e-responsivecoldiv"
            });
            cDiv.setAttribute("data-e-mappingname", cols[parseInt(i.toString(), 10)].field);
            cDiv.setAttribute("data-e-mappinguid", cols[parseInt(i.toString(), 10)].uid);
            var span = gObj.createElement("span", {
              innerHTML: cols[parseInt(i.toString(), 10)].headerText,
              className: "e-res-header-text"
            });
            cDiv.appendChild(span);
            this.customColumnDiv.appendChild(cDiv);
            if (isSort) {
              var fields = this.getSortedFieldsAndDirections("field");
              var index = fields.indexOf(cols[parseInt(i.toString(), 10)].field);
              var button = gObj.createElement("button", {
                id: gObj.element.id + cols[parseInt(i.toString(), 10)].field + "sortbutton"
              });
              var clone = sortBtnParent.cloneNode();
              clone.appendChild(button);
              cDiv.appendChild(clone);
              var btnObj = new Button({
                cssClass: this.parent.cssClass ? "e-ressortbutton " + this.parent.cssClass : "e-ressortbutton"
              });
              btnObj.appendTo(button);
              var buttonInnerText = void 0;
              if (!isNullOrUndefined(this.parent.sortSettings.columns[parseInt(index.toString(), 10)])) {
                buttonInnerText = this.parent.sortSettings.columns[parseInt(index.toString(), 10)].direction === "Ascending" ? this.parent.localeObj.getConstant("AscendingText") : this.parent.localeObj.getConstant("DescendingText");
              }
              button.innerHTML = index > -1 ? buttonInnerText : this.parent.localeObj.getConstant("NoneText");
              button.onclick = function(e) {
                _this.sortButtonClickHandler(e.target);
              };
            }
            if (isFilter && filteredCols.indexOf(cols[parseInt(i.toString(), 10)].field) > -1) {
              var divIcon = gObj.createElement("div", {
                className: "e-icons e-res-icon e-filtersetdiv"
              });
              var iconSpan = gObj.createElement("span", {
                className: "e-icons e-res-icon e-filterset"
              });
              iconSpan.setAttribute("colType", cols[parseInt(i.toString(), 10)].type);
              divIcon.appendChild(iconSpan);
              cDiv.appendChild(divIcon);
            }
          }
        }
        EventHandler.add(this.customColumnDiv, Browser.isDevice ? "touchend" : "click", this.customFilterColumnClickHandler, this);
        return this.customColumnDiv;
      }
    };
    ResponsiveDialogRenderer2.prototype.getSortedFieldsAndDirections = function(name) {
      var fields = [];
      for (var i = 0; i < this.parent.sortSettings.columns.length; i++) {
        fields.push(this.parent.sortSettings.columns[parseInt(i.toString(), 10)]["" + name]);
      }
      return fields;
    };
    ResponsiveDialogRenderer2.prototype.sortButtonClickHandler = function(target) {
      if (target) {
        var columndiv = parentsUntil(target, "e-responsivecoldiv");
        var field = columndiv.getAttribute("data-e-mappingname");
        if (!this.parent.allowMultiSorting) {
          this.sortPredicate = [];
          this.sortedCols = [];
          this.isSortApplied = false;
          this.resetSortButtons(target);
        }
        var txt = target.textContent;
        var directionTxt = txt === this.parent.localeObj.getConstant("NoneText") ? this.parent.localeObj.getConstant("AscendingText") : txt === this.parent.localeObj.getConstant("AscendingText") ? this.parent.localeObj.getConstant("DescendingText") : this.parent.localeObj.getConstant("NoneText");
        var direction = directionTxt === this.parent.localeObj.getConstant("AscendingText") ? "Ascending" : directionTxt === this.parent.localeObj.getConstant("DescendingText") ? "Descending" : "None";
        target.innerHTML = directionTxt;
        this.setSortedCols(field, direction);
      }
    };
    ResponsiveDialogRenderer2.prototype.resetSortButtons = function(target) {
      var buttons = [].slice.call(this.customColumnDiv.getElementsByClassName("e-ressortbutton"));
      for (var i = 0; i < buttons.length; i++) {
        if (buttons[parseInt(i.toString(), 10)] !== target) {
          buttons[parseInt(i.toString(), 10)].innerHTML = "None";
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.setSortedCols = function(field, direction) {
      var fields = this.getCurrentSortedFields();
      var index = fields.indexOf(field);
      if (this.parent.allowMultiSorting && index > -1) {
        this.sortedCols.splice(index, 1);
        this.sortPredicate.splice(index, 1);
      }
      this.isSortApplied = true;
      if (direction !== "None") {
        this.sortedCols.push(field);
        this.sortPredicate.push({
          field,
          direction
        });
      }
    };
    ResponsiveDialogRenderer2.prototype.getCurrentSortedFields = function() {
      var fields = [];
      for (var i = 0; i < this.sortedCols.length; i++) {
        fields.push(this.sortedCols[parseInt(i.toString(), 10)]);
      }
      return fields;
    };
    ResponsiveDialogRenderer2.prototype.customFilterColumnClickHandler = function(e) {
      var gObj = this.parent;
      var target = e.target;
      if (parentsUntil(target, "columnmenudiv") && this.action === ResponsiveDialogAction.isColMenu && !parentsUntil(target, "e-disabled")) {
        var column = this.menuCol ? this.menuCol : this.filteredCol;
        if (parentsUntil(target, "e-responsiveautofitalldiv")) {
          gObj.autoFitColumns([]);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsiveautofitdiv")) {
          gObj.autoFitColumns(column.field);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsivegroupdiv")) {
          gObj.groupColumn(column.field);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsiveungroupdiv")) {
          gObj.ungroupColumn(column.field);
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsiveascendingdiv")) {
          gObj.sortColumn(column.field, "Ascending");
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsivedescendingdiv")) {
          gObj.sortColumn(column.field, "Descending");
          this.closeCustomFilter();
        } else if (parentsUntil(target, "e-responsivecolumndiv")) {
          gObj.notify(renderResponsiveChangeAction, {
            action: 5
          });
          gObj.showResponsiveCustomColumnChooser();
        } else if (parentsUntil(target, "e-responsivefilterdiv")) {
          gObj.notify(renderResponsiveChangeAction, {
            action: 3
          });
          this.isRowResponsive = true;
          this.isCustomDialog = false;
          if (gObj.filterModule) {
            gObj.filterModule.responsiveDialogRenderer.showResponsiveDialog(column);
          }
        }
        e.preventDefault();
      }
      if (this.action !== ResponsiveDialogAction.isFilter) {
        return;
      }
      if (gObj.filterSettings.type !== "FilterBar") {
        if (target.classList.contains("e-responsivecoldiv") || target.parentElement.classList.contains("e-responsivecoldiv")) {
          var field = target.getAttribute("data-e-mappingname");
          if (!field) {
            field = target.parentElement.getAttribute("data-e-mappingname");
          }
          if (field) {
            var col = gObj.getColumnByField(field);
            this.isRowResponsive = true;
            this.showResponsiveDialog(col);
          }
        } else if (target.classList.contains("e-filterset") || target.parentElement.classList.contains("e-filtersetdiv")) {
          var colDiv = parentsUntil(target, "e-responsivecoldiv");
          if (colDiv) {
            var field = colDiv.getAttribute("data-e-mappingname");
            var col = gObj.getColumnByField(field);
            if (col.filter.type === "Menu" || !col.filter.type && gObj.filterSettings.type === "Menu") {
              this.isDialogClose = true;
            }
            this.parent.filterModule.filterModule.clearCustomFilter(col);
            this.removeCustomDlgFilterEle(target);
          }
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.showResponsiveDialog = function(col, column) {
      if (this.isCustomDialog && this.action === ResponsiveDialogAction.isFilter && !this.isRowResponsive || column && this.action === ResponsiveDialogAction.isColMenu) {
        this.menuCol = column;
        this.renderCustomFilterDialog(null, column);
      } else {
        this.filteredCol = col;
        this.renderResponsiveDialog(col);
        if (this.parent.enableAdaptiveUI && col) {
          this.parent.filterModule.setFilterModel(col);
          this.parent.filterModule.filterModule.openDialog(this.parent.filterModule.createOptions(col, void 0));
        }
        if (this.action === ResponsiveDialogAction.isColumnChooser) {
          this.parent.notify(renderResponsiveColumnChooserDiv, {
            action: "open"
          });
        }
        if (this.action === ResponsiveDialogAction.isSort) {
          var args = {
            cancel: false,
            dialogObj: this.customResponsiveDlg,
            requestType: "beforeOpenAptiveSortDialog"
          };
          this.parent.trigger(beforeOpenAdaptiveDialog, args);
          if (args.cancel) {
            return;
          }
        }
        this.customResponsiveDlg.show(true);
        this.customResponsiveDlg.element.style.maxHeight = "100%";
        this.setTopToChildDialog(this.customResponsiveDlg.element);
        if (this.parent.enableAdaptiveUI && this.parent.filterSettings && (this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel") && this.parent.filterSettings.enableInfiniteScrolling && this.parent.filterSettings.loadingIndicator === "Shimmer") {
          var filterBase = this.parent.filterSettings.type === "CheckBox" ? this.parent.filterModule.filterModule.checkBoxBase : this.parent.filterModule.filterModule.excelFilterBase;
          filterBase.showMask();
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.setTopToChildDialog = function(dialogEle) {
      var child = dialogEle.querySelector(".e-dialog");
      if (child) {
        var top_1 = dialogEle.querySelector(".e-dlg-header-content").getBoundingClientRect().height;
        child.style.top = top_1 + "px";
      }
    };
    ResponsiveDialogRenderer2.prototype.renderCustomFilterDialog = function(col, column) {
      var gObj = this.parent;
      var isColMenu = this.action === ResponsiveDialogAction.isColMenu;
      if (this.action === ResponsiveDialogAction.isFilter && gObj.filterSettings.type === "FilterBar") {
        return;
      }
      var colMenu = isColMenu ? "e-customcolumnmenudiv " : "";
      var outerDiv = this.parent.createElement("div", {
        id: gObj.element.id + (isColMenu ? "customcolumnmenu" : "customfilter"),
        className: this.parent.cssClass ? colMenu + "e-customfilterdiv e-responsive-dialog " + this.parent.cssClass : colMenu + "e-customfilterdiv e-responsive-dialog"
      });
      this.parent.element.appendChild(outerDiv);
      this.customFilterDlg = this.getDialogOptions(col, true, null, column);
      var args = {
        cancel: false,
        dialogObj: this.customFilterDlg,
        requestType: "beforeOpenAptiveFilterDialog"
      };
      this.parent.trigger(beforeOpenAdaptiveDialog, args);
      if (args.cancel) {
        return;
      }
      this.customFilterDlg.appendTo(outerDiv);
      this.customFilterDlg.show(true);
      this.customFilterDlg.element.style.maxHeight = "100%";
    };
    ResponsiveDialogRenderer2.prototype.getDialogOptions = function(col, isCustomFilter, id, column) {
      var options = new Dialog({
        isModal: true,
        showCloseIcon: true,
        closeOnEscape: false,
        locale: this.parent.locale,
        target: this.parent.adaptiveDlgTarget ? this.parent.adaptiveDlgTarget : document.body,
        visible: false,
        enableRtl: this.parent.enableRtl,
        content: this.renderResponsiveContent(col, column),
        open: this.dialogOpen.bind(this),
        created: this.dialogCreated.bind(this),
        close: this.beforeDialogClose.bind(this),
        width: "100%",
        height: "100%",
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      var isStringTemplate = "isStringTemplate";
      options["" + isStringTemplate] = true;
      if (isCustomFilter) {
        options.header = this.renderResponsiveHeader(col, void 0, true);
        var colMenu = this.action === ResponsiveDialogAction.isColMenu ? "e-customcolumnmenu " : "";
        options.cssClass = colMenu + "e-customfilter";
      } else {
        options.header = this.renderResponsiveHeader(col);
        options.cssClass = this.parent.rowRenderingMode === "Vertical" && this.action === ResponsiveDialogAction.isFilter ? "e-res" + id + " e-row-responsive-filter" : "e-res" + id;
      }
      return options;
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveDialog = function(col) {
      var gObj = this.parent;
      if (this.action === ResponsiveDialogAction.isFilter && gObj.filterSettings.type === "FilterBar") {
        return;
      }
      var id = this.action === ResponsiveDialogAction.isFilter ? "filter" : "sort";
      id = this.action === ResponsiveDialogAction.isColumnChooser ? "columnchooser" : id;
      var outerDiv = this.parent.createElement("div", {
        id: gObj.element.id + "responsive" + id,
        className: this.parent.cssClass ? "e-res" + id + "div e-responsive-dialog " + this.parent.cssClass : "e-res" + id + "div e-responsive-dialog"
      });
      this.parent.element.appendChild(outerDiv);
      this.customResponsiveDlg = this.getDialogOptions(col, false, id);
      this.customResponsiveDlg.appendTo(outerDiv);
    };
    ResponsiveDialogRenderer2.prototype.dialogCreated = function() {
      addBiggerDialog(this.parent);
    };
    ResponsiveDialogRenderer2.prototype.dialogOpen = function() {
      if (this.action === ResponsiveDialogAction.isSort && this.parent.allowMultiSorting) {
        for (var i = 0; i < this.parent.sortSettings.columns.length; i++) {
          this.sortedCols.push(this.parent.sortSettings.columns[parseInt(i.toString(), 10)].field);
          var sortField = this.parent.sortSettings.columns[parseInt(i.toString(), 10)].field;
          var sortDirection = this.parent.sortSettings.columns[parseInt(i.toString(), 10)].direction;
          this.sortPredicate.push({
            field: sortField,
            direction: sortDirection
          });
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.beforeDialogClose = function(args) {
      this.isDialogClose = args.element && !args.element.querySelector(".e-xl-customfilterdiv") && args.element.classList.contains("e-resfilterdiv");
      if (this.action === ResponsiveDialogAction.isFilter) {
        if (args.element.classList.contains("e-resfilterdiv")) {
          this.parent.filterModule.filterModule.closeResponsiveDialog(this.isCustomDlgRender);
        } else if (args.element.classList.contains("e-customfilterdiv")) {
          this.closeCustomFilter();
        }
        if (this.parent.rowRenderingMode === "Horizontal" && this.parent.showColumnMenu) {
          this.parent.notify(renderResponsiveChangeAction, {
            action: 4
          });
          var custom = document.querySelector(".e-resfilter");
          if (custom) {
            remove(custom);
          }
        }
      } else if (this.action === ResponsiveDialogAction.isSort) {
        this.closeCustomDialog();
      } else if (this.action === ResponsiveDialogAction.isColMenu) {
        this.closeCustomFilter();
        var custom = document.querySelector(".e-rescolummenu");
        if (custom) {
          remove(custom);
        }
      } else if (this.action === ResponsiveDialogAction.isColumnChooser) {
        this.parent.notify(renderResponsiveColumnChooserDiv, {
          action: "clear"
        });
        var custom = document.querySelector(".e-rescolumnchooser");
        if (custom) {
          remove(custom);
        }
        if (this.parent.rowRenderingMode === "Horizontal" && this.parent.showColumnMenu) {
          this.parent.notify(renderResponsiveChangeAction, {
            action: 4
          });
        }
        this.isCustomDialog = false;
        this.isDialogClose = false;
      }
      this.parent.off(enterKeyHandler, this.keyHandler);
    };
    ResponsiveDialogRenderer2.prototype.sortColumn = function() {
      if (!this.isSortApplied) {
        this.closeCustomDialog();
        return;
      }
      if (this.sortPredicate.length) {
        this.parent.setProperties({
          sortSettings: {
            columns: []
          }
        }, true);
      }
      for (var i = 0; i < this.sortPredicate.length; i++) {
        this.parent.sortColumn(this.sortPredicate[parseInt(i.toString(), 10)].field, this.sortPredicate[parseInt(i.toString(), 10)].direction, this.parent.allowMultiSorting);
      }
      if (!this.sortPredicate.length) {
        this.parent.clearSorting();
      }
      this.closeCustomDialog();
    };
    ResponsiveDialogRenderer2.prototype.getHeaderTitle = function(args, col) {
      var gObj = this.parent;
      var title;
      if (this.action === ResponsiveDialogAction.isEdit) {
        title = gObj.localeObj.getConstant("EditFormTitle") + args.primaryKeyValue[0];
      } else if (this.action === ResponsiveDialogAction.isAdd) {
        title = gObj.localeObj.getConstant("AddFormTitle");
      } else if (this.action === ResponsiveDialogAction.isFilter) {
        title = col ? col.headerText || col.field : gObj.localeObj.getConstant("FilterButton");
      } else if (this.action === ResponsiveDialogAction.isSort) {
        title = gObj.localeObj.getConstant("Sort");
      } else if (this.action === ResponsiveDialogAction.isColMenu) {
        title = gObj.localeObj.getConstant("ColumnMenu");
      } else if (this.action === ResponsiveDialogAction.isColumnChooser) {
        title = gObj.localeObj.getConstant("ChooseColumns");
      }
      return title;
    };
    ResponsiveDialogRenderer2.prototype.getDialogName = function(action) {
      var name;
      if (action === ResponsiveDialogAction.isAdd || action === ResponsiveDialogAction.isEdit) {
        name = "dialogEdit_wrapper_title";
      } else if (action === ResponsiveDialogAction.isFilter) {
        name = "responsive_filter_dialog_wrapper";
      } else if (action === ResponsiveDialogAction.isColumnChooser) {
        name = "responsive_column_chooser_dialog_wrapper";
      }
      return name;
    };
    ResponsiveDialogRenderer2.prototype.getButtonText = function(action) {
      var text;
      if (action === ResponsiveDialogAction.isAdd || action === ResponsiveDialogAction.isEdit) {
        text = "Save";
      } else if (action === ResponsiveDialogAction.isFilter || this.action === ResponsiveDialogAction.isSort || action === ResponsiveDialogAction.isColumnChooser || this.action === ResponsiveDialogAction.isColumnChooser) {
        text = "OKButton";
      }
      return text;
    };
    ResponsiveDialogRenderer2.prototype.renderResponsiveHeader = function(col, args, isCustomFilter) {
      var _this = this;
      var gObj = this.parent;
      gObj.on(enterKeyHandler, this.keyHandler, this);
      var id = gObj.element.id + this.getDialogName(this.action);
      var header = gObj.createElement("div", {
        className: "e-res-custom-element"
      });
      var titleDiv = gObj.createElement("div", {
        className: "e-dlg-custom-header",
        id
      });
      titleDiv.innerHTML = this.getHeaderTitle(args, col);
      header.appendChild(titleDiv);
      var saveBtn = gObj.createElement("button");
      if (!isCustomFilter) {
        this.saveBtn = new Button({
          cssClass: this.parent.cssClass ? "e-primary e-flat e-res-apply-btn " + this.parent.cssClass : "e-primary e-flat e-res-apply-btn"
        });
        saveBtn.innerHTML = gObj.localeObj.getConstant(this.getButtonText(this.action));
        this.saveBtn.appendTo(saveBtn);
        saveBtn.onclick = function(e) {
          _this.dialogHdrBtnClickHandler();
        };
      }
      var isSort = this.action === ResponsiveDialogAction.isSort;
      var isFilter = this.action === ResponsiveDialogAction.isFilter;
      if (isFilter || isSort) {
        var id_1 = isSort ? "sort" : "filter";
        var clearBtn = gObj.createElement("button");
        this.filterClearBtn = new Button({
          cssClass: this.parent.cssClass ? "e-primary e-flat e-res-" + id_1 + "-clear-btn " + this.parent.cssClass : "e-primary e-flat e-res-" + id_1 + "-clear-btn"
        });
        if (isFilter) {
          var span = gObj.createElement("span", {
            className: "e-btn-icon e-icon-filter-clear e-icons"
          });
          clearBtn.appendChild(span);
        } else {
          clearBtn.innerHTML = gObj.localeObj.getConstant("Clear");
        }
        header.appendChild(clearBtn);
        this.filterClearBtn.appendTo(clearBtn);
        clearBtn.onclick = function(e) {
          if (parentsUntil(e.target, "e-customfilter")) {
            _this.parent.filterModule.clearFiltering();
            _this.removeCustomDlgFilterEle();
          } else {
            if (isFilter) {
              _this.filterClear();
            } else {
              _this.resetSortButtons();
              _this.sortedCols = [];
              _this.sortPredicate = [];
              _this.isSortApplied = true;
            }
          }
        };
        header.appendChild(clearBtn);
      }
      if (!isCustomFilter) {
        header.appendChild(saveBtn);
      }
      return header;
    };
    ResponsiveDialogRenderer2.prototype.filterClear = function() {
      this.parent.filterModule.filterModule.clearCustomFilter(this.filteredCol);
      this.parent.filterModule.filterModule.closeResponsiveDialog();
    };
    ResponsiveDialogRenderer2.prototype.removeCustomFilterElement = function() {
      var elem = document.getElementById(this.parent.element.id + "customcolumnmenu");
      if (elem) {
        remove(elem);
        var custom = document.querySelector(".e-customfilter");
        if (custom) {
          remove(custom);
        }
      }
      var custommenu = document.querySelector(".e-rescolumnchooser");
      if (custommenu) {
        remove(custommenu);
      }
    };
    ResponsiveDialogRenderer2.prototype.dialogHdrBtnClickHandler = function() {
      if (this.action === ResponsiveDialogAction.isEdit || this.action === ResponsiveDialogAction.isAdd) {
        this.parent.endEdit();
      } else if (this.action === ResponsiveDialogAction.isFilter) {
        this.parent.filterModule.filterModule.applyCustomFilter({
          col: this.filteredCol,
          isCustomFilter: this.isCustomDlgRender
        });
        this.removeCustomFilterElement();
      } else if (this.action === ResponsiveDialogAction.isSort) {
        this.sortColumn();
        this.removeCustomFilterElement();
      } else if (this.action === ResponsiveDialogAction.isColumnChooser) {
        this.parent.notify(renderResponsiveColumnChooserDiv, {
          action: "confirm"
        });
        this.removeCustomFilterElement();
        this.isCustomDialog = false;
        this.isDialogClose = false;
      }
    };
    ResponsiveDialogRenderer2.prototype.closeCustomDialog = function() {
      if (this.isCustomDlgRender) {
        var mainfilterdiv = this.customResponsiveDlg.element.querySelector(".e-mainfilterdiv");
        remove(mainfilterdiv);
        return;
      }
      this.isRowResponsive = false;
      this.isCustomDlgRender = false;
      this.destroyCustomFilterDialog();
    };
    ResponsiveDialogRenderer2.prototype.destroyCustomFilterDialog = function() {
      if (!this.customResponsiveDlg) {
        return;
      }
      var elem = document.getElementById(this.customResponsiveDlg.element.id);
      if (this.customResponsiveDlg && !this.customResponsiveDlg.isDestroyed && elem) {
        this.customResponsiveDlg.destroy();
        remove(elem);
      }
      this.closeCustomFilter();
      if (this.action === ResponsiveDialogAction.isSort) {
        this.sortPredicate = [];
        this.sortedCols = [];
        this.isSortApplied = false;
      }
    };
    ResponsiveDialogRenderer2.prototype.closeCustomFilter = function() {
      if (!this.isDialogClose && this.customFilterDlg) {
        var customEle = document.getElementById(this.customFilterDlg.element.id);
        if (this.customFilterDlg && !this.customFilterDlg.isDestroyed && customEle) {
          this.customFilterDlg.destroy();
          remove(customEle);
        }
      }
      this.isCustomDialog = false;
      this.isDialogClose = false;
    };
    ResponsiveDialogRenderer2.prototype.removeCustomDlgFilterEle = function(target) {
      if (target) {
        if (target.parentElement.classList.contains("e-filtersetdiv")) {
          remove(target.parentElement);
        } else {
          remove(target);
        }
      } else {
        var child = this.customColumnDiv.children;
        for (var i = 0; i < child.length; i++) {
          target = child[parseInt(i.toString(), 10)].querySelector(".e-filtersetdiv");
          if (target) {
            remove(target);
            i--;
          }
        }
      }
    };
    ResponsiveDialogRenderer2.prototype.keyHandler = function(e) {
      if (e.keyCode === 13 && (this.action === ResponsiveDialogAction.isFilter && e.target.classList.contains("e-searchinput") || this.action === ResponsiveDialogAction.isEdit || this.action === ResponsiveDialogAction.isAdd)) {
        this.dialogHdrBtnClickHandler();
      }
    };
    ResponsiveDialogRenderer2.prototype.editComplate = function(args) {
      if (args.requestType === "save" || args.requestType === "cancel") {
        this.parent.off(enterKeyHandler, this.keyHandler);
      }
    };
    ResponsiveDialogRenderer2.prototype.removeEventListener = function() {
      if (this.customColumnDiv) {
        EventHandler.remove(this.customColumnDiv, Browser.isDevice ? "touchend" : "click", this.customFilterColumnClickHandler);
      }
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.parent.removeEventListener(actionComplete, this.onActionCompleteFn);
    };
    return ResponsiveDialogRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/service-locator.js
var ServiceLocator = (
  /** @class */
  function() {
    function ServiceLocator2() {
      this.services = {};
    }
    ServiceLocator2.prototype.register = function(name, type) {
      if (isNullOrUndefined(this.services["" + name])) {
        this.services["" + name] = type;
      }
    };
    ServiceLocator2.prototype.getService = function(name) {
      if (isNullOrUndefined(this.services["" + name])) {
        throw "The service " + name + " is not registered";
      }
      return this.services["" + name];
    };
    ServiceLocator2.prototype.registerAdaptiveService = function(type, isAdaptiveUI, action) {
      if (isAdaptiveUI) {
        type.responsiveDialogRenderer = new ResponsiveDialogRenderer(type.parent, type.serviceLocator);
        type.responsiveDialogRenderer.action = action;
      } else {
        if (type.responsiveDialogRenderer) {
          type.responsiveDialogRenderer.removeEventListener();
          type.responsiveDialogRenderer = void 0;
        }
      }
    };
    return ServiceLocator2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/renderer-factory.js
var RendererFactory = (
  /** @class */
  function() {
    function RendererFactory2() {
      this.rendererMap = {};
    }
    RendererFactory2.prototype.addRenderer = function(name, type) {
      var rName = getEnumValue(RenderType, name);
      if (isNullOrUndefined(this.rendererMap["" + rName])) {
        this.rendererMap["" + rName] = type;
      }
    };
    RendererFactory2.prototype.getRenderer = function(name) {
      var rName = getEnumValue(RenderType, name);
      if (isNullOrUndefined(this.rendererMap["" + rName])) {
        throw "The renderer " + rName + " is not found";
      } else {
        return this.rendererMap["" + rName];
      }
    };
    return RendererFactory2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/width-controller.js
var ColumnWidthService = (
  /** @class */
  function() {
    function ColumnWidthService2(parent) {
      this.parent = parent;
    }
    ColumnWidthService2.prototype.setWidthToColumns = function() {
      var i = 0;
      var indexes = this.parent.getColumnIndexesInView();
      var wFlag = true;
      var totalColumnsWidth = 0;
      if (this.parent.allowGrouping) {
        for (var len = this.parent.groupSettings.columns.length; i < len; i++) {
          if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
            wFlag = false;
            continue;
          }
          this.setColumnWidth(new Column({
            width: "30px"
          }), i);
        }
      }
      if (this.parent.detailTemplate || this.parent.childGrid) {
        this.setColumnWidth(new Column({
          width: "30px"
        }), i);
        i++;
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
        this.setColumnWidth(new Column({
          width: "30px"
        }), i);
        i++;
      }
      var columns = this.parent.getColumns();
      for (var j = 0; j < columns.length; j++) {
        this.setColumnWidth(columns[parseInt(j.toString(), 10)], wFlag && this.parent.enableColumnVirtualization ? void 0 : j + i);
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        this.setColumnWidth(new Column({
          width: "30px"
        }), this.parent.groupSettings.columns.length + columns.length);
      }
      totalColumnsWidth = this.getTableWidth(this.parent.getColumns());
      if (this.parent.width !== "auto" && this.parent.width.toString().indexOf("%") === -1) {
        this.setMinwidthBycalculation(totalColumnsWidth);
      }
    };
    ColumnWidthService2.prototype.setMinwidthBycalculation = function(tWidth) {
      var difference = 0;
      var collection = this.parent.getColumns().filter(function(a) {
        return isNullOrUndefined(a.width) || a.width === "auto";
      });
      if (collection.length) {
        if (!isNullOrUndefined(this.parent.width) && this.parent.width !== "auto" && typeof this.parent.width === "string" && this.parent.width.indexOf("%") === -1) {
          difference = parseInt(this.parent.width, 10) - tWidth;
        } else {
          difference = this.parent.element.getBoundingClientRect().width - tWidth;
        }
        var tmWidth = 0;
        for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
          var cols = collection_1[_i];
          tmWidth += !isNullOrUndefined(cols.minWidth) ? typeof cols.minWidth === "string" ? parseInt(cols.minWidth, 10) : cols.minWidth : 0;
        }
        for (var i = 0; i < collection.length; i++) {
          if (tWidth === 0 && this.parent.allowResizing && this.isWidthUndefined() && i !== collection.length - 1) {
            this.setUndefinedColumnWidth(collection);
          }
          var index = this.parent.getColumnIndexByField(collection[parseInt(i.toString(), 10)].field) + this.parent.getIndentCount();
          if (tWidth !== 0 && difference < tmWidth) {
            this.setWidth(collection[parseInt(i.toString(), 10)].minWidth, index);
          } else if (tWidth !== 0 && difference > tmWidth) {
            this.setWidth("", index, true);
          }
        }
      }
    };
    ColumnWidthService2.prototype.setUndefinedColumnWidth = function(collection) {
      for (var k = 0; k < collection.length; k++) {
        if (k !== collection.length - 1) {
          collection[parseInt(k.toString(), 10)].width = 200;
          this.setWidth(200, this.parent.getColumnIndexByField(collection[parseInt(k.toString(), 10)].field));
        }
      }
    };
    ColumnWidthService2.prototype.setColumnWidth = function(column, index, module) {
      if (this.parent.getColumns().length < 1) {
        return;
      }
      var columnIndex = isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index;
      var cWidth = this.getWidth(column);
      var tgridWidth = this.getTableWidth(this.parent.getColumns());
      if (cWidth !== null) {
        this.setWidth(cWidth, columnIndex);
        if (this.parent.width !== "auto" && this.parent.width.toString().indexOf("%") === -1) {
          this.setMinwidthBycalculation(tgridWidth);
        }
        if (this.parent.allowResizing && module === "resize" || this.parent.getFrozenColumns() && this.parent.allowResizing) {
          this.setWidthToTable();
        }
        this.parent.notify(columnWidthChanged, {
          index: columnIndex,
          width: cWidth,
          column,
          module
        });
      }
    };
    ColumnWidthService2.prototype.setWidth = function(width, index, clear) {
      if (this.parent.groupSettings.columns.length > index && ispercentageWidth(this.parent)) {
        var elementWidth = this.parent.element.offsetWidth;
        width = (30 / elementWidth * 100).toFixed(1) + "%";
      }
      var header = this.parent.getHeaderTable();
      var content2 = this.parent.getContentTable();
      var fWidth = formatUnit(width);
      var headerCol = header.querySelector(colGroup).children[parseInt(index.toString(), 10)];
      if (headerCol && !clear) {
        headerCol.style.width = fWidth;
      } else if (headerCol && clear) {
        headerCol.style.width = "";
      }
      var contentCol = content2.querySelector(colGroup).children[parseInt(index.toString(), 10)];
      if (contentCol && !clear) {
        contentCol.style.width = fWidth;
      } else if (contentCol && clear) {
        contentCol.style.width = "";
      }
      if (!this.parent.enableColumnVirtualization && this.parent.isEdit) {
        var edit = this.parent.element.querySelectorAll(".e-table.e-inline-edit");
        var editTableCol = [];
        for (var i = 0; i < edit.length; i++) {
          if (parentsUntil(edit[parseInt(i.toString(), 10)], "e-grid").id === this.parent.element.id) {
            for (var j = 0; j < edit[parseInt(i.toString(), 10)].querySelector("colgroup").children.length; j++) {
              editTableCol.push(edit[parseInt(i.toString(), 10)].querySelector("colgroup").children[parseInt(j.toString(), 10)]);
            }
          }
        }
        if (edit.length && editTableCol.length && editTableCol[parseInt(index.toString(), 10)]) {
          editTableCol[parseInt(index.toString(), 10)].style.width = fWidth;
        }
      }
      if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
        this.refreshFrozenScrollbar();
      }
    };
    ColumnWidthService2.prototype.refreshFrozenScrollbar = function() {
      var args = {
        cancel: false
      };
      this.parent.notify(preventFrozenScrollRefresh, args);
      if (args.cancel) {
        return;
      }
      var scrollWidth2 = getScrollBarWidth();
      var movableScrollbar = this.parent.element.querySelector(".e-movablescrollbar");
      var movableWidth = this.parent.getContent().firstElementChild.getBoundingClientRect().width;
      if (this.parent.enableColumnVirtualization) {
        var placeHolder = this.parent.getContent().querySelector(".e-virtualtrack");
        if (placeHolder) {
          movableWidth = placeHolder.scrollWidth;
        }
      }
      if (this.parent.height !== "auto") {
        movableWidth = movableWidth + scrollWidth2;
      }
      movableScrollbar.firstElementChild.style.width = movableWidth + "px";
    };
    ColumnWidthService2.prototype.getSiblingsHeight = function(element) {
      var previous = this.getHeightFromDirection(element, "previous");
      var next = this.getHeightFromDirection(element, "next");
      return previous + next;
    };
    ColumnWidthService2.prototype.getHeightFromDirection = function(element, direction) {
      var sibling = element[direction + "ElementSibling"];
      var result = 0;
      var classList2 = [gridHeader, gridFooter, "e-groupdroparea", "e-gridpager", "e-toolbar", "e-temp-toolbar"];
      while (sibling) {
        if (classList2.some(function(value) {
          return sibling.classList.contains(value);
        })) {
          result += sibling.offsetHeight;
        }
        sibling = sibling[direction + "ElementSibling"];
      }
      return result;
    };
    ColumnWidthService2.prototype.isWidthUndefined = function() {
      var isWidUndefCount = this.parent.getColumns().filter(function(col) {
        return isNullOrUndefined(col.width) && isNullOrUndefined(col.minWidth);
      }).length;
      return this.parent.getColumns().length === isWidUndefCount;
    };
    ColumnWidthService2.prototype.getWidth = function(column) {
      if (isNullOrUndefined(column.width) && this.parent.allowResizing && isNullOrUndefined(column.minWidth) && !this.isWidthUndefined()) {
        column.width = 200;
      }
      if (!column.width) {
        return null;
      }
      var width = parseInt(column.width.toString(), 10);
      if (column.minWidth && width < parseInt(column.minWidth.toString(), 10)) {
        return column.minWidth;
      } else if (column.maxWidth && width > parseInt(column.maxWidth.toString(), 10)) {
        return column.maxWidth;
      } else {
        return column.width;
      }
    };
    ColumnWidthService2.prototype.getTableWidth = function(columns) {
      var tWidth = 0;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        var cWidth = this.getWidth(column);
        if (column.width === "auto") {
          cWidth = 0;
        }
        if (column.visible !== false && cWidth !== null) {
          tWidth += parseInt(cWidth.toString(), 10);
        }
      }
      return tWidth;
    };
    ColumnWidthService2.prototype.setWidthToTable = function() {
      var tWidth = formatUnit(this.getTableWidth(this.parent.getColumns()));
      if (this.parent.detailTemplate || this.parent.childGrid) {
        this.setColumnWidth(new Column({
          width: "30px"
        }));
      }
      tWidth = this.isAutoResize() ? "100%" : tWidth;
      this.parent.getHeaderTable().style.width = tWidth;
      this.parent.getContentTable().style.width = tWidth;
      var edit = this.parent.element.querySelector(".e-table.e-inline-edit");
      if (edit) {
        edit.style.width = tWidth;
      }
    };
    ColumnWidthService2.prototype.isAutoResize = function() {
      return this.parent.allowResizing && this.parent.resizeSettings.mode === "Auto";
    };
    return ColumnWidthService2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/focus-strategy.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FocusStrategy = (
  /** @class */
  function() {
    function FocusStrategy2(parent) {
      this.currentInfo = {};
      this.oneTime = true;
      this.swap = {};
      this.isInfiniteScroll = false;
      this.virtualSelectionInfo = {};
      this.forget = false;
      this.skipFocus = true;
      this.focusByClick = false;
      this.firstHeaderCellClick = false;
      this.prevIndexes = {};
      this.refMatrix = this.refreshMatrix(true);
      this.actions = ["downArrow", "upArrow"];
      this.isVirtualScroll = false;
      this.groupedFrozenRow = 0;
      this.parent = parent;
      this.rowModelGen = new RowModelGenerator(this.parent);
      this.addEventListener();
    }
    FocusStrategy2.prototype.focusCheck = function(e) {
      var target = e.target;
      this.focusByClick = true;
      this.firstHeaderCellClick = true;
      this.skipFocus = target.classList.contains("e-grid");
    };
    FocusStrategy2.prototype.onFocus = function(e) {
      if (this.parent.isDestroyed || Browser.isDevice || this.parent.enableVirtualization || this.parent.element.querySelector(".e-masked-table") || !this.parent.isInitialLoad && e && e.target === this.parent.element && this.parent.element.querySelector(".e-spin-show")) {
        return;
      }
      this.setActive(!this.parent.enableHeaderFocus && this.parent.frozenRows === 0);
      if (!this.parent.enableHeaderFocus && !this.parent.getCurrentViewRecords().length && (this.parent.editSettings.mode !== "Batch" || this.parent.editSettings.mode === "Batch" && this.parent.editModule && !this.parent.editModule.getBatchChanges()[addedRecords].length)) {
        this.getContent().matrix.generate(this.rowModelGen.generateRows({
          rows: [new Row({
            isDataRow: true
          })]
        }), this.getContent().selector, false);
      }
      var current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());
      this.getContent().matrix.select(current[0], current[1]);
      if (this.skipFocus && !(e && e.target === this.parent.element)) {
        this.focus(e);
        this.skipFocus = false;
      }
    };
    FocusStrategy2.prototype.passiveFocus = function(e) {
      if (this.parent.isDestroyed) {
        return;
      }
      var firstHeaderCell = this.parent.getHeaderContent().querySelector(".e-headercell:not(.e-hide)");
      if (e.target === firstHeaderCell && e.relatedTarget && !parentsUntil(e.relatedTarget, "e-grid") && !this.firstHeaderCellClick) {
        var firstHeaderCellIndex = [0, 0];
        if (this.active.matrix.matrix[firstHeaderCellIndex[0]][firstHeaderCellIndex[1]] === 0) {
          firstHeaderCellIndex = findCellIndex(this.active.matrix.matrix, firstHeaderCellIndex, true);
        }
        this.active.matrix.current = firstHeaderCellIndex;
        this.currentInfo.element = e.target;
        this.currentInfo.elementToFocus = e.target;
        addClass([this.currentInfo.element], ["e-focused", "e-focus"]);
      }
      this.firstHeaderCellClick = false;
      if (e.target && e.target.classList.contains("e-detailcell")) {
        this.currentInfo.skipAction = false;
        addClass([this.currentInfo.element], ["e-focused", "e-focus"]);
      }
    };
    FocusStrategy2.prototype.onBlur = function(e) {
      if (this.parent.allowPaging && this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer")) {
        this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer").removeAttribute("aria-hidden");
      }
      var isGantt = parentsUntil(e.target, "e-gantt") && e.target.classList.contains("e-rowcell") && !isNullOrUndefined(e.target.nextElementSibling) && e.target.nextElementSibling.classList.contains("e-rowcell") ? true : false;
      if ((this.parent.isEdit || e && (!e.relatedTarget || closest(e.relatedTarget, ".e-grid")) && !(this.parent.element.classList.contains("e-childgrid") && !this.parent.element.matches(":focus-within"))) && !(!isGantt && isNullOrUndefined(e.relatedTarget) && parseInt(e.target.getAttribute("data-colindex"), 10) === 0 && parseInt(e.target.getAttribute("index"), 10) === 0) && !(!isGantt && isNullOrUndefined(e.relatedTarget) && !closest(document.activeElement, ".e-grid") && !isNullOrUndefined(e["sourceCapabilities"]))) {
        return;
      }
      this.removeFocus();
      this.skipFocus = true;
      this.currentInfo.skipAction = false;
      this.setLastContentCellTabIndex();
      this.setFirstFocusableTabIndex();
      this.firstHeaderCellClick = false;
    };
    FocusStrategy2.prototype.setFirstFocusableTabIndex = function() {
      var gObj = this.parent;
      gObj.element.tabIndex = -1;
      if (gObj.allowGrouping && gObj.groupSettings.showDropArea) {
        var groupModule = gObj.groupModule;
        var focusableGroupedItems = groupModule.getFocusableGroupedItems();
        if (focusableGroupedItems.length > 0) {
          groupModule.element.tabIndex = -1;
          focusableGroupedItems[0].tabIndex = 0;
        } else {
          groupModule.element.tabIndex = 0;
        }
        return;
      }
      if (gObj.toolbar || gObj.toolbarTemplate) {
        var toolbarElement = gObj.toolbarModule.element;
        var focusableToolbarItems = this.parent.toolbarModule.getFocusableToolbarItems();
        if (focusableToolbarItems.length > 0 && focusableToolbarItems[0].querySelector(".e-toolbar-item-focus,.e-btn,.e-input")) {
          toolbarElement.tabIndex = -1;
          focusableToolbarItems[0].querySelector(".e-toolbar-item-focus,.e-btn,.e-input").tabIndex = 0;
        } else {
          toolbarElement.tabIndex = 0;
        }
        return;
      }
      if (gObj.getColumns().length) {
        var firstHeaderCell = gObj.getHeaderContent().querySelector(".e-headercell:not(.e-hide)");
        firstHeaderCell.tabIndex = 0;
        this.setActive(false);
        if (!isNullOrUndefined(this.active) && (isNullOrUndefined(this.active.target) || !this.active.target.classList.contains("e-columnmenu"))) {
          var firstHeaderCellIndex = [0, 0];
          if (this.active.matrix.matrix[firstHeaderCellIndex[0]][firstHeaderCellIndex[1]] === 0) {
            firstHeaderCellIndex = findCellIndex(this.active.matrix.matrix, firstHeaderCellIndex, true);
          }
          this.active.matrix.current = firstHeaderCellIndex;
        }
        return;
      }
    };
    FocusStrategy2.prototype.setLastContentCellTabIndex = function() {
      var contentTable = this.parent.getContentTable();
      if (contentTable.rows[contentTable.rows.length - 1]) {
        var lastCell = contentTable.rows[contentTable.rows.length - 1].lastElementChild;
        lastCell.tabIndex = 0;
      }
    };
    FocusStrategy2.prototype.onClick = function(e, force) {
      if (parentsUntil(e.target, "e-filterbarcell") && (parentsUntil(e.target, "e-multiselect") || e.target.classList.contains("e-input-group-icon"))) {
        return;
      }
      var isContent = !isNullOrUndefined(closest(e.target, "." + gridContent));
      var isHeader = !isNullOrUndefined(closest(e.target, "." + gridHeader));
      isContent = isContent && isHeader ? !isContent : isContent;
      if (!isContent && isNullOrUndefined(closest(e.target, "." + gridHeader)) || e.target.classList.contains(content) || !isNullOrUndefined(closest(e.target, ".e-unboundcell")) && !force) {
        return;
      }
      this.setActive(isContent);
      var beforeArgs = {
        cancel: false,
        byKey: false,
        byClick: !isNullOrUndefined(e.target),
        clickArgs: e
      };
      this.parent.notify(beforeCellFocused, beforeArgs);
      if (beforeArgs.cancel || closest(e.target, ".e-inline-edit") && !this.parent.editSettings.showAddNewRow && this.parent.editSettings.showAddNewRow && !this.parent.element.querySelector(".e-editedrow")) {
        return;
      }
      this.setActive(isContent);
      if (this.getContent()) {
        var returnVal = this.getContent().onClick(e, force);
        if (returnVal === false) {
          return;
        }
        this.focus();
        if (this.currentInfo.element.classList.contains("e-rowcell") && e.type && e.type === "click") {
          addClass([this.currentInfo.element], ["e-focused", "e-focus"]);
        }
      }
    };
    FocusStrategy2.prototype.handleFilterNavigation = function(e, inputSelector, buttonSelector) {
      if (e.target === document.querySelector(inputSelector) && e.key === "Tab" && e.shiftKey) {
        e.preventDefault();
        document.querySelector(buttonSelector).focus();
      } else if (e.target === document.querySelector(buttonSelector) && e.key === "Tab" && !e.shiftKey && document.activeElement === document.querySelector(buttonSelector)) {
        e.preventDefault();
        document.querySelector(inputSelector).focus();
      }
    };
    FocusStrategy2.prototype.onKeyPress = function(e) {
      if (this.parent.allowPaging) {
        var pagerElement = this.parent.pagerModule.pagerObj.element;
        var focusablePagerElements = this.parent.pagerModule.pagerObj.getFocusablePagerElements(pagerElement, []);
        if (this.parent.childGrid && !parentsUntil(e.target, "e-gridpager") && this.allowToPaging(e) && focusablePagerElements.length) {
          focusablePagerElements[0].tabIndex = 0;
        }
        if (this.parent.pagerModule.pagerObj.checkPagerHasFocus()) {
          if (e.action === "shiftTab" && focusablePagerElements.length && focusablePagerElements[0] === e.target) {
            this.setActive(true);
            var lastHeaderCellIndex = [this.active.matrix.matrix.length - 1, this.active.matrix.matrix[this.active.matrix.matrix.length - 1].length - 1];
            if (this.active.matrix.matrix[lastHeaderCellIndex[0]][lastHeaderCellIndex[1]] === 0) {
              lastHeaderCellIndex = findCellIndex(this.active.matrix.matrix, lastHeaderCellIndex, false);
            }
            this.active.matrix.current = this.parent.editSettings.mode === "Batch" ? this.isValidBatchEditCell(lastHeaderCellIndex) ? lastHeaderCellIndex : this.findBatchEditCell(lastHeaderCellIndex, false) : lastHeaderCellIndex;
            e.preventDefault();
            this.focus(e);
            return;
          }
          if (!(e.action === "tab" && this.parent.element.classList.contains("e-childgrid") && (!this.parent.pageSettings.pageSizes && focusablePagerElements.length && focusablePagerElements[focusablePagerElements.length - 1] === e.target || this.parent.pagerModule.pagerObj.getDropDownPage() === e.target))) {
            this.parent.pagerModule.pagerObj.changePagerFocus(e);
            return;
          } else {
            var parentCell = parentsUntil(this.parent.element, "e-detailcell");
            removeClass([this.parent.element], ["e-focus"]);
            removeClass([parentCell], ["e-focused"]);
            parentCell.tabIndex = -1;
          }
        }
        if (this.parent.pagerModule.pagerObj.element.tabIndex === 0 && (e.keyCode === 38 || e.shiftKey && e.keyCode === 9)) {
          e.preventDefault();
          this.focus(e);
          return;
        } else if (this.parent.pagerModule.pagerObj.element.tabIndex === 0 && e.keyCode === 9) {
          e.preventDefault();
          this.parent.pagerModule.pagerObj.setPagerFocus();
          return;
        }
        if (this.parent.pagerModule.pagerObj.checkFirstPagerFocus()) {
          var lastRow = this.getContent().matrix.rows;
          var lastColumn = this.getContent().matrix.columns;
          this.getContent().matrix.current = [lastRow, lastColumn];
        }
      }
      if (this.parent.filterSettings.type === "Excel") {
        this.handleFilterNavigation(e, ".e-excelfilter .e-menu-item:not(.e-disabled)", ".e-excelfilter .e-footer-content button:nth-child(2)");
      }
      if (this.parent.filterSettings.type === "CheckBox") {
        this.handleFilterNavigation(e, ".e-searchinput.e-input", ".e-checkboxfilter .e-footer-content button:nth-child(2)");
      }
      if (this.parent.filterSettings.type === "Menu") {
        this.handleFilterNavigation(e, ".e-flmenu .e-input-group.e-popup-flmenu", ".e-flmenu .e-footer-content button:nth-child(2)");
      }
      if (this.skipOn(e)) {
        return;
      }
      if (e.target && parentsUntil(e.target, "e-gridcontent")) {
        var rows = [].slice.call(this.parent.getContentTable().rows);
        var lastCell = rows[rows.length - 1].lastElementChild;
        if (e.target === lastCell) {
          this.setActive(true);
          this.setLastContentCellActive();
        }
      }
      if (e.action === "shiftTab" && e.target && (e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea"))) {
        if (e.target === this.parent.element) {
          if (this.parent.element.classList.contains("e-childgrid")) {
            this.focusOutFromChildGrid(e);
          }
          return;
        }
        if (parentsUntil(e.target, "e-groupdroparea")) {
          if (this.parent.element.classList.contains("e-childgrid")) {
            e.preventDefault();
            this.parent.element.focus();
          }
          return;
        }
        if (parentsUntil(e.target, "e-toolbar")) {
          if (this.parent.allowGrouping && this.parent.groupSettings.showDropArea) {
            var groupModule = this.parent.groupModule;
            var focusableGroupedItems = groupModule.getFocusableGroupedItems();
            e.preventDefault();
            if (focusableGroupedItems.length > 0) {
              focusableGroupedItems[focusableGroupedItems.length - 1].focus();
            } else {
              groupModule.element.focus();
            }
          } else if (this.parent.element.classList.contains("e-childgrid")) {
            e.preventDefault();
            this.parent.element.focus();
          }
          return;
        }
      }
      var focusFirstHeaderCell = false;
      if (e.action === "tab" && e.target && (e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea"))) {
        if (this.parent.allowGrouping && this.parent.groupSettings.showDropArea && (e.target === this.parent.element || e.target.classList.contains("e-groupdroparea"))) {
          var groupModule = this.parent.groupModule;
          var focusableGroupedItems = groupModule.getFocusableGroupedItems();
          if (focusableGroupedItems.length > 0) {
            e.preventDefault();
            focusableGroupedItems[0].focus();
            return;
          }
          if (!e.target.classList.contains("e-groupdroparea")) {
            e.preventDefault();
            groupModule.element.focus();
            return;
          }
        }
        if ((this.parent.toolbar || this.parent.toolbarTemplate) && (e.target === this.parent.element || parentsUntil(e.target, "e-groupdroparea") || e.target.classList.contains("e-toolbar"))) {
          var toolbarElement = this.parent.toolbarModule.element;
          var focusableToolbarItems = this.parent.toolbarModule.getFocusableToolbarItems();
          if (focusableToolbarItems.length > 0) {
            e.preventDefault();
            focusableToolbarItems[0].querySelector(".e-toolbar-item-focus,.e-btn,.e-input").focus();
            return;
          }
          if (!e.target.classList.contains("e-toolbar")) {
            e.preventDefault();
            toolbarElement.focus();
            return;
          }
        }
        if (e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea")) {
          focusFirstHeaderCell = true;
        }
      }
      if (focusFirstHeaderCell) {
        if (this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length === this.parent.columns.length) {
          this.setActive(true);
        } else {
          this.setActive(false);
        }
        this.active.matrix.current = [0, -1];
      }
      this.activeKey = e.action;
      var beforeArgs = {
        cancel: false,
        byKey: true,
        byClick: false,
        keyArgs: e
      };
      this.parent.notify(beforeCellFocused, beforeArgs);
      if (beforeArgs.cancel) {
        return;
      }
      var bValue = this.getContent().matrix.current;
      var prevBatchValue = this.active && this.active.matrix.current ? [this.active.matrix.current[0], this.active.matrix.current[1]] : void 0;
      this.currentInfo.outline = true;
      var swapInfo = this.getContent().jump(e.action, bValue);
      this.swap = swapInfo;
      if (swapInfo.swap && !(this.parent.editSettings.mode === "Batch" && (e.action === "tab" || e.action === "shiftTab"))) {
        this.setActive(!swapInfo.toHeader);
        this.getContent().matrix.current = this.getContent().getNextCurrent(bValue, swapInfo, this.active, e.action);
        this.prevIndexes = {};
      }
      this.setActiveByKey(e.action, this.getContent());
      var returnVal = this.content.lastIdxCell ? false : this.getContent().onKeyPress(e);
      if (e.target && parentsUntil(e.target, "e-gridheader")) {
        if (e.action === "tab" && bValue.toString() === this.active.matrix.current.toString()) {
          var nextHeaderCellIndex = findCellIndex(this.active.matrix.matrix, this.active.matrix.current, true);
          var lastHeaderCellIndex = [this.active.matrix.matrix.length - 1, this.active.matrix.matrix[this.active.matrix.matrix.length - 1].length - 1];
          if (this.active.matrix.matrix[lastHeaderCellIndex[0]][lastHeaderCellIndex[1]] === 0) {
            lastHeaderCellIndex = findCellIndex(this.active.matrix.matrix, lastHeaderCellIndex, false);
          }
          if (this.active.matrix.current.toString() === lastHeaderCellIndex.toString() && this.content.matrix.matrix.length) {
            returnVal = true;
            this.setActive(true);
            var firstContentCellIndex = [0, 0];
            if (this.parent.allowPaging && this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer")) {
              this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer").setAttribute("aria-hidden", "true");
            }
            if (this.active.matrix.matrix[firstContentCellIndex[0]][firstContentCellIndex[1]] === 0) {
              firstContentCellIndex = findCellIndex(this.active.matrix.matrix, [0, 0], true);
            }
            this.active.matrix.current = this.parent.editSettings.mode === "Batch" ? this.isValidBatchEditCell(firstContentCellIndex) ? firstContentCellIndex : this.findBatchEditCell(firstContentCellIndex, true) : firstContentCellIndex;
          } else if (this.active.matrix.current.toString() !== nextHeaderCellIndex.toString()) {
            this.active.matrix.current = nextHeaderCellIndex;
          }
        }
        if (e.action === "shiftTab" && bValue.toString() === this.active.matrix.current.toString()) {
          var previousCellIndex = findCellIndex(this.active.matrix.matrix, this.active.matrix.current, false);
          if (previousCellIndex.toString() === this.active.matrix.current.toString()) {
            this.focusOutFromHeader(e);
            return;
          }
          if (this.active.matrix.current.toString() !== previousCellIndex.toString() && !returnVal) {
            returnVal = true;
            this.active.matrix.current = previousCellIndex;
          }
        }
      }
      if (e.target && parentsUntil(e.target, "e-gridcontent")) {
        if (this.parent.allowPaging && this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer")) {
          this.parent.pagerModule.pagerObj.element.querySelector(".e-pagercontainer").removeAttribute("aria-hidden");
        }
        if (this.parent.editSettings.mode === "Batch" && (e.action === "tab" || e.action === "shiftTab")) {
          this.active.matrix.current = this.findBatchEditCell(prevBatchValue, e.action === "tab" ? true : false);
          if (e.action === "tab" && prevBatchValue.toString() === this.active.matrix.current.toString()) {
            this.parent.editModule.editModule.addBatchRow = true;
          }
        }
        if (e.action === "shiftTab" && bValue.toString() === this.active.matrix.current.toString()) {
          if (this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length === this.parent.columns.length) {
            this.focusOutFromHeader(e);
            return;
          }
          var firstContentCellIndex = [0, 0];
          if (this.active.matrix.matrix[firstContentCellIndex[0]][firstContentCellIndex[1]] === 0) {
            firstContentCellIndex = findCellIndex(this.active.matrix.matrix, [0, 0], true);
          }
          if (!returnVal && (firstContentCellIndex.toString() === this.active.matrix.current.toString() || this.parent.editSettings.mode === "Batch" && prevBatchValue.toString() === this.active.matrix.current.toString())) {
            returnVal = true;
            this.setActive(false);
            this.setLastContentCellActive();
          }
        }
      }
      if (returnVal === false) {
        this.clearIndicator();
        if (e.action === "shiftTab" && bValue.toString() === [0, 0].toString()) {
          this.parent.element.tabIndex = -1;
        }
        if (this.parent.allowPaging && !this.parent.pagerModule.pagerObj.checkPagerHasFocus() && this.allowToPaging(e) && bValue.toString() !== [0, 0].toString()) {
          e.preventDefault();
          if (e.keyCode === 40) {
            this.parent.pagerModule.pagerObj.setPagerContainerFocus();
            return;
          } else if (e.keyCode === 9) {
            this.parent.pagerModule.pagerObj.setPagerFocus();
            return;
          }
        }
        if (this.parent.element.classList.contains("e-childgrid")) {
          this.focusOutFromChildGrid(e);
        }
        return;
      }
      e.preventDefault();
      this.focus(e);
    };
    FocusStrategy2.prototype.isValidBatchEditCell = function(cellIndex) {
      var cell = this.active.getTable().rows[cellIndex[0]].cells[cellIndex[1]];
      var tr = closest(cell, "tr");
      var cellColIndex = parseInt(cell.getAttribute("data-colindex"), 10);
      var cellCol = this.parent.getColumns()[parseInt(cellColIndex.toString(), 10)];
      if (this.active.matrix.matrix[cellIndex[0]][cellIndex[1]] === 1 && (!tr.classList.contains("e-row") || (tr.classList.contains("e-insertedrow") || !cellCol.isPrimaryKey) && cellCol.allowEditing)) {
        return true;
      }
      return false;
    };
    FocusStrategy2.prototype.findBatchEditCell = function(currentCellIndex, next, limitRow) {
      var cellIndex = currentCellIndex;
      var tempCellIndex = currentCellIndex;
      var cellIndexObtain = false;
      while (!cellIndexObtain) {
        var prevTempCellIndex = tempCellIndex;
        tempCellIndex = findCellIndex(this.active.matrix.matrix, tempCellIndex, next);
        if (prevTempCellIndex.toString() === tempCellIndex.toString() || limitRow && prevTempCellIndex[0] !== tempCellIndex[0]) {
          cellIndexObtain = true;
          continue;
        }
        if (this.isValidBatchEditCell(tempCellIndex)) {
          cellIndex = tempCellIndex;
          cellIndexObtain = true;
        }
      }
      return cellIndex;
    };
    FocusStrategy2.prototype.setLastContentCellActive = function() {
      var lastContentCellIndex = [this.active.matrix.matrix.length - 1, this.active.matrix.matrix[this.active.matrix.matrix.length - 1].length - 1];
      if (this.active.matrix.matrix[lastContentCellIndex[0]][lastContentCellIndex[1]] === 0) {
        lastContentCellIndex = findCellIndex(this.active.matrix.matrix, lastContentCellIndex, false);
      }
      this.active.matrix.current = lastContentCellIndex;
    };
    FocusStrategy2.prototype.focusOutFromChildGrid = function(e) {
      var parentTable = parentsUntil(this.parent.element, "e-table");
      var parentGrid = parentsUntil(parentTable, "e-grid").ej2_instances[0];
      var parentCell = parentsUntil(this.parent.element, "e-detailcell");
      var uid2 = parentsUntil(this.parent.element, "e-detailrow").getAttribute("data-uid");
      var parentRows = [].slice.call(parentGrid.getContentTable().rows);
      var parentRowIndex = parentRows.map(function(m) {
        return m.getAttribute("data-uid");
      }).indexOf(uid2);
      if (e.action === "tab" && parentRowIndex >= parentRows.length - 1) {
        return;
      }
      removeClass([this.parent.element], ["e-focus"]);
      removeClass([parentCell], ["e-focused"]);
      parentCell.tabIndex = -1;
      e.preventDefault();
      var nextFocusCell;
      parentGrid.focusModule.removeFocus();
      if (e.action === "shiftTab") {
        var previousRow = parentRows[parentRowIndex - 1];
        var rowCells = previousRow.cells;
        for (var i = rowCells.length - 1; i >= 0; i--) {
          nextFocusCell = rowCells[parseInt(i.toString(), 10)];
          if (!nextFocusCell.classList.contains("e-hide")) {
            parentGrid.focusModule.active.matrix.current = [parentRowIndex - 1, i];
            break;
          }
        }
      } else {
        nextFocusCell = parentRows[parentRowIndex + 1].cells[0];
        parentGrid.focusModule.active.matrix.current = [parentRowIndex + 1, 0];
      }
      parentGrid.focusModule.currentInfo.element = nextFocusCell;
      parentGrid.focusModule.currentInfo.elementToFocus = nextFocusCell;
      addClass([nextFocusCell], ["e-focused", "e-focus"]);
      nextFocusCell.tabIndex = 0;
      nextFocusCell.focus();
    };
    FocusStrategy2.prototype.focusOutFromHeader = function(e) {
      this.removeFocus();
      if (this.parent.toolbar || this.parent.toolbarTemplate) {
        var toolbarElement = this.parent.toolbarModule.element;
        var focusableToolbarItems = this.parent.toolbarModule.getFocusableToolbarItems();
        e.preventDefault();
        if (focusableToolbarItems.length > 0) {
          focusableToolbarItems[focusableToolbarItems.length - 1].querySelector(".e-toolbar-item-focus,.e-btn,.e-input").focus();
        } else {
          toolbarElement.focus();
        }
        return;
      }
      if (this.parent.allowGrouping && this.parent.groupSettings.showDropArea) {
        var groupModule = this.parent.groupModule;
        var focusableGroupedItems = groupModule.getFocusableGroupedItems();
        e.preventDefault();
        if (focusableGroupedItems.length > 0) {
          focusableGroupedItems[focusableGroupedItems.length - 1].focus();
        } else {
          groupModule.element.focus();
        }
        return;
      }
      if (this.parent.element.classList.contains("e-childgrid")) {
        e.preventDefault();
        this.parent.element.focus();
      }
    };
    FocusStrategy2.prototype.allowToPaging = function(e) {
      if (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.allowAdding && e.keyCode !== 40) {
        return false;
      }
      return true;
    };
    FocusStrategy2.prototype.skipOn = function(e) {
      var target = e.target;
      if (!target) {
        return false;
      }
      if (!this.parent.isEdit && target && target.closest(".e-unboundcell") && this.currentInfo.skipAction && (e.action === "shiftTab" && this.commandColumnFocusElement(target.closest(".e-unboundcell"), false) === target || e.action === "tab" && this.commandColumnFocusElement(target.closest(".e-unboundcell"), true) === target)) {
        return this.currentInfo.skipAction = false;
      }
      if (this.currentInfo.skipAction) {
        this.clearIndicator();
        return true;
      }
      if (["pageUp", "pageDown", "altDownArrow"].indexOf(e.action) > -1) {
        this.clearIndicator();
        return true;
      }
      if (this.parent.allowGrouping) {
        var focusableGroupedItems = this.parent.groupModule.getFocusableGroupedItems();
        if (parentsUntil(e.target, "e-groupheadercell") && !(e.target === focusableGroupedItems[0] && e.action === "shiftTab" || e.target === focusableGroupedItems[focusableGroupedItems.length - 1] && e.action === "tab")) {
          return true;
        }
      }
      if (this.parent.toolbar || this.parent.toolbarTemplate) {
        var toolbarElement = this.parent.toolbarModule.element;
        var focusableToolbarItems = toolbarElement.querySelectorAll(".e-toolbar-item:not(.e-overlay):not(.e-hidden)");
        if (parentsUntil(e.target, "e-toolbar-item") && !(focusableToolbarItems.length > 0 && (parentsUntil(e.target, "e-toolbar-item") === focusableToolbarItems[0] && e.action === "shiftTab" || parentsUntil(e.target, "e-toolbar-item") === focusableToolbarItems[focusableToolbarItems.length - 1] && e.action === "tab"))) {
          return true;
        }
      }
      var th = closest(target, "th") && !closest(target, "th").tabIndex;
      if (e.target.classList.contains("e-filterbaroperator") && (e.keyCode === 13 || e.keyCode === 27)) {
        var inputTarget = closest(e.target, ".e-filterbarcell");
        inputTarget.querySelector("input").focus();
      }
      var addNewRow = this.parent.editSettings.showAddNewRow && closest(document.activeElement, ".e-addedrow") !== null;
      if (th && closest(document.activeElement, ".e-filterbarcell") !== null || addNewRow) {
        this.removeFocus();
      }
      var filterCell = closest(document.activeElement, ".e-filterbarcell") !== null;
      if (this.parent.enableHeaderFocus && filterCell) {
        var matrix = this.active.matrix;
        var current = matrix.current;
        filterCell = matrix.matrix[current[0]].lastIndexOf(1) !== current[1];
      }
      if (this.parent.isEdit && (e.action === "tab" || e.action === "shiftTab") && this.parent.editSettings.mode === "Normal" && !this.parent.editSettings.showAddNewRow && !isNullOrUndefined(parentsUntil(target, "e-addedrow"))) {
        var inputElements = this.parent.editModule.formObj.element.querySelectorAll("input.e-field:not(.e-disabled),button:not(.e-hide)");
        var inputTarget = target.classList.contains("e-ddl") ? target.querySelector("input") : target;
        var firstEditCell = e.action === "tab" && inputTarget === inputElements[inputElements.length - 1];
        var lastEditCell = e.action === "shiftTab" && inputTarget === inputElements[0];
        if (firstEditCell || lastEditCell) {
          e.preventDefault();
          var focusElement = inputElements[firstEditCell ? 0 : inputElements.length - 1];
          focusElement = focusElement.parentElement.classList.contains("e-ddl") ? focusElement.parentElement : focusElement;
          focusElement.focus();
        }
      }
      return e.action === "delete" || this.parent.editSettings.mode !== "Batch" && (this.parent.isEdit && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && (!isNullOrUndefined(this.parent.element.querySelector(".e-editedrow")) || !isNullOrUndefined(parentsUntil(target, "e-addedrow")) && !isNullOrUndefined(closest(e.target, "input")) && !isNullOrUndefined(document.querySelector(".e-popup-open")) || !isNullOrUndefined(parentsUntil(target, "e-addedrow")) && target && !target.querySelector(".e-cancel-icon") && !isNullOrUndefined(parentsUntil(target, "e-unboundcell")))) || ["insert", "f2"].indexOf(e.action) > -1) || filterCell && this.parent.enableHeaderFocus || (filterCell || addNewRow) && e.action !== "tab" && e.action !== "shiftTab" || closest(document.activeElement, "#" + this.parent.element.id + "_searchbar") !== null && ["enter", "leftArrow", "rightArrow", "shiftLeft", "shiftRight", "ctrlPlusA"].indexOf(e.action) > -1 || closest(target, "." + gridContent) === null && closest(target, "." + gridHeader) === null && !(e.target === this.parent.element || parentsUntil(e.target, "e-toolbar") || parentsUntil(e.target, "e-groupdroparea")) || e.action === "space" && !target.classList.contains(gridChkBox) && closest(target, "." + gridChkBox) === null && closest(target, ".e-headerchkcelldiv") === null || closest(target, ".e-filter-popup") !== null;
    };
    FocusStrategy2.prototype.focusVirtualElement = function(e) {
      var _this = this;
      if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {
        var data = {
          virtualData: {},
          isAdd: false,
          isCancel: false
        };
        this.parent.notify(getVirtualData, data);
        var isKeyFocus = this.actions.some(function(value) {
          return value === _this.activeKey;
        });
        var isSelected = this.parent.contentModule ? this.parent.contentModule.selectedRowIndex > -1 : false;
        if (data.isAdd || Object.keys(data.virtualData).length || isKeyFocus || data.isCancel || isSelected) {
          this.parent.notify(resetVirtualFocus, {
            isCancel: false
          });
          data.isCancel = false;
          this.parent.contentModule.selectedRowIndex = -1;
          if (isKeyFocus) {
            this.activeKey = this.empty;
            this.parent.notify("virtaul-key-handler", e);
          }
          this.currentInfo.elementToFocus.focus({
            preventScroll: true
          });
        } else {
          if (this.isVirtualScroll || this.isInfiniteScroll) {
            this.currentInfo.elementToFocus.focus({
              preventScroll: true
            });
          } else {
            this.currentInfo.elementToFocus.focus();
          }
        }
      }
      this.isVirtualScroll = this.isInfiniteScroll = false;
    };
    FocusStrategy2.prototype.getFocusedElement = function() {
      return this.currentInfo.elementToFocus;
    };
    FocusStrategy2.prototype.getContent = function() {
      return this.active || this.content;
    };
    FocusStrategy2.prototype.setActive = function(content2) {
      this.active = content2 ? this.content : this.header;
    };
    FocusStrategy2.prototype.setFocusedElement = function(element, e) {
      var _this = this;
      this.currentInfo.elementToFocus = element;
      setTimeout(function() {
        if (!isNullOrUndefined(_this.currentInfo.elementToFocus)) {
          if (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) {
            _this.focusVirtualElement(e);
          } else if (isNullOrUndefined(_this.parent.element.querySelector(".e-flmenu")) || parentsUntil(document.activeElement, "e-flmenu-valuediv") !== _this.parent.element.querySelector(".e-flmenu-valuediv")) {
            _this.currentInfo.elementToFocus.focus();
          }
        }
      }, 0);
    };
    FocusStrategy2.prototype.focus = function(e) {
      this.parent.notify(virtaulCellFocus, e);
      this.removeFocus();
      this.addFocus(this.getContent().getFocusInfo(), e);
    };
    FocusStrategy2.prototype.removeFocus = function(e) {
      if (!this.currentInfo.element) {
        return;
      }
      if (this.parent.isReact && !this.parent.isEdit && this.currentInfo.element.classList.contains("e-rowcell") && !this.currentInfo.element.parentElement && !(this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length) && this.parent.getRowByIndex(this.prevIndexes.rowIndex)) {
        var cellElem = this.parent.getCellFromIndex(this.prevIndexes.rowIndex, this.prevIndexes.cellIndex);
        this.currentInfo.element = cellElem ? cellElem : this.currentInfo.element;
      }
      removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ["e-focused", "e-focus"]);
      this.currentInfo.element.tabIndex = -1;
    };
    FocusStrategy2.prototype.addOutline = function() {
      var info = this.getContent().getFocusInfo();
      if (info.element) {
        addClass([info.element], ["e-focused"]);
        addClass([info.elementToFocus], ["e-focus"]);
      }
    };
    FocusStrategy2.prototype.focusHeader = function() {
      this.setActive(false);
      this.resetFocus();
    };
    FocusStrategy2.prototype.focusContent = function() {
      this.setActive(true);
      this.resetFocus();
    };
    FocusStrategy2.prototype.resetFocus = function() {
      var current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());
      this.getContent().matrix.select(current[0], current[1]);
      this.focus();
    };
    FocusStrategy2.prototype.addFocus = function(info, e) {
      this.currentInfo = info;
      this.currentInfo.outline = info.outline && (!isNullOrUndefined(e) || this.isVirtualScroll);
      if (this.isInfiniteScroll) {
        this.currentInfo.outline = true;
      }
      if (!info.element) {
        return;
      }
      var isFocused = info.elementToFocus.classList.contains("e-focus");
      if (isFocused) {
        return;
      }
      if (this.currentInfo.outline) {
        addClass([info.element], ["e-focused"]);
      }
      addClass([info.elementToFocus], ["e-focus"]);
      info.element.tabIndex = 0;
      if (!isFocused) {
        this.setFocusedElement(info.elementToFocus, e);
      }
      this.parent.notify(cellFocused, {
        element: info.elementToFocus,
        parent: info.element,
        indexes: this.getContent().matrix.current,
        byKey: !isNullOrUndefined(e),
        byClick: isNullOrUndefined(e),
        keyArgs: e,
        isJump: this.swap.swap,
        container: this.getContent().getInfo(e),
        outline: !isNullOrUndefined(e),
        swapInfo: this.swap
      });
      var _a = this.getContent().matrix.current, rowIndex = _a[0], cellIndex = _a[1];
      this.prevIndexes = {
        rowIndex,
        cellIndex
      };
      this.focusedColumnUid = this.parent.getColumnByIndex(cellIndex).uid;
      this.focusByClick = false;
    };
    FocusStrategy2.prototype.refreshMatrix = function(content2) {
      var _this = this;
      return function(e) {
        if (content2 && !_this.content) {
          _this.content = new ContentFocus(_this.parent);
        }
        if (!content2 && !_this.header) {
          _this.header = new HeaderFocus(_this.parent);
        }
        var cFocus = content2 ? _this.content : _this.header;
        var frozenRow = _this.parent.frozenRows;
        var batchLen = 0;
        if (frozenRow && _this.parent.editSettings.mode === "Batch") {
          batchLen = _this.parent.getHeaderContent().querySelectorAll(".e-insertedrow").length + _this.parent.getHeaderContent().querySelectorAll(".e-hiddenrow").length;
        }
        if (!isNullOrUndefined(_this.parent.groupSettings.columns) && _this.parent.groupSettings.columns.length && frozenRow && content2) {
          frozenRow = 0;
          for (var i = 0; i < e.rows.length; i++) {
            frozenRow++;
            if (e.rows[parseInt(i.toString(), 10)].index + 1 === _this.parent.frozenRows) {
              break;
            }
          }
          _this.groupedFrozenRow = frozenRow;
        }
        var rows = content2 ? e.rows.slice(frozenRow + batchLen) : e.rows;
        var updateRow = content2 ? e.rows.slice(0, frozenRow + batchLen) : e.rows;
        if (_this.parent.isCollapseStateEnabled() && content2) {
          rows = rows.filter(function(x) {
            return x.visible !== false;
          });
        }
        var isRowTemplate = !isNullOrUndefined(_this.parent.rowTemplate);
        if (frozenRow && (_this.parent.editSettings.mode === "Batch" && content2 && (e.name === "batchDelete" || e.name === "batchAdd" || e.name === "batchCancel" || e.args && e.args.requestType === "batchsave") || e.args && (e.args.requestType === "delete" || e.args.requestType === "save"))) {
          var matrixcs = _this.header.matrix.matrix;
          var hdrLen = _this.parent.headerModule.rows.length;
          matrixcs.splice(hdrLen, matrixcs.length - hdrLen);
        }
        var matrix = cFocus.matrix.generate(updateRow, cFocus.selector, isRowTemplate);
        cFocus.matrix.generate(rows, cFocus.selector, isRowTemplate);
        var isScroll = _this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling;
        if (_this.parent.editSettings.showAddNewRow && content2 && _this.header && _this.header.matrix && (!isScroll || isScroll && _this.parent.isAddNewRow)) {
          var tempMatrix = _this.header.matrix.matrix;
          var lastRowHeaderIdx = _this.parent.allowFiltering && _this.parent.filterSettings.type === "FilterBar" ? 2 : 1;
          cFocus.matrix.rows = _this.parent.frozenRows && _this.parent.editSettings.newRowPosition === "Top" ? cFocus.matrix.rows : ++cFocus.matrix.rows;
          if (_this.parent.editSettings.newRowPosition === "Top") {
            (_this.parent.frozenRows || isScroll ? matrix : cFocus.matrix.matrix).unshift(_this.refreshAddNewRowMatrix(tempMatrix[tempMatrix.length - lastRowHeaderIdx]));
          } else {
            cFocus.matrix.matrix.push(_this.refreshAddNewRowMatrix(tempMatrix[tempMatrix.length - lastRowHeaderIdx]));
          }
          _this.parent.isAddNewRow = false;
        }
        if (!(_this.parent.isFrozenGrid() && e.args && (e.args.requestType === "sorting" || e.args.requestType === "batchsave" || e.args.requestType === "paging")) || frozenRow && _this.parent.editSettings.mode === "Batch" && content2 && (e.name === "batchDelete" || e.name === "batchAdd" || e.name === "batchCancel" || e.args.requestType === "batchsave")) {
          cFocus.generateRows(updateRow, {
            matrix,
            handlerInstance: _this.header
          });
        }
        if (!Browser.isDevice && e && e.args) {
          if (!_this.focusByClick && e.args.requestType === "paging" && !_this.parent.pagerModule.pagerObj.checkPagerHasFocus()) {
            _this.skipFocus = false;
            _this.parent.element.focus();
          }
          if (e.args.requestType === "grouping") {
            _this.skipFocus = true;
          }
        }
        if (e && e.args && e.args.requestType === "virtualscroll") {
          if (_this.currentInfo.uid) {
            var index_1;
            var bool = e.rows.some(function(row2, i2) {
              index_1 = i2;
              return row2.uid === _this.currentInfo.uid;
            });
            if (bool) {
              _this.content.matrix.current[0] = index_1;
              _this.content.matrix.current[1] = _this.parent.getColumnIndexByUid(_this.focusedColumnUid) || 0;
              var isGroup = _this.parent.allowGrouping && _this.parent.groupSettings.columns.length ? true : false;
              if (isGroup) {
                _this.content.matrix.current[1] = _this.prevIndexes.cellIndex;
                if (_this.virtualSelectionInfo.isPending) {
                  _this.content.matrix.current[0] = _this.virtualSelectionInfo.direction === "downArrow" ? _this.content.matrix.current[0] + 1 : _this.content.matrix.current[0] - 1;
                }
              }
              var focusElement = _this.getContent().getFocusInfo().elementToFocus;
              if (focusElement) {
                var cellPosition = focusElement.getBoundingClientRect();
                var gridPosition = _this.parent.element.getBoundingClientRect();
                if (cellPosition.top >= 0 && cellPosition.left >= 0 && cellPosition.right <= Math.min(gridPosition.right, window.innerWidth || document.documentElement.clientWidth) && cellPosition.bottom <= Math.min(gridPosition.bottom, window.innerHeight || document.documentElement.clientHeight) || isGroup) {
                  _this.isVirtualScroll = true;
                  _this.focus(isGroup && _this.virtualSelectionInfo.isPending ? _this.virtualSelectionInfo.event : void 0);
                }
              }
            }
          } else if (e.args.focusElement && e.args.focusElement.classList.contains("e-filtertext")) {
            var focusElement = _this.parent.element.querySelector("#" + e.args.focusElement.id);
            if (focusElement) {
              focusElement.focus();
            }
          }
          _this.virtualSelectionInfo = {};
        }
        if (e && e.args && e.args.requestType === "infiniteScroll") {
          _this.isInfiniteScroll = true;
        }
      };
    };
    FocusStrategy2.prototype.refreshAddNewRowMatrix = function(matrix) {
      var cols = this.parent.getColumns();
      var indent = this.parent.getIndentCount();
      for (var i = indent; i < matrix.length - 1; i++) {
        if (cols[i - indent] && cols[i - indent].visible && cols[i - indent].allowEditing) {
          matrix[parseInt(i.toString(), 10)] = 1;
        } else {
          matrix[parseInt(i.toString(), 10)] = 0;
        }
      }
      return matrix;
    };
    FocusStrategy2.prototype.addEventListener = function() {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.add(this.parent.element, "mousedown", this.focusCheck, this);
      EventHandler.add(this.parent.element, "touchstart", this.focusCheck, this);
      EventHandler.add(this.parent.element, "focus", this.onFocus, this);
      this.parent.element.addEventListener("focus", this.passiveHandler = function(e) {
        return _this.passiveFocus(e);
      }, true);
      EventHandler.add(this.parent.element, "focusout", this.onBlur, this);
      this.evtHandlers = [{
        event: keyPressed,
        handler: this.onKeyPress
      }, {
        event: click,
        handler: this.onClick
      }, {
        event: contentReady,
        handler: this.refMatrix
      }, {
        event: partialRefresh,
        handler: this.refMatrix
      }, {
        event: refreshExpandandCollapse,
        handler: this.refMatrix
      }, {
        event: showAddNewRowFocus,
        handler: this.showAddNewRowFocus
      }, {
        event: headerRefreshed,
        handler: this.refreshMatrix()
      }, {
        event: closeEdit,
        handler: this.restoreFocus
      }, {
        event: restoreFocus,
        handler: this.restoreFocus
      }, {
        event: "start-edit",
        handler: this.clearIndicator
      }, {
        event: "start-add",
        handler: this.clearIndicator
      }, {
        event: "sorting-complete",
        handler: this.restoreFocus
      }, {
        event: "filtering-complete",
        handler: this.filterfocus
      }, {
        event: "custom-filter-close",
        handler: this.filterfocus
      }, {
        event: "grouping-complete",
        handler: this.restoreFocusWithAction
      }, {
        event: "ungrouping-complete",
        handler: this.restoreFocusWithAction
      }, {
        event: batchAdd,
        handler: this.refMatrix
      }, {
        event: batchCancel,
        handler: this.refMatrix
      }, {
        event: batchDelete,
        handler: this.refMatrix
      }, {
        event: detailDataBound,
        handler: this.refMatrix
      }, {
        event: onEmpty,
        handler: this.refMatrix
      }, {
        event: cellFocused,
        handler: this.internalCellFocus
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    FocusStrategy2.prototype.showAddNewRowFocus = function() {
      if (this.parent.editSettings.showAddNewRow) {
        var startIdx = this.parent.editSettings.newRowPosition === "Top" ? 0 : this.content.matrix.matrix.length - 1;
        var startCellIdx = this.parent.getIndentCount();
        if (this.parent.editSettings.newRowPosition === "Top" && (this.parent.frozenRows || this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
          var headrIdx = this.header.matrix.matrix.length - (this.groupedFrozenRow ? this.groupedFrozenRow : this.parent.frozenRows);
          startCellIdx = this.findNextCellFocus(this.header.matrix.matrix[headrIdx - 1], startCellIdx);
          this.header.matrix.current = [headrIdx - 1, startCellIdx];
          this.active = this.header;
        } else {
          startCellIdx = this.findNextCellFocus(this.content.matrix.matrix[parseInt(startIdx.toString(), 10)], startCellIdx);
          this.content.matrix.current = [startIdx, startCellIdx];
          this.active = this.content;
        }
        var addedrow = this.parent.element.querySelector(".e-addedrow");
        if (addedrow && addedrow.querySelectorAll("tr") && addedrow.querySelector("tr").cells[parseInt(startCellIdx.toString(), 10)].querySelector("input")) {
          addedrow.querySelector("tr").cells[parseInt(startCellIdx.toString(), 10)].querySelector("input").select();
        }
      }
    };
    FocusStrategy2.prototype.findNextCellFocus = function(matrix, cellIndex) {
      for (var i = cellIndex; i < matrix.length; i++) {
        if (matrix[parseInt(i.toString(), 10)] === 1) {
          return i;
        }
      }
      return cellIndex;
    };
    FocusStrategy2.prototype.filterfocus = function() {
      if (this.parent.filterSettings.type !== "FilterBar") {
        this.restoreFocus();
      }
    };
    FocusStrategy2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(this.parent.element, "mousedown", this.focusCheck);
      EventHandler.remove(this.parent.element, "touchstart", this.focusCheck);
      EventHandler.remove(this.parent.element, "focus", this.onFocus);
      EventHandler.remove(this.parent.element, "focusout", this.onBlur);
      this.parent.element.removeEventListener("focus", this.passiveHandler, true);
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    FocusStrategy2.prototype.destroy = function() {
      this.removeEventListener();
    };
    FocusStrategy2.prototype.restoreFocus = function() {
      var groupModule = this.parent.groupModule;
      if (this.parent.allowGrouping && groupModule && (groupModule.groupSortFocus || groupModule.groupTextFocus)) {
        groupModule.groupSortFocus = false;
        groupModule.groupTextFocus = false;
        return;
      }
      this.firstHeaderCellClick = true;
      this.addFocus(this.getContent().getFocusInfo());
    };
    FocusStrategy2.prototype.restoreFocusWithAction = function(e) {
      if (!this.parent.enableInfiniteScrolling) {
        var matrix = this.getContent().matrix;
        var current = matrix.current;
        switch (e.requestType) {
          case "grouping":
          case "ungrouping":
            current[1] = current.length && !this.parent.groupSettings.showGroupedColumn && !isNullOrUndefined(matrix.matrix[current[0]]) ? matrix.matrix[current[0]].indexOf(1) : e.requestType === "grouping" ? current[1] + 1 : current[1] - 1;
            break;
        }
        this.getContent().matrix.current = current;
        this.prevIndexes = {
          rowIndex: current[0],
          cellIndex: current[1]
        };
        var groupModule = this.parent.groupModule;
        if (this.parent.allowGrouping && groupModule && groupModule.groupCancelFocus) {
          var focusableGroupedItems = groupModule.getFocusableGroupedItems();
          if (focusableGroupedItems.length) {
            if (focusableGroupedItems[0].parentElement.getAttribute("ej-mappingname") === e.columnName) {
              focusableGroupedItems[3].focus();
            } else {
              focusableGroupedItems[0].focus();
            }
          } else {
            groupModule.element.focus();
          }
          groupModule.groupCancelFocus = false;
          return;
        }
        this.addFocus(this.getContent().getFocusInfo());
      }
    };
    FocusStrategy2.prototype.clearIndicator = function() {
      if (!this.currentInfo.element || !this.currentInfo.elementToFocus) {
        return;
      }
      removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ["e-focus", "e-focused"]);
    };
    FocusStrategy2.prototype.getPrevIndexes = function() {
      var forget = this.forget;
      this.forget = false;
      return forget || !Object.keys(this.prevIndexes).length ? {
        rowIndex: null,
        cellIndex: null
      } : this.prevIndexes;
    };
    FocusStrategy2.prototype.forgetPrevious = function() {
      this.forget = true;
    };
    FocusStrategy2.prototype.setActiveByKey = function(action, active) {
      if (this.parent.frozenRows === 0) {
        return;
      }
      var info;
      var actions = {
        "home": function() {
          return {
            toHeader: !info.isContent,
            toFrozen: true
          };
        },
        "end": function() {
          return {
            toHeader: !info.isContent,
            toFrozen: false
          };
        },
        "ctrlHome": function() {
          return {
            toHeader: true,
            toFrozen: false
          };
        },
        "ctrlEnd": function() {
          return {
            toHeader: false,
            toFrozen: false
          };
        }
      };
      if (!(action in actions)) {
        return;
      }
      info = active.getInfo();
      var swap = actions["" + action]();
      this.setActive(!swap.toHeader);
      this.getContent().matrix.current = active.matrix.current;
    };
    FocusStrategy2.prototype.internalCellFocus = function(e) {
      if (!(e.byKey && e.container.isContent && (e.keyArgs.action === "enter" && e.parent.classList.contains("e-detailcell") || (e.keyArgs.action === "tab" || e.keyArgs.action === "shiftTab") && e.parent.classList.contains("e-unboundcell")))) {
        return;
      }
      this.clearIndicator();
      var focusEle;
      if (e.parent && e.parent.closest(".e-unboundcell") && e.keyArgs.action === "shiftTab") {
        focusEle = this.commandColumnFocusElement(e.parent, true);
      } else {
        focusEle = this.getContent().getFocusable(this.getFocusedElement());
      }
      this.setFocusedElement(focusEle);
      this.currentInfo.skipAction = true;
    };
    FocusStrategy2.prototype.commandColumnFocusElement = function(cell, isLast) {
      var commandButtons = cell.querySelectorAll("button:not(.e-hide)");
      return isLast ? commandButtons[commandButtons.length - 1] : commandButtons[0];
    };
    return FocusStrategy2;
  }()
);
var Matrix = (
  /** @class */
  function() {
    function Matrix3() {
      this.matrix = [];
      this.current = [];
    }
    Matrix3.prototype.set = function(rowIndex, columnIndex, allow) {
      rowIndex = Math.max(0, Math.min(rowIndex, this.rows));
      columnIndex = Math.max(0, Math.min(columnIndex, this.columns));
      this.matrix[parseInt(rowIndex.toString(), 10)] = this.matrix[parseInt(rowIndex.toString(), 10)] || [];
      this.matrix[parseInt(rowIndex.toString(), 10)][parseInt(columnIndex.toString(), 10)] = allow ? 1 : 0;
    };
    Matrix3.prototype.get = function(rowIndex, columnIndex, navigator2, action, validator) {
      var tmp = columnIndex;
      if (rowIndex + navigator2[0] < 0) {
        return [rowIndex, columnIndex];
      }
      rowIndex = Math.max(0, Math.min(rowIndex + navigator2[0], this.rows));
      var emptyTable = true;
      if (isNullOrUndefined(this.matrix[parseInt(rowIndex.toString(), 10)])) {
        return null;
      }
      columnIndex = Math.max(0, Math.min(columnIndex + navigator2[1], this.matrix[parseInt(rowIndex.toString(), 10)].length - 1));
      if (tmp + navigator2[1] > this.matrix[parseInt(rowIndex.toString(), 10)].length - 1 && validator(rowIndex, columnIndex, action)) {
        return [rowIndex, tmp];
      }
      var first = this.first(this.matrix[parseInt(rowIndex.toString(), 10)], columnIndex, navigator2, true, action);
      columnIndex = first === null ? tmp : first;
      var val = getValue(rowIndex + "." + columnIndex, this.matrix);
      if (rowIndex === this.rows && (action === "downArrow" || action === "enter")) {
        navigator2[0] = -1;
      }
      if (first === null) {
        for (var i = 0; i < this.rows; i++) {
          if (this.matrix[parseInt(i.toString(), 10)].some(function(v) {
            return v === 1;
          })) {
            emptyTable = false;
            break;
          }
        }
        if (emptyTable) {
          rowIndex = this.current.length ? this.current[0] : 0;
          return [rowIndex, columnIndex];
        }
      }
      return this.inValid(val) || !validator(rowIndex, columnIndex, action) ? this.get(rowIndex, tmp, navigator2, action, validator) : [rowIndex, columnIndex];
    };
    Matrix3.prototype.first = function(vector, index, navigator2, moveTo, action) {
      if ((index < 0 || index === vector.length) && this.inValid(vector[parseInt(index.toString(), 10)]) && action !== "upArrow" && action !== "downArrow" || !vector.some(function(v) {
        return v === 1;
      })) {
        return null;
      }
      return !this.inValid(vector[parseInt(index.toString(), 10)]) ? index : this.first(vector, ["upArrow", "downArrow", "shiftUp", "shiftDown"].indexOf(action) !== -1 ? moveTo ? 0 : ++index : index + navigator2[1], navigator2, false, action);
    };
    Matrix3.prototype.select = function(rowIndex, columnIndex) {
      rowIndex = Math.max(0, Math.min(rowIndex, this.rows));
      columnIndex = Math.max(0, Math.min(columnIndex, this.matrix[parseInt(rowIndex.toString(), 10)].length - 1));
      this.current = [rowIndex, columnIndex];
    };
    Matrix3.prototype.generate = function(rows, selector, isRowTemplate) {
      this.rows = rows.length - 1;
      this.matrix = [];
      for (var i = 0; i < rows.length; i++) {
        var cells = rows[parseInt(i.toString(), 10)].cells.filter(function(c) {
          return c.isSpanned !== true;
        });
        this.columns = Math.max(cells.length - 1, this.columns | 0);
        var incrementNumber = 0;
        for (var j = 0; j < cells.length; j++) {
          if (cells[parseInt(j.toString(), 10)].column && cells[parseInt(j.toString(), 10)].column.columns) {
            incrementNumber = this.columnsCount(cells[parseInt(j.toString(), 10)].column.columns, incrementNumber);
          } else {
            incrementNumber++;
          }
          this.set(i, j, rows[parseInt(i.toString(), 10)].visible === false ? false : selector(rows[parseInt(i.toString(), 10)], cells[parseInt(j.toString(), 10)], isRowTemplate));
        }
        this.columns = Math.max(incrementNumber - 1, this.columns | 0);
      }
      return this.matrix;
    };
    Matrix3.prototype.columnsCount = function(rowColumns, currentColumnCount) {
      var columns = rowColumns;
      var incrementNumber = currentColumnCount;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          incrementNumber = this.columnsCount(columns[parseInt(i.toString(), 10)].columns, incrementNumber);
        } else {
          incrementNumber++;
        }
      }
      return incrementNumber;
    };
    Matrix3.prototype.inValid = function(value) {
      return value === 0 || value === void 0;
    };
    return Matrix3;
  }()
);
var ContentFocus = (
  /** @class */
  function() {
    function ContentFocus2(parent) {
      var _this = this;
      this.matrix = new Matrix();
      this.lastIdxCell = false;
      this.parent = parent;
      this.keyActions = {
        "rightArrow": [0, 1],
        "tab": [0, 1],
        "leftArrow": [0, -1],
        "shiftTab": [0, -1],
        "upArrow": [-1, 0],
        "downArrow": [1, 0],
        "shiftUp": [-1, 0],
        "shiftDown": [1, 0],
        "shiftRight": [0, 1],
        "shiftLeft": [0, -1],
        "enter": [1, 0],
        "shiftEnter": [-1, 0]
      };
      this.indexesByKey = function(action) {
        var opt = {
          "home": [_this.matrix.current[0], -1, 0, 1],
          "end": [_this.matrix.current[0], _this.matrix.columns + 1, 0, -1],
          "ctrlHome": [0, -1, 0, 1],
          "ctrlEnd": [_this.matrix.rows, _this.matrix.columns + 1, 0, -1]
        };
        return opt["" + action] || null;
      };
    }
    ContentFocus2.prototype.getTable = function() {
      return this.parent.getContentTable();
    };
    ContentFocus2.prototype.onKeyPress = function(e) {
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "home") {
          e.action = "ctrlHome";
        } else if (e.action === "end") {
          e.action = "ctrlEnd";
        } else if (["downArrow", "upArrow", "leftArrow", "rightArrow"].indexOf(e.action) !== -1) {
          return;
        }
      }
      var navigators = this.keyActions[e.action];
      var current = this.getCurrentFromAction(e.action, navigators, e.action in this.keyActions, e);
      if (!current) {
        return;
      }
      if ((["tab", "shiftTab"].indexOf(e.action) > -1 && this.matrix.current || []).toString() === current.toString() || this.parent.allowPaging && !this.parent.pagerModule.pagerObj.checkPagerHasFocus() && this.matrix.current[0] === this.matrix.rows && (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.allowAdding && e.keyCode === 40 || e.keyCode === 40)) {
        if (current.toString() === [this.matrix.rows, this.matrix.columns].toString() || current.toString() === [0, 0].toString() || this.matrix.current[0] === this.matrix.rows && this.matrix.current.toString() === current.toString() || this.parent.allowGrouping && this.parent.infiniteScrollSettings.enableCache && current.toString() === [0, 1].toString()) {
          return false;
        } else {
          current = this.editNextRow(current[0], current[1], e.action);
        }
      }
      this.matrix.select(current[0], current[1]);
    };
    ContentFocus2.prototype.editNextRow = function(rowIndex, cellIndex, action) {
      var gObj = this.parent;
      var editNextRow = gObj.editSettings.allowNextRowEdit && (gObj.isEdit || gObj.isLastCellPrimaryKey);
      var visibleIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[0].field);
      var row2 = this.getTable().rows[parseInt(rowIndex.toString(), 10)];
      var cell = gObj.editSettings.showAddNewRow && row2.classList.contains("e-addedrow") ? row2.querySelectorAll("td:not(.e-editcell)")[parseInt(cellIndex.toString(), 10)] : row2.cells[parseInt(cellIndex.toString(), 10)];
      if (action === "tab" && editNextRow) {
        rowIndex++;
        var index = this.getTable().rows[parseInt(rowIndex.toString(), 10)].getElementsByClassName("e-indentcell").length + this.getTable().rows[parseInt(rowIndex.toString(), 10)].getElementsByClassName("e-detailrowcollapse").length;
        cellIndex = visibleIndex + index;
      }
      if (action === "shiftTab" && editNextRow) {
        rowIndex--;
        cellIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[gObj.getVisibleColumns().length - 1].field);
      }
      return !cell.classList.contains(rowCell) && !cell.classList.contains("e-headercell") && !cell.classList.contains("e-groupcaption") && !cell.classList.contains("e-filterbarcell") ? this.editNextRow(rowIndex, cellIndex, action) : [rowIndex, cellIndex];
    };
    ContentFocus2.prototype.getCurrentFromAction = function(action, navigator2, isPresent, e) {
      if (navigator2 === void 0) {
        navigator2 = [0, 0];
      }
      if (!isPresent && !this.indexesByKey(action) || this.matrix.current.length === 0) {
        return null;
      }
      if (!this.shouldFocusChange(e)) {
        return this.matrix.current;
      }
      var _a = this.indexesByKey(action) || this.matrix.current.concat(navigator2), rowIndex = _a[0], cellIndex = _a[1], rN = _a[2], cN = _a[3];
      if (this.parent.allowGrouping && !isNullOrUndefined(this.parent.groupSettings.columns) && this.parent.groupSettings.columns.length && this.parent.aggregates.length && action === "enter") {
        for (var i = rowIndex; i < this.matrix.matrix.length; i++) {
          var row2 = this.getTable().rows[i + 1];
          if (row2 && row2.cells[parseInt(cellIndex.toString(), 10)] && row2.cells[parseInt(cellIndex.toString(), 10)].classList.contains("e-rowcell")) {
            return [i + 1, cellIndex];
          }
          if (i === this.matrix.matrix.length - 1) {
            return [rowIndex, cellIndex];
          }
        }
      }
      if (action === "ctrlEnd" || action === "end") {
        var lastContentCellIndex = [this.matrix.matrix.length - 1, this.matrix.matrix[this.matrix.matrix.length - 1].length - 1];
        if (action === "end") {
          lastContentCellIndex = [rowIndex, this.matrix.matrix[parseInt(rowIndex.toString(), 10)].length - 1];
        }
        if (this.matrix.matrix[lastContentCellIndex[0]][lastContentCellIndex[1]] === 0) {
          lastContentCellIndex = findCellIndex(this.matrix.matrix, lastContentCellIndex, false);
        }
        rowIndex = lastContentCellIndex[0];
        cellIndex = lastContentCellIndex[1] + 1;
      }
      var current = this.matrix.get(rowIndex, cellIndex, [rN, cN], action, this.validator());
      return current;
    };
    ContentFocus2.prototype.onClick = function(e, force) {
      var target = e.target;
      this.target = target;
      target = target.classList.contains(rowCell) ? target : closest(target, "td");
      target = target ? target : closest(e.target, "td.e-detailrowcollapse") || closest(e.target, "td.e-detailrowexpand");
      target = closest(e.target, "td.e-detailcell") ? isNullOrUndefined(closest(closest(e.target, ".e-grid"), "td.e-detailcell")) ? null : target : target;
      target = target && closest(target, "table").classList.contains(table) ? target : null;
      if (!target) {
        return false;
      }
      var rowIdx = target.parentElement.rowIndex;
      if (this.parent.editSettings.showAddNewRow && parentsUntil(target, "e-addedrow")) {
        rowIdx = parentsUntil(target, "e-addedrow").rowIndex;
      }
      var _a = [rowIdx, target.cellIndex], rowIndex = _a[0], cellIndex = _a[1];
      var _b = this.matrix.current, oRowIndex = _b[0], oCellIndex = _b[1];
      var val = getValue(rowIndex + "." + cellIndex, this.matrix.matrix);
      if (this.matrix.inValid(val) || !force && oRowIndex === rowIndex && oCellIndex === cellIndex || !parentsUntil(e.target, rowCell) && !parentsUntil(e.target, "e-groupcaption") && !parentsUntil(e.target, "e-recordpluscollapse") && !parentsUntil(e.target, "e-recordplusexpand") && !parentsUntil(e.target, "e-detailrowcollapse") && !parentsUntil(e.target, "e-detailrowexpand") && !parentsUntil(e.target, "e-templatecell")) {
        return false;
      }
      this.matrix.select(rowIndex, cellIndex);
    };
    ContentFocus2.prototype.getFocusInfo = function() {
      var info = {};
      var _a = this.matrix.current, _b = _a[0], rowIndex = _b === void 0 ? 0 : _b, _c = _a[1], cellIndex = _c === void 0 ? 0 : _c;
      this.matrix.current = [rowIndex, cellIndex];
      var row2 = this.getTable().rows[parseInt(rowIndex.toString(), 10)];
      info.element = !isNullOrUndefined(row2) ? this.parent.editSettings.showAddNewRow && row2.classList.contains("e-addedrow") ? row2.querySelectorAll("td:not(.e-editcell)")[parseInt(cellIndex.toString(), 10)] : row2.cells[parseInt(cellIndex.toString(), 10)] : null;
      if (!info.element) {
        return info;
      }
      info.elementToFocus = (!info.element.classList.contains("e-unboundcell") || this.parent.editSettings.showAddNewRow && info.element.classList.contains("e-unboundcell") && parentsUntil(info.element, "e-addedrow")) && !info.element.classList.contains("e-detailcell") ? this.getFocusable(info.element) : info.element;
      info.elementToFocus = info.element.classList.contains("e-detailcell") && info.element.querySelector(".e-childgrid") ? info.element.querySelector(".e-childgrid") : info.elementToFocus;
      if (this.parent.editSettings.mode === "Batch" && this.parent.isEdit && info.elementToFocus.tagName.toLowerCase() === "input" && info.elementToFocus.classList.contains("e-dropdownlist")) {
        info.elementToFocus = info.elementToFocus.parentElement;
      }
      info.outline = true;
      info.uid = info.element.parentElement.getAttribute("data-uid");
      return info;
    };
    ContentFocus2.prototype.getFocusable = function(element) {
      var query = 'button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])';
      var isTemplate = !isNullOrUndefined(closest(element, ".e-templatecell"));
      if (this.parent.isEdit) {
        var commandCellQuery = this.parent.editSettings.showAddNewRow && parentsUntil(element, "e-addedrow") ? ", button:not(.e-hide)" : "";
        query = 'input:not([type="hidden"]), select:not([aria-hidden="true"]), textarea' + commandCellQuery;
      }
      var child = [].slice.call(element.querySelectorAll(query));
      return child.length ? isTemplate && child.length > 1 ? this.target ? this.target : element : child[0] : element;
    };
    ContentFocus2.prototype.selector = function(row2, cell, isRowTemplate) {
      var types = [CellType.Expand, CellType.GroupCaption, CellType.CaptionSummary, CellType.GroupSummary];
      return (row2.isDataRow && cell.visible && (cell.isDataCell || cell.isTemplate) || row2.isDataRow && cell.cellType === CellType.DetailExpand && isNullOrUndefined(cell.visible) || !row2.isDataRow && types.indexOf(cell.cellType) > -1 && !((cell.cellType === CellType.GroupSummary || cell.cellType === CellType.CaptionSummary) && !(cell.isDataCell && cell.visible)) || cell.column && cell.visible && cell.column.type === "checkbox" || cell.cellType === CellType.CommandColumn || row2.isDataRow && isRowTemplate) && !(row2.edit === "delete" && row2.isDirty);
    };
    ContentFocus2.prototype.nextRowFocusValidate = function(index) {
      var lastIndex = index;
      for (var i = index, len = this.matrix.rows; i <= len; i++) {
        if (this.matrix.matrix[parseInt(index.toString(), 10)].indexOf(1) === -1) {
          index = index + 1;
        } else {
          return index;
        }
      }
      this.lastIdxCell = true;
      return lastIndex;
    };
    ContentFocus2.prototype.previousRowFocusValidate = function(index) {
      var firstIndex = index;
      for (var i = index, len = 0; i >= len; i--) {
        if (this.matrix.matrix[parseInt(index.toString(), 10)].indexOf(1) === -1) {
          index = index - 1;
          if (index < 0) {
            this.lastIdxCell = true;
            return firstIndex;
          }
        } else {
          return index;
        }
      }
      return firstIndex;
    };
    ContentFocus2.prototype.jump = function(action, current) {
      this.lastIdxCell = false;
      var enterFrozen = this.parent.frozenRows !== 0 && action === "shiftEnter";
      var headerSwap = (action === "upArrow" || enterFrozen) && current[0] === 0;
      if (this.matrix.matrix[current[0]]) {
        if (action === "tab" && this.matrix.matrix.length && current[1] === this.matrix.matrix[current[0]].lastIndexOf(1) && this.matrix.matrix.length - 1 !== current[0]) {
          this.matrix.current[0] = this.nextRowFocusValidate(this.matrix.current[0] + 1);
          this.matrix.current[1] = -1;
        }
      }
      if (action === "shiftTab" && current[0] !== 0 && this.matrix.matrix[current[0]].indexOf(1) === current[1]) {
        this.matrix.current[0] = this.previousRowFocusValidate(this.matrix.current[0] - 1);
        this.matrix.current[1] = this.matrix.matrix[current[0]].length;
      }
      var isHeaderFocus = false;
      var row2 = parentsUntil(document.activeElement, "e-addedrow") && this.parent.editSettings.showAddNewRow ? parentsUntil(document.activeElement, "e-addedrow") : document.activeElement.parentElement;
      if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && !isNullOrUndefined(row2) && row2.classList.contains(row)) {
        var rowIndex = parseInt(row2.getAttribute(dataRowIndex), 10);
        isHeaderFocus = rowIndex > 0;
      }
      var info = {
        swap: !isHeaderFocus ? (action === "upArrow" || enterFrozen) && current[0] === 0 : false,
        toHeader: headerSwap
      };
      return info;
    };
    ContentFocus2.prototype.getNextCurrent = function(previous, swap, active, action) {
      if (previous === void 0) {
        previous = [];
      }
      var current = [];
      if (action === "rightArrow" || action === "tab") {
        current[0] = previous[0];
        current[1] = -1;
      }
      if (action === "downArrow" || action === "enter") {
        current[0] = -1;
        current[1] = previous[1];
      }
      return current;
    };
    ContentFocus2.prototype.generateRows = function(rows, optionals) {
      var _a;
      var matrix = optionals.matrix, handlerInstance = optionals.handlerInstance;
      var len = handlerInstance.matrix.matrix.length;
      var defaultLen = this.parent.allowFiltering && this.parent.filterSettings.type === "FilterBar" ? len + 1 : len;
      handlerInstance.matrix.matrix = handlerInstance.matrix.matrix.slice(0, defaultLen);
      handlerInstance.matrix.rows = defaultLen;
      (_a = handlerInstance.matrix.matrix).push.apply(_a, matrix);
      handlerInstance.matrix.rows += matrix.length;
    };
    ContentFocus2.prototype.getInfo = function(e) {
      var info = this.getFocusInfo();
      var _a = this.matrix.current, rIndex = _a[0], cIndex = _a[1];
      var isData = info.element.classList.contains(rowCell);
      var isSelectable = isData || e && e.action !== "enter" && (info.element.classList.contains("e-detailrowcollapse") || info.element.classList.contains("e-detailrowexpand"));
      var _b = [Math.min(parseInt(info.element.parentElement.getAttribute(dataRowIndex), 10), rIndex), Math.min(parseInt(info.element.getAttribute(dataColIndex), 10), cIndex)], rowIndex = _b[0], cellIndex = _b[1];
      if (this.parent.allowGrouping && this.parent.groupSettings.enableLazyLoading && isData) {
        rowIndex = this.parent.getDataRows().indexOf(info.element.parentElement);
      }
      if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {
        rowIndex = rIndex;
        cellIndex = cIndex;
      }
      if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Top" && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && e && e.action === "downArrow") {
        rowIndex++;
      }
      return {
        isContent: true,
        isDataCell: isData,
        indexes: [rowIndex, cellIndex],
        isSelectable
      };
    };
    ContentFocus2.prototype.validator = function() {
      var table2 = this.getTable();
      return function(rowIndex, cellIndex, action) {
        if (!isNullOrUndefined(table2.rows[parseInt(rowIndex.toString(), 10)])) {
          var cell = void 0;
          cellIndex = table2.querySelector(".e-emptyrow") ? 0 : cellIndex;
          if (table2.rows[parseInt(rowIndex.toString(), 10)].cells[0].classList.contains("e-editcell")) {
            cell = table2.rows[parseInt(rowIndex.toString(), 10)].cells[0].querySelectorAll("td")[parseInt(cellIndex.toString(), 10)];
          } else {
            cell = table2.rows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)];
          }
          var isCellWidth = cell.getBoundingClientRect().width !== 0;
          if (action === "enter" || action === "shiftEnter") {
            return isCellWidth && cell.classList.contains(rowCell);
          }
          if ((action === "shiftUp" || action === "shiftDown") && cell.classList.contains(rowCell)) {
            return isCellWidth;
          } else if (action !== "shiftUp" && action !== "shiftDown") {
            return isCellWidth;
          }
        }
        return false;
      };
    };
    ContentFocus2.prototype.shouldFocusChange = function(e) {
      var _a = this.matrix.current, _b = _a[0], rIndex = _b === void 0 ? -1 : _b, _c = _a[1], cIndex = _c === void 0 ? -1 : _c;
      if (rIndex < 0 || cIndex < 0) {
        return true;
      }
      var cell = getValue(rIndex + ".cells." + cIndex, this.getTable().rows);
      if (!cell) {
        return true;
      }
      return e.action === "enter" || e.action === "shiftEnter" ? cell.classList.contains(rowCell) && !cell.classList.contains("e-unboundcell") || cell.classList.contains("e-editedbatchcell") && !cell.classList.contains("e-detailcell") : true;
    };
    ContentFocus2.prototype.getGridSeletion = function() {
      return this.parent.allowSelection && this.parent.selectionSettings.allowColumnSelection;
    };
    return ContentFocus2;
  }()
);
var HeaderFocus = (
  /** @class */
  function(_super) {
    __extends14(HeaderFocus2, _super);
    function HeaderFocus2(parent) {
      return _super.call(this, parent) || this;
    }
    HeaderFocus2.prototype.getTable = function() {
      return this.parent.getHeaderTable();
    };
    HeaderFocus2.prototype.onClick = function(e) {
      var target = e.target;
      this.target = target;
      target = target.classList.contains("e-headercell") ? target : closest(target, "th");
      if (!target && (this.parent.frozenRows !== 0 || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow)) {
        target = e.target.classList.contains(rowCell) ? e.target : closest(e.target, "td");
      }
      if (e.target.classList.contains("e-columnheader") || e.target.querySelector(".e-stackedheadercell")) {
        return false;
      }
      if (!target) {
        return;
      }
      var rowIdx = target.parentElement.rowIndex;
      if (this.parent.editSettings.showAddNewRow && parentsUntil(target, "e-addedrow")) {
        rowIdx = parentsUntil(target, "e-addedrow").rowIndex;
      }
      var _a = [rowIdx, target.cellIndex], rowIndex = _a[0], cellIndex = _a[1];
      var val = getValue(rowIndex + "." + cellIndex, this.matrix.matrix);
      if (this.matrix.inValid(val)) {
        return false;
      }
      this.matrix.select(rowIdx, target.cellIndex);
    };
    HeaderFocus2.prototype.getFocusInfo = function() {
      var info = {};
      var _a = this.matrix.current, _b = _a[0], rowIndex = _b === void 0 ? 0 : _b, _c = _a[1], cellIndex = _c === void 0 ? 0 : _c;
      var row2 = this.getTable().rows[parseInt(rowIndex.toString(), 10)];
      info.element = !isNullOrUndefined(row2) ? this.parent.editSettings.showAddNewRow && row2.classList.contains("e-addedrow") ? row2.querySelectorAll("td:not(.e-editcell)")[parseInt(cellIndex.toString(), 10)] : row2.cells[parseInt(cellIndex.toString(), 10)] : null;
      if (!isNullOrUndefined(info.element)) {
        info.elementToFocus = this.getFocusable(info.element);
        info.outline = !info.element.classList.contains("e-filterbarcell");
      }
      return info;
    };
    HeaderFocus2.prototype.selector = function(row2, cell) {
      return cell.visible && (cell.column.field !== void 0 || cell.isTemplate || !isNullOrUndefined(cell.column.template) || !isNullOrUndefined(cell.column.commands)) || cell.column.type === "checkbox" || cell.cellType === CellType.StackedHeader;
    };
    HeaderFocus2.prototype.jump = function(action, current) {
      var enterFrozen = this.parent.frozenRows !== 0 && action === "enter";
      var isLastCell;
      var lastRow;
      if (this.parent.enableHeaderFocus && action === "tab") {
        lastRow = this.matrix.matrix.length - 1 === current[0];
        isLastCell = current[1] === this.matrix.matrix[current[0]].lastIndexOf(1);
        if (isLastCell) {
          if (!lastRow) {
            this.matrix.current[0] = this.matrix.current[0] + 1;
          } else {
            this.matrix.current[0] = 0;
          }
          this.matrix.current[1] = -1;
        }
      }
      return {
        swap: (action === "downArrow" || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || action === "tab" && lastRow && isLastCell
      };
    };
    HeaderFocus2.prototype.getNextCurrent = function(previous, swap, active, action) {
      if (previous === void 0) {
        previous = [];
      }
      var current1 = [];
      if (action === "rightArrow" || action === "shiftRight" && this.getGridSeletion() || action === "tab") {
        current1[0] = previous[0];
        current1[1] = -1;
      }
      if (action === "upArrow" || action === "shiftEnter") {
        current1[0] = this.matrix.matrix.length;
        current1[1] = previous[1];
      }
      return current1;
    };
    HeaderFocus2.prototype.generateRows = function(rows) {
      var length = this.matrix.matrix.length;
      if (this.parent.allowFiltering && this.parent.filterSettings.type === "FilterBar") {
        this.matrix.rows = ++this.matrix.rows;
        var cells = rows[0].cells;
        var incrementNumber = 0;
        for (var i = 0; i < cells.length; i++) {
          if (cells[parseInt(i.toString(), 10)].column && cells[parseInt(i.toString(), 10)].column.columns) {
            incrementNumber = this.checkFilterColumn(cells[parseInt(i.toString(), 10)].column.columns, length, incrementNumber);
          } else {
            this.matrix.set(length, incrementNumber, cells[parseInt(i.toString(), 10)].visible && cells[parseInt(i.toString(), 10)].column.allowFiltering !== false);
            incrementNumber++;
          }
        }
      }
    };
    HeaderFocus2.prototype.checkFilterColumn = function(rowColumns, rowIndex, columnIndex) {
      var columns = rowColumns;
      var incrementNumber = columnIndex;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          incrementNumber = this.checkFilterColumn(columns[parseInt(i.toString(), 10)].columns, rowIndex, incrementNumber);
        } else {
          this.matrix.set(rowIndex, incrementNumber, columns[parseInt(i.toString(), 10)].visible && columns[parseInt(i.toString(), 10)].allowFiltering !== false);
          incrementNumber++;
        }
      }
      return incrementNumber;
    };
    HeaderFocus2.prototype.getInfo = function(e) {
      return extend(_super.prototype.getInfo.call(this, e), {
        isContent: false,
        isHeader: true
      });
    };
    HeaderFocus2.prototype.validator = function() {
      return function() {
        return true;
      };
    };
    HeaderFocus2.prototype.shouldFocusChange = function(e) {
      var _a = this.matrix.current, rowIndex = _a[0], columnIndex = _a[1];
      if (rowIndex < 0 || columnIndex < 0) {
        return true;
      }
      var cell = getValue(rowIndex + ".cells." + columnIndex, this.getTable().rows);
      if (!cell) {
        return true;
      }
      return e.action === "enter" || e.action === "altDownArrow" ? !cell.classList.contains("e-headercell") : true;
    };
    HeaderFocus2.prototype.getHeaderType = function() {
      return "HeaderFocus";
    };
    return HeaderFocus2;
  }(ContentFocus)
);
var SearchBox = (
  /** @class */
  function() {
    function SearchBox2(searchBox, serviceLocator) {
      this.searchBox = searchBox;
      this.serviceLocator = serviceLocator;
      this.l10n = this.serviceLocator.getService("localization");
    }
    SearchBox2.prototype.searchFocus = function(args) {
      args.target.parentElement.classList.add("e-input-focus");
      if (args.target.classList.contains("e-input") && args.target.classList.contains("e-search") && args.target.value) {
        var sIcon = args.target.parentElement.querySelector(".e-sicon");
        sIcon.classList.add("e-clear-icon");
        sIcon.setAttribute("title", this.l10n.getConstant("Clear"));
        sIcon.style.cursor = "pointer";
      }
    };
    SearchBox2.prototype.searchBlur = function(args) {
      var relatedTarget = args.relatedTarget ? args.relatedTarget : null;
      if (relatedTarget && relatedTarget.classList.contains("e-sicon")) {
        if (relatedTarget.classList.contains("e-clear-icon")) {
          args.target.parentElement.classList.remove("e-input-focus");
        }
      } else {
        args.target.parentElement.classList.remove("e-input-focus");
      }
      if (args.target.classList.contains("e-search") && (relatedTarget && !relatedTarget.classList.contains("e-sicon e-clear-icon") && !relatedTarget.classList.contains("e-sicon") || isNullOrUndefined(relatedTarget))) {
        var sIcon = args.target.parentElement.querySelector(".e-sicon");
        sIcon.classList.remove("e-clear-icon");
        sIcon.removeAttribute("title");
        sIcon.style.cursor = "default";
      }
    };
    SearchBox2.prototype.wireEvent = function() {
      if (this.searchBox) {
        EventHandler.add(this.searchBox, "focus", this.searchFocus, this);
        EventHandler.add(this.searchBox, "blur", this.searchBlur, this);
      }
    };
    SearchBox2.prototype.unWireEvent = function() {
      if (this.searchBox) {
        EventHandler.remove(this.searchBox, "focus", this.searchFocus);
        EventHandler.remove(this.searchBox, "blur", this.searchBlur);
      }
    };
    return SearchBox2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/page-settings.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PageSettings = (
  /** @class */
  function(_super) {
    __extends15(PageSettings2, _super);
    function PageSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([Property(12)], PageSettings2.prototype, "pageSize", void 0);
    __decorate3([Property(8)], PageSettings2.prototype, "pageCount", void 0);
    __decorate3([Property(1)], PageSettings2.prototype, "currentPage", void 0);
    __decorate3([Property()], PageSettings2.prototype, "totalRecordsCount", void 0);
    __decorate3([Property(false)], PageSettings2.prototype, "enableQueryString", void 0);
    __decorate3([Property(false)], PageSettings2.prototype, "pageSizes", void 0);
    __decorate3([Property(null)], PageSettings2.prototype, "template", void 0);
    return PageSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/column-chooser-settings.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnChooserSettings = (
  /** @class */
  function(_super) {
    __extends16(ColumnChooserSettings2, _super);
    function ColumnChooserSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([Property("startsWith")], ColumnChooserSettings2.prototype, "operator", void 0);
    __decorate4([Property(false)], ColumnChooserSettings2.prototype, "ignoreAccent", void 0);
    return ColumnChooserSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/selection.js
var Selection = (
  /** @class */
  function() {
    function Selection2(parent, selectionSettings, locator) {
      this.selectedRowIndexes = [];
      this.selectedRowCellIndexes = [];
      this.selectedRecords = [];
      this.preventFocus = false;
      this.selectedColumnsIndexes = [];
      this.checkBoxState = false;
      this.isMultiShiftRequest = false;
      this.isMultiCtrlRequest = false;
      this.isMultiCtrlRequestCell = false;
      this.enableSelectMultiTouch = false;
      this.clearRowCheck = false;
      this.selectRowCheck = false;
      this.selectedRowState = {};
      this.unSelectedRowState = {};
      this.totalRecordsCount = 0;
      this.chkAllCollec = [];
      this.isCheckedOnAdd = false;
      this.persistSelectedData = [];
      this.deSelectedData = [];
      this.isHdrSelectAllClicked = false;
      this.needColumnSelection = false;
      this.isCancelDeSelect = false;
      this.isPreventCellSelect = false;
      this.disableUI = false;
      this.isPersisted = false;
      this.cmdKeyPressed = false;
      this.cellselected = false;
      this.isMultiSelection = false;
      this.isAddRowsToSelection = false;
      this.initialRowSelection = false;
      this.isPrevRowSelection = false;
      this.isKeyAction = false;
      this.isRowDragSelected = false;
      this.isPartialSelection = false;
      this.rmtHdrChkbxClicked = false;
      this.isCheckboxReset = false;
      this.isRowDeselect = false;
      this.autoFillRLselection = true;
      this.bottom = "0 0 2px 0";
      this.top = "2px 0 0 0";
      this.right_bottom = "0 2px 2px 0";
      this.bottom_left = "0 0 2px 2px";
      this.top_right = "2px 2px 0 0";
      this.top_left = "2px 0 0 2px";
      this.top_bottom = "2px 0 2px 0";
      this.top_right_bottom = "2px 2px 2px 0";
      this.top_bottom_left = "2px 0 2px 2px";
      this.top_right_left = "2px 2px 0 2px";
      this.right_bottom_left = "0 2px 2px 2px";
      this.all_border = "2px";
      this.parent = parent;
      this.selectionSettings = selectionSettings;
      this.factory = locator.getService("rendererFactory");
      this.focus = locator.getService("focus");
      this.addEventListener();
      this.wireEvents();
    }
    Selection2.prototype.initializeSelection = function() {
      this.parent.log("selection_key_missing");
      this.render();
    };
    Selection2.prototype.onActionBegin = function(args, type) {
      this.parent.trigger(type, this.fDataUpdate(args));
    };
    Selection2.prototype.fDataUpdate = function(args) {
      if (!this.isMultiSelection && (!isNullOrUndefined(args.cellIndex) || !isNullOrUndefined(args.rowIndex))) {
        var rowObj = this.getRowObj(isNullOrUndefined(args.rowIndex) ? isNullOrUndefined(args.cellIndex) ? this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);
        args.foreignKeyData = rowObj.foreignKeyData;
      }
      return args;
    };
    Selection2.prototype.onActionComplete = function(args, type) {
      this.parent.trigger(type, this.fDataUpdate(args));
      this.isMultiSelection = false;
    };
    Selection2.prototype.getModuleName = function() {
      return "selection";
    };
    Selection2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.hidePopUp();
      this.clearSelection();
      this.destroyAutoFillElements();
      this.removeEventListener();
      this.unWireEvents();
      EventHandler.remove(this.parent.getContent(), "mousedown", this.mouseDownHandler);
      EventHandler.remove(this.parent.getHeaderContent(), "mousedown", this.mouseDownHandler);
    };
    Selection2.prototype.isEditing = function() {
      return (this.parent.editSettings.mode === "Normal" || this.parent.editSettings.mode === "Batch" && this.parent.editModule && this.parent.editModule.formObj && !this.parent.editModule.formObj.validate()) && this.parent.isEdit && !this.parent.editSettings.showAddNewRow && !this.parent.isPersistSelection;
    };
    Selection2.prototype.getCurrentBatchRecordChanges = function() {
      var gObj = this.parent;
      if (gObj.editSettings.mode === "Batch" && gObj.editModule) {
        var currentRecords = iterateExtend(this.parent.getCurrentViewRecords());
        currentRecords = gObj.editSettings.newRowPosition === "Bottom" ? currentRecords.concat(this.parent.editModule.getBatchChanges()[addedRecords]) : this.parent.editModule.getBatchChanges()[addedRecords].concat(currentRecords);
        var deletedRecords2 = this.parent.editModule.getBatchChanges()[deletedRecords];
        var primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
        for (var i = 0; i < deletedRecords2.length; i++) {
          for (var j = 0; j < currentRecords.length; j++) {
            if (deletedRecords2[parseInt(i.toString(), 10)]["" + primaryKey] === currentRecords[parseInt(j.toString(), 10)]["" + primaryKey]) {
              currentRecords.splice(j, 1);
              break;
            }
          }
        }
        return currentRecords;
      } else if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length && !this.parent.isPersistSelection) {
        var selectedGroupedData = gObj.getCurrentViewRecords().filter(function(col) {
          return col["key"] === void 0;
        });
        return selectedGroupedData;
      } else {
        return gObj.getCurrentViewRecords();
      }
    };
    Selection2.prototype.selectRow = function(index, isToggle) {
      if (this.selectedRowIndexes.length && this.selectionSettings.enableSimpleMultiRowSelection) {
        this.addRowsToSelection([index]);
        return;
      }
      var gObj = this.parent;
      var selectedRow = gObj.getRowByIndex(index);
      var rowObj = selectedRow && gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid"));
      if (this.isPartialSelection && rowObj && rowObj.isDataRow && !rowObj.isSelectable) {
        return;
      }
      var selectData;
      var isRemoved = false;
      if (gObj.enableVirtualization && index > -1) {
        var e = {
          selectedIndex: index,
          isAvailable: true
        };
        this.parent.notify(selectVirtualRow, e);
        if (selectedRow && gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid"))) {
          selectData = gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid")).data;
        } else {
          if (e.isAvailable && !gObj.selectionSettings.persistSelection) {
            var prevSelectedData = this.parent.getSelectedRecords();
            if (prevSelectedData.length > 0) {
              this.clearRowSelection();
            }
          }
          return;
        }
      } else {
        selectData = this.getRowObj(index).data;
      }
      if (!this.isRowType() || !selectedRow || this.isEditing()) {
        return;
      }
      var isRowSelected = selectedRow.hasAttribute("aria-selected");
      this.activeTarget();
      if (!isToggle || !this.selectedRowIndexes.length) {
        isToggle = false;
      } else {
        var isCheckboxModeResetOnRowClick = this.selectionSettings.checkboxMode === "ResetOnRowClick";
        var isSelectionTypeMultiple = !this.parent.isCheckBoxSelection && this.selectionSettings.type === "Multiple";
        if (!isCheckboxModeResetOnRowClick && !isSelectionTypeMultiple || this.selectedRowIndexes.length === 1 && (isCheckboxModeResetOnRowClick || isSelectionTypeMultiple)) {
          isToggle = !(this.isKeyAction && this.parent.isCheckBoxSelection) ? this.selectedRowIndexes.indexOf(index) !== -1 : false;
        } else {
          isToggle = false;
        }
      }
      this.isKeyAction = false;
      var args;
      var can = "cancel";
      if (!isToggle) {
        args = {
          data: selectData,
          rowIndex: index,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest,
          row: selectedRow,
          previousRow: gObj.getRowByIndex(this.prevRowIndex),
          previousRowIndex: this.prevRowIndex,
          target: this.actualTarget,
          cancel: false,
          isInteracted: this.isInteracted,
          isHeaderCheckboxClicked: this.isHeaderCheckboxClicked
        };
        this.parent.trigger(rowSelecting, this.fDataUpdate(args), this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can));
      } else {
        if (this.selectionSettings.checkboxMode !== "ResetOnRowClick") {
          this.rowDeselect(rowDeselecting, [rowObj.index], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], this.actualTarget);
          if (this.isCancelDeSelect) {
            return;
          }
          this.rowDeselect(rowDeselected, [rowObj.index], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], this.actualTarget, void 0, void 0, void 0);
        }
        this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can)(args);
      }
    };
    Selection2.prototype.rowSelectingCallBack = function(args, isToggle, index, selectData, isRemoved, isRowSelected, can) {
      var _this = this;
      return function(args2) {
        if (!isNullOrUndefined(args2) && args2["" + can] === true) {
          _this.disableInteracted();
          return;
        }
        _this.index = index;
        _this.toggle = isToggle;
        _this.data = selectData;
        _this.removed = isRemoved;
        if (isRowSelected && _this.selectionSettings.persistSelection && !(_this.selectionSettings.checkboxMode === "ResetOnRowClick")) {
          _this.clearSelectedRow(index);
          _this.selectRowCallBack();
        } else if (!isRowSelected && _this.selectionSettings.persistSelection && _this.selectionSettings.checkboxMode !== "ResetOnRowClick") {
          _this.selectRowCallBack();
        }
        if (_this.selectionSettings.checkboxMode === "ResetOnRowClick") {
          _this.isCheckboxReset = true;
          _this.clearSelection();
        }
        if (!_this.selectionSettings.persistSelection || _this.selectionSettings.checkboxMode === "ResetOnRowClick" || !_this.parent.isCheckBoxSelection && _this.selectionSettings.persistSelection) {
          _this.selectRowCheck = true;
          _this.clearRow();
        }
      };
    };
    Selection2.prototype.selectRowCallBack = function() {
      var gObj = this.parent;
      var args;
      var index = this.index;
      var isToggle = this.toggle;
      var selectData = this.data;
      var isRemoved = this.removed;
      var selectedRow = gObj.getRowByIndex(index);
      if (!isToggle && !isRemoved) {
        if (this.selectedRowIndexes.indexOf(index) <= -1) {
          this.updateRowSelection(selectedRow, index);
        }
        this.selectRowIndex(index);
      }
      if (!isToggle) {
        args = {
          data: selectData,
          rowIndex: index,
          row: selectedRow,
          previousRow: gObj.getRowByIndex(this.prevRowIndex),
          previousRowIndex: this.prevRowIndex,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          isHeaderCheckBoxClicked: this.isHeaderCheckboxClicked,
          rowIndexes: index
        };
        this.onActionComplete(args, rowSelected);
      }
      this.isInteracted = false;
      this.updateRowProps(index);
    };
    Selection2.prototype.selectRowsByRange = function(startIndex, endIndex) {
      this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex));
      this.selectRowIndex(endIndex);
    };
    Selection2.prototype.selectedDataUpdate = function(selectedData, foreignKeyData2, selectedRows, rowIndexes, selectableRowIndex) {
      for (var i = 0, len = rowIndexes.length; i < len; i++) {
        var currentRow = this.parent.getDataRows()[rowIndexes[parseInt(i.toString(), 10)]];
        if (this.parent.enableVirtualization) {
          currentRow = this.parent.getRowByIndex(rowIndexes[parseInt(i.toString(), 10)]);
        }
        var rowObj = this.getRowObj(currentRow);
        if (rowObj && rowObj.isDataRow && rowObj.isSelectable) {
          selectedData.push(rowObj.data);
          selectedRows.push(currentRow);
          foreignKeyData2.push(rowObj.foreignKeyData);
        } else {
          if (this.isPartialSelection && selectableRowIndex) {
            selectableRowIndex.splice(selectableRowIndex.indexOf(rowIndexes[parseInt(i.toString(), 10)]), 1);
          }
        }
      }
    };
    Selection2.prototype.selectRows = function(rowIndexes) {
      var _this = this;
      var gObj = this.parent;
      var selectableRowIndex = rowIndexes.slice();
      var rowIndex = !this.isSingleSel() ? rowIndexes[0] : rowIndexes[rowIndexes.length - 1];
      this.isMultiSelection = true;
      var selectedRows = [];
      var foreignKeyData2 = [];
      var can = "cancel";
      var selectedData = [];
      if (!this.isRowType() || this.isEditing()) {
        return;
      }
      this.selectedDataUpdate(selectedData, foreignKeyData2, selectedRows, rowIndexes, selectableRowIndex);
      this.activeTarget();
      var args = {
        cancel: false,
        rowIndexes: selectableRowIndex,
        row: selectedRows,
        rowIndex,
        target: this.actualTarget,
        prevRow: gObj.getRows()[this.prevRowIndex],
        previousRowIndex: this.prevRowIndex,
        isInteracted: this.isInteracted,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest,
        data: selectedData,
        isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,
        foreignKeyData: foreignKeyData2
      };
      this.parent.trigger(rowSelecting, this.fDataUpdate(args), function(args2) {
        if (!isNullOrUndefined(args2) && args2["" + can] === true) {
          _this.disableInteracted();
          return;
        }
        if (!(gObj.allowRowDragAndDrop && _this.isDragged && _this.selectionSettings.persistSelection)) {
          _this.clearRow();
        }
        _this.selectRowIndex(selectableRowIndex.slice(-1)[0]);
        var selectRowFn = function(index, preventFocus) {
          _this.updateRowSelection(gObj.getRowByIndex(index), index, preventFocus);
          _this.updateRowProps(rowIndex);
        };
        if (!_this.isSingleSel()) {
          for (var _i = 0, selectableRowIndex_1 = selectableRowIndex; _i < selectableRowIndex_1.length; _i++) {
            var rowIdx = selectableRowIndex_1[_i];
            selectRowFn(rowIdx, gObj.enableVirtualization ? true : false);
          }
        } else {
          selectRowFn(rowIndex);
        }
        args2 = {
          rowIndexes: selectableRowIndex,
          row: selectedRows,
          rowIndex,
          target: _this.actualTarget,
          prevRow: gObj.getRows()[_this.prevRowIndex],
          previousRowIndex: _this.prevRowIndex,
          data: _this.getSelectedRecords(),
          isInteracted: _this.isInteracted,
          isHeaderCheckboxClicked: _this.isHeaderCheckboxClicked,
          foreignKeyData: foreignKeyData2
        };
        if (_this.isRowSelected) {
          _this.onActionComplete(args2, rowSelected);
        }
        _this.isInteracted = false;
      });
    };
    Selection2.prototype.addRowsToSelection = function(rowIndexes) {
      var gObj = this.parent;
      var can = "cancel";
      var target = this.target;
      this.isMultiSelection = true;
      var selectedRows = [];
      var foreignKeyData2 = [];
      var selectedData = [];
      var indexes = gObj.getSelectedRowIndexes().concat(rowIndexes);
      var selectedRow = !this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[0]) : gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]);
      if ((!this.isRowType() || this.isEditing()) && !this.selectionSettings.checkboxOnly) {
        return;
      }
      var args;
      var checkboxColumn = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (this.isMultiCtrlRequest && !checkboxColumn.length) {
        this.selectedDataUpdate(selectedData, foreignKeyData2, selectedRows, indexes);
      }
      for (var _i = 0, rowIndexes_1 = rowIndexes; _i < rowIndexes_1.length; _i++) {
        var rowIndex = rowIndexes_1[_i];
        var rowObj = this.getRowObj(rowIndex);
        var isUnSelected = this.selectedRowIndexes.indexOf(rowIndex) > -1;
        if (this.isPartialSelection && rowObj && rowObj.isDataRow && !rowObj.isSelectable) {
          continue;
        }
        this.selectRowIndex(rowIndex);
        if (isUnSelected && ((checkboxColumn.length ? true : this.selectionSettings.enableToggle) || this.isMultiCtrlRequest)) {
          this.isAddRowsToSelection = true;
          this.rowDeselect(rowDeselecting, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target);
          if (this.isCancelDeSelect) {
            return;
          }
          this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(rowIndex), 1);
          this.selectedRecords.splice(this.selectedRecords.indexOf(selectedRow), 1);
          this.selectRowIndex(this.selectedRowIndexes.length ? this.selectedRowIndexes[this.selectedRowIndexes.length - 1] : -1);
          selectedRow.removeAttribute("aria-selected");
          this.addRemoveClassesForRow(selectedRow, false, null, "e-selectionbackground", "e-active");
          this.rowDeselect(rowDeselected, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target, void 0, void 0, void 0);
          this.isInteracted = false;
          this.isMultiSelection = false;
          this.isAddRowsToSelection = false;
          this.isHdrSelectAllClicked = false;
        } else {
          this.activeTarget();
          args = {
            cancel: false,
            data: selectedData.length ? selectedData : rowObj.data,
            rowIndex,
            row: selectedRows.length ? selectedRows : selectedRow,
            target: this.actualTarget,
            prevRow: gObj.getRows()[this.prevRowIndex],
            previousRowIndex: this.prevRowIndex,
            isCtrlPressed: this.isMultiCtrlRequest,
            isShiftPressed: this.isMultiShiftRequest,
            foreignKeyData: foreignKeyData2.length ? foreignKeyData2 : rowObj.foreignKeyData,
            isInteracted: this.isInteracted,
            isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,
            rowIndexes: indexes
          };
          this.parent.trigger(rowSelecting, this.fDataUpdate(args));
          if (!isNullOrUndefined(args) && args["" + can] === true) {
            this.disableInteracted();
            return;
          }
          if (this.isSingleSel()) {
            this.clearRow();
          }
          this.updateRowSelection(selectedRow, rowIndex);
        }
        if (!isUnSelected) {
          args = {
            data: selectedData.length ? selectedData : rowObj.data,
            rowIndex,
            row: selectedRows.length ? selectedRows : selectedRow,
            target: this.actualTarget,
            prevRow: gObj.getRows()[this.prevRowIndex],
            previousRowIndex: this.prevRowIndex,
            foreignKeyData: foreignKeyData2.length ? foreignKeyData2 : rowObj.foreignKeyData,
            isInteracted: this.isInteracted,
            isHeaderCheckboxClicked: this.isHeaderCheckboxClicked,
            rowIndexes: indexes
          };
          this.onActionComplete(args, rowSelected);
        }
        this.isInteracted = false;
        this.updateRowProps(rowIndex);
        if (this.isSingleSel()) {
          break;
        }
      }
    };
    Selection2.prototype.getCollectionFromIndexes = function(startIndex, endIndex) {
      var indexes = [];
      var _a = startIndex <= endIndex ? {
        i: startIndex,
        max: endIndex
      } : {
        i: endIndex,
        max: startIndex
      }, i = _a.i, max = _a.max;
      for (; i <= max; i++) {
        indexes.push(i);
      }
      if (startIndex > endIndex) {
        indexes.reverse();
      }
      return indexes;
    };
    Selection2.prototype.clearRow = function() {
      this.clearRowCheck = true;
      this.clearRowSelection();
    };
    Selection2.prototype.clearRowCallBack = function() {
      if (this.isCancelDeSelect && this.parent.checkAllRows !== "Check") {
        return;
      }
      this.selectedRowIndexes = [];
      this.selectedRecords = [];
      this.selectRowIndex(-1);
      if (this.isSingleSel() && this.parent.isPersistSelection) {
        this.selectedRowState = {};
      }
    };
    Selection2.prototype.clearSelectedRow = function(index) {
      if (this.toggle) {
        var selectedEle = this.parent.getRowByIndex(index);
        if (!this.disableUI) {
          selectedEle.removeAttribute("aria-selected");
          this.addRemoveClassesForRow(selectedEle, false, true, "e-selectionbackground", "e-active");
        }
        this.removed = true;
        this.updatePersistCollection(selectedEle, false);
        this.updateCheckBoxes(selectedEle);
        this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(index), 1);
        this.selectedRecords.splice(this.selectedRecords.indexOf(this.parent.getRowByIndex(index)), 1);
      }
    };
    Selection2.prototype.updateRowProps = function(startIndex) {
      this.prevRowIndex = startIndex;
      this.isRowSelected = this.selectedRowIndexes.length && true;
    };
    Selection2.prototype.getPkValue = function(pkField, data) {
      return pkField ? isComplexField(pkField) ? getObject(pkField, data) : data["" + pkField] : data["" + pkField];
    };
    Selection2.prototype.updatePersistCollection = function(selectedRow, chkState) {
      var _this = this;
      if ((this.parent.isPersistSelection || this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) && !isNullOrUndefined(selectedRow)) {
        if (!this.parent.isPersistSelection) {
          this.ensureCheckboxFieldSelection();
        }
        var rowObj = this.getRowObj(selectedRow);
        var pKey_1 = rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null;
        if (pKey_1 === null) {
          return;
        }
        rowObj.isSelected = chkState;
        if (chkState && !this.isPartialSelection || this.isPartialSelection && rowObj.isSelectable && rowObj.isSelected) {
          this.selectedRowState["" + pKey_1] = chkState;
          delete this.unSelectedRowState["" + pKey_1];
          if (!this.persistSelectedData.some(function(data) {
            return _this.getPkValue(_this.primaryKey, data) === pKey_1;
          })) {
            this.persistSelectedData.push(rowObj.data);
          }
        } else {
          this.updatePersistDelete(pKey_1);
        }
      }
    };
    Selection2.prototype.updatePersistDelete = function(pKey, isPartialSelection) {
      var _this = this;
      delete this.selectedRowState["" + pKey];
      if (this.rmtHdrChkbxClicked) {
        this.unSelectedRowState["" + pKey] = true;
      }
      var index;
      var isPresent = this.persistSelectedData.some(function(data, i) {
        index = i;
        return _this.getPkValue(_this.primaryKey, data) === pKey;
      });
      if (isPresent) {
        this.persistSelectedData.splice(index, 1);
        if (isPartialSelection) {
          this.parent.partialSelectedRecords.splice(index, 1);
        }
      }
    };
    Selection2.prototype.updateCheckBoxes = function(row2, chkState, rowIndex) {
      if (!isNullOrUndefined(row2)) {
        var chkBox = row2.querySelector(".e-checkselect");
        if (!isNullOrUndefined(chkBox)) {
          removeAddCboxClasses(chkBox.nextElementSibling, chkState);
          setChecked(chkBox, chkState);
          if (isNullOrUndefined(this.checkedTarget) || !isNullOrUndefined(this.checkedTarget) && !this.checkedTarget.classList.contains("e-checkselectall")) {
            this.setCheckAllState(rowIndex);
          }
        }
      }
    };
    Selection2.prototype.updateRowSelection = function(selectedRow, startIndex, preventFocus) {
      if (!selectedRow) {
        return;
      }
      if (this.selectedRowIndexes.indexOf(startIndex) === -1) {
        this.selectedRowIndexes.push(startIndex);
        this.selectedRecords.push(selectedRow);
      }
      selectedRow.setAttribute("aria-selected", "true");
      this.updatePersistCollection(selectedRow, true);
      this.updateCheckBoxes(selectedRow, true);
      this.addRemoveClassesForRow(selectedRow, true, null, "e-selectionbackground", "e-active");
      if (!this.preventFocus) {
        var target = this.focus.getPrevIndexes().cellIndex ? selectedRow.cells[this.focus.getPrevIndexes().cellIndex] : selectedRow.querySelector(".e-selectionbackground:not(.e-hide):not(.e-detailrowcollapse):not(.e-detailrowexpand)");
        if (this.parent.contextMenuModule && this.mouseButton === 2) {
          target = this.parent.contextMenuModule.cell;
        }
        if (!target || preventFocus) {
          return;
        }
        this.focus.onClick({
          target
        }, true);
      }
    };
    Selection2.prototype.clearSelection = function() {
      this.checkSelectAllClicked = true;
      if (this.selectionSettings.persistSelection && this.persistSelectedData.length) {
        this.deSelectedData = iterateExtend(this.persistSelectedData);
      }
      if (!this.parent.isPersistSelection || this.parent.isPersistSelection && !this.parent.isEdit || !isNullOrUndefined(this.checkedTarget) && this.checkedTarget.classList.contains("e-checkselectall")) {
        var span = this.parent.element.querySelector(".e-gridpopup").querySelector("span");
        if (span.classList.contains("e-rowselect")) {
          span.classList.remove("e-spanclicked");
        }
        if (this.parent.isPersistSelection) {
          this.persistSelectedData = [];
          this.selectedRowState = {};
        }
        this.clearRowSelection();
        this.clearCellSelection();
        this.clearColumnSelection();
        this.prevRowIndex = void 0;
        this.prevCIdxs = void 0;
        this.prevECIdxs = void 0;
        this.enableSelectMultiTouch = false;
        this.isInteracted = false;
        this.checkSelectAllClicked = false;
        this.isHdrSelectAllClicked = false;
      }
    };
    Selection2.prototype.clearRowSelection = function() {
      var _this = this;
      if (this.isRowSelected) {
        var rows_1 = this.parent.getDataRows();
        var data_1 = [];
        var row_1 = [];
        var rowIndex_1 = [];
        var foreignKeyData_1 = [];
        var target_1 = this.target;
        this.isRowDeselect = true;
        for (var i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
          var currentRow = this.parent.editSettings.mode === "Batch" ? this.parent.getRows()[this.selectedRowIndexes[parseInt(i.toString(), 10)]] : this.parent.getDataRows()[this.selectedRowIndexes[parseInt(i.toString(), 10)]];
          var rowObj = this.getRowObj(currentRow);
          if (rowObj) {
            data_1.push(rowObj.data);
            row_1.push(currentRow);
            rowIndex_1.push(this.selectedRowIndexes[parseInt(i.toString(), 10)]);
            foreignKeyData_1.push(rowObj.foreignKeyData);
          }
        }
        if (this.selectionSettings.persistSelection && this.selectionSettings.checkboxMode !== "ResetOnRowClick") {
          this.isRowClicked = this.checkSelectAllClicked ? true : false;
        }
        this.rowDeselect(rowDeselecting, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, null, function() {
          if (_this.isCancelDeSelect && (_this.isRowClicked || _this.checkSelectAllClicked || _this.isInteracted && !_this.parent.isPersistSelection)) {
            if (_this.parent.isPersistSelection) {
              if (_this.getCheckAllStatus(_this.parent.element.querySelector(".e-checkselectall")) === "Intermediate") {
                for (var i2 = 0; i2 < _this.selectedRecords.length; i2++) {
                  _this.updatePersistCollection(_this.selectedRecords[parseInt(i2.toString(), 10)], true);
                }
              } else {
                _this.parent.checkAllRows = "Check";
                _this.updatePersistSelectedData(true);
              }
            }
            if (_this.clearRowCheck) {
              _this.clearRowCallBack();
              _this.clearRowCheck = false;
              if (_this.selectRowCheck) {
                _this.selectRowCallBack();
                _this.selectRowCheck = false;
              }
            }
            return;
          }
          var element = [].slice.call(rows_1.filter(function(record) {
            return record.hasAttribute("aria-selected");
          }));
          for (var j = 0; j < element.length; j++) {
            if (!_this.disableUI) {
              element[parseInt(j.toString(), 10)].removeAttribute("aria-selected");
              _this.addRemoveClassesForRow(element[parseInt(j.toString(), 10)], false, true, "e-selectionbackground", "e-active");
            }
            if (!_this.isPrevRowSelection) {
              _this.updatePersistCollection(element[parseInt(j.toString(), 10)], false);
            }
            _this.updateCheckBoxes(element[parseInt(j.toString(), 10)]);
          }
          _this.selectedRowIndexes = [];
          _this.selectedRecords = [];
          _this.isRowSelected = false;
          _this.selectRowIndex(-1);
          _this.isPrevRowSelection = false;
          _this.rowDeselect(rowDeselected, rowIndex_1, data_1, row_1, foreignKeyData_1, target_1, null, void 0, null);
          if (_this.clearRowCheck) {
            _this.clearRowCallBack();
            _this.clearRowCheck = false;
            if (_this.selectRowCheck) {
              _this.selectRowCallBack();
              _this.selectRowCheck = false;
            }
          }
        }, null);
        this.isRowDeselect = false;
      } else {
        if (this.clearRowCheck) {
          this.clearRowCallBack();
          this.clearRowCheck = false;
          if (this.selectRowCheck) {
            this.selectRowCallBack();
            this.selectRowCheck = false;
          }
        }
      }
    };
    Selection2.prototype.rowDeselect = function(type, rowIndex, data, row2, foreignKeyData2, target, mRow, rowDeselectCallBack, frozenRightRow) {
      var _this = this;
      if (this.selectionSettings.persistSelection && (this.isRowClicked || !this.isRowDeselect || this.checkSelectAllClicked || this.focus["activeKey"] && this.focus.currentInfo.element.classList.contains("e-gridchkbox") && this.focus["activeKey"] === "space") || !this.selectionSettings.persistSelection) {
        var cancl_1 = "cancel";
        var isSingleDeSel = rowIndex.length === 1 && this.deSelectedData.length === 1;
        var rowDeselectObj = {
          rowIndex: rowIndex[0],
          data: this.selectionSettings.persistSelection && this.parent.checkAllRows === "Uncheck" && !isSingleDeSel && this.selectionSettings.checkboxMode !== "ResetOnRowClick" ? this.deSelectedData : data,
          foreignKeyData: foreignKeyData2,
          cancel: false,
          isInteracted: this.isInteracted,
          isHeaderCheckboxClicked: this.isHeaderCheckboxClicked
        };
        if (type === "rowDeselected") {
          delete rowDeselectObj.cancel;
        }
        var rowInString = "row";
        var target_2 = "target";
        var rowidx = "rowIndex";
        var rowidxex = "rowIndexes";
        var dataTxt = "data";
        var foreignKey = "foreignKeyData";
        rowDeselectObj["" + rowInString] = row2;
        rowDeselectObj["" + target_2] = this.actualTarget;
        var isHeaderCheckBxClick = this.actualTarget && !isNullOrUndefined(closest(this.actualTarget, "thead"));
        if (isHeaderCheckBxClick || rowIndex.length > 1) {
          rowDeselectObj["" + rowidx] = rowIndex[0];
          rowDeselectObj["" + rowidxex] = rowIndex;
        } else if (rowIndex.length === 1) {
          rowDeselectObj["" + dataTxt] = rowDeselectObj["" + dataTxt][0];
          rowDeselectObj["" + rowInString] = rowDeselectObj["" + rowInString][0];
          rowDeselectObj["" + foreignKey] = rowDeselectObj["" + foreignKey][0];
          if (this.isAddRowsToSelection) {
            rowDeselectObj["" + rowidxex] = rowIndex;
          }
        }
        this.parent.trigger(type, rowDeselectObj, function(args) {
          _this.isCancelDeSelect = args["" + cancl_1];
          if (!_this.isCancelDeSelect || !_this.isRowClicked && !_this.isInteracted && !_this.checkSelectAllClicked) {
            _this.updatePersistCollection(row2[0], false);
            _this.updateCheckBoxes(row2[0], void 0, rowIndex[0]);
          }
          if (rowDeselectCallBack !== void 0) {
            rowDeselectCallBack();
          }
        });
      } else if (this.selectionSettings.persistSelection && !this.isInteracted) {
        if (rowDeselectCallBack !== void 0) {
          rowDeselectCallBack();
        }
      }
    };
    Selection2.prototype.getRowObj = function(row2) {
      if (row2 === void 0) {
        row2 = this.currentIndex;
      }
      if (isNullOrUndefined(row2)) {
        return {};
      }
      if (typeof row2 === "number") {
        row2 = this.parent.getRowByIndex(row2);
      }
      if (row2) {
        return this.parent.getRowObjectFromUID(row2.getAttribute("data-uid")) || {};
      }
      return {};
    };
    Selection2.prototype.selectCell = function(cellIndex, isToggle) {
      if (!this.isCellType()) {
        return;
      }
      var gObj = this.parent;
      var args;
      var selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
      this.currentIndex = cellIndex.rowIndex;
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (!this.isCellType() || !selectedCell || this.isEditing()) {
        return;
      }
      var isCellSelected = selectedCell.classList.contains("e-cellselectionbackground");
      isToggle = !isToggle ? isToggle : !isUndefined(this.prevCIdxs) && cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex && isCellSelected;
      if (!isToggle) {
        args = {
          data: selectedData,
          cellIndex,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest,
          previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0,
          cancel: false
        };
        var currentCell = "currentCell";
        args["" + currentCell] = selectedCell;
        var previousRowCellIndex = "previousRowCellIndex";
        args["" + previousRowCellIndex] = this.prevECIdxs;
        this.parent.trigger(cellSelecting, this.fDataUpdate(args), this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData));
        this.cellselected = true;
      } else {
        this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData)(args);
      }
    };
    Selection2.prototype.successCallBack = function(cellSelectingArgs, isToggle, cellIndex, selectedCell, selectedData) {
      var _this = this;
      return function(cellSelectingArgs2) {
        var cncl = "cancel";
        var currentCell = "currentCell";
        if (!isNullOrUndefined(cellSelectingArgs2) && cellSelectingArgs2["" + cncl] === true) {
          return;
        }
        if (!isToggle) {
          cellSelectingArgs2["" + currentCell] = cellSelectingArgs2["" + currentCell] ? cellSelectingArgs2["" + currentCell] : selectedCell;
        }
        _this.clearCell();
        if (!isToggle) {
          _this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
        }
        if (!isToggle) {
          var args = {
            data: selectedData,
            cellIndex,
            currentCell: selectedCell,
            selectedRowCellIndex: _this.selectedRowCellIndexes,
            previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : void 0
          };
          var previousRowCellIndex = "previousRowCellIndex";
          args["" + previousRowCellIndex] = _this.prevECIdxs;
          _this.updateCellProps(cellIndex, cellIndex);
          _this.onActionComplete(args, cellSelected);
        }
      };
    };
    Selection2.prototype.getCellIndex = function(rIdx, cIdx) {
      return this.parent.getCellFromIndex(rIdx, cIdx);
    };
    Selection2.prototype.selectCellsByRange = function(startIndex, endIndex) {
      var _this = this;
      if (!this.isCellType()) {
        return;
      }
      var gObj = this.parent;
      var selectedCell = this.parent.isSpan ? getCellFromRow(this.parent, startIndex.rowIndex, startIndex.cellIndex) : gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex);
      var min;
      var max;
      var stIndex = startIndex;
      var edIndex = endIndex = endIndex ? endIndex : startIndex;
      var cellIndexes;
      this.currentIndex = startIndex.rowIndex;
      var cncl = "cancel";
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
        return;
      }
      var args = {
        data: selectedData,
        cellIndex: startIndex,
        currentCell: selectedCell,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest,
        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
      };
      var previousRowCellIndex = "previousRowCellIndex";
      args["" + previousRowCellIndex] = this.prevECIdxs;
      this.parent.trigger(cellSelecting, this.fDataUpdate(args), function(cellSelectingArgs) {
        if (!isNullOrUndefined(cellSelectingArgs) && cellSelectingArgs["" + cncl] === true) {
          return;
        }
        _this.clearCell();
        if (startIndex.rowIndex > endIndex.rowIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }
        for (var i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {
          if (_this.selectionSettings.cellSelectionMode.indexOf("Box") < 0) {
            min = i === startIndex.rowIndex ? startIndex.cellIndex : 0;
            max = i === endIndex.rowIndex ? endIndex.cellIndex : _this.getLastColIndex(i);
          } else {
            min = startIndex.cellIndex;
            max = endIndex.cellIndex;
          }
          cellIndexes = [];
          for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {
            selectedCell = _this.parent.isSpan ? getCellFromRow(gObj, i, j) : gObj.getCellFromIndex(i, j);
            if (!selectedCell) {
              continue;
            }
            cellIndexes.push(j);
            _this.updateCellSelection(selectedCell);
            _this.addAttribute(selectedCell);
          }
          _this.selectedRowCellIndexes.push({
            rowIndex: i,
            cellIndexes
          });
        }
        var cellSelectedArgs = {
          data: selectedData,
          cellIndex: edIndex,
          currentCell: gObj.getCellFromIndex(edIndex.rowIndex, edIndex.cellIndex),
          selectedRowCellIndex: _this.selectedRowCellIndexes,
          previousRowCell: _this.prevECIdxs ? _this.getCellIndex(_this.prevECIdxs.rowIndex, _this.prevECIdxs.cellIndex) : void 0
        };
        var previousRowCellIndex2 = "previousRowCellIndex";
        cellSelectedArgs["" + previousRowCellIndex2] = _this.prevECIdxs;
        if (!_this.isDragged) {
          _this.onActionComplete(cellSelectedArgs, cellSelected);
          _this.cellselected = true;
        }
        _this.updateCellProps(stIndex, edIndex);
      });
    };
    Selection2.prototype.selectCells = function(rowCellIndexes) {
      if (!this.isCellType()) {
        return;
      }
      var gObj = this.parent;
      var selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0]);
      this.currentIndex = rowCellIndexes[0].rowIndex;
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
        return;
      }
      var cellSelectArgs = {
        data: selectedData,
        cellIndex: rowCellIndexes[0].cellIndexes[0],
        currentCell: selectedCell,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest,
        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
      };
      var previousRowCellIndex = "previousRowCellIndex";
      cellSelectArgs["" + previousRowCellIndex] = this.prevECIdxs;
      this.onActionBegin(cellSelectArgs, cellSelecting);
      for (var i = 0, len = rowCellIndexes.length; i < len; i++) {
        for (var j = 0, cellLen = rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes.length; j < cellLen; j++) {
          selectedCell = gObj.getCellFromIndex(rowCellIndexes[parseInt(i.toString(), 10)].rowIndex, rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]);
          if (!selectedCell) {
            continue;
          }
          this.updateCellSelection(selectedCell);
          this.addAttribute(selectedCell);
          this.addRowCellIndex({
            rowIndex: rowCellIndexes[parseInt(i.toString(), 10)].rowIndex,
            cellIndex: rowCellIndexes[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]
          });
        }
      }
      this.updateCellProps({
        rowIndex: rowCellIndexes[0].rowIndex,
        cellIndex: rowCellIndexes[0].cellIndexes[0]
      }, {
        rowIndex: rowCellIndexes[0].rowIndex,
        cellIndex: rowCellIndexes[0].cellIndexes[0]
      });
      var cellSelectedArgs = {
        data: selectedData,
        cellIndex: rowCellIndexes[0].cellIndexes[0],
        currentCell: selectedCell,
        selectedRowCellIndex: this.selectedRowCellIndexes,
        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
      };
      var prvRowCellIndex = "previousRowCellIndex";
      cellSelectedArgs["" + prvRowCellIndex] = this.prevECIdxs;
      this.onActionComplete(cellSelectedArgs, cellSelected);
    };
    Selection2.prototype.addCellsToSelection = function(cellIndexes) {
      if (!this.isCellType()) {
        return;
      }
      var gObj = this.parent;
      var selectedCell;
      var index;
      this.currentIndex = cellIndexes[0].rowIndex;
      var cncl = "cancel";
      var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
      if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
        return;
      }
      this.hideAutoFill();
      var rowObj;
      rowObj = gObj.getRowsObject()[cellIndexes[0].rowIndex];
      if (gObj.groupSettings.columns.length > 0) {
        rowObj = gObj.getRowObjectFromUID(this.target.parentElement.getAttribute("data-uid"));
      }
      var foreignKeyData2 = [];
      for (var _i = 0, cellIndexes_1 = cellIndexes; _i < cellIndexes_1.length; _i++) {
        var cellIndex = cellIndexes_1[_i];
        for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
          if (this.selectedRowCellIndexes[parseInt(i.toString(), 10)].rowIndex === cellIndex.rowIndex) {
            index = i;
            break;
          }
        }
        selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
        var idx = cellIndex.cellIndex;
        if (gObj.groupSettings.columns.length > 0) {
          foreignKeyData2.push(rowObj.cells[idx + gObj.groupSettings.columns.length].foreignKeyData);
        } else {
          foreignKeyData2.push(rowObj.cells[parseInt(idx.toString(), 10)].foreignKeyData);
        }
        var args = {
          cancel: false,
          data: selectedData,
          cellIndex: cellIndexes[0],
          isShiftPressed: this.isMultiShiftRequest,
          currentCell: selectedCell,
          isCtrlPressed: this.isMultiCtrlRequest,
          previousRowCell: this.prevECIdxs ? gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
        };
        var prvRowCellIndex = "previousRowCellIndex";
        args["" + prvRowCellIndex] = this.prevECIdxs;
        var isUnSelected = index > -1;
        if (isUnSelected) {
          var selectedCellIdx = this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes;
          if (selectedCellIdx.indexOf(cellIndex.cellIndex) > -1 || this.selectionSettings.mode === "Both" && selectedCell.classList.contains("e-gridchkbox") && !selectedCell.getAttribute("aria-selected")) {
            this.cellDeselect(cellDeselecting, [{
              rowIndex: cellIndex.rowIndex,
              cellIndexes: [cellIndex.cellIndex]
            }], selectedData, [selectedCell], foreignKeyData2);
            selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1);
            if (selectedCellIdx.length === 0) {
              this.selectedRowCellIndexes.splice(index, 1);
            }
            selectedCell.classList.remove("e-cellselectionbackground");
            selectedCell.removeAttribute("aria-selected");
            this.cellDeselect(cellDeselected, [{
              rowIndex: cellIndex.rowIndex,
              cellIndexes: [cellIndex.cellIndex]
            }], selectedData, [selectedCell], foreignKeyData2);
          } else {
            isUnSelected = false;
            this.onActionBegin(args, cellSelecting);
            this.addRowCellIndex({
              rowIndex: cellIndex.rowIndex,
              cellIndex: cellIndex.cellIndex
            });
            this.updateCellSelection(selectedCell);
            this.addAttribute(selectedCell);
          }
        } else {
          this.onActionBegin(args, cellSelecting);
          if (!isNullOrUndefined(args) && args["" + cncl] === true) {
            return;
          }
          this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
        }
        if (!isUnSelected) {
          var cellSelectedArgs = {
            data: selectedData,
            cellIndex: cellIndexes[0],
            currentCell: selectedCell,
            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0,
            selectedRowCellIndex: this.selectedRowCellIndexes
          };
          cellSelectedArgs["" + prvRowCellIndex] = this.prevECIdxs;
          this.onActionComplete(cellSelectedArgs, cellSelected);
          this.cellselected = true;
        }
        this.updateCellProps(cellIndex, cellIndex);
      }
    };
    Selection2.prototype.getColIndex = function(rowIndex, index) {
      var col = this.parent.getColumnByIndex(index);
      var cells = getCellsByTableName(this.parent, col, rowIndex);
      if (cells) {
        for (var m = 0; m < cells.length; m++) {
          var colIndex = parseInt(cells[parseInt(m.toString(), 10)].getAttribute(dataColIndex), 10);
          if (colIndex === index) {
            return m;
          }
        }
      }
      return -1;
    };
    Selection2.prototype.getLastColIndex = function(rowIndex) {
      var cells = this.parent.getDataRows()[parseInt(rowIndex.toString(), 10)].querySelectorAll("td.e-rowcell");
      return parseInt(cells[cells.length - 1].getAttribute(dataColIndex), 10);
    };
    Selection2.prototype.clearCell = function() {
      this.clearCellSelection();
    };
    Selection2.prototype.cellDeselect = function(type, cellIndexes, data, cells, foreignKeyData2) {
      var cancl = "cancel";
      if (cells && cells.length > 0) {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
          var cell = cells_1[_i];
          if (cell && cell.classList.contains(gridChkBox)) {
            this.updateCheckBoxes(closest(cell, "tr"));
          }
        }
      }
      var args = {
        cells,
        data,
        cellIndexes,
        foreignKeyData: foreignKeyData2,
        cancel: false
      };
      this.parent.trigger(type, args);
      this.isPreventCellSelect = args["" + cancl];
    };
    Selection2.prototype.updateCellSelection = function(selectedCell, rowIndex, cellIndex) {
      if (!isNullOrUndefined(rowIndex)) {
        this.addRowCellIndex({
          rowIndex,
          cellIndex
        });
      }
      selectedCell.classList.add("e-cellselectionbackground");
      if (selectedCell.classList.contains(gridChkBox)) {
        this.updateCheckBoxes(closest(selectedCell, "tr"), true);
      }
      this.addAttribute(selectedCell);
    };
    Selection2.prototype.addAttribute = function(cell) {
      this.target = cell;
      if (!isNullOrUndefined(cell)) {
        cell.setAttribute("aria-selected", "true");
        if (!this.preventFocus) {
          this.focus.onClick({
            target: cell
          }, true);
        }
      }
    };
    Selection2.prototype.updateCellProps = function(startIndex, endIndex) {
      this.prevCIdxs = startIndex;
      this.prevECIdxs = endIndex;
      this.isCellSelected = this.selectedRowCellIndexes.length && true;
    };
    Selection2.prototype.addRowCellIndex = function(rowCellIndex) {
      var isRowAvail;
      var index;
      for (var i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
        if (this.selectedRowCellIndexes[parseInt(i.toString(), 10)].rowIndex === rowCellIndex.rowIndex) {
          isRowAvail = true;
          index = i;
          break;
        }
      }
      if (isRowAvail) {
        if (this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0) {
          this.selectedRowCellIndexes[parseInt(index.toString(), 10)].cellIndexes.push(rowCellIndex.cellIndex);
        }
      } else {
        this.selectedRowCellIndexes.push({
          rowIndex: rowCellIndex.rowIndex,
          cellIndexes: [rowCellIndex.cellIndex]
        });
      }
    };
    Selection2.prototype.clearCellSelection = function() {
      if (this.isCellSelected) {
        var gObj = this.parent;
        var selectedCells = this.getSelectedCellsElement();
        var rowCell2 = this.selectedRowCellIndexes;
        var data = [];
        var cells = [];
        var foreignKeyData2 = [];
        var currentViewData = this.getCurrentBatchRecordChanges();
        this.hideAutoFill();
        for (var i = 0, len = rowCell2.length; i < len; i++) {
          data.push(currentViewData[rowCell2[parseInt(i.toString(), 10)].rowIndex]);
          var rowObj = this.getRowObj(rowCell2[parseInt(i.toString(), 10)].rowIndex);
          for (var j = 0, cLen = rowCell2[parseInt(i.toString(), 10)].cellIndexes.length; j < cLen; j++) {
            if (rowObj.cells) {
              foreignKeyData2.push(rowObj.cells[rowCell2[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]].foreignKeyData);
            }
            cells.push(gObj.getCellFromIndex(rowCell2[parseInt(i.toString(), 10)].rowIndex, rowCell2[parseInt(i.toString(), 10)].cellIndexes[parseInt(j.toString(), 10)]));
          }
        }
        this.cellDeselect(cellDeselecting, rowCell2, data, cells, foreignKeyData2);
        if (this.isPreventCellSelect === true) {
          return;
        }
        for (var i = 0, len = selectedCells.length; i < len; i++) {
          selectedCells[parseInt(i.toString(), 10)].classList.remove("e-cellselectionbackground");
          selectedCells[parseInt(i.toString(), 10)].removeAttribute("aria-selected");
        }
        if (this.bdrElement) {
          this.showHideBorders("none");
        }
        this.selectedRowCellIndexes = [];
        this.isCellSelected = false;
        if (!this.isDragged && this.cellselected) {
          this.cellDeselect(cellDeselected, rowCell2, data, cells, foreignKeyData2);
        }
      }
    };
    Selection2.prototype.getSelectedCellsElement = function() {
      var gObj = this.parent;
      var rows = gObj.getDataRows();
      var cells = [];
      for (var i = 0, len = rows.length; i < len; i++) {
        cells = cells.concat([].slice.call(rows[parseInt(i.toString(), 10)].getElementsByClassName("e-cellselectionbackground")));
      }
      return cells;
    };
    Selection2.prototype.mouseMoveHandler = function(e) {
      e.preventDefault();
      this.stopTimer();
      var gBRect = this.parent.element.getBoundingClientRect();
      var x1 = this.x;
      var y1 = this.y;
      var position = getPosition(e);
      var x2 = position.x - gBRect.left;
      var y2 = position.y - gBRect.top;
      var tmp;
      var target = closest(e.target, "tr");
      this.isDragged = true;
      if (!this.isCellDrag) {
        if (!target) {
          target = closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), "tr");
        }
        if (x1 > x2) {
          tmp = x2;
          x2 = x1;
          x1 = tmp;
        }
        if (y1 > y2) {
          tmp = y2;
          y2 = y1;
          y1 = tmp;
        }
        this.element.style.left = x1 + "px";
        this.element.style.top = y1 + "px";
        this.element.style.width = x2 - x1 + "px";
        this.element.style.height = y2 - y1 + "px";
      }
      if (target && !e.ctrlKey && !e.shiftKey) {
        var rowIndex = parseInt(target.getAttribute(dataRowIndex), 10);
        if (!this.isCellDrag) {
          this.hideAutoFill();
          this.selectRowsByRange(this.startDIndex, rowIndex);
          this.isRowDragSelected = true;
        } else {
          var td = parentsUntil(e.target, rowCell);
          if (td) {
            this.startAFCell = this.startCell;
            this.endAFCell = parentsUntil(e.target, rowCell);
            if (rowIndex > -1) {
              this.selectLikeExcel(e, rowIndex, parseInt(td.getAttribute(dataColIndex), 10));
            }
          }
        }
      }
      if (!e.ctrlKey && !e.shiftKey && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && !this.parent.enableColumnVirtualization && !this.parent.groupSettings.columns.length && this.isCellDrag) {
        this.updateScrollPosition(e, position, this.parent.getContent());
      }
    };
    Selection2.prototype.updateScrollPosition = function(mouseEvent, position, scrollElement) {
      var _this = this;
      var clientRect = scrollElement.getBoundingClientRect();
      if (clientRect.left >= position.x - 20 - (this.parent.enableRtl && this.parent.height !== "auto" ? getScrollBarWidth() : 0)) {
        this.timer1 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, _this.parent.enableRtl ? "right" : "left", mouseEvent);
        }, 200);
      } else if (clientRect.left + scrollElement.clientWidth - 20 - (!this.parent.enableRtl && this.parent.height !== "auto" ? getScrollBarWidth() : 0) < position.x) {
        this.timer1 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, _this.parent.enableRtl ? "left" : "right", mouseEvent);
        }, 200);
      }
      if (clientRect.top >= position.y - this.parent.getRowHeight() * 0.5) {
        this.timer2 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, "up", mouseEvent);
        }, 200);
      } else if (clientRect.top + scrollElement.clientHeight - this.parent.getRowHeight() * 0.5 - (scrollElement.firstElementChild.scrollWidth > scrollElement.firstElementChild.offsetWidth ? getScrollBarWidth() : 0) <= position.y) {
        this.timer2 = window.setInterval(function() {
          _this.setScrollPosition(scrollElement.firstElementChild, "down", mouseEvent);
        }, 200);
      }
    };
    Selection2.prototype.stopTimer = function() {
      if (this.timer1) {
        window.clearInterval(this.timer1);
        this.timer1 = null;
      }
      if (this.timer2) {
        window.clearInterval(this.timer2);
        this.timer2 = null;
      }
      this.preventFocus = false;
    };
    Selection2.prototype.setScrollPosition = function(scrollElement, direction, mouseEvent) {
      var rowIndex = -1;
      var columnIndex = -1;
      if (this.endAFCell || this.prevECIdxs) {
        rowIndex = this.endAFCell ? parseInt(this.endAFCell.getAttribute("index"), 10) : this.prevECIdxs.rowIndex;
        columnIndex = this.endAFCell ? parseInt(this.endAFCell.getAttribute("data-colindex"), 10) : this.prevECIdxs.cellIndex;
      }
      switch (direction) {
        case "up":
          if (mouseEvent && closest(mouseEvent.target, ".e-headercontent")) {
            return;
          }
          if (this.isAutoFillSel && this.startAFCell && this.selectedRowCellIndexes.length && (this.selectedRowCellIndexes.length === 1 && this.startAFCell !== this.startCell || this.selectedRowCellIndexes.length > 1 && this.startAFCell.getBoundingClientRect().top > 0)) {
            rowIndex = parseInt(this.startAFCell.getAttribute("index"), 10);
          }
          rowIndex -= 1;
          if (this.parent.frozenRows) {
            rowIndex += this.parent.frozenRows + 1;
          }
          rowIndex < 1 ? scrollElement.scrollTop = 0 : scrollElement.scrollTop -= this.parent.getRowByIndex(rowIndex).offsetHeight;
          break;
        case "down":
          if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
            rowIndex = parseInt(this.startAFCell.getAttribute("index"), 10);
          }
          if (rowIndex < this.parent.getRows().length - 1) {
            rowIndex += 1;
            if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
              this.startAFCell = this.parent.getCellFromIndex(rowIndex, this.selectedRowCellIndexes[0].cellIndexes[0]);
            }
            scrollElement.scrollTop += this.parent.getRowByIndex(rowIndex).offsetHeight;
          } else {
            scrollElement.scrollTop = scrollElement.scrollHeight;
          }
          break;
        case "left":
          if (columnIndex > 0 && rowIndex > -1) {
            if (this.isAutoFillSel && this.startAFCell && this.selectedRowCellIndexes.length && (this.selectedRowCellIndexes[0].cellIndexes.length > 0 && this.startAFCell !== this.startCell || this.selectedRowCellIndexes[0].cellIndexes.length > 1 && (!this.parent.enableRtl && this.startAFCell.getBoundingClientRect().left > 0 || this.parent.enableRtl && this.startAFCell.getBoundingClientRect().left < this.parent.element.offsetWidth))) {
              columnIndex = parseInt(this.startAFCell.getAttribute("data-colindex"), 10);
            }
            var nextElement_1 = this.findNextCell(scrollElement, direction, columnIndex, rowIndex);
            columnIndex = nextElement_1 ? parseInt(nextElement_1.getAttribute("data-colindex"), 10) : -1;
            if (this.parent.enableRtl && nextElement_1) {
              columnIndex < 1 ? scrollElement.scrollLeft = scrollElement.scrollWidth : scrollElement.scrollLeft += nextElement_1.offsetWidth;
            } else if (nextElement_1) {
              columnIndex < 1 ? scrollElement.scrollLeft = 0 : scrollElement.scrollLeft -= nextElement_1.offsetWidth;
            }
          }
          break;
        case "right":
          if (this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
            columnIndex = parseInt(this.startAFCell.getAttribute("data-colindex"), 10);
          }
          var currentElement = this.parent.getCellFromIndex(rowIndex, columnIndex);
          var nextElement = this.findNextCell(scrollElement, direction, columnIndex, rowIndex);
          if (nextElement && this.isAutoFillSel && this.startAFCell && this.startAFCell !== this.startCell) {
            this.startAFCell = this.parent.getCellFromIndex(this.selectedRowCellIndexes[0].rowIndex, parseInt(nextElement.getAttribute("data-colindex"), 10));
          }
          columnIndex = nextElement ? parseInt(nextElement.getAttribute("data-colindex"), 10) : -1;
          if (this.parent.enableRtl && nextElement) {
            columnIndex < this.parent.columns.length - 1 ? scrollElement.scrollLeft -= currentElement.offsetWidth : scrollElement.scrollLeft = -scrollElement.scrollWidth;
          } else if (nextElement) {
            columnIndex < this.parent.columns.length - 1 ? scrollElement.scrollLeft += currentElement.offsetWidth : scrollElement.scrollLeft = scrollElement.scrollWidth;
          }
          if (this.isAutoFillSel && (columnIndex === this.parent.columns.length - 1 || columnIndex === -1) && this.startAFCell && this.endAFCell) {
            this.positionAFBorders();
            scrollElement.scrollLeft = this.parent.enableRtl ? -scrollElement.scrollWidth : scrollElement.scrollWidth;
          }
          break;
      }
      if (rowIndex > -1 && rowIndex < this.parent.getRows().length && columnIndex > -1) {
        var mouseEvent_1 = {
          target: this.parent.getCellFromIndex(rowIndex, columnIndex)
        };
        if (this.isAutoFillSel && mouseEvent_1.target.classList.contains("e-cellselectionbackground") && (direction === "down" && parseInt(mouseEvent_1.target.getAttribute("index"), 10) === this.parent.getRows().length - 1 || direction === "right" && parseInt(mouseEvent_1.target.getAttribute("data-colindex"), 10) === this.parent.columns.length - 1)) {
          return;
        }
        this.endAFCell = mouseEvent_1.target;
        this.preventFocus = true;
        this.selectLikeExcel(mouseEvent_1, rowIndex, columnIndex);
      }
    };
    Selection2.prototype.findNextCell = function(scrollElement, direction, columnIndex, rowIndex) {
      var nextElement = this.parent.getCellFromIndex(rowIndex, direction === "left" ? columnIndex - 1 : columnIndex + 1);
      if (nextElement && nextElement.classList.contains("e-hide")) {
        var siblingEles = nextElement.closest("tr").querySelectorAll(".e-rowcell:not(.e-hide)");
        var nextEleInd = Array.from(siblingEles).indexOf(nextElement.nextElementSibling);
        if (nextEleInd > 0 && nextEleInd < siblingEles.length - 1) {
          nextElement = siblingEles[nextEleInd + (direction === "left" ? -1 : 1)];
          return nextElement;
        } else {
          scrollElement.scrollLeft = 0;
          return null;
        }
      }
      return nextElement;
    };
    Selection2.prototype.selectLikeExcel = function(e, rowIndex, cellIndex) {
      if (!this.isAutoFillSel) {
        this.clearCellSelection();
        this.selectCellsByRange({
          rowIndex: this.startDIndex,
          cellIndex: this.startDCellIndex
        }, {
          rowIndex,
          cellIndex
        });
        this.drawBorders();
      } else {
        this.showAFBorders();
        this.selectLikeAutoFill(e);
      }
    };
    Selection2.prototype.setFrozenBorders = function(parentEle, border, bdrStr) {
      var width = border.style.borderWidth.toString().split(" ");
      var strCell = ["", "e-leftfreeze", "e-unfreeze", "e-leftfreeze", "e-unfreeze", "e-rightfreeze", "e-rightfreeze"];
      var cells = [].slice.call(parentEle.querySelectorAll(".e-cellselectionbackground." + strCell["" + bdrStr])).filter(function(ele) {
        return ele.style.display === "";
      });
      var fixedCells = [].slice.call(parentEle.querySelectorAll(".e-cellselectionbackground.e-fixedfreeze")).filter(function(ele) {
        return ele.style.display === "";
      });
      var isRtl = this.parent.enableRtl;
      if (cells.length) {
        var firstRowIdx = cells[0].getAttribute("index");
        var firstColIdx = cells[0].getAttribute("data-colindex");
        var lastRowIdx = cells[cells.length - 1].getAttribute("index");
        var lastColIdx = cells[cells.length - 1].getAttribute("data-colindex");
        for (var i = 0; i < cells.length; i++) {
          if (cells[parseInt(i.toString(), 10)].getAttribute("index") === firstRowIdx && (width.length === 1 || width.length === 3 && parseInt(width[0], 10) === 2 || width.length === 4 && parseInt(width[0], 10) === 2)) {
            cells[parseInt(i.toString(), 10)].classList.add("e-xlsel-top-border");
          }
          if (cells[parseInt(i.toString(), 10)].getAttribute("data-colindex") === firstColIdx && (width.length === 1 || width.length === 3 && parseInt(width[1], 10) === 2 || width.length === 4 && (!isRtl && parseInt(width[3], 10) === 2 || isRtl && parseInt(width[1], 10) === 2))) {
            cells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-right-border" : "e-xlsel-left-border");
          }
          if (cells[parseInt(i.toString(), 10)].getAttribute("index") === lastRowIdx && (width.length === 1 || width.length === 3 && parseInt(width[2], 10) === 2 || width.length === 4 && parseInt(width[2], 10) === 2)) {
            cells[parseInt(i.toString(), 10)].classList.add("e-xlsel-bottom-border");
          }
          if (cells[parseInt(i.toString(), 10)].getAttribute("data-colindex") === lastColIdx && (width.length === 1 || width.length === 3 && parseInt(width[1], 10) === 2 || width.length === 4 && !isRtl && parseInt(width[1], 10) === 2 || isRtl && parseInt(width[3], 10) === 2)) {
            cells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-left-border" : "e-xlsel-right-border");
          }
        }
      }
      if (fixedCells.length) {
        var firstRowIdx = fixedCells[0].getAttribute("index");
        var firstColIdx = fixedCells[0].getAttribute("data-colindex");
        var lastRowIdx = fixedCells[fixedCells.length - 1].getAttribute("index");
        var lastColIdx = fixedCells[fixedCells.length - 1].getAttribute("data-colindex");
        for (var i = 0; i < fixedCells.length; i++) {
          var idx = fixedCells[parseInt(i.toString(), 10)].getAttribute("index");
          var colIdx = fixedCells[parseInt(i.toString(), 10)].getAttribute("data-colindex");
          if (idx === firstRowIdx && (!this.parent.getHeaderContent().querySelector(".e-cellselectionbackground.e-fixedfreeze") && parentsUntil(parentEle, "e-content") || !parentsUntil(parentEle, "e-content"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add("e-xlsel-top-border");
          }
          if (idx === lastRowIdx && (!this.parent.getContent().querySelector(".e-cellselectionbackground.e-fixedfreeze") && parentsUntil(parentEle, "e-headercontent") || !parentsUntil(parentEle, "e-headercontent"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add("e-xlsel-bottom-border");
          }
          var preCell = fixedCells[parseInt(i.toString(), 10)].parentElement.children[parseInt(colIdx, 10) - 1];
          if (colIdx === firstColIdx && (!preCell || preCell && !preCell.classList.contains("e-cellselectionbackground"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-right-border" : "e-xlsel-left-border");
          }
          var nextCell = fixedCells[parseInt(i.toString(), 10)].parentElement.children[parseInt(colIdx, 10) + 1];
          if (colIdx === lastColIdx && (!nextCell || nextCell && !nextCell.classList.contains("e-cellselectionbackground"))) {
            fixedCells[parseInt(i.toString(), 10)].classList.add(isRtl ? "e-xlsel-left-border" : "e-xlsel-right-border");
          }
        }
      }
    };
    Selection2.prototype.refreshFrozenBorders = function() {
      if (this.bdrElement) {
        this.setFrozenBorders(this.parent.getContentTable(), this.bdrElement, "1");
        if (this.parent.isFrozenGrid() && this.parent.getFrozenMode() === leftRight) {
          this.setFrozenBorders(this.parent.getContentTable(), this.frcBdrElement, "5");
        }
        if (this.parent.frozenRows) {
          this.setFrozenBorders(this.parent.getHeaderTable(), this.fhBdrElement, "3");
          if (this.parent.isFrozenGrid() && this.parent.getFrozenMode() === leftRight) {
            this.setFrozenBorders(this.parent.getHeaderTable(), this.frhBdrElement, "6");
          }
        }
      }
    };
    Selection2.prototype.drawBorders = function() {
      if (this.selectionSettings.cellSelectionMode === "BoxWithBorder" && this.selectedRowCellIndexes.length && !this.parent.isEdit) {
        this.parent.element.classList.add("e-enabledboxbdr");
        if (!this.bdrElement) {
          this.createBorders();
        }
        this.positionBorders();
        if (this.parent.isFrozenGrid()) {
          this.showHideBorders("none", true);
          this.refreshFrozenBorders();
        }
      } else {
        this.showHideBorders("none");
      }
    };
    Selection2.prototype.isLastCell = function(cell) {
      var cells = [].slice.call(cell.parentElement.querySelectorAll(".e-rowcell:not(.e-hide)"));
      return cells[cells.length - 1] === cell;
    };
    Selection2.prototype.isLastRow = function(cell) {
      var rows = [].slice.call(closest(cell, tbody).querySelectorAll(".e-row:not(.e-hiddenrow)"));
      return cell.parentElement === rows[rows.length - 1];
    };
    Selection2.prototype.isFirstRow = function(cell) {
      var rows = [].slice.call(closest(cell, tbody).querySelectorAll(".e-row:not(.e-hiddenrow)"));
      return cell.parentElement === rows[0];
    };
    Selection2.prototype.isFirstCell = function(cell) {
      var cells = [].slice.call(cell.parentElement.querySelectorAll(".e-rowcell:not(.e-hide)"));
      return cells[0] === cell;
    };
    Selection2.prototype.setBorders = function(parentEle, border, bdrStr) {
      var cells = [].slice.call(parentEle.getElementsByClassName("e-cellselectionbackground")).filter(function(ele) {
        return ele.style.display === "";
      });
      if (cells.length && this.parent.isFrozenGrid()) {
        var strCell = ["", "e-leftfreeze", "e-unfreeze", "e-leftfreeze", "e-unfreeze", "e-rightfreeze", "e-rightfreeze"];
        cells = [].slice.call(parentEle.querySelectorAll(".e-cellselectionbackground." + strCell["" + bdrStr] + ":not(.e-hide)")).filter(function(ele) {
          return ele.style.display === "";
        });
      }
      if (cells.length) {
        var isFrozen = this.parent.isFrozenGrid();
        var start = cells[0];
        var end = cells[cells.length - 1];
        var stOff = start.getBoundingClientRect();
        var endOff = end.getBoundingClientRect();
        var parentOff = start.offsetParent.getBoundingClientRect();
        if (start.offsetParent.classList.contains("e-content") || start.offsetParent.classList.contains("e-headercontent")) {
          parentOff = start.offsetParent.querySelector("table").getBoundingClientRect();
        }
        var rowHeight2 = !isFrozen && this.isLastRow(end) && (bdrStr === "1" || bdrStr === "2" || bdrStr === "5") ? 2 : 0;
        var topOffSet = 0;
        var leftOffset = isFrozen && (bdrStr === "2" || bdrStr === "4") && this.isFirstCell(start) ? 1 : 0;
        var rightOffset = (this.parent.getFrozenMode() === "Right" && (bdrStr === "1" || bdrStr === "3") || this.parent.getFrozenMode() === leftRight && (bdrStr === "5" || bdrStr === "6")) && this.isFirstCell(start) ? 1 : 0;
        if (this.parent.enableRtl) {
          border.style.right = parentOff.right - stOff.right - leftOffset + "px";
          border.style.width = stOff.right - endOff.left + leftOffset + 1 + "px";
        } else {
          border.style.left = stOff.left - parentOff.left - leftOffset - rightOffset + "px";
          border.style.width = endOff.right - stOff.left + leftOffset - rightOffset + 1 + "px";
        }
        border.style.top = stOff.top - parentOff.top - topOffSet + "px";
        border.style.height = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + (isFrozen ? 0 : 1) - (stOff.top - parentOff.top) - rowHeight2 + topOffSet + "px" : endOff.height + topOffSet - rowHeight2 + (isFrozen ? 0 : 1) + "px";
        this.selectDirection += bdrStr;
      } else {
        border.style.display = "none";
      }
    };
    Selection2.prototype.positionBorders = function() {
      this.updateStartEndCells();
      if (!this.startCell || !this.bdrElement || !this.selectedRowCellIndexes.length) {
        return;
      }
      this.selectDirection = "";
      this.showHideBorders("");
      this.setBorders(this.parent.getContentTable(), this.bdrElement, "1");
      if (this.parent.isFrozenGrid()) {
        this.setBorders(this.parent.getContentTable(), this.mcBdrElement, "2");
        if (this.parent.getFrozenMode() === leftRight) {
          this.setBorders(this.parent.getContentTable(), this.frcBdrElement, "5");
        }
      }
      if (this.parent.frozenRows) {
        this.setBorders(this.parent.getHeaderTable(), this.fhBdrElement, "3");
        if (this.parent.isFrozenGrid()) {
          this.setBorders(this.parent.getHeaderTable(), this.mhBdrElement, "4");
          if (this.parent.getFrozenMode() === leftRight) {
            this.setBorders(this.parent.getHeaderTable(), this.frhBdrElement, "6");
          }
        }
      }
      this.applyBorders(this.selectDirection);
    };
    Selection2.prototype.applyBothFrozenBorders = function(str) {
      var rtl = this.parent.enableRtl;
      switch (str.length) {
        case 6:
          {
            this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
            this.mcBdrElement.style.borderWidth = this.bottom;
            this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
            this.mhBdrElement.style.borderWidth = this.top;
            this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
            this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
          }
          break;
        case 4:
          {
            if (str.includes("1") && str.includes("2") && str.includes("3") && str.includes("4")) {
              this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
              this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
              this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
              this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
            }
            if (str.includes("2") && str.includes("4") && str.includes("5") && str.includes("6")) {
              this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
              this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
              this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
              this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
            }
          }
          break;
        case 3:
          {
            this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
            this.mcBdrElement.style.borderWidth = this.top_bottom;
            this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
            if (this.parent.frozenRows) {
              this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.mhBdrElement.style.borderWidth = this.top_bottom;
              this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
            }
          }
          break;
        case 2:
          {
            if (str.includes("1")) {
              this.mcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              if (this.parent.frozenRows) {
                this.fhBdrElement.style.borderWidth = this.top_right_left;
              }
            }
            if (str.includes("2")) {
              this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              if (this.parent.frozenRows) {
                this.mhBdrElement.style.borderWidth = this.top_right_left;
              }
            }
            if (str.includes("3")) {
              this.mhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              this.bdrElement.style.borderWidth = this.right_bottom_left;
            }
            if (str.includes("4")) {
              this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.frhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
              this.mcBdrElement.style.borderWidth = this.right_bottom_left;
            }
            if (str.includes("5")) {
              this.mcBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              if (this.parent.frozenRows) {
                this.frhBdrElement.style.borderWidth = this.top_right_left;
              }
            }
            if (str.includes("6")) {
              this.mhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
              this.frcBdrElement.style.borderWidth = this.right_bottom_left;
            }
          }
          break;
        default:
          this.bdrElement.style.borderWidth = this.all_border;
          this.mcBdrElement.style.borderWidth = this.all_border;
          this.frcBdrElement.style.borderWidth = this.all_border;
          if (this.parent.frozenRows) {
            this.fhBdrElement.style.borderWidth = this.all_border;
            this.mhBdrElement.style.borderWidth = this.all_border;
            this.frhBdrElement.style.borderWidth = this.all_border;
          }
          break;
      }
    };
    Selection2.prototype.applyBorders = function(str) {
      var rtl = this.parent.enableRtl;
      if (this.parent.getFrozenMode() === leftRight) {
        this.applyBothFrozenBorders(str);
      } else {
        switch (str.length) {
          case 4:
            {
              if (this.parent.getFrozenMode() === "Right") {
                this.bdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                this.fhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
              } else {
                this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
              }
            }
            break;
          case 2:
            {
              if (this.parent.getFrozenMode() === "Right") {
                this.bdrElement.style.borderWidth = str.includes("2") ? rtl ? this.top_bottom_left : this.top_right_bottom : this.right_bottom_left;
                this.mcBdrElement.style.borderWidth = str.includes("1") ? rtl ? this.top_right_bottom : this.top_bottom_left : this.right_bottom_left;
                if (this.parent.frozenRows) {
                  this.fhBdrElement.style.borderWidth = str.includes("1") ? this.top_right_left : rtl ? this.top_bottom_left : this.top_right_bottom;
                  this.mhBdrElement.style.borderWidth = str.includes("2") ? this.top_right_left : rtl ? this.top_right_bottom : this.top_bottom_left;
                }
              } else {
                this.bdrElement.style.borderWidth = str.includes("2") ? rtl ? this.top_right_bottom : this.top_bottom_left : this.right_bottom_left;
                if (this.parent.isFrozenGrid()) {
                  this.mcBdrElement.style.borderWidth = str.includes("1") ? rtl ? this.top_bottom_left : this.top_right_bottom : this.right_bottom_left;
                }
                if (this.parent.frozenRows) {
                  this.fhBdrElement.style.borderWidth = str.includes("1") ? this.top_right_left : rtl ? this.top_right_bottom : this.top_bottom_left;
                  if (this.parent.isFrozenGrid()) {
                    this.mhBdrElement.style.borderWidth = str.includes("2") ? this.top_right_left : rtl ? this.top_bottom_left : this.top_right_bottom;
                  }
                }
              }
            }
            break;
          default:
            this.bdrElement.style.borderWidth = this.all_border;
            if (this.parent.isFrozenGrid()) {
              this.mcBdrElement.style.borderWidth = this.all_border;
            }
            if (this.parent.frozenRows) {
              this.fhBdrElement.style.borderWidth = this.all_border;
              if (this.parent.isFrozenGrid()) {
                this.mhBdrElement.style.borderWidth = this.all_border;
              }
            }
            break;
        }
      }
    };
    Selection2.prototype.createBorders = function() {
      if (!this.bdrElement) {
        this.bdrElement = this.parent.getContentTable().parentElement.appendChild(createElement("div", {
          className: "e-xlsel",
          id: this.parent.element.id + "_bdr",
          styles: "width: 2px; border-width: 0;"
        }));
        if (this.parent.isFrozenGrid()) {
          this.mcBdrElement = this.parent.getContentTable().parentElement.appendChild(createElement("div", {
            className: "e-xlsel",
            id: this.parent.element.id + "_mcbdr",
            styles: "height: 2px; border-width: 0;"
          }));
          if (this.parent.getFrozenMode() === leftRight) {
            this.frcBdrElement = this.parent.getContentTable().parentElement.appendChild(createElement("div", {
              className: "e-xlsel",
              id: this.parent.element.id + "_frcbdr",
              styles: "height: 2px; border-width: 0;"
            }));
          }
        }
        if (this.parent.frozenRows) {
          this.fhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(createElement("div", {
            className: "e-xlsel",
            id: this.parent.element.id + "_fhbdr",
            styles: "height: 2px;"
          }));
        }
        if (this.parent.frozenRows && this.parent.isFrozenGrid()) {
          this.mhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(createElement("div", {
            className: "e-xlsel",
            id: this.parent.element.id + "_mhbdr",
            styles: "height: 2px;"
          }));
          if (this.parent.getFrozenMode() === leftRight) {
            this.frhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(createElement("div", {
              className: "e-xlsel",
              id: this.parent.element.id + "_frhbdr",
              styles: "height: 2px;"
            }));
          }
        }
      }
    };
    Selection2.prototype.showHideBorders = function(display, freeze) {
      if (this.bdrElement) {
        this.bdrElement.style.display = display;
        if (this.parent.isFrozenGrid()) {
          var parentEle = this.parent.getContentTable();
          removeClass(parentEle.querySelectorAll(".e-xlsel-top-border"), "e-xlsel-top-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-left-border"), "e-xlsel-left-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-right-border"), "e-xlsel-right-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-bottom-border"), "e-xlsel-bottom-border");
          if (!freeze) {
            this.mcBdrElement.style.display = display;
          }
          if (this.parent.getFrozenMode() === leftRight) {
            this.frcBdrElement.style.display = display;
          }
        }
        if (this.parent.frozenRows) {
          var parentEle = this.parent.getHeaderTable();
          removeClass(parentEle.querySelectorAll(".e-xlsel-top-border"), "e-xlsel-top-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-left-border"), "e-xlsel-left-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-right-border"), "e-xlsel-right-border");
          removeClass(parentEle.querySelectorAll(".e-xlsel-bottom-border"), "e-xlsel-bottom-border");
          this.fhBdrElement.style.display = display;
        }
        if (this.parent.frozenRows && this.parent.isFrozenGrid()) {
          if (!freeze) {
            this.mhBdrElement.style.display = display;
          }
          if (this.parent.getFrozenMode() === leftRight) {
            this.frhBdrElement.style.display = display;
          }
        }
      }
    };
    Selection2.prototype.drawAFBorders = function() {
      if (!this.bdrAFBottom) {
        this.createAFBorders();
      }
      this.positionAFBorders();
    };
    Selection2.prototype.positionAFBorders = function() {
      if (!this.startCell || !this.bdrAFLeft) {
        return;
      }
      var stOff = this.startAFCell.getBoundingClientRect();
      var endOff = this.endAFCell.getBoundingClientRect();
      var top = endOff.top - stOff.top > 0 ? 1 : 0;
      var firstCellTop = endOff.top - stOff.top >= 0 && (parentsUntil(this.startAFCell, movableContent) || parentsUntil(this.startAFCell, "e-frozencontent")) && this.isFirstRow(this.startAFCell) ? 1.5 : 0;
      var firstCellLeft = (parentsUntil(this.startAFCell, movableContent) || parentsUntil(this.startAFCell, movableHeader)) && this.isFirstCell(this.startAFCell) ? 1 : 0;
      var rowHeight2 = this.isLastRow(this.endAFCell) && (parentsUntil(this.endAFCell, movableContent) || parentsUntil(this.endAFCell, "e-frozencontent")) ? 2 : 0;
      var parentOff = this.startAFCell.offsetParent.getBoundingClientRect();
      var parentRect = this.parent.element.getBoundingClientRect();
      var sTop = this.startAFCell.offsetParent.parentElement.scrollTop;
      var sLeft = this.startAFCell.offsetParent.parentElement.scrollLeft;
      var scrollTop = sTop - this.startAFCell.offsetTop;
      var scrollLeft = sLeft - this.startAFCell.offsetLeft;
      var totalHeight = this.parent.element.clientHeight - getScrollBarWidth();
      if (this.parent.allowPaging) {
        totalHeight -= this.parent.element.querySelector(".e-pager").offsetHeight;
      }
      if (this.parent.aggregates.length) {
        totalHeight -= this.parent.getFooterContent().offsetHeight;
      }
      var totalWidth = this.parent.element.clientWidth - (this.parent.height !== "auto" ? getScrollBarWidth() : 0);
      scrollTop = scrollTop > 0 ? Math.floor(scrollTop) - 1 : 0;
      scrollLeft = scrollLeft > 0 ? scrollLeft : 0;
      var left = stOff.left - parentRect.left;
      if (!this.parent.enableRtl) {
        this.bdrAFLeft.style.left = left - firstCellLeft + scrollLeft - 1 + "px";
        this.bdrAFRight.style.left = endOff.left - parentRect.left - 2 + endOff.width + "px";
        this.bdrAFRight.style.width = totalWidth <= parseInt(this.bdrAFRight.style.left, 10) ? "0px" : "2px";
        this.bdrAFTop.style.left = left + scrollLeft - 0.5 + "px";
        this.bdrAFTop.style.width = parseInt(this.bdrAFRight.style.left, 10) - parseInt(this.bdrAFLeft.style.left, 10) - firstCellLeft + 1 + "px";
        if (totalWidth <= parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10)) {
          var leftRemove = parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10) - totalWidth;
          this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) - leftRemove + "px";
        }
      } else {
        var scrolloffSet = parentsUntil(this.startAFCell, movableContent) || parentsUntil(this.startAFCell, movableHeader) ? stOff.right - this.startAFCell.offsetParent.parentElement.getBoundingClientRect().width - parentRect.left : 0;
        this.bdrAFLeft.style.right = parentRect.right - endOff.right - 2 + endOff.width + "px";
        this.bdrAFLeft.style.width = totalWidth <= parseInt(this.bdrAFLeft.style.right, 10) ? "0px" : "2px";
        var borderAFRightValue = parentRect.right - stOff.right - firstCellLeft + scrolloffSet - 1;
        borderAFRightValue > 0 ? this.bdrAFRight.style.right = borderAFRightValue + "px" : this.bdrAFRight.style.right = "0px";
        this.bdrAFTop.style.left = endOff.left - parentRect.left - 0.5 + "px";
        this.bdrAFTop.style.width = parseInt(this.bdrAFLeft.style.right, 10) - parseInt(this.bdrAFRight.style.right, 10) - firstCellLeft + 1 + "px";
        if (parseInt(this.bdrAFTop.style.left, 10) < 0) {
          this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10) + "px";
          if (this.parent.height !== "auto" && getScrollBarWidth()) {
            this.bdrAFTop.style.left = getScrollBarWidth() + "px";
            this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) - getScrollBarWidth() + "px";
          } else {
            this.bdrAFTop.style.left = "0px";
          }
        }
      }
      this.bdrAFLeft.style.top = stOff.top - parentRect.top - firstCellTop + scrollTop + "px";
      this.bdrAFLeft.style.height = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + 1 - (stOff.top - parentOff.top) + firstCellTop - rowHeight2 - scrollTop + "px" : endOff.height + firstCellTop - rowHeight2 - scrollTop + "px";
      this.bdrAFRight.style.top = this.bdrAFLeft.style.top;
      this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + "px";
      this.bdrAFTop.style.top = this.bdrAFRight.style.top;
      this.bdrAFBottom.style.left = this.bdrAFTop.style.left;
      this.bdrAFBottom.style.top = parseFloat(this.bdrAFLeft.style.top) + parseFloat(this.bdrAFLeft.style.height) - top - 1 + "px";
      this.bdrAFBottom.style.width = totalHeight <= parseFloat(this.bdrAFBottom.style.top) ? "0px" : this.bdrAFTop.style.width;
      if (totalHeight <= parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10)) {
        var topRemove = parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10) - totalHeight;
        this.bdrAFLeft.style.height = parseInt(this.bdrAFLeft.style.height, 10) - topRemove + "px";
        this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + "px";
      }
    };
    Selection2.prototype.createAFBorders = function() {
      if (!this.bdrAFLeft) {
        this.bdrAFLeft = this.parent.element.appendChild(createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdrafleft",
          styles: "width: 2px;"
        }));
        this.bdrAFRight = this.parent.element.appendChild(createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdrafright",
          styles: "width: 2px;"
        }));
        this.bdrAFBottom = this.parent.element.appendChild(createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdrafbottom",
          styles: "height: 2px;"
        }));
        this.bdrAFTop = this.parent.element.appendChild(createElement("div", {
          className: "e-xlselaf",
          id: this.parent.element.id + "_bdraftop",
          styles: "height: 2px;"
        }));
      }
    };
    Selection2.prototype.destroyAutoFillElements = function() {
      if (this.bdrAFLeft) {
        this.bdrAFLeft.remove();
        this.bdrAFRight.remove();
        this.bdrAFBottom.remove();
        this.bdrAFTop.remove();
        this.bdrAFLeft = this.bdrAFRight = this.bdrAFBottom = this.bdrAFTop = null;
      }
      if (this.autofill) {
        this.autofill.remove();
        this.autofill = null;
      }
    };
    Selection2.prototype.showAFBorders = function() {
      if (this.bdrAFLeft) {
        this.bdrAFLeft.style.display = "";
        this.bdrAFRight.style.display = "";
        this.bdrAFBottom.style.display = "";
        this.bdrAFTop.style.display = "";
      }
    };
    Selection2.prototype.hideAFBorders = function() {
      if (this.bdrAFLeft) {
        this.bdrAFLeft.style.display = "none";
        this.bdrAFRight.style.display = "none";
        this.bdrAFBottom.style.display = "none";
        this.bdrAFTop.style.display = "none";
      }
    };
    Selection2.prototype.updateValue = function(rIdx, cIdx, cell) {
      var args = this.createBeforeAutoFill(rIdx, cIdx, cell);
      if (!args.cancel) {
        var col = this.parent.getColumnByIndex(cIdx);
        if (this.parent.editModule && cell) {
          if (col.type === "number") {
            this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.value));
          } else {
            this.parent.editModule.updateCell(rIdx, col.field, args.value);
          }
        }
      }
    };
    Selection2.prototype.createBeforeAutoFill = function(rowIndex, colIndex, cell) {
      var col = this.parent.getColumnByIndex(colIndex);
      var args = {
        column: col,
        value: cell.innerText
      };
      this.parent.trigger(beforeAutoFill, args);
      return args;
    };
    Selection2.prototype.getAutoFillCells = function(rowIndex, startCellIdx) {
      var cls = ".e-cellselectionbackground";
      var cells = [].slice.call(this.parent.getDataRows()[parseInt(rowIndex.toString(), 10)].querySelectorAll(cls));
      return cells;
    };
    Selection2.prototype.selectLikeAutoFill = function(e, isApply) {
      var startrowIdx = parseInt(parentsUntil(this.startAFCell, row).getAttribute(dataRowIndex), 10);
      var startCellIdx = parseInt(this.startAFCell.getAttribute(dataColIndex), 10);
      var endrowIdx = parseInt(parentsUntil(this.endAFCell, row).getAttribute(dataRowIndex), 10);
      var endCellIdx = parseInt(this.endAFCell.getAttribute(dataColIndex), 10);
      var rowLen = this.selectedRowCellIndexes.length - 1;
      var colLen = this.selectedRowCellIndexes[0].cellIndexes.length - 1;
      switch (true) {
        case (!isApply && this.endAFCell.classList.contains("e-cellselectionbackground") && !!parentsUntil(e.target, rowCell)):
          this.startAFCell = this.parent.getCellFromIndex(startrowIdx, startCellIdx);
          this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, startCellIdx + colLen);
          this.drawAFBorders();
          break;
        case (this.autoFillRLselection && startCellIdx + colLen < endCellIdx && //right
        endCellIdx - startCellIdx - colLen + 1 > endrowIdx - startrowIdx - rowLen && endCellIdx - startCellIdx - colLen + 1 > startrowIdx - endrowIdx):
          this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, endCellIdx);
          endrowIdx = parseInt(parentsUntil(this.endAFCell, row).getAttribute(dataRowIndex), 10);
          endCellIdx = parseInt(this.endAFCell.getAttribute(dataColIndex), 10);
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var cellIdx = parseInt(this.endCell.getAttribute(dataColIndex), 10);
            for (var i = startrowIdx; i <= endrowIdx; i++) {
              var cells = this.getAutoFillCells(i, startCellIdx);
              var c = 0;
              for (var j = cellIdx + 1; j <= endCellIdx; j++) {
                if (c > colLen) {
                  c = 0;
                }
                this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: startrowIdx,
              cellIndex: this.startCellIndex
            }, {
              rowIndex: endrowIdx,
              cellIndex: endCellIdx
            });
          }
          break;
        case (this.autoFillRLselection && startCellIdx > endCellIdx && // left
        startCellIdx - endCellIdx + 1 > endrowIdx - startrowIdx - rowLen && //left top
        startCellIdx - endCellIdx + 1 > startrowIdx - endrowIdx):
          this.startAFCell = this.parent.getCellFromIndex(startrowIdx, endCellIdx);
          this.endAFCell = this.endCell;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            for (var i = startrowIdx; i <= startrowIdx + rowLen; i++) {
              var cells = this.getAutoFillCells(i, startCellIdx);
              cells.reverse();
              var c = 0;
              for (var j = this.startCellIndex - 1; j >= endCellIdx; j--) {
                if (c > colLen) {
                  c = 0;
                }
                this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: startrowIdx,
              cellIndex: endCellIdx
            }, {
              rowIndex: startrowIdx + rowLen,
              cellIndex: this.startCellIndex + colLen
            });
          }
          break;
        case startrowIdx > endrowIdx:
          this.startAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx);
          this.endAFCell = this.endCell;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var trIdx = parseInt(this.endCell.parentElement.getAttribute(dataRowIndex), 10);
            var r = trIdx;
            for (var i = startrowIdx - 1; i >= endrowIdx; i--) {
              if (r === this.startIndex - 1) {
                r = trIdx;
              }
              var cells = this.getAutoFillCells(r, startCellIdx);
              var c = 0;
              r--;
              for (var j = this.startCellIndex; j <= this.startCellIndex + colLen; j++) {
                this.updateValue(i, j, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: endrowIdx,
              cellIndex: startCellIdx + colLen
            }, {
              rowIndex: startrowIdx + rowLen,
              cellIndex: startCellIdx
            });
          }
          break;
        default:
          this.endAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx + colLen);
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var trIdx = parseInt(this.endCell.parentElement.getAttribute(dataRowIndex), 10);
            var r = this.startIndex;
            for (var i = trIdx + 1; i <= endrowIdx; i++) {
              if (r === trIdx + 1) {
                r = this.startIndex;
              }
              var cells = this.getAutoFillCells(r, startCellIdx);
              r++;
              var c = 0;
              for (var m = this.startCellIndex; m <= this.startCellIndex + colLen; m++) {
                this.updateValue(i, m, cells[parseInt(c.toString(), 10)]);
                c++;
              }
            }
            this.selectCellsByRange({
              rowIndex: trIdx - rowLen,
              cellIndex: startCellIdx
            }, {
              rowIndex: endrowIdx,
              cellIndex: startCellIdx + colLen
            });
          }
          break;
      }
    };
    Selection2.prototype.mouseUpHandler = function(e) {
      this.stopTimer();
      document.body.classList.remove("e-disableuserselect");
      if (this.element && !isNullOrUndefined(this.element.parentElement)) {
        remove(this.element);
      }
      if (this.isDragged && this.selectedRowCellIndexes.length === 1 && this.selectedRowCellIndexes[0].cellIndexes.length === 1) {
        this.mUPTarget = parentsUntil(e.target, rowCell);
      } else {
        this.mUPTarget = null;
      }
      var closeRowCell = closest(e.target, ".e-rowcell");
      if (this.isDragged && !this.isAutoFillSel && this.selectionSettings.mode === "Cell" && closeRowCell && closeRowCell.classList.contains(rowCell)) {
        var rowIndex = parseInt(closeRowCell.parentElement.getAttribute(dataRowIndex), 10);
        var cellIndex = parseInt(closeRowCell.getAttribute(dataColIndex), 10);
        this.isDragged = false;
        this.clearCellSelection();
        this.selectCellsByRange({
          rowIndex: this.startDIndex,
          cellIndex: this.startDCellIndex
        }, {
          rowIndex,
          cellIndex
        });
      }
      this.isDragged = false;
      this.updateAutoFillPosition();
      if (this.isAutoFillSel) {
        this.preventFocus = true;
        var lastCell = parentsUntil(e.target, rowCell);
        this.endAFCell = lastCell ? lastCell : this.endCell === this.endAFCell ? this.startAFCell : this.endAFCell;
        this.startAFCell = this.startCell;
        if (!isNullOrUndefined(this.endAFCell) && !isNullOrUndefined(this.startAFCell)) {
          this.updateStartCellsIndex();
          this.selectLikeAutoFill(e, true);
          this.updateAutoFillPosition();
          this.hideAFBorders();
          this.positionBorders();
          if (this.parent.isFrozenGrid()) {
            this.showHideBorders("none", true);
            this.refreshFrozenBorders();
          }
          if (this.parent.aggregates.length > 0) {
            this.parent.notify(refreshFooterRenderer, {});
          }
        }
        this.isAutoFillSel = false;
        this.preventFocus = false;
      }
      EventHandler.remove(this.parent.getContent(), "mousemove", this.mouseMoveHandler);
      if (this.parent.frozenRows) {
        EventHandler.remove(this.parent.getHeaderContent(), "mousemove", this.mouseMoveHandler);
      }
      EventHandler.remove(document, "mouseup", this.mouseUpHandler);
    };
    Selection2.prototype.hideAutoFill = function() {
      if (this.autofill) {
        this.autofill.style.display = "none";
      }
    };
    Selection2.prototype.updateAutoFillPosition = function() {
      if (this.parent.enableAutoFill && !this.parent.isEdit && this.selectionSettings.cellSelectionMode.indexOf("Box") > -1 && !this.isRowType() && !this.isSingleSel() && this.selectedRowCellIndexes.length) {
        var index = parseInt(this.target.getAttribute(dataColIndex), 10);
        var rindex = parseInt(this.target.getAttribute("index"), 10);
        var rowIndex = this.selectedRowCellIndexes[this.selectedRowCellIndexes.length - 1].rowIndex;
        var cells = this.getAutoFillCells(rowIndex, index).filter(function(ele) {
          return ele.style.display === "";
        });
        var col = this.parent.getColumnByIndex(index);
        var isFrozenCol = col.getFreezeTableName() === "movable";
        var isFrozenRow = rindex < this.parent.frozenRows;
        var isFrozenRight = this.parent.getFrozenMode() === leftRight && col.getFreezeTableName() === frozenRight;
        if (!select("#" + this.parent.element.id + "_autofill", parentsUntil(this.target, table))) {
          if (select("#" + this.parent.element.id + "_autofill", this.parent.element)) {
            select("#" + this.parent.element.id + "_autofill", this.parent.element).remove();
          }
          this.autofill = createElement("div", {
            className: "e-autofill",
            id: this.parent.element.id + "_autofill"
          });
          this.autofill.style.display = "none";
          if (this.target.classList.contains("e-leftfreeze") || this.target.classList.contains("e-rightfreeze") || this.target.classList.contains("e-fixedfreeze")) {
            this.autofill.classList.add("e-freeze-autofill");
          }
          if (!isFrozenRow) {
            if (!isFrozenCol) {
              this.parent.getContentTable().parentElement.appendChild(this.autofill);
            } else {
              this.parent.getContentTable().parentElement.appendChild(this.autofill);
            }
          } else {
            if (!isFrozenCol) {
              this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
            } else {
              this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
            }
          }
          if (isFrozenRight) {
            if (isFrozenRow) {
              this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
            } else {
              this.parent.getContentTable().parentElement.appendChild(this.autofill);
            }
          }
        }
        var cell = cells[cells.length - 1];
        if (cell && cell.offsetParent) {
          var clientRect = cell.getBoundingClientRect();
          var parentOff = cell.offsetParent.getBoundingClientRect();
          if (cell.offsetParent.classList.contains("e-content") || cell.offsetParent.classList.contains("e-headercontent")) {
            parentOff = cell.offsetParent.querySelector("table").getBoundingClientRect();
          }
          var colWidth = this.isLastCell(cell) ? 4 : 0;
          var rowHeight2 = this.isLastRow(cell) ? 3 : 0;
          if (!this.parent.enableRtl) {
            this.autofill.style.left = clientRect.left - parentOff.left + clientRect.width - 4 - colWidth + "px";
          } else {
            this.autofill.style.right = parentOff.right - clientRect.right + clientRect.width - 4 - colWidth + "px";
          }
          this.autofill.style.top = clientRect.top - parentOff.top + clientRect.height - 5 - rowHeight2 + "px";
        }
        this.autofill.style.display = "";
      } else {
        this.hideAutoFill();
      }
    };
    Selection2.prototype.mouseDownHandler = function(e) {
      this.mouseButton = e.button;
      var target = e.target;
      var gObj = this.parent;
      var isDrag;
      var gridElement = parentsUntil(target, "e-grid");
      if (gridElement && gridElement.id !== gObj.element.id || parentsUntil(target, headerContent) && !this.parent.frozenRows || parentsUntil(target, "e-editedbatchcell") || parentsUntil(target, editedRow)) {
        return;
      }
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (parentsUntil(target, rowCell) && !e.shiftKey && !e.ctrlKey) {
        if (gObj.selectionSettings.cellSelectionMode.indexOf("Box") > -1 && !this.isRowType() && !this.isSingleSel()) {
          this.isCellDrag = true;
          isDrag = true;
        } else if (gObj.allowRowDragAndDrop && !gObj.isEdit && !this.parent.selectionSettings.checkboxOnly) {
          this.isRowDragSelected = false;
          if (!this.isRowType() || this.isSingleSel() || closest(target, "td").classList.contains("e-selectionbackground")) {
            this.isDragged = false;
            return;
          }
          isDrag = true;
          this.element = this.parent.createElement("div", {
            className: "e-griddragarea"
          });
          gObj.getContent().appendChild(this.element);
        }
        if (isDrag) {
          this.enableDrag(e, true);
        }
      }
      this.updateStartEndCells();
      if (target.classList.contains("e-autofill") || target.classList.contains("e-xlsel")) {
        this.isCellDrag = true;
        this.isAutoFillSel = true;
        this.enableDrag(e);
      }
    };
    Selection2.prototype.updateStartEndCells = function() {
      var cells = [].slice.call(this.parent.element.getElementsByClassName("e-cellselectionbackground"));
      this.startCell = cells[0];
      this.endCell = cells[cells.length - 1];
      if (this.startCell) {
        this.startIndex = parseInt(this.startCell.parentElement.getAttribute(dataRowIndex), 10);
        this.startCellIndex = parseInt(parentsUntil(this.startCell, rowCell).getAttribute(dataColIndex), 10);
      }
    };
    Selection2.prototype.updateStartCellsIndex = function() {
      if (this.startCell) {
        this.startIndex = parseInt(this.startCell.parentElement.getAttribute(dataRowIndex), 10);
        this.startCellIndex = parseInt(parentsUntil(this.startCell, rowCell).getAttribute(dataColIndex), 10);
      }
    };
    Selection2.prototype.enableDrag = function(e, isUpdate) {
      var gObj = this.parent;
      if (isUpdate) {
        var tr = closest(e.target, "tr");
        this.startDIndex = parseInt(tr.getAttribute(dataRowIndex), 10);
        this.startDCellIndex = parseInt(parentsUntil(e.target, rowCell).getAttribute(dataColIndex), 10);
      }
      document.body.classList.add("e-disableuserselect");
      var gBRect = gObj.element.getBoundingClientRect();
      var postion = getPosition(e);
      this.x = postion.x - gBRect.left;
      this.y = postion.y - gBRect.top;
      EventHandler.add(gObj.getContent(), "mousemove", this.mouseMoveHandler, this);
      if (this.parent.frozenRows) {
        EventHandler.add(gObj.getHeaderContent(), "mousemove", this.mouseMoveHandler, this);
      }
      EventHandler.add(document, "mouseup", this.mouseUpHandler, this);
    };
    Selection2.prototype.clearSelAfterRefresh = function(e) {
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.requestType === "infiniteScroll";
      if (e.requestType !== "virtualscroll" && !this.parent.isPersistSelection && !isInfiniteScroll) {
        this.clearSelection();
      }
      if ((e.requestType === "virtualscroll" || isInfiniteScroll) && this.parent.isPersistSelection && this.isPartialSelection && this.isHdrSelectAllClicked) {
        var rowObj = this.parent.getRowsObject().filter(function(e2) {
          return e2.isSelectable;
        });
        var indexes = [];
        this.selectedRowState = {};
        this.persistSelectedData = [];
        for (var i = 0; i < rowObj.length; i++) {
          indexes.push(rowObj[parseInt(i.toString(), 10)].index);
          var pkValue = this.getPkValue(this.primaryKey, rowObj[parseInt(i.toString(), 10)].data);
          this.selectedRowState["" + pkValue] = true;
          this.persistSelectedData.push(rowObj[parseInt(i.toString(), 10)].data);
        }
        this.selectedRowIndexes = indexes;
      }
    };
    Selection2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: uiUpdate,
        handler: this.enableAfterRender
      }, {
        event: initialEnd,
        handler: this.initializeSelection
      }, {
        event: rowSelectionComplete,
        handler: this.onActionComplete
      }, {
        event: cellSelectionComplete,
        handler: this.onActionComplete
      }, {
        event: inBoundModelChanged,
        handler: this.onPropertyChanged
      }, {
        event: cellFocused,
        handler: this.onCellFocused
      }, {
        event: beforeFragAppend,
        handler: this.clearSelAfterRefresh
      }, {
        event: columnPositionChanged,
        handler: this.columnPositionChanged
      }, {
        event: contentReady,
        handler: this.initialEnd
      }, {
        event: rowsRemoved,
        handler: this.rowsRemoved
      }, {
        event: headerRefreshed,
        handler: this.refreshHeader
      }, {
        event: destroyAutoFillElements,
        handler: this.destroyAutoFillElements
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.actionBeginFunction = this.actionBegin.bind(this);
      this.actionCompleteFunction = this.actionComplete.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
      this.addEventListener_checkbox();
    };
    Selection2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(document, "mouseup", this.mouseUpHandler);
      EventHandler.remove(this.parent.getContent(), "mousedown", this.mouseDownHandler);
      EventHandler.remove(this.parent.getHeaderContent(), "mousedown", this.mouseDownHandler);
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
      this.removeEventListener_checkbox();
      this.parent.off(destroyAutoFillElements, this.destroyAutoFillElements);
    };
    Selection2.prototype.wireEvents = function() {
      this.isMacOS = navigator.userAgent.indexOf("Mac OS") !== -1;
      if (this.isMacOS) {
        EventHandler.add(this.parent.element, "keydown", this.keyDownHandler, this);
        EventHandler.add(this.parent.element, "keyup", this.keyUpHandler, this);
      } else {
        if (!this.parent.allowKeyboard) {
          EventHandler.add(this.parent.element, "keydown", this.keyDownHandler, this);
        }
      }
    };
    Selection2.prototype.unWireEvents = function() {
      if (this.isMacOS) {
        EventHandler.remove(this.parent.element, "keydown", this.keyDownHandler);
        EventHandler.remove(this.parent.element, "keyup", this.keyUpHandler);
      } else {
        if (!this.parent.allowKeyboard) {
          EventHandler.remove(this.parent.element, "keydown", this.keyDownHandler);
        }
      }
    };
    Selection2.prototype.columnPositionChanged = function() {
      if (!this.parent.isPersistSelection) {
        this.clearSelection();
      }
    };
    Selection2.prototype.refreshHeader = function() {
      this.setCheckAllState();
    };
    Selection2.prototype.rowsRemoved = function(e) {
      for (var i = 0; i < e.records.length; i++) {
        var pkValue = this.getPkValue(this.primaryKey, e.records[parseInt(i.toString(), 10)]);
        delete this.selectedRowState["" + pkValue];
        --this.totalRecordsCount;
      }
      this.setCheckAllState();
    };
    Selection2.prototype.beforeFragAppend = function(e) {
      if (e.requestType !== "virtualscroll" && !this.parent.isPersistSelection) {
        this.clearSelection();
      }
    };
    Selection2.prototype.getCheckAllBox = function() {
      return this.parent.getHeaderContent().querySelector(".e-checkselectall");
    };
    Selection2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
        this.initPerisistSelection();
      }
    };
    Selection2.prototype.render = function(e) {
      EventHandler.add(this.parent.getContent(), "mousedown", this.mouseDownHandler, this);
      EventHandler.add(this.parent.getHeaderContent(), "mousedown", this.mouseDownHandler, this);
    };
    Selection2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      var gObj = this.parent;
      if (!isNullOrUndefined(e.properties.type)) {
        if (this.selectionSettings.type === "Single") {
          gObj.element.removeAttribute("aria-multiselectable");
          if (this.selectedRowCellIndexes.length > 1) {
            this.clearCellSelection();
            this.prevCIdxs = void 0;
          }
          if (this.selectedRowIndexes.length > 1) {
            this.clearRowSelection();
            this.prevRowIndex = void 0;
          }
          if (this.selectedColumnsIndexes.length > 1) {
            this.clearColumnSelection();
            this.prevColIndex = void 0;
          }
          this.enableSelectMultiTouch = false;
          this.hidePopUp();
        } else if (this.selectionSettings.type === "Multiple") {
          gObj.element.setAttribute("aria-multiselectable", "true");
        }
      }
      if (!isNullOrUndefined(e.properties.mode) || !isNullOrUndefined(e.properties.cellSelectionMode)) {
        this.clearSelection();
        this.prevRowIndex = void 0;
        this.prevCIdxs = void 0;
        this.prevColIndex = void 0;
      }
      this.isPersisted = true;
      this.checkBoxSelectionChanged();
      this.isPersisted = false;
      if (!this.parent.isCheckBoxSelection) {
        this.initPerisistSelection();
      }
      var checkboxColumn = this.parent.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length) {
        gObj.isCheckBoxSelection = !(this.selectionSettings.checkboxMode === "ResetOnRowClick");
      }
      this.drawBorders();
    };
    Selection2.prototype.hidePopUp = function() {
      if (this.parent.element.querySelector(".e-gridpopup").getElementsByClassName("e-rowselect").length) {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
    };
    Selection2.prototype.initialEnd = function() {
      if (!this.selectedRowIndexes.length) {
        this.parent.off(contentReady, this.initialEnd);
        this.selectRow(this.parent.selectedRowIndex);
      }
    };
    Selection2.prototype.checkBoxSelectionChanged = function() {
      var gobj = this.parent;
      gobj.off(contentReady, this.checkBoxSelectionChanged);
      var checkboxColumn = gobj.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length > 0) {
        gobj.isCheckBoxSelection = true;
        this.chkField = checkboxColumn[0].field;
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
        if (isNullOrUndefined(this.totalRecordsCount)) {
          this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;
        }
        if (this.isSingleSel()) {
          gobj.selectionSettings.type = "Multiple";
          gobj.dataBind();
        } else {
          this.initPerisistSelection();
        }
      }
      if (!gobj.isCheckBoxSelection && !this.isPersisted) {
        this.chkField = null;
        this.initPerisistSelection();
      }
    };
    Selection2.prototype.initPerisistSelection = function() {
      var gobj = this.parent;
      if (this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) {
        gobj.isPersistSelection = true;
        this.ensureCheckboxFieldSelection();
      } else if (this.parent.getPrimaryKeyFieldNames().length > 0) {
        gobj.isPersistSelection = false;
        this.ensureCheckboxFieldSelection();
      } else {
        gobj.isPersistSelection = false;
        this.selectedRowState = {};
      }
    };
    Selection2.prototype.ensureCheckboxFieldSelection = function() {
      var gobj = this.parent;
      this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
      if (!gobj.enableVirtualization && this.chkField && (gobj.isPersistSelection && Object.keys(this.selectedRowState).length === 0 || !gobj.isPersistSelection)) {
        var data = this.parent.getDataModule();
        var query = new Query().where(this.chkField, "equal", true);
        if (!query.params) {
          query.params = this.parent.query.params;
        }
        var dataManager = data.getData({}, query);
        var proxy_1 = this;
        this.parent.showSpinner();
        dataManager.then(function(e) {
          proxy_1.dataSuccess(e.result);
          proxy_1.refreshPersistSelection();
          proxy_1.parent.hideSpinner();
        });
      }
    };
    Selection2.prototype.dataSuccess = function(res) {
      var data = this.parent.getDataModule().isRemote() && !isNullOrUndefined(res["result"]) ? res["result"] : res;
      for (var i = 0; i < data.length; i++) {
        var pkValue = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
        if (isNullOrUndefined(this.selectedRowState["" + pkValue]) && data[parseInt(i.toString(), 10)][this.chkField]) {
          this.selectedRowState["" + pkValue] = data[parseInt(i.toString(), 10)][this.chkField];
        }
      }
      this.persistSelectedData = data;
    };
    Selection2.prototype.setRowSelection = function(state) {
      if (!(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result)) {
        if (state) {
          if (this.isPartialSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
            var rowObj = this.parent.getRowsObject().filter(function(e) {
              return e.isSelectable;
            });
            for (var _i = 0, rowObj_1 = rowObj; _i < rowObj_1.length; _i++) {
              var row2 = rowObj_1[_i];
              this.selectedRowState[this.getPkValue(this.primaryKey, row2.data)] = true;
            }
          } else {
            var selectedData = this.isPartialSelection ? this.parent.partialSelectedRecords : this.getData();
            if (this.parent.groupSettings.columns.length) {
              for (var _a = 0, _b = this.isPartialSelection ? selectedData : selectedData.records; _a < _b.length; _a++) {
                var data = _b[_a];
                this.selectedRowState[this.getPkValue(this.primaryKey, data)] = true;
              }
            } else {
              for (var _c = 0, selectedData_1 = selectedData; _c < selectedData_1.length; _c++) {
                var data = selectedData_1[_c];
                this.selectedRowState[this.getPkValue(this.primaryKey, data)] = true;
              }
            }
          }
        } else {
          this.selectedRowState = {};
        }
      } else {
        if (state) {
          var selectedStateKeys = Object.keys(this.selectedRowState);
          var unSelectedRowStateKeys = Object.keys(this.unSelectedRowState);
          if (!this.isCheckboxReset) {
            var rowData = this.parent.groupSettings.columns.length && this.parent.isPersistSelection ? this.parent.currentViewData["records"] : this.parent.currentViewData;
            for (var _d = 0, rowData_1 = rowData; _d < rowData_1.length; _d++) {
              var data = rowData_1[_d];
              if (!isNullOrUndefined(data[this.primaryKey])) {
                var key = data[this.primaryKey].toString();
                if (selectedStateKeys.indexOf(key) === -1 && unSelectedRowStateKeys.indexOf(key) === -1) {
                  this.selectedRowState[data[this.primaryKey]] = true;
                }
              }
            }
          }
        } else {
          this.selectedRowState = {};
          this.unSelectedRowState = {};
          this.rmtHdrChkbxClicked = false;
        }
      }
    };
    Selection2.prototype.getData = function() {
      return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));
    };
    Selection2.prototype.getAvailableSelectedData = function() {
      var filteredSearchedSelectedData = new DataManager(this.persistSelectedData).executeLocal(this.parent.getDataModule().generateQuery(true));
      if (this.parent.groupSettings.columns.length && filteredSearchedSelectedData && filteredSearchedSelectedData.records) {
        filteredSearchedSelectedData = filteredSearchedSelectedData.records.slice();
      }
      return filteredSearchedSelectedData;
    };
    Selection2.prototype.refreshPersistSelection = function() {
      var rows = this.parent.getRows();
      this.totalRecordsCount = this.parent.getCurrentViewRecords().length;
      if (this.parent.allowPaging) {
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
      }
      if (!isNullOrUndefined(rows) && rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {
        var indexes = [];
        for (var j = 0; j < rows.length; j++) {
          var rowObj = this.getRowObj(rows[parseInt(j.toString(), 10)]);
          var pKey = rowObj ? rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null : null;
          if (pKey === null) {
            return;
          }
          if (this.isPartialSelection && !rowObj.isSelectable) {
            continue;
          }
          var checkState = void 0;
          var chkBox = rows[parseInt(j.toString(), 10)].querySelector(".e-checkselect");
          if (this.selectedRowState["" + pKey] || this.parent.checkAllRows === "Check" && this.selectedRowState["" + pKey] && this.totalRecordsCount === Object.keys(this.selectedRowState).length && this.chkAllCollec.indexOf(pKey) < 0 || this.parent.checkAllRows === "Uncheck" && this.chkAllCollec.indexOf(pKey) > 0 && !this.parent.selectedRowIndex || this.parent.checkAllRows === "Intermediate" && !isNullOrUndefined(this.chkField) && rowObj.data[this.chkField]) {
            indexes.push(parseInt(rows[parseInt(j.toString(), 10)].getAttribute(dataRowIndex), 10));
            checkState = true;
          } else {
            checkState = false;
            if (this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection && chkBox) {
              removeAddCboxClasses(chkBox.nextElementSibling, checkState);
            }
          }
          this.updatePersistCollection(rows[parseInt(j.toString(), 10)], checkState);
        }
        if (this.isSingleSel() && indexes.length > 0) {
          this.selectRow(indexes[0], true);
        } else {
          this.selectRows(indexes);
        }
      }
      if ((this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === "ResetOnRowClick") && this.getCurrentBatchRecordChanges().length > 0) {
        this.setCheckAllState();
      }
    };
    Selection2.prototype.actionBegin = function(e) {
      if (e.requestType === "save" && this.parent.isPersistSelection) {
        var editChkBox = this.parent.element.querySelector(".e-edit-checkselect");
        if (!isNullOrUndefined(editChkBox)) {
          var row2 = closest(editChkBox, "." + editedRow);
          if (row2) {
            if (this.parent.editSettings.mode === "Dialog") {
              row2 = this.parent.element.querySelector(".e-dlgeditrow");
            }
            var rowObj = this.getRowObj(row2);
            if (!rowObj) {
              return;
            }
            this.selectedRowState[this.getPkValue(this.primaryKey, rowObj.data)] = rowObj.isSelected = editChkBox.checked;
          } else {
            this.isCheckedOnAdd = editChkBox.checked;
          }
        }
      }
      if (this.parent.isPersistSelection && this.isPartialSelection) {
        if (e.requestType === "paging" && (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result)) {
          this.selectedRowIndexes = [];
        }
        if (e.requestType === "filtering" || e.requestType === "searching") {
          this.parent.partialSelectedRecords = [];
          this.parent.disableSelectedRecords = [];
        }
      }
    };
    Selection2.prototype.actionComplete = function(e) {
      if (e.requestType === "save" && this.parent.isPersistSelection) {
        if (e.action === "add") {
          if (this.isCheckedOnAdd) {
            var rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute("data-uid"));
            this.selectedRowState[this.getPkValue(this.primaryKey, rowObj.data)] = rowObj.isSelected = this.isCheckedOnAdd;
          }
          this.isHdrSelectAllClicked = false;
          this.setCheckAllState();
        }
        this.refreshPersistSelection();
      }
      if (e.requestType === "delete" && this.parent.isPersistSelection) {
        var records = e.data;
        var data = records.slice();
        for (var i = 0; i < data.length; i++) {
          var pkValue = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
          if (!isNullOrUndefined(pkValue)) {
            this.updatePersistDelete(pkValue, this.isPartialSelection);
          }
        }
        this.isHdrSelectAllClicked = false;
        this.setCheckAllState();
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
      }
      if (e.requestType === "paging") {
        if (this.parent.isPersistSelection && this.isPartialSelection && this.isHdrSelectAllClicked) {
          var rows = this.parent.getRowsObject();
          var indexes = [];
          for (var i = 0; i < rows.length; i++) {
            if (rows[parseInt(i.toString(), 10)].isSelectable) {
              indexes.push(rows[parseInt(i.toString(), 10)].index);
            }
          }
          if (indexes.length) {
            this.selectRows(indexes);
          }
        }
        this.prevRowIndex = void 0;
        this.prevCIdxs = void 0;
        this.prevECIdxs = void 0;
      }
    };
    Selection2.prototype.onDataBound = function() {
      if (!this.parent.enableVirtualization && this.parent.isPersistSelection) {
        if (this.selectedRecords.length) {
          this.isPrevRowSelection = true;
        }
      }
      if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.rmtHdrChkbxClicked) {
        if (this.parent.checkAllRows === "Intermediate") {
          this.setRowSelection(true);
        } else if (this.parent.checkAllRows === "Uncheck") {
          this.setRowSelection(false);
        }
      }
      if (this.parent.enableVirtualization) {
        this.setCheckAllState();
      }
      if (this.parent.isPersistSelection) {
        this.refreshPersistSelection();
      }
      this.initialRowSelection = this.isRowType() && this.parent.element.querySelectorAll(".e-selectionbackground") && this.parent.getSelectedRows().length ? true : false;
      if (this.parent.isCheckBoxSelection && !this.initialRowSelection) {
        var totalRecords = this.parent.getRowsObject();
        var indexes = [];
        for (var i = 0; i < totalRecords.length; i++) {
          if (totalRecords[parseInt(i.toString(), 10)].isSelected) {
            indexes.push(i);
          }
        }
        if (indexes.length) {
          this.selectRows(indexes);
        }
        this.initialRowSelection = true;
      }
    };
    Selection2.prototype.updatePersistSelectedData = function(checkState) {
      if (this.parent.isPersistSelection) {
        var rows = this.parent.getRows();
        for (var i = 0; i < rows.length; i++) {
          this.updatePersistCollection(rows[parseInt(i.toString(), 10)], checkState);
        }
        if (this.parent.checkAllRows === "Uncheck") {
          this.setRowSelection(false);
          this.persistSelectedData = this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result ? this.persistSelectedData : [];
        } else if (this.parent.checkAllRows === "Check") {
          this.setRowSelection(true);
          this.persistSelectedData = !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.isPartialSelection ? this.parent.groupSettings.columns.length ? this.getData().records.slice() : this.getData().slice() : this.persistSelectedData;
        }
      }
    };
    Selection2.prototype.checkSelectAllAction = function(checkState) {
      var cRenderer = this.getRenderer();
      var editForm = this.parent.element.querySelector(".e-gridform");
      this.checkedTarget = this.getCheckAllBox();
      if (checkState && this.getCurrentBatchRecordChanges().length) {
        this.parent.checkAllRows = "Check";
        this.updatePersistSelectedData(checkState);
        this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.getCurrentBatchRecordChanges().length - 1));
      } else {
        this.parent.checkAllRows = "Uncheck";
        this.updatePersistSelectedData(checkState);
        this.clearSelection();
      }
      this.chkAllCollec = [];
      if (!isNullOrUndefined(editForm)) {
        var editChkBox = editForm.querySelector(".e-edit-checkselect");
        if (!isNullOrUndefined(editChkBox)) {
          removeAddCboxClasses(editChkBox.nextElementSibling, checkState);
        }
      }
    };
    Selection2.prototype.checkSelectAll = function(checkBox) {
      var _this = this;
      var stateStr = this.getCheckAllStatus(checkBox);
      var state = stateStr === "Check";
      this.isHeaderCheckboxClicked = true;
      if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && (stateStr === "Uncheck" || this.isCheckboxReset || stateStr === "Intermediate" && this.parent.isPersistSelection)) {
        this.rmtHdrChkbxClicked = true;
      } else {
        this.rmtHdrChkbxClicked = false;
      }
      if (this.rmtHdrChkbxClicked && this.isCheckboxReset) {
        this.unSelectedRowState = {};
      }
      this.isCheckboxReset = false;
      if (stateStr === "Intermediate") {
        if (!this.chkField && !this.parent.isPersistSelection) {
          state = this.getCurrentBatchRecordChanges().some(function(data) {
            return _this.getPkValue(_this.primaryKey, data) in _this.selectedRowState;
          });
        }
        if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.parent.isPersistSelection) {
          for (var i = 0; i < this.getCurrentBatchRecordChanges().length; i++) {
            if (!isNullOrUndefined(this.getPkValue(this.primaryKey, this.getCurrentBatchRecordChanges()["" + i]))) {
              if (Object.keys(this.selectedRowState).includes(this.getPkValue(this.primaryKey, this.getCurrentBatchRecordChanges()["" + i]).toString())) {
                state = true;
              } else {
                state = false;
                break;
              }
            }
          }
        }
      }
      if (this.parent.isPersistSelection && this.parent.allowPaging) {
        this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
      }
      this.checkSelectAllAction(!state);
      this.target = null;
      if (this.getCurrentBatchRecordChanges().length > 0) {
        this.setCheckAllState();
        this.updateSelectedRowIndexes();
      }
      this.triggerChkChangeEvent(checkBox, !state);
    };
    Selection2.prototype.getCheckAllStatus = function(ele) {
      var classes = ele ? ele.nextElementSibling.classList : this.getCheckAllBox().nextElementSibling.classList;
      var status;
      if (classes.contains("e-check")) {
        status = "Check";
      } else if (classes.contains("e-uncheck")) {
        status = "Uncheck";
      } else if (classes.contains("e-stop")) {
        status = "Intermediate";
      } else {
        status = "None";
      }
      return status;
    };
    Selection2.prototype.checkSelect = function(checkBox) {
      var target = closest(this.checkedTarget, "." + rowCell);
      var gObj = this.parent;
      this.isMultiCtrlRequest = true;
      var rIndex = 0;
      this.isHeaderCheckboxClicked = false;
      if (isGroupAdaptive(gObj)) {
        var uid2 = target.parentElement.getAttribute("data-uid");
        if (this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {
          rIndex = parseInt(target.parentElement.getAttribute(dataRowIndex), 10);
        } else {
          rIndex = gObj.getRows().map(function(m) {
            return m.getAttribute("data-uid");
          }).indexOf(uid2);
        }
      } else {
        rIndex = parseInt(target.parentElement.getAttribute(dataRowIndex), 10);
      }
      if (this.parent.isPersistSelection && this.parent.element.getElementsByClassName(addedRow).length > 0 && this.parent.editSettings.newRowPosition === "Top" && !this.parent.editSettings.showAddNewRow) {
        ++rIndex;
      }
      this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(dataColIndex), 10));
      this.moveIntoUncheckCollection(closest(target, "." + row));
      this.setCheckAllState();
      this.isMultiCtrlRequest = false;
      this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains("e-check"));
    };
    Selection2.prototype.moveIntoUncheckCollection = function(row2) {
      if (this.parent.checkAllRows === "Check" || this.parent.checkAllRows === "Uncheck") {
        var rowObj = this.getRowObj(row2);
        var pKey = rowObj && rowObj.data ? this.getPkValue(this.primaryKey, rowObj.data) : null;
        if (!pKey) {
          return;
        }
        if (this.chkAllCollec.indexOf(pKey) < 0) {
          this.chkAllCollec.push(pKey);
        } else {
          this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);
        }
      }
    };
    Selection2.prototype.triggerChkChangeEvent = function(checkBox, checkState) {
      this.parent.trigger(checkBoxChange, {
        checked: checkState,
        selectedRowIndexes: this.parent.getSelectedRowIndexes(),
        target: checkBox
      });
      if (!this.parent.isEdit) {
        this.checkedTarget = null;
      }
    };
    Selection2.prototype.updateSelectedRowIndexes = function() {
      if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.isPartialSelection && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.parent.selectionSettings.persistSelection) {
        if (this.parent.checkAllRows !== "Uncheck") {
          var rowObj = this.parent.getRowsObject().filter(function(e) {
            return e.isSelectable;
          });
          for (var _i = 0, rowObj_2 = rowObj; _i < rowObj_2.length; _i++) {
            var row2 = rowObj_2[_i];
            this.selectedRowIndexes.push(row2.index);
          }
        }
      }
      if (this.parent.isCheckBoxSelection && this.parent.enableVirtualization && !this.isPartialSelection && (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.parent.isPersistSelection && this.parent.checkAllRows === "Check") {
        var rowObj = this.parent.getRowsObject().filter(function(e) {
          return e.isSelectable;
        });
        if (rowObj.length !== this.selectedRowIndexes.length) {
          for (var _a = 0, rowObj_3 = rowObj; _a < rowObj_3.length; _a++) {
            var row2 = rowObj_3[_a];
            if (this.selectedRowIndexes.indexOf(row2.index) <= -1) {
              this.selectedRowIndexes.push(row2.index);
            }
          }
        }
      }
    };
    Selection2.prototype.updateSelectedRowIndex = function(index) {
      if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.isPartialSelection) {
        if (this.parent.checkAllRows === "Check") {
          this.selectedRowIndexes = [];
          var dataLength = this.parent.groupSettings.columns.length ? this.getData()["records"].length : this.getData().length;
          for (var data = 0; data < dataLength; data++) {
            this.selectedRowIndexes.push(data);
          }
        } else if (this.parent.checkAllRows === "Uncheck") {
          this.selectedRowIndexes = [];
        } else {
          var row2 = this.parent.getRowByIndex(index);
          if (index && row2 && row2.getAttribute("aria-selected") === "false") {
            var selectedVal = this.selectedRowIndexes.indexOf(index);
            this.selectedRowIndexes.splice(selectedVal, 1);
          }
        }
      }
    };
    Selection2.prototype.isAllSelected = function(count2) {
      if (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) {
        return this.getAvailableSelectedData().length === (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling ? this.parent.totalDataRecordsCount : this.totalRecordsCount);
      } else {
        if (this.isPartialSelection) {
          if (this.parent.allowPaging && this.parent.pageSettings.pageSize < this.parent.pageSettings.totalRecordsCount) {
            var data = this.parent.partialSelectedRecords;
            for (var i = 0; i < data.length; i++) {
              var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
              if (!this.selectedRowState["" + pKey]) {
                return false;
              }
            }
            return true;
          } else {
            return this.isSelectAllRowCount(count2);
          }
        } else {
          var data = this.parent.groupSettings.columns.length ? this.getData()["records"] : this.getData();
          for (var i = 0; i < data.length; i++) {
            var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
            if (!this.selectedRowState["" + pKey]) {
              return false;
            }
          }
          return true;
        }
      }
    };
    Selection2.prototype.someDataSelected = function() {
      if ((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && (this.parent.searchSettings.key.length || this.parent.filterSettings.columns.length)) {
        var filteredSearchedSelectedData = this.getAvailableSelectedData();
        for (var i = 0; i < filteredSearchedSelectedData.length; i++) {
          var pKey = this.getPkValue(this.primaryKey, filteredSearchedSelectedData[parseInt(i.toString(), 10)]);
          if (this.selectedRowState["" + pKey]) {
            return false;
          }
        }
      }
      var data = this.isPartialSelection ? this.parent.partialSelectedRecords : this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result ? [] : this.getData();
      for (var i = 0; i < data.length; i++) {
        var pKey = this.getPkValue(this.primaryKey, data[parseInt(i.toString(), 10)]);
        if (this.selectedRowState["" + pKey]) {
          return false;
        }
      }
      return true;
    };
    Selection2.prototype.setCheckAllState = function(index, isInteraction) {
      if (this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === "ResetOnRowClick") {
        var checkToSelectAll = false;
        var isFiltered = false;
        var checkedLen = Object.keys(this.selectedRowState).length;
        if (!this.parent.isPersistSelection) {
          checkedLen = this.selectedRowIndexes.length;
          this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;
        }
        if (this.parent.isPersistSelection && !((this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && this.isPartialSelection) && (this.parent.searchSettings.key.length || this.parent.filterSettings.columns.length)) {
          isFiltered = true;
          checkToSelectAll = this.isAllSelected(checkedLen);
        }
        var input2 = this.getCheckAllBox();
        if (input2) {
          var spanEle = input2.nextElementSibling;
          removeClass([spanEle], ["e-check", "e-stop", "e-uncheck"]);
          setChecked(input2, false);
          input2.indeterminate = false;
          var getRecord = this.parent.getDataModule().isRemote() ? [] : this.parent.groupSettings.columns.length ? this.getData()["records"] : this.getData();
          if (checkToSelectAll && isFiltered && (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result || getRecord.length) || !isFiltered && (checkedLen === this.totalRecordsCount && this.totalRecordsCount && !this.isPartialSelection && (!(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) || this.parent.allowPaging) || !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && this.isPartialSelection && (this.isSelectAllRowCount(checkedLen) || this.isHdrSelectAllClicked) || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.allowPaging && (!(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && getRecord.length && checkedLen === getRecord.length || (this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && !this.isPartialSelection && (checkedLen === this.parent.totalDataRecordsCount || (this.isSelectAllRowCount(checkedLen) || checkedLen === this.totalRecordsCount) && !this.parent.isPersistSelection) || this.isPartialSelection && (this.isHdrSelectAllClicked || this.isSelectAllRowCount(checkedLen))) || checkedLen === this.totalRecordsCount && this.totalRecordsCount && !this.isPartialSelection && !this.parent.allowPaging && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling)) {
            addClass([spanEle], ["e-check"]);
            setChecked(input2, true);
            if (isInteraction) {
              this.getRenderer().setSelection(null, true, true);
            }
            this.parent.checkAllRows = "Check";
          } else if ((!this.selectedRowIndexes.length && (!this.parent.enableVirtualization || !this.persistSelectedData.length && !isFiltered || isFiltered && this.someDataSelected()) || checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) && !this.parent.allowPaging || this.parent.allowPaging && (checkedLen === 0 || checkedLen && isFiltered && this.someDataSelected())) {
            addClass([spanEle], ["e-uncheck"]);
            if (isInteraction) {
              this.getRenderer().setSelection(null, false, true);
            }
            this.parent.checkAllRows = "Uncheck";
          } else {
            addClass([spanEle], ["e-stop"]);
            this.parent.checkAllRows = "Intermediate";
            input2.indeterminate = true;
          }
          if (checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) {
            addClass([spanEle.parentElement], ["e-checkbox-disabled"]);
          } else {
            removeClass([spanEle.parentElement], ["e-checkbox-disabled"]);
          }
          if (this.isPartialSelection) {
            var rowCount = this.parent.getRowsObject().filter(function(e) {
              return e.isSelectable;
            }).length;
            if (rowCount === 0 && spanEle.parentElement.querySelector(".e-frame").classList.contains("e-uncheck")) {
              addClass([spanEle.parentElement], ["e-checkbox-disabled"]);
            } else {
              removeClass([spanEle.parentElement], ["e-checkbox-disabled"]);
            }
          }
          if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && !this.parent.allowPaging && !(this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result)) {
            this.updateSelectedRowIndex(index);
          }
        }
      }
    };
    Selection2.prototype.isSelectAllRowCount = function(count2) {
      var rowCount = 0;
      var rowObj = this.parent.getRowsObject();
      if (this.parent.selectionSettings.persistSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
        var dataLen = this.parent.getDataModule().isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result ? this.parent.totalDataRecordsCount : this.getData() && this.getData().length;
        if (dataLen === rowObj.length) {
          rowCount = rowObj.filter(function(e) {
            return e.isSelectable;
          }).length;
          return rowCount && count2 === rowCount;
        } else {
          return false;
        }
      } else {
        if (this.parent.allowPaging && this.parent.selectionSettings.persistSelection) {
          rowCount = this.parent.partialSelectedRecords.length + this.parent.disableSelectedRecords.length;
          if (rowCount === this.totalRecordsCount) {
            return this.parent.partialSelectedRecords.length && count2 === this.parent.partialSelectedRecords.length;
          } else {
            return false;
          }
        } else {
          rowCount = rowObj.filter(function(e) {
            return e.isSelectable;
          }).length;
          return rowCount && count2 === rowCount;
        }
      }
    };
    Selection2.prototype.keyDownHandler = function(e) {
      if ((Browser.info.name === "chrome" || Browser.info.name === "safari") && (e.keyCode === 91 || e.keyCode === 93) || Browser.info.name === "opera" && e.keyCode === 17 || Browser.info.name === "mozilla" && e.keyCode === 224) {
        this.cmdKeyPressed = true;
      }
      var targetHeadCell = parentsUntil(e.target, "e-headercell");
      var targetRowCell = parentsUntil(e.target, rowCell);
      var isCheckBox = targetHeadCell ? targetHeadCell.children[0].classList.contains("e-headerchkcelldiv") : targetRowCell ? targetRowCell.classList.contains("e-gridchkbox") : false;
      if (isCheckBox && !this.parent.allowKeyboard && e.keyCode === 32) {
        e.preventDefault();
      }
    };
    Selection2.prototype.keyUpHandler = function(e) {
      if ((Browser.info.name === "chrome" || Browser.info.name === "safari") && (e.keyCode === 91 || e.keyCode === 93) || Browser.info.name === "opera" && e.keyCode === 17 || Browser.info.name === "mozilla" && e.keyCode === 224) {
        this.cmdKeyPressed = false;
      }
    };
    Selection2.prototype.clickHandler = function(e) {
      var target = e.target;
      this.actualTarget = target;
      if (!this.isAutoFillSel && !e.ctrlKey && !e.shiftKey) {
        this.startAFCell = this.endAFCell = null;
      }
      if (this.selectionSettings.persistSelection) {
        this.deSelectedData = iterateExtend(this.persistSelectedData);
      }
      if (parentsUntil(target, row) || parentsUntil(target, "e-headerchkcelldiv") || this.selectionSettings.allowColumnSelection && target.classList.contains("e-headercell")) {
        this.isInteracted = true;
      }
      this.cmdKeyPressed = e.metaKey;
      this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch || this.isMacOS && this.cmdKeyPressed;
      if (!this.parent.allowKeyboard) {
        this.isMultiShiftRequest = false;
        this.isMultiCtrlRequest = false;
      } else {
        this.isMultiShiftRequest = e.shiftKey;
      }
      this.isMultiCtrlRequestCell = this.isMultiCtrlRequest;
      this.popUpClickHandler(e);
      var chkSelect = false;
      this.preventFocus = true;
      var checkBox;
      var checkWrap = parentsUntil(target, "e-checkbox-wrapper");
      this.checkSelectAllClicked = checkWrap && checkWrap.getElementsByClassName("e-checkselectall") || this.selectionSettings.persistSelection && parentsUntil(target, row) ? true : false;
      if (this.selectionSettings.persistSelection && this.isPartialSelection && parentsUntil(target, "e-headerchkcelldiv") && !target.querySelector(".e-checkbox-disabled")) {
        this.isHdrSelectAllClicked = true;
      }
      if (checkWrap && checkWrap.querySelectorAll(".e-checkselect,.e-checkselectall").length > 0) {
        checkBox = checkWrap.querySelector('input[type="checkbox"]');
        chkSelect = true;
      }
      this.drawBorders();
      this.updateAutoFillPosition();
      target = parentsUntil(target, rowCell);
      if (this.parent.isReact && target && !target.parentElement && target.classList.contains("e-rowcell")) {
        target = this.parent.getCellFromIndex(parseInt(target.getAttribute("index"), 10), parseInt(target.getAttribute("data-colindex"), 10));
      }
      if (this.isRowDragSelected && isNullOrUndefined(target) && this.parent.allowRowDragAndDrop && this.selectionSettings.persistSelection && this.checkSelectAllClicked) {
        this.isRowDragSelected = false;
      }
      if ((target && target.parentElement.classList.contains(row) && !this.parent.selectionSettings.checkboxOnly || chkSelect) && !this.isRowDragSelected) {
        if (this.parent.isCheckBoxSelection) {
          this.isMultiCtrlRequest = true;
        }
        this.target = target;
        if (!isNullOrUndefined(checkBox)) {
          this.checkedTarget = checkBox;
          if (checkBox.classList.contains("e-checkselectall")) {
            this.checkSelectAll(checkBox);
          } else {
            this.checkSelect(checkBox);
          }
        } else {
          var rIndex = 0;
          rIndex = parseInt(target.parentElement.getAttribute(dataRowIndex), 10);
          if (this.parent.isPersistSelection && !this.parent.editSettings.showAddNewRow && this.parent.element.getElementsByClassName(addedRow).length > 0) {
            ++rIndex;
          }
          if (!this.mUPTarget || !this.mUPTarget.isEqualNode(target)) {
            this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(dataColIndex), 10));
          }
          if (this.parent.isCheckBoxSelection) {
            this.moveIntoUncheckCollection(closest(target, "." + row));
            this.setCheckAllState();
          }
        }
        if (!this.parent.isCheckBoxSelection && Browser.isDevice && !this.isSingleSel()) {
          this.showPopup(e);
        }
      } else if (e.target.classList.contains("e-headercell") && !e.target.classList.contains("e-stackedheadercell")) {
        var uid2 = e.target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
        this.headerSelectionHandler(this.parent.getColumnIndexByUid(uid2));
      }
      this.isMultiCtrlRequest = false;
      this.isMultiCtrlRequestCell = this.isMultiCtrlRequest;
      this.isMultiShiftRequest = false;
      if (isNullOrUndefined(closest(e.target, ".e-unboundcell"))) {
        this.preventFocus = false;
      }
    };
    Selection2.prototype.popUpClickHandler = function(e) {
      var target = e.target;
      if (closest(target, ".e-headercell") || e.target.classList.contains(rowCell) || closest(target, ".e-gridpopup")) {
        if (target.classList.contains("e-rowselect")) {
          if (!target.classList.contains("e-spanclicked")) {
            target.classList.add("e-spanclicked");
            this.enableSelectMultiTouch = true;
          } else {
            target.classList.remove("e-spanclicked");
            this.enableSelectMultiTouch = false;
            this.parent.element.querySelector(".e-gridpopup").style.display = "none";
          }
        }
      } else {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
    };
    Selection2.prototype.showPopup = function(e) {
      if (!this.selectionSettings.enableSimpleMultiRowSelection) {
        setCssInGridPopUp(this.parent.element.querySelector(".e-gridpopup"), e, "e-rowselect e-icons e-icon-rowselect" + (!this.isSingleSel() && (this.selectedRecords.length > 1 || this.selectedRowCellIndexes.length > 1) ? " e-spanclicked" : ""));
      }
    };
    Selection2.prototype.rowCellSelectionHandler = function(rowIndex, cellIndex) {
      if (!this.isMultiCtrlRequest && !this.isMultiShiftRequest || this.isSingleSel()) {
        if (!this.isDragged) {
          this.selectRow(rowIndex, this.selectionSettings.enableToggle);
        }
        this.selectCell({
          rowIndex,
          cellIndex
        }, this.selectionSettings.enableToggle);
        if (this.selectedRowCellIndexes.length) {
          this.updateAutoFillPosition();
        }
        this.drawBorders();
      } else if (this.isMultiShiftRequest) {
        if (this.parent.isCheckBoxSelection || !this.parent.isCheckBoxSelection && !closest(this.target, "." + rowCell).classList.contains(gridChkBox)) {
          this.selectRowsByRange(isUndefined(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex);
        } else {
          this.addRowsToSelection([rowIndex]);
        }
        this.selectCellsByRange(isUndefined(this.prevCIdxs) ? {
          rowIndex,
          cellIndex
        } : this.prevCIdxs, {
          rowIndex,
          cellIndex
        });
        this.updateAutoFillPosition();
        this.drawBorders();
      } else {
        this.addRowsToSelection([rowIndex]);
        if (this.selectionSettings.mode === "Both") {
          var checkboxColumn = this.parent.getColumns().find(function(col) {
            return col.type === "checkbox";
          });
          var checkboxColumnIndexCheck = checkboxColumn && checkboxColumn.index !== cellIndex;
          if (checkboxColumnIndexCheck && !this.isMultiCtrlRequestCell) {
            this.selectCell({
              rowIndex,
              cellIndex
            }, this.selectionSettings.enableToggle);
          } else if (!checkboxColumn || checkboxColumnIndexCheck) {
            this.addCellsToSelection([{
              rowIndex,
              cellIndex
            }]);
          }
        } else {
          this.addCellsToSelection([{
            rowIndex,
            cellIndex
          }]);
        }
        this.showHideBorders("none");
      }
      this.isDragged = false;
    };
    Selection2.prototype.onCellFocused = function(e) {
      if (this.parent.frozenRows && e.container.isHeader && e.byKey) {
        if (e.keyArgs.action === "upArrow") {
          if (this.parent.allowFiltering) {
            e.isJump = e.element.tagName === "INPUT" ? true : false;
          } else {
            e.isJump = e.element.tagName === "TH" ? true : false;
          }
        } else {
          if (e.keyArgs.action === "downArrow") {
            var rIdx = Number(e.element.parentElement.getAttribute(dataRowIndex));
            e.isJump = rIdx === 0 ? true : false;
          } else {
            if (e.keyArgs.action === "ctrlHome") {
              e.isJump = true;
            }
          }
        }
      }
      var clear = (e.container.isHeader && e.isJump || e.container.isContent && !e.container.isSelectable) && !(e.byKey && e.keyArgs.action === "space") && !(e.element.classList.contains("e-detailrowexpand") || e.element.classList.contains("e-detailrowcollapse"));
      var headerAction = e.container.isHeader && e.element.tagName !== "TD" && !closest(e.element, "." + rowCell) && !(e.byKey && e.keyArgs.action === "space");
      if (!e.byKey || clear) {
        if (clear && !this.parent.isCheckBoxSelection) {
          this.clearSelection();
        }
        return;
      }
      var _a = e.container.isContent ? e.container.indexes : e.indexes, rowIndex = _a[0], cellIndex = _a[1];
      var prev = this.focus.getPrevIndexes();
      if (e.element.parentElement.querySelector(".e-rowcelldrag") || e.element.parentElement.querySelector(".e-dtdiagonalright") || e.element.parentElement.querySelector(".e-dtdiagonaldown")) {
        prev.cellIndex = prev.cellIndex - 1;
      }
      if (this.parent.frozenRows) {
        if (e.container.isHeader && (e.element.tagName === "TD" || closest(e.element, "." + rowCell))) {
          var hdrLength = this.parent.getHeaderTable().querySelector("thead").childElementCount;
          if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Top" && e.keyArgs.action === "upArrow") {
            hdrLength++;
          }
          rowIndex -= hdrLength;
          prev.rowIndex = !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex - hdrLength : null;
        } else {
          rowIndex += this.parent.frozenRows;
          prev.rowIndex = prev.rowIndex === 0 || !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex + this.parent.frozenRows : null;
        }
      }
      if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
        rowIndex = parseInt(e.element.parentElement.getAttribute("data-rowindex"), 10);
      }
      if ((headerAction || ["ctrlPlusA", "escape"].indexOf(e.keyArgs.action) === -1 && e.keyArgs.action !== "space" && rowIndex === prev.rowIndex && cellIndex === prev.cellIndex) && !this.selectionSettings.allowColumnSelection) {
        return;
      }
      if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        rowIndex = parseInt(e.element.parentElement.getAttribute("data-rowindex"), 10);
      }
      if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Top" && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && e.keyArgs.action === "downArrow") {
        rowIndex--;
      }
      this.preventFocus = true;
      var columnIndex = this.getKeyColIndex(e);
      if (this.needColumnSelection) {
        cellIndex = columnIndex;
      }
      if (this.parent.element.classList.contains("e-gridcell-read") && (e.keyArgs.action === "tab" || e.keyArgs.action === "shiftTab" || e.keyArgs.action === "rightArrow" || e.keyArgs.action === "leftArrow")) {
        var targetLabel = this.target.getAttribute("aria-label");
        targetLabel = this.target.innerHTML + " column header " + this.parent.getColumnByIndex(cellIndex).field;
        this.target.setAttribute("aria-label", targetLabel);
      }
      switch (e.keyArgs.action) {
        case "downArrow":
        case "upArrow":
        case "enter":
        case "shiftEnter":
          this.target = e.element;
          this.isKeyAction = true;
          this.applyDownUpKey(rowIndex, cellIndex);
          break;
        case "rightArrow":
        case "leftArrow":
          this.applyRightLeftKey(rowIndex, cellIndex);
          break;
        case "shiftDown":
        case "shiftUp":
          this.shiftDownKey(rowIndex, cellIndex);
          break;
        case "shiftLeft":
        case "shiftRight":
          this.applyShiftLeftRightKey(rowIndex, cellIndex);
          break;
        case "home":
        case "end":
          cellIndex = e.keyArgs.action === "end" ? this.getLastColIndex(rowIndex) : 0;
          this.applyHomeEndKey(rowIndex, cellIndex);
          break;
        case "ctrlHome":
        case "ctrlEnd":
          this.applyCtrlHomeEndKey(rowIndex, cellIndex);
          break;
        case "escape":
          this.clearSelection();
          if (this.parent.clipboardModule) {
            window.navigator["clipboard"].writeText("");
          }
          break;
        case "ctrlPlusA":
          this.ctrlPlusA();
          break;
        case "space":
          this.applySpaceSelection(e.element);
          break;
        case "tab":
          if (this.parent.editSettings.allowNextRowEdit) {
            this.selectRow(rowIndex);
          }
          break;
      }
      this.needColumnSelection = false;
      this.preventFocus = false;
      this.positionBorders();
      if (this.parent.isFrozenGrid()) {
        this.showHideBorders("none", true);
        this.refreshFrozenBorders();
      }
      this.updateAutoFillPosition();
    };
    Selection2.prototype.getKeyColIndex = function(e) {
      var uid2;
      var index = null;
      var stackedHeader = e.element.querySelector(".e-stackedheadercelldiv");
      if (this.selectionSettings.allowColumnSelection && parentsUntil(e.element, "e-columnheader")) {
        this.needColumnSelection = e.container.isHeader ? true : false;
        if (stackedHeader) {
          if (e.keyArgs.action === "rightArrow" || e.keyArgs.action === "leftArrow") {
            return index;
          }
          uid2 = stackedHeader.getAttribute("e-mappinguid");
          var innerColumn = this.getstackedColumns(this.parent.getColumnByUid(uid2).columns);
          var lastIndex = this.parent.getColumnIndexByUid(innerColumn[innerColumn.length - 1].uid);
          var firstIndex = this.parent.getColumnIndexByUid(innerColumn[0].uid);
          index = this.prevColIndex >= lastIndex ? firstIndex : lastIndex;
        } else {
          index = this.parent.getColumnIndexByUid(e.element.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
        }
      }
      return index;
    };
    Selection2.prototype.ctrlPlusA = function() {
      if (this.isRowType() && !this.isSingleSel()) {
        this.selectRowsByRange(0, this.getCurrentBatchRecordChanges().length - 1);
      }
      if (this.isCellType() && !this.isSingleSel()) {
        this.selectCellsByRange({
          rowIndex: 0,
          cellIndex: 0
        }, {
          rowIndex: this.parent.getRows().length - 1,
          cellIndex: this.parent.getColumns().length - 1
        });
      }
    };
    Selection2.prototype.applySpaceSelection = function(target) {
      if (target.classList.contains("e-checkselectall")) {
        this.checkedTarget = target;
        this.checkSelectAll(this.checkedTarget);
      } else {
        if (target.classList.contains("e-checkselect")) {
          this.checkedTarget = target;
          this.checkSelect(this.checkedTarget);
        }
      }
    };
    Selection2.prototype.applyDownUpKey = function(rowIndex, cellIndex) {
      var gObj = this.parent;
      if (this.parent.isCheckBoxSelection && this.parent.checkAllRows === "Check" && !this.selectionSettings.persistSelection && !this.selectionSettings.checkboxOnly) {
        this.checkSelectAllAction(false);
        this.checkedTarget = null;
      }
      if (this.isRowType() && !this.selectionSettings.checkboxOnly) {
        if (this.parent.frozenRows) {
          this.selectRow(rowIndex, true);
          this.applyUpDown(gObj.selectedRowIndex);
        } else {
          this.selectRow(rowIndex, true);
          this.applyUpDown(gObj.selectedRowIndex);
        }
      }
      if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
      }
      if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
        this.selectColumn(cellIndex);
      }
    };
    Selection2.prototype.applyUpDown = function(rowIndex) {
      if (rowIndex < 0) {
        return;
      }
      if (!this.target) {
        this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0];
      }
      var cIndex = parseInt(this.target.getAttribute(dataColIndex), 10);
      var row2 = this.contentRenderer.getRowByIndex(rowIndex);
      if (row2) {
        this.target = row2.getElementsByClassName(rowCell)[parseInt(cIndex.toString(), 10)];
      }
      this.addAttribute(this.target);
      if (this.parent.element.classList.contains("e-gridcell-read")) {
        var targetLabel = this.target.getAttribute("aria-label");
        targetLabel = this.target.innerHTML;
        this.target.setAttribute("aria-label", targetLabel);
      }
    };
    Selection2.prototype.applyRightLeftKey = function(rowIndex, cellIndex) {
      if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
        this.selectColumn(cellIndex);
      } else if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
        this.addAttribute(this.target);
      }
    };
    Selection2.prototype.applyHomeEndKey = function(rowIndex, cellIndex) {
      if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
      } else {
        this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
      }
    };
    Selection2.prototype.shiftDownKey = function(rowIndex, cellIndex) {
      this.isMultiShiftRequest = true;
      if (this.isRowType() && !this.isSingleSel()) {
        if (!isUndefined(this.prevRowIndex)) {
          this.selectRowsByRange(this.prevRowIndex, rowIndex);
          this.applyUpDown(rowIndex);
        } else if (this.isPartialSelection) {
          this.selectRow(rowIndex, true);
        } else {
          this.selectRow(0, true);
        }
      }
      if (this.isCellType() && !this.isSingleSel()) {
        this.selectCellsByRange(this.prevCIdxs || {
          rowIndex: 0,
          cellIndex: 0
        }, {
          rowIndex,
          cellIndex
        });
      }
      this.isMultiShiftRequest = false;
    };
    Selection2.prototype.applyShiftLeftRightKey = function(rowIndex, cellIndex) {
      this.isMultiShiftRequest = true;
      if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
        this.selectColumnsByRange(this.prevColIndex, cellIndex);
      } else {
        this.selectCellsByRange(this.prevCIdxs, {
          rowIndex,
          cellIndex
        });
      }
      this.isMultiShiftRequest = false;
    };
    Selection2.prototype.getstackedColumns = function(column) {
      var innerColumnIndexes = [];
      for (var i = 0, len = column.length; i < len; i++) {
        if (column[parseInt(i.toString(), 10)].columns) {
          this.getstackedColumns(column[parseInt(i.toString(), 10)].columns);
        } else {
          innerColumnIndexes.push(column[parseInt(i.toString(), 10)]);
        }
      }
      return innerColumnIndexes;
    };
    Selection2.prototype.applyCtrlHomeEndKey = function(rowIndex, cellIndex) {
      if (this.isRowType()) {
        this.selectRow(rowIndex, true);
        this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
      }
      if (this.isCellType()) {
        this.selectCell({
          rowIndex,
          cellIndex
        }, true);
      }
    };
    Selection2.prototype.addRemoveClassesForRow = function(row2, isAdd, clearAll) {
      var args = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
      }
      if (row2) {
        var cells = [].slice.call(row2.getElementsByClassName(rowCell));
        var detailIndentCell = row2.querySelector(".e-detailrowcollapse") || row2.querySelector(".e-detailrowexpand");
        var dragdropIndentCell = row2.querySelector(".e-rowdragdrop");
        if (detailIndentCell) {
          cells.push(detailIndentCell);
        }
        if (dragdropIndentCell) {
          cells.push(dragdropIndentCell);
        }
        addRemoveActiveClasses.apply(void 0, [cells, isAdd].concat(args));
      }
      this.getRenderer().setSelection(row2 ? row2.getAttribute("data-uid") : null, isAdd, clearAll);
    };
    Selection2.prototype.isRowType = function() {
      return this.selectionSettings.mode === "Row" || this.selectionSettings.mode === "Both";
    };
    Selection2.prototype.isCellType = function() {
      return this.selectionSettings.mode === "Cell" || this.selectionSettings.mode === "Both";
    };
    Selection2.prototype.isSingleSel = function() {
      return this.selectionSettings.type === "Single";
    };
    Selection2.prototype.getRenderer = function() {
      if (isNullOrUndefined(this.contentRenderer)) {
        this.contentRenderer = this.factory.getRenderer(RenderType.Content);
      }
      return this.contentRenderer;
    };
    Selection2.prototype.getSelectedRecords = function() {
      var selectedData = [];
      if (!this.selectionSettings.persistSelection && this.selectedRecords.length) {
        selectedData = this.parent.getRowsObject().filter(function(row2) {
          return row2.isSelected;
        }).map(function(m) {
          return m.data;
        });
      } else {
        selectedData = this.persistSelectedData;
      }
      return selectedData;
    };
    Selection2.prototype.selectColumn = function(index) {
      var gObj = this.parent;
      if (isNullOrUndefined(gObj.getColumns()[parseInt(index.toString(), 10)])) {
        return;
      }
      var column = gObj.getColumnByIndex(index);
      var selectedCol = gObj.getColumnHeaderByUid(column.uid);
      var isColSelected = selectedCol.classList.contains("e-columnselection");
      if (!gObj.selectionSettings.allowColumnSelection) {
        return;
      }
      var isMultiColumns = this.selectedColumnsIndexes.length > 1 && this.selectedColumnsIndexes.indexOf(index) > -1;
      this.clearColDependency();
      if (!isColSelected || !this.selectionSettings.enableToggle || isMultiColumns) {
        var args = {
          columnIndex: index,
          headerCell: selectedCol,
          column,
          cancel: false,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest
        };
        this.onActionBegin(args, columnSelecting);
        if (args.cancel) {
          this.disableInteracted();
          return;
        }
        if (!(gObj.selectionSettings.enableToggle && index === this.prevColIndex && isColSelected) || isMultiColumns) {
          this.updateColSelection(selectedCol, index);
        }
        var selectedArgs = {
          columnIndex: index,
          headerCell: selectedCol,
          column,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex
        };
        this.onActionComplete(selectedArgs, columnSelected);
      }
      this.updateColProps(index);
    };
    Selection2.prototype.selectColumnsByRange = function(startIndex, endIndex) {
      var gObj = this.parent;
      if (isNullOrUndefined(gObj.getColumns()[parseInt(startIndex.toString(), 10)])) {
        return;
      }
      var indexes = [];
      if (gObj.selectionSettings.type === "Single" || isNullOrUndefined(endIndex)) {
        indexes[0] = startIndex;
      } else {
        var min = startIndex < endIndex;
        for (var i = startIndex; min ? i <= endIndex : i >= endIndex; min ? i++ : i--) {
          indexes.push(i);
        }
      }
      this.selectColumns(indexes);
    };
    Selection2.prototype.selectColumns = function(columnIndexes) {
      var gObj = this.parent;
      var selectedCol = this.getselectedCols();
      if (gObj.selectionSettings.type === "Single") {
        columnIndexes = [columnIndexes[0]];
      }
      if (!gObj.selectionSettings.allowColumnSelection) {
        return;
      }
      this.clearColDependency();
      var selectingArgs = {
        columnIndex: columnIndexes[0],
        headerCell: selectedCol,
        columnIndexes,
        column: gObj.getColumnByIndex(columnIndexes[0]),
        cancel: false,
        target: this.actualTarget,
        isInteracted: this.isInteracted,
        previousColumnIndex: this.prevColIndex,
        isCtrlPressed: this.isMultiCtrlRequest,
        isShiftPressed: this.isMultiShiftRequest
      };
      this.onActionBegin(selectingArgs, columnSelecting);
      if (selectingArgs.cancel) {
        this.disableInteracted();
        return;
      }
      for (var i = 0, len = columnIndexes.length; i < len; i++) {
        this.updateColSelection(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(columnIndexes[parseInt(i.toString(), 10)]).uid), columnIndexes[parseInt(i.toString(), 10)]);
      }
      selectedCol = this.getselectedCols();
      var selectedArgs = {
        columnIndex: columnIndexes[0],
        headerCell: selectedCol,
        columnIndexes,
        column: gObj.getColumnByIndex(columnIndexes[0]),
        target: this.actualTarget,
        isInteracted: this.isInteracted,
        previousColumnIndex: this.prevColIndex
      };
      this.onActionComplete(selectedArgs, columnSelected);
      this.updateColProps(columnIndexes[0]);
    };
    Selection2.prototype.selectColumnWithExisting = function(startIndex) {
      var gObj = this.parent;
      if (isNullOrUndefined(gObj.getColumns()[parseInt(startIndex.toString(), 10)])) {
        return;
      }
      var newCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(startIndex).uid);
      var selectedCol = this.getselectedCols();
      if (gObj.selectionSettings.type === "Single") {
        this.clearColDependency();
      }
      if (!gObj.selectionSettings.allowColumnSelection) {
        return;
      }
      if (this.selectedColumnsIndexes.indexOf(startIndex) > -1) {
        this.clearColumnSelection(startIndex);
      } else {
        var selectingArgs = {
          columnIndex: startIndex,
          headerCell: selectedCol,
          columnIndexes: this.selectedColumnsIndexes,
          column: gObj.getColumnByIndex(startIndex),
          cancel: false,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex,
          isCtrlPressed: this.isMultiCtrlRequest,
          isShiftPressed: this.isMultiShiftRequest
        };
        this.onActionBegin(selectingArgs, columnSelecting);
        if (selectingArgs.cancel) {
          this.disableInteracted();
          return;
        }
        this.updateColSelection(newCol, startIndex);
        selectedCol = this.getselectedCols();
        var selectedArgs = {
          columnIndex: startIndex,
          headerCell: selectedCol,
          column: gObj.getColumnByIndex(startIndex),
          columnIndexes: this.selectedColumnsIndexes,
          target: this.actualTarget,
          isInteracted: this.isInteracted,
          previousColumnIndex: this.prevColIndex
        };
        this.onActionComplete(selectedArgs, columnSelected);
      }
      this.updateColProps(startIndex);
    };
    Selection2.prototype.clearColumnSelection = function(clearIndex) {
      if (this.isColumnSelected) {
        var gObj = this.parent;
        if (!isNullOrUndefined(clearIndex) && this.selectedColumnsIndexes.indexOf(clearIndex) === -1) {
          return;
        }
        var index = !isNullOrUndefined(clearIndex) ? clearIndex : this.selectedColumnsIndexes[this.selectedColumnsIndexes.length - 1];
        var column = gObj.getColumnByIndex(index);
        var selectedCol = gObj.getColumnHeaderByUid(column.uid);
        var deselectedArgs = {
          columnIndex: index,
          headerCell: selectedCol,
          columnIndexes: this.selectedColumnsIndexes,
          column,
          cancel: false,
          target: this.actualTarget,
          isInteracted: this.isInteracted
        };
        var isCanceled = this.columnDeselect(deselectedArgs, columnDeselecting);
        if (isCanceled) {
          this.disableInteracted();
          return;
        }
        var selectedHeader = !isNullOrUndefined(clearIndex) ? [selectedCol] : [].slice.call(gObj.getHeaderContent().getElementsByClassName("e-columnselection"));
        var selectedCells = this.getSelectedColumnCells(clearIndex);
        for (var i = 0, len = selectedHeader.length; i < len; i++) {
          addRemoveActiveClasses([selectedHeader[parseInt(i.toString(), 10)]], false, "e-columnselection");
        }
        for (var i = 0, len = selectedCells.length; i < len; i++) {
          addRemoveActiveClasses([selectedCells[parseInt(i.toString(), 10)]], false, "e-columnselection");
        }
        if (!isNullOrUndefined(clearIndex)) {
          this.selectedColumnsIndexes.splice(this.selectedColumnsIndexes.indexOf(clearIndex), 1);
          this.parent.getColumns()[parseInt(clearIndex.toString(), 10)].isSelected = false;
        } else {
          this.columnDeselect(deselectedArgs, columnDeselected);
          this.selectedColumnsIndexes = [];
          this.isColumnSelected = false;
          this.parent.getColumns().filter(function(col) {
            return col.isSelected = false;
          });
        }
      }
    };
    Selection2.prototype.getselectedCols = function() {
      var gObj = this.parent;
      var selectedCol;
      if (this.selectedColumnsIndexes.length > 1) {
        selectedCol = [];
        for (var i = 0; i < this.selectedColumnsIndexes.length; i++) {
          selectedCol.push(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[parseInt(i.toString(), 10)]).uid));
        }
      } else {
        selectedCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[0]).uid);
      }
      return selectedCol;
    };
    Selection2.prototype.getSelectedColumnCells = function(clearIndex) {
      var gObj = this.parent;
      var isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
      var rows = isRowTemplate ? gObj.getRows() : gObj.getDataRows();
      var seletedcells = [];
      var selectionString = !isNullOrUndefined(clearIndex) ? '[data-colindex="' + clearIndex + '"]' : ".e-columnselection";
      for (var i = 0, len = rows.length; i < len; i++) {
        seletedcells = seletedcells.concat([].slice.call(rows[parseInt(i.toString(), 10)].querySelectorAll(selectionString)));
      }
      return seletedcells;
    };
    Selection2.prototype.columnDeselect = function(args, event2) {
      if (event2 === "columnDeselected") {
        delete args.cancel;
      }
      this.onActionComplete(args, event2);
      return args.cancel;
    };
    Selection2.prototype.updateColProps = function(startIndex) {
      this.prevColIndex = startIndex;
      this.isColumnSelected = this.selectedColumnsIndexes.length && true;
    };
    Selection2.prototype.clearColDependency = function() {
      this.clearColumnSelection();
      this.selectedColumnsIndexes = [];
    };
    Selection2.prototype.updateColSelection = function(selectedCol, startIndex) {
      if (isNullOrUndefined(this.parent.getColumns()[parseInt(startIndex.toString(), 10)])) {
        return;
      }
      var isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
      var rows = isRowTemplate ? this.parent.getRows() : this.parent.getDataRows();
      this.selectedColumnsIndexes.push(startIndex);
      this.parent.getColumns()[parseInt(startIndex.toString(), 10)].isSelected = true;
      startIndex = startIndex + this.parent.getIndentCount();
      addRemoveActiveClasses([selectedCol], true, "e-columnselection");
      for (var j = 0, len = rows.length; j < len; j++) {
        if (rows[parseInt(j.toString(), 10)].classList.contains(row)) {
          if ((rows[parseInt(j.toString(), 10)].classList.contains(editedRow) || rows[parseInt(j.toString(), 10)].classList.contains(addedRow)) && this.parent.editSettings.mode === "Normal" && !isNullOrUndefined(rows[parseInt(j.toString(), 10)].querySelector("tr").childNodes[parseInt(startIndex.toString(), 10)])) {
            addRemoveActiveClasses([rows[parseInt(j.toString(), 10)].querySelector("tr").childNodes[parseInt(startIndex.toString(), 10)]], true, "e-columnselection");
          } else {
            if (this.parent.isSpan && this.parent.isFrozenGrid()) {
              var cells = rows[parseInt(j.toString(), 10)].querySelectorAll(".e-rowcell");
              for (var i = 0; i < cells.length; i++) {
                if (cells[parseInt(i.toString(), 10)].getAttribute("aria-colindex") === selectedCol.getAttribute("aria-colindex")) {
                  addRemoveActiveClasses([cells[parseInt(i.toString(), 10)]], true, "e-columnselection");
                }
              }
            } else if (!isNullOrUndefined(rows[parseInt(j.toString(), 10)].childNodes[parseInt(startIndex.toString(), 10)])) {
              addRemoveActiveClasses([rows[parseInt(j.toString(), 10)].childNodes[parseInt(startIndex.toString(), 10)]], true, "e-columnselection");
            }
          }
        }
      }
    };
    Selection2.prototype.headerSelectionHandler = function(colIndex) {
      if (!this.isMultiCtrlRequest && !this.isMultiShiftRequest || this.isSingleSel()) {
        this.selectColumn(colIndex);
      } else if (this.isMultiShiftRequest) {
        this.selectColumnsByRange(isUndefined(this.prevColIndex) ? colIndex : this.prevColIndex, colIndex);
      } else {
        this.selectColumnWithExisting(colIndex);
      }
    };
    Selection2.prototype.addEventListener_checkbox = function() {
      var _this = this;
      this.parent.on(dataReady, this.dataReady, this);
      this.onDataBoundFunction = this.onDataBound.bind(this);
      this.parent.addEventListener(dataBound, this.onDataBoundFunction);
      this.parent.on(refreshInfinitePersistSelection, this.onDataBoundFunction);
      this.parent.on(contentReady, this.checkBoxSelectionChanged, this);
      this.parent.on(beforeRefreshOnDataChange, this.initPerisistSelection, this);
      this.parent.on(onEmpty, this.setCheckAllForEmptyGrid, this);
      this.actionCompleteFunc = this.actionCompleteHandler.bind(this);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.on(click, this.clickHandler, this);
      this.resizeEndFn = function() {
        _this.updateAutoFillPosition();
        _this.drawBorders();
      };
      this.resizeEndFn.bind(this);
      this.parent.addEventListener(resizeStop, this.resizeEndFn);
    };
    Selection2.prototype.removeEventListener_checkbox = function() {
      this.parent.off(dataReady, this.dataReady);
      this.parent.removeEventListener(dataBound, this.onDataBoundFunction);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.off(refreshInfinitePersistSelection, this.onDataBoundFunction);
      this.parent.off(onEmpty, this.setCheckAllForEmptyGrid);
      this.parent.off(click, this.clickHandler);
      this.parent.off(beforeRefreshOnDataChange, this.initPerisistSelection);
    };
    Selection2.prototype.setCheckAllForEmptyGrid = function() {
      var checkAllBox = this.getCheckAllBox();
      if (checkAllBox) {
        this.parent.isCheckBoxSelection = true;
        var spanEle = checkAllBox.nextElementSibling;
        removeClass([spanEle], ["e-check", "e-stop", "e-uncheck"]);
        addClass([spanEle.parentElement], ["e-checkbox-disabled"]);
      }
    };
    Selection2.prototype.dataReady = function(e) {
      this.isHeaderCheckboxClicked = false;
      var isInfinitecroll = this.parent.enableInfiniteScrolling && e.requestType === "infiniteScroll";
      if (e.requestType !== "virtualscroll" && !this.parent.isPersistSelection && !isInfinitecroll) {
        this.disableUI = !this.parent.enableImmutableMode && !(e.requestType === "save" && e["action"] === "add");
        this.clearSelection();
        this.setCheckAllState();
        this.disableUI = false;
      }
    };
    Selection2.prototype.actionCompleteHandler = function(e) {
      if (e.requestType === "save" && this.parent.isPersistSelection) {
        this.refreshPersistSelection();
      }
    };
    Selection2.prototype.selectRowIndex = function(index) {
      this.parent.isSelectedRowIndexUpdating = true;
      if (isNullOrUndefined(this.parent.selectedRowIndex) || this.parent.selectedRowIndex === -1 || !this.parent.enablePersistence) {
        this.parent.selectedRowIndex = index;
      } else {
        this.parent.selectedRowIndex = -1;
      }
    };
    Selection2.prototype.disableInteracted = function() {
      this.isInteracted = false;
    };
    Selection2.prototype.activeTarget = function() {
      this.actualTarget = this.isInteracted ? this.actualTarget : null;
    };
    return Selection2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/search.js
var Search = (
  /** @class */
  function() {
    function Search2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    Search2.prototype.hasNonNumericCharacters = function(searchString) {
      var decimalFound = false;
      for (var _i = 0, searchString_1 = searchString; _i < searchString_1.length; _i++) {
        var char = searchString_1[_i];
        if ((char < "0" || char > "9") && char !== ".") {
          return true;
        }
        if (char === ".") {
          if (decimalFound) {
            return true;
          }
          decimalFound = true;
        }
      }
      return false;
    };
    Search2.prototype.search = function(searchString) {
      var gObj = this.parent;
      searchString = isNullOrUndefined(searchString) ? "" : searchString;
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.search,
          arg1: searchString
        });
        return;
      }
      if (searchString !== gObj.searchSettings.key) {
        gObj.searchSettings.key = searchString !== "" && !this.hasNonNumericCharacters(searchString) ? parseFloat(searchString).toString() : searchString.toString();
        gObj.dataBind();
      } else if (this.refreshSearch) {
        gObj.refresh();
      }
    };
    Search2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
      this.parent.on(searchComplete, this.onSearchComplete, this);
      this.parent.on(destroy, this.destroy, this);
      this.actionCompleteFunc = this.onActionComplete.bind(this);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.on(cancelBegin, this.cancelBeginEvent, this);
    };
    Search2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(inBoundModelChanged, this.onPropertyChanged);
      this.parent.off(searchComplete, this.onSearchComplete);
      this.parent.off(destroy, this.destroy);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunc);
      this.parent.off(cancelBegin, this.cancelBeginEvent);
    };
    Search2.prototype.destroy = function() {
      this.removeEventListener();
    };
    Search2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (!isNullOrUndefined(e.properties.key)) {
        this.parent.notify(modelChanged, {
          requestType: "searching",
          type: actionBegin,
          searchString: this.parent.searchSettings.key
        });
      } else {
        this.parent.notify(modelChanged, {
          requestType: "searching",
          type: actionBegin
        });
      }
    };
    Search2.prototype.onSearchComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        searchString: this.parent.searchSettings.key,
        requestType: "searching",
        type: actionComplete
      }));
    };
    Search2.prototype.onActionComplete = function(e) {
      this.refreshSearch = e.requestType !== "searching";
    };
    Search2.prototype.cancelBeginEvent = function(e) {
      if (e.requestType === "searching") {
        this.parent.setProperties({
          searchSettings: {
            key: ""
          }
        }, true);
      }
    };
    Search2.prototype.getModuleName = function() {
      return "search";
    };
    return Search2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/show-hide.js
var ShowHide = (
  /** @class */
  function() {
    function ShowHide2(parent) {
      this.colName = [];
      this.isShowHide = false;
      this.parent = parent;
      this.addEventListener();
    }
    ShowHide2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: batchCancel,
        handler: this.batchChanges
      }, {
        event: batchCnfrmDlgCancel,
        handler: this.resetColumnState
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    ShowHide2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    ShowHide2.prototype.batchChanges = function() {
      if (this.isShowHide) {
        this.isShowHide = false;
        this.setVisible(this.colName, this.changedCol);
        this.changedCol = this.colName = [];
      }
    };
    ShowHide2.prototype.show = function(columnName, showBy) {
      var keys = this.getToggleFields(columnName);
      var columns = this.getColumns(keys, showBy);
      this.parent.notify(tooltipDestroy, {
        module: "edit"
      });
      for (var i = 0; i < columns.length; i++) {
        columns[parseInt(i.toString(), 10)].visible = true;
      }
      this.setVisible(columns);
    };
    ShowHide2.prototype.hide = function(columnName, hideBy) {
      var keys = this.getToggleFields(columnName);
      var columns = this.getColumns(keys, hideBy);
      this.parent.notify(tooltipDestroy, {
        module: "edit"
      });
      for (var i = 0; i < columns.length; i++) {
        columns[parseInt(i.toString(), 10)].visible = false;
      }
      this.setVisible(columns);
    };
    ShowHide2.prototype.getToggleFields = function(key) {
      var finalized = [];
      if (typeof key === "string") {
        finalized = [key];
      } else {
        finalized = key;
      }
      return finalized;
    };
    ShowHide2.prototype.getColumns = function(keys, getKeyBy) {
      var _this = this;
      var columns = iterateArrayOrObject(keys, function(key) {
        return iterateArrayOrObject(_this.parent.columnModel, function(item) {
          if (item["" + getKeyBy] === key) {
            return item;
          }
          return void 0;
        })[0];
      });
      return columns;
    };
    ShowHide2.prototype.batchActionPrevent = function(columns, changedStateColumns) {
      if (changedStateColumns === void 0) {
        changedStateColumns = [];
      }
      if (isActionPrevent(this.parent)) {
        this.colName = columns;
        this.changedCol = changedStateColumns;
        this.parent.closeEdit();
        return false;
      }
      return true;
    };
    ShowHide2.prototype.resetColumnState = function() {
      if (this.isShowHide) {
        for (var i = 0; i < this.colName.length; i++) {
          this.colName[parseInt(i.toString(), 10)].visible = !this.colName[parseInt(i.toString(), 10)].visible;
        }
      }
    };
    ShowHide2.prototype.setVisible = function(columns, changedStateColumns) {
      var _this = this;
      if (changedStateColumns === void 0) {
        changedStateColumns = [];
      }
      this.isShowHide = true;
      if (!this.batchActionPrevent(columns, changedStateColumns)) {
        return;
      }
      changedStateColumns = changedStateColumns.length > 0 ? changedStateColumns : columns;
      var args = {
        requestType: "columnstate",
        cancel: false,
        columns: changedStateColumns
      };
      var cancel = "cancel";
      if (this.parent.enableInfiniteScrolling && this.parent.allowGrouping && this.parent.groupModule.groupSettings.columns.length > 0) {
        this.parent.contentModule.visibleRows = [];
      }
      this.parent.trigger(actionBegin, args, function(showHideArgs) {
        var currentViewCols = _this.parent.getColumns();
        columns = isNullOrUndefined(columns) ? currentViewCols : columns;
        if (showHideArgs["" + cancel]) {
          _this.parent.notify(resetColumns, {
            showHideArgs
          });
          if (columns.length > 0) {
            columns[0].visible = true;
          }
          return;
        }
        if (isGroupAdaptive(_this.parent)) {
          _this.parent.contentModule.emptyVcRows();
        }
        var addedRow2 = _this.parent.element.querySelector(".e-addedrow");
        if (_this.parent.editSettings.showAddNewRow && addedRow2) {
          remove(addedRow2);
          if (_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling) {
            _this.parent.isAddNewRow = true;
          }
          _this.parent.addNewRowFocus = true;
          _this.parent.isEdit = false;
        }
        if (_this.parent.allowSelection && _this.parent.getSelectedRecords().length && !_this.parent.selectionSettings.persistSelection) {
          _this.parent.clearSelection();
        }
        if (_this.parent.enableColumnVirtualization) {
          var colsInCurrentView = columns.filter(function(col1) {
            return currentViewCols.some(function(col2) {
              return col1.field === col2.field;
            });
          });
          if (colsInCurrentView.length) {
            _this.parent.notify(columnVisibilityChanged, columns);
          }
        } else {
          if (_this.parent.isFrozenGrid() && columns.length) {
            _this.parent.notify(refreshFrozenPosition, {
              isModeChg: true
            });
          }
          _this.parent.notify(columnVisibilityChanged, columns);
        }
        var params = {
          requestType: "columnstate",
          columns: changedStateColumns
        };
        _this.parent.trigger(actionComplete, params);
        var startAdd = !_this.parent.element.querySelector(".e-addedrow");
        if (_this.parent.editSettings.showAddNewRow && startAdd) {
          _this.parent.isEdit = false;
          _this.parent.addRecord();
          if (!(_this.parent.enableVirtualization || _this.parent.enableInfiniteScrolling)) {
            _this.parent.notify(showAddNewRowFocus, {});
          }
        }
        if (_this.parent.columnQueryMode !== "All") {
          _this.parent.refresh();
        }
      });
      if (this.parent.autoFit && !this.parent.groupSettings.columns.length) {
        this.parent.preventAdjustColumns();
      }
    };
    return ShowHide2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/scroll.js
var Scroll = (
  /** @class */
  function() {
    function Scroll2(parent) {
      this.previousValues = {
        top: 0,
        left: 0
      };
      this.oneTimeReady = true;
      this.parent = parent;
      this.widthService = new ColumnWidthService(parent);
      this.addEventListener();
    }
    Scroll2.prototype.getModuleName = function() {
      return "scroll";
    };
    Scroll2.prototype.setWidth = function(uiupdate) {
      this.parent.element.style.width = formatUnit(this.parent.width);
      if (uiupdate) {
        this.widthService.setWidthToColumns();
      }
      if (this.parent.toolbarModule && this.parent.toolbarModule.toolbar && this.parent.toolbarModule.toolbar.element) {
        var tlbrElement = this.parent.toolbarModule.toolbar.element;
        var tlbrLeftElement = tlbrElement.querySelector(".e-toolbar-left");
        var tlbrCenterElement = tlbrElement.querySelector(".e-toolbar-center");
        var tlbrRightElement = tlbrElement.querySelector(".e-toolbar-right");
        var tlbrItems = tlbrElement.querySelector(".e-toolbar-items");
        var tlbrLeftWidth = tlbrLeftElement ? tlbrLeftElement.clientWidth : 0;
        var tlbrCenterWidth = tlbrCenterElement ? tlbrCenterElement.clientWidth : 0;
        var tlbrRightWidth = tlbrRightElement ? tlbrRightElement.clientWidth : 0;
        var tlbrItemsWidth = tlbrItems ? tlbrItems.clientWidth : 0;
        var tlbrWidth = tlbrElement ? tlbrElement.clientWidth : 0;
        if (!this.parent.enableAdaptiveUI || tlbrLeftWidth > tlbrWidth || tlbrCenterWidth > tlbrWidth || tlbrRightWidth > tlbrWidth || tlbrItemsWidth > tlbrWidth) {
          this.parent.toolbarModule.toolbar.refreshOverflow();
        }
      }
    };
    Scroll2.prototype.setHeight = function() {
      var mHdrHeight = 0;
      var content2 = this.parent.getContent().querySelector("." + content);
      var height = this.parent.height;
      if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid() && this.parent.height !== "auto" && this.parent.height.toString().indexOf("%") < 0) {
        height = parseInt(height, 10) - Scroll2.getScrollBarWidth();
      }
      if (!this.parent.enableVirtualization && this.parent.frozenRows && this.parent.height !== "auto") {
        var tbody2 = this.parent.getHeaderContent().querySelector(tbody + ":not(.e-masked-tbody)");
        mHdrHeight = tbody2 ? tbody2.offsetHeight : 0;
        if (tbody2 && mHdrHeight) {
          var add = tbody2.getElementsByClassName(addedRow).length;
          var height_1 = add * this.parent.getRowHeight();
          mHdrHeight -= height_1;
        } else if (!this.parent.isInitialLoad && this.parent.loadingIndicator.indicatorType === "Shimmer" && this.parent.getHeaderContent().querySelector(".e-masked-table")) {
          height = parseInt(height, 10) - this.parent.frozenRows * this.parent.getRowHeight();
        }
        content2.style.height = formatUnit(height - mHdrHeight);
      } else {
        content2.style.height = formatUnit(height);
      }
      this.ensureOverflow(content2);
      if (this.parent.isFrozenGrid()) {
        this.refresh();
      }
    };
    Scroll2.prototype.setPadding = function() {
      var content2 = this.parent.getHeaderContent();
      var scrollWidth2 = Scroll2.getScrollBarWidth() - this.getThreshold();
      var cssProps = this.getCssProperties();
      content2.querySelector("." + headerContent).style[cssProps.border] = scrollWidth2 > 0 ? "1px" : "0px";
      content2.style[cssProps.padding] = scrollWidth2 > 0 ? scrollWidth2 + "px" : "0px";
    };
    Scroll2.prototype.removePadding = function(rtl) {
      var cssProps = this.getCssProperties(rtl);
      var hDiv = this.parent.getHeaderContent().querySelector("." + headerContent);
      hDiv.style[cssProps.border] = "";
      hDiv.parentElement.style[cssProps.padding] = "";
      var footerDiv = this.parent.getFooterContent();
      if (footerDiv && footerDiv.classList.contains("e-footerpadding")) {
        footerDiv.classList.remove("e-footerpadding");
      }
    };
    Scroll2.prototype.refresh = function() {
      if (this.parent.height !== "100%") {
        return;
      }
      var content2 = this.parent.getContent();
      this.parent.element.style.height = "100%";
      var height = this.widthService.getSiblingsHeight(content2);
      content2.style.height = "calc(100% - " + height + "px)";
    };
    Scroll2.prototype.getThreshold = function() {
      var appName = Browser.info.name;
      if (appName === "mozilla") {
        return 0.5;
      }
      return 1;
    };
    Scroll2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(onEmpty, this.wireEvents, this);
      this.parent.on(contentReady, this.wireEvents, this);
      this.parent.on(uiUpdate, this.onPropertyChanged, this);
      this.parent.on(textWrapRefresh, this.wireEvents, this);
      this.parent.on(headerRefreshed, this.setScrollLeft, this);
    };
    Scroll2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(onEmpty, this.wireEvents);
      this.parent.off(contentReady, this.wireEvents);
      this.parent.off(uiUpdate, this.onPropertyChanged);
      this.parent.off(textWrapRefresh, this.wireEvents);
      this.parent.off(headerRefreshed, this.setScrollLeft);
      this.unwireEvents();
    };
    Scroll2.prototype.unwireEvents = function() {
      if (this.parent.frozenRows && this.header) {
        EventHandler.remove(this.header, "touchstart pointerdown", this.setPageXY);
        EventHandler.remove(this.header, "touchmove pointermove", this.onTouchScroll);
      }
      var mScrollBar = this.parent.getContent() ? this.parent.getContent().querySelector(".e-movablescrollbar") : null;
      if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
        if (mScrollBar) {
          EventHandler.remove(mScrollBar, "scroll", this.onCustomScrollbarScroll);
        }
        if (this.content) {
          EventHandler.remove(this.content, "scroll", this.onCustomScrollbarScroll);
          EventHandler.remove(this.content, "touchstart pointerdown", this.setPageXY);
          if (!(/macintosh|ipad/.test(Browser.userAgent.toLowerCase()) && Browser.isDevice)) {
            EventHandler.remove(this.content, "touchmove pointermove", this.onTouchScroll);
          }
        }
        if (this.header) {
          EventHandler.remove(this.header, "scroll", this.onCustomScrollbarScroll);
          EventHandler.remove(this.header, "touchstart pointerdown", this.setPageXY);
          EventHandler.remove(this.header, "touchmove pointermove", this.onTouchScroll);
        }
      }
      if (this.content) {
        EventHandler.remove(this.content, "scroll", this.contentScrollHandler);
      }
      if (this.header) {
        EventHandler.remove(this.header, "scroll", this.headerScrollHandler);
      }
      this.contentScrollHandler = null;
      this.headerScrollHandler = null;
      if (this.parent.aggregates.length && this.parent.getFooterContent()) {
        EventHandler.remove(this.parent.getFooterContent().firstChild, "scroll", this.onContentScroll);
      }
    };
    Scroll2.prototype.setScrollLeft = function() {
      this.parent.getHeaderContent().querySelector("." + headerContent).scrollLeft = this.previousValues.left;
    };
    Scroll2.prototype.onContentScroll = function(scrollTarget) {
      var _this = this;
      var element = scrollTarget;
      var isHeader = element.classList.contains(headerContent);
      return function(e) {
        if (_this.content.querySelector(tbody) === null || _this.parent.isPreventScrollEvent) {
          return;
        }
        var target = e.target;
        if (_this.parent.frozenRows) {
          if (_this.content.scrollTop > 0 && _this.parent.frozenRows) {
            addClass([_this.parent.element], "e-top-shadow");
          } else {
            removeClass([_this.parent.element], "e-top-shadow");
          }
        }
        if (_this.parent.element.querySelectorAll(".e-leftfreeze,.e-fixedfreeze,.e-rightfreeze").length) {
          var errorFreeze = _this.parent.getContent().querySelectorAll('.e-freezeerror:not([style*="display: none"])');
          var errorFixed = _this.parent.getContent().querySelectorAll('.e-fixederror:not([style*="display: none"])');
          if (target.scrollLeft !== 0 && _this.parent.getVisibleFrozenLeftCount()) {
            addClass([_this.parent.element], "e-left-shadow");
          } else {
            removeClass([_this.parent.element], "e-left-shadow");
          }
          var widthVal = Math.round((_this.parent.enableRtl ? target.scrollWidth + target.scrollLeft : target.scrollWidth - target.scrollLeft) + (_this.parent.height === "auto" ? 0 : 1));
          if (widthVal === target.offsetWidth && _this.parent.getVisibleFrozenRightCount()) {
            removeClass([_this.parent.element], "e-right-shadow");
          } else {
            addClass([_this.parent.element], "e-right-shadow");
          }
          var rows = [].slice.call(_this.parent.getContent().querySelectorAll(".e-row:not(.e-hiddenrow)"));
          if ((rows.length === 1 && errorFreeze.length || _this.parent.element.querySelector('.e-freeze-autofill:not([style*="display: none"])') || errorFixed.length) && target.scrollLeft !== _this.previousValues.left) {
            target.scrollLeft = _this.previousValues.left;
            return;
          }
          if (rows.length !== 1 && (errorFreeze.length || errorFixed.length) && target.scrollTop !== _this.previousValues.top) {
            target.scrollTop = _this.previousValues.top;
            return;
          }
        }
        var left = target.scrollLeft;
        if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling && (!_this.parent.isEdit || _this.parent.editSettings.showAddNewRow && !_this.parent.element.querySelector(".e-editedrow"))) {
          _this.parent.notify(infiniteScrollHandler, {
            target: e.target,
            isLeft: _this.previousValues.left !== left
          });
        }
        if (_this.parent.groupSettings.columns.length && _this.parent.groupSettings.enableLazyLoading) {
          var isDown = _this.previousValues.top < _this.parent.getContent().firstElementChild.scrollTop;
          _this.parent.notify(lazyLoadScrollHandler, {
            scrollDown: isDown
          });
        }
        _this.parent.notify(virtualScrollEdit, {});
        var isFooter = target.classList.contains("e-summarycontent");
        if (_this.previousValues.left === left) {
          _this.previousValues.top = !isHeader ? _this.previousValues.top : target.scrollTop;
          return;
        }
        _this.parent.notify(closeFilterDialog, e);
        element.scrollLeft = left;
        if (isFooter) {
          _this.header.scrollLeft = left;
        }
        _this.previousValues.left = left;
        _this.parent.notify(scroll, {
          left
        });
      };
    };
    Scroll2.prototype.onCustomScrollbarScroll = function(cont, hdr) {
      var _this = this;
      var content2 = cont;
      var header = hdr;
      return function(e) {
        if (_this.content.querySelector(tbody) === null) {
          return;
        }
        var target = e.target;
        var left = target.scrollLeft;
        if (_this.previousValues.left === left) {
          return;
        }
        content2.scrollLeft = left;
        header.scrollLeft = left;
        _this.previousValues.left = left;
        _this.parent.notify(scroll, {
          left
        });
        if (_this.parent.isDestroyed) {
          return;
        }
      };
    };
    Scroll2.prototype.onTouchScroll = function(scrollTarget) {
      var _this = this;
      var element = scrollTarget;
      return function(e) {
        if (e.pointerType === "mouse") {
          return;
        }
        var isFrozen = _this.parent.isFrozenGrid();
        var pageXY = _this.getPointXY(e);
        var left = element.scrollLeft + (_this.pageXY.x - pageXY.x);
        var mHdr = _this.parent.getHeaderContent().querySelector("." + headerContent);
        var mCont = _this.parent.getContent().querySelector("." + content);
        if (_this.previousValues.left === left || left < 0 || mHdr.scrollWidth - mHdr.clientWidth < left) {
          return;
        }
        e.preventDefault();
        mHdr.scrollLeft = left;
        mCont.scrollLeft = left;
        if (isFrozen && _this.parent.enableColumnVirtualization) {
          var scrollBar = _this.parent.getContent().querySelector(".e-movablescrollbar");
          scrollBar.scrollLeft = left;
        }
        _this.pageXY.x = pageXY.x;
        _this.previousValues.left = left;
      };
    };
    Scroll2.prototype.setPageXY = function() {
      var _this = this;
      return function(e) {
        if (e.pointerType === "mouse") {
          return;
        }
        _this.pageXY = _this.getPointXY(e);
      };
    };
    Scroll2.prototype.getPointXY = function(e) {
      var pageXY = {
        x: 0,
        y: 0
      };
      if (e.touches && e.touches.length) {
        pageXY.x = e.touches[0].pageX;
        pageXY.y = e.touches[0].pageY;
      } else {
        pageXY.x = e.pageX;
        pageXY.y = e.pageY;
      }
      return pageXY;
    };
    Scroll2.prototype.getScrollbleParent = function(node) {
      if (node === null) {
        return null;
      }
      var parent = isNullOrUndefined(node.tagName) ? node.scrollingElement : node;
      var overflowY = document.defaultView.getComputedStyle(parent, null).overflowY;
      if (parent.scrollHeight > parent.clientHeight && overflowY !== "hidden" && overflowY !== "visible" || node.tagName === "HTML" || node.tagName === "BODY") {
        return node;
      } else {
        return this.getScrollbleParent(node.parentNode);
      }
    };
    Scroll2.prototype.addStickyListener = function(isAdd) {
      this.parentElement = this.getScrollbleParent(this.parent.element.parentElement);
      if (isAdd && this.parentElement) {
        this.eventElement = this.parentElement.tagName === "HTML" || this.parentElement.tagName === "BODY" ? document : this.parentElement;
        EventHandler.add(this.eventElement, "scroll", this.makeStickyHeader, this);
      } else if (this.eventElement) {
        EventHandler.remove(this.eventElement, "scroll", this.makeStickyHeader);
        this.eventElement = null;
      }
    };
    Scroll2.prototype.resizeFrozenRowBorder = function() {
      var div;
      if (!this.parent.element.querySelector(".e-frozenrow-border")) {
        div = this.parent.createElement("div", {
          className: "e-frozenrow-border"
        });
        this.parent.element.insertBefore(div, this.parent.element.querySelector(".e-gridcontent"));
      } else {
        div = this.parent.element.querySelector(".e-frozenrow-border");
      }
      var scrollWidth2 = this.parent.height !== "auto" ? Scroll2.getScrollBarWidth() : 0;
      div.style.width = this.parent.element.offsetWidth - scrollWidth2 - 0.5 + "px";
    };
    Scroll2.prototype.wireEvents = function() {
      var _this = this;
      if (this.oneTimeReady) {
        var frzCols = this.parent.isFrozenGrid();
        this.content = this.parent.getContent().querySelector("." + content);
        this.header = this.parent.getHeaderContent().querySelector("." + headerContent);
        var mScrollBar = this.parent.getContent().querySelector(".e-movablescrollbar");
        if (this.parent.frozenRows && this.header && this.content) {
          EventHandler.add(this.header, "touchstart pointerdown", this.setPageXY(), this);
          EventHandler.add(this.header, "touchmove pointermove", this.onTouchScroll(this.content), this);
        }
        if (frzCols && mScrollBar && this.parent.enableColumnVirtualization) {
          EventHandler.add(mScrollBar, "scroll", this.onCustomScrollbarScroll(this.content, this.header), this);
          EventHandler.add(this.content, "scroll", this.onCustomScrollbarScroll(mScrollBar, this.header), this);
          EventHandler.add(this.header, "scroll", this.onCustomScrollbarScroll(mScrollBar, this.content), this);
          EventHandler.add(this.header, "touchstart pointerdown", this.setPageXY(), this);
          EventHandler.add(this.header, "touchmove pointermove", this.onTouchScroll(this.content), this);
          EventHandler.add(this.content, "touchstart pointerdown", this.setPageXY(), this);
          if (!(/macintosh|ipad/.test(Browser.userAgent.toLowerCase()) && Browser.isDevice)) {
            EventHandler.add(this.content, "touchmove pointermove", this.onTouchScroll(this.header), this);
          }
        }
        this.contentScrollHandler = this.onContentScroll(this.header);
        this.headerScrollHandler = this.onContentScroll(this.content);
        EventHandler.add(this.content, "scroll", this.contentScrollHandler, this);
        EventHandler.add(this.header, "scroll", this.headerScrollHandler, this);
        if (this.parent.aggregates.length) {
          EventHandler.add(this.parent.getFooterContent().firstChild, "scroll", this.onContentScroll(this.content), this);
        }
        if (this.parent.enableStickyHeader) {
          this.addStickyListener(true);
        }
        this.refresh();
        this.oneTimeReady = false;
      }
      var table2 = this.parent.getContentTable();
      var sLeft;
      var sHeight;
      var clientHeight;
      getUpdateUsingRaf(function() {
        sLeft = _this.header.scrollLeft;
        sHeight = table2.scrollHeight;
        clientHeight = _this.parent.getContent().clientHeight;
      }, function() {
        var args = {
          cancel: false
        };
        _this.parent.notify(checkScrollReset, args);
        if (sHeight < clientHeight && _this.parent.height !== "auto") {
          _this.setLastRowCell();
        }
        if (_this.parent.frozenRows) {
          _this.resizeFrozenRowBorder();
        }
        if (!_this.parent.enableVirtualization && !_this.parent.enableInfiniteScrolling) {
          if (!args.cancel) {
            _this.header.scrollLeft = _this.previousValues.left;
            _this.content.scrollLeft = _this.previousValues.left;
            _this.content.scrollTop = _this.previousValues.top;
          }
        }
        if (!_this.parent.enableColumnVirtualization) {
          _this.content.scrollLeft = sLeft;
          if (_this.parent.isFrozenGrid()) {
            _this.previousValues.left = sLeft;
          }
        }
      });
      this.parent.isPreventScrollEvent = false;
    };
    Scroll2.prototype.setLastRowCell = function() {
      var table2 = this.parent.getContentTable();
      if (table2.querySelector("tr:nth-last-child(2)")) {
        removeClass(table2.querySelector("tr:nth-last-child(2)").querySelectorAll("td"), "e-lastrowcell");
        if (this.parent.isSpan) {
          removeClass(table2.querySelectorAll(".e-row-span-lastrowcell"), "e-lastrowcell");
        }
        if (this.parent.editSettings.showAddNewRow && this.parent.editSettings.newRowPosition === "Bottom") {
          addClass(table2.querySelector("tr:nth-last-child(2)").querySelectorAll("td"), "e-lastrowcell");
        }
      }
      addClass(table2.querySelectorAll("tr:last-child td"), "e-lastrowcell");
      if (this.parent.isSpan) {
        addClass(table2.querySelectorAll(".e-row-span-lastrowcell"), "e-lastrowcell");
      }
    };
    Scroll2.prototype.getCssProperties = function(rtl) {
      var css = {};
      var enableRtl = isNullOrUndefined(rtl) ? this.parent.enableRtl : rtl;
      css.border = enableRtl ? "borderLeftWidth" : "borderRightWidth";
      css.padding = enableRtl ? "paddingLeft" : "paddingRight";
      return css;
    };
    Scroll2.prototype.ensureOverflow = function(content2) {
      content2.style.overflowY = this.parent.height === "auto" ? "auto" : "scroll";
    };
    Scroll2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      this.setPadding();
      this.oneTimeReady = true;
      if (this.parent.height === "auto") {
        this.removePadding();
      }
      this.wireEvents();
      this.setHeight();
      var width = "width";
      this.setWidth(!isNullOrUndefined(e.properties["" + width]));
    };
    Scroll2.prototype.makeStickyHeader = function() {
      if (this.parent.enableStickyHeader && this.parent.element && this.parent.getContent()) {
        var contentRect = this.parent.getContent().getClientRects()[0];
        if (contentRect) {
          var headerEle = this.parent.getHeaderContent();
          var toolbarEle = this.parent.element.querySelector(".e-toolbar");
          var groupHeaderEle = this.parent.element.querySelector(".e-groupdroparea");
          var height = headerEle.offsetHeight + (toolbarEle ? toolbarEle.offsetHeight : 0) + (groupHeaderEle ? groupHeaderEle.offsetHeight : 0);
          var parentTop = this.parent.element.getClientRects()[0].top;
          var top_1 = contentRect.top - (parentTop < 0 ? 0 : parentTop);
          var left = contentRect.left;
          var colMenuEle = document.body.querySelector("#" + this.parent.element.id + "_columnmenu");
          if (top_1 < height && contentRect.bottom > 0) {
            headerEle.classList.add("e-sticky");
            var elemTop = 0;
            if (groupHeaderEle && this.parent.groupSettings.showDropArea) {
              this.setSticky(groupHeaderEle, elemTop, contentRect.width, left, true);
              elemTop += groupHeaderEle.getClientRects()[0].height;
            }
            if (toolbarEle) {
              this.setSticky(toolbarEle, elemTop, contentRect.width, left, true);
              elemTop += toolbarEle.getClientRects()[0].height;
            }
            this.setSticky(headerEle, elemTop, contentRect.width, left, true);
            if (!isNullOrUndefined(colMenuEle)) {
              colMenuEle.style.position = "fixed";
              colMenuEle.style.top = height + "px";
            }
          } else {
            if (headerEle.classList.contains("e-sticky")) {
              this.setSticky(headerEle, null, null, null, false);
              if (toolbarEle) {
                this.setSticky(toolbarEle, null, null, null, false);
              }
              if (groupHeaderEle) {
                this.setSticky(groupHeaderEle, null, null, null, false);
              }
              var ccDlg = this.parent.element.querySelector(".e-ccdlg");
              if (ccDlg) {
                ccDlg.classList.remove("e-sticky");
              }
              if (!isNullOrUndefined(colMenuEle)) {
                colMenuEle.style.position = "absolute";
                var topStyle = contentRect.top - parentTop;
                colMenuEle.style.top = topStyle + "px";
              }
            }
          }
          this.parent.notify(stickyScrollComplete, {});
        }
      }
    };
    Scroll2.prototype.setSticky = function(ele, top, width, left, isAdd) {
      if (isAdd) {
        ele.style.width = width + "px";
        ele.classList.add("e-sticky");
      } else {
        ele.classList.remove("e-sticky");
      }
      ele.style.top = top != null ? top + "px" : "";
      ele.style.left = left !== null ? parseInt(ele.style.left, 10) !== left ? left + "px" : ele.style.left : "";
    };
    Scroll2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.removeEventListener();
      var cont = this.parent.getContent().querySelector("." + content);
      EventHandler.remove(cont, "scroll", this.onContentScroll);
      if (this.parent.enableStickyHeader) {
        this.addStickyListener(false);
      }
      this.removePadding();
      removeClass([this.parent.getHeaderContent().querySelector("." + headerContent)], headerContent);
      removeClass([cont], content);
      cont.style.height = "";
      this.parent.element.style.width = "";
    };
    Scroll2.getScrollBarWidth = function() {
      return getScrollBarWidth();
    };
    return Scroll2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/models/aggregate.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AggregateColumn = (
  /** @class */
  function(_super) {
    __extends17(AggregateColumn2, _super);
    function AggregateColumn2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.templateFn = {};
      return _this;
    }
    AggregateColumn2.prototype.setFormatter = function(value) {
      this.formatFn = value;
    };
    AggregateColumn2.prototype.getFormatter = function() {
      return this.formatFn;
    };
    AggregateColumn2.prototype.setTemplate = function(helper) {
      if (helper === void 0) {
        helper = {};
      }
      if (this.footerTemplate !== void 0) {
        this.templateFn[getEnumValue(CellType, CellType.Summary)] = {
          fn: compile(this.footerTemplate, helper),
          property: "footerTemplate"
        };
      }
      if (this.groupFooterTemplate !== void 0) {
        this.templateFn[getEnumValue(CellType, CellType.GroupSummary)] = {
          fn: compile(this.groupFooterTemplate, helper),
          property: "groupFooterTemplate"
        };
      }
      if (this.groupCaptionTemplate !== void 0) {
        this.templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = {
          fn: compile(this.groupCaptionTemplate, helper),
          property: "groupCaptionTemplate"
        };
      }
    };
    AggregateColumn2.prototype.getTemplate = function(type) {
      return this.templateFn[getEnumValue(CellType, type)];
    };
    AggregateColumn2.prototype.setPropertiesSilent = function(prop) {
      this.setProperties(prop, true);
    };
    __decorate5([Property()], AggregateColumn2.prototype, "type", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "field", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "columnName", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "format", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "footerTemplate", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "groupFooterTemplate", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "groupCaptionTemplate", void 0);
    __decorate5([Property()], AggregateColumn2.prototype, "customAggregate", void 0);
    return AggregateColumn2;
  }(ChildProperty)
);
var AggregateRow = (
  /** @class */
  function(_super) {
    __extends17(AggregateRow2, _super);
    function AggregateRow2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([Collection([], AggregateColumn)], AggregateRow2.prototype, "columns", void 0);
    return AggregateRow2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/clipboard.js
var Clipboard = (
  /** @class */
  function() {
    function Clipboard2(parent, serviceLocator) {
      this.copyContent = "";
      this.isSelect = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    Clipboard2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(contentReady, this.initialEnd, this);
      this.parent.on(keyPressed, this.keyDownHandler, this);
      this.parent.on(click, this.clickHandler, this);
      this.parent.on(onEmpty, this.initialEnd, this);
      EventHandler.add(this.parent.element, "keydown", this.pasteHandler, this);
    };
    Clipboard2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(keyPressed, this.keyDownHandler);
      this.parent.off(contentReady, this.initialEnd);
      this.parent.off(click, this.clickHandler);
      this.parent.off(onEmpty, this.initialEnd);
      EventHandler.remove(this.parent.element, "keydown", this.pasteHandler);
    };
    Clipboard2.prototype.clickHandler = function(e) {
      var target = e.target;
      target = parentsUntil(target, "e-rowcell");
    };
    Clipboard2.prototype.pasteHandler = function(e) {
      var _this = this;
      var grid = this.parent;
      var isMacLike = /(Mac)/i.test(navigator.platform);
      var selectedRowCellIndexes = this.parent.getSelectedRowCellIndexes();
      if (e.keyCode === 67 && isMacLike && e.metaKey && !grid.isEdit) {
        this.copy();
      }
      if (selectedRowCellIndexes.length && e.keyCode === 86 && (!isMacLike && e.ctrlKey || isMacLike && e.metaKey) && !grid.isEdit) {
        var target = closest(document.activeElement, "." + rowCell);
        if (!this.clipBoardTextArea || !target || !grid.editSettings.allowEditing || grid.editSettings.mode !== "Batch" || grid.selectionSettings.mode !== "Cell" || grid.selectionSettings.cellSelectionMode === "Flow") {
          return;
        }
        this.activeElement = document.activeElement;
        var x_1 = window.scrollX;
        var y_1 = window.scrollY;
        this.clipBoardTextArea.focus();
        setTimeout(function() {
          _this.activeElement.focus();
          window.scrollTo(x_1, y_1);
          _this.paste(_this.clipBoardTextArea.value, selectedRowCellIndexes[0].rowIndex, selectedRowCellIndexes[0].cellIndexes[0]);
        }, isMacLike ? 100 : 10);
      }
    };
    Clipboard2.prototype.paste = function(data, rowIndex, colIndex) {
      var grid = this.parent;
      var cIdx = colIndex;
      var rIdx = rowIndex;
      var col;
      var value;
      var isAvail;
      var rows = data.split("\n");
      var cols;
      for (var r = 0; r < rows.length; r++) {
        cols = rows[parseInt(r.toString(), 10)].split("	");
        cIdx = colIndex;
        if (r === rows.length - 1 && rows[parseInt(r.toString(), 10)] === "" || isUndefined(grid.getRowByIndex(rIdx))) {
          cIdx++;
          break;
        }
        for (var c = 0; c < cols.length; c++) {
          isAvail = grid.getCellFromIndex(rIdx, cIdx);
          if (!isAvail) {
            cIdx++;
            break;
          }
          col = grid.getColumnByIndex(cIdx);
          value = col.getParser() ? col.getParser()(cols[parseInt(c.toString(), 10)]) : cols[parseInt(c.toString(), 10)];
          if (col.allowEditing && !col.isPrimaryKey && !col.template) {
            var args = {
              column: col,
              data: value,
              rowIndex: rIdx
            };
            this.parent.trigger(beforePaste, args);
            rIdx = args.rowIndex;
            if (!args.cancel) {
              if (grid.editModule) {
                if (col.type === "number") {
                  this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));
                } else {
                  grid.editModule.updateCell(rIdx, col.field, args.data);
                }
              }
            }
          }
          cIdx++;
        }
        rIdx++;
      }
      grid.selectionModule.selectCellsByRange({
        rowIndex,
        cellIndex: colIndex
      }, {
        rowIndex: rIdx - 1,
        cellIndex: cIdx - 1
      });
      var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);
      if (cell) {
        classList(cell, ["e-focus", "e-focused"], []);
      }
      this.clipBoardTextArea.value = "";
    };
    Clipboard2.prototype.initialEnd = function() {
      this.l10n = this.serviceLocator.getService("localization");
      this.parent.off(contentReady, this.initialEnd);
      this.clipBoardTextArea = this.parent.createElement("textarea", {
        className: "e-clipboard",
        styles: "opacity: 0",
        attrs: {
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("ClipBoard")
        }
      });
      this.parent.element.appendChild(this.clipBoardTextArea);
    };
    Clipboard2.prototype.keyDownHandler = function(e) {
      if (e.action === "ctrlPlusC") {
        this.copy();
      } else if (e.action === "ctrlShiftPlusH") {
        this.copy(true);
      }
    };
    Clipboard2.prototype.setCopyData = function(withHeader) {
      if (window.getSelection().toString() === "") {
        this.clipBoardTextArea.value = this.copyContent = "";
        var rows = this.parent.getDataRows();
        if (this.parent.selectionSettings.mode !== "Cell") {
          var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function(a, b) {
            return a - b;
          });
          if (withHeader) {
            var headerTextArray = [];
            for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {
              headerTextArray[parseInt(i.toString(), 10)] = this.parent.getVisibleColumns()[parseInt(i.toString(), 10)].headerText;
            }
            this.getCopyData(headerTextArray, false, "	", withHeader);
            this.copyContent += "\n";
          }
          for (var i = 0; i < selectedIndexes.length; i++) {
            if (i > 0) {
              this.copyContent += "\n";
            }
            var leftCols = [];
            var idx = selectedIndexes[parseInt(i.toString(), 10)];
            if (!isGroupAdaptive(this.parent) && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache || this.parent.groupSettings.columns.length && this.parent.groupSettings.enableLazyLoading)) {
              idx = rows.map(function(m) {
                return m.getAttribute("data-rowindex");
              }).indexOf(selectedIndexes[parseInt(i.toString(), 10)].toString());
            }
            leftCols.push.apply(leftCols, [].slice.call(rows[parseInt(idx.toString(), 10)].querySelectorAll(".e-rowcell:not(.e-hide)")));
            this.getCopyData(leftCols, false, "	", withHeader);
          }
        } else {
          var obj = this.checkBoxSelection();
          if (obj.status) {
            if (withHeader) {
              var headers = [];
              for (var i = 0; i < obj.colIndexes.length; i++) {
                var colHeader = this.parent.getColumnHeaderByIndex(obj.colIndexes[parseInt(i.toString(), 10)]);
                if (!colHeader.classList.contains("e-hide")) {
                  headers.push(colHeader);
                }
              }
              this.getCopyData(headers, false, "	", withHeader);
              this.copyContent += "\n";
            }
            for (var i = 0; i < obj.rowIndexes.length; i++) {
              if (i > 0) {
                this.copyContent += "\n";
              }
              var cells = [].slice.call(rows[obj.rowIndexes[parseInt(i.toString(), 10)]].querySelectorAll(".e-cellselectionbackground:not(.e-hide)"));
              this.getCopyData(cells, false, "	", withHeader);
            }
          } else {
            this.getCopyData([].slice.call(this.parent.element.getElementsByClassName("e-cellselectionbackground")), true, "\n", withHeader);
          }
        }
        var args = {
          data: this.copyContent,
          cancel: false
        };
        this.parent.trigger(beforeCopy, args);
        if (args.cancel) {
          return;
        }
        this.clipBoardTextArea.value = this.copyContent = args.data;
        if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {
          this.clipBoardTextArea.select();
        } else {
          this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);
        }
        this.isSelect = true;
      }
    };
    Clipboard2.prototype.getCopyData = function(cells, isCell, splitKey, withHeader) {
      var isElement = typeof cells[0] !== "string";
      for (var j = 0; j < cells.length; j++) {
        if (withHeader && isCell) {
          var colIdx = parseInt(cells[parseInt(j.toString(), 10)].getAttribute(dataColIndex), 10);
          this.copyContent += this.parent.getColumns()[parseInt(colIdx.toString(), 10)].headerText + "\n";
        }
        if (isElement) {
          if (!cells[parseInt(j.toString(), 10)].classList.contains("e-hide")) {
            this.copyContent += cells[parseInt(j.toString(), 10)].innerText;
          }
        } else {
          this.copyContent += cells[parseInt(j.toString(), 10)];
        }
        if (j < cells.length - 1) {
          this.copyContent += splitKey;
        }
      }
    };
    Clipboard2.prototype.copy = function(withHeader) {
      if (document.queryCommandSupported("copy") && this.clipBoardTextArea) {
        this.setCopyData(withHeader);
        document.execCommand("copy");
        this.clipBoardTextArea.blur();
      }
      if (this.isSelect) {
        window.getSelection().removeAllRanges();
        this.isSelect = false;
      }
    };
    Clipboard2.prototype.getModuleName = function() {
      return "clipboard";
    };
    Clipboard2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.clipBoardTextArea) {
        remove(this.clipBoardTextArea);
        this.clipBoardTextArea = null;
      }
    };
    Clipboard2.prototype.checkBoxSelection = function() {
      var gridObj = this.parent;
      var obj = {
        status: false
      };
      if (gridObj.selectionSettings.mode === "Cell") {
        var rowCellIndxes = gridObj.getSelectedRowCellIndexes();
        var str = void 0;
        var rowIndexes = [];
        var i = void 0;
        for (i = 0; i < rowCellIndxes.length; i++) {
          if (rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.length) {
            rowIndexes.push(rowCellIndxes[parseInt(i.toString(), 10)].rowIndex);
          }
          if (rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.length) {
            if (!str) {
              str = JSON.stringify(rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.sort());
            }
            if (str !== JSON.stringify(rowCellIndxes[parseInt(i.toString(), 10)].cellIndexes.sort())) {
              break;
            }
          }
        }
        rowIndexes.sort(function(a, b) {
          return a - b;
        });
        if (i === rowCellIndxes.length) {
          obj = {
            status: true,
            rowIndexes,
            colIndexes: rowCellIndxes[0].cellIndexes
          };
        }
      }
      return obj;
    };
    return Clipboard2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/logger.js
var BASE_DOC_URL = "https://ej2.syncfusion.com/documentation/grid";
var DOC_URL = "https://ej2.syncfusion.com/documentation/";
var WARNING = "[EJ2Grid.Warning]";
var ERROR = "[EJ2Grid.Error]";
var INFO = "[EJ2Grid.Info]";
var Logger = (
  /** @class */
  function() {
    function Logger2(parent) {
      this.parent = parent;
      this.parent.on("initial-end", this.patchadaptor, this);
    }
    Logger2.prototype.getModuleName = function() {
      return "logger";
    };
    Logger2.prototype.log = function(types, args) {
      if (!(types instanceof Array)) {
        types = [types];
      }
      var type = types;
      for (var i = 0; i < type.length; i++) {
        var item = detailLists[type[parseInt(i.toString(), 10)]];
        var cOp = item.check(args, this.parent);
        if (cOp.success) {
          console[item.logType](item.generateMessage(args, this.parent, cOp.options));
        }
      }
    };
    Logger2.prototype.patchadaptor = function() {
      var adaptor = this.parent.getDataModule().dataManager.adaptor;
      var original = adaptor.beforeSend;
      if (original) {
        adaptor.beforeSend = function(dm, request, settings) {
          original.call(adaptor, dm, request, settings);
        };
      }
    };
    Logger2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("initial-end", this.patchadaptor);
    };
    return Logger2;
  }()
);
var detailLists = {
  // eslint-disable-next-line camelcase
  module_missing: {
    type: "module_missing",
    logType: "warn",
    check: function(args, parent) {
      var injected = parent.getInjectedModules().map(function(m) {
        return m.prototype.getModuleName();
      });
      var modules = parent.requiredModules().map(function(m) {
        return m.member;
      }).filter(function(name) {
        return injected.indexOf(name) === -1;
      });
      return {
        success: modules.filter(function(m) {
          return m !== "resize";
        }).length > 0,
        options: modules
      };
    },
    generateMessage: function(args, parent, modules) {
      modules = modules.filter(function(m) {
        return m !== "resize";
      }).reduce(function(prev, cur) {
        return prev + ("* " + cur + "\n");
      }, "");
      return WARNING + ": MODULES MISSING\nThe following modules are not injected:.\n" + ("" + modules) + ("Refer to " + BASE_DOC_URL + "/module.html for documentation on importing feature modules.");
    }
  },
  // eslint-disable-next-line camelcase
  promise_enabled: {
    type: "promise_enabled",
    logType: "error",
    check: function() {
      return {
        success: typeof Promise === "undefined"
      };
    },
    generateMessage: function() {
      return ERROR + ": PROMISE UNDEFINED\nPromise object is not present in the global environment,please use polyfil to support Promise object in your environment.\n" + ("Refer to " + DOC_URL + "/base/browser.html?#required-polyfills for more information.");
    }
  },
  // eslint-disable-next-line camelcase
  primary_column_missing: {
    type: "primary_column_missing",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: parent.enableColumnVirtualization ? parent.getPrimaryKeyFieldNames().length === 0 : parent.getColumns().filter(function(column) {
          return column.isPrimaryKey;
        }).length === 0
      };
    },
    generateMessage: function() {
      return WARNING + ": PRIMARY KEY MISSING\nEditing is enabled but primary key column is not specified.\n" + ("Refer to " + BASE_DOC_URL + "/api-column.html?#isprimarykey for documentation on providing primary key columns.");
    }
  },
  // eslint-disable-next-line camelcase
  selection_key_missing: {
    type: "selection_key_missing",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: parent.selectionSettings.persistSelection && parent.getColumns().filter(function(column) {
          return column.isPrimaryKey;
        }).length === 0
      };
    },
    generateMessage: function() {
      return WARNING + ": PRIMARY KEY MISSING\nselectionSettings.persistSelection property is enabled. It requires one primary key column to persist selection.\n" + ("Refer to " + BASE_DOC_URL + "/api-column.html?#isprimarykey for documentation on providing primary key columns.");
    }
  },
  actionfailure: {
    type: "actionfailure",
    logType: "error",
    check: function() {
      return {
        success: true
      };
    },
    generateMessage: function(args, parent) {
      var message = "";
      var formatError = formatErrorHandler(args, parent);
      var ajaxError = ajaxErrorHandler(args, parent);
      if (ajaxError !== "") {
        message = ajaxError;
      } else if (formatError !== "") {
        message = formatError;
      } else {
        message = args.error;
      }
      return WARNING + ": " + message;
    }
  },
  // eslint-disable-next-line camelcase
  locale_missing: {
    type: "locale_missing",
    logType: "warn",
    check: function(args, parent) {
      var lObj = DataUtil.getObject("locale." + parent.locale + ".grid", L10n);
      return {
        success: parent.locale !== "en-US" && isNullOrUndefined(lObj)
      };
    },
    generateMessage: function(args, parent) {
      return WARNING + ": LOCALE CONFIG MISSING\n" + ("Locale configuration for '" + parent.locale + "' is not provided.\n") + ("Refer to " + BASE_DOC_URL + "/globalization-and-localization.html?#localization \n             for documentation on setting locale configuration.");
    }
  },
  limitation: {
    type: "limitation",
    logType: "warn",
    check: function(args, parent) {
      var name = args;
      var opt;
      switch (name) {
        case "freeze":
          opt = {
            success: !isUndefined(parent.detailTemplate) || !isUndefined(parent.childGrid),
            options: {
              name: "freeze"
            }
          };
          break;
        case "virtualization":
          opt = {
            success: !isUndefined(parent.detailTemplate) || !isUndefined(parent.childGrid),
            options: {
              name: "virtualization"
            }
          };
          break;
        default:
          opt = {
            success: false
          };
          break;
      }
      return opt;
    },
    generateMessage: function(args, parent, options) {
      var name = options.name;
      var opt;
      switch (name) {
        case "freeze":
          opt = "Frozen rows and columns do not support the following features:\n* Details Template\n* Hierarchy Grid\n";
          break;
        case "virtualization":
          opt = "Virtualization does not support the following features.\n* Details Template.\n* Hierarchy Grid.\n";
          break;
        default:
          opt = "";
          break;
      }
      return WARNING + (": " + name.toUpperCase() + " LIMITATIONS\n") + opt;
    }
  },
  // eslint-disable-next-line camelcase
  check_datasource_columns: {
    type: "check_datasource_columns",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: !(parent.columns.length || parent.dataSource instanceof DataManager || !isNullOrUndefined(parent.dataSource) && parent.dataSource.length)
      };
    },
    generateMessage: function() {
      return WARNING + ": GRID CONFIG MISSING\ndataSource and columns are not provided in the grid. At least one of either must be provided for grid configuration.\n" + ("Refer to " + BASE_DOC_URL + "/columns.html for documentation on configuring the grid data and columns.");
    }
  },
  // eslint-disable-next-line camelcase
  virtual_height: {
    type: "virtual_height",
    logType: "error",
    check: function(args, parent) {
      return {
        success: isNullOrUndefined(parent.height) || parent.height === "auto"
      };
    },
    generateMessage: function() {
      return ERROR + ": GRID HEIGHT MISSING \nheight property is required to use virtualization.\n" + ("Refer to " + BASE_DOC_URL + "/virtual.html for documentation on configuring the virtual grid.");
    }
  },
  // eslint-disable-next-line camelcase
  grid_remote_edit: {
    type: "grid_remote_edit",
    logType: "error",
    check: function(args) {
      return {
        success: Array.isArray(args) || Array.isArray(args.result)
      };
    },
    generateMessage: function() {
      return ERROR + ": RETRUN VALUE MISSING  \nRemote service returns invalid data. \n" + ("Refer to " + BASE_DOC_URL + "/edit.html for documentation on configuring editing with remote data.");
    }
  },
  // eslint-disable-next-line camelcase
  grid_sort_comparer: {
    type: "grid_sort_comparer",
    logType: "warn",
    check: function(args, parent) {
      return {
        success: parent.getDataModule().isRemote()
      };
    },
    generateMessage: function() {
      return WARNING + ": SORT COMPARER NOT WORKING  \nSort comparer will not work with remote data." + ("Refer to " + BASE_DOC_URL + "/sorting/#custom-sort-comparer for documentation on using the sort comparer.");
    }
  },
  // eslint-disable-next-line camelcase
  resize_min_max: {
    type: "resize_min_max",
    logType: "info",
    check: function(args) {
      return {
        success: args.column.minWidth && args.column.minWidth >= args.width || args.column.maxWidth && args.column.maxWidth <= args.width
      };
    },
    generateMessage: function() {
      return INFO + ": RESIZING COLUMN REACHED MIN OR MAX  \nThe column resizing width is at its min or max.";
    }
  },
  // eslint-disable-next-line camelcase
  action_disabled_column: {
    type: "action_disabled_column",
    logType: "info",
    check: function(args) {
      var success = true;
      var fn;
      switch (args.moduleName) {
        case "reorder":
          if (isNullOrUndefined(args.destColumn)) {
            fn = "reordering action is disabled for the " + args.column.headerText + " column";
          } else {
            fn = "reordering action is disabled for the " + (args.column.allowReordering ? args.destColumn.headerText : args.column.headerText) + " column";
          }
          break;
        case "group":
          fn = "grouping action is disabled for the " + args.columnName + " column.";
          break;
        case "filter":
          fn = "filtering action is disabled for the " + args.columnName + " column.";
          break;
        case "sort":
          fn = "sorting action is disabled for the " + args.columnName + " column.";
          break;
      }
      return {
        success,
        options: {
          fn
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return INFO + (": ACTION DISABLED \n " + options.fn);
    }
  },
  // eslint-disable-next-line camelcase
  exporting_begin: {
    type: "exporting_begin",
    logType: "info",
    check: function(args) {
      return {
        success: true,
        options: {
          args
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return INFO + (": EXPORTING INPROGRESS \n Grid " + options.args + "ing is in progress");
    }
  },
  // eslint-disable-next-line camelcase
  exporting_complete: {
    type: "exporting_complete",
    logType: "info",
    check: function(args) {
      return {
        success: true,
        options: {
          args
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return INFO + (": EXPORTING COMPLETED \n Grid " + options.args + "ing is complete");
    }
  },
  // eslint-disable-next-line camelcase
  foreign_key_failure: {
    type: "foreign_key_failure",
    logType: "error",
    check: function() {
      return {
        success: true
      };
    },
    generateMessage: function() {
      return ERROR + ": FOREIGNKEY CONFIG \n  Grid foreign key column needs a valid data source/service." + ("Refer to " + BASE_DOC_URL + "/columns/#foreign-key-column for documentation on configuring foreign key columns.");
    }
  },
  // eslint-disable-next-line camelcase
  initial_action: {
    type: "initial_action",
    logType: "error",
    check: function(args) {
      var success = true;
      var fn;
      switch (args.moduleName) {
        case "group":
          fn = "The " + args.columnName + " column is not available in the grid's column model.Please provide a valid field name to group the column";
          break;
        case "filter":
          fn = "The " + args.columnName + " column is not available in the grid's column model.Please provide a valid field name to filter the column.";
          break;
        case "sort":
          fn = "The " + args.columnName + " column is not available in the grid's column model.Please provide a valid field name to sort the column.";
          break;
      }
      return {
        success,
        options: {
          fn
        }
      };
    },
    generateMessage: function(args, parent, options) {
      return ERROR + (": INITIAL ACTION FAILURE \n " + options.fn);
    }
  },
  // eslint-disable-next-line camelcase
  frozen_rows_columns: {
    type: "frozen_rows_columns",
    logType: "error",
    check: function(args, parent) {
      return {
        success: parent.getColumns().length <= parent.frozenColumns || parent.currentViewData.length && parent.frozenRows >= parent.currentViewData.length
      };
    },
    generateMessage: function(args, parent) {
      return ERROR + (": OUT OF RANGE ERROR-\n " + (parent.getColumns().length <= parent.frozenColumns ? "FROZEN COLUMNS," : "")) + ((parent.frozenRows >= parent.currentViewData.length ? "FROZEN ROWS" : "") + " invalid");
    }
  },
  // eslint-disable-next-line camelcase
  column_type_missing: {
    type: "column_type_missing",
    logType: "error",
    check: function(args) {
      return {
        success: isNullOrUndefined(args.column.type),
        options: args.column.headerText
      };
    },
    generateMessage: function(args, parent, options) {
      return ERROR + (": COLUMN TYPE MISSING-\n  " + options + " column type was invalid or not defined.") + ("Please go through below help link: " + DOC_URL + "/grid/columns/#column-type");
    }
  },
  // eslint-disable-next-line camelcase
  datasource_syntax_mismatch: {
    type: "datasource_syntax_mismatch",
    logType: "warn",
    check: function(args) {
      return {
        success: args.dataState.dataSource && !(args.dataState.dataSource instanceof DataManager || "result" in args.dataState.dataSource || args.dataState.dataSource instanceof Array) && !isNullOrUndefined(args.dataState.dataStateChange)
      };
    },
    generateMessage: function() {
      return WARNING + ": DATASOURCE SYNTAX WARNING\nDataSource should be in the form of {result: Object[], count: number}when dataStateChangeEvent used";
    }
  }
};
var formatErrorHandler = function(args) {
  var error = args.error;
  if (error.indexOf && error.indexOf("Format options") !== 0) {
    return "";
  }
  return "INVALID FORMAT\nFor more information, refer to the following documentation links:\n" + ("Number format: " + DOC_URL + "/common/internationalization#supported-format-string\n") + ("Date format: " + DOC_URL + "/common/internationalization#manipulating-datetime\n") + ("Message: " + error);
};
var ajaxErrorHandler = function(args) {
  var error = DataUtil.getObject("error.error", args);
  if (isNullOrUndefined(error)) {
    return "";
  }
  var jsonResult = "";
  try {
    jsonResult = JSON.parse(error.responseText);
  } catch (_a) {
    jsonResult = "";
  }
  return "XMLHTTPREQUEST FAILED\n" + ("Url: " + error.responseURL + "\n") + ("Status: " + error.status + " - " + error.statusText + "\n") + (jsonResult !== "" ? "Message: " + jsonResult : "");
};

// node_modules/@syncfusion/ej2-grids/src/grid/base/grid.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortDescriptor = (
  /** @class */
  function(_super) {
    __extends18(SortDescriptor2, _super);
    function SortDescriptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property()], SortDescriptor2.prototype, "field", void 0);
    __decorate6([Property()], SortDescriptor2.prototype, "direction", void 0);
    __decorate6([Property(false)], SortDescriptor2.prototype, "isFromGroup", void 0);
    return SortDescriptor2;
  }(ChildProperty)
);
var SortSettings = (
  /** @class */
  function(_super) {
    __extends18(SortSettings2, _super);
    function SortSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Collection([], SortDescriptor)], SortSettings2.prototype, "columns", void 0);
    __decorate6([Property(true)], SortSettings2.prototype, "allowUnsort", void 0);
    return SortSettings2;
  }(ChildProperty)
);
var Predicate2 = (
  /** @class */
  function(_super) {
    __extends18(Predicate3, _super);
    function Predicate3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property()], Predicate3.prototype, "field", void 0);
    __decorate6([Property()], Predicate3.prototype, "operator", void 0);
    __decorate6([Property()], Predicate3.prototype, "value", void 0);
    __decorate6([Property()], Predicate3.prototype, "matchCase", void 0);
    __decorate6([Property(false)], Predicate3.prototype, "ignoreAccent", void 0);
    __decorate6([Property()], Predicate3.prototype, "predicate", void 0);
    __decorate6([Property({})], Predicate3.prototype, "actualFilterValue", void 0);
    __decorate6([Property({})], Predicate3.prototype, "actualOperator", void 0);
    __decorate6([Property()], Predicate3.prototype, "type", void 0);
    __decorate6([Property()], Predicate3.prototype, "ejpredicate", void 0);
    __decorate6([Property()], Predicate3.prototype, "uid", void 0);
    __decorate6([Property()], Predicate3.prototype, "isForeignKey", void 0);
    __decorate6([Property()], Predicate3.prototype, "condition", void 0);
    return Predicate3;
  }(ChildProperty)
);
var InfiniteScrollSettings = (
  /** @class */
  function(_super) {
    __extends18(InfiniteScrollSettings2, _super);
    function InfiniteScrollSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property(false)], InfiniteScrollSettings2.prototype, "enableCache", void 0);
    __decorate6([Property(3)], InfiniteScrollSettings2.prototype, "maxBlocks", void 0);
    __decorate6([Property(3)], InfiniteScrollSettings2.prototype, "initialBlocks", void 0);
    return InfiniteScrollSettings2;
  }(ChildProperty)
);
var FilterSettings = (
  /** @class */
  function(_super) {
    __extends18(FilterSettings2, _super);
    function FilterSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Collection([], Predicate2)], FilterSettings2.prototype, "columns", void 0);
    __decorate6([Property("FilterBar")], FilterSettings2.prototype, "type", void 0);
    __decorate6([Property("OnEnter")], FilterSettings2.prototype, "mode", void 0);
    __decorate6([Property(true)], FilterSettings2.prototype, "showFilterBarStatus", void 0);
    __decorate6([Property(1500)], FilterSettings2.prototype, "immediateModeDelay", void 0);
    __decorate6([Property()], FilterSettings2.prototype, "operators", void 0);
    __decorate6([Property(false)], FilterSettings2.prototype, "ignoreAccent", void 0);
    __decorate6([Property(false)], FilterSettings2.prototype, "enableInfiniteScrolling", void 0);
    __decorate6([Property(50)], FilterSettings2.prototype, "itemsCount", void 0);
    __decorate6([Property("Shimmer")], FilterSettings2.prototype, "loadingIndicator", void 0);
    __decorate6([Property(false)], FilterSettings2.prototype, "enableCaseSensitivity", void 0);
    __decorate6([Property(false)], FilterSettings2.prototype, "showFilterBarOperator", void 0);
    return FilterSettings2;
  }(ChildProperty)
);
var SelectionSettings = (
  /** @class */
  function(_super) {
    __extends18(SelectionSettings2, _super);
    function SelectionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property("Row")], SelectionSettings2.prototype, "mode", void 0);
    __decorate6([Property("Flow")], SelectionSettings2.prototype, "cellSelectionMode", void 0);
    __decorate6([Property("Single")], SelectionSettings2.prototype, "type", void 0);
    __decorate6([Property(false)], SelectionSettings2.prototype, "checkboxOnly", void 0);
    __decorate6([Property(false)], SelectionSettings2.prototype, "persistSelection", void 0);
    __decorate6([Property("Default")], SelectionSettings2.prototype, "checkboxMode", void 0);
    __decorate6([Property(false)], SelectionSettings2.prototype, "enableSimpleMultiRowSelection", void 0);
    __decorate6([Property(true)], SelectionSettings2.prototype, "enableToggle", void 0);
    __decorate6([Property(false)], SelectionSettings2.prototype, "allowColumnSelection", void 0);
    return SelectionSettings2;
  }(ChildProperty)
);
var SearchSettings = (
  /** @class */
  function(_super) {
    __extends18(SearchSettings2, _super);
    function SearchSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property([])], SearchSettings2.prototype, "fields", void 0);
    __decorate6([Property("")], SearchSettings2.prototype, "key", void 0);
    __decorate6([Property("contains")], SearchSettings2.prototype, "operator", void 0);
    __decorate6([Property(true)], SearchSettings2.prototype, "ignoreCase", void 0);
    __decorate6([Property(false)], SearchSettings2.prototype, "ignoreAccent", void 0);
    return SearchSettings2;
  }(ChildProperty)
);
var RowDropSettings = (
  /** @class */
  function(_super) {
    __extends18(RowDropSettings2, _super);
    function RowDropSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property()], RowDropSettings2.prototype, "targetID", void 0);
    return RowDropSettings2;
  }(ChildProperty)
);
var TextWrapSettings = (
  /** @class */
  function(_super) {
    __extends18(TextWrapSettings2, _super);
    function TextWrapSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property("Both")], TextWrapSettings2.prototype, "wrapMode", void 0);
    return TextWrapSettings2;
  }(ChildProperty)
);
var ResizeSettings = (
  /** @class */
  function(_super) {
    __extends18(ResizeSettings2, _super);
    function ResizeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property("Normal")], ResizeSettings2.prototype, "mode", void 0);
    return ResizeSettings2;
  }(ChildProperty)
);
var GroupSettings = (
  /** @class */
  function(_super) {
    __extends18(GroupSettings2, _super);
    function GroupSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property(true)], GroupSettings2.prototype, "showDropArea", void 0);
    __decorate6([Property(false)], GroupSettings2.prototype, "allowReordering", void 0);
    __decorate6([Property(false)], GroupSettings2.prototype, "showToggleButton", void 0);
    __decorate6([Property(false)], GroupSettings2.prototype, "showGroupedColumn", void 0);
    __decorate6([Property(true)], GroupSettings2.prototype, "showUngroupButton", void 0);
    __decorate6([Property(false)], GroupSettings2.prototype, "disablePageWiseAggregates", void 0);
    __decorate6([Property([])], GroupSettings2.prototype, "columns", void 0);
    __decorate6([Property()], GroupSettings2.prototype, "captionTemplate", void 0);
    __decorate6([Property(false)], GroupSettings2.prototype, "enableLazyLoading", void 0);
    return GroupSettings2;
  }(ChildProperty)
);
var EditSettings = (
  /** @class */
  function(_super) {
    __extends18(EditSettings2, _super);
    function EditSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property(false)], EditSettings2.prototype, "allowAdding", void 0);
    __decorate6([Property(false)], EditSettings2.prototype, "allowEditing", void 0);
    __decorate6([Property(false)], EditSettings2.prototype, "allowDeleting", void 0);
    __decorate6([Property("Normal")], EditSettings2.prototype, "mode", void 0);
    __decorate6([Property(true)], EditSettings2.prototype, "allowEditOnDblClick", void 0);
    __decorate6([Property(true)], EditSettings2.prototype, "showConfirmDialog", void 0);
    __decorate6([Property(false)], EditSettings2.prototype, "showDeleteConfirmDialog", void 0);
    __decorate6([Property()], EditSettings2.prototype, "template", void 0);
    __decorate6([Property()], EditSettings2.prototype, "headerTemplate", void 0);
    __decorate6([Property()], EditSettings2.prototype, "footerTemplate", void 0);
    __decorate6([Property("Top")], EditSettings2.prototype, "newRowPosition", void 0);
    __decorate6([Property({})], EditSettings2.prototype, "dialog", void 0);
    __decorate6([Property(false)], EditSettings2.prototype, "allowNextRowEdit", void 0);
    __decorate6([Property(false)], EditSettings2.prototype, "showAddNewRow", void 0);
    return EditSettings2;
  }(ChildProperty)
);
var LoadingIndicator = (
  /** @class */
  function(_super) {
    __extends18(LoadingIndicator2, _super);
    function LoadingIndicator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([Property("Spinner")], LoadingIndicator2.prototype, "indicatorType", void 0);
    return LoadingIndicator2;
  }(ChildProperty)
);
var Grid = (
  /** @class */
  function(_super) {
    __extends18(Grid2, _super);
    function Grid2(options, element) {
      var _this_1 = _super.call(this, options, element) || this;
      _this_1.isPreventScrollEvent = false;
      _this_1.inViewIndexes = [];
      _this_1.keyA = false;
      _this_1.frozenRightCount = 0;
      _this_1.freezeColumnRefresh = true;
      _this_1.rightcount = 0;
      _this_1.frozenLeftCount = 0;
      _this_1.leftcount = 0;
      _this_1.tablesCount = 1;
      _this_1.movableCount = 0;
      _this_1.movablecount = 0;
      _this_1.fixedcount = 0;
      _this_1.fixedCount = 0;
      _this_1.visibleFrozenLeft = 0;
      _this_1.visibleFrozenFixed = 0;
      _this_1.isPreparedFrozenColumns = false;
      _this_1.visibleFrozenRight = 0;
      _this_1.visibleMovable = 0;
      _this_1.frozenLeftColumns = [];
      _this_1.frozenRightColumns = [];
      _this_1.movableColumns = [];
      _this_1.fixedColumns = [];
      _this_1.stackedLeft = [];
      _this_1.stackedRight = [];
      _this_1.stackedFixed = [];
      _this_1.stackedMovable = [];
      _this_1.stackedarrayLeft = [];
      _this_1.stackedarrayRight = [];
      _this_1.stackedarrayFixed = [];
      _this_1.stackedarrayMovable = [];
      _this_1.media = {};
      _this_1.autoFitColumnsResize = false;
      _this_1.tableIndex = 0;
      _this_1.componentRefresh = Component2.prototype.refresh;
      _this_1.isChangeDataSourceCall = false;
      _this_1.mergedColumns = false;
      _this_1.isVirtualAdaptive = false;
      _this_1.requireTemplateRef = true;
      _this_1.vRows = [];
      _this_1.vcRows = [];
      _this_1.vGroupOffsets = {};
      _this_1.rowUid = 0;
      _this_1.translateX = 0;
      _this_1.isManualRefresh = false;
      _this_1.isAutoFitColumns = false;
      _this_1.enableDeepCompare = false;
      _this_1.totalDataRecordsCount = 0;
      _this_1.disableSelectedRecords = [];
      _this_1.partialSelectedRecords = [];
      _this_1.isSpan = false;
      _this_1.islazyloadRequest = false;
      _this_1.isAddNewRow = false;
      _this_1.addNewRowFocus = true;
      _this_1.lockcolPositionCount = 0;
      _this_1.prevPageMoving = false;
      _this_1.pageTemplateChange = false;
      _this_1.isAutoGen = false;
      _this_1.isAutoGenerateColumns = false;
      _this_1.mediaBindInstance = {};
      _this_1.commandDelIndex = void 0;
      _this_1.asyncTimeOut = 50;
      _this_1.isExportGrid = false;
      _this_1.isWidgetsDestroyed = false;
      _this_1.enableLogger = false;
      _this_1.needsID = true;
      Grid_1.Inject(Selection);
      setValue("mergePersistData", _this_1.mergePersistGridData, _this_1);
      return _this_1;
    }
    Grid_1 = Grid2;
    Grid2.prototype.getPersistData = function() {
      var keyEntity = ["pageSettings", "sortSettings", "filterSettings", "groupSettings", "columns", "searchSettings", "selectedRowIndex", "scrollPosition"];
      var ignoreOnPersist = {
        pageSettings: ["template", "pageSizes", "enableQueryString", "totalRecordsCount", "pageCount"],
        filterSettings: ["type", "mode", "showFilterBarStatus", "immediateModeDelay", "ignoreAccent"],
        groupSettings: ["showDropArea", "showToggleButton", "showGroupedColumn", "showUngroupButton", "disablePageWiseAggregates", "hideCaptionCount"],
        searchSettings: ["fields", "operator", "ignoreCase"],
        sortSettings: [],
        columns: [],
        selectedRowIndex: [],
        scrollPosition: []
      };
      for (var i = 0; i < keyEntity.length; i++) {
        var currentObject = this[keyEntity[parseInt(i.toString(), 10)]];
        for (var _i = 0, _a = ignoreOnPersist[keyEntity[parseInt(i.toString(), 10)]]; _i < _a.length; _i++) {
          var val = _a[_i];
          delete currentObject["" + val];
        }
      }
      var temp = this.pageSettings.template;
      var settings = Object.assign({
        template: void 0
      }, this.pageSettings);
      this.setProperties({
        pageSettings: settings
      }, true);
      if (this.isAngular) {
        delete this.groupSettings["properties"]["captionTemplate"];
      }
      this.pageTemplateChange = !isNullOrUndefined(this.pagerTemplate);
      var persistData = this.addOnPersist(keyEntity);
      settings.template = temp;
      this.setProperties({
        pageSettings: settings
      }, true);
      return persistData;
    };
    Grid2.prototype.requiredModules = function() {
      this.setFrozenCount();
      this.enableInfiniteAggrgate();
      var modules = [];
      if (this.isDestroyed) {
        return modules;
      }
      if (this.allowFiltering) {
        modules.push({
          member: "filter",
          args: [this, this.filterSettings, this.serviceLocator],
          name: "Filter"
        });
      }
      if (this.allowExcelExport) {
        modules.push({
          member: "ExcelExport",
          args: [this, this.serviceLocator],
          name: "ExcelExport"
        });
      }
      if (this.allowPdfExport) {
        modules.push({
          member: "PdfExport",
          args: [this],
          name: "PdfExport"
        });
      }
      if (this.allowSorting) {
        modules.push({
          member: "sort",
          args: [this, this.sortSettings, this.sortedColumns, this.serviceLocator],
          name: "Sort"
        });
      }
      if (this.allowPaging) {
        modules.push({
          member: "pager",
          args: [this, this.pageSettings],
          name: "Page"
        });
      }
      if (this.allowSelection) {
        modules.push({
          member: "selection",
          args: [this, this.selectionSettings, this.serviceLocator],
          name: "Selection"
        });
      }
      if (this.resizeCheck()) {
        modules.push({
          member: "resize",
          args: [this],
          name: "Resize"
        });
      }
      if (this.allowReordering) {
        modules.push({
          member: "reorder",
          args: [this],
          name: "Reorder"
        });
      }
      if (this.allowRowDragAndDrop) {
        modules.push({
          member: "rowDragAndDrop",
          args: [this],
          name: "RowDD"
        });
      }
      if (this.allowGrouping) {
        modules.push({
          member: "group",
          args: [this, this.groupSettings, this.sortedColumns, this.serviceLocator],
          name: "Group"
        });
      }
      if (this.aggregates.length) {
        modules.push({
          member: "aggregate",
          args: [this, this.serviceLocator],
          name: "Aggregate"
        });
      }
      if (this.isDetail()) {
        modules.push({
          member: "detailRow",
          args: [this, this.serviceLocator],
          name: "DetailRow"
        });
      }
      if (this.toolbar || this.toolbarTemplate) {
        modules.push({
          member: "toolbar",
          args: [this, this.serviceLocator],
          name: "Toolbar"
        });
      }
      if (this.enableVirtualization || this.enableColumnVirtualization) {
        modules.push({
          member: "virtualscroll",
          args: [this, this.serviceLocator],
          name: "VirtualScroll"
        });
      }
      if (this.getFrozenColumns() || this.frozenRows || this.frozenRightCount || this.frozenLeftCount) {
        modules.push({
          member: "freeze",
          args: [this, this.serviceLocator],
          name: "Freeze"
        });
      }
      if (!isNullOrUndefined(this.columns) && this.isCommandColumn(this.columns)) {
        modules.push({
          member: "commandColumn",
          args: [this, this.serviceLocator],
          name: "CommandColumn"
        });
      }
      if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {
        modules.push({
          member: "edit",
          args: [this, this.serviceLocator],
          name: "Edit"
        });
      }
      this.extendRequiredModules(modules);
      return modules;
    };
    Grid2.prototype.extendRequiredModules = function(modules) {
      if (this.enableInfiniteScrolling) {
        modules.push({
          member: "infiniteScroll",
          args: [this, this.serviceLocator],
          name: "InfiniteScroll"
        });
      }
      if (this.groupSettings.enableLazyLoading) {
        modules.push({
          member: "lazyLoadGroup",
          args: [this, this.serviceLocator],
          name: "LazyLoadGroup"
        });
      }
      if (this.contextMenuItems) {
        modules.push({
          member: "contextMenu",
          args: [this, this.serviceLocator],
          name: "ContextMenu"
        });
      }
      if (this.showColumnMenu) {
        modules.push({
          member: "columnMenu",
          args: [this, this.serviceLocator],
          name: "ColumnMenu"
        });
      }
      if (this.showColumnChooser) {
        modules.push({
          member: "columnChooser",
          args: [this, this.serviceLocator],
          name: "ColumnChooser"
        });
      }
      if (!isNullOrUndefined(this.columns) && this.isForeignKeyEnabled(this.columns)) {
        modules.push({
          member: "foreignKey",
          args: [this, this.serviceLocator],
          name: "ForeignKey"
        });
      }
      if (this.enableLogger) {
        modules.push({
          member: "logger",
          args: [this],
          name: "Logger"
        });
      }
    };
    Grid2.prototype.resizeCheck = function() {
      var autoFitColumns = this.getColumns().filter(function(c) {
        return c.autoFit === true;
      }).length ? true : false;
      if (!isNullOrUndefined(this.columnModel) && this.columnModel.length && !(this.columnModel[0] instanceof Column)) {
        this.columnModel = [];
      }
      var columnMenu = this.showColumnMenu && (!this.columnMenuItems || this.columnMenuItems.filter(function(c) {
        return c === "AutoFit" || c === "AutoFitAll";
      }).length) ? true : false;
      var contextMenu = this.contextMenuItems && this.contextMenuItems.filter(function(c) {
        return c === "AutoFit" || c === "AutoFitAll";
      }).length ? true : false;
      return this.allowResizing || this.autoFitColumnsResize || autoFitColumns || columnMenu || contextMenu;
    };
    Grid2.prototype.preRender = function() {
      this.serviceLocator = new ServiceLocator();
      this.initProperties();
      this.initializeServices();
    };
    Grid2.prototype.initProperties = function() {
      this.isInitial = true;
      this.sortedColumns = [];
      this.inViewIndexes = [];
      this.mediaCol = [];
      this.isInitialLoad = false;
      this.allowServerDataBinding = false;
      this.ignoreCollectionWatch = true;
      this.mergeCells = {};
      this.isEdit = false;
      this.checkAllRows = "None";
      this.isCheckBoxSelection = false;
      this.isPersistSelection = false;
      this.componentRefresh = Component2.prototype.refresh;
      this.freezeColumnRefresh = true;
      this.filterOperators = {
        contains: "contains",
        endsWith: "endswith",
        equal: "equal",
        greaterThan: "greaterthan",
        greaterThanOrEqual: "greaterthanorequal",
        lessThan: "lessthan",
        lessThanOrEqual: "lessthanorequal",
        notEqual: "notequal",
        startsWith: "startswith",
        wildCard: "wildcard",
        isNull: "isnull",
        notNull: "notnull",
        like: "like"
      };
      this.defaultLocale = {
        EmptyRecord: "No records to display",
        True: "true",
        False: "false",
        InvalidFilterMessage: "Invalid Filter Data",
        GroupDropArea: "Drag a column header here to group its column",
        UnGroup: "Click here to ungroup",
        UnGroupButton: "Click here to ungroup",
        GroupDisable: "Grouping is disabled for this column",
        FilterbarTitle: "'s filter bar cell",
        EmptyDataSourceError: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
        // Toolbar Items
        Add: "Add",
        Edit: "Edit",
        Cancel: "Cancel",
        Update: "Update",
        Delete: "Delete",
        Print: "Print",
        Pdfexport: "PDF Export",
        Excelexport: "Excel Export",
        Wordexport: "Word Export",
        Csvexport: "CSV Export",
        Search: "Search",
        Columnchooser: "Columns",
        Save: "Save",
        Item: "item",
        Items: "items",
        EditOperationAlert: "No records selected for edit operation",
        DeleteOperationAlert: "No records selected for delete operation",
        SaveButton: "Save",
        OKButton: "OK",
        CancelButton: "Cancel",
        EditFormTitle: "Details of ",
        AddFormTitle: "Add New Record",
        BatchSaveConfirm: "Are you sure you want to save changes?",
        BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
        ConfirmDelete: "Are you sure you want to Delete Record?",
        CancelEdit: "Are you sure you want to Cancel the changes?",
        ChooseColumns: "Choose Column",
        ColumnMenu: "Column Menu",
        SearchColumns: "search columns",
        Matchs: "No matches found",
        FilterButton: "Filter",
        ClearButton: "Clear",
        StartsWith: "Starts With",
        NotStartsWith: "Does Not Start With",
        Like: "Like",
        EndsWith: "Ends With",
        NotEndsWith: "Does Not End With",
        Contains: "Contains",
        NotContains: "Does Not Contain",
        IsNull: "Null",
        NotNull: "Not Null",
        IsEmpty: "Empty",
        IsNotEmpty: "Not Empty",
        Equal: "Equal",
        NotEqual: "Not Equal",
        LessThan: "Less Than",
        LessThanOrEqual: "Less Than Or Equal",
        GreaterThan: "Greater Than",
        GreaterThanOrEqual: "Greater Than Or Equal",
        ChooseDate: "Choose a Date",
        EnterValue: "Enter the value",
        Copy: "Copy",
        Group: "Group by this column",
        Ungroup: "Ungroup by this column",
        GroupButton: "Group button",
        UnGroupAria: "ungroup button",
        GroupSeperator: "Separator for the grouped columns",
        UnGroupIcon: "ungroup the grouped column ",
        GroupedSortIcon: "sort the grouped column ",
        GroupedDrag: "Drag the grouped column",
        GroupCaption: " is groupcaption cell",
        CheckBoxLabel: "checkbox",
        SelectAllCheckbox: "Select all checkbox",
        SelectRow: "Select row",
        autoFitAll: "Autofit all columns",
        autoFit: "Autofit this column",
        AutoFitAll: "Autofit all columns",
        AutoFit: "Autofit this column",
        Export: "Export",
        FirstPage: "First Page",
        LastPage: "Last Page",
        PreviousPage: "Previous Page",
        NextPage: "Next Page",
        SortAscending: "Sort Ascending",
        SortDescending: "Sort Descending",
        EditRecord: "Edit Record",
        DeleteRecord: "Delete Record",
        FilterMenu: "Filter",
        SelectAll: "Select All",
        AddCurrentSelection: "Add current selection to filter",
        Blanks: "Blanks",
        FilterTrue: "True",
        FilterFalse: "False",
        NoResult: "No matches found",
        ClearFilter: "Clear Filter",
        Clear: "Clear",
        NumberFilter: "Number Filters",
        TextFilter: "Text Filters",
        DateFilter: "Date Filters",
        DateTimeFilter: "DateTime Filters",
        MatchCase: "Match Case",
        Between: "Between",
        CustomFilter: "Custom Filter",
        CustomFilterPlaceHolder: "Enter the value",
        CustomFilterDatePlaceHolder: "Choose a date",
        AND: "AND",
        OR: "OR",
        ShowRowsWhere: "Show rows where:",
        ToolbarMenuDialogARIA: "Toolbar menu dialog",
        FilterMenuDialogARIA: "Filter menu",
        ExcelFilterDialogARIA: "Excel filter",
        CheckBoxFilterDialogARIA: "Checkbox filter",
        DialogEditARIA: "Edit dialog",
        ColumnMenuDialogARIA: "Column menu dialog",
        CustomFilterDialogARIA: "Customer filter dialog",
        SortAtoZ: "Sort A to Z",
        SortZtoA: "Sort Z to A",
        SortByOldest: "Sort by Oldest",
        SortByNewest: "Sort by Newest",
        SortSmallestToLargest: "Sort Smallest to Largest",
        SortLargestToSmallest: "Sort Largest to Smallest",
        Sort: "Sort",
        FilterDescription: "Press Alt Down to open filter Menu",
        SortDescription: "Press Enter to sort",
        ColumnMenuDescription: "Press Alt Down to open Column Menu",
        GroupDescription: "Press Ctrl space to group",
        ColumnHeader: " column header ",
        TemplateCell: " is template cell",
        CommandColumnAria: "is Command column column header ",
        DialogEdit: "Dialog edit",
        ClipBoard: "clipboard",
        AscendingText: "Ascending",
        DescendingText: "Descending",
        NoneText: "None",
        Expanded: "Expanded",
        Collapsed: "Collapsed"
      };
      this.keyConfigs = {
        downArrow: "downarrow",
        upArrow: "uparrow",
        rightArrow: "rightarrow",
        leftArrow: "leftarrow",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftRight: "shift+rightarrow",
        shiftLeft: "shift+leftarrow",
        home: "home",
        end: "end",
        escape: "escape",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        pageUp: "pageup",
        pageDown: "pagedown",
        ctrlAltPageUp: "ctrl+alt+pageup",
        ctrlAltPageDown: "ctrl+alt+pagedown",
        altPageUp: "alt+pageup",
        altPageDown: "alt+pagedown",
        altDownArrow: "alt+downarrow",
        altUpArrow: "alt+uparrow",
        ctrlDownArrow: "ctrl+downarrow",
        ctrlUpArrow: "ctrl+uparrow",
        ctrlPlusA: "ctrl+A",
        ctrlPlusP: "ctrl+P",
        insert: "insert",
        delete: "delete",
        f2: "f2",
        enter: "enter",
        ctrlEnter: "ctrl+enter",
        shiftEnter: "shift+enter",
        tab: "tab",
        shiftTab: "shift+tab",
        space: "space",
        ctrlPlusC: "ctrl+C",
        ctrlShiftPlusH: "ctrl+shift+H",
        ctrlSpace: "ctrl+space",
        ctrlLeftArrow: "ctrl+leftarrow",
        ctrlRightArrow: "ctrl+rightarrow"
      };
    };
    Grid2.prototype.render = function() {
      this.log(["module_missing", "promise_enabled", "locale_missing", "check_datasource_columns"]);
      this.ariaService.setOptions(this.element, {
        role: "grid"
      });
      createSpinner({
        target: this.element,
        cssClass: this.cssClass ? this.cssClass : null
      }, this.createElement);
      this.renderModule = new Render(this, this.serviceLocator);
      this.searchModule = new Search(this);
      this.scrollModule = new Scroll(this);
      this.notify(initialLoad, {});
      if (this.pageSettings.enableQueryString) {
        var pageValue = new URL(window.location.href).searchParams.get("page");
        if (!isNullOrUndefined(pageValue) && window.location.href.indexOf("?page=") > 0) {
          var currentPageValue = parseInt(pageValue, 10);
          this.setProperties({
            pageSettings: {
              currentPage: currentPageValue
            }
          }, true);
          this.pageSettings.currentPage = currentPageValue;
        }
      }
      if ((this.getDataModule().dataManager.dataSource.offline === true || this.getDataModule().dataManager.dataSource.url === void 0) && !(!isNullOrUndefined(this.dataSource) && this.dataSource.result)) {
        this.isVirtualAdaptive = true;
      }
      if (this.isReact) {
        var args = {
          requireTemplateRef: this.requireTemplateRef
        };
        this.trigger(load, args);
        if (!args.requireTemplateRef) {
          this.requireTemplateRef = args.requireTemplateRef;
        }
      } else {
        this.trigger(load);
      }
      prepareColumns(this.columns, this.enableColumnVirtualization, this);
      if (this.enableColumnVirtualization && this.isChangeDataSourceCall && this.columnModel) {
        this.columnModel = [];
        this.updateColumnModel(this.columns);
      }
      this.isPreparedFrozenColumns = true;
      if (this.enablePersistence) {
        this.notify(columnsPrepared, {});
      }
      this.getMediaColumns();
      setColumnIndex(this.columns);
      if (this.isFrozenGrid() && !this.mergedColumns) {
        this.setInitialFrozenColumnIndex(this.columns);
      }
      this.checkLockColumns(this.columns);
      this.getColumns();
      this.processModel();
      this.gridRender();
      this.wireEvents();
      this.addListener();
      this.updateDefaultCursor();
      this.updateStackedFilter();
      if (this.loadingIndicator.indicatorType === "Spinner") {
        this.showSpinner();
      }
      this.notify(initialEnd, {});
      if (this.loadingIndicator.indicatorType === "Shimmer") {
        this.refreshMaskRow();
      }
      if (this.refreshing) {
        this.trigger("created");
      }
    };
    Grid2.prototype.setInitialFrozenColumnIndex = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        var column = columns[parseInt(i.toString(), 10)];
        column["" + initialFrozenColumnIndex] = column.index;
        if (column.columns) {
          this.setInitialFrozenColumnIndex(column.columns);
        }
      }
    };
    Grid2.prototype.showSpinner = function() {
      if (!this.isExportGrid) {
        showSpinner(this.element);
      }
    };
    Grid2.prototype.hideSpinner = function() {
      if (!this.isExportGrid) {
        hideSpinner(this.element);
      }
    };
    Grid2.prototype.showMaskRow = function(axisDirection, dialogElement) {
      if (isNullOrUndefined(this.headerModule) || isNullOrUndefined(this.contentModule)) {
        return;
      }
      var gridHeader2 = this.getHeaderContent().firstChild;
      var gridContent2 = this.getContent().firstChild;
      var gridFooter2 = this.getFooterContent();
      if (dialogElement) {
        var dialogHolder = dialogElement.querySelector(".e-checkboxlist");
        var maskRowCount = Math.floor(dialogHolder.getBoundingClientRect().height / this.getRowHeight());
        var maskTemplate = '<div class="e-ftrchk e-mask-ftrchk" style="width: 100%;"><div class="e-checkbox-wrapper" style="width: 100%;"><input class="e-chk-hidden">' + this.getShimmerTemplate() + this.getShimmerTemplate() + "</div></div>";
        dialogHolder.innerHTML = "";
        for (var i = 0; i < maskRowCount; i++) {
          dialogHolder.innerHTML += maskTemplate;
          var maskSpan = [].slice.call(dialogHolder.querySelectorAll(".e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)"));
          maskSpan[0].classList.add("e-mask-checkbox-filter-intent");
          maskSpan[1].classList.add("e-mask-checkbox-filter-span-intent");
        }
        return;
      }
      if (!this.enableRtl && !this.getHeaderContent().style.paddingRight || this.enableRtl && !this.getHeaderContent().style.paddingLeft) {
        gridContent2.style.overflowY = "hidden";
      }
      if (!this.isInitialLoad && !this.getColumns().length) {
        var contentHeight = gridContent2.getBoundingClientRect().height;
        var maskTableHeight = contentHeight === 0 ? this.allowPaging ? this.pageSettings.pageSize * this.getRowHeight() : window.innerHeight : contentHeight;
        var contentRowCount = Math.ceil(maskTableHeight / this.getRowHeight());
        if (this.rowRenderingMode !== "Vertical") {
          this.headerMaskTable = this.createEmptyMaskTable(gridHeader2, 1);
        }
        this.contentMaskTable = this.createEmptyMaskTable(gridContent2, contentRowCount);
        return;
      }
      this.maskRowContentScroll = (this.enableVirtualization || this.enableColumnVirtualization) && axisDirection ? true : false;
      if (!this.contentMaskTable) {
        var content2 = gridContent2;
        if (this.enableVirtualization || this.enableColumnVirtualization) {
          content2 = content2.querySelector(".e-virtualtable");
        }
        if (!isNullOrUndefined(content2.querySelector("tbody"))) {
          this.contentMaskTable = this.createMaskTable(content2, this.getContentMaskColumns(), axisDirection);
        }
      }
      if (!this.headerMaskTable && (this.isFrozenGrid() || this.enableColumnVirtualization && axisDirection === "X")) {
        var content2 = gridHeader2;
        if (this.enableColumnVirtualization && axisDirection === "X") {
          content2 = content2.querySelector(".e-virtualtable");
        }
        this.headerMaskTable = this.createMaskTable(content2, this.getContentMaskColumns(), axisDirection);
      }
      if (gridFooter2 && gridFooter2.querySelector(".e-summaryrow")) {
        var gridFooterContent = gridFooter2.firstChild;
        if (!this.footerContentMaskTable) {
          var footerContent = gridFooterContent;
          this.footerContentMaskTable = this.createMaskTable(footerContent);
        }
      }
      if (!(this.enableVirtualization && axisDirection)) {
        EventHandler.add(gridContent2, "scroll", this.translateMaskRow, this);
      }
    };
    Grid2.prototype.getContentMaskColumns = function() {
      return this.getColumns();
    };
    Grid2.prototype.createEmptyMaskTable = function(maskElement, rowCount) {
      var table2 = this.createElement("table", {
        className: "e-table e-masked-table"
      });
      var tbody2 = this.createElement("tbody", {
        className: "e-masked-tbody"
      });
      var row2 = this.createElement("tr", {
        className: "e-masked-row e-row",
        attrs: {
          style: "height: " + this.getRowHeight() + "px;"
        }
      });
      var cell = this.createElement("td", {
        className: "e-masked-cell e-rowcell"
      });
      cell.innerHTML = this.getShimmerTemplate();
      row2.appendChild(cell);
      for (var i = 0; i < rowCount; i++) {
        tbody2.appendChild(row2.cloneNode(true));
      }
      table2.appendChild(tbody2);
      maskElement.appendChild(table2);
      return table2;
    };
    Grid2.prototype.createMaskTable = function(element, columns, axisDirection) {
      var parentElement = element;
      var header = closest(parentElement, ".e-gridheader") ? true : false;
      var content2 = closest(parentElement, ".e-gridcontent") ? true : false;
      var footer = closest(parentElement, ".e-gridfooter") ? true : false;
      var gridContent2 = this.getContent().firstChild;
      var gridContentScrollHeight = gridContent2.scrollHeight;
      var table2 = parentElement.querySelector("table");
      var maskTable = table2.cloneNode();
      maskTable.removeAttribute("role");
      maskTable.removeAttribute("id");
      maskTable.style.position = "absolute";
      maskTable.style.zIndex = "5";
      maskTable.style.width = table2.getBoundingClientRect().width + "px";
      if (header && !(this.enableColumnVirtualization && axisDirection === "X")) {
        maskTable.style.transform = "translate(0px," + table2.querySelector("thead").getBoundingClientRect().height + "px)";
      }
      maskTable.setAttribute("class", "e-table e-masked-table");
      var maskColgroup = table2.querySelector("colgroup").cloneNode(true);
      maskColgroup.removeAttribute("id");
      maskColgroup.setAttribute("class", "e-masked-colgroup");
      maskTable.appendChild(maskColgroup);
      if (header && this.enableColumnVirtualization && axisDirection === "X") {
        var row2 = this.createMaskRow(maskColgroup, columns);
        if (this.isFrozenGrid()) {
          var frzTd = [].slice.call(row2.querySelectorAll(".e-rowcell"));
          for (var i = 0; i < frzTd.length; i++) {
            if (i < this.frozenLeftCount) {
              if (this.frozenLeftCount - 1 === i) {
                frzTd[parseInt(i.toString(), 10)].classList.add("e-freezeleftborder");
              }
              frzTd[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
              frzTd[parseInt(i.toString(), 10)].setAttribute("data-colindex", i.toString());
              frzTd[parseInt(i.toString(), 10)].style.left = columns[parseInt(i.toString(), 10)].valueX - this.translateX + "px";
            } else if (frzTd.length - this.frozenRightCount <= i && columns[parseInt(i.toString(), 10)]) {
              if (frzTd.length - this.frozenRightCount === i) {
                frzTd[parseInt(i.toString(), 10)].classList.add("e-freezerightborder");
              }
              frzTd[parseInt(i.toString(), 10)].classList.add("e-rightfreeze");
              frzTd[parseInt(i.toString(), 10)].setAttribute("data-colindex", i.toString());
              frzTd[parseInt(i.toString(), 10)].style.right = this.translateX + columns[parseInt(i.toString(), 10)].valueX + "px";
            }
          }
        }
        var thead = table2.querySelector("thead");
        var rows = [].slice.call(thead.querySelectorAll("tr"));
        var maskTHead = thead.cloneNode();
        maskTHead.removeAttribute("role");
        maskTHead.setAttribute("class", "e-masked-thead");
        var rowCount = rows.length;
        for (var i = 0; i < rowCount; i++) {
          maskTHead.appendChild(row2.cloneNode(true));
          maskTHead.childNodes[parseInt(i.toString(), 10)].style.height = rows[parseInt(i.toString(), 10)].getBoundingClientRect().height + "px";
        }
        maskTable.appendChild(maskTHead);
      }
      var maskTBody = table2.querySelector("tbody").cloneNode();
      maskTBody.removeAttribute("role");
      maskTBody.setAttribute("class", "e-masked-tbody");
      var tbody2 = table2.querySelector("tbody");
      if (content2 || header) {
        var rowCountElement = gridContent2;
        var rowCount = Math.ceil(rowCountElement.getBoundingClientRect().height / this.getRowHeight());
        if (tbody2.querySelector(".e-emptyrow") || !tbody2.childNodes.length || content2 && this.childGrid) {
          var row2 = this.createMaskRow(maskColgroup, columns);
          var altRow = row2.cloneNode(true);
          altRow.classList.add("e-altrow");
          for (var i = 0; i < rowCount; i++) {
            var altNumber = 1;
            maskTBody.appendChild((i + altNumber) % 2 === 0 ? altRow.cloneNode(true) : row2.cloneNode(true));
          }
        } else {
          var rowsQuery = 'tr:not(.e-hide):not([style*="display:none"]):not([style*="display: none"])';
          var rows = [].slice.call(tbody2.querySelectorAll(rowsQuery));
          var addEditRow = tbody2.querySelector(".e-addedrow, .e-editedrow");
          var addEditRowIndex = void 0;
          if (addEditRow) {
            addEditRowIndex = rows.indexOf(addEditRow);
            if (this.isFrozenGrid() && this.enableColumnVirtualization) {
              var frzTd = [].slice.call(rows[addEditRowIndex + 1].querySelectorAll(".e-rowcell"));
              for (var i = 0; i < frzTd.length; i++) {
                if (i < this.frozenLeftCount) {
                  frzTd[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
                  frzTd[parseInt(i.toString(), 10)].setAttribute("data-colindex", i.toString());
                  frzTd[parseInt(i.toString(), 10)].style.left = columns[parseInt(i.toString(), 10)].valueX - this.translateX + "px";
                } else if (frzTd.length - this.frozenRightCount <= i && columns[parseInt(i.toString(), 10)]) {
                  frzTd[parseInt(i.toString(), 10)].classList.add("e-rightfreeze");
                  frzTd[parseInt(i.toString(), 10)].setAttribute("data-colindex", i.toString());
                  frzTd[parseInt(i.toString(), 10)].style.right = this.translateX + columns[parseInt(i.toString(), 10)].valueX + "px";
                }
              }
            }
            if (addEditRow.classList.contains("e-addedrow")) {
              rows.splice(addEditRowIndex, 2);
            } else {
              rows.splice(addEditRowIndex, 1);
            }
          }
          rowCount = (this.enableVirtualization || this.enableColumnVirtualization) && axisDirection ? rows.length : rowCount <= rows.length ? rowCount : rows.length;
          for (var i = 0; i < rowCount; i++) {
            maskTBody.appendChild(this.applyMaskRow(rows[parseInt(i.toString(), 10)].cloneNode(true), rows[parseInt(i.toString(), 10)].getBoundingClientRect().height));
          }
          if (addEditRow && addEditRow.classList.contains("e-editedrow") && addEditRowIndex < rowCount) {
            var addEditMaskRow = maskTBody.childNodes[parseInt(addEditRowIndex.toString(), 10)];
            addEditMaskRow.style.height = this.getRowHeight() + "px";
            addEditMaskRow.classList.add("e-row");
            if (addEditRow.classList.contains("e-altrow")) {
              addEditMaskRow.classList.add("e-altrow");
            }
          }
        }
      }
      maskTable.appendChild(maskTBody);
      if (footer) {
        var tfoot = table2.querySelector("tfoot");
        var maskTFoot = tfoot.cloneNode();
        maskTFoot.setAttribute("class", "e-masked-tfoot");
        var rows = [].slice.call(tfoot.querySelectorAll("tr"));
        for (var i = 0; i < rows.length; i++) {
          maskTFoot.appendChild(this.applyMaskRow(rows[parseInt(i.toString(), 10)].cloneNode(true), rows[parseInt(i.toString(), 10)].getBoundingClientRect().height));
        }
        maskTable.appendChild(maskTFoot);
      }
      if (header && this.isFrozenGrid() && !this.enableColumnVirtualization) {
        this.getHeaderContent().querySelector("." + headerContent).style.position = "relative";
      }
      parentElement.insertBefore(maskTable, parentElement.firstChild);
      if (content2 && !(this.enableVirtualization && axisDirection)) {
        var minScrollTop = gridContentScrollHeight - maskTable.getBoundingClientRect().height;
        minScrollTop = minScrollTop < 0 ? 0 : minScrollTop;
        var scrollTop = gridContent2.scrollTop <= minScrollTop ? gridContent2.scrollTop : minScrollTop;
        if (this.enableVirtualization) {
          scrollTop -= getTransformValues(closest(parentElement, ".e-virtualtable")).height;
        }
        maskTable.style.transform = "translate(0px," + scrollTop + "px)";
      }
      return maskTable;
    };
    Grid2.prototype.applyMaskRow = function(row2, rowHeight2) {
      var maskRow = row2;
      maskRow.removeAttribute("role");
      maskRow.removeAttribute("aria-rowindex");
      maskRow.removeAttribute("data-rowindex");
      maskRow.removeAttribute("data-uid");
      maskRow.classList.add("e-masked-row");
      maskRow.style.height = rowHeight2 + "px";
      var maskCells = [].slice.call(maskRow.childNodes);
      for (var i = 0; i < maskCells.length; i++) {
        var maskCell = maskCells[parseInt(i.toString(), 10)];
        var displayAsCheckBoxCell = maskCell.firstChild && maskCell.firstChild.classList && maskCell.firstChild.classList.contains("e-checkbox-wrapper");
        maskCell.removeAttribute("role");
        maskCell.removeAttribute("tabindex");
        maskCell.removeAttribute("aria-label");
        if (this.enableColumnVirtualization && maskCell.classList.contains("e-fixedfreeze")) {
          removeClass([maskCell], ["e-fixedfreeze", "e-freezeleftborder", "e-freezerightborder"]);
          addClass([maskCell], ["e-unfreeze"]);
        }
        if (!(this.enableColumnVirtualization && (maskCell.classList.contains("e-leftfreeze") || maskCell.classList.contains("e-rightfreeze")))) {
          maskCell.removeAttribute("data-colindex");
        }
        maskCell.removeAttribute("aria-colindex");
        maskCell.removeAttribute("index");
        maskCell.removeAttribute("ej-mappingname");
        maskCell.removeAttribute("ej-mappingvalue");
        maskCell.removeAttribute("e-mappinguid");
        maskCell.removeAttribute("aria-expanded");
        maskCell.classList.add("e-masked-cell");
        maskCell.innerHTML = this.getShimmerTemplate();
        if (maskCell.classList.contains("e-recordplusexpand") || maskCell.classList.contains("e-recordpluscollapse")) {
          maskCell.firstChild.classList.add("e-mask-group-intent");
        } else if (maskCell.classList.contains("e-gridchkbox") || displayAsCheckBoxCell) {
          maskCell.firstChild.classList.add("e-mask-checkbox-intent");
        } else if (maskCell.classList.contains("e-rowdragdrop")) {
          maskCell.firstChild.classList.add("e-mask-drag-intent");
        } else if (maskCell.classList.contains("e-indentcell")) {
          maskCell.innerHTML = "";
        }
      }
      return maskRow;
    };
    Grid2.prototype.createMaskRow = function(refColgroup, refColumns) {
      var colgroup = refColgroup;
      var columns = refColumns;
      var row2 = this.createElement("tr", {
        className: "e-masked-row e-row"
      });
      if (this.rowRenderingMode !== "Vertical") {
        row2.style.height = this.getRowHeight() + "px";
      }
      var td = this.createElement("td", {
        className: "e-masked-cell e-rowcell"
      });
      for (var i = 0, colIndex = 0; i < colgroup.childNodes.length; i++) {
        var col = colgroup.childNodes[parseInt(i.toString(), 10)];
        var localTD = td.cloneNode();
        localTD.innerHTML = this.getShimmerTemplate();
        if (!(col.classList.contains("e-group-intent") || col.classList.contains("e-detail-intent") || col.classList.contains("e-drag-intent"))) {
          if (this.rowRenderingMode === "Vertical" && columns[parseInt(colIndex.toString(), 10)]) {
            localTD.setAttribute("data-cell", columns[parseInt(colIndex.toString(), 10)].headerText ? columns[parseInt(colIndex.toString(), 10)].headerText : columns[parseInt(colIndex.toString(), 10)].field);
          }
          if (col.style.display === "none") {
            localTD.classList.add("e-hide");
          } else {
            localTD.style.textAlign = columns[parseInt(colIndex.toString(), 10)] && columns[parseInt(colIndex.toString(), 10)].textAlign ? columns[parseInt(colIndex.toString(), 10)].textAlign.toLowerCase() : this.enableRtl ? "right" : "left";
            if (columns[parseInt(colIndex.toString(), 10)] && (columns[parseInt(colIndex.toString(), 10)].type === "checkbox" || columns[parseInt(colIndex.toString(), 10)].displayAsCheckBox)) {
              localTD.firstChild.classList.add("e-mask-checkbox-intent");
            }
          }
          colIndex++;
        } else {
          if (col.classList.contains("e-group-intent")) {
            localTD.firstChild.classList.add("e-mask-group-intent");
          } else if (col.classList.contains("e-detail-intent")) {
            localTD.firstChild.classList.add("e-mask-detail-intent");
          } else if (col.classList.contains("e-drag-intent")) {
            localTD.firstChild.classList.add("e-mask-drag-intent");
          }
        }
        row2.appendChild(localTD);
      }
      return row2;
    };
    Grid2.prototype.getShimmerTemplate = function() {
      if (this.maskRowContentScroll) {
        return '<span class="e-mask e-skeleton e-skeleton-text"></span>';
      }
      return '<span class="e-mask e-skeleton e-skeleton-text e-shimmer-wave"></span>';
    };
    Grid2.prototype.addShimmerEffect = function() {
      this.maskRowContentScroll = false;
      var maskSpan = [].slice.call(this.element.querySelectorAll(".e-mask:not(.e-shimmer-wave)"));
      for (var i = 0; i < maskSpan.length; i++) {
        if (maskSpan[parseInt(i.toString(), 10)]) {
          maskSpan[parseInt(i.toString(), 10)].classList.add("e-shimmer-wave");
        }
      }
    };
    Grid2.prototype.translateMaskRow = function(e) {
      var target = e.target;
      var maskTables = target.querySelectorAll(".e-masked-table");
      for (var i = 0; i < maskTables.length; i++) {
        var maskTable = maskTables[parseInt(i.toString(), 10)];
        if (maskTable) {
          var minScrollTop = target.scrollHeight - maskTable.getBoundingClientRect().height;
          minScrollTop = minScrollTop < 0 ? 0 : minScrollTop;
          var scrollTop = target.scrollTop <= minScrollTop ? target.scrollTop : minScrollTop;
          if (this.enableVirtualization) {
            scrollTop -= getTransformValues(closest(maskTable, ".e-virtualtable")).height;
          }
          maskTable.style.transform = "translate(0px," + scrollTop + "px)";
        }
      }
    };
    Grid2.prototype.removeMaskRow = function() {
      if (!isNullOrUndefined(this.contentModule)) {
        var gridContent2 = this.getContent().firstChild;
        EventHandler.remove(gridContent2, "scroll", this.translateMaskRow);
      }
      if (this.headerMaskTable && this.isFrozenGrid() && !this.enableColumnVirtualization) {
        this.getHeaderContent().querySelector("." + headerContent).style.position = "";
      }
      var maskTables = [this.headerMaskTable, this.contentMaskTable, this.footerContentMaskTable];
      for (var i = 0; i < maskTables.length; i++) {
        var maskTable = maskTables[parseInt(i.toString(), 10)];
        if (maskTable) {
          remove(maskTable);
        }
      }
      this.headerMaskTable = null;
      this.contentMaskTable = null;
      this.footerContentMaskTable = null;
    };
    Grid2.prototype.refreshMaskRow = function() {
      var gridContent2 = this.getContent().firstChild;
      if (!this.isInitialLoad && !this.getColumns().length) {
        return;
      }
      if (this.contentMaskTable && gridContent2.querySelector(".e-masked-table")) {
        var content2 = gridContent2;
        if (this.enableVirtualization) {
          content2 = content2.querySelector(".e-virtualtable");
        }
        this.refreshMaskRowColgroupWidth(content2);
      }
    };
    Grid2.prototype.refreshMaskRowColgroupWidth = function(content2) {
      var table2 = content2.querySelector("table:not(.e-masked-table)");
      var colgroup = table2.querySelector(colGroup).cloneNode(true);
      var maskTable = content2.querySelector(".e-masked-table");
      colgroup.removeAttribute("id");
      colgroup.setAttribute("class", "e-masked-colgroup");
      for (var i = 0; i < colgroup.childNodes.length; i++) {
        colgroup.childNodes[parseInt(i.toString(), 10)].removeAttribute("class");
      }
      remove(maskTable.querySelector(".e-masked-colgroup"));
      maskTable.insertBefore(colgroup, maskTable.firstChild);
      maskTable.style.width = table2.getBoundingClientRect().width + "px";
    };
    Grid2.prototype.updateStackedFilter = function() {
      if (this.allowFiltering && this.filterSettings.type === "FilterBar" && this.getHeaderContent().getElementsByClassName("e-stackedheadercell").length) {
        this.getHeaderContent().classList.add("e-stackedfilter");
      } else {
        this.getHeaderContent().classList.remove("e-stackedfilter");
      }
    };
    Grid2.prototype.getMediaColumns = function() {
      if (!this.enableColumnVirtualization) {
        var gcol = this.getColumns();
        this.getShowHideService = this.serviceLocator.getService("showHideService");
        if (!isNullOrUndefined(gcol)) {
          for (var index = 0; index < gcol.length; index++) {
            if (!isNullOrUndefined(gcol[parseInt(index.toString(), 10)].hideAtMedia) && (isNullOrUndefined(gcol[parseInt(index.toString(), 10)].visible) || gcol[parseInt(index.toString(), 10)].visible)) {
              this.pushMediaColumn(gcol[parseInt(index.toString(), 10)], index);
            }
          }
        }
      }
      this.updateFrozenColumnsWidth();
    };
    Grid2.prototype.pushMediaColumn = function(col, index) {
      this.mediaCol.push(col);
      this.media[col.uid] = window.matchMedia(col.hideAtMedia);
      this.mediaQueryUpdate(index, this.media[col.uid]);
      this.mediaBindInstance[parseInt(index.toString(), 10)] = this.mediaQueryUpdate.bind(this, index);
      this.media[col.uid].addListener(this.mediaBindInstance[parseInt(index.toString(), 10)]);
    };
    Grid2.prototype.updateMediaColumns = function(col) {
      if (!this.enableColumnVirtualization) {
        var index = this.getColumnIndexByUid(col.uid);
        for (var i = 0; i < this.mediaCol.length; i++) {
          if (col.uid === this.mediaCol[parseInt(i.toString(), 10)].uid) {
            this.mediaCol.splice(i, 1);
            return;
          }
        }
        this.pushMediaColumn(col, index);
      }
    };
    Grid2.prototype.mediaQueryUpdate = function(columnIndex, e) {
      var col = this.getColumns()[parseInt(columnIndex.toString(), 10)];
      if (this.mediaCol.some(function(mediaColumn) {
        return mediaColumn.uid === col.uid;
      })) {
        col.visible = e.matches;
        if (this.isInitialLoad) {
          this.invokedFromMedia = true;
          if (col.visible) {
            this.showHider.show(col.headerText, "headerText");
          } else {
            this.showHider.hide(col.headerText, "headerText");
          }
        }
      }
    };
    Grid2.prototype.refreshMediaCol = function() {
      this.isInitialLoad = true;
      var footerContent = this.element.querySelector("." + gridFooter);
      if (this.aggregates.length && this.element.scrollHeight > parseInt(this.height.toString(), 10) && footerContent) {
        addClass([footerContent], ["e-footerpadding"]);
      }
      var checkboxColumn = this.getColumns().filter(function(col) {
        return col.type === "checkbox";
      });
      if (checkboxColumn.length === 0 || checkboxColumn.length && this.selectionSettings.checkboxMode === "ResetOnRowClick") {
        this.isCheckBoxSelection = false;
      }
      if (this.rowRenderingMode === "Vertical") {
        if (this.enableHover) {
          this.setProperties({
            enableAdaptiveUI: true,
            enableHover: false
          }, true);
          removeClass([this.element], "e-gridhover");
        }
      }
      if (this.enableAdaptiveUI && this.scrollModule) {
        this.scrollModule.refresh();
      }
      if (this.isFrozenGrid() && this.isAutoGenerateColumns) {
        this.widthService.setWidthToColumns();
        this.isAutoGenerateColumns = false;
      }
    };
    Grid2.prototype.removeMediaListener = function() {
      for (var i = 0; i < this.mediaCol.length; i++) {
        this.media[this.mediaCol[parseInt(i.toString(), 10)].uid].removeListener(this.mediaBindInstance[this.mediaCol[parseInt(i.toString(), 10)].index]);
      }
    };
    Grid2.prototype.eventInitializer = function() {
    };
    Grid2.prototype.destroy = function() {
      var gridElement = this.element;
      if (!gridElement) {
        return;
      }
      var hasGridChild = gridElement.querySelector("." + gridHeader) && gridElement.querySelector("." + gridContent) ? true : false;
      if (hasGridChild) {
        this.unwireEvents();
      }
      this.removeListener();
      this.removeMediaListener();
      this.notify(destroy, {});
      this.destroyDependentModules();
      if (this.isReact) {
        this.destroyTemplate(["template"]);
      }
      if (this.isVue) {
        this.destroyTemplate();
      }
      if (hasGridChild) {
        _super.prototype.destroy.call(this);
      }
      this.toolTipObj.destroy();
      if (this.isReact && !Browser.isIE) {
        this.element.innerHTML = "";
      }
      var modules = ["renderModule", "headerModule", "contentModule", "valueFormatterService", "serviceLocator", "ariaService", "keyboardModule", "widthService", "searchModule", "showHider", "scrollModule", "printModule", "clipboardModule", "focusModule"];
      for (var i = 0; i < modules.length; i++) {
        if (this[modules[parseInt(i.toString(), 10)]]) {
          this[modules[parseInt(i.toString(), 10)]] = null;
        }
      }
      this.element.innerHTML = "";
      classList(this.element, [], ["e-rtl", "e-gridhover", "e-responsive", "e-default", "e-device", "e-grid-min-height"]);
    };
    Grid2.prototype.destroyDependentModules = function() {
      var gridElement = this.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.scrollModule.destroy();
      this.keyboardModule.destroy();
      this.focusModule.destroy();
      this.clipboardModule.destroy();
      this.printModule.destroy();
    };
    Grid2.prototype.getModuleName = function() {
      return "grid";
    };
    Grid2.prototype.enableBoxSelection = function() {
      if (this.enableAutoFill) {
        this.selectionSettings.cellSelectionMode = "BoxWithBorder";
        this.element.classList.add("e-afenabled");
      } else {
        this.element.classList.remove("e-afenabled");
        this.notify(destroyAutoFillElements, {});
      }
    };
    Grid2.prototype.setCSSClass = function(oldCSSClass) {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
      }
    };
    Grid2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var requireRefresh = false;
      var requireGridRefresh = false;
      var freezeRefresh2 = false;
      var checkCursor;
      var args = {
        requestType: "refresh"
      };
      var childGridParent = null;
      var parentInstance = null;
      if (this.isDestroyed) {
        return;
      }
      this.log("module_missing");
      if (this.isEllipsisTooltip()) {
        this.toolTipObj.close();
      }
      var properties = Object.keys(newProp);
      if (properties.indexOf("columns") > -1) {
        if (this.enableColumnVirtualization) {
          this.columnModel = [];
        }
        this.updateColumnObject();
        requireGridRefresh = true;
      }
      for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
        var prop = properties_1[_i];
        switch (prop) {
          case "allowPaging":
            this.notify(uiUpdate, {
              module: "pager",
              enable: this.allowPaging
            });
            requireRefresh = true;
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "pageSettings":
            if (this.pageTemplateChange) {
              this.pageTemplateChange = false;
              this.notify(inBoundModelChanged, {
                module: "pager",
                properties: newProp.pageSettings
              });
              break;
            }
            if (this.pagerModule && this.pagerModule.isCancel) {
              this.pagerModule.isCancel = false;
              return;
            }
            this.notify(inBoundModelChanged, {
              module: "pager",
              properties: newProp.pageSettings
            });
            if (isNullOrUndefined(newProp.pageSettings.currentPage) && isNullOrUndefined(newProp.pageSettings.pageSize) && isNullOrUndefined(newProp.pageSettings.totalRecordsCount) || !isNullOrUndefined(oldProp.pageSettings) && newProp.pageSettings.currentPage !== oldProp.pageSettings.currentPage && !this.enableColumnVirtualization && !this.enableVirtualization && this.pageSettings.totalRecordsCount <= this.pageSettings.pageSize) {
              requireRefresh = true;
            }
            if (this.pagerModule && this.pagerModule.isCancel) {
              this.pagerModule.isCancel = false;
            }
            break;
          case "allowSorting":
            this.notify(uiUpdate, {
              module: "sort",
              enable: this.allowSorting
            });
            requireRefresh = true;
            checkCursor = true;
            break;
          case "allowFiltering":
            this.updateStackedFilter();
            this.notify(uiUpdate, {
              module: "filter",
              enable: this.allowFiltering
            });
            requireRefresh = true;
            if (this.filterSettings.type !== "FilterBar" || this.editSettings.showAddNewRow && this.filterSettings.type === "FilterBar") {
              this.refreshHeader();
            } else {
              if (this.height === "100%") {
                this.scrollModule.refresh();
              }
            }
            break;
          case "height":
          case "width":
            this.notify(uiUpdate, {
              module: "scroll",
              properties: {
                width: newProp.width,
                height: newProp.height
              }
            });
            if (this.allowPaging) {
              this.pagerModule.refresh();
            }
            break;
          case "allowReordering":
            this.headerModule.refreshUI();
            checkCursor = true;
            break;
          case "allowRowDragAndDrop":
            this.notify(uiUpdate, {
              module: "rowDragAndDrop",
              enable: this.allowRowDragAndDrop
            });
            this.renderModule.refresh();
            this.headerModule.refreshUI();
            break;
          case "allowSelection":
            this.notify(uiUpdate, {
              module: "selection",
              enable: this.allowSelection
            });
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "enableAutoFill":
            if (this.selectionModule) {
              this.enableBoxSelection();
              this.selectionModule.updateAutoFillPosition();
            }
            break;
          case "rowTemplate":
            this.rowTemplateFn = templateCompiler(this.rowTemplate);
            requireRefresh = true;
            break;
          case "emptyRecordTemplate":
            this.emptyRecordTemplateFn = templateCompiler(this.emptyRecordTemplate);
            requireRefresh = true;
            break;
          case "detailTemplate":
            this.detailTemplateFn = templateCompiler(this.detailTemplate);
            requireRefresh = true;
            break;
          case "allowGrouping":
            this.notify(uiUpdate, {
              module: "group",
              enable: this.allowGrouping
            });
            this.headerModule.refreshUI();
            requireRefresh = true;
            checkCursor = true;
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "enableInfiniteScrolling":
          case "childGrid":
            requireRefresh = true;
            childGridParent = this.parentDetails ? document.querySelector("#" + this.parentDetails.parentID) : null;
            parentInstance = childGridParent ? childGridParent.ej2_instances[0] : null;
            if (this.childGrid && parentInstance && isNullOrUndefined(parentInstance.childGrid.childGrid)) {
              var childGridObject = Object.assign({}, parentInstance.childGrid, {
                childGrid: newProp.childGrid
              });
              parentInstance.setProperties({
                childGrid: childGridObject
              }, true);
              while (!isNullOrUndefined(parentInstance.parentDetails)) {
                var currentParent = document.querySelector("#" + parentInstance.parentDetails.parentID);
                var currentParentInstance = currentParent ? currentParent.ej2_instances[0] : null;
                if (currentParentInstance) {
                  var currentChildObject = Object.assign({}, currentParentInstance.childGrid);
                  currentChildObject.childGrid = parentInstance.childGrid;
                  currentParentInstance.setProperties({
                    childGrid: currentChildObject
                  }, true);
                }
                parentInstance = currentParentInstance;
              }
            }
            this.headerModule.refreshUI();
            break;
          case "toolbar":
            this.notify(uiUpdate, {
              module: "toolbar"
            });
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "groupSettings":
            this.notify(inBoundModelChanged, {
              module: "group",
              properties: newProp.groupSettings,
              oldProperties: oldProp.groupSettings
            });
            break;
          case "aggregates":
            if (!this.aggregates.length && this.allowGrouping && this.groupSettings.columns.length) {
              requireRefresh = true;
            }
            this.notify(uiUpdate, {
              module: "aggregate",
              properties: newProp
            });
            if (this.height === "100%") {
              this.scrollModule.refresh();
            }
            break;
          case "frozenColumns":
          case "frozenRows":
          case "enableVirtualization":
          case "enableColumnVirtualization":
          case "currencyCode":
          case "locale":
            if (this.isFrozenGrid()) {
              this.log("frozen_rows_columns");
            }
            freezeRefresh2 = true;
            requireGridRefresh = true;
            this.addNewRowFocus = true;
            break;
          case "query":
            if (!this.getDataModule().isQueryInvokedFromData) {
              requireRefresh = true;
            }
            this.getDataModule().isQueryInvokedFromData = false;
            break;
          case "autoFit":
            if (this.autoFit) {
              this.preventAdjustColumns();
            } else {
              this.restoreAdjustColumns();
            }
            break;
          default:
            this.extendedPropertyChange(prop, newProp, requireGridRefresh);
        }
      }
      if (checkCursor) {
        this.updateDefaultCursor();
      }
      if (requireGridRefresh) {
        if (freezeRefresh2 || this.getFrozenColumns() || this.frozenRows || this.frozenLeftColumns.length || this.frozenRightColumns.length) {
          this.freezeRefresh();
        } else {
          this.refresh();
        }
      } else if (requireRefresh) {
        this.notify(modelChanged, args);
        requireRefresh = false;
        this.maintainSelection(newProp.selectedRowIndex);
      }
    };
    Grid2.prototype.extendedPropertyChange = function(prop, newProp, requireGridRefresh) {
      switch (prop) {
        case "enableRtl":
          this.updateRTL();
          if (this.allowPaging) {
            this.element.querySelector(".e-gridpager").ej2_instances[0].enableRtl = newProp.enableRtl;
            this.element.querySelector(".e-gridpager").ej2_instances[0].dataBind();
          }
          if (this.height !== "auto") {
            this.scrollModule.removePadding(!newProp.enableRtl);
            this.scrollModule.setPadding();
          }
          if (this.toolbar && this.toolbarModule) {
            this.toolbarModule.getToolbar().ej2_instances[0].enableRtl = newProp.enableRtl;
            this.toolbarModule.getToolbar().ej2_instances[0].dataBind();
          }
          if (this.contextMenuItems && this.contextMenuModule) {
            this.contextMenuModule.getContextMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
            this.contextMenuModule.getContextMenu().ej2_instances[0].dataBind();
          }
          if (this.showColumnMenu && this.columnMenuModule && !this.enableAdaptiveUI) {
            this.columnMenuModule.getColumnMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
            this.columnMenuModule.getColumnMenu().ej2_instances[0].dataBind();
          }
          if (this.filterSettings.type === "FilterBar" && this.filterSettings.showFilterBarOperator) {
            this.refreshHeader();
          }
          this.notify(rtlUpdated, {});
          break;
        case "enableAltRow":
          this.renderModule.refresh();
          break;
        case "allowResizing":
          this.headerModule.refreshUI();
          this.updateResizeLines();
          break;
        case "rowHeight":
          if (this.rowHeight) {
            addClass([this.element], "e-grid-min-height");
          } else {
            removeClass([this.element], "e-grid-min-height");
          }
          this.renderModule.refresh();
          this.headerModule.refreshUI();
          break;
        case "gridLines":
          this.updateGridLines();
          break;
        case "showColumnMenu":
          this.headerModule.refreshUI();
          this.notify(uiUpdate, {
            module: "columnMenu",
            enable: true
          });
          break;
        case "columnMenuItems":
          this.notify(uiUpdate, {
            module: "columnMenu",
            enable: this.columnMenuItems
          });
          break;
        case "contextMenuItems":
          this.notify(uiUpdate, {
            module: "contextMenu",
            enable: this.contextMenuItems
          });
          break;
        case "showColumnChooser":
          this.notify(uiUpdate, {
            module: "columnChooser",
            enable: this.showColumnChooser
          });
          break;
        case "filterSettings":
          this.updateStackedFilter();
          this.notify(inBoundModelChanged, {
            module: "filter",
            properties: newProp.filterSettings
          });
          break;
        case "searchSettings":
          this.notify(inBoundModelChanged, {
            module: "search",
            properties: newProp.searchSettings
          });
          break;
        case "sortSettings":
          this.notify(inBoundModelChanged, {
            module: "sort"
          });
          break;
        case "selectionSettings":
          this.notify(inBoundModelChanged, {
            module: "selection",
            properties: newProp.selectionSettings
          });
          break;
        case "editSettings":
          this.notify(inBoundModelChanged, {
            module: "edit",
            properties: newProp.editSettings
          });
          break;
        case "allowTextWrap":
        case "textWrapSettings":
          if (this.allowTextWrap) {
            this.applyTextWrap();
          } else {
            this.removeTextWrap();
          }
          this.notify(freezeRender, {
            case: "textwrap",
            isModeChg: prop === "textWrapSettings"
          });
          break;
        case "dataSource":
          var pending_1 = this.getDataModule().getState();
          if (this.allowSelection && this.isPersistSelection && !(pending_1 && pending_1.isPending)) {
            this.clearSelection();
          }
          if (!isNullOrUndefined(this.dataSource) && this.dataSource.result) {
            this.isVirtualAdaptive = false;
          }
          if (Object.getPrototypeOf(newProp).deepWatch) {
            var pKeyField = this.getPrimaryKeyFieldNames()[0];
            for (var i = 0, props = Object.keys(newProp.dataSource); i < props.length; i++) {
              this.setRowData(getValue(pKeyField, this.dataSource[props[parseInt(i.toString(), 10)]]), this.dataSource[props[parseInt(i.toString(), 10)]]);
            }
          } else if (pending_1.isPending) {
            var gResult = !isNullOrUndefined(this.dataSource) ? this.dataSource.result : [];
            var names = pending_1.group || [];
            if (names.length && !this.groupSettings.enableLazyLoading && !(gResult.length && gResult[0].field)) {
              for (var i = 0; i < names.length; i++) {
                gResult = DataUtil.group(gResult, names[parseInt(i.toString(), 10)], pending_1.aggregates || []);
              }
            }
            this.dataSource = {
              result: gResult,
              count: this.dataSource.count,
              aggregates: this.dataSource.aggregates
            };
            this.getDataModule().setState({});
            pending_1.resolver(this.dataSource);
          } else {
            if (!isNullOrUndefined(this.dataSource) && this.dataSource.result && this.dataSource.count && this.groupSettings.columns.length) {
              var gResult = this.dataSource.result;
              var names = this.groupSettings.columns;
              if (names.length && !(gResult.length && gResult[0].field)) {
                for (var i = 0; i < names.length; i++) {
                  gResult = DataUtil.group(gResult, names[parseInt(i.toString(), 10)]);
                }
              }
              this.dataSource = {
                result: gResult,
                count: this.dataSource.count
              };
            }
            this.getDataModule().setState({
              isDataChanged: false
            });
            this.notify(dataSourceModified, {});
            if (!requireGridRefresh) {
              this.renderModule.refresh();
              if (this.isCheckBoxSelection) {
                this.notify(beforeRefreshOnDataChange, {});
              }
            }
          }
          this.scrollRefresh();
          break;
        case "enableHover":
          var action = newProp.enableHover ? addClass : removeClass;
          action([this.element], "e-gridhover");
          break;
        case "selectedRowIndex":
          if (!this.isSelectedRowIndexUpdating) {
            this.selectRow(newProp.selectedRowIndex);
          }
          this.isSelectedRowIndexUpdating = false;
          break;
        case "resizeSettings":
          this.widthService.setWidthToTable();
          break;
        case "enableAdaptiveUI":
          this.notify(setFullScreenDialog, {});
          break;
        case "rowRenderingMode":
          this.enableVerticalRendering();
          this.notify(rowModeChange, {});
          this.refresh();
          break;
        case "enableStickyHeader":
          this.scrollModule.addStickyListener(newProp.enableStickyHeader);
          break;
      }
    };
    Grid2.prototype.maintainSelection = function(index) {
      var _this_1 = this;
      if (index !== -1) {
        var fn_1 = function() {
          _this_1.selectRow(index);
          _this_1.off(contentReady, fn_1);
        };
        this.on(contentReady, fn_1, this);
      }
    };
    Grid2.prototype.setProperties = function(prop, muteOnChange) {
      _super.prototype.setProperties.call(this, prop, muteOnChange);
      var filterSettings = "filterSettings";
      if (prop["" + filterSettings] && this.filterModule && muteOnChange) {
        this.filterModule.refreshFilter();
      }
    };
    Grid2.prototype.getTablesCount = function() {
      return this.tablesCount;
    };
    Grid2.prototype.updateDefaultCursor = function() {
      var headerCells = [].slice.call(this.getHeaderContent().querySelectorAll(".e-headercell:not(.e-stackedheadercell)"));
      var stdHdrCell = [].slice.call(this.getHeaderContent().getElementsByClassName("e-stackedheadercell"));
      var cols = this.getColumns();
      for (var i = 0; i < headerCells.length; i++) {
        var cell = headerCells[parseInt(i.toString(), 10)];
        if (this.allowGrouping || this.allowReordering || this.allowSorting) {
          if (!cols[parseInt(i.toString(), 10)].allowReordering || !cols[parseInt(i.toString(), 10)].allowSorting || !cols[parseInt(i.toString(), 10)].allowGrouping) {
            cell.classList.add("e-defaultcursor");
          } else {
            cell.classList.add("e-mousepointer");
          }
        }
      }
      for (var count2 = 0; count2 < stdHdrCell.length; count2++) {
        if (this.allowReordering) {
          stdHdrCell[parseInt(count2.toString(), 10)].classList.add("e-mousepointer");
        }
      }
    };
    Grid2.prototype.updateColumnModel = function(columns, isRecursion) {
      for (var i = 0, len = !isNullOrUndefined(columns) ? columns.length : 0; i < len; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.updateColumnModel(columns[parseInt(i.toString(), 10)].columns, true);
        } else {
          this.columnModel.push(columns[parseInt(i.toString(), 10)]);
        }
      }
      if (isNullOrUndefined(isRecursion) || !isRecursion) {
        this.updateLockableColumns();
      }
    };
    Grid2.prototype.getFrozenLeftCount = function() {
      return this.getFrozenColumns() || this.getFrozenLeftColumnsCount();
    };
    Grid2.prototype.isFrozenGrid = function() {
      return this.getFrozenColumns() !== 0 || this.frozenLeftColumns.length !== 0 || this.frozenRightColumns.length !== 0 || this.fixedColumns.length !== 0;
    };
    Grid2.prototype.getFrozenMode = function() {
      return this.frozenName;
    };
    Grid2.prototype.updateLockableColumns = function() {
      var cols = this.columnModel;
      var frozenCount = 0;
      var movableCount = 0;
      var frozenColumns = this.getFrozenColumns();
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].lockColumn) {
          if (i < frozenColumns) {
            cols.splice(frozenCount, 0, cols.splice(i, 1)[0]);
            frozenCount++;
          } else {
            cols.splice(frozenColumns + movableCount, 0, cols.splice(i, 1)[0]);
            movableCount++;
          }
        }
      }
    };
    Grid2.prototype.checkLockColumns = function(cols) {
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].columns) {
          this.checkLockColumns(cols[parseInt(i.toString(), 10)].columns);
        } else if (cols[parseInt(i.toString(), 10)].lockColumn) {
          this.lockcolPositionCount++;
        }
      }
    };
    Grid2.prototype.leftrightColumnWidth = function(position) {
      var cols = position === "left" ? this.getFrozenLeftColumns() : position === "right" ? this.getFrozenRightColumns() : [];
      var width = 0;
      cols.filter(function(col) {
        if (col.visible) {
          width += parseInt(col.width.toString(), 10);
        }
      });
      return width;
    };
    Grid2.prototype.getColumns = function(isRefresh) {
      var _this_1 = this;
      var inview = this.inViewIndexes.map(function(v) {
        return v - _this_1.groupSettings.columns.length;
      }).filter(function(v) {
        return v > -1;
      });
      var vLen = inview.length;
      if (!this.enableColumnVirtualization || isNullOrUndefined(this.columnModel) || this.columnModel.length === 0 || isRefresh) {
        this.columnModel = [];
        this.updateColumnModel(this.columns);
      }
      var columns = vLen === 0 ? this.columnModel : this.columnModel.slice(inview[0], inview[vLen - 1] + 1);
      var left = [];
      var right = [];
      var movable = [];
      var isLeftRightFrozen = this.enableColumnVirtualization && this.isPreparedFrozenColumns && vLen === 0;
      if (isLeftRightFrozen) {
        this.frozenRightColumns = [];
        this.frozenLeftColumns = [];
      }
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
          left.push(columns[parseInt(i.toString(), 10)]);
          if (isLeftRightFrozen) {
            this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);
          }
        } else if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
          right.push(columns[parseInt(i.toString(), 10)]);
          if (isLeftRightFrozen) {
            this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);
          }
        } else {
          movable.push(columns[parseInt(i.toString(), 10)]);
        }
      }
      if (this.enableColumnVirtualization && this.isFrozenGrid()) {
        if (this.frozenLeftColumns.length) {
          left = this.frozenLeftColumns;
        }
        if (this.frozenRightColumns.length) {
          right = this.frozenRightColumns;
        }
      }
      return left.concat(movable).concat(right);
    };
    Grid2.prototype.getStackedHeaderColumnByHeaderText = function(stackedHeader, col) {
      for (var i = 0; i < col.length; i++) {
        var individualColumn = col[parseInt(i.toString(), 10)];
        if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {
          this.stackedColumn = individualColumn;
          break;
        } else if (individualColumn.columns) {
          this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);
        }
      }
      return this.stackedColumn;
    };
    Grid2.prototype.getColumnIndexesInView = function() {
      return this.inViewIndexes;
    };
    Grid2.prototype.getQuery = function() {
      return this.query;
    };
    Grid2.prototype.getLocaleConstants = function() {
      return this.defaultLocale;
    };
    Grid2.prototype.setColumnIndexesInView = function(indexes) {
      this.inViewIndexes = indexes;
    };
    Grid2.prototype.getVisibleColumns = function() {
      return this.getCurrentVisibleColumns();
    };
    Grid2.prototype.getHeaderContent = function() {
      return this.headerModule.getPanel();
    };
    Grid2.prototype.setGridHeaderContent = function(element) {
      this.headerModule.setPanel(element);
    };
    Grid2.prototype.getContentTable = function() {
      return this.contentModule.getTable();
    };
    Grid2.prototype.setGridContentTable = function(element) {
      this.contentModule.setTable(element);
    };
    Grid2.prototype.getContent = function() {
      return this.contentModule.getPanel();
    };
    Grid2.prototype.setGridContent = function(element) {
      this.contentModule.setPanel(element);
    };
    Grid2.prototype.getHeaderTable = function() {
      return this.headerModule.getTable();
    };
    Grid2.prototype.setGridHeaderTable = function(element) {
      this.headerModule.setTable(element);
    };
    Grid2.prototype.getFooterContent = function() {
      this.footerElement = this.element.getElementsByClassName(gridFooter)[0];
      return this.footerElement;
    };
    Grid2.prototype.getFooterContentTable = function() {
      this.footerElement = this.element.getElementsByClassName(gridFooter)[0];
      return this.footerElement.firstChild.firstChild;
    };
    Grid2.prototype.getPager = function() {
      return this.gridPager;
    };
    Grid2.prototype.setGridPager = function(element) {
      this.gridPager = element;
    };
    Grid2.prototype.getRowByIndex = function(index) {
      if (this.enableVirtualization && this.groupSettings.enableLazyLoading) {
        return this.lazyLoadRender.getRowByIndex(index);
      } else {
        return this.contentModule.getRowByIndex(index);
      }
    };
    Grid2.prototype.getMovableRowByIndex = function(index) {
      return this.contentModule.getRowByIndex(index);
    };
    Grid2.prototype.getFrozenRowByIndex = function(index) {
      return this.contentModule.getRowByIndex(index);
    };
    Grid2.prototype.getRows = function() {
      return this.contentModule.getRowElements();
    };
    Grid2.prototype.getFrozenRightRowByIndex = function(index) {
      return this.contentModule.getRowByIndex(index);
    };
    Grid2.prototype.getRowInfo = function(target) {
      var ele = target;
      var args = {
        target
      };
      if (!isNullOrUndefined(target) && isNullOrUndefined(parentsUntil(ele, "e-detailrowcollapse") && isNullOrUndefined(parentsUntil(ele, "e-recordplusexpand")))) {
        var cell = closest(ele, "." + rowCell);
        if (!cell) {
          var row_1 = closest(ele, "." + row);
          if (!isNullOrUndefined(row_1) && !row_1.classList.contains("e-addedrow")) {
            var rowObj = this.getRowObjectFromUID(row_1.getAttribute("data-uid"));
            var rowIndex = parseInt(row_1.getAttribute(dataRowIndex), 10);
            args = {
              row: row_1,
              rowData: rowObj.data,
              rowIndex
            };
          }
          return args;
        }
        var cellIndex = parseInt(cell.getAttribute(dataColIndex), 10);
        var row_2 = closest(cell, "." + row);
        if (!isNullOrUndefined(cell) && !isNaN(cellIndex) && !isNullOrUndefined(row_2)) {
          var rowIndex = parseInt(row_2.getAttribute(dataRowIndex), 10);
          var rows = this.contentModule.getRows();
          var index = cellIndex + this.getIndentCount();
          var rowsObject = rows.filter(function(r) {
            return r.uid === row_2.getAttribute("data-uid");
          });
          var rowData = {};
          var column = void 0;
          if (Object.keys(rowsObject).length) {
            rowData = rowsObject[0].data;
            column = rowsObject[0].cells[parseInt(index.toString(), 10)].column;
          }
          args = {
            cell,
            cellIndex,
            row: row_2,
            rowIndex,
            rowData,
            column,
            target
          };
        }
      }
      return args;
    };
    Grid2.prototype.getMovableRows = function() {
      return this.contentModule.getRowElements();
    };
    Grid2.prototype.getFrozenRightRows = function() {
      return this.contentModule.getRowElements();
    };
    Grid2.prototype.getDataRows = function() {
      return this.getAllDataRows();
    };
    Grid2.prototype.getAllDataRows = function(includeAdd) {
      if (isNullOrUndefined(this.getContentTable().querySelector(tbody))) {
        return [];
      }
      var tbody2 = this.getContentTable().querySelector(tbody);
      var rows = [].slice.call(tbody2.children);
      if (this.editSettings.showAddNewRow) {
        if (rows[0].classList.contains("e-addedrow")) {
          rows.shift();
        } else if (rows[rows.length - 1].classList.contains("e-addedrow")) {
          rows.pop();
        }
      }
      if (this.frozenRows) {
        var hdrTbody = this.getHeaderTable().querySelector(tbody);
        var freezeRows = [].slice.call(hdrTbody.children);
        rows = this.addMovableRows(freezeRows, rows);
        if (this.editSettings.showAddNewRow && freezeRows[0].classList.contains("e-addedrow")) {
          freezeRows.shift();
        }
      }
      var dataRows = this.generateDataRows(rows, includeAdd);
      return dataRows;
    };
    Grid2.prototype.addMovableRows = function(fRows, mrows) {
      for (var i = 0, len = mrows.length; i < len; i++) {
        fRows.push(mrows[parseInt(i.toString(), 10)]);
      }
      return fRows;
    };
    Grid2.prototype.generateDataRows = function(rows, includAdd) {
      var dRows = [];
      for (var i = 0, len = rows.length; i < len; i++) {
        if (rows[parseInt(i.toString(), 10)].classList.contains(row) && (!rows[parseInt(i.toString(), 10)].classList.contains("e-hiddenrow") || includAdd)) {
          if (this.isCollapseStateEnabled()) {
            dRows[parseInt(rows[parseInt(i.toString(), 10)].getAttribute("data-rowindex"), 10)] = rows[parseInt(i.toString(), 10)];
          } else {
            dRows.push(rows[parseInt(i.toString(), 10)]);
          }
        }
      }
      return dRows;
    };
    Grid2.prototype.getMovableDataRows = function() {
      return this.getAllMovableDataRows();
    };
    Grid2.prototype.getAllMovableDataRows = function(includeAdd) {
      return this.getAllDataRows(includeAdd);
    };
    Grid2.prototype.getFrozenDataRows = function() {
      return this.getAllFrozenDataRows();
    };
    Grid2.prototype.getAllFrozenDataRows = function(includeAdd) {
      return this.getAllDataRows(includeAdd);
    };
    Grid2.prototype.getFrozenRightDataRows = function() {
      return this.getAllFrozenRightDataRows();
    };
    Grid2.prototype.getAllFrozenRightDataRows = function(includeAdd) {
      return this.getAllDataRows(includeAdd);
    };
    Grid2.prototype.setCellValue = function(key, field, value) {
      var cells = "cells";
      var rowData = "data";
      var rowIdx = "index";
      var rowuID = "uid";
      var pkName = this.getPrimaryKeyFieldNames()[0];
      var cell = new CellRenderer(this, this.serviceLocator);
      var fieldIdx = this.getColumnIndexByField(field);
      var col = this.getColumnByField(field);
      var rowObjects = this.contentModule.getRows();
      var selectedRow = rowObjects.filter(function(r) {
        return getValue(pkName, r.data) === key;
      })[0];
      var tr = selectedRow ? this.element.querySelector("[data-uid=" + selectedRow["" + rowuID] + "]") : null;
      if (!isNullOrUndefined(tr)) {
        if (typeof value === "string") {
          value = this.sanitize(value);
        }
        setValue(field, value, selectedRow["" + rowData]);
        var td = this.enableVirtualization ? tr.children[parseInt(fieldIdx.toString(), 10)] : this.getCellFromIndex(selectedRow["" + rowIdx], fieldIdx);
        if (!isNullOrUndefined(td)) {
          var Idx = 0;
          if (this.groupSettings.columns.length) {
            fieldIdx = fieldIdx + this.groupSettings.columns.length;
          }
          if (this.childGrid || this.detailTemplate) {
            fieldIdx++;
          }
          if (this.isRowDragable()) {
            fieldIdx++;
          }
          var sRow = selectedRow["" + cells][fieldIdx - Idx];
          cell.refreshTD(td, sRow, selectedRow["" + rowData], {
            index: selectedRow["" + rowIdx]
          });
          if (this.isReact) {
            td = this.enableVirtualization ? tr.children[parseInt(fieldIdx.toString(), 10)] : this.getCellFromIndex(selectedRow["" + rowIdx], fieldIdx);
          }
          if (this.aggregates.length > 0) {
            this.notify(refreshFooterRenderer, {});
            if (this.groupSettings.columns.length > 0) {
              this.notify(groupAggregates, {});
            }
          }
          if (!isNullOrUndefined(selectedRow) && !isNullOrUndefined(selectedRow["changes"])) {
            selectedRow["changes"]["" + field] = value;
          }
          this.trigger(queryCellInfo, {
            cell: td,
            column: col,
            data: selectedRow["" + rowData]
          });
          if (this.isReact && td.getAttribute("tabindex") === "0" && td.classList.contains("e-focused")) {
            td.focus();
          }
        }
      } else {
        return;
      }
    };
    Grid2.prototype.refreshReactColumnTemplateByUid = function(columnUid, renderTemplates) {
      var _this_1 = this;
      if (this.isReact) {
        this.clearTemplate(["columnTemplate"], void 0, function() {
          var isChildGrid = _this_1.childGrid && _this_1.element.querySelectorAll(".e-childgrid").length ? true : false;
          var rows = isChildGrid ? _this_1.getContentTable().querySelectorAll(".e-row") : _this_1.getDataRows();
          _this_1.refreshReactTemplateTD(rows, isChildGrid);
          if (renderTemplates) {
            _this_1.renderTemplates();
          }
        });
      }
    };
    Grid2.prototype.refreshReactTemplateTD = function(rows, isChildGrid, isFrozen) {
      var cells = "cells";
      var rowIdx = "index";
      var indent = this.getIndentCount();
      var childIndent = 0;
      var isChildRow = false;
      for (var j = 0; j < rows.length; j++) {
        var rowsObj = this.getRowObjectFromUID(rows[parseInt(j.toString(), 10)].getAttribute("data-uid"));
        if (isChildGrid && !rowsObj && parentsUntil(rows[parseInt(j.toString(), 10)], "e-childgrid")) {
          var gridObj = parentsUntil(rows[parseInt(j.toString(), 10)], "e-childgrid").ej2_instances[0];
          rowsObj = gridObj.getRowObjectFromUID(rows[parseInt(j.toString(), 10)].getAttribute("data-uid"));
          childIndent = gridObj.getIndentCount();
          isChildRow = true;
        }
        if (rowsObj && rowsObj.isDataRow && !isNullOrUndefined(rowsObj.index) && !rows[parseInt(j.toString(), 10)].classList.contains("e-editedrow")) {
          for (var i = 0; i < rowsObj["" + cells].length; i++) {
            var cell = rowsObj["" + cells][parseInt(i.toString(), 10)];
            if (cell.isTemplate) {
              var cellRenderer = new CellRenderer(this, this.serviceLocator);
              var td = isChildGrid ? rows[parseInt(j.toString(), 10)].children[cell.index + (isChildRow ? childIndent : indent)] : this.getCellFromIndex(j, isFrozen ? cell.index : i - indent);
              cellRenderer.refreshTD(td, cell, rowsObj.data, {
                index: rowsObj["" + rowIdx]
              });
            }
          }
        }
        isChildRow = false;
      }
    };
    Grid2.prototype.refreshGroupCaptionFooterTemplate = function() {
      var isChildGrid = this.childGrid && this.element.querySelectorAll(".e-childgrid").length ? true : false;
      var rows = this.getContentTable().querySelectorAll(".e-groupcaptionrow, .e-groupfooterrow");
      for (var i = 0; i < rows.length; i++) {
        var gridObj = this;
        var rowsObj = this.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute("data-uid"));
        if (isChildGrid && !rowsObj && parentsUntil(rows[parseInt(i.toString(), 10)], "e-childgrid")) {
          gridObj = parentsUntil(rows[parseInt(i.toString(), 10)], "e-childgrid").ej2_instances[0];
          rowsObj = gridObj.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute("data-uid"));
        }
        if (rowsObj) {
          var cells = rowsObj.cells.filter(function(cell) {
            return cell.isDataCell;
          });
          var args = {
            cells,
            data: rowsObj.data,
            dataUid: rowsObj.uid
          };
          gridObj.notify(refreshAggregateCell, args);
        }
      }
    };
    Grid2.prototype.refreshReactHeaderTemplateByUid = function(columnUid) {
      if (this.isReact) {
        var cells = "cells";
        var rowsObj = this.headerModule.rows;
        var cellIndex = this.getNormalizedColumnIndex(columnUid);
        var _loop_1 = function(j2) {
          var cell = rowsObj[parseInt(j2.toString(), 10)]["" + cells][parseInt(cellIndex.toString(), 10)];
          if (cell && cell.column.uid === columnUid) {
            var headerCellRenderer = new HeaderCellRenderer(this_1, this_1.serviceLocator);
            var td = parentsUntil(this_1.element.querySelectorAll("[e-mappinguid=" + columnUid + "]")[0], "e-templatecell");
            headerCellRenderer.refresh(cell, td);
            var cols = this_1.sortSettings.columns;
            var columnIndex = cols.findIndex(function(col) {
              return col.field === cell.column.field;
            });
            if (columnIndex !== -1) {
              var header = this_1.getColumnHeaderByField(cell.column.field);
              this_1.ariaService.setSort(header, cols[parseInt(columnIndex.toString(), 10)].direction.toLowerCase());
              if (cols.length > 1) {
                header.querySelector(".e-headercelldiv").insertBefore(this_1.createElement("span", {
                  className: "e-sortnumber",
                  innerHTML: (columnIndex + 1).toString()
                }), header.querySelector(".e-headertext"));
              }
              var filterElement = header.querySelector(".e-sortfilterdiv");
              if (cols[parseInt(columnIndex.toString(), 10)].direction === "Ascending") {
                classList(filterElement, ["e-ascending", "e-icon-ascending"], []);
              } else {
                classList(filterElement, ["e-descending", "e-icon-descending"], []);
              }
            }
          }
        };
        var this_1 = this;
        for (var j = 0; j < rowsObj.length; j++) {
          _loop_1(j);
        }
      }
    };
    Grid2.prototype.setRowData = function(key, rowData) {
      var rowuID = "uid";
      var rowObjects = this.contentModule.getRows();
      var pkName = this.getPrimaryKeyFieldNames()[0];
      if (this.groupSettings.columns.length > 0 && this.aggregates.length > 0) {
        rowObjects = rowObjects.filter(function(row2) {
          return row2.isDataRow;
        });
      }
      var selectedRow = rowObjects.filter(function(r) {
        return getValue(pkName, r.data) === key;
      })[0];
      var selectRowEle = selectedRow ? [].slice.call(this.element.querySelectorAll("[data-uid=" + selectedRow["" + rowuID] + "]")) : void 0;
      if (!isNullOrUndefined(selectedRow) && selectRowEle.length) {
        selectedRow.changes = rowData;
        if (this.frozenRows) {
          var fRowTr = this.getRowsObject()[selectedRow.index];
          this.setFrozenRowData(fRowTr, rowData);
        } else {
          this.setFrozenRowData(selectedRow, rowData);
        }
        if (this.aggregates.length > 0) {
          this.notify(refreshFooterRenderer, {});
          if (this.groupSettings.columns.length > 0) {
            this.notify(groupAggregates, {});
          }
        }
      } else {
        return;
      }
    };
    Grid2.prototype.setFrozenRowData = function(fTr, rowData) {
      var rowRenderer = new RowRenderer(this.serviceLocator, null, this);
      fTr.changes = rowData;
      refreshForeignData(fTr, this.getForeignKeyColumns(), fTr.changes);
      rowRenderer.refresh(fTr, this.getColumns(), true);
    };
    Grid2.prototype.getCellFromIndex = function(rowIndex, columnIndex) {
      var col = this.getColumnByIndex(columnIndex);
      return getCellByColAndRowIndex(this, col, rowIndex, columnIndex);
    };
    Grid2.prototype.getMovableCellFromIndex = function(rowIndex, columnIndex) {
      return this.getCellFromIndex(rowIndex, columnIndex);
    };
    Grid2.prototype.getFrozenRightCellFromIndex = function(rowIndex, columnIndex) {
      return this.getCellFromIndex(rowIndex, columnIndex);
    };
    Grid2.prototype.getColumnHeaderByIndex = function(index) {
      return this.getHeaderTable().getElementsByClassName("e-headercell")[parseInt(index.toString(), 10)];
    };
    Grid2.prototype.getMovableColumnHeaderByIndex = function(index) {
      return this.getColumnHeaderByIndex(index);
    };
    Grid2.prototype.getFrozenRightColumnHeaderByIndex = function(index) {
      return this.getColumnHeaderByIndex(index);
    };
    Grid2.prototype.getFrozenLeftColumnHeaderByIndex = function(index) {
      return this.getColumnHeaderByIndex(index);
    };
    Grid2.prototype.getRowObjectFromUID = function(uid2) {
      var rows = this.contentModule.getRows();
      var row2 = this.rowObject(rows, uid2);
      if (isNullOrUndefined(row2) && this.enableVirtualization && this.groupSettings.columns.length > 0) {
        row2 = this.rowObject(this.vRows, uid2);
        return row2;
      }
      return row2;
    };
    Grid2.prototype.rowObject = function(rows, uid2) {
      if (rows) {
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row2 = rows_1[_i];
          if (row2.uid === uid2) {
            return row2;
          }
        }
      }
      return null;
    };
    Grid2.prototype.getRowsObject = function() {
      return this.contentModule.getRows();
    };
    Grid2.prototype.getMovableRowsObject = function() {
      return this.contentModule.getRows();
    };
    Grid2.prototype.getFrozenRightRowsObject = function() {
      return this.contentModule.getRows();
    };
    Grid2.prototype.getColumnHeaderByField = function(field) {
      var column = this.getColumnByField(field);
      return column ? this.getColumnHeaderByUid(column.uid) : void 0;
    };
    Grid2.prototype.getColumnHeaderByUid = function(uid2) {
      var element = this.getHeaderContent().querySelector("[e-mappinguid=" + uid2 + "]");
      return element ? element.parentElement : void 0;
    };
    Grid2.prototype.getColumnByIndex = function(index) {
      var column;
      this.getColumns().some(function(col, i) {
        column = col;
        return i === index;
      });
      return column;
    };
    Grid2.prototype.getColumnByField = function(field) {
      return iterateArrayOrObject(this.getColumns(), function(item) {
        if (item.field === field) {
          return item;
        }
        return void 0;
      })[0];
    };
    Grid2.prototype.getColumnIndexByField = function(field) {
      var cols = this.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].field === field) {
          return i;
        }
      }
      return -1;
    };
    Grid2.prototype.getColumnByUid = function(uid2) {
      return iterateArrayOrObject(this.getColumns().concat(this.getStackedColumns(this.columns)), function(item) {
        if (item.uid === uid2) {
          return item;
        }
        return void 0;
      })[0];
    };
    Grid2.prototype.getStackedColumns = function(columns, stackedColumn) {
      if (stackedColumn === void 0) {
        stackedColumn = [];
      }
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (column.columns) {
          stackedColumn.push(column);
          this.getStackedColumns(column.columns, stackedColumn);
        }
      }
      return stackedColumn;
    };
    Grid2.prototype.getColumnIndexByUid = function(uid2) {
      var index = iterateArrayOrObject(this.getColumns(), function(item, index2) {
        if (item.uid === uid2) {
          return index2;
        }
        return void 0;
      })[0];
      return !isNullOrUndefined(index) ? index : -1;
    };
    Grid2.prototype.getUidByColumnField = function(field) {
      return iterateArrayOrObject(this.getColumns(), function(item) {
        if (item.field === field) {
          return item.uid;
        }
        return void 0;
      })[0];
    };
    Grid2.prototype.getNormalizedColumnIndex = function(uid2) {
      var index = this.getColumnIndexByUid(uid2);
      return index + this.getIndentCount();
    };
    Grid2.prototype.getIndentCount = function() {
      var index = 0;
      if (this.allowGrouping) {
        index += this.groupSettings.columns.length;
      }
      if (this.isDetail()) {
        index++;
      }
      if (this.isRowDragable() && isNullOrUndefined(this.rowDropSettings.targetID)) {
        index++;
      }
      return index;
    };
    Grid2.prototype.getColumnFieldNames = function() {
      var columnNames = [];
      var column;
      for (var i = 0, len = this.getColumns().length; i < len; i++) {
        column = this.getColumns()[parseInt(i.toString(), 10)];
        if (column.visible) {
          columnNames.push(column.field);
        }
      }
      return columnNames;
    };
    Grid2.prototype.getRowTemplate = function() {
      return this.rowTemplateFn;
    };
    Grid2.prototype.getEmptyRecordTemplate = function() {
      return this.emptyRecordTemplateFn;
    };
    Grid2.prototype.getDetailTemplate = function() {
      return this.detailTemplateFn;
    };
    Grid2.prototype.getEditTemplate = function() {
      return this.editTemplateFn;
    };
    Grid2.prototype.getEditHeaderTemplate = function() {
      return this.editHeaderTemplateFn;
    };
    Grid2.prototype.getEditFooterTemplate = function() {
      return this.editFooterTemplateFn;
    };
    Grid2.prototype.getPrimaryKeyFieldNames = function() {
      var keys = [];
      for (var k = 0; k < this.columnModel.length; k++) {
        if (this.columnModel[parseInt(k.toString(), 10)].isPrimaryKey) {
          keys.push(this.columnModel[parseInt(k.toString(), 10)].field);
        }
      }
      return keys;
    };
    Grid2.prototype.refresh = function() {
      if (!this.isDestroyed) {
        this.isManualRefresh = true;
        this.headerModule.refreshUI();
        this.updateStackedFilter();
        this.renderModule.refresh();
      }
    };
    Grid2.prototype.refreshHeader = function() {
      this.headerModule.refreshUI();
    };
    Grid2.prototype.getSelectedRows = function() {
      return this.selectionModule ? this.selectionModule.selectedRecords : [];
    };
    Grid2.prototype.getSelectedRowIndexes = function() {
      return this.selectionModule ? this.selectionModule.selectedRowIndexes : [];
    };
    Grid2.prototype.getSelectedRowCellIndexes = function() {
      return this.selectionModule ? this.selectionModule.selectedRowCellIndexes : [];
    };
    Grid2.prototype.getSelectedRecords = function() {
      return this.selectionModule ? this.selectionModule.getSelectedRecords() : [];
    };
    Grid2.prototype.getSelectedColumnsUid = function() {
      var _this_1 = this;
      var uid2 = [];
      if (this.selectionModule) {
        this.selectionModule.selectedColumnsIndexes.filter(function(i) {
          return uid2.push(_this_1.getColumns()[parseInt(i.toString(), 10)].uid);
        });
      }
      return uid2;
    };
    Grid2.prototype.getDataModule = function() {
      return this.renderModule.data;
    };
    Grid2.prototype.showColumns = function(keys, showBy) {
      showBy = showBy ? showBy : "headerText";
      this.showHider.show(keys, showBy);
    };
    Grid2.prototype.hideColumns = function(keys, hideBy) {
      hideBy = hideBy ? hideBy : "headerText";
      this.showHider.hide(keys, hideBy);
    };
    Grid2.prototype.getFrozenColumns = function() {
      return this.frozenColumns + this.getFrozenCount(this.columns, 0, 0);
    };
    Grid2.prototype.getFrozenRightColumnsCount = function() {
      return this.frozenRightCount || this.rightcount;
    };
    Grid2.prototype.getFrozenLeftColumnsCount = function() {
      return this.frozenLeftCount || this.leftcount;
    };
    Grid2.prototype.getMovableColumnsCount = function() {
      return this.movableCount || this.movablecount;
    };
    Grid2.prototype.updateFrozenColumnsWidth = function() {
      if (this.isFrozenGrid() && !this.enableColumnVirtualization) {
        var gcol = this.getColumns();
        var isAutoWidth = true;
        var autoCol_1 = 0;
        var difference_1 = 0;
        var autoWidth_1 = 0;
        var _loop_2 = function(i2) {
          var col = gcol[parseInt(i2.toString(), 10)];
          if (isNullOrUndefined(col.width) && (col.freeze === "Left" || col.freeze === "Right" || col.freeze === "Fixed" || col.isFrozen)) {
            col.width = Math.max(200, col.minWidth ? parseFloat(col.minWidth.toString()) : 0);
          }
          if (col.width === "auto") {
            var tWidth_1 = 0;
            if (isAutoWidth) {
              gcol.filter(function(cols) {
                if (cols.visible) {
                  if (cols.width === "auto") {
                    autoCol_1++;
                  }
                  if (cols.width !== "auto") {
                    var width = !isNullOrUndefined(cols.width) ? parseFloat(cols.width.toString()) : Math.max(200, cols.minWidth ? parseFloat(cols.minWidth.toString()) : 0);
                    tWidth_1 += width;
                  }
                }
              });
              var gWidth = this_2.isPercentageWidthGrid() || this_2.width === "auto" ? this_2.element.getBoundingClientRect().width : parseFloat(this_2.width.toString());
              difference_1 = this_2.height === "auto" ? gWidth - tWidth_1 : gWidth - tWidth_1 - getScrollBarWidth();
              if (difference_1 < 0) {
                difference_1 = 0;
              }
              autoWidth_1 = parseFloat((difference_1 / autoCol_1).toString());
              gcol.filter(function(col2) {
                if (col2.visible) {
                  if (col2.minWidth && parseFloat(col2.minWidth.toString()) > autoWidth_1) {
                    difference_1 = difference_1 - parseFloat(col2.minWidth.toString());
                    autoCol_1--;
                  }
                }
              });
              isAutoWidth = false;
            }
            if (col.minWidth && parseFloat(col.minWidth.toString()) > autoWidth_1) {
              col.width = parseFloat(col.minWidth.toString());
            } else {
              col.width = difference_1 / autoCol_1;
            }
          }
        };
        var this_2 = this;
        for (var i = 0; i < gcol.length; i++) {
          _loop_2(i);
        }
      }
    };
    Grid2.prototype.refreshSplitFrozenColumn = function() {
      this.splitFrozenCount(this.columns);
      this.updateFrozenColumnsWidth();
      this.isAutoGenerateColumns = true;
    };
    Grid2.prototype.setFrozenCount = function() {
      this.frozenLeftCount = this.frozenRightCount = this.movableCount = 0;
      this.visibleFrozenLeft = this.visibleFrozenRight = this.visibleMovable = 0;
      this.frozenLeftColumns = [];
      this.frozenRightColumns = [];
      this.movableColumns = [];
      this.fixedColumns = [];
      this.splitFrozenCount(this.columns);
      this.leftcount = this.frozenLeftCount;
      this.rightcount = this.frozenRightCount;
      this.movablecount = this.movableCount;
      if (this.frozenLeftCount && !this.frozenRightCount) {
        this.frozenName = "Left";
      } else if (this.frozenRightCount && !this.frozenLeftCount) {
        this.frozenName = "Right";
      } else if (this.frozenLeftCount && this.frozenRightCount) {
        this.frozenName = "Left-Right";
      } else if (this.frozenColumns || this.frozenRows) {
        this.frozenName = "Left";
      } else {
        this.frozenName = void 0;
      }
    };
    Grid2.prototype.getVisibleFrozenLeftCount = function() {
      return this.visibleFrozenLeft;
    };
    Grid2.prototype.getVisibleFrozenRightCount = function() {
      return this.visibleFrozenRight;
    };
    Grid2.prototype.getVisibleMovableCount = function() {
      return this.visibleMovable;
    };
    Grid2.prototype.getFrozenRightColumns = function() {
      return this.frozenRightColumns;
    };
    Grid2.prototype.getFrozenLeftColumns = function() {
      return this.frozenLeftColumns;
    };
    Grid2.prototype.getMovableColumns = function() {
      return this.movableColumns;
    };
    Grid2.prototype.splitStackedColumns = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.splitStackedColumns(columns[parseInt(i.toString(), 10)].columns);
        } else {
          if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenLeft++;
            }
            this.leftcount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenRight++;
            }
            this.rightcount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Fixed") {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenFixed++;
            }
            this.fixedcount++;
          } else {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleMovable++;
            }
            this.movablecount++;
          }
        }
      }
    };
    Grid2.prototype.pushStackedColumns = function(columns, index, arr, col, stackedcol) {
      arr[parseInt(index.toString(), 10)] = col.headerText;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          index = index + 1;
          this.pushStackedColumns(columns[parseInt(i.toString(), 10)].columns, index, arr, columns[parseInt(i.toString(), 10)], stackedcol);
          index = index - 1;
        } else {
          var stockCol = [];
          stockCol = arr.slice().slice(0, index + 1);
          if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
            this.stackedLeft.push(stockCol);
            this.stackedarrayLeft.push(columns[parseInt(i.toString(), 10)]);
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
            this.stackedRight.push(stockCol);
            this.stackedarrayRight.push(columns[parseInt(i.toString(), 10)]);
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Fixed") {
            this.stackedFixed.push(stockCol);
            this.stackedarrayFixed.push(columns[parseInt(i.toString(), 10)]);
          } else {
            this.stackedMovable.push(stockCol);
            this.stackedarrayMovable.push(columns[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    Grid2.prototype.pushallcol = function(text, text1, col, columns, isTrue) {
      if (col.headerText === text1) {
        if (isTrue) {
          col.columns.push(columns);
        } else {
          col.columns.push({
            headerText: text,
            columns: []
          });
        }
      } else {
        if (col.columns && col.columns.length) {
          for (var i = 0; i < col.columns.length; i++) {
            this.pushallcol(text, text1, col.columns[parseInt(i.toString(), 10)], columns, isTrue);
          }
        }
      }
    };
    Grid2.prototype.resetStackedColumns = function(headercol, gridcolumns, freeze) {
      var col = {};
      var tempHead = [];
      for (var i = 1; i <= headercol.length; i++) {
        var firstcol = headercol[i - 1];
        for (var j = 0; j < firstcol.length; j++) {
          if (!col.columns && i === 1) {
            col = {
              headerText: firstcol[parseInt(j.toString(), 10)],
              columns: []
            };
            tempHead.push(firstcol[parseInt(j.toString(), 10)]);
          } else {
            if (tempHead.indexOf(firstcol[parseInt(j.toString(), 10)]) === -1) {
              this.pushallcol(firstcol[parseInt(j.toString(), 10)], firstcol[j - 1], col);
              tempHead.push(firstcol[parseInt(j.toString(), 10)]);
            }
          }
          if (j === firstcol.length - 1) {
            this.pushallcol(null, firstcol[parseInt(j.toString(), 10)], col, gridcolumns[i - 1], true);
            var count2 = 0;
            while (count2 !== headercol.length - 1 && i !== headercol.length) {
              if (firstcol.toString() === headercol[parseInt(i.toString(), 10)].toString()) {
                i++;
                this.pushallcol(null, firstcol[parseInt(j.toString(), 10)], col, gridcolumns[i - 1], true);
              }
              count2++;
            }
          }
        }
      }
      if (freeze === "Left") {
        this.frozenLeftColumns.push(col);
      } else if (freeze === "Right") {
        this.frozenRightColumns.push(col);
      } else {
        this.movableColumns.push(col);
      }
    };
    Grid2.prototype.splitFrozenCount = function(columns) {
      if (this.frozenColumns || this.changedProperties && this.changedProperties.frozenColumns === 0) {
        var cols = !this.enableColumnVirtualization || this.enableColumnVirtualization && this.isPreparedFrozenColumns ? this.enableColumnVirtualization && this.columnModel && this.columnModel.length ? this.columnModel : this.getColumns() : this.columns;
        if (!this.changedProperties || this.changedProperties && !this.changedProperties.frozenColumns) {
          for (var i = 0; i < cols.length; i++) {
            if (this.frozenColumns > i) {
              cols[parseInt(i.toString(), 10)].freeze = "Left";
            } else if (cols[parseInt(i.toString(), 10)].freeze === "Right" || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
              cols[parseInt(i.toString(), 10)].freeze = cols[parseInt(i.toString(), 10)].freeze;
            } else {
              cols[parseInt(i.toString(), 10)].freeze = void 0;
            }
          }
        }
      }
      for (var i = 0; i < (!isNullOrUndefined(columns) ? columns.length : 0); i++) {
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.leftcount = 0;
          this.rightcount = 0;
          this.movablecount = 0;
          this.fixedcount = 0;
          var arr = [];
          this.splitStackedColumns(columns[parseInt(i.toString(), 10)].columns);
          if (this.leftcount && !this.rightcount && !this.movablecount && !this.fixedcount) {
            this.frozenLeftCount += this.leftcount;
            this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);
          } else if (this.rightcount && !this.leftcount && !this.movablecount && !this.fixedcount) {
            this.frozenRightCount += this.rightcount;
            this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);
          } else if (this.movablecount && !this.leftcount && !this.rightcount && !this.fixedcount) {
            this.movableCount += this.movablecount;
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
          } else if (this.fixedcount && !this.leftcount && !this.rightcount && !this.movablecount) {
            this.fixedCount += this.fixedcount;
            this.fixedColumns.push(columns[parseInt(i.toString(), 10)]);
            this.movableCount += this.movablecount;
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
          } else {
            this.frozenLeftCount += this.leftcount;
            this.frozenRightCount += this.rightcount;
            this.movableCount += this.movablecount;
            this.fixedCount += this.fixedcount;
            this.leftcount = 0;
            this.rightcount = 0;
            this.movablecount = 0;
            this.fixedcount = 0;
            this.stackedLeft = [];
            this.stackedRight = [];
            this.stackedFixed = [];
            this.stackedMovable = [];
            this.stackedarrayLeft = [];
            this.stackedarrayRight = [];
            this.stackedarrayFixed = [];
            this.stackedarrayMovable = [];
            this.pushStackedColumns(columns[parseInt(i.toString(), 10)].columns, 0, arr, columns[parseInt(i.toString(), 10)], {
              headerText: columns[parseInt(i.toString(), 10)].headerText,
              columns: []
            });
            if (this.stackedarrayLeft.length) {
              this.resetStackedColumns(this.stackedLeft, this.stackedarrayLeft, "Left");
            }
            if (this.stackedarrayRight.length) {
              this.resetStackedColumns(this.stackedRight, this.stackedarrayRight, "Right");
            }
            if (this.stackedarrayFixed.length) {
              this.resetStackedColumns(this.stackedFixed, this.stackedarrayFixed, "Fixed");
            }
            if (this.stackedarrayMovable.length) {
              this.resetStackedColumns(this.stackedMovable, this.stackedarrayMovable, "Movable");
            }
            this.stackedLeft = [];
            this.stackedRight = [];
            this.stackedMovable = [];
            this.stackedFixed = [];
            this.stackedarrayLeft = [];
            this.stackedarrayRight = [];
            this.stackedarrayMovable = [];
            this.stackedarrayFixed = [];
          }
        } else {
          if (columns[parseInt(i.toString(), 10)].freeze === "Right") {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenRight++;
            }
            this.frozenRightColumns.push(columns[parseInt(i.toString(), 10)]);
            this.frozenRightCount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].isFrozen) {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleFrozenLeft++;
            }
            this.frozenLeftColumns.push(columns[parseInt(i.toString(), 10)]);
            this.frozenLeftCount++;
          } else if (columns[parseInt(i.toString(), 10)].freeze === "Fixed") {
            this.fixedColumns.push(columns[parseInt(i.toString(), 10)]);
            this.fixedCount++;
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
            this.movableCount++;
          } else {
            if (columns[parseInt(i.toString(), 10)].visible !== false) {
              this.visibleMovable++;
            }
            this.movableColumns.push(columns[parseInt(i.toString(), 10)]);
            this.movableCount++;
          }
        }
      }
      if (this.frozenLeftColumns.length) {
        var cols = this.frozenLeftColumns[this.frozenLeftColumns.length - 1];
        this.removeBorder(this.frozenLeftColumns);
        this.frozenLeftBorderColumns(cols instanceof Column ? this.lastVisibleLeftCol(this.frozenLeftColumns) : cols);
      }
      if (this.frozenRightColumns.length) {
        var cols = this.frozenRightColumns[0];
        this.removeBorder(this.frozenRightColumns);
        this.frozenRightBorderColumns(cols instanceof Column ? this.firstVisibleRightCol(this.frozenRightColumns) : cols);
      }
      if ((this.frozenLeftColumns.length || this.frozenRightColumns.length) && this.freezeColumnRefresh) {
        var cols = this.frozenLeftColumns.concat(this.movableColumns).concat(this.frozenRightColumns);
        this.setProperties({
          columns: cols
        }, true);
        this.freezeColumnRefresh = false;
      }
    };
    Grid2.prototype.removeBorder = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].columns && columns[parseInt(i.toString(), 10)].columns.length) {
          if (columns[parseInt(i.toString(), 10)].border === "Right" || columns[parseInt(i.toString(), 10)].border === "Left") {
            columns[parseInt(i.toString(), 10)].border = void 0;
          }
          this.removeBorder(columns[parseInt(i.toString(), 10)].columns);
        } else {
          if (columns[parseInt(i.toString(), 10)].border === "Right" || columns[parseInt(i.toString(), 10)].border === "Left") {
            columns[parseInt(i.toString(), 10)].border = void 0;
          }
        }
      }
    };
    Grid2.prototype.isVisibleColumns = function(column, arr) {
      if (column.columns && column.columns.length) {
        for (var i = 0; i < column.columns.length; i++) {
          this.isVisibleColumns(column.columns[parseInt(i.toString(), 10)], arr);
          if (column.columns[parseInt(i.toString(), 10)].visible && isNullOrUndefined(column.columns[parseInt(i.toString(), 10)].columns) && (!isNullOrUndefined(column.columns[parseInt(i.toString(), 10)].freeze) || column.columns[parseInt(i.toString(), 10)].isFrozen)) {
            arr.push("true");
          }
        }
      } else {
        if (column.visible && (!isNullOrUndefined(column.freeze) || column.isFrozen)) {
          arr.push("true");
        }
      }
    };
    Grid2.prototype.lastVisibleLeftCol = function(columns) {
      var column;
      for (var i = columns.length - 1; i >= 0; i--) {
        var arr = [];
        this.isVisibleColumns(columns[parseInt(i.toString(), 10)], arr);
        if (columns[parseInt(i.toString(), 10)].visible && arr.indexOf("true") !== -1) {
          column = columns[parseInt(i.toString(), 10)];
          break;
        }
      }
      return column;
    };
    Grid2.prototype.firstVisibleRightCol = function(columns) {
      var column;
      for (var i = 0; i < columns.length; i++) {
        var arr = [];
        this.isVisibleColumns(columns[parseInt(i.toString(), 10)], arr);
        if (columns[parseInt(i.toString(), 10)].visible && arr.indexOf("true") !== -1) {
          column = columns[parseInt(i.toString(), 10)];
          break;
        }
      }
      return column;
    };
    Grid2.prototype.frozenLeftBorderColumns = function(columns) {
      if (isNullOrUndefined(columns)) {
        return;
      }
      if (columns.columns && columns.columns.length) {
        columns.border = "Left";
        var cols = columns.columns[columns.columns.length - 1];
        this.frozenLeftBorderColumns(cols instanceof Column && cols.columns ? this.lastVisibleLeftCol(columns.columns) : cols);
      } else {
        columns.border = "Left";
      }
    };
    Grid2.prototype.frozenRightBorderColumns = function(columns) {
      if (isNullOrUndefined(columns)) {
        return;
      }
      if (columns.columns && columns.columns.length) {
        columns.border = "Right";
        var cols = columns.columns[0];
        this.frozenRightBorderColumns(cols instanceof Column && cols.columns ? this.firstVisibleRightCol(columns.columns) : cols);
      } else {
        columns.border = "Right";
      }
    };
    Grid2.prototype.getVisibleFrozenColumns = function() {
      return this.getVisibleFrozenColumnsCount() + this.getVisibleFrozenCount(this.columns, 0);
    };
    Grid2.prototype.getFilterUIInfo = function() {
      return this.filterModule ? this.filterModule.getFilterUIInfo() : {};
    };
    Grid2.prototype.getVisibleFrozenColumnsCount = function() {
      var visibleFrozenColumns = 0;
      var columns = this.columnModel;
      for (var i = 0; i < this.frozenColumns; i++) {
        if (columns[parseInt(i.toString(), 10)].visible) {
          visibleFrozenColumns++;
        }
      }
      if (this.frozenLeftCount || this.leftcount || this.frozenRightCount || this.rightcount) {
        for (var i = 0; i < columns.length; i++) {
          if (columns[parseInt(i.toString(), 10)].visible && (columns[parseInt(i.toString(), 10)].freeze === "Left" || columns[parseInt(i.toString(), 10)].freeze === "Right")) {
            visibleFrozenColumns++;
          }
        }
      }
      return visibleFrozenColumns;
    };
    Grid2.prototype.getVisibleFrozenCount = function(cols, cnt) {
      if (!this.frozenLeftCount && !this.leftcount && (!this.frozenRightCount || !this.rightcount)) {
        for (var i = 0, len = cols.length; i < len; i++) {
          if (cols[parseInt(i.toString(), 10)].columns) {
            cnt = this.getVisibleFrozenCount(cols[parseInt(i.toString(), 10)].columns, cnt);
          } else {
            if (cols[parseInt(i.toString(), 10)].isFrozen && cols[parseInt(i.toString(), 10)].visible) {
              cnt++;
            }
          }
        }
      }
      return cnt;
    };
    Grid2.prototype.getFrozenCount = function(cols, cnt, index) {
      for (var i = 0, len = !isNullOrUndefined(cols) ? cols.length : 0; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].columns) {
          cnt = this.getFrozenCount(cols[parseInt(i.toString(), 10)].columns, cnt, index);
        } else {
          if (cols[parseInt(i.toString(), 10)].isFrozen && index > this.frozenColumns - 1) {
            cnt++;
          }
          index++;
        }
      }
      return cnt;
    };
    Grid2.prototype.goToPage = function(pageNo) {
      if (this.pagerModule) {
        this.pagerModule.goToPage(pageNo);
      }
    };
    Grid2.prototype.updateExternalMessage = function(message) {
      if (this.pagerModule && !this.pagerTemplate) {
        this.pagerModule.updateExternalMessage(message);
      }
    };
    Grid2.prototype.sortColumn = function(columnName, direction, isMultiSort) {
      if (this.sortModule) {
        this.sortModule.sortColumn(columnName, direction, isMultiSort);
      }
    };
    Grid2.prototype.changeDataSource = function(dataSource, columns) {
      this.isChangeDataSourceCall = true;
      this.setProperties({
        sortSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        filterSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        searchSettings: {
          key: ""
        }
      }, true);
      if (this.allowGrouping) {
        this.setProperties({
          groupSettings: {
            columns: []
          }
        }, true);
      }
      if (columns && columns.length) {
        this.setProperties({
          columns
        }, true);
      }
      if (dataSource) {
        if (isNullOrUndefined(columns)) {
          this.setProperties({
            columns: []
          }, true);
        }
        this.setProperties({
          dataSource
        }, true);
      }
      this.freezeRefresh();
      this.isChangeDataSourceCall = false;
    };
    Grid2.prototype.clearSorting = function() {
      if (this.sortModule) {
        this.sortModule.clearSorting();
      }
    };
    Grid2.prototype.removeSortColumn = function(field) {
      if (this.sortModule) {
        this.sortModule.removeSortColumn(field);
      }
    };
    Grid2.prototype.clearGridActions = function() {
      this.setProperties({
        sortSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        filterSettings: {
          columns: []
        }
      }, true);
      this.setProperties({
        searchSettings: {
          key: ""
        }
      }, true);
      if (this.allowGrouping) {
        this.setProperties({
          groupSettings: {
            columns: []
          }
        }, false);
      } else {
        this.freezeRefresh();
      }
    };
    Grid2.prototype.filterByColumn = function(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
      if (this.filterModule) {
        this.filterModule.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);
      }
    };
    Grid2.prototype.clearFiltering = function(fields) {
      if (this.filterModule) {
        this.filterModule.clearFiltering(fields);
      }
    };
    Grid2.prototype.removeFilteredColsByField = function(field, isClearFilterBar) {
      if (this.filterModule) {
        this.filterModule.removeFilteredColsByField(field, isClearFilterBar);
      }
    };
    Grid2.prototype.selectRow = function(index, isToggle) {
      if (this.selectionModule) {
        this.selectionModule.selectRow(index, isToggle);
      }
    };
    Grid2.prototype.selectRows = function(rowIndexes) {
      if (this.selectionModule) {
        this.selectionModule.selectRows(rowIndexes);
      }
    };
    Grid2.prototype.clearSelection = function() {
      if (this.selectionModule) {
        this.selectionModule.clearSelection();
      }
    };
    Grid2.prototype.selectCell = function(cellIndex, isToggle) {
      if (this.selectionModule) {
        this.selectionModule.selectCell(cellIndex, isToggle);
      }
    };
    Grid2.prototype.selectCellsByRange = function(startIndex, endIndex) {
      this.selectionModule.selectCellsByRange(startIndex, endIndex);
    };
    Grid2.prototype.search = function(searchString) {
      if (this.searchModule) {
        this.searchModule.search(searchString);
      }
    };
    Grid2.prototype.print = function() {
      if (this.printModule) {
        this.printModule.print();
      }
    };
    Grid2.prototype.deleteRecord = function(fieldname, data) {
      if (this.editModule) {
        this.editModule.deleteRecord(fieldname, data);
      }
    };
    Grid2.prototype.startEdit = function() {
      if (this.editModule) {
        this.editModule.startEdit();
      }
    };
    Grid2.prototype.endEdit = function() {
      if (this.editModule) {
        this.editModule.endEdit();
      }
    };
    Grid2.prototype.closeEdit = function() {
      if (this.editModule) {
        this.editModule.closeEdit();
      }
    };
    Grid2.prototype.addRecord = function(data, index) {
      if (this.editModule) {
        this.editModule.addRecord(data, index);
      }
    };
    Grid2.prototype.deleteRow = function(tr) {
      if (this.editModule) {
        this.editModule.deleteRow(tr);
      }
    };
    Grid2.prototype.editCell = function(index, field) {
      if (this.editModule) {
        this.editModule.editCell(index, field);
      }
    };
    Grid2.prototype.saveCell = function() {
      if (this.editModule) {
        this.editModule.saveCell();
      }
    };
    Grid2.prototype.updateCell = function(rowIndex, field, value) {
      if (this.editModule) {
        this.editModule.updateCell(rowIndex, field, value);
      }
    };
    Grid2.prototype.updateRow = function(index, data) {
      if (this.editModule) {
        this.editModule.updateRow(index, data);
      }
    };
    Grid2.prototype.getBatchChanges = function() {
      if (this.editModule) {
        return this.editModule.getBatchChanges();
      }
      return {};
    };
    Grid2.prototype.enableToolbarItems = function(items, isEnable) {
      if (this.toolbarModule) {
        this.toolbarModule.enableItems(items, isEnable);
      }
    };
    Grid2.prototype.copy = function(withHeader) {
      if (this.clipboardModule) {
        this.clipboardModule.copy(withHeader);
      }
    };
    Grid2.prototype.recalcIndentWidth = function() {
      var _this_1 = this;
      if (!this.getHeaderTable().querySelector(".e-emptycell")) {
        return;
      }
      if (!this.groupSettings.columns.length && !this.isDetail() && !this.isRowDragable() || this.getHeaderTable().querySelector(".e-emptycell").getAttribute("indentRefreshed") || !this.getContentTable()) {
        return;
      }
      var indentWidth = this.getHeaderTable().querySelector(".e-emptycell").parentElement.offsetWidth;
      var headerCol = [].slice.call(this.getHeaderTable().querySelector(colGroup).childNodes);
      var contentCol = [].slice.call(this.getContentTable().querySelector(colGroup).childNodes);
      var perPixel = indentWidth / 30;
      var i = this.getFrozenMode() === "Right" ? this.groupSettings.columns.length + this.getColumns().length : 0;
      var parentOffset = this.element.offsetWidth;
      var applyWidth = function(index, width) {
        if (ispercentageWidth(_this_1)) {
          var newWidth = (width / parentOffset * 100).toFixed(1) + "%";
          headerCol[parseInt(index.toString(), 10)].style.width = newWidth;
          contentCol[parseInt(index.toString(), 10)].style.width = newWidth;
        } else {
          headerCol[parseInt(index.toString(), 10)].style.width = width + "px";
          contentCol[parseInt(index.toString(), 10)].style.width = width + "px";
        }
        _this_1.notify(columnWidthChanged, {
          index,
          width
        });
      };
      if (perPixel >= 1) {
        indentWidth = 30 / perPixel;
      }
      if (indentWidth < 1) {
        indentWidth = 1;
      }
      if (this.enableColumnVirtualization || this.isAutoGen || this.columns.length === this.groupSettings.columns.length) {
        indentWidth = 30;
      }
      while (i < this.groupSettings.columns.length) {
        applyWidth(i, indentWidth);
        i++;
      }
      if (this.isDetail()) {
        applyWidth(i, indentWidth);
        i++;
      }
      if (this.isRowDragable()) {
        applyWidth(i, indentWidth);
      }
      this.isAutoGen = false;
      this.getHeaderTable().querySelector(".e-emptycell").setAttribute("indentRefreshed", "true");
    };
    Grid2.prototype.resetIndentWidth = function() {
      if (this.isDestroyed) {
        return;
      }
      if (ispercentageWidth(this)) {
        this.getHeaderTable().querySelector(".e-emptycell").removeAttribute("indentRefreshed");
        this.widthService.setWidthToColumns();
        this.recalcIndentWidth();
        if (this.autoFit) {
          this.preventAdjustColumns();
        }
      }
      if ((this.width === "auto" || typeof this.width === "string" && this.width.indexOf("%") !== -1) && this.getColumns().filter(function(col) {
        return (!col.width || col.width === "auto") && col.minWidth;
      }).length > 0) {
        var tgridWidth = this.widthService.getTableWidth(this.getColumns());
        this.widthService.setMinwidthBycalculation(tgridWidth);
      }
      if (this.isFrozenGrid() && this.enableColumnVirtualization && this.widthService) {
        this.widthService.refreshFrozenScrollbar();
      }
      if (this.allowTextWrap && this.textWrapSettings.wrapMode !== "Content") {
        this.notify(refreshHandlers, {});
      }
      if (this.frozenRows && this.scrollModule) {
        this.scrollModule.resizeFrozenRowBorder();
      }
      if (this.enableStickyHeader) {
        this.scrollModule.makeStickyHeader();
      }
    };
    Grid2.prototype.isRowDragable = function() {
      return this.allowRowDragAndDrop && !this.rowDropSettings.targetID;
    };
    Grid2.prototype.reorderColumns = function(fromFName, toFName) {
      if (this.reorderModule) {
        this.reorderModule.reorderColumns(fromFName, toFName);
      }
    };
    Grid2.prototype.reorderColumnByIndex = function(fromIndex, toIndex) {
      if (this.reorderModule) {
        this.reorderModule.reorderColumnByIndex(fromIndex, toIndex);
      }
    };
    Grid2.prototype.reorderColumnByTargetIndex = function(fieldName, toIndex) {
      if (this.reorderModule) {
        this.reorderModule.reorderColumnByTargetIndex(fieldName, toIndex);
      }
    };
    Grid2.prototype.reorderRows = function(fromIndexes, toIndex) {
      if (this.rowDragAndDropModule) {
        this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex);
      }
    };
    Grid2.prototype.refreshDataSource = function(e) {
      this.notify("refreshdataSource", e);
    };
    Grid2.prototype.disableRowDD = function(enable) {
      var headerTable = this.getHeaderTable();
      var contentTable = this.getContentTable();
      var headerRows = headerTable.querySelectorAll("th.e-rowdragheader, th.e-mastercell");
      var rows = this.getRows();
      var disValue = enable ? "none" : "";
      setStyleAttribute(headerTable.querySelector(colGroup).childNodes[0], {
        "display": disValue
      });
      setStyleAttribute(contentTable.querySelector(colGroup).childNodes[0], {
        "display": disValue
      });
      for (var i = 0; i < this.getRows().length; i++) {
        var ele = rows[parseInt(i.toString(), 10)].firstElementChild;
        if (enable) {
          addClass([ele], "e-hide");
        } else {
          removeClass([ele], ["e-hide"]);
        }
      }
      for (var j = 0; j < headerTable.querySelectorAll("th.e-rowdragheader, th.e-mastercell").length; j++) {
        var ele = headerRows[parseInt(j.toString(), 10)];
        if (enable) {
          addClass([ele], "e-hide");
        } else {
          removeClass([ele], ["e-hide"]);
        }
      }
    };
    Grid2.prototype.autoFitColumns = function(fieldNames, startRowIndex, endRowIndex) {
      var injectedModules = this.getInjectedModules();
      var resize = injectedModules.find(function(item) {
        if (typeof item === "function" && !isNullOrUndefined(item.prototype)) {
          return item.prototype.getModuleName() === "resize";
        } else {
          return item.name === "Resize";
        }
      });
      if (!this.resizeModule && resize) {
        this.autoFitColumnsResize = true;
        this.injectModules();
      }
      if (this.resizeModule) {
        this.resizeModule.autoFitColumns(fieldNames, startRowIndex, endRowIndex);
      }
    };
    Grid2.prototype.preventAdjustColumns = function() {
      if (this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" || this.allowResizing && this.resizeSettings.mode === "Auto") {
        return;
      }
      var columns = this.getColumns();
      var headerTable = this.getHeaderTable();
      var tableWidth = 0;
      for (var i = 0; i < columns.length; i++) {
        if (columns[parseInt(i.toString(), 10)].visible) {
          if (this.groupSettings.columns.length && this.groupSettings.columns.indexOf(columns[parseInt(i.toString(), 10)].field) > -1) {
            var headerCol = [].slice.call(headerTable.querySelector("colgroup").querySelectorAll(":not(.e-group-intent):not(.e-detail-intent):not(.e-drag-intent)"));
            if (headerCol[parseInt(i.toString(), 10)].style.display === "none") {
              continue;
            }
          }
          if (columns[parseInt(i.toString(), 10)].width) {
            tableWidth += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());
          } else {
            tableWidth = 0;
            break;
          }
        }
      }
      if (tableWidth) {
        var percentageWidth = this.isPercentageWidthGrid();
        var unit = this.widthUnit(percentageWidth);
        var contentTable = this.getContentTable();
        if (this.groupSettings.columns.length || this.isDetail() || this.isRowDragable()) {
          var indentWidth = this.defaultIndentWidth(percentageWidth);
          var indentWidthUnitFormat = indentWidth.toString() + unit;
          var headerIndentCol = [].slice.call(headerTable.querySelector("colgroup").querySelectorAll(".e-group-intent, .e-detail-intent, .e-drag-intent"));
          var contentIndentCol = [].slice.call(contentTable.querySelector("colgroup").querySelectorAll(".e-group-intent, .e-detail-intent, .e-drag-intent"));
          for (var i = 0; i < headerIndentCol.length; i++) {
            headerIndentCol[parseInt(i.toString(), 10)].style.setProperty("width", indentWidthUnitFormat);
            contentIndentCol[parseInt(i.toString(), 10)].style.setProperty("width", indentWidthUnitFormat);
            tableWidth += indentWidth;
          }
        }
        if (percentageWidth && tableWidth < 100 || !percentageWidth && tableWidth < contentTable.parentElement.clientWidth) {
          if (!isNullOrUndefined(contentTable.querySelector(".e-emptyrow"))) {
            addClass([headerTable], ["e-tableborder"]);
            removeClass([contentTable], ["e-tableborder"]);
          } else {
            addClass([headerTable, contentTable], ["e-tableborder"]);
          }
        }
        var tableWidthUnitFormat = tableWidth.toString() + unit;
        headerTable.style.setProperty("width", tableWidthUnitFormat);
        contentTable.style.setProperty("width", tableWidthUnitFormat);
      } else {
        this.restoreAdjustColumns();
      }
    };
    Grid2.prototype.restoreAdjustColumns = function() {
      if (this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" || this.allowResizing && this.resizeSettings.mode === "Auto") {
        return;
      }
      var headerTable = this.getHeaderTable();
      var contentTable = this.getContentTable();
      removeClass([headerTable, contentTable], ["e-tableborder"]);
      headerTable.style.removeProperty("width");
      contentTable.style.removeProperty("width");
      if (this.groupSettings.columns.length || this.isDetail() || this.isRowDragable()) {
        var percentageWidth = this.isPercentageWidthGrid();
        var indentWidthUnitFormat_1 = this.defaultIndentWidth(percentageWidth).toString() + this.widthUnit(percentageWidth);
        var headerIndentCol = [].slice.call(headerTable.querySelector("colgroup").querySelectorAll(".e-group-intent, .e-detail-intent, .e-drag-intent"));
        headerIndentCol.forEach(function(element) {
          element.style.setProperty("width", indentWidthUnitFormat_1);
        });
        headerTable.querySelector(".e-emptycell").removeAttribute("indentRefreshed");
        this.recalcIndentWidth();
      }
    };
    Grid2.prototype.widthUnit = function(percentageWidth) {
      return percentageWidth ? "%" : "px";
    };
    Grid2.prototype.defaultIndentWidth = function(percentageWidth) {
      return percentageWidth ? parseFloat((30 / this.element.offsetWidth * 100).toFixed(1)) : 30;
    };
    Grid2.prototype.isPercentageWidthGrid = function() {
      return this.getColumns()[0].width.toString().indexOf("%") > -1;
    };
    Grid2.prototype.createColumnchooser = function(x, y, target) {
      if (this.columnChooserModule) {
        this.columnChooserModule.renderColumnChooser(x, y, target);
      }
    };
    Grid2.prototype.initializeServices = function() {
      this.serviceLocator.register("widthService", this.widthService = new ColumnWidthService(this));
      this.serviceLocator.register("cellRendererFactory", new CellRendererFactory());
      this.serviceLocator.register("rendererFactory", new RendererFactory());
      this.serviceLocator.register("localization", this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));
      this.serviceLocator.register("valueFormatter", this.valueFormatterService = new ValueFormatter(this.locale));
      this.serviceLocator.register("showHideService", this.showHider = new ShowHide(this));
      this.serviceLocator.register("ariaService", this.ariaService = new AriaService());
      this.serviceLocator.register("focus", this.focusModule = new FocusStrategy(this));
    };
    Grid2.prototype.processModel = function() {
      var gCols = this.groupSettings.columns;
      var sCols = this.sortSettings.columns;
      var flag;
      var j;
      if (this.allowGrouping) {
        var _loop_3 = function(i2, len2) {
          j = 0;
          for (var sLen = sCols.length; j < sLen; j++) {
            if (sCols[parseInt(j.toString(), 10)].field === gCols[parseInt(i2.toString(), 10)]) {
              flag = true;
              break;
            }
          }
          if (!flag) {
            sCols.push({
              field: gCols[parseInt(i2.toString(), 10)],
              direction: "Ascending",
              isFromGroup: true
            });
          } else {
            if (this_3.allowSorting) {
              this_3.sortedColumns.push(sCols[parseInt(j.toString(), 10)].field);
            } else {
              sCols[parseInt(j.toString(), 10)].direction = "Ascending";
            }
          }
          if (!this_3.groupSettings.showGroupedColumn) {
            var column = this_3.enableColumnVirtualization ? this_3.columns.filter(function(c) {
              return c.field === gCols[parseInt(i2.toString(), 10)];
            })[0] : this_3.getColumnByField(gCols[parseInt(i2.toString(), 10)]);
            if (column) {
              column.visible = false;
            } else {
              this_3.log("initial_action", {
                moduleName: "group",
                columnName: gCols[parseInt(i2.toString(), 10)]
              });
            }
          }
        };
        var this_3 = this;
        for (var i = 0, len = gCols.length; i < len; i++) {
          _loop_3(i, len);
        }
      }
      if (!gCols.length) {
        for (var i = 0; i < sCols.length; i++) {
          this.sortedColumns.push(sCols[parseInt(i.toString(), 10)].field);
        }
      }
      this.rowTemplateFn = templateCompiler(this.rowTemplate);
      this.emptyRecordTemplateFn = templateCompiler(this.emptyRecordTemplate);
      this.detailTemplateFn = templateCompiler(this.detailTemplate);
      this.editTemplateFn = templateCompiler(this.editSettings.template);
      this.editHeaderTemplateFn = templateCompiler(this.editSettings.headerTemplate);
      this.editFooterTemplateFn = templateCompiler(this.editSettings.footerTemplate);
      if (!isNullOrUndefined(this.parentDetails)) {
        var value = isNullOrUndefined(this.parentDetails.parentKeyFieldValue) ? "undefined" : this.parentDetails.parentKeyFieldValue;
        this.query.where(this.queryString, "equal", value, true);
      }
      this.initForeignColumn();
    };
    Grid2.prototype.initForeignColumn = function() {
      if (this.isForeignKeyEnabled(this.getColumns())) {
        this.notify(initForeignKeyColumn, this.getForeignKeyColumns());
      }
    };
    Grid2.prototype.enableVerticalRendering = function() {
      if (this.rowRenderingMode === "Vertical") {
        this.element.classList.add("e-row-responsive");
      } else {
        this.element.classList.remove("e-row-responsive");
      }
    };
    Grid2.prototype.gridRender = function() {
      var _a;
      this.updateRTL();
      if (this.rowRenderingMode === "Vertical") {
        this.element.classList.add("e-row-responsive");
      }
      if (this.enableHover) {
        this.element.classList.add("e-gridhover");
      }
      if (Browser.isDevice) {
        this.element.classList.add("e-device");
      }
      if (this.rowHeight) {
        this.element.classList.add("e-grid-min-height");
      }
      if (this.cssClass) {
        if (this.cssClass.indexOf(" ") !== -1) {
          (_a = this.element.classList).add.apply(_a, this.cssClass.split(" "));
        } else {
          this.element.classList.add(this.cssClass);
        }
      }
      if (this.allowRowDragAndDrop && this.rowDropSettings.targetID && Browser.info.name === "mozilla") {
        this.element.classList.add("e-disableuserselect");
      }
      if (this.editSettings.showAddNewRow && (this.enableVirtualization || this.enableInfiniteScrolling)) {
        this.editSettings.newRowPosition = "Top";
      }
      classList(this.element, ["e-responsive", "e-default"], []);
      var rendererFactory = this.serviceLocator.getService("rendererFactory");
      this.headerModule = rendererFactory.getRenderer(RenderType.Header);
      this.contentModule = rendererFactory.getRenderer(RenderType.Content);
      this.printModule = new Print(this, this.scrollModule);
      this.clipboardModule = new Clipboard(this, this.serviceLocator);
      this.renderModule.render();
      this.eventInitializer();
      this.createGridPopUpElement();
      this.widthService.setWidthToColumns();
      this.updateGridLines();
      this.applyTextWrap();
      this.createTooltip();
      this.enableBoxSelection();
    };
    Grid2.prototype.dataReady = function() {
      this.scrollModule.setWidth();
      this.scrollModule.setHeight();
      if (this.height !== "auto") {
        this.scrollModule.setPadding();
      }
    };
    Grid2.prototype.updateRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    Grid2.prototype.createGridPopUpElement = function() {
      var popup = this.createElement("div", {
        className: "e-gridpopup",
        styles: "display:none;"
      });
      var content2 = this.createElement("div", {
        className: content,
        attrs: {
          tabIndex: "-1"
        }
      });
      append([content2, this.createElement("div", {
        className: "e-uptail e-tail"
      })], popup);
      content2.appendChild(this.createElement("span"));
      append([content2, this.createElement("div", {
        className: "e-downtail e-tail"
      })], popup);
      this.element.appendChild(popup);
    };
    Grid2.prototype.updateGridLines = function() {
      classList(this.element, [], ["e-verticallines", "e-horizontallines", "e-hidelines", "e-bothlines"]);
      switch (this.gridLines) {
        case "Horizontal":
          this.element.classList.add("e-horizontallines");
          break;
        case "Vertical":
          this.element.classList.add("e-verticallines");
          break;
        case "None":
          this.element.classList.add("e-hidelines");
          break;
        case "Both":
          this.element.classList.add("e-bothlines");
          break;
      }
      this.updateResizeLines();
    };
    Grid2.prototype.updateResizeLines = function() {
      if (this.allowResizing && !(this.gridLines === "Vertical" || this.gridLines === "Both")) {
        this.element.classList.add("e-resize-lines");
      } else {
        this.element.classList.remove("e-resize-lines");
      }
    };
    Grid2.prototype.applyTextWrap = function() {
      if (this.allowTextWrap) {
        var headerRows = [].slice.call(this.element.getElementsByClassName("e-columnheader"));
        switch (this.textWrapSettings.wrapMode) {
          case "Header":
            wrap(this.element, false);
            wrap(this.getContent(), false);
            wrap(headerRows, true);
            break;
          case "Content":
            wrap(this.getContent(), true);
            wrap(this.element, false);
            wrap(headerRows, false);
            break;
          default:
            wrap(this.element, true);
            wrap(this.getContent(), false);
            wrap(headerRows, false);
        }
        if (this.textWrapSettings.wrapMode !== "Content") {
          this.notify(refreshHandlers, {});
        }
      }
    };
    Grid2.prototype.removeTextWrap = function() {
      wrap(this.element, false);
      var headerRows = [].slice.call(this.element.getElementsByClassName("e-columnheader"));
      wrap(headerRows, false);
      wrap(this.getContent(), false);
      if (this.textWrapSettings.wrapMode !== "Content") {
        this.notify(refreshHandlers, {});
      }
    };
    Grid2.prototype.createTooltip = function() {
      this.toolTipObj = new Tooltip({
        opensOn: "custom",
        content: "",
        cssClass: this.cssClass ? this.cssClass : null
      }, this.element);
    };
    Grid2.prototype.freezeRefresh = function() {
      if (this.enableVirtualization || this.enableInfiniteScrolling) {
        this.pageSettings.currentPage = 1;
      }
      this.componentRefresh();
    };
    Grid2.prototype.getTooltipStatus = function(element) {
      var headerTable = this.getHeaderTable();
      var headerDivTag = this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" ? "e-gridcontent" : "e-gridheader";
      var htable = this.createTable(headerTable, headerDivTag, "header");
      var ctable = this.createTable(headerTable, headerDivTag, "content");
      var table2 = element.classList.contains("e-headercell") ? htable : ctable;
      var ele = element.classList.contains("e-headercell") ? "th" : "tr";
      table2.querySelector(ele).className = element.className;
      table2.querySelector(ele).innerHTML = element.innerHTML;
      var width = table2.querySelector(ele).getBoundingClientRect().width;
      document.body.removeChild(htable);
      document.body.removeChild(ctable);
      if (width > element.getBoundingClientRect().width && !element.classList.contains("e-editedbatchcell") || this.enableAdaptiveUI && this.rowRenderingMode === "Vertical" && width > element.getBoundingClientRect().width * 0.55 - (this.height !== "auto" ? 16 : 0)) {
        return true;
      }
      return false;
    };
    Grid2.prototype.mouseMoveHandler = function(e) {
      if (this.isEllipsisTooltip()) {
        var element = parentsUntil(e.target, "e-ellipsistooltip");
        if (this.prevElement !== element || e.type === "mouseout") {
          this.toolTipObj.close();
        }
        var tagName = e.target.tagName;
        var elemNames = ["A", "BUTTON", "INPUT"];
        if (element && e.type !== "mouseout" && !(Browser.isDevice && elemNames.indexOf(tagName) !== -1)) {
          if (this.getTooltipStatus(element)) {
            var col = this.getColumns()[parseInt(element.getAttribute(dataColIndex), 10)];
            var domSetter = col.disableHtmlEncode ? "innerText" : "innerHTML";
            var contentDiv = this.createElement("div");
            if (element.getElementsByClassName("e-headertext").length) {
              var innerElement = element.getElementsByClassName("e-headertext")[0];
              contentDiv["" + domSetter] = this.sanitize(innerElement.innerText);
              this.toolTipObj.content = contentDiv;
            } else {
              contentDiv["" + domSetter] = this.sanitize(element.innerText);
              this.toolTipObj.content = contentDiv;
            }
            this.prevElement = element;
            if (this.enableHtmlSanitizer) {
              this.toolTipObj.enableHtmlSanitizer = true;
            }
            if (col.disableHtmlEncode) {
              this.toolTipObj.enableHtmlParse = false;
            }
            this.toolTipObj["open"](element);
          }
        }
      }
    };
    Grid2.prototype.isEllipsisTooltip = function() {
      var cols = this.getColumns();
      if (this.clipMode === "EllipsisWithTooltip") {
        return true;
      }
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].clipMode === "EllipsisWithTooltip") {
          return true;
        }
      }
      return false;
    };
    Grid2.prototype.scrollHandler = function() {
      if (this.isEllipsisTooltip()) {
        this.toolTipObj.close();
      }
    };
    Grid2.prototype.createTable = function(table2, tag, type) {
      var myTableDiv = this.createElement("div");
      myTableDiv.className = this.element.className;
      myTableDiv.style.cssText = "display: inline-block;visibility:hidden;position:absolute";
      var mySubDiv = this.createElement("div");
      mySubDiv.className = tag;
      var myTable = this.createElement("table");
      myTable.className = table2.className;
      myTable.style.cssText = "table-layout: auto;width: auto";
      var ele = type === "header" ? "th" : "td";
      var myTr = this.createElement("tr", {
        attrs: {
          role: "row"
        }
      });
      var mytd = this.createElement(ele);
      myTr.appendChild(mytd);
      myTable.appendChild(myTr);
      mySubDiv.appendChild(myTable);
      myTableDiv.appendChild(mySubDiv);
      document.body.appendChild(myTableDiv);
      return myTableDiv;
    };
    Grid2.prototype.onKeyPressed = function(e) {
      if (e.action === "tab" || e.action === "shiftTab") {
        this.toolTipObj.close();
      }
    };
    Grid2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.mouseClickHandler, this);
      EventHandler.add(this.element, "touchend", this.mouseClickHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      EventHandler.add(this.element, "dblclick", this.dblClickHandler, this);
      EventHandler.add(this.element, "keydown", this.keyPressHandler, this);
      EventHandler.add(window, "resize", this.resetIndentWidth, this);
      if (this.allowKeyboard) {
        this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;
      }
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      EventHandler.add(this.getContent().firstElementChild, "scroll", this.scrollHandler, this);
      EventHandler.add(this.element, "mouseover", this.mouseMoveHandler, this);
      EventHandler.add(this.element, "mouseout", this.mouseMoveHandler, this);
      EventHandler.add(this.getContent(), "touchstart", this.tapEvent, this);
      EventHandler.add(document.body, "keydown", this.keyDownHandler, this);
    };
    Grid2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.mouseClickHandler);
      EventHandler.remove(this.element, "touchend", this.mouseClickHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "dblclick", this.dblClickHandler);
      EventHandler.remove(this.getContent().firstElementChild, "scroll", this.scrollHandler);
      EventHandler.remove(this.element, "mouseover", this.mouseMoveHandler);
      EventHandler.remove(this.element, "mouseout", this.mouseMoveHandler);
      EventHandler.remove(this.element, "keydown", this.keyPressHandler);
      EventHandler.remove(this.getContent(), "touchstart", this.tapEvent);
      EventHandler.remove(document.body, "keydown", this.keyDownHandler);
      EventHandler.remove(window, "resize", this.resetIndentWidth);
    };
    Grid2.prototype.addListener = function() {
      if (this.isDestroyed) {
        return;
      }
      this.on(dataReady, this.dataReady, this);
      this.on(contentReady, this.recalcIndentWidth, this);
      this.on(headerRefreshed, this.recalcIndentWidth, this);
      this.on(refreshFrozenPosition, this.refreshFrozenPosition, this);
      this.on(refreshSplitFrozenColumn, this.refreshSplitFrozenColumn, this);
      this.dataBoundFunction = this.refreshMediaCol.bind(this);
      this.addEventListener(dataBound, this.dataBoundFunction);
      this.on(keyPressed, this.onKeyPressed, this);
    };
    Grid2.prototype.removeListener = function() {
      if (this.isDestroyed) {
        return;
      }
      this.off(dataReady, this.dataReady);
      this.off(contentReady, this.recalcIndentWidth);
      this.off(headerRefreshed, this.recalcIndentWidth);
      this.on(refreshFrozenPosition, this.refreshFrozenPosition, this);
      this.on(refreshSplitFrozenColumn, this.refreshSplitFrozenColumn, this);
      this.removeEventListener(dataBound, this.dataBoundFunction);
      this.off(keyPressed, this.onKeyPressed);
    };
    Grid2.prototype.getCurrentViewRecords = function() {
      if (isGroupAdaptive(this)) {
        return isNullOrUndefined(this.currentViewData.records) ? this.currentViewData : this.currentViewData.records;
      }
      if (this.groupSettings.enableLazyLoading) {
        return this.currentViewData;
      }
      return this.allowGrouping && this.groupSettings.columns.length && this.currentViewData.length && this.currentViewData.records ? this.currentViewData.records : this.currentViewData;
    };
    Grid2.prototype.mouseClickHandler = function(e) {
      if (this.isChildGrid(e) || parentsUntil(e.target, "e-gridpopup") && e.touches || this.element.getElementsByClassName("e-cloneproperties").length || this.checkEdit(e)) {
        return;
      }
      if ((!this.allowRowDragAndDrop && (parentsUntil(e.target, gridContent) || e.target.tagName === "TD") || parentsUntil(e.target, "e-headercell") && parentsUntil(e.target, "e-headercell").querySelector(".e-checkselectall") || !(this.allowGrouping || this.allowReordering) && parentsUntil(e.target, "e-gridheader")) && e.touches) {
        return;
      }
      if (parentsUntil(e.target, "e-gridheader") && this.allowRowDragAndDrop && !parentsUntil(e.target, "e-filterbarcell") && e.target && ["A", "BUTTON", "INPUT"].indexOf(e.target.tagName) === -1) {
        e.preventDefault();
      }
      var args = this.getRowInfo(e.target);
      var cancel = "cancel";
      args["" + cancel] = false;
      var isDataRow = false;
      var tr = closest(e.target, "tr");
      if (tr && tr.getAttribute("data-uid")) {
        var rowObj = this.getRowObjectFromUID(tr.getAttribute("data-uid"));
        isDataRow = rowObj ? rowObj.isDataRow : false;
      }
      if (isDataRow) {
        this.trigger(recordClick, args);
      }
      this.notify(click, e);
    };
    Grid2.prototype.checkEdit = function(e) {
      var tr = parentsUntil(e.target, row);
      var isEdit = this.editSettings.mode !== "Batch" && this.isEdit && tr && (tr.classList.contains(editedRow) || tr.classList.contains(addedRow) && !this.editSettings.showAddNewRow);
      return !parentsUntil(e.target, "e-unboundcelldiv") && (isEdit || parentsUntil(e.target, rowCell) && parentsUntil(e.target, rowCell).classList.contains("e-editedbatchcell"));
    };
    Grid2.prototype.dblClickHandler = function(e) {
      var grid = parentsUntil(e.target, "e-grid");
      if (isNullOrUndefined(grid) || grid.id !== this.element.id || closest(e.target, ".e-unboundcelldiv")) {
        return;
      }
      var dataRow = false;
      var tr = closest(e.target, "tr");
      if (tr && tr.getAttribute("data-uid")) {
        var rowObj = this.getRowObjectFromUID(tr.getAttribute("data-uid"));
        dataRow = rowObj ? rowObj.isDataRow : false;
      }
      var args = this.getRowInfo(e.target);
      args.target = e.target;
      if (dataRow) {
        this.trigger(recordDoubleClick, args);
      }
      this.notify(dblclick, e);
    };
    Grid2.prototype.focusOutHandler = function(e) {
      if (this.isChildGrid(e)) {
        return;
      }
      if (!parentsUntil(e.target, "e-grid")) {
        this.element.querySelector(".e-gridpopup").style.display = "None";
      }
      var filterClear = this.element.querySelector(".e-cancel:not(.e-hide)");
      if (filterClear && !filterClear.parentElement.classList.contains("e-tbar-btn")) {
        filterClear.classList.add("e-hide");
      }
      var relatedTarget = e.relatedTarget;
      var ariaOwns = relatedTarget ? relatedTarget.getAttribute("aria-owns") : null;
      if ((!relatedTarget || !parentsUntil(relatedTarget, "e-grid") && (!isNullOrUndefined(ariaOwns) && ariaOwns) !== e.target.getAttribute("aria-owns")) && !this.keyPress && this.isEdit && !Browser.isDevice) {
        if (this.editSettings.mode === "Batch" && !((parentsUntil(relatedTarget, "e-ddl") || parentsUntil(relatedTarget, "e-ddt")) && (parentsUntil(relatedTarget, "e-multi-select-list-wrapper") || parentsUntil(relatedTarget, "e-input-filter")) && parentsUntil(relatedTarget, "e-input-group")) && (parentsUntil(relatedTarget, "e-uploader") || !(relatedTarget && isNullOrUndefined(parentsUntil(relatedTarget, "e-input-group"))))) {
          this.editModule.saveCell();
          this.notify(editNextValCell, {});
        }
        if (this.editSettings.mode === "Normal" && !this.isWidgetsDestroyed) {
          this.editModule.editFormValidate();
        }
      }
      if (this.editSettings.showAddNewRow) {
        this.editModule.isShowAddedRowValidate = false;
      }
      this.keyPress = false;
    };
    Grid2.prototype.isChildGrid = function(e) {
      var gridElement = parentsUntil(e.target, "e-grid");
      if (gridElement && gridElement.id !== this.element.id || parentsUntil(e.target, "e-unboundcelldiv") && isNullOrUndefined(gridElement)) {
        return true;
      }
      return false;
    };
    Grid2.prototype.mergePersistGridData = function(persistedData) {
      var data = this.getLocalData();
      if (!(isNullOrUndefined(data) || data === "") || !isNullOrUndefined(persistedData)) {
        var dataObj = !isNullOrUndefined(persistedData) ? persistedData : JSON.parse(data);
        if (this.enableVirtualization && dataObj.pageSettings) {
          dataObj.pageSettings.currentPage = 1;
        }
        var keys = Object.keys(dataObj);
        this.isProtectedOnChange = true;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          if (typeof this["" + key] === "object" && !isNullOrUndefined(this["" + key])) {
            if (Array.isArray(this["" + key]) && key === "columns") {
              this.setFrozenCount();
              setColumnIndex(this["" + key]);
              this.mergeColumns(dataObj["" + key], this["" + key]);
              this.mergedColumns = true;
              this["" + key] = dataObj["" + key];
            } else {
              extend(this["" + key], dataObj["" + key]);
            }
          } else {
            this["" + key] = dataObj["" + key];
          }
        }
        this.isProtectedOnChange = false;
      }
    };
    Grid2.prototype.mergeColumns = function(storedColumn, columns) {
      var storedColumns = storedColumn;
      var isFrozenGrid = this.isFrozenGrid();
      var _loop_4 = function(i2) {
        var localCol = columns.filter(function(tCol) {
          return isFrozenGrid ? tCol.index === storedColumns[parseInt(i2.toString(), 10)]["" + initialFrozenColumnIndex] : tCol.index === storedColumns[parseInt(i2.toString(), 10)].index;
        })[0];
        if (!isNullOrUndefined(localCol)) {
          if (isFrozenGrid) {
            localCol = extend({}, localCol, {}, true);
            localCol.freeze = storedColumns[parseInt(i2.toString(), 10)].freeze;
          }
          if (localCol.columns && localCol.columns.length) {
            this_4.mergeColumns(storedColumns[parseInt(i2.toString(), 10)].columns, localCol.columns);
            storedColumns[parseInt(i2.toString(), 10)] = extend(localCol, storedColumns[parseInt(i2.toString(), 10)], {}, true);
          } else {
            storedColumns[parseInt(i2.toString(), 10)] = extend(localCol, storedColumns[parseInt(i2.toString(), 10)], {}, true);
          }
        }
      };
      var this_4 = this;
      for (var i = 0; i < storedColumns.length; i++) {
        _loop_4(i);
      }
    };
    Grid2.prototype.isDetail = function() {
      return !isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.childGrid);
    };
    Grid2.prototype.isCommandColumn = function(columns) {
      var _this_1 = this;
      return columns.some(function(col) {
        if (col.columns) {
          return _this_1.isCommandColumn(col.columns);
        }
        return !!(col.commands || col.commandsTemplate);
      });
    };
    Grid2.prototype.isForeignKeyEnabled = function(columns) {
      var _this_1 = this;
      return columns.some(function(col) {
        if (col.columns) {
          return _this_1.isForeignKeyEnabled(col.columns);
        }
        return !!(col.dataSource && col.foreignKeyValue);
      });
    };
    Grid2.prototype.keyPressHandler = function(e) {
      var presskey = extend(e, {
        cancel: false
      });
      this.trigger("keyPressed", presskey);
      if (presskey.cancel === true) {
        e.stopImmediatePropagation();
      }
    };
    Grid2.prototype.keyDownHandler = function(e) {
      if (e.altKey) {
        if (e.keyCode === 74) {
          if (this.keyA) {
            this.notify(groupCollapse, {
              target: e.target,
              collapse: false
            });
            this.keyA = false;
          } else {
            if (this.focusModule && this.focusModule.currentInfo && this.focusModule.currentInfo.element) {
              removeClass([this.focusModule.currentInfo.element, this.focusModule.currentInfo.elementToFocus], ["e-focused", "e-focus"]);
              this.focusModule.currentInfo.element.tabIndex = -1;
            }
            if (!this.element.classList.contains("e-childgrid")) {
              this.element.focus();
            }
          }
        }
        if (e.keyCode === 87) {
          var focusModule = this.focusModule;
          if (focusModule) {
            if (!this.currentViewData.length) {
              return;
            }
            focusModule.focusContent();
            focusModule.addOutline();
          }
        }
        if (e.keyCode === 65) {
          this.keyA = true;
        }
        if (e.keyCode === 72 && this.keyA) {
          this.notify(groupCollapse, {
            target: e.target,
            collapse: true
          });
          this.keyA = false;
        }
      }
      if (e.keyCode === 13) {
        this.notify(enterKeyHandler, e);
      }
    };
    Grid2.prototype.keyActionHandler = function(e) {
      if (this.isChildGrid(e) || this.isEdit && (!this.editSettings.showAddNewRow || this.editSettings.showAddNewRow && this.element.querySelector(editedRow)) && e.action !== "escape" && e.action !== "enter" && e.action !== "shiftEnter" && e.action !== "tab" && e.action !== "shiftTab") {
        return;
      } else {
        this.keyPress = true;
      }
      if (this.allowKeyboard) {
        if (e.action === "ctrlPlusP") {
          e.preventDefault();
          this.print();
        }
        this.notify(keyPressed, e);
      }
    };
    Grid2.prototype.setInjectedModules = function(modules) {
      this.injectedModules = modules;
    };
    Grid2.prototype.updateColumnObject = function() {
      prepareColumns(this.columns, this.enableColumnVirtualization, this);
      setColumnIndex(this.columns);
      this.initForeignColumn();
      this.notify(autoCol, {});
    };
    Grid2.prototype.refreshFrozenPosition = function(obj) {
      if (obj && obj.isModeChg) {
        this.refreshColumns();
        this.notify(refreshResizePosition, {});
      } else {
        this.refreshColumns();
      }
    };
    Grid2.prototype.getForeignKeyColumns = function() {
      return this.getColumns().filter(function(col) {
        return col.isForeignColumn();
      });
    };
    Grid2.prototype.getRowHeight = function() {
      return this.rowHeight ? this.rowHeight : getRowHeight(this.element);
    };
    Grid2.prototype.refreshColumns = function() {
      this.freezeColumnRefresh = true;
      this.setFrozenCount();
      this.updateFrozenColumnsWidth();
      if (this.isFrozenGrid()) {
        this.isPreventScrollEvent = true;
      }
      this.updateColumnObject();
      this.checkLockColumns(this.getColumns());
      this.refresh();
      if (this.isFrozenGrid() && this.enableColumnVirtualization) {
        var left = this.getContent().querySelector(".e-movablescrollbar").scrollLeft;
        this.getHeaderContent().querySelector("." + headerContent).scrollLeft = left;
        this.getContent().querySelector("." + content).scrollLeft = left;
      }
    };
    Grid2.prototype.excelExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
      if (this.exportGrids && this.exportGrids.length) {
        var gridIds = this.exportGrids.slice();
        return this.exportMultipleExcelGrids(gridIds, excelExportProperties, isMultipleExport, workbook, isBlob);
      } else {
        return this.excelExportModule ? this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;
      }
    };
    Grid2.prototype.csvExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
      return this.excelExportModule ? this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, true, isBlob) : null;
    };
    Grid2.prototype.pdfExport = function(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      if (this.exportGrids && this.exportGrids.length) {
        var gridIds = this.exportGrids.slice();
        return this.exportMultiplePdfGrids(gridIds, pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
      } else {
        return this.pdfExportModule ? this.pdfExportModule.Map(this, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) : null;
      }
    };
    Grid2.prototype.exportMultiplePdfGrids = function(gridIds, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var _this = this;
      if (gridIds.length !== 0) {
        var currentGridId = gridIds.shift();
        var currentGridInstance = document.getElementById(currentGridId).ej2_instances[0];
        var exportPromise = currentGridInstance.pdfExportModule ? currentGridInstance.pdfExportModule.Map(currentGridInstance, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) : Promise.resolve();
        return exportPromise.then(function(exportedGridResults) {
          isMultipleExport = gridIds.length === 1 ? false : true;
          return _this.exportMultiplePdfGrids(gridIds, pdfExportProperties, isMultipleExport, exportedGridResults, isBlob);
        });
      }
      return null;
    };
    Grid2.prototype.exportMultipleExcelGrids = function(gridIds, excelExportProperties, isMultipleExport, workbook, isBlob) {
      var _this = this;
      if (gridIds.length !== 0) {
        var currentGridId = gridIds.shift();
        var currentGridInstance = document.getElementById(currentGridId).ej2_instances[0];
        var exportPromise = currentGridInstance.excelExportModule ? currentGridInstance.excelExportModule.Map(currentGridInstance, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;
        return exportPromise.then(function(exportedGridResults) {
          isMultipleExport = gridIds.length === 1 ? false : true;
          return _this.exportMultipleExcelGrids(gridIds, excelExportProperties, isMultipleExport, exportedGridResults, isBlob);
        });
      }
      return null;
    };
    Grid2.prototype.groupColumn = function(columnName) {
      if (this.groupModule) {
        this.groupModule.groupColumn(columnName);
      }
    };
    Grid2.prototype.groupExpandAll = function() {
      if (this.groupModule) {
        this.groupModule.expandAll();
      }
    };
    Grid2.prototype.groupCollapseAll = function() {
      if (this.groupModule) {
        this.groupModule.collapseAll();
      }
    };
    Grid2.prototype.clearGrouping = function() {
      if (this.groupModule) {
        this.groupModule.clearGrouping();
      }
    };
    Grid2.prototype.ungroupColumn = function(columnName) {
      if (this.groupModule) {
        this.groupModule.ungroupColumn(columnName);
      }
    };
    Grid2.prototype.openColumnChooser = function(x, y) {
      if (this.columnChooserModule) {
        this.columnChooserModule.openColumnChooser(x, y);
      }
    };
    Grid2.prototype.scrollRefresh = function() {
      var _this_1 = this;
      var refresh = function() {
        _this_1.scrollModule.refresh();
        _this_1.off(contentReady, refresh);
      };
      this.on(contentReady, refresh, this);
    };
    Grid2.prototype.detailCollapseAll = function() {
      if (this.detailRowModule) {
        this.detailRowModule.collapseAll();
      }
    };
    Grid2.prototype.detailExpandAll = function() {
      if (this.detailRowModule) {
        this.detailRowModule.expandAll();
      }
    };
    Grid2.prototype.clearCellSelection = function() {
      if (this.selectionModule) {
        this.selectionModule.clearCellSelection();
      }
    };
    Grid2.prototype.clearRowSelection = function() {
      if (this.selectionModule) {
        this.selectionModule.clearRowSelection();
      }
    };
    Grid2.prototype.selectCells = function(rowCellIndexes) {
      if (this.selectionModule) {
        this.selectionModule.selectCells(rowCellIndexes);
      }
    };
    Grid2.prototype.selectRowsByRange = function(startIndex, endIndex) {
      if (this.selectionModule) {
        this.selectionModule.selectRowsByRange(startIndex, endIndex);
      }
    };
    Grid2.prototype.isContextMenuOpen = function() {
      return this.contextMenuModule && this.contextMenuModule.isOpen;
    };
    Grid2.prototype.ensureModuleInjected = function(module) {
      return this.getInjectedModules().indexOf(module) >= 0;
    };
    Grid2.prototype.destroyTemplate = function(propertyNames, index) {
      this.clearTemplate(propertyNames, index);
    };
    Grid2.prototype.log = function(type, args) {
      var injectedModules = this.getInjectedModules();
      var logger = injectedModules.find(function(item) {
        return item.name === "Logger";
      });
      if (!logger) {
        Grid_1.Inject(Logger);
        this.enableLogger = true;
        this.injectModules();
      }
      this.loggerModule ? this.loggerModule.log(type, args) : /* @__PURE__ */ function() {
        return 0;
      }();
    };
    Grid2.prototype.applyBiggerTheme = function(element) {
      if (this.element.classList.contains("e-bigger")) {
        element.classList.add("e-bigger");
      }
    };
    Grid2.prototype.getPreviousRowData = function() {
      var previousRowData = this.getRowsObject()[this.getRows().length - 1].data;
      return previousRowData;
    };
    Grid2.prototype.hideScroll = function() {
      var content2 = this.getContent().querySelector("." + content);
      if (content2.scrollHeight <= content2.clientHeight) {
        this.scrollModule.removePadding();
        content2.style.overflowY = "auto";
      }
    };
    Grid2.prototype.getRowIndexByPrimaryKey = function(value) {
      var pkName = this.getPrimaryKeyFieldNames()[0];
      value = typeof value === "object" ? value["" + pkName] : value;
      var rows = this.getRowsObject();
      for (var i = 0; i < rows.length; i++) {
        if (rows[parseInt(i.toString(), 10)].isDetailRow || rows[parseInt(i.toString(), 10)].isCaptionRow) {
          continue;
        }
        var pKvalue = rows[parseInt(i.toString(), 10)].data["" + pkName];
        if (pkName.split(".").length > 1) {
          pKvalue = performComplexDataOperation(pkName, rows[parseInt(i.toString(), 10)].data);
        }
        if (pKvalue === value) {
          return rows[parseInt(i.toString(), 10)].index;
        }
      }
      return -1;
    };
    Grid2.prototype.grabColumnByFieldFromAllCols = function(field, isForeignKey) {
      var column;
      this.columnModel = [];
      this.updateColumnModel(this.columns);
      var gCols = this.columnModel;
      for (var i = 0; i < gCols.length; i++) {
        if (!isForeignKey && field === gCols[parseInt(i.toString(), 10)].field || isForeignKey && gCols[parseInt(i.toString(), 10)].isForeignColumn() && field === gCols[parseInt(i.toString(), 10)].foreignKeyValue) {
          column = gCols[parseInt(i.toString(), 10)];
          break;
        }
      }
      return column;
    };
    Grid2.prototype.grabColumnByUidFromAllCols = function(uid2) {
      var column;
      this.columnModel = [];
      this.updateColumnModel(this.columns);
      var gCols = this.columnModel;
      for (var i = 0; i < gCols.length; i++) {
        if (uid2 === gCols[parseInt(i.toString(), 10)].uid) {
          column = gCols[parseInt(i.toString(), 10)];
        }
      }
      return column;
    };
    Grid2.prototype.getFilteredRecords = function() {
      if (this.allowFiltering && this.filterSettings.columns.length || this.searchSettings.key.length) {
        var query = this.renderModule.data.generateQuery(true);
        if (this.dataSource && this.renderModule.data.isRemote() && this.dataSource instanceof DataManager) {
          return this.renderModule.data.getData(this.dataSource, query);
        } else {
          if (this.dataSource instanceof DataManager) {
            return this.dataSource.executeLocal(query);
          } else {
            return new DataManager(this.dataSource, query).executeLocal(query);
          }
        }
      }
      return [];
    };
    Grid2.prototype.getUserAgent = function() {
      var userAgent = Browser.userAgent.toLowerCase();
      return /iphone|ipod|ipad|macintosh/.test(userAgent);
    };
    Grid2.prototype.tapEvent = function(e) {
      if (this.getUserAgent()) {
        if (!Global.timer) {
          Global.timer = setTimeout(function() {
            Global.timer = null;
          }, 300);
        } else {
          clearTimeout(Global.timer);
          Global.timer = null;
          this.dblClickHandler(e);
          this.notify(doubleTap, e);
        }
      }
    };
    Grid2.prototype.getRowUid = function(prefix) {
      return "" + prefix + this.rowUid++;
    };
    Grid2.prototype.getRowElementByUID = function(uid2) {
      var rowEle;
      var rows = [];
      var cntRows = [].slice.call(this.getContent().querySelector(tbody).children);
      if (this.frozenRows) {
        rows = [].slice.call(this.getHeaderContent().querySelector(tbody).children);
        rows = rows.concat(cntRows);
      } else {
        rows = cntRows;
      }
      for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {
        var row2 = rows_2[_i];
        if (row2.getAttribute("data-uid") === uid2) {
          rowEle = row2;
          break;
        }
      }
      return rowEle;
    };
    Grid2.prototype.getHiddenColumns = function() {
      var cols = [];
      for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible === false) {
          cols.push(col);
        }
      }
      return cols;
    };
    Grid2.prototype.calculatePageSizeByParentHeight = function(containerHeight) {
      if (this.allowPaging) {
        if (this.allowTextWrap && this.textWrapSettings.wrapMode === "Header" || !this.allowTextWrap) {
          var pagesize = 0;
          if (containerHeight.indexOf("%") !== -1) {
            containerHeight = parseInt(containerHeight, 10) / 100 * this.element.clientHeight;
          }
          var nonContentHeight = this.getNoncontentHeight() + this.getRowHeight();
          if (containerHeight > nonContentHeight) {
            var contentHeight = 0;
            contentHeight = containerHeight - this.getNoncontentHeight();
            pagesize = contentHeight / this.getRowHeight();
          }
          if (pagesize > 0) {
            return Math.floor(pagesize);
          }
        }
      }
      return 0;
    };
    Grid2.prototype.getNoncontentHeight = function() {
      var height = 0;
      if (!isNullOrUndefined(this.getHeaderContent().clientHeight)) {
        height += this.getHeaderContent().clientHeight;
      }
      if (this.toolbar && !isNullOrUndefined(this.element.querySelector(".e-toolbar").clientHeight)) {
        height += this.element.querySelector(".e-toolbar").clientHeight;
      }
      if (this.allowPaging && !isNullOrUndefined(this.element.querySelector(".e-gridpager").clientHeight)) {
        height += this.element.querySelector(".e-gridpager").clientHeight;
      }
      if (this.showColumnChooser && !isNullOrUndefined(this.element.querySelector(".e-columnheader").clientHeight)) {
        height += this.element.querySelector(".e-columnheader").clientHeight;
      }
      if (this.allowGrouping && this.groupSettings.showDropArea && !isNullOrUndefined(this.element.querySelector(".e-groupdroparea").clientHeight)) {
        height += this.element.querySelector(".e-groupdroparea").clientHeight;
      }
      if (this.aggregates.length > 0 && !isNullOrUndefined(this.element.querySelector(".e-summaryrow").clientHeight)) {
        for (var i = 0; i < this.element.getElementsByClassName("e-summaryrow").length; i++) {
          height += this.element.getElementsByClassName("e-summaryrow")[parseInt(i.toString(), 10)].clientHeight;
        }
      }
      return height;
    };
    Grid2.prototype.getSummaryValues = function(summaryCol, summaryData) {
      return DataUtil.aggregates[summaryCol.type.toLowerCase()](summaryData, summaryCol.field);
    };
    Grid2.prototype.serverExcelExport = function(url) {
      this.isExcel = true;
      this.exportGrid(url);
    };
    Grid2.prototype.serverPdfExport = function(url) {
      this.isExcel = false;
      this.exportGrid(url);
    };
    Grid2.prototype.serverCsvExport = function(url) {
      this.isExcel = true;
      this.exportGrid(url);
    };
    Grid2.prototype.exportGrid = function(url) {
      var grid = this;
      var query = grid.getDataModule().generateQuery(true);
      var state = new UrlAdaptor().processQuery(new DataManager({
        url: ""
      }), query);
      var queries = JSON.parse(state.data);
      var gridModel = JSON.parse(this.addOnPersist(["allowGrouping", "allowPaging", "pageSettings", "sortSettings", "allowPdfExport", "allowExcelExport", "aggregates", "filterSettings", "groupSettings", "columns", "locale", "searchSettings"]));
      var include = ["field", "headerText", "type", "format", "visible", "foreignKeyValue", "foreignKeyField", "template", "index", "width", "textAlign", "headerTextAlign", "columns"];
      gridModel.filterSettings.columns = queries.where;
      gridModel.searchSettings.fields = queries.search && queries.search[0]["fields"] || [];
      gridModel.sortSettings.columns = queries.sorted;
      gridModel.columns = this.setHeaderText(gridModel.columns, include);
      var form = this.createElement("form", {
        id: "ExportForm",
        styles: "display:none;"
      });
      var gridInput = this.createElement("input", {
        id: "gridInput",
        attrs: {
          name: "gridModel"
        }
      });
      gridInput.value = JSON.stringify(gridModel);
      form.method = "POST";
      form.action = url;
      form.appendChild(gridInput);
      document.body.appendChild(form);
      form.submit();
      form.remove();
    };
    Grid2.prototype.setHeaderText = function(columns, include) {
      for (var i = 0; i < columns.length; i++) {
        var column = this.getColumnByUid(columns[parseInt(i.toString(), 10)].uid);
        columns[parseInt(i.toString(), 10)].headerText = column.headerText;
        if (!isNullOrUndefined(column.template)) {
          columns[parseInt(i.toString(), 10)].template = "true";
        }
        if (columns[parseInt(i.toString(), 10)].format) {
          columns[parseInt(i.toString(), 10)].format = getNumberFormat(this.getFormat(columns[parseInt(i.toString(), 10)].format), columns[parseInt(i.toString(), 10)].type, this.isExcel, defaultCurrencyCode);
        }
        if (columns[parseInt(i.toString(), 10)].columns) {
          this.setHeaderText(columns[parseInt(i.toString(), 10)].columns, include);
        }
        var keys = Object.keys(columns[parseInt(i.toString(), 10)]);
        for (var j = 0; j < keys.length; j++) {
          if (include.indexOf(keys[parseInt(j.toString(), 10)]) < 0) {
            delete columns[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];
          }
        }
      }
      return columns;
    };
    Grid2.prototype.getFormat = function(format) {
      return typeof format === "object" ? !isNullOrUndefined(format.format) ? format.format : format.skeleton : format;
    };
    Grid2.prototype.isCollapseStateEnabled = function() {
      var isExpanded = "isExpanded";
      return this["" + isExpanded] === false;
    };
    Grid2.prototype.updateRowValue = function(key, rowData) {
      var args = {
        requestType: "save",
        data: rowData
      };
      this.showSpinner();
      this.notify(updateData, args);
      this.refresh();
    };
    Grid2.prototype.setForeignKeyData = function() {
      this.dataBind();
      var colpending = this.getDataModule().getForeignKeyDataState();
      if (colpending.isPending) {
        this.getDataModule().setForeignKeyDataState({});
        colpending.resolver();
      } else {
        this.getDataModule().setForeignKeyDataState({
          isDataChanged: false
        });
        if (this.contentModule || this.headerModule) {
          this.renderModule.render();
        }
      }
    };
    Grid2.prototype.resetFilterDlgPosition = function(field) {
      var header = this.getColumnHeaderByField(field);
      if (header) {
        var target = header.querySelector(".e-filtermenudiv");
        var filterDlg = this.element.querySelector(".e-filter-popup");
        if (target && filterDlg) {
          var gClient = this.element.getBoundingClientRect();
          var fClient = target.getBoundingClientRect();
          if (filterDlg) {
            if (filterDlg.offsetWidth + fClient.right > gClient.right) {
              filterDlg.style.left = (fClient.right - filterDlg.offsetWidth - gClient.left).toString() + "px";
            } else {
              filterDlg.style.left = (fClient.right - gClient.left).toString() + "px";
            }
          }
        }
      }
    };
    Grid2.prototype.renderTemplates = function(callBack) {
      var isReactChild = this.parentDetails && this.parentDetails.parentInstObj && this.parentDetails.parentInstObj.isReact;
      if (isReactChild && this["portals"]) {
        this.parentDetails.parentInstObj["portals"] = this.parentDetails.parentInstObj["portals"].concat(this["portals"]);
        this.parentDetails.parentInstObj.renderTemplates(callBack);
        this["portals"] = void 0;
      } else {
        var portals = "portals";
        this.notify("reactTemplateRender", this["" + portals]);
        this.renderReactTemplates(callBack);
      }
    };
    Grid2.prototype.batchUpdate = function(changes) {
      this.processRowChanges(changes);
    };
    Grid2.prototype.batchAsyncUpdate = function(changes) {
      this.processBulkRowChanges(changes);
    };
    Grid2.prototype.processBulkRowChanges = function(changes) {
      var _this_1 = this;
      if (!this.dataToBeUpdated) {
        this.dataToBeUpdated = Object.assign({
          addedRecords: [],
          changedRecords: [],
          deletedRecords: []
        }, changes);
        setTimeout(function() {
          _this_1.processRowChanges(_this_1.dataToBeUpdated);
          _this_1.dataToBeUpdated = null;
        }, this.asyncTimeOut);
      } else {
        var loopstring = [addedRecords, changedRecords, deletedRecords];
        var keyField = this.getPrimaryKeyFieldNames()[0];
        for (var i = 0; i < loopstring.length; i++) {
          if (changes[loopstring[parseInt(i.toString(), 10)]]) {
            compareChanges(this, changes, loopstring[parseInt(i.toString(), 10)], keyField);
          }
        }
      }
    };
    Grid2.prototype.processRowChanges = function(changes) {
      var _this_1 = this;
      var keyField = this.getPrimaryKeyFieldNames()[0];
      changes = Object.assign({
        addedRecords: [],
        changedRecords: [],
        deletedRecords: []
      }, changes);
      var promise = this.getDataModule().saveChanges(changes, keyField, {}, this.getDataModule().generateQuery().requiresCount());
      if (this.getDataModule().isRemote()) {
        promise.then(function() {
          _this_1.setNewData();
        });
      } else {
        this.setNewData();
      }
    };
    Grid2.prototype.setNewData = function() {
      var _this_1 = this;
      var oldValues = JSON.parse(JSON.stringify(this.getCurrentViewRecords()));
      var getData = this.getDataModule().getData({}, this.getDataModule().generateQuery().requiresCount());
      getData.then(function(e) {
        _this_1.bulkRefresh(e.result, oldValues, e.count);
      });
    };
    Grid2.prototype.deleteRowElement = function(row2) {
      var tr = this.getRowElementByUID(row2.uid);
      remove(tr);
    };
    Grid2.prototype.bulkRefresh = function(result, oldValues, count2) {
      var _this_1 = this;
      var rowObj = this.getRowsObject();
      var keyField = this.getPrimaryKeyFieldNames()[0];
      var _loop_5 = function(i2) {
        if (!result.filter(function(e) {
          return e["" + keyField] === rowObj[parseInt(i2.toString(), 10)].data["" + keyField];
        }).length) {
          this_5.deleteRowElement(rowObj[parseInt(i2.toString(), 10)]);
          rowObj.splice(i2, 1);
          i2--;
        }
        out_i_1 = i2;
      };
      var this_5 = this, out_i_1;
      for (var i = 0; i < rowObj.length; i++) {
        _loop_5(i);
        i = out_i_1;
      }
      var _loop_6 = function(i2) {
        var isRowExist;
        oldValues.filter(function(e) {
          if (e["" + keyField] === result[parseInt(i2.toString(), 10)]["" + keyField]) {
            if (e !== result[parseInt(i2.toString(), 10)]) {
              _this_1.setRowData(result[parseInt(i2.toString(), 10)]["" + keyField], result[parseInt(i2.toString(), 10)]);
            }
            isRowExist = true;
          }
        });
        if (!isRowExist) {
          this_6.renderRowElement(result[parseInt(i2.toString(), 10)], i2);
        }
      };
      var this_6 = this;
      for (var i = 0; i < result.length; i++) {
        _loop_6(i);
      }
      this.currentViewData = result;
      var rows = [].slice.call(this.getContentTable().getElementsByClassName(row));
      resetRowIndex(this, this.getRowsObject(), rows);
      setRowElements(this);
      if (this.allowPaging) {
        this.notify(inBoundModelChanged, {
          module: "pager",
          properties: {
            totalRecordsCount: count2
          }
        });
      }
    };
    Grid2.prototype.renderRowElement = function(data, index) {
      var row2 = new RowRenderer(this.serviceLocator, null, this);
      var model = new RowModelGenerator(this);
      var modelData = model.generateRows([data]);
      var tr = row2.render(modelData[0], this.getColumns());
      this.addRowObject(modelData[0], index);
      var tbody2 = this.getContentTable().querySelector(tbody);
      if (tbody2.querySelector(".e-emptyrow")) {
        var emptyRow = tbody2.querySelector(".e-emptyrow");
        emptyRow.parentNode.removeChild(emptyRow);
        if (this.frozenRows && this.element.querySelector(".e-frozenrow-empty")) {
          this.element.querySelector(".e-frozenrow-empty").classList.remove("e-frozenrow-empty");
        }
      }
      if (this.frozenRows && index < this.frozenRows) {
        tbody2 = this.getHeaderContent().querySelector(tbody);
      } else {
        tbody2 = this.getContent().querySelector(tbody);
      }
      tbody2 = this.getContent().querySelector(tbody);
      tbody2.appendChild(tr);
    };
    Grid2.prototype.addRowObject = function(row2, index) {
      this.getRowsObject().splice(index, 1, row2);
    };
    Grid2.prototype.updateVisibleExpandCollapseRows = function() {
      var rows = this.getRowsObject();
      for (var i = 0, len = rows.length; i < len; i++) {
        if ((rows[parseInt(i.toString(), 10)].isDataRow || rows[parseInt(i.toString(), 10)].isAggregateRow) && this.getRowElementByUID(rows[parseInt(i.toString(), 10)].uid) && this.getRowElementByUID(rows[parseInt(i.toString(), 10)].uid).style.display === "none") {
          rows[parseInt(i.toString(), 10)].visible = false;
        } else {
          rows[parseInt(i.toString(), 10)].visible = true;
        }
      }
    };
    Grid2.prototype.sanitize = function(value) {
      if (this.enableHtmlSanitizer) {
        return SanitizeHtmlHelper.sanitize(value);
      }
      return value;
    };
    Grid2.prototype.getHeight = function(height) {
      if (!Number.isInteger(height) && height.indexOf("%") !== -1) {
        height = parseInt(height, 10) / 100 * this.element.clientHeight;
      } else if (!Number.isInteger(height) && this.height !== "auto") {
        height = parseInt(height, 10);
      } else {
        height = this.height;
      }
      return height;
    };
    Grid2.prototype.getFrozenRightContent = function() {
      return this.contentModule.getPanel();
    };
    Grid2.prototype.getFrozenRightHeader = function() {
      return this.headerModule.getPanel();
    };
    Grid2.prototype.getMovableHeaderTbody = function() {
      return this.getHeaderContent().querySelector(tbody);
    };
    Grid2.prototype.getMovableContentTbody = function() {
      return this.getContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenHeaderTbody = function() {
      return this.getHeaderContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenLeftContentTbody = function() {
      return this.getContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenRightHeaderTbody = function() {
      return this.getHeaderContent().querySelector(tbody);
    };
    Grid2.prototype.getFrozenRightContentTbody = function() {
      return this.getContent().querySelector(tbody);
    };
    Grid2.prototype.showResponsiveCustomFilter = function(isCustom) {
      if (this.filterModule) {
        this.filterModule.showCustomFilter(isCustom || this.rowRenderingMode === "Vertical");
      }
    };
    Grid2.prototype.showResponsiveCustomSort = function(isCustom) {
      if (this.sortModule) {
        this.sortModule.showCustomSort(isCustom || this.rowRenderingMode === "Vertical");
      }
    };
    Grid2.prototype.showResponsiveCustomColumnChooser = function(isCustom) {
      if (this.columnChooserModule) {
        this.columnChooserModule.showCustomColumnChooser(isCustom || this.rowRenderingMode === "Vertical");
      }
    };
    Grid2.prototype.showAdaptiveFilterDialog = function() {
      if (this.enableAdaptiveUI) {
        this.showResponsiveCustomFilter(true);
      }
    };
    Grid2.prototype.showAdaptiveSortDialog = function() {
      if (this.enableAdaptiveUI) {
        this.showResponsiveCustomSort(true);
      }
    };
    Grid2.prototype.getCurrentVisibleColumns = function(isColVirtualization) {
      var cols = [];
      var gridCols = isColVirtualization ? this.getColumns() : this.columnModel;
      for (var _i = 0, gridCols_1 = gridCols; _i < gridCols_1.length; _i++) {
        var col = gridCols_1[_i];
        if (col.visible) {
          cols.push(col);
        }
      }
      return cols;
    };
    Grid2.prototype.enableInfiniteAggrgate = function() {
      if (this.enableInfiniteScrolling && this.groupSettings.columns.length && !this.groupSettings.disablePageWiseAggregates && !this.groupSettings.enableLazyLoading) {
        this.setProperties({
          groupSettings: {
            disablePageWiseAggregates: true
          }
        }, true);
      }
    };
    var Grid_1;
    __decorate6([Property([])], Grid2.prototype, "currentViewData", void 0);
    __decorate6([Property()], Grid2.prototype, "parentDetails", void 0);
    __decorate6([Property()], Grid2.prototype, "showHider", void 0);
    __decorate6([Property([])], Grid2.prototype, "columns", void 0);
    __decorate6([Property(true)], Grid2.prototype, "enableAltRow", void 0);
    __decorate6([Property(true)], Grid2.prototype, "enableHover", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableAutoFill", void 0);
    __decorate6([Property(true)], Grid2.prototype, "allowKeyboard", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableStickyHeader", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableHtmlSanitizer", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowTextWrap", void 0);
    __decorate6([Complex({}, TextWrapSettings)], Grid2.prototype, "textWrapSettings", void 0);
    __decorate6([Complex({}, ResizeSettings)], Grid2.prototype, "resizeSettings", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowPaging", void 0);
    __decorate6([Complex({}, PageSettings)], Grid2.prototype, "pageSettings", void 0);
    __decorate6([Complex({}, LoadingIndicator)], Grid2.prototype, "loadingIndicator", void 0);
    __decorate6([Property(true)], Grid2.prototype, "enableVirtualMaskRow", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableVirtualization", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableColumnVirtualization", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableInfiniteScrolling", void 0);
    __decorate6([Complex({}, SearchSettings)], Grid2.prototype, "searchSettings", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowSorting", void 0);
    __decorate6([Property("Ellipsis")], Grid2.prototype, "clipMode", void 0);
    __decorate6([Property(true)], Grid2.prototype, "allowMultiSorting", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowExcelExport", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowPdfExport", void 0);
    __decorate6([Complex({}, SortSettings)], Grid2.prototype, "sortSettings", void 0);
    __decorate6([Complex({}, InfiniteScrollSettings)], Grid2.prototype, "infiniteScrollSettings", void 0);
    __decorate6([Property(true)], Grid2.prototype, "allowSelection", void 0);
    __decorate6([Property(-1)], Grid2.prototype, "selectedRowIndex", void 0);
    __decorate6([Complex({}, SelectionSettings)], Grid2.prototype, "selectionSettings", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowFiltering", void 0);
    __decorate6([Property("Horizontal")], Grid2.prototype, "rowRenderingMode", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableAdaptiveUI", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowReordering", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowResizing", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowRowDragAndDrop", void 0);
    __decorate6([Complex({}, RowDropSettings)], Grid2.prototype, "rowDropSettings", void 0);
    __decorate6([Complex({}, FilterSettings)], Grid2.prototype, "filterSettings", void 0);
    __decorate6([Property(false)], Grid2.prototype, "allowGrouping", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableImmutableMode", void 0);
    __decorate6([Property(false)], Grid2.prototype, "showColumnMenu", void 0);
    __decorate6([Property(false)], Grid2.prototype, "autoFit", void 0);
    __decorate6([Complex({}, GroupSettings)], Grid2.prototype, "groupSettings", void 0);
    __decorate6([Complex({}, EditSettings)], Grid2.prototype, "editSettings", void 0);
    __decorate6([Collection([], AggregateRow)], Grid2.prototype, "aggregates", void 0);
    __decorate6([Property(false)], Grid2.prototype, "showColumnChooser", void 0);
    __decorate6([Complex({}, ColumnChooserSettings)], Grid2.prototype, "columnChooserSettings", void 0);
    __decorate6([Property(false)], Grid2.prototype, "enableHeaderFocus", void 0);
    __decorate6([Property("auto")], Grid2.prototype, "height", void 0);
    __decorate6([Property("auto")], Grid2.prototype, "width", void 0);
    __decorate6([Property("Default")], Grid2.prototype, "gridLines", void 0);
    __decorate6([Property()], Grid2.prototype, "rowTemplate", void 0);
    __decorate6([Property()], Grid2.prototype, "emptyRecordTemplate", void 0);
    __decorate6([Property()], Grid2.prototype, "detailTemplate", void 0);
    __decorate6([Property()], Grid2.prototype, "childGrid", void 0);
    __decorate6([Property()], Grid2.prototype, "queryString", void 0);
    __decorate6([Property("AllPages")], Grid2.prototype, "printMode", void 0);
    __decorate6([Property("Expanded")], Grid2.prototype, "hierarchyPrintMode", void 0);
    __decorate6([Property([])], Grid2.prototype, "dataSource", void 0);
    __decorate6([Property(null)], Grid2.prototype, "rowHeight", void 0);
    __decorate6([Property()], Grid2.prototype, "query", void 0);
    __decorate6([Property("USD")], Grid2.prototype, "currencyCode", void 0);
    __decorate6([Property()], Grid2.prototype, "exportGrids", void 0);
    __decorate6([Property()], Grid2.prototype, "toolbar", void 0);
    __decorate6([Property()], Grid2.prototype, "contextMenuItems", void 0);
    __decorate6([Property()], Grid2.prototype, "columnMenuItems", void 0);
    __decorate6([Property()], Grid2.prototype, "toolbarTemplate", void 0);
    __decorate6([Property()], Grid2.prototype, "pagerTemplate", void 0);
    __decorate6([Property(0)], Grid2.prototype, "frozenRows", void 0);
    __decorate6([Property(0)], Grid2.prototype, "frozenColumns", void 0);
    __decorate6([Property("")], Grid2.prototype, "cssClass", void 0);
    __decorate6([Property("All")], Grid2.prototype, "columnQueryMode", void 0);
    __decorate6([Property({})], Grid2.prototype, "currentAction", void 0);
    __decorate6([Property("")], Grid2.prototype, "ej2StatePersistenceVersion", void 0);
    __decorate6([Event2()], Grid2.prototype, "created", void 0);
    __decorate6([Event2()], Grid2.prototype, "destroyed", void 0);
    __decorate6([Event2()], Grid2.prototype, "load", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDataBound", void 0);
    __decorate6([Event2()], Grid2.prototype, "queryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "headerCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "actionBegin", void 0);
    __decorate6([Event2()], Grid2.prototype, "actionComplete", void 0);
    __decorate6([Event2()], Grid2.prototype, "actionFailure", void 0);
    __decorate6([Event2()], Grid2.prototype, "dataBound", void 0);
    __decorate6([Event2()], Grid2.prototype, "recordDoubleClick", void 0);
    __decorate6([Event2()], Grid2.prototype, "recordClick", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowSelecting", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowSelected", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDeselecting", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDeselected", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellSelecting", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellSelected", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellDeselecting", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellDeselected", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnSelecting", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnSelected", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnDeselecting", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnDeselected", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnDragStart", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnDrag", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnDrop", void 0);
    __decorate6([Event2()], Grid2.prototype, "printComplete", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforePrint", void 0);
    __decorate6([Event2()], Grid2.prototype, "pdfQueryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "pdfHeaderQueryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "pdfAggregateQueryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "excelAggregateQueryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "exportDetailDataBound", void 0);
    __decorate6([Event2()], Grid2.prototype, "exportDetailTemplate", void 0);
    __decorate6([Event2()], Grid2.prototype, "excelQueryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "excelHeaderQueryCellInfo", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeExcelExport", void 0);
    __decorate6([Event2()], Grid2.prototype, "excelExportComplete", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforePdfExport", void 0);
    __decorate6([Event2()], Grid2.prototype, "pdfExportComplete", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDragStartHelper", void 0);
    __decorate6([Event2()], Grid2.prototype, "detailDataBound", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDragStart", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDrag", void 0);
    __decorate6([Event2()], Grid2.prototype, "rowDrop", void 0);
    __decorate6([Event2()], Grid2.prototype, "toolbarClick", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeOpenColumnChooser", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeOpenAdaptiveDialog", void 0);
    __decorate6([Event2()], Grid2.prototype, "batchAdd", void 0);
    __decorate6([Event2()], Grid2.prototype, "batchDelete", void 0);
    __decorate6([Event2()], Grid2.prototype, "batchCancel", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeBatchAdd", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeBatchDelete", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeBatchSave", void 0);
    __decorate6([Event2()], Grid2.prototype, "beginEdit", void 0);
    __decorate6([Event2()], Grid2.prototype, "commandClick", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellEdit", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellSave", void 0);
    __decorate6([Event2()], Grid2.prototype, "cellSaved", void 0);
    __decorate6([Event2()], Grid2.prototype, "resizeStart", void 0);
    __decorate6([Event2()], Grid2.prototype, "resizing", void 0);
    __decorate6([Event2()], Grid2.prototype, "resizeStop", void 0);
    __decorate6([Event2()], Grid2.prototype, "keyPressed", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeDataBound", void 0);
    __decorate6([Event2()], Grid2.prototype, "contextMenuOpen", void 0);
    __decorate6([Event2()], Grid2.prototype, "contextMenuClick", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnMenuOpen", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnMenuClick", void 0);
    __decorate6([Event2()], Grid2.prototype, "checkBoxChange", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeCopy", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforePaste", void 0);
    __decorate6([Event2()], Grid2.prototype, "beforeAutoFill", void 0);
    __decorate6([Event2()], Grid2.prototype, "columnDataStateChange", void 0);
    __decorate6([Event2()], Grid2.prototype, "dataStateChange", void 0);
    __decorate6([Event2()], Grid2.prototype, "dataSourceChanged", void 0);
    __decorate6([Event2()], Grid2.prototype, "exportGroupCaption", void 0);
    __decorate6([Event2()], Grid2.prototype, "lazyLoadGroupExpand", void 0);
    __decorate6([Event2()], Grid2.prototype, "lazyLoadGroupCollapse", void 0);
    Grid2 = Grid_1 = __decorate6([NotifyPropertyChanges], Grid2);
    return Grid2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/print.js
function getCloneProperties() {
  return ["aggregates", "allowGrouping", "allowFiltering", "allowMultiSorting", "allowReordering", "allowSorting", "allowTextWrap", "childGrid", "columns", "currentViewData", "dataSource", "detailTemplate", "enableAltRow", "enableColumnVirtualization", "filterSettings", "gridLines", "groupSettings", "height", "locale", "pageSettings", "printMode", "query", "queryString", "enableRtl", "rowHeight", "rowTemplate", "sortSettings", "textWrapSettings", "allowPaging", "hierarchyPrintMode", "searchSettings", "queryCellInfo", "beforeDataBound"];
}
var Print = (
  /** @class */
  function() {
    function Print2(parent, scrollModule) {
      this.isAsyncPrint = false;
      this.defered = new Deferred();
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(contentReady, this.isContentReady(), this);
      this.actionBeginFunction = this.actionBegin.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.on(onEmpty, this.onEmpty.bind(this));
      this.parent.on(hierarchyPrint, this.hierarchyPrint, this);
      this.scrollModule = scrollModule;
    }
    Print2.prototype.isContentReady = function() {
      var _this = this;
      if (this.isPrintGrid() && (this.parent.hierarchyPrintMode === "None" || !this.parent.childGrid)) {
        return this.contentReady;
      }
      return function() {
        _this.defered.promise.then(function() {
          _this.contentReady();
        });
        if (_this.isPrintGrid()) {
          _this.hierarchyPrint();
        }
      };
    };
    Print2.prototype.hierarchyPrint = function() {
      this.removeColGroup(this.parent);
      var printGridObj = window.printGridObj;
      if (printGridObj && !printGridObj.element.querySelector("[aria-busy=true")) {
        printGridObj.printModule.defered.resolve();
      }
    };
    Print2.prototype.print = function() {
      this.renderPrintGrid();
    };
    Print2.prototype.onEmpty = function() {
      if (this.isPrintGrid()) {
        this.contentReady();
      }
    };
    Print2.prototype.actionBegin = function() {
      if (this.isPrintGrid()) {
        this.isAsyncPrint = true;
      }
    };
    Print2.prototype.renderPrintGrid = function() {
      var gObj = this.parent;
      var element = createElement("div", {
        id: this.parent.element.id + "_print",
        className: gObj.element.className + " e-print-grid"
      });
      element.classList.remove("e-gridhover");
      document.body.appendChild(element);
      var printGrid = new Grid(getPrintGridModel(gObj, gObj.hierarchyPrintMode));
      for (var i = 0; i < printGrid.columns.length; i++) {
        printGrid.columns[parseInt(i.toString(), 10)] = extend({}, printGrid.columns[parseInt(i.toString(), 10)]);
        if (gObj.isFrozenGrid() && !gObj.getFrozenColumns()) {
          printGrid.columns[parseInt(i.toString(), 10)].freeze = void 0;
        }
      }
      if (this.parent.isAngular) {
        printGrid.viewContainerRef = this.parent.viewContainerRef;
      }
      printGrid.load = function() {
      };
      printGrid.query = gObj.getQuery().clone();
      window.printGridObj = printGrid;
      printGrid.isPrinting = true;
      var modules = printGrid.getInjectedModules();
      var injectedModues = gObj.getInjectedModules();
      if (!modules || modules.length !== injectedModues.length) {
        printGrid.setInjectedModules(injectedModues);
      }
      gObj.notify(printGridInit, {
        element,
        printgrid: printGrid
      });
      this.parent.log("exporting_begin", this.getModuleName());
      printGrid.registeredTemplate = this.parent.registeredTemplate;
      printGrid.isVue = this.parent.isVue;
      printGrid.appendTo(element);
      if (!gObj.isVue3) {
        printGrid.trigger = gObj.trigger;
      }
    };
    Print2.prototype.contentReady = function() {
      if (this.isPrintGrid()) {
        var gObj = this.parent;
        if (this.isAsyncPrint) {
          this.printGrid();
          return;
        }
        var args = {
          requestType: "print",
          element: gObj.element,
          selectedRows: gObj.getContentTable().querySelectorAll('tr[aria-selected="true"]'),
          cancel: false,
          hierarchyPrintMode: gObj.hierarchyPrintMode
        };
        if (!this.isAsyncPrint) {
          gObj.trigger(beforePrint, args);
        }
        if (args.cancel) {
          detach(gObj.element);
          return;
        }
        if (!this.isAsyncPrint) {
          this.printGrid();
        }
      }
    };
    Print2.prototype.printGrid = function() {
      var gObj = this.parent;
      if (gObj.height !== "auto") {
        var cssProps = this.scrollModule.getCssProperties();
        var contentDiv = gObj.element.querySelector("." + content);
        var headerDiv = gObj.element.querySelector("." + gridHeader);
        contentDiv.style.height = "auto";
        contentDiv.style.overflowY = "auto";
        headerDiv.style[cssProps.padding] = "";
        headerDiv.firstElementChild.style[cssProps.border] = "";
      }
      if (gObj.allowGrouping) {
        if (!gObj.groupSettings.columns.length) {
          gObj.element.querySelector(".e-groupdroparea").style.display = "none";
        } else {
          this.removeColGroup(gObj);
        }
      }
      for (var _i = 0, _a = [].slice.call(gObj.element.getElementsByClassName(content)); _i < _a.length; _i++) {
        var element = _a[_i];
        element.style.overflowX = "hidden";
      }
      var waitingPop = [].slice.call(gObj.element.getElementsByClassName("e-spin-show"));
      for (var _b = 0, _c = [].slice.call(waitingPop); _b < _c.length; _b++) {
        var element = _c[_b];
        classList(element, ["e-spin-hide"], ["e-spin-show"]);
      }
      this.printGridElement(gObj);
      gObj.isPrinting = false;
      delete window.printGridObj;
      var args = {
        element: gObj.element
      };
      gObj.trigger(printComplete, args);
      gObj.destroy();
      this.parent.log("exporting_complete", this.getModuleName());
    };
    Print2.prototype.printGridElement = function(gObj) {
      classList(gObj.element, ["e-print-grid-layout"], ["e-print-grid"]);
      if (gObj.isPrinting) {
        detach(gObj.element);
      }
      this.printWind = window.open("", "print", "height=" + window.outerHeight + ",width=" + window.outerWidth + ",tabbar=no");
      this.printWind.moveTo(0, 0);
      this.printWind.resizeTo(screen.availWidth, screen.availHeight);
      this.printWind = print(gObj.element, this.printWind);
    };
    Print2.prototype.removeColGroup = function(gObj) {
      var depth = gObj.groupSettings.columns.length;
      var element = gObj.element;
      var id = "#" + gObj.element.id;
      if (!depth) {
        return;
      }
      var groupCaption = selectAll(".e-groupcaption", element);
      var colSpan = groupCaption[depth - 1].getAttribute("colspan");
      for (var i = 0; i < groupCaption.length; i++) {
        groupCaption[parseInt(i.toString(), 10)].setAttribute("colspan", colSpan);
      }
      var colGroups = selectAll("colgroup" + id + "colgroup", element);
      var contentColGroups = selectAll(".e-content colgroup", element);
      var footerColGroups = selectAll(".e-summarycontent colgroup", element);
      this.hideColGroup(colGroups, depth);
      this.hideColGroup(contentColGroups, depth);
      this.hideColGroup(footerColGroups, depth);
    };
    Print2.prototype.hideColGroup = function(colGroups, depth) {
      for (var i = 0; i < colGroups.length; i++) {
        for (var j = 0; j < depth; j++) {
          colGroups[parseInt(i.toString(), 10)].children[parseInt(j.toString(), 10)].style.display = "none";
        }
      }
    };
    Print2.prototype.isPrintGrid = function() {
      return this.parent.element.id.indexOf("_print") > 0 && this.parent.isPrinting;
    };
    Print2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(contentReady, this.contentReady.bind(this));
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
      this.parent.off(onEmpty, this.onEmpty.bind(this));
      this.parent.off(hierarchyPrint, this.hierarchyPrint);
    };
    Print2.prototype.getModuleName = function() {
      return "print";
    };
    Print2.printGridProp = getCloneProperties().concat([beforePrint, printComplete, load]);
    return Print2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/base/util.js
function doesImplementInterface(target, checkFor) {
  return target.prototype && checkFor in target.prototype;
}
function valueAccessor(field, data, column) {
  return isNullOrUndefined(field) || field === "" ? "" : DataUtil.getObject(field, data);
}
function headerValueAccessor(field, column) {
  return isNullOrUndefined(field) || field === "" ? "" : DataUtil.getObject(field, column);
}
function getUpdateUsingRaf(updateFunction, callBack) {
  requestAnimationFrame(function() {
    try {
      callBack(null, updateFunction());
    } catch (e) {
      callBack(e);
    }
  });
}
function isExportColumns(exportProperties) {
  return !isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.columns) && exportProperties.columns.length > 0;
}
function updateColumnTypeForExportColumns(exportProperties, gObj) {
  var exportColumns = exportProperties.columns;
  var gridColumns = gObj.columns;
  for (var i = 0; i < exportColumns.length; i++) {
    if (gridColumns.length - 1 >= i) {
      if (gridColumns[parseInt(i.toString(), 10)].columns) {
        for (var j = 0; j < gridColumns[parseInt(i.toString(), 10)].columns.length; j++) {
          exportColumns[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type = gridColumns[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type;
        }
      } else {
        exportColumns[parseInt(i.toString(), 10)].type = gridColumns[parseInt(i.toString(), 10)].type;
      }
    }
  }
}
function updatecloneRow(grid) {
  var nRows = [];
  var actualRows = grid.vRows;
  for (var i = 0; i < actualRows.length; i++) {
    if (actualRows[parseInt(i.toString(), 10)].isDataRow) {
      nRows.push(actualRows[parseInt(i.toString(), 10)]);
    } else if (!actualRows[parseInt(i.toString(), 10)].isDataRow) {
      nRows.push(actualRows[parseInt(i.toString(), 10)]);
      if (!actualRows[parseInt(i.toString(), 10)].isExpand && actualRows[parseInt(i.toString(), 10)].isCaptionRow) {
        i += getCollapsedRowsCount(actualRows[parseInt(i.toString(), 10)], grid);
      }
    }
  }
  grid.vcRows = nRows;
}
var count = 0;
function getCollapsedRowsCount(val, grid) {
  count = 0;
  var gSummary = "gSummary";
  var total = "count";
  var gLen = grid.groupSettings.columns.length;
  var records = "records";
  var items = "items";
  var value = val["" + gSummary];
  var dataRowCnt = 0;
  var agrCnt = "aggregatesCount";
  if (value === val.data["" + total]) {
    if (grid.groupSettings.columns.length && !isNullOrUndefined(val["" + agrCnt]) && val["" + agrCnt]) {
      if (grid.groupSettings.columns.length !== 1) {
        count += val.indent !== 0 && value < 2 ? val["" + gSummary] * (gLen - val.indent + (gLen - val.indent) * val["" + agrCnt]) : val["" + gSummary] * (gLen - val.indent + (gLen - val.indent - 1) * val["" + agrCnt]) + val["" + agrCnt];
      } else if (grid.groupSettings.columns.length === 1) {
        count += val["" + gSummary] * (gLen - val.indent) + val["" + agrCnt];
      }
    } else if (grid.groupSettings.columns.length) {
      if (grid.groupSettings.columns.length !== 1) {
        count += val["" + gSummary] * (grid.groupSettings.columns.length - val.indent);
      } else {
        count += val["" + gSummary];
      }
    }
    return count;
  } else {
    for (var i = 0, len = val.data["" + items].length; i < len; i++) {
      var gLevel = val.data["" + items][parseInt(i.toString(), 10)];
      count += gLevel["" + items].length + (gLen !== grid.columns.length && !isNullOrUndefined(gLevel["" + items]["" + records]) ? gLevel["" + items]["" + records].length : 0);
      dataRowCnt += !isNullOrUndefined(gLevel["" + items]["" + records]) && !isNullOrUndefined(val["" + agrCnt]) ? gLevel["" + items]["" + records].length : gLevel["" + items].length;
      if (gLevel["" + items].GroupGuid && gLevel["" + items].childLevels !== 0) {
        recursive(gLevel);
      }
    }
    count += val.data["" + items].length;
    if (!isNullOrUndefined(val["" + agrCnt])) {
      if (val["" + agrCnt] && count && dataRowCnt !== 0) {
        count += (count - dataRowCnt) * val["" + agrCnt] + val["" + agrCnt];
      }
    }
  }
  return count;
}
function recursive(row2) {
  var items = "items";
  var rCount = "count";
  for (var j = 0, length_1 = row2["" + items].length; j < length_1; j++) {
    var nLevel = row2["" + items][parseInt(j.toString(), 10)];
    count += nLevel["" + rCount];
    if (nLevel["" + items].childLevels !== 0) {
      recursive(nLevel);
    }
  }
}
function iterateArrayOrObject(collection, predicate) {
  var result = [];
  for (var i = 0, len = collection.length; i < len; i++) {
    var pred = predicate(collection[parseInt(i.toString(), 10)], i);
    if (!isNullOrUndefined(pred)) {
      result.push(pred);
    }
  }
  return result;
}
function iterateExtend(array) {
  var obj = [];
  for (var i = 0; i < array.length; i++) {
    obj.push(extend({}, getActualProperties(array[parseInt(i.toString(), 10)]), {}, true));
  }
  return obj;
}
function templateCompiler(template) {
  if (template) {
    try {
      var validSelector = template[0] !== "<";
      if (typeof template === "function") {
        return compile(template);
      } else if (validSelector && document.querySelectorAll(template).length) {
        return compile(document.querySelector(template).innerHTML.trim());
      } else {
        return compile(template);
      }
    } catch (e) {
      return compile(template);
    }
  }
  return void 0;
}
function setStyleAndAttributes(node, customAttributes) {
  var copyAttr = {};
  var literals = ["style", "class"];
  extend(copyAttr, customAttributes, {});
  if ("style" in copyAttr) {
    setStyleAttribute(node, copyAttr[literals[0]]);
    delete copyAttr[literals[0]];
  }
  if ("class" in copyAttr) {
    addClass([node], copyAttr[literals[1]]);
    delete copyAttr[literals[1]];
  }
  attributes(node, copyAttr);
}
function extend2(copied, first, second, exclude) {
  var moved = extend(copied, first, second);
  var values = Object.keys(moved);
  for (var i = 0; i < values.length; i++) {
    if (exclude && exclude.indexOf(values[parseInt(i.toString(), 10)]) !== -1) {
      delete moved[values[parseInt(i.toString(), 10)]];
    }
  }
  return moved;
}
function setColumnIndex(columnModel, ind) {
  if (ind === void 0) {
    ind = 0;
  }
  for (var i = 0, len = !isNullOrUndefined(columnModel) ? columnModel.length : 0; i < len; i++) {
    if (columnModel[parseInt(i.toString(), 10)].columns) {
      columnModel[parseInt(i.toString(), 10)].index = isNullOrUndefined(columnModel[parseInt(i.toString(), 10)].index) ? ind : columnModel[parseInt(i.toString(), 10)].index;
      ind++;
      ind = setColumnIndex(columnModel[parseInt(i.toString(), 10)].columns, ind);
    } else {
      columnModel[parseInt(i.toString(), 10)].index = isNullOrUndefined(columnModel[parseInt(i.toString(), 10)].index) ? ind : columnModel[parseInt(i.toString(), 10)].index;
      ind++;
    }
  }
  return ind;
}
function prepareColumns(columns, autoWidth, gObj) {
  for (var c = 0, len = !isNullOrUndefined(columns) ? columns.length : 0; c < len; c++) {
    var column = void 0;
    if (typeof columns[parseInt(c.toString(), 10)] === "string") {
      column = new Column({
        field: columns[parseInt(c.toString(), 10)]
      }, gObj);
    } else if (!(columns[parseInt(c.toString(), 10)] instanceof Column) || columns[parseInt(c.toString(), 10)].columns) {
      if (!columns[parseInt(c.toString(), 10)].columns) {
        column = new Column(columns[parseInt(c.toString(), 10)], gObj);
      } else {
        columns[parseInt(c.toString(), 10)].columns = prepareColumns(columns[parseInt(c.toString(), 10)].columns, null, gObj);
        column = new Column(columns[parseInt(c.toString(), 10)], gObj);
      }
    } else {
      column = columns[parseInt(c.toString(), 10)];
    }
    if (column.type && column.type.toLowerCase() === "checkbox") {
      column.allowReordering = false;
    }
    column.headerText = isNullOrUndefined(column.headerText) ? column.foreignKeyValue || column.field || "" : column.headerText;
    column.foreignKeyField = column.foreignKeyField || column.field;
    column.valueAccessor = (typeof column.valueAccessor === "string" ? getValue(column.valueAccessor, window) : column.valueAccessor) || valueAccessor;
    column.width = autoWidth && isNullOrUndefined(column.width) ? 200 : column.width;
    if (isNullOrUndefined(column.visible)) {
      column.visible = true;
    }
    columns[parseInt(c.toString(), 10)] = column;
  }
  return columns;
}
function setCssInGridPopUp(popUp, e, className) {
  var popUpSpan = popUp.querySelector("span");
  var position = popUp.parentElement.getBoundingClientRect();
  var targetPosition = e.target.getBoundingClientRect();
  popUpSpan.className = className;
  popUp.style.display = "";
  var isBottomTail = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY) > popUp.offsetHeight + 10;
  popUp.style.top = targetPosition.top - position.top + (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + "px";
  popUp.style.left = getPopupLeftPosition(popUp, e, targetPosition, position.left) + "px";
  if (isBottomTail) {
    popUp.querySelector(".e-downtail").style.display = "";
    popUp.querySelector(".e-uptail").style.display = "none";
  } else {
    popUp.querySelector(".e-downtail").style.display = "none";
    popUp.querySelector(".e-uptail").style.display = "";
  }
}
function getPopupLeftPosition(popup, e, targetPosition, left) {
  var width = popup.offsetWidth / 2;
  var x = getPosition(e).x;
  if (x - targetPosition.left < width) {
    return targetPosition.left - left;
  } else if (targetPosition.right - x < width) {
    return targetPosition.right - left - width * 2;
  } else {
    return x - left - width;
  }
}
function getActualProperties(obj) {
  if (obj instanceof ChildProperty) {
    return getValue("properties", obj);
  } else {
    return obj;
  }
}
function parentsUntil(elem, selector, isID) {
  var parent = elem;
  while (parent) {
    if (isID ? parent.id === selector : parent.classList.contains(selector)) {
      break;
    }
    parent = parent.parentElement;
  }
  return parent;
}
function getElementIndex(element, elements) {
  var index = -1;
  for (var i = 0, len = elements.length; i < len; i++) {
    if (elements[parseInt(i.toString(), 10)].isEqualNode(element)) {
      index = i;
      break;
    }
  }
  return index;
}
function inArray(value, collection) {
  for (var i = 0, len = collection.length; i < len; i++) {
    if (collection[parseInt(i.toString(), 10)] === value) {
      return i;
    }
  }
  return -1;
}
function getActualPropFromColl(collection) {
  var coll = [];
  for (var i = 0, len = collection.length; i < len; i++) {
    if (collection[parseInt(i.toString(), 10)].hasOwnProperty("properties")) {
      coll.push(collection[parseInt(i.toString(), 10)].properties);
    } else {
      coll.push(collection[parseInt(i.toString(), 10)]);
    }
  }
  return coll;
}
function removeElement(target, selector) {
  var elements = [].slice.call(target.querySelectorAll(selector));
  for (var i = 0; i < elements.length; i++) {
    remove(elements[parseInt(i.toString(), 10)]);
  }
}
function getPosition(e) {
  var position = {};
  position.x = isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX : e.clientX;
  position.y = isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY;
  return position;
}
var uid = 0;
function getUid(prefix) {
  return prefix + uid++;
}
function appendChildren(elem, children) {
  for (var i = 0, len = children.length; i < len; i++) {
    if (len === children.length) {
      elem.appendChild(children[parseInt(i.toString(), 10)]);
    } else {
      elem.appendChild(children[0]);
    }
  }
  return elem;
}
function parents(elem, selector, isID) {
  var parent = elem;
  var parents2 = [];
  while (parent) {
    if (isID ? parent.id === selector : parent.classList.contains(selector)) {
      parents2.push(parent);
    }
    parent = parent.parentElement;
  }
  return parents2;
}
function calculateAggregate(type, data, column, context) {
  if (type === "Custom") {
    var temp = column.customAggregate;
    if (typeof temp === "string") {
      temp = getValue(temp, window);
    }
    return temp ? temp.call(context, data, column) : "";
  }
  return column.field in data || data instanceof Array ? DataUtil.aggregates[type.toLowerCase()](data, column.field) : null;
}
var scrollWidth = null;
function getScrollBarWidth() {
  if (scrollWidth !== null) {
    return scrollWidth;
  }
  var divNode = document.createElement("div");
  var value = 0;
  divNode.style.cssText = "width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;";
  document.body.appendChild(divNode);
  value = divNode.offsetWidth - divNode.clientWidth | 0;
  document.body.removeChild(divNode);
  return scrollWidth = value;
}
var rowHeight;
function getRowHeight(element) {
  if (rowHeight !== void 0) {
    return rowHeight;
  }
  var table2 = createElement("table", {
    className: table,
    styles: "visibility: hidden",
    attrs: {
      role: "grid"
    }
  });
  table2.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
  element.appendChild(table2);
  var rect = table2.querySelector("td").getBoundingClientRect();
  element.removeChild(table2);
  rowHeight = Math.ceil(rect.height);
  return rowHeight;
}
function getActualRowHeight(element) {
  var table2 = createElement("table", {
    className: table,
    styles: "visibility: hidden",
    attrs: {
      role: "grid"
    }
  });
  table2.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
  element.appendChild(table2);
  var rect = table2.querySelector("tr").getBoundingClientRect();
  element.removeChild(table2);
  return rect.height;
}
function isComplexField(field) {
  return field.split(".").length > 1;
}
function getComplexFieldID(field) {
  if (field === void 0) {
    field = "";
  }
  return field.replace(/\./g, "___");
}
function getParsedFieldID(field) {
  if (field === void 0) {
    field = "";
  }
  return field.replace(/[^a-zA-Z0-9_.]/g, "\\$&");
}
function setComplexFieldID(field) {
  if (field === void 0) {
    field = "";
  }
  return field.replace(/___/g, ".");
}
function isEditable(col, type, elem) {
  var row2 = parentsUntil(elem, row);
  var isOldRow = !row2 ? true : row2 && !row2.classList.contains("e-insertedrow");
  if (type === "beginEdit" && isOldRow) {
    if (col.isIdentity || col.isPrimaryKey || !col.allowEditing) {
      return false;
    }
    return true;
  } else if (type === "add" && col.isIdentity) {
    return false;
  } else {
    if (isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey) {
      return false;
    }
    return true;
  }
}
function isActionPrevent(inst) {
  var dlg = select("#" + inst.element.id + "EditConfirm", inst.element);
  return inst.editSettings.mode === "Batch" && (selectAll(".e-updatedtd", inst.element).length || selectAll(".e-gridform.e-formvalidator", inst.element).length) && inst.editSettings.showConfirmDialog && (dlg ? dlg.classList.contains("e-popup-close") : true);
}
function wrap(elem, action) {
  var clName = "e-wrap";
  elem = elem instanceof Array ? elem : [elem];
  for (var i = 0; i < elem.length; i++) {
    if (action) {
      elem[parseInt(i.toString(), 10)].classList.add(clName);
    } else {
      elem[parseInt(i.toString(), 10)].classList.remove(clName);
    }
  }
}
function setFormatter(serviceLocator, column) {
  var fmtr = serviceLocator.getService("valueFormatter");
  var format = "format";
  var args;
  if (column.type === "date" || column.type === "datetime" || column.type === "dateonly") {
    args = {
      type: column.type === "dateonly" ? "date" : column.type,
      skeleton: column.format
    };
    if (typeof column.format === "string" && column.format !== "yMd") {
      args["" + format] = column.format;
    }
  }
  switch (column.type) {
    case "date":
      column.setFormatter(fmtr.getFormatFunction(args));
      column.setParser(fmtr.getParserFunction(args));
      break;
    case "dateonly":
      column.setFormatter(fmtr.getFormatFunction(args));
      column.setParser(fmtr.getParserFunction(args));
      break;
    case "datetime":
      column.setFormatter(fmtr.getFormatFunction(args));
      column.setParser(fmtr.getParserFunction(args));
      break;
    case "number":
      column.setFormatter(fmtr.getFormatFunction({
        format: column.format
      }));
      column.setParser(fmtr.getParserFunction({
        format: column.format
      }));
      break;
  }
}
function addRemoveActiveClasses(cells, add) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  for (var i = 0, len = cells.length; i < len; i++) {
    if (add) {
      classList(cells[parseInt(i.toString(), 10)], args.slice(), []);
      cells[parseInt(i.toString(), 10)].setAttribute("aria-selected", "true");
    } else {
      classList(cells[parseInt(i.toString(), 10)], [], args.slice());
      cells[parseInt(i.toString(), 10)].removeAttribute("aria-selected");
    }
  }
}
function distinctStringValues(result) {
  var temp = {};
  var res = [];
  for (var i = 0; i < result.length; i++) {
    if (!(result[parseInt(i.toString(), 10)] in temp)) {
      res.push(result[parseInt(i.toString(), 10)].toString());
      temp[result[parseInt(i.toString(), 10)]] = 1;
    }
  }
  return res;
}
function getFilterMenuPostion(target, dialogObj) {
  var elementVisible = dialogObj.element.style.display;
  dialogObj.element.style.display = "block";
  var dlgWidth = dialogObj.width;
  var newpos = calculateRelativeBasedPosition(target, dialogObj.element);
  dialogObj.element.style.display = elementVisible;
  dialogObj.element.style.top = newpos.top + target.getBoundingClientRect().height - 5 + "px";
  var leftPos = newpos.left - dlgWidth + target.clientWidth;
  if (leftPos < 1) {
    dialogObj.element.style.left = dlgWidth + leftPos - 16 + "px";
  } else {
    dialogObj.element.style.left = leftPos + -4 + "px";
  }
}
function getZIndexCalcualtion(args, dialogObj) {
  args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();
}
function toogleCheckbox(elem) {
  var span = elem.querySelector(".e-frame");
  var input2 = span.previousSibling;
  if (span.classList.contains("e-check")) {
    input2.checked = false;
    classList(span, ["e-uncheck"], ["e-check"]);
  } else {
    input2.checked = true;
    classList(span, ["e-check"], ["e-uncheck"]);
  }
}
function setChecked(elem, checked) {
  elem.checked = checked;
}
function createCboxWithWrap(uid2, elem, className) {
  var div = createElement("div", {
    className
  });
  div.appendChild(elem);
  div.setAttribute("uid", uid2);
  return div;
}
function removeAddCboxClasses(elem, checked) {
  removeClass([elem], ["e-check", "e-stop", "e-uncheck"]);
  if (checked) {
    elem.classList.add("e-check");
  } else {
    elem.classList.add("e-uncheck");
  }
}
function refreshForeignData(row2, columns, data) {
  for (var i = 0; i < (!isNullOrUndefined(columns) ? columns.length : 0); i++) {
    setValue(columns[parseInt(i.toString(), 10)].field, getForeignData(columns[parseInt(i.toString(), 10)], data), row2.foreignKeyData);
  }
  var cells = row2.cells;
  for (var i = 0; i < cells.length; i++) {
    if (cells[parseInt(i.toString(), 10)].isForeignKey) {
      setValue("foreignKeyData", getValue(cells[parseInt(i.toString(), 10)].column.field, row2.foreignKeyData), cells[parseInt(i.toString(), 10)]);
    }
  }
}
function getForeignData(column, data, lValue, foreignKeyData2) {
  var fField = column.foreignKeyField;
  var key = !isNullOrUndefined(lValue) ? lValue : valueAccessor(column.field, data, column);
  key = isNullOrUndefined(key) ? "" : key;
  var query = new Query();
  var fdata = foreignKeyData2 || (column.dataSource instanceof DataManager && column.dataSource.dataSource.json.length ? column.dataSource.dataSource.json : column.columnData);
  if (key.getDay) {
    query.where(getDatePredicate({
      field: fField,
      operator: "equal",
      value: key,
      matchCase: false
    }));
  } else {
    query.where(fField, "==", key, false);
  }
  return new DataManager(fdata).executeLocal(query);
}
function getColumnByForeignKeyValue(foreignKeyValue, columns) {
  var column;
  return columns.some(function(col) {
    column = col;
    return col.foreignKeyValue === foreignKeyValue;
  }) && column;
}
function padZero(value) {
  if (value < 10) {
    return "0" + value;
  }
  return String(value);
}
function getDatePredicate(filterObject, type, isExecuteLocal) {
  var datePredicate;
  var prevDate;
  var nextDate;
  var prevObj = extend({}, getActualProperties(filterObject));
  var nextObj = extend({}, getActualProperties(filterObject));
  if (isNullOrUndefined(filterObject.value) || filterObject.value === "") {
    datePredicate = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
    return datePredicate;
  }
  var value = new Date(filterObject.value);
  if (type === "dateonly" && !isExecuteLocal) {
    if (typeof prevObj.value === "string") {
      prevObj.value = new Date(prevObj.value);
    }
    var dateOnlyString = prevObj.value.getFullYear() + "-" + padZero(prevObj.value.getMonth() + 1) + "-" + padZero(prevObj.value.getDate());
    var predicates = new Predicate(prevObj.field, prevObj.operator, dateOnlyString, false);
    datePredicate = predicates;
  } else {
    if (filterObject.operator === "equal" || filterObject.operator === "notequal") {
      if (type === "datetime") {
        prevDate = new Date(value.setSeconds(value.getSeconds() - 1));
        nextDate = new Date(value.setSeconds(value.getSeconds() + 2));
        filterObject.value = new Date(value.setSeconds(nextDate.getSeconds() - 1));
      } else {
        prevDate = new Date(value.setHours(0) - 1);
        nextDate = new Date(value.setHours(24));
      }
      prevObj.value = prevDate;
      nextObj.value = nextDate;
      if (filterObject.operator === "equal") {
        prevObj.operator = "greaterthan";
        nextObj.operator = "lessthan";
      } else if (filterObject.operator === "notequal") {
        prevObj.operator = "lessthanorequal";
        nextObj.operator = "greaterthanorequal";
      }
      var predicateSt = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
      var predicateEnd = new Predicate(nextObj.field, nextObj.operator, nextObj.value, false);
      datePredicate = filterObject.operator === "equal" ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);
    } else {
      if (type === "date" && (filterObject.operator === "lessthanorequal" || filterObject.operator === "greaterthan")) {
        prevObj.value = new Date(value.setHours(24) - 1);
      }
      if (typeof prevObj.value === "string") {
        prevObj.value = new Date(prevObj.value);
      }
      var predicates = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
      datePredicate = predicates;
    }
  }
  if (filterObject.setProperties) {
    filterObject.setProperties({
      ejpredicate: datePredicate
    }, true);
  } else {
    filterObject.ejpredicate = datePredicate;
  }
  return datePredicate;
}
function isGroupAdaptive(grid) {
  return grid.enableVirtualization && grid.groupSettings.columns.length > 0 && grid.isVirtualAdaptive && !grid.groupSettings.enableLazyLoading;
}
function getObject(field, object) {
  if (field === void 0) {
    field = "";
  }
  if (field) {
    var value = object;
    var splits = field.split(".");
    for (var i = 0; i < splits.length && !isNullOrUndefined(value); i++) {
      value = value[splits[parseInt(i.toString(), 10)]];
      if (isUndefined(value)) {
        var newCase = splits[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + splits[parseInt(i.toString(), 10)].slice(1);
        value = object["" + newCase] || object[("" + newCase).charAt(0).toLowerCase() + ("" + newCase).slice(1)];
      }
    }
    return value;
  }
}
function getCustomDateFormat(format, colType) {
  var intl = new Internationalization();
  var formatvalue;
  var formatter = "format";
  var type = "type";
  if (colType === "date") {
    formatvalue = typeof format === "object" ? intl.getDatePattern({
      type: format["" + type] ? format["" + type] : "date",
      format: format["" + formatter]
    }, false) : intl.getDatePattern({
      type: "dateTime",
      skeleton: format
    }, false);
  } else {
    formatvalue = typeof format === "object" ? intl.getDatePattern({
      type: format["" + type] ? format["" + type] : "dateTime",
      format: format["" + formatter]
    }, false) : intl.getDatePattern({
      type: "dateTime",
      skeleton: format
    }, false);
  }
  return formatvalue;
}
function getExpandedState(gObj, hierarchyPrintMode) {
  var rows = gObj.getRowsObject();
  var obj = {};
  for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
    var row2 = rows_1[_i];
    if (row2.isExpand && !row2.isDetailRow) {
      var index = gObj.allowPaging && gObj.printMode === "AllPages" ? row2.index + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize : row2.index;
      if (!isNullOrUndefined(index)) {
        obj[parseInt(index.toString(), 10)] = {};
        obj[parseInt(index.toString(), 10)].isExpand = true;
        if (gObj.childGrid) {
          obj[parseInt(index.toString(), 10)].gridModel = getPrintGridModel(row2.childGrid, hierarchyPrintMode);
          obj[parseInt(index.toString(), 10)].gridModel.query = gObj.childGrid.query;
        }
      }
    }
  }
  return obj;
}
function getPrintGridModel(gObj, hierarchyPrintMode) {
  if (hierarchyPrintMode === void 0) {
    hierarchyPrintMode = "Expanded";
  }
  var printGridModel = {};
  if (!gObj) {
    return printGridModel;
  }
  for (var _i = 0, _a = Print.printGridProp; _i < _a.length; _i++) {
    var key = _a[_i];
    if (key === "columns") {
      printGridModel["" + key] = getActualPropFromColl(gObj.getColumns());
    } else if (key === "allowPaging") {
      printGridModel["" + key] = gObj.printMode === "CurrentPage";
    } else {
      printGridModel["" + key] = getActualProperties(gObj["" + key]);
    }
  }
  printGridModel["enableHover"] = false;
  if ((gObj.childGrid || gObj.detailTemplate) && hierarchyPrintMode !== "None") {
    printGridModel.expandedRows = getExpandedState(gObj, hierarchyPrintMode);
  }
  return printGridModel;
}
function extendObjWithFn(copied, first, second, deep) {
  var res = copied || {};
  var len = arguments.length;
  if (deep) {
    len = len - 1;
  }
  for (var i = 1; i < len; i++) {
    if (!arguments[parseInt(i.toString(), 10)]) {
      continue;
    }
    var obj1 = arguments[parseInt(i.toString(), 10)];
    var keys = Object.keys(Object.getPrototypeOf(obj1)).length ? Object.keys(obj1).concat(getPrototypesOfObj(obj1)) : Object.keys(obj1);
    for (var i_1 = 0; i_1 < keys.length; i_1++) {
      var source = res[keys[parseInt(i_1.toString(), 10)]];
      var cpy = obj1[keys[parseInt(i_1.toString(), 10)]];
      var cln = void 0;
      if (deep && (isObject(cpy) || Array.isArray(cpy))) {
        if (isObject(cpy)) {
          cln = source ? source : {};
          res[keys[parseInt(i_1.toString(), 10)]] = extend({}, cln, cpy, deep);
        } else {
          cln = source ? source : [];
          res[keys[parseInt(i_1.toString(), 10)]] = extend([], cln, cpy, deep);
        }
      } else {
        res[keys[parseInt(i_1.toString(), 10)]] = cpy;
      }
    }
  }
  return res;
}
function getPrototypesOfObj(obj) {
  var keys = [];
  while (Object.getPrototypeOf(obj) && Object.keys(Object.getPrototypeOf(obj)).length) {
    keys = keys.concat(Object.keys(Object.getPrototypeOf(obj)));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
}
function measureColumnDepth(column) {
  var max = 0;
  for (var i = 0; i < (!isNullOrUndefined(column) ? column.length : 0); i++) {
    var depth = checkDepth(column[parseInt(i.toString(), 10)], 0);
    if (max < depth) {
      max = depth;
    }
  }
  return max + 1;
}
function checkDepth(col, index) {
  var max = index;
  var indices = [];
  if (col.columns) {
    index++;
    for (var i = 0; i < col.columns.length; i++) {
      indices[parseInt(i.toString(), 10)] = checkDepth(col.columns[parseInt(i.toString(), 10)], index);
    }
    for (var j = 0; j < indices.length; j++) {
      if (max < indices[parseInt(j.toString(), 10)]) {
        max = indices[parseInt(j.toString(), 10)];
      }
    }
    index = max;
  }
  return index;
}
function refreshFilteredColsUid(gObj, filteredCols) {
  for (var i = 0; i < filteredCols.length; i++) {
    filteredCols[parseInt(i.toString(), 10)].uid = filteredCols[parseInt(i.toString(), 10)].isForeignKey ? getColumnByForeignKeyValue(filteredCols[parseInt(i.toString(), 10)].field, gObj.getForeignKeyColumns()).uid : gObj.enableColumnVirtualization ? getColumnModelByFieldName(gObj, filteredCols[parseInt(i.toString(), 10)].field).uid : gObj.getColumnByField(filteredCols[parseInt(i.toString(), 10)].field).uid;
  }
}
var Global;
(function(Global2) {
  Global2.timer = null;
})(Global || (Global = {}));
function getTransformValues(element) {
  var style = document.defaultView.getComputedStyle(element, null);
  var transformV = style.getPropertyValue("transform");
  var replacedTv = transformV.replace(/,/g, "");
  var translateX = parseFloat(replacedTv.split(" ")[4]);
  var translateY = parseFloat(replacedTv.split(" ")[5]);
  return {
    width: translateX,
    height: translateY
  };
}
function applyBiggerTheme(rootElement, element) {
  if (rootElement.classList.contains("e-bigger")) {
    element.classList.add("e-bigger");
  }
}
function getScrollWidth(gObj) {
  var scrollElem = gObj.getContent().firstElementChild;
  return scrollElem.scrollWidth > scrollElem.offsetWidth ? getScrollBarWidth() : 0;
}
function resetColspanGroupCaption(gObj, idx) {
  var colspan = 0;
  var cols = gObj.getColumns();
  var width = idx * 30;
  if (gObj.isRowDragable()) {
    colspan++;
    width += 30;
  }
  colspan += gObj.groupSettings.columns.length - idx;
  width += 30 * (gObj.groupSettings.columns.length - idx);
  var gridWidth = (gObj.width === "auto" ? gObj.element.offsetWidth : parseInt(gObj.width.toString(), 10)) - getScrollWidth(gObj);
  for (var i = 0; i < cols.length; i++) {
    if (cols[parseInt(i.toString(), 10)].visible) {
      width += parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10);
      colspan++;
    }
    if (width > gridWidth) {
      colspan--;
      break;
    }
  }
  return colspan;
}
function groupCaptionRowLeftRightPos(tr, gObj) {
  var width = 0;
  var idx = 0;
  var frozenCount = gObj.getVisibleFrozenLeftCount();
  for (var j = 0; j < tr.childNodes.length; j++) {
    var td = tr.childNodes[parseInt(j.toString(), 10)];
    if (frozenCount === idx) {
      break;
    }
    if (td.classList.contains("e-groupcaption") || td.classList.contains("e-summarycell")) {
      idx += parseInt(td.getAttribute("colspan"), 10);
    }
    td.classList.add("e-leftfreeze");
    if (td.classList.contains("e-groupcaption") && parseInt(td.getAttribute("colspan"), 10) === 1) {
      td.classList.add("e-freezeleftborder");
    }
    applyStickyLeftRightPosition(td, width, gObj.enableRtl, "Left");
    if (td.classList.contains("e-indentcell") || td.classList.contains("e-recordplusexpand") || td.classList.contains("e-recordpluscollapse")) {
      width += 30;
    }
    if (td.classList.contains("e-groupcaption")) {
      var colspan = parseInt(td.getAttribute("colspan"), 10);
      if (gObj.isRowDragable()) {
        colspan--;
        width += 30;
      }
      colspan = colspan - (gObj.groupSettings.columns.length - j);
      width = width + 30 * (gObj.groupSettings.columns.length - j);
      var cols = gObj.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (parseInt(td.getAttribute("colspan"), 10) > 1 && parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10) + width > parseInt(gObj.width.toString(), 10) - getScrollWidth(gObj)) {
          var newColspan = resetColspanGroupCaption(gObj, j);
          td.setAttribute("colspan", newColspan.toString());
          break;
        }
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10);
          colspan--;
        }
        if (colspan === 0) {
          break;
        }
      }
    }
    if (td.classList.contains("e-summarycell")) {
      var uid_1 = td.getAttribute("e-mappinguid");
      var column = gObj.getColumnByUid(uid_1);
      width += parseInt(column.width.toString(), 10);
    }
  }
}
function ensureLastRow(row2, gridObj) {
  var content2 = gridObj.getContent().firstElementChild;
  return row2 && row2.getBoundingClientRect().top - content2.getBoundingClientRect().top + gridObj.getRowHeight() > content2.offsetHeight;
}
function ensureFirstRow(row2, rowTop) {
  return row2 && row2.getBoundingClientRect().top < rowTop;
}
function isRowEnteredInGrid(index, gObj) {
  var rowHeight2 = gObj.getRowHeight();
  var startIndex = gObj.getContent().firstElementChild.scrollTop / rowHeight2;
  var endIndex = startIndex + gObj.getContent().firstElementChild.offsetHeight / rowHeight2;
  return index < endIndex && index > startIndex;
}
function getEditedDataIndex(gObj, data) {
  var keyField = gObj.getPrimaryKeyFieldNames()[0];
  var dataIndex;
  gObj.getCurrentViewRecords().filter(function(e, index) {
    if (keyField.includes(".")) {
      var currentValue = getObject(keyField, e);
      var originalValue = getObject(keyField, data);
      if (currentValue === originalValue) {
        dataIndex = index;
      }
    } else {
      if (e["" + keyField] === data["" + keyField]) {
        dataIndex = index;
      }
    }
  });
  return dataIndex;
}
function eventPromise(args, query) {
  var state = getStateEventArgument(query);
  var def = new Deferred();
  state.dataSource = def.resolve;
  state.action = args;
  return {
    state,
    deffered: def
  };
}
function getStateEventArgument(query) {
  var adaptr = new UrlAdaptor();
  var dm = new DataManager({
    url: "",
    adaptor: new UrlAdaptor()
  });
  var state = adaptr.processQuery(dm, query);
  var data = JSON.parse(state.data);
  return data;
}
function ispercentageWidth(gObj) {
  var columns = gObj.getVisibleColumns();
  var percentageCol = 0;
  var undefinedWidthCol = 0;
  for (var i = 0; i < columns.length; i++) {
    if (isUndefined(columns[parseInt(i.toString(), 10)].width)) {
      undefinedWidthCol++;
    } else if (columns[parseInt(i.toString(), 10)].width.toString().indexOf("%") !== -1) {
      percentageCol++;
    }
  }
  return (gObj.width === "auto" || typeof gObj.width === "string" && gObj.width.indexOf("%") !== -1) && !gObj.groupSettings.showGroupedColumn && gObj.groupSettings.columns.length && percentageCol && !undefinedWidthCol;
}
function resetRowIndex(gObj, rows, rowElms, index, startRowIndex) {
  var startIndex = index ? index : 0;
  for (var i = startRowIndex ? startRowIndex : 0; i < rows.length; i++) {
    if (rows[parseInt(i.toString(), 10)] && rows[parseInt(i.toString(), 10)].isDataRow) {
      rows[parseInt(i.toString(), 10)].index = startIndex;
      rows[parseInt(i.toString(), 10)].isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;
      rowElms[parseInt(i.toString(), 10)].setAttribute(dataRowIndex, startIndex.toString());
      rowElms[parseInt(i.toString(), 10)].setAttribute(ariaRowIndex, (startIndex + 1).toString());
      if (rows[parseInt(i.toString(), 10)].isAltRow) {
        rowElms[parseInt(i.toString(), 10)].classList.add("e-altrow");
      } else {
        rowElms[parseInt(i.toString(), 10)].classList.remove("e-altrow");
      }
      for (var j = 0; j < rowElms[parseInt(i.toString(), 10)].cells.length; j++) {
        rowElms[parseInt(i.toString(), 10)].cells[parseInt(j.toString(), 10)].setAttribute("index", startIndex.toString());
      }
      startIndex++;
    }
  }
  if (!rows.length) {
    gObj.renderModule.emptyRow(true);
  }
}
function resetCachedRowIndex(gObj) {
  var rowObjects = gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache ? gObj.getRowsObject() : gObj.vRows;
  var rowElements = gObj.getRows();
  for (var i = 0, startIndex = 0, k = 0; i < rowObjects.length; i++) {
    var rowObject = rowObjects[parseInt(i.toString(), 10)];
    if (rowObject.isDataRow) {
      rowObject.index = startIndex;
      rowObject.isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;
      var rowElement = gObj.getRowElementByUID(rowObject.uid);
      if (!isNullOrUndefined(rowElement)) {
        rowElements[parseInt(k.toString(), 10)] = rowElement;
        rowElement.setAttribute(dataRowIndex, startIndex.toString());
        rowElement.setAttribute(ariaRowIndex, (startIndex + 1).toString());
        if (rowObject.isAltRow) {
          rowElement.classList.add("e-altrow");
        } else {
          rowElement.classList.remove("e-altrow");
        }
        for (var j = 0; j < rowElement.cells.length; j++) {
          rowElement.cells[parseInt(j.toString(), 10)].setAttribute("index", startIndex.toString());
        }
        k++;
      }
      startIndex++;
    }
  }
  if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
    gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);
  }
}
function groupReorderRowObject(gObj, args, tr, dropRObj) {
  var rowObjects = gObj.enableVirtualization ? gObj.vRows : gObj.getRowsObject();
  var orderChangeRowObjects = [];
  var dropRowObject = dropRObj ? dropRObj : gObj.getRowObjectFromUID(args.target.closest("tr").getAttribute("data-uid"));
  var rowObjectDropIndex;
  for (var i = 0; i < args.rows.length; i++) {
    var orderChangeRowObject = gObj.getRowObjectFromUID(args.rows[parseInt(i.toString(), 10)].getAttribute("data-uid"));
    if (dropRowObject === orderChangeRowObject) {
      rowObjectDropIndex = rowObjects.indexOf(dropRowObject);
    }
    orderChangeRowObjects.push(rowObjects.splice(rowObjects.indexOf(orderChangeRowObject), 1)[0]);
  }
  if (isNullOrUndefined(rowObjectDropIndex)) {
    rowObjectDropIndex = rowObjects.indexOf(dropRowObject);
    if (args.fromIndex > args.dropIndex) {
      rowObjects.splice.apply(rowObjects, [rowObjectDropIndex, 0].concat(orderChangeRowObjects));
    } else {
      rowObjects.splice.apply(rowObjects, [rowObjectDropIndex + 1, 0].concat(orderChangeRowObjects));
    }
  } else {
    rowObjects.splice.apply(rowObjects, [rowObjectDropIndex, 0].concat(orderChangeRowObjects));
  }
  if (!gObj.enableVirtualization && !gObj.infiniteScrollSettings.enableCache) {
    var record = {};
    var currentViewData = gObj.getCurrentViewRecords();
    for (var i = 0, len = tr.length; i < len; i++) {
      var index = parseInt(tr[parseInt(i.toString(), 10)].getAttribute(dataRowIndex), 10);
      record[parseInt(i.toString(), 10)] = currentViewData[parseInt(index.toString(), 10)];
    }
    var rows = gObj.getRows();
    for (var i = 0, len = tr.length; i < len; i++) {
      rows[parseInt(i.toString(), 10)] = tr[parseInt(i.toString(), 10)];
      currentViewData[parseInt(i.toString(), 10)] = record[parseInt(i.toString(), 10)];
    }
  }
  if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
    gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);
  }
}
function compareChanges(gObj, changes, type, keyField) {
  var newArray = gObj.dataToBeUpdated["" + type].concat(changes["" + type]).reduce(function(r, o) {
    r[o["" + keyField]] = r[o["" + keyField]] === void 0 ? o : Object.assign(r[o["" + keyField]], o);
    return r;
  }, {});
  gObj.dataToBeUpdated["" + type] = Object.keys(newArray).map(function(k) {
    return newArray["" + k];
  });
}
function setRowElements(gObj) {
  gObj.contentModule.rowElements = [].slice.call(gObj.element.querySelectorAll(".e-row:not(.e-addedrow):not(.e-cloneproperties .e-row)"));
}
function sliceElements(row2, start, end) {
  var cells = row2.children;
  var len = cells.length;
  var k = 0;
  for (var i = 0; i < len; i++, k++) {
    if (i >= start && i < end) {
      continue;
    }
    row2.removeChild(row2.children[parseInt(k.toString(), 10)]);
    k--;
  }
}
function isChildColumn(column, uid2) {
  var uids = [];
  uids.push(column.uid);
  pushuid(column, uids);
  if (uids.indexOf(uid2) > -1) {
    return true;
  } else {
    return false;
  }
}
function pushuid(column, uids) {
  for (var i = 0; i < column.columns.length; i++) {
    if (column.columns[parseInt(i.toString(), 10)].uid) {
      uids.push(column.columns[parseInt(i.toString(), 10)].uid);
    }
    if (column.columns[parseInt(i.toString(), 10)].columns && column.columns[parseInt(i.toString(), 10)].columns.length) {
      pushuid(column.columns[parseInt(i.toString(), 10)], uids);
    }
  }
}
function frozenDirection(column) {
  if (column.columns[0].freeze || column.columns[0].isFrozen) {
    if (column.columns[0].freeze === "Left" || column.columns[0].isFrozen) {
      return "Left";
    } else if (column.columns[0].freeze === "Right") {
      return "Right";
    } else if (column.columns[0].freeze === "Fixed") {
      return "Fixed";
    } else {
      return "None";
    }
  } else {
    if (column.columns[0].columns && column.columns[0].columns.length) {
      return frozenDirection(column.columns[0]);
    } else {
      return "None";
    }
  }
}
function addFixedColumnBorder(row2) {
  if (row2.querySelector(".e-fixedfreeze")) {
    var cells = [].slice.call(row2.querySelectorAll(".e-filterbarcell:not(.e-hide),.e-summarycell:not(.e-hide),.e-headercell:not(.e-hide),.e-rowcell:not(.e-hide)"));
    for (var j = 0; j < cells.length; j++) {
      if (cells[parseInt(j.toString(), 10)].classList.contains("e-fixedfreeze") && (!cells[j - 1] || cells[j - 1] && !cells[j - 1].classList.contains("e-fixedfreeze"))) {
        cells[parseInt(j.toString(), 10)].classList.add("e-freezeleftborder");
      }
      if (cells[parseInt(j.toString(), 10)].classList.contains("e-fixedfreeze") && (!cells[j + 1] || cells[j + 1] && !cells[j + 1].classList.contains("e-fixedfreeze"))) {
        cells[parseInt(j.toString(), 10)].classList.add("e-freezerightborder");
      }
    }
  }
}
function applyStickyLeftRightPosition(node, width, isRtl, position) {
  if (position === "Left") {
    if (isRtl) {
      node.style.right = width + "px";
    } else {
      node.style.left = width + "px";
    }
  }
  if (position === "Right") {
    if (isRtl) {
      node.style.left = width + "px";
    } else {
      node.style.right = width + "px";
    }
  }
}
function resetColandRowSpanStickyPosition(gObj, column, node, colSpan) {
  var columns = gObj.getColumns();
  var index = column.index;
  if (column.freeze === "Left" && column.border !== "Left") {
    var idx = index + (colSpan - 1);
    while (columns[parseInt(idx.toString(), 10)].visible === false) {
      idx++;
    }
    if (columns[parseInt(idx.toString(), 10)].border === "Left") {
      node.classList.add("e-freezeleftborder");
    }
  } else if (column.freeze === "Right" || column.freeze === "Fixed") {
    var width = 0;
    for (var j = index + 1; j < index + colSpan; j++) {
      if (j === columns.length) {
        break;
      }
      if (columns[parseInt(j.toString(), 10)].visible) {
        width += parseInt(columns[parseInt(j.toString(), 10)].width.toString(), 10);
      } else {
        colSpan++;
      }
    }
    if (gObj.enableRtl) {
      node.style.left = parseInt(node.style.left, 10) - width + "px";
    } else {
      node.style.right = parseInt(node.style.right, 10) - width + "px";
    }
  }
}
function getCellFromRow(gObj, rowIndex, colIndex) {
  var row2 = gObj.getRowByIndex(rowIndex);
  for (var i = 0; i < row2.cells.length; i++) {
    if (row2.cells[parseInt(i.toString(), 10)].getAttribute("data-colindex") === colIndex.toString()) {
      return row2.cells[parseInt(i.toString(), 10)];
    }
  }
  return null;
}
function addStickyColumnPosition(gObj, column, node) {
  if (column.freeze === "Left" || column.isFrozen) {
    node.classList.add("e-leftfreeze");
    if (column.border === "Left") {
      node.classList.add("e-freezeleftborder");
    }
    if (column.index === 0) {
      applyStickyLeftRightPosition(node, gObj.getIndentCount() * 30, gObj.enableRtl, "Left");
      if (gObj.enableColumnVirtualization) {
        column.valueX = gObj.getIndentCount() * 30;
      }
    } else {
      var cols = gObj.getColumns();
      var width = gObj.getIndentCount() * 30;
      for (var i = 0; i < cols.length; i++) {
        if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
          break;
        }
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
      applyStickyLeftRightPosition(node, width, gObj.enableRtl, "Left");
      if (gObj.enableColumnVirtualization) {
        column.valueX = width;
      }
    }
  } else if (column.freeze === "Right") {
    node.classList.add("e-rightfreeze");
    var cols = gObj.getColumns();
    if (column.border === "Right") {
      node.classList.add("e-freezerightborder");
    }
    if (column.index === cols[cols.length - 1].index) {
      var width = gObj.getFrozenMode() === "Right" && gObj.isRowDragable() ? 30 : 0;
      applyStickyLeftRightPosition(node, width, gObj.enableRtl, "Right");
      if (gObj.enableColumnVirtualization) {
        column.valueX = width;
      }
    } else {
      var width = gObj.getFrozenMode() === "Right" && gObj.isRowDragable() ? 30 : 0;
      for (var i = cols.length - 1; i >= 0; i--) {
        if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
          break;
        }
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
      applyStickyLeftRightPosition(node, width, gObj.enableRtl, "Right");
      if (gObj.enableColumnVirtualization) {
        column.valueX = width;
      }
    }
  } else if (column.freeze === "Fixed") {
    node.classList.add("e-fixedfreeze");
    var cols = gObj.getColumns();
    var width = 0;
    if (gObj.getVisibleFrozenLeftCount()) {
      width = gObj.getIndentCount() * 30;
    } else if (gObj.getFrozenMode() === "Right") {
      width = gObj.groupSettings.columns.length * 30;
    }
    for (var i = 0; i < cols.length; i++) {
      if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
        break;
      }
      if (cols[parseInt(i.toString(), 10)].freeze === "Left" || cols[parseInt(i.toString(), 10)].isFrozen || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
    }
    applyStickyLeftRightPosition(node, width - 1, gObj.enableRtl, "Left");
    width = gObj.getFrozenMode() === "Right" && gObj.isRowDragable() ? 30 : 0;
    for (var i = cols.length - 1; i >= 0; i--) {
      if (column.uid === cols[parseInt(i.toString(), 10)].uid) {
        break;
      }
      if (cols[parseInt(i.toString(), 10)].freeze === "Right" || cols[parseInt(i.toString(), 10)].freeze === "Fixed") {
        if (cols[parseInt(i.toString(), 10)].visible) {
          width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());
        }
      }
    }
    applyStickyLeftRightPosition(node, width - 1, gObj.enableRtl, "Right");
  } else {
    node.classList.add("e-unfreeze");
  }
}
function getCellsByTableName(gObj, col, rowIndex) {
  return [].slice.call(gObj.getDataRows()[parseInt(rowIndex.toString(), 10)].getElementsByClassName(rowCell));
}
function getCellByColAndRowIndex(gObj, col, rowIndex, index) {
  return getCellsByTableName(gObj, col, rowIndex)[parseInt(index.toString(), 10)];
}
function setValidationRuels(col, index, rules, mRules, frRules, len, isCustom) {
  if (isCustom) {
    rules[getComplexFieldID(col.field)] = col.validationRules;
  } else {
    if (col.getFreezeTableName() === frozenLeft || !index && col.getFreezeTableName() === frozenRight || len === 1) {
      rules[getComplexFieldID(col.field)] = col.validationRules;
    } else if (col.getFreezeTableName() === "movable" || !col.getFreezeTableName()) {
      mRules[getComplexFieldID(col.field)] = col.validationRules;
    } else if (col.getFreezeTableName() === frozenRight) {
      frRules[getComplexFieldID(col.field)] = col.validationRules;
    }
  }
}
function getNumberFormat(numberFormat, type, isExcel, currencyCode) {
  var format;
  var intl = new Internationalization();
  if (type === "number") {
    try {
      format = intl.getNumberPattern({
        format: numberFormat,
        currency: currencyCode,
        useGrouping: true
      }, true);
    } catch (error) {
      format = numberFormat;
    }
  } else if (type === "date" || type === "time" || type === "datetime") {
    try {
      format = intl.getDatePattern({
        skeleton: numberFormat,
        type
      }, isExcel);
      if (isNullOrUndefined(format)) {
        throw "error";
      }
    } catch (error) {
      try {
        format = intl.getDatePattern({
          format: numberFormat,
          type
        }, isExcel);
      } catch (error2) {
        format = numberFormat;
      }
    }
  } else {
    format = numberFormat;
  }
  if (type !== "number") {
    var patternRegex = /G|H|c|'| a|yy|y|EEEE|E/g;
    var mtch_1 = {
      "G": "",
      "H": "h",
      "c": "d",
      "'": '"',
      " a": " AM/PM",
      "yy": "yy",
      "y": "yyyy",
      "EEEE": "dddd",
      "E": "ddd"
    };
    format = format.replace(patternRegex, function(pattern) {
      return mtch_1["" + pattern];
    });
  }
  return format;
}
function addBiggerDialog(gObj) {
  if (gObj.enableAdaptiveUI) {
    var dialogs = document.getElementsByClassName("e-responsive-dialog");
    for (var i = 0; i < dialogs.length; i++) {
      dialogs[parseInt(i.toString(), 10)].classList.add("e-bigger");
    }
  }
}
function performComplexDataOperation(value, mapObject) {
  var returnObj;
  var length = value.split(".").length;
  var splits = value.split(".");
  var duplicateMap = mapObject;
  for (var i = 0; i < length; i++) {
    returnObj = duplicateMap[splits[parseInt(i.toString(), 10)]];
    duplicateMap = returnObj;
  }
  return returnObj;
}
function setDisplayValue(tr, idx, displayVal, rows, parent, isContent) {
  var trs = Object.keys(tr);
  var actualIndex = idx;
  for (var i = 0; i < trs.length; i++) {
    var td = tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)];
    if (parent && !parent.isFrozenGrid() && !parent.isRowDragable()) {
      td = !isNullOrUndefined(td) && (parseInt(td.getAttribute("data-colindex"), 10) === idx || parentsUntil(td, "e-addedrow") && td.parentElement.childNodes[parseInt(idx.toString(), 10)] === td) ? td : tr[parseInt(i.toString(), 10)].querySelector('td[data-colindex="' + idx + '"]');
      if (isNullOrUndefined(td)) {
        continue;
      } else {
        idx = parent.getContentTable().querySelector(".e-detailrowcollapse, .e-detailrowexpand") ? td.cellIndex - 1 : td.cellIndex;
      }
    }
    if (tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell").length && td) {
      setStyleAttribute(tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)], {
        "display": displayVal
      });
      if (tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)].classList.contains("e-hide")) {
        removeClass([tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)]], ["e-hide"]);
      }
      if (isContent && parent.isRowDragable() || parent && parent.isDetail()) {
        var index = idx + 1;
        rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(index.toString(), 10)].visible = displayVal === "" ? true : false;
      } else {
        if (!isNullOrUndefined(rows[trs[parseInt(i.toString(), 10)]])) {
          rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(idx.toString(), 10)].visible = displayVal === "" ? true : false;
          if (rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(idx.toString(), 10)].visible === false) {
            tr[trs[parseInt(i.toString(), 10)]].querySelectorAll("td.e-rowcell")[parseInt(idx.toString(), 10)].classList.add("e-hide");
          }
        }
      }
      idx = actualIndex;
    }
  }
}
function addRemoveEventListener(parent, evt, isOn, module) {
  for (var _i = 0, evt_1 = evt; _i < evt_1.length; _i++) {
    var inst = evt_1[_i];
    if (isOn) {
      parent.on(inst.event, inst.handler, module);
    } else {
      parent.off(inst.event, inst.handler);
    }
  }
}
function createEditElement(parent, column, classNames, attr) {
  var complexFieldName = getComplexFieldID(column.field);
  attr = Object.assign(attr, {
    id: parent.element.id + complexFieldName,
    name: complexFieldName,
    "e-mappinguid": column.uid
  });
  return parent.createElement("input", {
    className: classNames,
    attrs: attr
  });
}
function getColumnModelByUid(gObj, uid2) {
  var column;
  for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {
    var col = _a[_i];
    if (col.uid === uid2) {
      column = col;
      break;
    }
  }
  return column;
}
function getColumnModelByFieldName(gObj, field) {
  var column;
  if (!gObj.columnModel) {
    gObj.getColumns();
  }
  for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {
    var col = _a[_i];
    if (col.field === field) {
      column = col;
      break;
    }
  }
  return column;
}
function registerEventHandlers(id, evts, handlers, instance) {
  instance.eventHandlers["" + id] = {};
  for (var i = 0; i < evts.length; i++) {
    instance.eventHandlers["" + id][evts[parseInt(i.toString(), 10)]] = handlers[evts[parseInt(i.toString(), 10)]];
  }
}
function removeEventHandlers(component, evts, instance) {
  for (var i = 0; i < evts.length; i++) {
    if (component.isDestroyed) {
      break;
    }
    component.removeEventListener(evts[parseInt(i.toString(), 10)], instance.eventHandlers[component.element.id][evts[parseInt(i.toString(), 10)]]);
  }
}
function clearReactVueTemplates(parent, templates) {
  parent.destroyTemplate(templates);
  if (parent.isReact) {
    parent.renderTemplates();
  }
}
function getRowIndexFromElement(row2) {
  return parseInt(row2.getAttribute(dataRowIndex), 10);
}
function generateExpandPredicates(fields, values, instance) {
  var filterCols = [];
  for (var i = 0; i < fields.length; i++) {
    var column = instance.parent.getColumnByField(fields[parseInt(i.toString(), 10)]);
    var value = values[parseInt(i.toString(), 10)] === "null" ? null : values[parseInt(i.toString(), 10)];
    var pred = {
      field: fields[parseInt(i.toString(), 10)],
      predicate: "or",
      uid: column.uid,
      operator: "equal",
      type: column.type,
      matchCase: instance.allowCaseSensitive,
      ignoreAccent: instance.parent.filterSettings.ignoreAccent
    };
    if (value === "" || isNullOrUndefined(value)) {
      filterCols = filterCols.concat(CheckBoxFilterBase.generateNullValuePredicates(pred));
    } else {
      filterCols.push(extend2({}, {
        value
      }, pred));
    }
  }
  return CheckBoxFilterBase.getPredicate(filterCols);
}
function getPredicates(pred) {
  var predicateList = [];
  for (var _i = 0, _a = Object.keys(pred); _i < _a.length; _i++) {
    var prop = _a[_i];
    predicateList.push(pred["" + prop]);
  }
  return predicateList;
}
function getGroupKeysAndFields(index, rowsObject) {
  var fields = [];
  var keys = [];
  for (var i = index; i >= 0; i--) {
    if (rowsObject[parseInt(i.toString(), 10)].isCaptionRow && fields.indexOf(rowsObject[parseInt(i.toString(), 10)].data.field) === -1 && (rowsObject[parseInt(i.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent || i === index)) {
      fields.push(rowsObject[parseInt(i.toString(), 10)].data.field);
      keys.push(rowsObject[parseInt(i.toString(), 10)].data.key);
      if (rowsObject[parseInt(i.toString(), 10)].indent === 0) {
        break;
      }
    }
  }
  return {
    fields,
    keys
  };
}
function findCellIndex(checkActiveMatrix, checkCellIndex, next) {
  var activeMatrix = checkActiveMatrix;
  var cellIndex = checkCellIndex;
  var currentCellIndexPass = false;
  if (next) {
    for (var i = cellIndex[0]; i < activeMatrix.length; i++) {
      var rowCell2 = activeMatrix[parseInt(i.toString(), 10)];
      for (var j = 0; j < rowCell2.length; j++) {
        if (currentCellIndexPass && activeMatrix[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === 1) {
          cellIndex = [i, j];
          return cellIndex;
        }
        if (!currentCellIndexPass && cellIndex.toString() === [i, j].toString()) {
          currentCellIndexPass = true;
        }
      }
    }
  } else {
    for (var i = cellIndex[0]; i >= 0; i--) {
      var rowCell2 = activeMatrix[parseInt(i.toString(), 10)];
      for (var j = rowCell2.length - 1; j >= 0; j--) {
        if (currentCellIndexPass && activeMatrix[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === 1) {
          cellIndex = [i, j];
          return cellIndex;
        }
        if (!currentCellIndexPass && cellIndex.toString() === [i, j].toString()) {
          currentCellIndexPass = true;
        }
      }
    }
  }
  return cellIndex;
}
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function checkVirtualSort(grid) {
  return !(isGroupAdaptive(grid) || grid.groupSettings.enableLazyLoading || !grid.enableVirtualization && grid.enableColumnVirtualization);
}
function getVisiblePage(blockes) {
  var visiblePage = [];
  for (var i = 0; i < blockes.length; i++) {
    var page = Math.ceil(blockes[parseInt(i.toString(), 10)] / 2);
    if (visiblePage.indexOf(page) === -1) {
      visiblePage.push(page);
    }
  }
  return visiblePage;
}

// node_modules/@syncfusion/ej2-grids/src/grid/common/checkbox-filter-base.js
var CheckBoxFilterBase = (
  /** @class */
  function() {
    function CheckBoxFilterBase2(parent) {
      this.isExecuteLocal = false;
      this.existingPredicate = {};
      this.foreignKeyQuery = new Query();
      this.filterState = true;
      this.values = {};
      this.renderEmpty = false;
      this.isCheckboxFilterTemplate = false;
      this.infiniteRenderMod = false;
      this.infiniteInitialLoad = false;
      this.infiniteSearchValChange = false;
      this.infinitePermenantLocalData = [];
      this.infiniteQueryExecutionPending = false;
      this.infiniteSkipCnt = 0;
      this.infiniteScrollAppendDiff = 0;
      this.prevInfiniteScrollDirection = "";
      this.infiniteLoadedElem = [];
      this.infiniteDataCount = 0;
      this.infiniteLocalSelectAll = true;
      this.localInfiniteSelectAllClicked = false;
      this.localInfiniteSelectionInteracted = false;
      this.infiniteManualSelectMaintainPred = [];
      this.parent = parent;
      this.id = this.parent.element.id;
      this.valueFormatter = new ValueFormatter(this.parent.locale);
      this.cBoxTrue = createCheckBox(this.parent.createElement, false, {
        checked: true,
        label: " "
      });
      this.cBoxFalse = createCheckBox(this.parent.createElement, false, {
        checked: false,
        label: " "
      });
      this.cBoxTrue.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden",
        attrs: {
          type: "checkbox"
        }
      }), this.cBoxTrue.firstChild);
      this.cBoxFalse.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden",
        attrs: {
          "type": "checkbox"
        }
      }), this.cBoxFalse.firstChild);
      this.cBoxFalse.querySelector(".e-frame").classList.add("e-uncheck");
      if (this.parent.enableRtl) {
        addClass([this.cBoxTrue, this.cBoxFalse], ["e-rtl"]);
      }
      if (this.parent.cssClass) {
        if (this.parent.cssClass.indexOf(" ") !== -1) {
          addClass([this.cBoxTrue, this.cBoxFalse], this.parent.cssClass.split(" "));
        } else {
          addClass([this.cBoxTrue, this.cBoxFalse], [this.parent.cssClass]);
        }
      }
    }
    CheckBoxFilterBase2.prototype.destroy = function() {
      this.closeDialog();
    };
    CheckBoxFilterBase2.prototype.wireEvents = function() {
      EventHandler.add(this.dlg, "click", this.clickHandler, this);
      EventHandler.add(this.dlg, "keyup", this.keyupHandler, this);
      this.searchHandler = debounce(this.searchBoxKeyUp, 200);
      var elem = this.dialogObj.element.querySelector(".e-searchinput");
      if (elem) {
        EventHandler.add(elem, "keyup", this.searchHandler, this);
        EventHandler.add(elem, "input", this.searchHandler, this);
      }
    };
    CheckBoxFilterBase2.prototype.unWireEvents = function() {
      EventHandler.remove(this.dlg, "click", this.clickHandler);
      EventHandler.remove(this.dlg, "keyup", this.keyupHandler);
      var elem = this.dialogObj.element.querySelector(".e-searchinput");
      if (elem) {
        EventHandler.remove(elem, "keyup", this.searchHandler);
        EventHandler.remove(elem, "input", this.searchHandler);
      }
    };
    CheckBoxFilterBase2.prototype.foreignKeyFilter = function(args, fColl, mPredicate) {
      var _this = this;
      var fPredicate = {};
      var filterCollection = [];
      var query = this.foreignKeyQuery.clone();
      this.options.column.dataSource.executeQuery(query.where(mPredicate)).then(function(e) {
        _this.options.column.columnData = e.result;
        _this.parent.notify(generateQuery, {
          predicate: fPredicate,
          column: _this.options.column
        });
        args.ejpredicate = fPredicate.predicate.predicates;
        var fpred = fPredicate.predicate.predicates;
        for (var i = 0; i < fpred.length; i++) {
          filterCollection.push({
            field: fpred[parseInt(i.toString(), 10)].field,
            predicate: "or",
            matchCase: fpred[parseInt(i.toString(), 10)].ignoreCase,
            ignoreAccent: fpred[parseInt(i.toString(), 10)].ignoreAccent,
            operator: fpred[parseInt(i.toString(), 10)].operator,
            value: fpred[parseInt(i.toString(), 10)].value,
            type: _this.options.type
          });
        }
        args.filterCollection = filterCollection.length ? filterCollection : fColl.filter(function(col) {
          return col.field = _this.options.field;
        });
        _this.options.handler(args);
      });
    };
    CheckBoxFilterBase2.prototype.searchBoxClick = function(e) {
      var target = e.target;
      if (target.classList.contains("e-searchclear")) {
        this.sInput.value = target.classList.contains("e-chkcancel-icon") ? "" : this.sInput.value;
        if (this.isCheckboxFilterTemplate) {
          this.parent.notify("refreshCheckbox", {
            event: e
          });
        } else {
          this.refreshCheckboxes();
        }
        this.updateSearchIcon();
        this.sInput.focus();
      }
    };
    CheckBoxFilterBase2.prototype.searchBoxKeyUp = function(e) {
      if (isNullOrUndefined(e) || e.key !== "ArrowUp" && e.key !== "ArrowDown" && e.key !== "Tab" && !(e.key === "Tab" && e.shiftKey)) {
        if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === "Shimmer") {
          this.parent.showMaskRow(void 0, this.dialogObj.element);
        }
        if (this.isCheckboxFilterTemplate) {
          this.parent.notify("refreshCheckbox", {
            event: e
          });
        } else {
          this.refreshCheckboxes();
        }
        this.updateSearchIcon();
      }
    };
    CheckBoxFilterBase2.prototype.updateSearchIcon = function() {
      if (this.sInput.value.length) {
        classList(this.sIcon, ["e-chkcancel-icon"], ["e-search-icon"]);
        if (!isNullOrUndefined(document.body.querySelector(".e-chkcancel-icon"))) {
          document.body.querySelector(".e-chkcancel-icon").setAttribute("title", this.localeObj.getConstant("Clear"));
        }
      } else {
        classList(this.sIcon, ["e-search-icon"], ["e-chkcancel-icon"]);
        if (!isNullOrUndefined(document.body.querySelector(".e-searchclear.e-search-icon"))) {
          document.body.querySelector(".e-searchclear.e-search-icon").setAttribute("title", this.localeObj.getConstant("Search"));
        }
      }
    };
    CheckBoxFilterBase2.prototype.getLocalizedLabel = function(key) {
      return this.localeObj.getConstant(key);
    };
    CheckBoxFilterBase2.prototype.updateDataSource = function() {
      var dataSource = this.options.dataSource;
      var str = "object";
      if (!(dataSource instanceof DataManager)) {
        for (var i = 0; i < dataSource.length; i++) {
          if (typeof dataSource !== str) {
            var obj = {};
            obj[this.options.field] = dataSource[parseInt(i.toString(), 10)];
            dataSource[parseInt(i.toString(), 10)] = obj;
          }
        }
      }
    };
    CheckBoxFilterBase2.prototype.updateModel = function(options) {
      this.options = options;
      this.existingPredicate = options.actualPredicate || {};
      this.options.dataSource = options.dataSource;
      this.options.dataManager = options.dataManager ? options.dataManager : options.dataSource;
      this.updateDataSource();
      this.options.type = options.type;
      this.options.format = options.format || "";
      this.options.ignoreAccent = options.ignoreAccent || false;
      this.options.filteredColumns = options.filteredColumns || this.parent.filterSettings.columns;
      this.options.query = options.query || new Query();
      this.options.allowCaseSensitive = options.allowCaseSensitive || false;
      this.options.uid = options.column.uid;
      this.options.disableHtmlEncode = options.column.disableHtmlEncode || false;
      this.values = {};
      this.localeObj = options.localeObj;
      this.isFiltered = options.filteredColumns.length;
      this.infiniteRenderMod = this.parent.filterSettings && this.parent.filterSettings.enableInfiniteScrolling ? true : false;
      this.infiniteUnloadParentExistPred = this.infiniteRenderMod && this.existingPredicate[this.options.column.field] ? this.existingPredicate[this.options.column.field].slice() : [];
    };
    CheckBoxFilterBase2.prototype.getAndSetChkElem = function(options) {
      this.dlg = this.parent.createElement("div", {
        id: this.id + this.options.type + "_excelDlg",
        attrs: {
          uid: this.options.column.uid
        },
        className: "e-checkboxfilter e-filter-popup"
      });
      this.sBox = this.parent.createElement("div", {
        className: "e-searchcontainer"
      });
      if (!options.hideSearchbox) {
        this.sInput = this.parent.createElement("input", {
          id: this.id + "_SearchBox",
          className: "e-searchinput"
        });
        this.sIcon = this.parent.createElement("span", {
          className: "e-searchclear e-search-icon e-icons e-input-group-icon",
          attrs: {
            type: "text",
            title: this.getLocalizedLabel("Search")
          }
        });
        this.searchBox = this.parent.createElement("span", {
          className: "e-searchbox e-fields"
        });
        this.searchBox.appendChild(this.sInput);
        this.sBox.appendChild(this.searchBox);
        var inputargs = {
          element: this.sInput,
          floatLabelType: "Never",
          properties: {
            placeholder: this.getLocalizedLabel("Search"),
            cssClass: this.parent.cssClass
          }
        };
        Input.createInput(inputargs, this.parent.createElement);
        this.searchBox.querySelector(".e-input-group").appendChild(this.sIcon);
      }
      this.spinner = this.parent.createElement("div", {
        className: "e-spinner"
      });
      this.cBox = this.parent.createElement("div", {
        id: this.id + this.options.type + "_CheckBoxList",
        className: "e-checkboxlist e-fields"
      });
      this.spinner.appendChild(this.cBox);
      this.sBox.appendChild(this.spinner);
      return this.sBox;
    };
    CheckBoxFilterBase2.prototype.showDialog = function(options) {
      var args = {
        requestType: filterBeforeOpen,
        columnName: this.options.field,
        columnType: this.options.type,
        cancel: false
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.notify(cBoxFltrBegin, args);
      if (args.cancel) {
        options.cancel = args.cancel;
        return;
      }
      this.dialogObj = new Dialog({
        visible: false,
        content: this.sBox,
        close: this.closeDialog.bind(this),
        enableRtl: this.parent.enableRtl,
        width: !isNullOrUndefined(parentsUntil(options.target, "e-bigger")) || this.parent.element.classList.contains("e-device") ? 260 : 255,
        target: this.parent.element,
        animationSettings: {
          effect: "None"
        },
        buttons: [{
          click: this.btnClick.bind(this),
          buttonModel: {
            content: this.getLocalizedLabel(this.isExcel ? "OKButton" : "FilterButton"),
            cssClass: this.parent.cssClass ? "e-primary " + this.parent.cssClass : "e-primary",
            isPrimary: true
          }
        }, {
          click: this.btnClick.bind(this),
          buttonModel: {
            cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
            content: this.getLocalizedLabel(this.isExcel ? "CancelButton" : "ClearButton")
          }
        }],
        created: this.dialogCreated.bind(this),
        open: this.dialogOpen.bind(this),
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      var isStringTemplate = "isStringTemplate";
      this.dialogObj["" + isStringTemplate] = true;
      this.renderResponsiveFilter(options);
      var dialogLabel = this.parent.filterSettings && this.parent.filterSettings.type === "CheckBox" ? this.getLocalizedLabel("CheckBoxFilterDialogARIA") : this.getLocalizedLabel("ExcelFilterDialogARIA");
      this.dlg.setAttribute("aria-label", dialogLabel);
      if (options.isResponsiveFilter) {
        var responsiveCnt = document.querySelector(".e-responsive-dialog > .e-dlg-content > .e-mainfilterdiv");
        responsiveCnt.appendChild(this.dlg);
      } else {
        this.parent.element.appendChild(this.dlg);
      }
      this.dialogObj.appendTo(this.dlg);
      this.dialogObj.element.style.maxHeight = options.isResponsiveFilter ? "none" : this.options.height + "px";
      this.dialogObj.show();
      var content2 = this.dialogObj.element.querySelector(".e-dlg-content");
      content2.appendChild(this.sBox);
      this.wireEvents();
      if (!this.parent.enableAdaptiveUI) {
        if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === "Shimmer" && !this.infiniteRenderMod) {
          this.parent.showMaskRow(void 0, this.dialogObj.element);
        }
        if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
          this.showMask();
        }
      } else {
        if (this.parent.enableAdaptiveUI && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
          this.getAllData();
          return;
        }
        if (this.infiniteRenderMod) {
          this.cBox.style.marginTop = this.getListHeight(this.cBox) + "px";
        }
        createSpinner({
          target: this.spinner,
          cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, this.parent.createElement);
        showSpinner(this.spinner);
      }
      this.getAllData();
    };
    CheckBoxFilterBase2.prototype.renderResponsiveFilter = function(options) {
      if (options.isResponsiveFilter) {
        this.dialogObj.buttons = [{}];
        this.dialogObj.position = {
          X: "",
          Y: ""
        };
        this.dialogObj.target = document.querySelector(".e-resfilter > .e-dlg-content > .e-mainfilterdiv");
        this.dialogObj.width = "100%";
      }
    };
    CheckBoxFilterBase2.prototype.dialogCreated = function(e) {
      if (this.options.isResponsiveFilter) {
        this.dialogObj.element.style.left = "0px";
      } else {
        if (!Browser.isDevice) {
          getFilterMenuPostion(this.options.target, this.dialogObj);
        } else {
          this.dialogObj.position = {
            X: "center",
            Y: "center"
          };
        }
      }
      if (this.options.column.showColumnMenu) {
        this.parent.notify(filterDialogCreated, e);
      }
    };
    CheckBoxFilterBase2.prototype.openDialog = function(options) {
      this.updateModel(options);
      this.getAndSetChkElem(options);
      this.showDialog(options);
    };
    CheckBoxFilterBase2.prototype.closeDialog = function() {
      if (this.infiniteRenderMod && this.infinitePermenantLocalData.length && !this.options.isRemote) {
        this.options.dataSource.dataSource.json = this.infinitePermenantLocalData;
      }
      if (this.dialogObj && !this.dialogObj.isDestroyed) {
        this.isBlanks = false;
        var filterTemplateCol = this.options.columns.filter(function(col) {
          return col.getFilterItemTemplate();
        });
        var registeredTemplate = this.parent.registeredTemplate;
        if (filterTemplateCol.length && !isNullOrUndefined(registeredTemplate) && registeredTemplate.filterItemTemplate) {
          this.parent.destroyTemplate(["filterItemTemplate"]);
        }
        if ((this.parent.isReact || this.parent.isVue) && this.parent.destroyTemplate !== void 0) {
          clearReactVueTemplates(this.parent, ["filterItemTemplate"]);
        }
        this.parent.notify(filterMenuClose, {
          field: this.options.field
        });
        this.unWireEvents();
        if (this.parent.isReact && this.options.column.filter && typeof this.options.column.filter.itemTemplate !== "string" && (this.options.column.filter.type === "CheckBox" || this.options.column.filter.type === "Excel")) {
          this.dialogObj.element.querySelector(".e-dlg-content").innerHTML = "";
        }
        this.dialogObj.destroy();
        if (this.dlg && this.dlg.parentElement) {
          remove(this.dlg);
        }
        this.dlg = null;
        this.parent.notify(filterDialogClose, {});
      }
    };
    CheckBoxFilterBase2.prototype.clearFilter = function(col) {
      var args = {
        instance: this,
        handler: this.clearFilter,
        cancel: false
      };
      this.parent.notify(fltrPrevent, args);
      if (args.cancel) {
        return;
      }
      this.options.handler({
        action: "clear-filter",
        field: col ? col.field : this.options.field
      });
    };
    CheckBoxFilterBase2.prototype.btnClick = function(e) {
      if (this.filterState) {
        if (e.target.tagName.toLowerCase() === "input" && e.target.classList.contains("e-searchinput") || e.keyCode === 13) {
          if (!this.isCheckboxFilterTemplate) {
            this.fltrBtnHandler();
          }
        } else {
          var text = e.target.firstChild.textContent.toLowerCase();
          if (this.getLocalizedLabel(this.isExcel ? "OKButton" : "FilterButton").toLowerCase() === text) {
            if (!this.isCheckboxFilterTemplate) {
              this.fltrBtnHandler();
            }
          } else if (this.getLocalizedLabel("ClearButton").toLowerCase() === text) {
            this.clearFilter();
          }
        }
        this.closeDialog();
      } else if (e.target && e.target.firstChild && e.target.firstChild.textContent.toLowerCase() === this.getLocalizedLabel("CancelButton").toLowerCase()) {
        this.closeDialog();
      } else if (!(e.target.tagName.toLowerCase() === "input")) {
        this.clearFilter();
        this.closeDialog();
      }
      if (this.options.column.showColumnMenu) {
        this.parent.notify(afterFilterColumnMenuClose, {});
      }
      if (!isNullOrUndefined(this.parent.focusModule)) {
        this.parent.focusModule.filterfocus();
      }
    };
    CheckBoxFilterBase2.prototype.fltrBtnHandler = function() {
      var _this = this;
      if (this.infiniteRenderMod) {
        this.cBox.innerHTML = "";
        appendChildren(this.cBox, this.infiniteLoadedElem.slice());
      }
      var checked = [].slice.call(this.cBox.querySelectorAll(".e-check:not(.e-selectall):not(.e-add-current)"));
      var check = checked;
      var optr = "equal";
      var ddlValue = this.dialogObj.element.querySelector(".e-dropdownlist");
      if (ddlValue) {
        this.options.operator = optr = ddlValue.ej2_instances[0].value;
      }
      this.isMenuNotEqual = this.options.operator === "notequal";
      var searchInput;
      if (!this.options.hideSearchbox) {
        searchInput = this.searchBox.querySelector(".e-searchinput");
      }
      var caseSen = this.options.allowCaseSensitive;
      var defaults = {
        field: this.options.field,
        predicate: this.isMenuNotEqual ? "and" : "or",
        uid: this.options.uid,
        operator: optr,
        type: this.options.type,
        matchCase: caseSen,
        ignoreAccent: this.options.ignoreAccent
      };
      var isNotEqual = this.itemsCnt !== checked.length && this.itemsCnt - checked.length < checked.length;
      if (isNotEqual && searchInput && searchInput.value === "") {
        optr = this.isMenuNotEqual ? "equal" : "notequal";
        checked = [].slice.call(this.cBox.querySelectorAll(".e-uncheck:not(.e-selectall)"));
        defaults.predicate = this.isMenuNotEqual ? "or" : "and";
        defaults.operator = optr;
      }
      var value;
      var val;
      var length;
      var fObj;
      var coll = [];
      if (checked.length !== this.itemsCnt || searchInput && searchInput.value && searchInput.value !== "" || this.infiniteRenderMod) {
        if (!this.infiniteRenderMod) {
          for (var i = 0; i < checked.length; i++) {
            value = this.values[parentsUntil(checked[parseInt(i.toString(), 10)], "e-ftrchk").getAttribute("uid")];
            fObj = extend({}, {
              value
            }, defaults);
            if (value && !value.toString().length) {
              fObj.operator = isNotEqual ? "notequal" : "equal";
            }
            if (value === "" || isNullOrUndefined(value)) {
              coll = coll.concat(CheckBoxFilterBase2.generateNullValuePredicates(defaults));
            } else {
              coll.push(fObj);
            }
            this.notifyFilterPrevEvent(fObj);
          }
        } else if (this.infiniteRenderMod) {
          this.infiniteFltrBtnHandler(coll);
        }
        if ((this.options.type === "date" || this.options.type === "datetime") && check.length) {
          length = check.length - 1;
          val = this.values[parentsUntil(check[parseInt(length.toString(), 10)], "e-ftrchk").getAttribute("uid")];
          if (isNullOrUndefined(val) && isNotEqual) {
            coll.push({
              field: defaults.field,
              matchCase: defaults.matchCase,
              operator: "equal",
              predicate: "and",
              value: null
            });
          }
        }
        var addCurrSelection = this.infiniteRenderMod ? this.sBox.querySelector(".e-add-current") : this.cBox.querySelector(".e-add-current");
        if (addCurrSelection && addCurrSelection.classList.contains("e-check")) {
          var existingPredicate_1 = this.existingPredicate[this.options.field];
          if (existingPredicate_1) {
            var _loop_1 = function(j2) {
              if (!coll.some(function(data) {
                return data.value === existingPredicate_1[parseInt(j2.toString(), 10)].value;
              })) {
                coll.push(existingPredicate_1[parseInt(j2.toString(), 10)]);
              }
            };
            for (var j = 0; j < existingPredicate_1.length; j++) {
              _loop_1(j);
            }
          } else {
            return;
          }
        }
        if (!this.infiniteRenderMod) {
          this.initiateFilter(coll);
        } else if (coll.length) {
          this.initiateFilter(coll);
        } else if (this.sBox.querySelector(".e-selectall").classList.contains("e-check") && !coll.length) {
          var isClearFilter = this.options.filteredColumns.some(function(value2) {
            return _this.options.field === value2.field;
          });
          if (isClearFilter) {
            this.clearFilter();
          }
        }
      } else {
        var isClearFilter = this.options.filteredColumns.some(function(value2) {
          return _this.options.field === value2.field;
        });
        if (isClearFilter) {
          this.clearFilter();
        }
      }
    };
    CheckBoxFilterBase2.prototype.infiniteFltrBtnHandler = function(coll) {
      var value;
      if (this.infiniteManualSelectMaintainPred.length) {
        for (var i = 0; i < this.infiniteManualSelectMaintainPred.length; i++) {
          var pred = this.infiniteManualSelectMaintainPred[i];
          value = pred.value + "";
          if (value === "" || isNullOrUndefined(value)) {
            var dummyDefaults = {
              predicate: pred.predicate,
              field: pred.field,
              type: pred.type,
              uid: pred.uid,
              operator: pred.operator,
              matchCase: pred.matchCase,
              ignoreAccent: pred.ignoreAccent
            };
            coll.push.apply(coll, CheckBoxFilterBase2.generateNullValuePredicates(dummyDefaults));
          } else {
            coll.push(this.infiniteManualSelectMaintainPred[i]);
          }
          this.notifyFilterPrevEvent(this.infiniteManualSelectMaintainPred[i]);
        }
      }
      if (!this.localInfiniteSelectAllClicked && this.sInput.value === "" && !(!this.options.parentCurrentViewDataCount && coll.length)) {
        for (var i = 0; i < this.infiniteUnloadParentExistPred.length; i++) {
          coll.unshift(this.infiniteUnloadParentExistPred[i]);
          this.notifyFilterPrevEvent(this.existingPredicate[this.options.field][i]);
        }
      }
      if (this.sInput.value !== "" && (!this.localInfiniteSelectAllClicked || this.infiniteLocalSelectAll)) {
        this.infiniteSearchPred["predicate"] = "or";
        coll.unshift(this.infiniteSearchPred);
        this.notifyFilterPrevEvent(this.infiniteSearchPred);
      }
    };
    CheckBoxFilterBase2.prototype.notifyFilterPrevEvent = function(predicate) {
      var args = {
        instance: this,
        handler: this.fltrBtnHandler,
        arg1: predicate.field,
        arg2: predicate.predicate,
        arg3: predicate.operator,
        arg4: predicate.matchCase,
        arg5: predicate.ignoreAccent,
        arg6: predicate.value,
        cancel: false
      };
      this.parent.notify(fltrPrevent, args);
      if (args.cancel) {
        return;
      }
    };
    CheckBoxFilterBase2.generateNullValuePredicates = function(defaults) {
      var coll = [];
      if (defaults.type === "string") {
        coll.push({
          field: defaults.field,
          ignoreAccent: defaults.ignoreAccent,
          matchCase: defaults.matchCase,
          operator: defaults.operator,
          predicate: defaults.predicate,
          value: ""
        });
      }
      coll.push({
        field: defaults.field,
        matchCase: defaults.matchCase,
        operator: defaults.operator,
        predicate: defaults.predicate,
        value: null
      });
      coll.push({
        field: defaults.field,
        matchCase: defaults.matchCase,
        operator: defaults.operator,
        predicate: defaults.predicate,
        value: void 0
      });
      return coll;
    };
    CheckBoxFilterBase2.prototype.initiateFilter = function(fColl) {
      var firstVal = fColl[0];
      var predicate;
      if (!isNullOrUndefined(firstVal)) {
        predicate = firstVal.ejpredicate ? firstVal.ejpredicate : new Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchCase, firstVal.ignoreAccent);
        for (var j = 1; j < fColl.length; j++) {
          predicate = fColl[parseInt(j.toString(), 10)].ejpredicate !== void 0 ? predicate[fColl[parseInt(j.toString(), 10)].predicate](fColl[parseInt(j.toString(), 10)].ejpredicate) : predicate[fColl[parseInt(j.toString(), 10)].predicate](fColl[parseInt(j.toString(), 10)].field, fColl[parseInt(j.toString(), 10)].operator, fColl[parseInt(j.toString(), 10)].value, !fColl[parseInt(j.toString(), 10)].matchCase, fColl[parseInt(j.toString(), 10)].ignoreAccent);
        }
        var args = {
          action: "filtering",
          filterCollection: fColl,
          field: this.options.field,
          ejpredicate: Predicate.or(predicate)
        };
        this.options.handler(args);
      }
    };
    CheckBoxFilterBase2.prototype.isForeignColumn = function(col) {
      return col.isForeignColumn ? col.isForeignColumn() : false;
    };
    CheckBoxFilterBase2.prototype.refreshCheckboxes = function() {
      var _this = this;
      var val = this.sInput.value;
      var column = this.options.column;
      var query = this.isForeignColumn(column) ? this.foreignKeyQuery.clone() : this.options.query.clone();
      var foreignQuery = this.options.query.clone();
      var pred = query.queries.filter(function(e) {
        return e && e.fn === "onWhere";
      })[0];
      query.queries = [];
      foreignQuery.queries = [];
      var parsed = this.options.type !== "string" && parseFloat(val) ? parseFloat(val) : val;
      var operator = this.options.isRemote ? this.options.type === "string" ? "contains" : "equal" : this.options.type ? "contains" : "equal";
      var matchCase = true;
      var ignoreAccent = this.options.ignoreAccent;
      var field = this.isForeignColumn(column) ? column.foreignKeyValue : column.field;
      parsed = parsed === "" || parsed === void 0 ? void 0 : parsed;
      var coll = [];
      var defaults = {
        field,
        predicate: "or",
        uid: this.options.uid,
        operator: "equal",
        type: this.options.type,
        matchCase,
        ignoreAccent
      };
      var predicte;
      var moduleName = this.options.dataManager.adaptor.getModuleName;
      if (this.options.type === "boolean") {
        if (parsed !== void 0 && this.getLocalizedLabel("FilterTrue").toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
          parsed = "true";
        } else if (parsed !== void 0 && this.getLocalizedLabel("FilterFalse").toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
          parsed = "false";
        }
        if (parsed !== void 0 && this.getLocalizedLabel("FilterTrue").toLowerCase().indexOf(parsed.toLowerCase()) !== -1 && moduleName) {
          parsed = moduleName() === "ODataAdaptor" || "ODataV4Adaptor" ? true : "true";
        } else if (parsed !== void 0 && this.getLocalizedLabel("FilterFalse").toLowerCase().indexOf(parsed.toLowerCase()) !== -1 && moduleName) {
          parsed = moduleName() === "ODataAdaptor" || "ODataV4Adaptor" ? false : "false";
        }
        operator = "equal";
      }
      if ((this.options.type === "date" || this.options.type === "datetime" || this.options.type === "dateonly") && this.options.format) {
        var intl = new Internationalization();
        var format = typeof this.options.format === "string" ? this.options.format : this.options.format.format;
        if (format) {
          parsed = intl.parseDate(val, {
            format
          }) || new Date(val);
        } else {
          parsed = new Date(val);
        }
        if (this.options.type === "dateonly") {
          parsed = parsed.getFullYear() + "-" + padZero(parsed.getMonth() + 1) + "-" + padZero(parsed.getDate());
        }
      }
      this.infiniteSearchValChange = true;
      this.infiniteLoadedElem = [];
      this.infiniteLocalSelectAll = true;
      this.localInfiniteSelectAllClicked = false;
      this.localInfiniteSelectionInteracted = false;
      this.infiniteSkipCnt = 0;
      this.infiniteDataCount = 0;
      this.infiniteManualSelectMaintainPred = [];
      if (this.sInput.value === "") {
        this.infiniteUnloadParentExistPred = this.infiniteRenderMod && this.existingPredicate[this.options.column.field] ? this.existingPredicate[this.options.column.field].slice() : [];
      } else {
        this.infiniteUnloadParentExistPred = [];
      }
      this.addDistinct(query);
      var args = {
        requestType: filterSearchBegin,
        filterModel: this,
        columnName: field,
        column,
        operator,
        matchCase,
        ignoreAccent,
        filterChoiceCount: null,
        query,
        value: parsed
      };
      if (this.infiniteRenderMod && this.parent.filterSettings.itemsCount) {
        args.filterChoiceCount = this.parent.filterSettings.itemsCount;
      }
      this.parent.trigger(actionBegin, args, function(filterargs) {
        filterargs.operator = filterargs.operator;
        predicte = new Predicate(field, filterargs.operator, args.value, filterargs.matchCase, filterargs.ignoreAccent);
        if (_this.options.type === "date" || _this.options.type === "datetime" || _this.options.type === "dateonly") {
          operator = "equal";
          var filterObj = {
            field,
            operator,
            value: parsed,
            matchCase,
            ignoreAccent
          };
          if (!isNullOrUndefined(parsed)) {
            predicte = getDatePredicate(filterObj, _this.options.type);
          }
        }
        if (val && typeof val === "string" && _this.isBlanks && _this.getLocalizedLabel("Blanks").toLowerCase().indexOf(val.toLowerCase()) >= 0) {
          coll = coll.concat(CheckBoxFilterBase2.generateNullValuePredicates(defaults));
          var emptyValPredicte = CheckBoxFilterBase2.generatePredicate(coll);
          emptyValPredicte.predicates.push(predicte);
          predicte = emptyValPredicte;
          query.where(emptyValPredicte);
        } else if (val.length) {
          predicte = !isNullOrUndefined(pred) ? predicte.and(pred.e) : predicte;
          query.where(predicte);
        } else if (!isNullOrUndefined(pred)) {
          predicte = pred.e;
          query.where(pred.e);
        }
        _this.infiniteSearchPred = predicte;
        filterargs.filterChoiceCount = !isNullOrUndefined(filterargs.filterChoiceCount) ? filterargs.filterChoiceCount : 1e3;
        if (_this.infiniteRenderMod && _this.parent.filterSettings.itemsCount !== filterargs.filterChoiceCount) {
          _this.parent.filterSettings.itemsCount = args.filterChoiceCount;
        }
        var fPredicate = {};
        showSpinner(_this.spinner);
        _this.renderEmpty = false;
        if (_this.isForeignColumn(column) && val.length) {
          var colData = "result" in column.dataSource ? new DataManager(column.dataSource.result) : column.dataSource;
          colData.executeQuery(query).then(function(e) {
            var columnData = _this.options.column.columnData;
            _this.options.column.columnData = e.result;
            _this.parent.notify(generateQuery, {
              predicate: fPredicate,
              column
            });
            if (fPredicate.predicate.predicates.length) {
              foreignQuery.where(fPredicate.predicate);
            } else {
              _this.renderEmpty = true;
            }
            _this.options.column.columnData = columnData;
            if (_this.infiniteRenderMod) {
              _this.infiniteInitialLoad = isNullOrUndefined(_this.fullData) ? true : false;
              _this.makeInfiniteScrollRequest(foreignQuery);
              foreignQuery.requiresCount();
            } else {
              foreignQuery.take(filterargs.filterChoiceCount);
            }
            _this.search(filterargs, foreignQuery);
          });
        } else {
          if (_this.infiniteRenderMod && _this.parent.filterSettings.itemsCount) {
            _this.infiniteInitialLoad = isNullOrUndefined(_this.fullData) ? true : false;
            _this.makeInfiniteScrollRequest(query);
            query.requiresCount();
          } else {
            query.take(filterargs.filterChoiceCount);
          }
          _this.search(filterargs, query);
        }
      });
    };
    CheckBoxFilterBase2.prototype.search = function(args, query) {
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        this.filterEvent(args, query);
      } else {
        this.processSearch(query);
      }
    };
    CheckBoxFilterBase2.prototype.getPredicateFromCols = function(columns, isExecuteLocal) {
      var predicates = CheckBoxFilterBase2.getPredicate(columns, isExecuteLocal);
      var predicateList = [];
      var fPredicate = {};
      var isGrid = this.parent.getForeignKeyColumns !== void 0;
      var foreignColumn = isGrid ? this.parent.getForeignKeyColumns() : [];
      for (var _i = 0, _a = Object.keys(predicates); _i < _a.length; _i++) {
        var prop = _a[_i];
        var col = void 0;
        if (isGrid && !this.parent.getColumnByField(prop)) {
          col = getColumnByForeignKeyValue(prop, foreignColumn);
        }
        if (col) {
          this.parent.notify(generateQuery, {
            predicate: fPredicate,
            column: col
          });
          if (fPredicate.predicate.predicates.length) {
            predicateList.push(Predicate.or(fPredicate.predicate.predicates));
          }
        } else {
          predicateList.push(predicates["" + prop]);
        }
      }
      return predicateList.length && Predicate.and(predicateList);
    };
    CheckBoxFilterBase2.prototype.getQuery = function() {
      return this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
    };
    CheckBoxFilterBase2.prototype.getAllData = function() {
      var _this = this;
      this.customQuery = false;
      var query = this.getQuery();
      query.requiresCount();
      this.addDistinct(query);
      var args = {
        requestType: filterChoiceRequest,
        query,
        filterChoiceCount: null
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      if (this.infiniteRenderMod && this.parent.filterSettings.itemsCount) {
        args.filterChoiceCount = this.parent.filterSettings.itemsCount;
      }
      this.parent.trigger(actionBegin, args, function(args2) {
        args2.filterChoiceCount = !isNullOrUndefined(args2.filterChoiceCount) ? args2.filterChoiceCount : 1e3;
        if (_this.infiniteRenderMod && _this.parent.filterSettings.itemsCount !== args2.filterChoiceCount) {
          _this.parent.filterSettings.itemsCount = args2.filterChoiceCount;
        }
        if (!_this.infiniteRenderMod) {
          query.take(args2.filterChoiceCount);
        }
        if (!args2.query.distincts.length || _this.infiniteRenderMod) {
          _this.customQuery = true;
          _this.queryGenerate(query);
        }
        if (_this.infiniteRenderMod) {
          _this.infiniteInitialLoad = isNullOrUndefined(_this.fullData) ? true : false;
          _this.makeInfiniteScrollRequest(query);
        }
        if (_this.parent.dataSource && "result" in _this.parent.dataSource) {
          _this.filterEvent(args2, query);
        } else {
          _this.processDataOperation(query, true);
        }
      });
    };
    CheckBoxFilterBase2.prototype.addDistinct = function(query) {
      var _this = this;
      var _a;
      var filteredColumn = DataUtil.distinct(this.options.filteredColumns, "field");
      if (filteredColumn.indexOf(this.options.column.field) <= -1) {
        filteredColumn = filteredColumn.concat(this.options.column.field);
      }
      if (!this.infiniteRenderMod) {
        query.distinct(filteredColumn);
      }
      if (this.infiniteRenderMod && !this.options.isRemote && this.sInput.value === "") {
        this.options.dataSource = this.options.dataSource instanceof DataManager ? this.options.dataSource : new DataManager(this.options.dataSource);
        this.infinitePermenantLocalData = this.options.dataSource.dataSource.json.slice();
        this.options.dataSource.dataSource.json = DataUtil.distinct((_a = this.options.parentFilteredLocalRecords).concat.apply(_a, this.infinitePermenantLocalData), this.options.column.field, true);
        if (this.isForeignColumn(this.options.column)) {
          this.options.column.dataSource = this.options.column.dataSource instanceof DataManager ? this.options.column.dataSource : new DataManager(this.options.column.dataSource);
          this.options.dataSource.dataSource.json = this.options.dataSource.dataSource.json.map(function(item, i) {
            return Object.assign({}, item, _this.options.column.dataSource.dataSource.json[i]);
          });
        }
      } else if (this.infiniteRenderMod && this.options.isRemote) {
        query.select(this.options.column.field);
        query.sortBy(this.options.column.field, "ascending");
        var moduleName = this.options.dataManager.adaptor.getModuleName;
        if (moduleName && moduleName() && (moduleName() === "ODataV4Adaptor" || moduleName() === "WebApiAdaptor" || moduleName() === "CustomDataAdaptor" || moduleName() === "GraphQLAdaptor" || moduleName() === "ODataAdaptor")) {
          query.distinct(filteredColumn);
        }
      }
      return query;
    };
    CheckBoxFilterBase2.prototype.filterEvent = function(args, query) {
      var _this = this;
      var defObj = eventPromise(args, query);
      this.parent.trigger(dataStateChange, defObj.state);
      var def = defObj.deffered;
      def.promise.then(function(e) {
        _this.dataSuccess(e);
      });
    };
    CheckBoxFilterBase2.prototype.infiniteScrollMouseKeyDownHandler = function() {
      EventHandler.remove(this.cBox, "scroll", this.infiniteScrollHandler);
    };
    CheckBoxFilterBase2.prototype.infiniteScrollMouseKeyUpHandler = function(e) {
      var _this = this;
      EventHandler.add(this.cBox, "scroll", this.infiniteScrollHandler, this);
      var target = this.cBox;
      if (target.children.length > 1 && (target.scrollTop >= target.scrollHeight - target.offsetHeight || target.scrollTop <= 0)) {
        this.infiniteScrollHandler();
      }
      Global.timer = setTimeout(function() {
        _this.clickHandler(e);
        Global.timer = null;
      }, 0);
    };
    CheckBoxFilterBase2.prototype.getListHeight = function(element) {
      var listDiv = createElement("div", {
        className: "e-ftrchk",
        styles: "visibility: hidden"
      });
      listDiv.innerHTML = '<div class="e-checkbox-wrapper"><span class="e-frame e-icons e-check"></span><span class="e-label e-checkboxfiltertext">A</div></span>';
      element.appendChild(listDiv);
      var rect = listDiv.getBoundingClientRect();
      element.removeChild(listDiv);
      var listHeight = Math.round(rect.height);
      return listHeight;
    };
    CheckBoxFilterBase2.prototype.getShimmerTemplate = function() {
      return '<span class="e-mask e-skeleton e-skeleton-text e-shimmer-wave"></span>';
    };
    CheckBoxFilterBase2.prototype.showMask = function() {
      var maskRowCount = 5;
      var maskItemHeight;
      var maskList = this.parent.createElement("div", {
        id: this.id + this.options.type + "_CheckBoxMaskList",
        className: "e-checkboxlist e-fields e-infinite-list e-masklist",
        styles: "z-index: 10;"
      });
      var wrapperElem = this.cBox;
      this.removeMask();
      if (wrapperElem) {
        var computedStyle = getComputedStyle(wrapperElem);
        var liHeight = this.getListHeight(wrapperElem);
        var height = wrapperElem.children.length ? parseInt(computedStyle.height, 10) : Math.floor(parseInt(computedStyle.height.split("px")[0], 10)) - 5;
        if (this.parent.enableAdaptiveUI && this.infiniteRenderMod) {
          maskList.style.height = height - liHeight + "px";
          this.dlg.querySelector(".e-dlg-content").style.overflow = "hidden";
        }
        var backgroundColor = this.isExcel && !wrapperElem.children.length && !this.dlg.classList.contains("e-excelfilter") ? "" : getComputedStyle(this.dlg.querySelector(".e-dlg-content")).backgroundColor;
        maskList.style.cssText = "width: " + computedStyle.width + "; min-height: " + computedStyle.minHeight + "; height: " + height + "px; margin: " + computedStyle.margin + "; border-style: " + computedStyle.borderStyle + "; border-width: " + computedStyle.borderWidth + "; border-color: " + computedStyle.borderColor + "; position: absolute; background-color: " + backgroundColor + ";";
        maskRowCount = Math.floor(height / liHeight);
        maskRowCount = wrapperElem.children.length > maskRowCount ? wrapperElem.children.length : maskRowCount;
        maskItemHeight = liHeight + "px";
      }
      var maskTemplate = '<div class="e-ftrchk e-mask-ftrchk" style="width: 100%; height:' + maskItemHeight + ';"><div class="e-checkbox-wrapper" style="width: 100%;"><input class="e-chk-hidden">' + this.getShimmerTemplate() + this.getShimmerTemplate() + "</div></div>";
      maskList.innerHTML = "";
      if (!wrapperElem.children.length) {
        this.spinner.insertAdjacentHTML("beforebegin", maskTemplate);
        var maskSpan = [].slice.call(this.spinner.parentElement.querySelectorAll(".e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)"));
        maskSpan[0].classList.add("e-mask-checkbox-filter-intent");
        maskSpan[1].classList.add("e-mask-checkbox-filter-span-intent");
      }
      this.spinner.insertBefore(maskList, this.cBox);
      for (var i = 0; maskRowCount && i < maskRowCount; i++) {
        maskList.innerHTML += maskTemplate;
        var maskSpan = [].slice.call(maskList.querySelectorAll(".e-mask:not(.e-mask-checkbox-filter-intent):not(.e-mask-checkbox-filter-span-intent)"));
        maskSpan[0].classList.add("e-mask-checkbox-filter-intent");
        maskSpan[1].classList.add("e-mask-checkbox-filter-span-intent");
      }
      if (this.cBox) {
        maskList.scrollTop = this.cBox.scrollTop;
      }
    };
    CheckBoxFilterBase2.prototype.removeMask = function() {
      var maskLists = this.dialogObj.element.querySelectorAll(".e-mask-ftrchk");
      if (maskLists.length) {
        for (var i = 0; i < maskLists.length; i++) {
          remove(maskLists[i]);
        }
      }
      var maskParent = this.dialogObj.element.querySelector(".e-checkboxlist.e-masklist");
      if (maskParent) {
        remove(this.dialogObj.element.querySelector(".e-checkboxlist.e-masklist"));
      }
    };
    CheckBoxFilterBase2.prototype.infiniteScrollHandler = function() {
      var target = this.cBox;
      if (target.scrollTop >= target.scrollHeight - target.offsetHeight && !this.infiniteQueryExecutionPending && this.infiniteLoadedElem.length <= this.infiniteSkipCnt + this.parent.filterSettings.itemsCount && this.cBox.children.length === this.parent.filterSettings.itemsCount * 3 && (!this.infiniteDataCount || this.infiniteDataCount > this.infiniteSkipCnt + this.parent.filterSettings.itemsCount)) {
        this.makeInfiniteScrollRequest();
        this.prevInfiniteScrollDirection = "down";
      } else if (target.scrollTop >= target.scrollHeight - target.offsetHeight && !this.infiniteQueryExecutionPending && this.infiniteLoadedElem.length > this.infiniteSkipCnt + this.parent.filterSettings.itemsCount && this.cBox.children.length === this.parent.filterSettings.itemsCount * 3) {
        this.infiniteRemoveElements([].slice.call(this.cBox.children).splice(0, this.parent.filterSettings.itemsCount));
        this.infiniteSkipCnt += this.prevInfiniteScrollDirection === "down" ? this.parent.filterSettings.itemsCount : this.parent.filterSettings.itemsCount * 3;
        appendChildren(this.cBox, this.infiniteLoadedElem.slice(this.infiniteSkipCnt, this.parent.filterSettings.itemsCount + this.infiniteSkipCnt));
        this.prevInfiniteScrollDirection = "down";
      } else if (target.scrollTop === 0 && !this.infiniteInitialLoad && !this.infiniteSearchValChange && this.infiniteSkipCnt && this.infiniteLoadedElem.length && this.infiniteLoadedElem.length > this.parent.filterSettings.itemsCount * 3 && this.cBox.children.length === this.parent.filterSettings.itemsCount * 3) {
        this.infiniteRemoveElements([].slice.call(this.cBox.children).splice(this.parent.filterSettings.itemsCount * 2, this.parent.filterSettings.itemsCount));
        this.infiniteSkipCnt -= this.prevInfiniteScrollDirection === "up" ? this.parent.filterSettings.itemsCount : this.parent.filterSettings.itemsCount * 3;
        this.infiniteAppendElements([].slice.call(this.infiniteLoadedElem.slice(this.infiniteSkipCnt, this.infiniteSkipCnt + this.parent.filterSettings.itemsCount)));
        this.cBox.scrollTop = this.infiniteScrollAppendDiff;
        this.prevInfiniteScrollDirection = "up";
      } else if (target.scrollTop === 0 && !this.infiniteInitialLoad && !this.infiniteSearchValChange && this.infiniteSkipCnt && this.infiniteLoadedElem.length && this.cBox.children.length < this.parent.filterSettings.itemsCount * 3) {
        this.infiniteRemoveElements([].slice.call(this.cBox.children).splice(this.parent.filterSettings.itemsCount * 2, this.infiniteDataCount % this.parent.filterSettings.itemsCount));
        this.infiniteSkipCnt = (Math.floor(this.infiniteDataCount / this.parent.filterSettings.itemsCount) - 3) * this.parent.filterSettings.itemsCount;
        this.infiniteAppendElements([].slice.call(this.infiniteLoadedElem.slice(this.infiniteSkipCnt, this.infiniteSkipCnt + this.parent.filterSettings.itemsCount)));
        this.cBox.scrollTop = this.infiniteScrollAppendDiff;
        this.prevInfiniteScrollDirection = "up";
      }
    };
    CheckBoxFilterBase2.prototype.infiniteRemoveElements = function(removeElem) {
      for (var i = 0; i < removeElem.length; i++) {
        remove(removeElem[i]);
      }
    };
    CheckBoxFilterBase2.prototype.infiniteAppendElements = function(appendElem) {
      for (var i = 0; i < appendElem.length; i++) {
        this.cBox.insertBefore(appendElem[i], this.cBox.children[i]);
      }
    };
    CheckBoxFilterBase2.prototype.makeInfiniteScrollRequest = function(query) {
      var _this = this;
      if (!this.infiniteInitialLoad && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
        setTimeout(function() {
          if (_this.infiniteQueryExecutionPending) {
            _this.showMask();
          }
        }, 500);
      } else if (!this.infiniteInitialLoad) {
        createSpinner({
          target: this.spinner,
          cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, this.parent.createElement);
        showSpinner(this.spinner);
      }
      var fName = "fn";
      if (this.infiniteQuery && this.infiniteQuery.queries && this.infiniteQuery.queries.length) {
        for (var i = 0; i < this.infiniteQuery.queries.length; i++) {
          if (this.infiniteQuery.queries[i]["" + fName] === "onTake" || this.infiniteQuery.queries[i]["" + fName] === "onSkip") {
            this.infiniteQuery.queries.splice(i, 1);
            i--;
          }
        }
      }
      var existQuery = query ? true : false;
      query = query ? query : this.infiniteQuery;
      if (this.infiniteInitialLoad || this.infiniteSearchValChange) {
        this.infiniteSkipCnt = 0;
      } else {
        this.infiniteSkipCnt += this.parent.filterSettings.itemsCount;
      }
      query.skip(this.infiniteSkipCnt);
      if (this.infiniteInitialLoad || this.infiniteSearchValChange) {
        query.take(this.parent.filterSettings.itemsCount * 3);
        this.infiniteSkipCnt += this.parent.filterSettings.itemsCount * 2;
      } else {
        query.take(this.parent.filterSettings.itemsCount);
      }
      if (!existQuery) {
        this.processDataOperation(query);
        this.infiniteQueryExecutionPending = true;
      }
    };
    CheckBoxFilterBase2.prototype.processDataOperation = function(query, isInitial) {
      var _this = this;
      this.options.dataSource = this.options.dataSource instanceof DataManager ? this.options.dataSource : new DataManager(this.options.dataSource);
      var allPromise = [];
      var runArray = [];
      if (this.isForeignColumn(this.options.column) && isInitial) {
        var colData = "result" in this.options.column.dataSource ? new DataManager(this.options.column.dataSource.result) : this.options.column.dataSource;
        this.foreignKeyQuery.params = query.params;
        allPromise.push(colData.executeQuery(this.foreignKeyQuery));
        runArray.push(function(data) {
          return _this.foreignKeyData = data;
        });
      }
      if (this.infiniteRenderMod) {
        this.infiniteQuery = query.clone();
        if (this.infiniteInitialLoad) {
          this.cBox.classList.add("e-checkbox-infinitescroll");
          EventHandler.add(this.cBox, "scroll", this.infiniteScrollHandler, this);
          EventHandler.add(this.cBox, "mouseup", this.infiniteScrollMouseKeyUpHandler, this);
          EventHandler.add(this.cBox, "mousedown", this.infiniteScrollMouseKeyDownHandler, this);
        } else if (this.infiniteSearchValChange) {
          this.cBox.innerHTML = "";
        }
      }
      if (this.infiniteRenderMod && this.infiniteInitialLoad && !this.options.isRemote) {
        var field = this.isForeignColumn(this.options.column) ? this.options.foreignKeyValue : this.options.column.field;
        this.options.dataSource.executeQuery(new Query().sortBy(field, DataUtil.fnAscending)).then(function(e) {
          _this.options.dataSource.dataSource.json = e.result;
          _this.executeQueryOperations(query, allPromise, runArray);
        });
      } else {
        this.executeQueryOperations(query, allPromise, runArray);
      }
    };
    CheckBoxFilterBase2.prototype.executeQueryOperations = function(query, allPromise, runArray) {
      var _this = this;
      allPromise.push(this.options.dataSource.executeQuery(query));
      runArray.push(this.dataSuccess.bind(this));
      var i = 0;
      Promise.all(allPromise).then(function(e) {
        _this.infiniteQueryExecutionPending = _this.infiniteRenderMod ? false : _this.infiniteQueryExecutionPending;
        for (var j = 0; j < e.length; j++) {
          _this.infiniteDataCount = _this.infiniteRenderMod && !_this.infiniteDataCount ? e[j].count : _this.infiniteDataCount;
          runArray[i++](e[parseInt(j.toString(), 10)].result);
        }
      }).catch(function() {
        if (_this.infiniteRenderMod && _this.parent.filterSettings && _this.parent.filterSettings.loadingIndicator === "Shimmer") {
          _this.parent.showMaskRow(void 0, _this.dialogObj.element);
        }
      });
    };
    CheckBoxFilterBase2.prototype.dataSuccess = function(e) {
      if (!this.infiniteInitialLoad && this.infiniteDataCount && (this.infiniteSkipCnt >= this.infiniteDataCount && !this.infiniteSearchValChange || e.length === 0)) {
        return;
      }
      this.fullData = e;
      var args1 = {
        dataSource: this.fullData,
        executeQuery: true,
        field: this.options.field
      };
      this.parent.notify(beforeCheckboxRenderer, args1);
      if (args1.executeQuery) {
        var query = new Query();
        if (!this.customQuery) {
          this.isExecuteLocal = true;
          this.queryGenerate(query);
          this.isExecuteLocal = false;
        }
        var result = new DataManager(args1.dataSource).executeLocal(query);
        var col = this.options.column;
        this.filteredData = CheckBoxFilterBase2.getDistinct(result, this.options.field, col, this.foreignKeyData, this).records || [];
      }
      var data = args1.executeQuery ? this.filteredData : args1.dataSource;
      this.processDataSource(null, true, data, args1);
      if (this.sInput && (this.infiniteRenderMod && this.infiniteInitialLoad || !this.infiniteRenderMod)) {
        this.sInput.focus();
      }
      if (this.infiniteInitialLoad || this.infiniteSearchValChange) {
        this.infiniteInitialLoad = false;
        this.infiniteSearchValChange = false;
      }
      var args = {
        requestType: filterAfterOpen,
        columnName: this.options.field,
        columnType: this.options.type
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.notify(cBoxFltrComplete, args);
      if (this.isCheckboxFilterTemplate) {
        hideSpinner(this.spinner);
      }
    };
    CheckBoxFilterBase2.prototype.queryGenerate = function(query) {
      if (this.parent.searchSettings && this.parent.searchSettings.key.length) {
        var moduleName = this.options.dataManager.adaptor.getModuleName;
        if (!isNullOrUndefined(this.parent.getDataModule) && moduleName && moduleName() === "ODataV4Adaptor") {
          this.parent.getDataModule().searchQuery(query);
        } else {
          var searchSettings = this.parent.searchSettings;
          var fields = searchSettings.fields.length ? searchSettings.fields : this.options.columns.map(function(f) {
            return f.field;
          });
          query.search(searchSettings.key, fields, searchSettings.operator, searchSettings.ignoreCase, searchSettings.ignoreAccent);
        }
      }
      if (this.options.filteredColumns.length) {
        var cols = [];
        for (var i = 0; i < this.options.filteredColumns.length; i++) {
          var filterColumn = this.options.filteredColumns[parseInt(i.toString(), 10)];
          if (this.options.uid) {
            filterColumn.uid = filterColumn.uid || this.parent.getColumnByField(filterColumn.field).uid;
            if (filterColumn.uid !== this.options.uid) {
              cols.push(this.options.filteredColumns[parseInt(i.toString(), 10)]);
            }
          } else {
            if (filterColumn.field !== this.options.field) {
              cols.push(this.options.filteredColumns[parseInt(i.toString(), 10)]);
            }
          }
        }
        var predicate = this.getPredicateFromCols(cols, this.isExecuteLocal);
        if (predicate) {
          query.where(predicate);
        }
      }
    };
    CheckBoxFilterBase2.prototype.processDataSource = function(query, isInitial, dataSource, args) {
      showSpinner(this.spinner);
      this.isExecuteLocal = true;
      this.updateResult();
      this.isExecuteLocal = false;
      var args1 = {
        dataSource: this.fullData,
        isCheckboxFilterTemplate: false,
        column: this.options.column,
        element: this.cBox,
        type: this.options.type,
        format: this.options.type,
        btnObj: this.options.isResponsiveFilter ? null : this.dialogObj.btnObj[0],
        searchBox: this.searchBox
      };
      this.parent.notify(beforeCheckboxfilterRenderer, args1);
      this.isCheckboxFilterTemplate = args1.isCheckboxFilterTemplate;
      if (!this.isCheckboxFilterTemplate) {
        this.createFilterItems(dataSource, isInitial, args);
      } else if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
        this.removeMask();
      }
    };
    CheckBoxFilterBase2.prototype.processSearch = function(query) {
      this.processDataOperation(query);
    };
    CheckBoxFilterBase2.prototype.updateResult = function() {
      this.result = {};
      var predicate = this.infiniteRenderMod && this.existingPredicate[this.options.field] ? this.getPredicateFromCols(this.existingPredicate[this.options.field], this.isExecuteLocal) : this.getPredicateFromCols(this.options.filteredColumns, this.isExecuteLocal);
      var query = new Query();
      if (predicate) {
        query.where(predicate);
      }
      this.parent.notify(beforeCheckboxRendererQuery, {
        query
      });
      var result = new DataManager(this.fullData).executeLocal(query);
      for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var res = result_1[_i];
        this.result[getObject(this.options.field, res)] = true;
      }
    };
    CheckBoxFilterBase2.prototype.clickHandler = function(e) {
      var _a;
      if (!isNullOrUndefined(Global.timer)) {
        clearTimeout(Global.timer);
      }
      var target = e.target;
      if (!isNullOrUndefined(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === "Shimmer" && parentsUntil(target, "e-mask-ftrchk")) {
        return;
      }
      var elem = parentsUntil(target, "e-checkbox-wrapper");
      if (parentsUntil(target, "e-searchbox")) {
        this.searchBoxClick(e);
      }
      if (elem && !this.isCheckboxFilterTemplate) {
        var selectAll2 = elem.querySelector(".e-selectall");
        if (selectAll2) {
          this.updateAllCBoxes(!selectAll2.classList.contains("e-check"));
        } else {
          toogleCheckbox(elem.parentElement);
          if (this.infiniteRenderMod && !elem.parentElement.querySelector(".e-add-current")) {
            this.localInfiniteSelectionInteracted = true;
            var caseSen = this.options.allowCaseSensitive;
            var span = elem.parentElement.querySelector(".e-frame");
            var input2 = span.previousSibling;
            var optr = input2.checked ? "equal" : "notequal";
            var pred = input2.checked ? "or" : "and";
            var defaults = {
              field: this.options.field,
              predicate: pred,
              uid: this.options.uid,
              operator: optr,
              type: this.options.type,
              matchCase: caseSen,
              ignoreAccent: this.options.ignoreAccent
            };
            var value = this.values[parentsUntil(input2, "e-ftrchk").getAttribute("uid")];
            this.updateInfiniteManualSelectPred(defaults, value);
            if (this.infiniteRenderMod && !this.options.isRemote && this.options.parentTotalDataCount && this.infiniteUnloadParentExistPred.length) {
              var predicate = this.getPredicateFromCols((_a = this.options.filteredColumns).concat.apply(_a, this.infiniteManualSelectMaintainPred), true);
              var query = new Query();
              if (predicate) {
                query.where(predicate);
              }
              var result = new DataManager(this.infinitePermenantLocalData).executeLocal(query);
              if (this.options.parentTotalDataCount !== result.length) {
                this.options.parentTotalDataCount = result.length;
              }
              if (!this.options.parentTotalDataCount && this.infiniteUnloadParentExistPred.length) {
                this.infiniteUnloadParentExistPred = [];
              }
            }
            if (this.infiniteUnloadParentExistPred.length && (this.options.parentTotalDataCount === this.infiniteDataCount || !this.options.parentTotalDataCount)) {
              this.infiniteUnloadParentExistPred = [];
            }
          }
        }
        this.updateIndeterminatenBtn();
        elem.querySelector(".e-chk-hidden").focus();
      }
      this.setFocus(parentsUntil(elem, "e-ftrchk"));
    };
    CheckBoxFilterBase2.prototype.updateInfiniteManualSelectPred = function(defaults, value) {
      for (var i = 0; i < this.infiniteManualSelectMaintainPred.length; i++) {
        var predmdl = this.infiniteManualSelectMaintainPred[i];
        if (predmdl.value + "" === value + "" && (predmdl.operator === "equal" || predmdl.operator === "notequal")) {
          this.infiniteManualSelectMaintainPred.splice(i, 1);
          break;
        }
      }
      if (defaults.predicate === "or" && (!this.localInfiniteSelectAllClicked || !this.infiniteLocalSelectAll) || defaults.predicate === "and" && (!this.localInfiniteSelectAllClicked || this.infiniteLocalSelectAll)) {
        this.infiniteManualSelectMaintainPred.push(extend({}, {
          value
        }, defaults));
        if (defaults.predicate === "or") {
          this.options.parentTotalDataCount++;
        } else {
          this.options.parentTotalDataCount--;
        }
      }
    };
    CheckBoxFilterBase2.prototype.focusNextOrPrev = function(e, focusableElements) {
      var nextIndex = e.key === "ArrowUp" ? focusableElements.indexOf(document.activeElement) - 1 : focusableElements.indexOf(document.activeElement) + 1;
      var nextElement = focusableElements[(nextIndex + focusableElements.length) % focusableElements.length];
      if (nextElement) {
        nextElement.focus();
        var target = nextElement.classList.contains("e-chk-hidden") ? parentsUntil(nextElement, "e-ftrchk") : nextElement;
        this.setFocus(target);
      }
    };
    CheckBoxFilterBase2.prototype.keyupHandler = function(e) {
      if (e.key === "Tab" || (e.key === "ArrowUp" || e.key === "ArrowDown") && !e.altKey) {
        this.setFocus(parentsUntil(e.target, "e-ftrchk"));
      }
      if ((e.key === "ArrowUp" || e.key === "ArrowDown") && !e.altKey && this.parent.filterSettings.type === "CheckBox") {
        e.preventDefault();
        var focusableElements = Array.from(this.dlg.querySelectorAll('input, button, [tabindex]:not([tabindex="-1"])'));
        this.focusNextOrPrev(e, focusableElements);
      }
    };
    CheckBoxFilterBase2.prototype.setFocus = function(elem) {
      var prevElem = this.dlg.querySelector(".e-chkfocus");
      if (prevElem) {
        prevElem.classList.remove("e-chkfocus");
      }
      if (elem && elem !== prevElem) {
        elem.classList.add("e-chkfocus");
      }
    };
    CheckBoxFilterBase2.prototype.updateAllCBoxes = function(checked) {
      if (this.infiniteRenderMod) {
        this.localInfiniteSelectAllClicked = true;
        this.infiniteLocalSelectAll = checked;
        this.infiniteUnloadParentExistPred = [];
        this.infiniteManualSelectMaintainPred = [];
      }
      var cBoxes = this.infiniteRenderMod ? this.infiniteLoadedElem.map(function(arr) {
        return arr.querySelector(".e-frame");
      }) : [].slice.call(this.cBox.querySelectorAll(".e-frame:not(.e-add-current)"));
      for (var _i = 0, cBoxes_1 = cBoxes; _i < cBoxes_1.length; _i++) {
        var cBox = cBoxes_1[_i];
        removeAddCboxClasses(cBox, checked);
        setChecked(cBox.previousSibling, checked);
      }
    };
    CheckBoxFilterBase2.prototype.dialogOpen = function() {
      if (this.parent.element.classList.contains("e-device")) {
        this.dialogObj.element.querySelector(".e-input-group").classList.remove("e-input-focus");
        if (!this.options.isResponsiveFilter) {
          this.dialogObj.element.querySelector(".e-btn").focus();
        }
      }
    };
    CheckBoxFilterBase2.prototype.createCheckbox = function(value, checked, data) {
      var elem = checked ? this.cBoxTrue.cloneNode(true) : this.cBoxFalse.cloneNode(true);
      setChecked(elem.querySelector("input"), checked);
      var label = elem.querySelector(".e-label");
      var dummyData = extendObjWithFn({}, data, {
        column: this.options.column,
        parent: this.parent
      });
      var innerText = this.options.disableHtmlEncode ? "textContent" : "innerHTML";
      label["" + innerText] = !isNullOrUndefined(value) && value.toString().length ? this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(value) : value : this.getLocalizedLabel("Blanks");
      var checkboxUid = getUid("cbox");
      label.setAttribute("id", checkboxUid + "cboxLabel");
      elem.querySelector("input").setAttribute("aria-labelledby", label.id);
      if (label.innerHTML === this.getLocalizedLabel("Blanks")) {
        this.isBlanks = true;
      }
      if (typeof value === "boolean") {
        label.innerHTML = value === true ? this.getLocalizedLabel("FilterTrue") : this.getLocalizedLabel("FilterFalse");
      }
      addClass([label], ["e-checkboxfiltertext"]);
      if (this.options.template && data[this.options.column.field] !== this.getLocalizedLabel("SelectAll") && data[this.options.column.field] !== this.getLocalizedLabel("AddCurrentSelection")) {
        label.innerHTML = "";
        var isReactCompiler = this.parent.isReact && this.options.column.filter && typeof this.options.column.filter.itemTemplate !== "string";
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.parent.parentDetails.parentInstObj.isReact;
        if (isReactCompiler || isReactChild) {
          this.options.template(dummyData, this.parent, "filterItemTemplate", null, null, null, label);
          this.parent.renderTemplates();
        } else {
          appendChildren(label, this.options.template(dummyData, this.parent, "filterItemTemplate"));
        }
      }
      return elem;
    };
    CheckBoxFilterBase2.prototype.updateIndeterminatenBtn = function() {
      var cnt = this.infiniteRenderMod ? this.infiniteLoadedElem.length : this.cBox.children.length - 1;
      var className = [];
      var disabled = false;
      var elem = this.infiniteRenderMod ? this.sBox.querySelector(".e-selectall") : this.cBox.querySelector(".e-selectall");
      var selected = this.infiniteRenderMod ? this.infiniteLoadedElem.filter(function(arr) {
        return arr.querySelector(".e-check");
      }).length : this.cBox.querySelectorAll(".e-check:not(.e-selectall):not(.e-add-current)").length;
      if (this.cBox.querySelector(".e-add-current")) {
        cnt -= 1;
      }
      var btn;
      if (!this.options.isResponsiveFilter) {
        btn = this.dialogObj.btnObj[0];
        btn.disabled = false;
      }
      var input2 = elem.previousSibling;
      setChecked(input2, false);
      input2.indeterminate = false;
      if (this.infiniteRenderMod && this.sInput.value === "" && !this.options.parentCurrentViewDataCount && !this.localInfiniteSelectionInteracted && (!this.localInfiniteSelectAllClicked || !this.infiniteLocalSelectAll && !selected) && (cnt !== selected || cnt === selected)) {
        selected = 0;
      } else if (this.infiniteRenderMod && this.infiniteLoadedElem.length < this.infiniteDataCount && this.infiniteUnloadParentExistPred.length && (!selected || cnt === selected) && this.infiniteLocalSelectAll) {
        if (!selected) {
          selected += this.infiniteUnloadParentExistPred.length;
        } else {
          cnt += this.infiniteUnloadParentExistPred.length;
        }
      }
      if (cnt === selected) {
        if (this.infiniteRenderMod) {
          this.infiniteLocalSelectAll = true;
          this.localInfiniteSelectAllClicked = true;
          this.infiniteManualSelectMaintainPred = [];
        }
        className = ["e-check"];
        setChecked(input2, true);
      } else if (selected) {
        className = ["e-stop"];
        input2.indeterminate = true;
      } else {
        if (this.infiniteRenderMod) {
          this.infiniteLocalSelectAll = false;
          this.localInfiniteSelectAllClicked = true;
          this.infiniteManualSelectMaintainPred = [];
        }
        className = ["e-uncheck"];
        disabled = true;
        if (btn) {
          btn.disabled = true;
        }
      }
      if (btn) {
        this.filterState = !btn.disabled;
        btn.dataBind();
      }
      removeClass([elem], ["e-check", "e-stop", "e-uncheck"]);
      addClass([elem], className);
      this.parent.notify(refreshCustomFilterOkBtn, {
        disabled
      });
    };
    CheckBoxFilterBase2.prototype.createFilterItems = function(data, isInitial, args1) {
      var _a, _b, _c;
      var cBoxes = this.parent.createElement("div");
      var btn;
      var disabled = false;
      if (!this.options.isResponsiveFilter) {
        btn = this.dialogObj.btnObj[0];
      }
      var nullCounter = -1;
      var key = "ejValue";
      if (!args1.executeQuery) {
        key = args1.field;
      }
      for (var i = 0; i < data.length; i++) {
        var val = getValue(key, data[parseInt(i.toString(), 10)]);
        if (val === "" || isNullOrUndefined(val)) {
          nullCounter = nullCounter + 1;
        }
      }
      if (!this.infiniteRenderMod) {
        this.itemsCnt = nullCounter !== -1 ? data.length - nullCounter : data.length;
      }
      if (this.infiniteRenderMod && this.parent.filterSettings && this.parent.filterSettings.loadingIndicator === "Shimmer") {
        this.removeMask();
      }
      if (data.length && !this.renderEmpty) {
        var selectAllValue = this.getLocalizedLabel("SelectAll");
        var innerDiv = this.cBox.querySelector(".e-checkfltrnmdiv");
        if (innerDiv) {
          innerDiv.classList.remove("e-checkfltrnmdiv");
        }
        var checkBox = this.createCheckbox(selectAllValue, false, (_a = {}, _a[this.options.field] = selectAllValue, _a));
        if (this.parent.cssClass) {
          if (this.parent.cssClass.indexOf(" ") !== -1) {
            addClass([checkBox], this.parent.cssClass.split(" "));
          } else {
            addClass([checkBox], [this.parent.cssClass]);
          }
        }
        if (this.infiniteInitialLoad || !this.infiniteRenderMod) {
          var selectAll2 = createCboxWithWrap(getUid("cbox"), checkBox, "e-ftrchk");
          selectAll2.querySelector(".e-frame").classList.add("e-selectall");
          if (this.infiniteRenderMod) {
            selectAll2.classList.add("e-infinitescroll");
            if (this.parent.enableAdaptiveUI) {
              this.spinner.style.height = this.spinner.offsetHeight - this.getListHeight(this.cBox) + "px";
            }
            this.sBox.insertBefore(selectAll2, this.spinner);
          } else {
            cBoxes.appendChild(selectAll2);
          }
        } else if (this.sBox.querySelector(".e-ftrchk .e-selectall")) {
          this.sBox.querySelector(".e-ftrchk .e-selectall").previousSibling.disabled = false;
          this.sBox.querySelector(".e-ftrchk .e-selectall").parentElement.classList.remove("e-checkbox-disabled");
        }
        var predicate = new Predicate("field", "equal", this.options.field);
        if (this.options.foreignKeyValue) {
          predicate = predicate.or("field", "equal", this.options.foreignKeyValue);
        }
        var isColFiltered = new DataManager(this.options.filteredColumns).executeLocal(new Query().where(predicate)).length;
        if (this.sInput.value) {
          var predicateCheckBox = this.createCheckbox(this.getLocalizedLabel("AddCurrentSelection"), false, (_b = {}, _b[this.options.field] = this.getLocalizedLabel("AddCurrentSelection"), _b));
          if (this.parent.cssClass) {
            if (this.parent.cssClass.indexOf(" ") !== -1) {
              addClass([predicateCheckBox], this.parent.cssClass.split(" "));
            } else {
              addClass([predicateCheckBox], [this.parent.cssClass]);
            }
          }
          if (this.infiniteRenderMod && !isNullOrUndefined(this.sBox.children[2]) && this.sBox.children[2].innerText !== "Add current selection to filter" || !this.infiniteRenderMod) {
            var predicateElement = createCboxWithWrap(getUid("cbox"), predicateCheckBox, "e-ftrchk");
            predicateElement.querySelector(".e-frame").classList.add("e-add-current");
            if (this.infiniteRenderMod) {
              this.sBox.insertBefore(predicateElement, this.spinner);
              var checkBoxListElem = this.spinner.querySelector(".e-checkboxlist");
              var reduceHeight = Math.ceil(predicateElement.getBoundingClientRect().height);
              checkBoxListElem.style.height = parseInt(getComputedStyle(checkBoxListElem).height.split("px")[0], 10) - reduceHeight + "px";
              checkBoxListElem.style.minHeight = checkBoxListElem.style.height;
            } else {
              cBoxes.appendChild(predicateElement);
            }
          } else if (this.sBox.querySelector(".e-ftrchk .e-add-current")) {
            this.sBox.querySelector(".e-ftrchk .e-add-current").previousSibling.disabled = false;
            this.sBox.querySelector(".e-ftrchk .e-add-current").parentElement.classList.remove("e-checkbox-disabled");
          }
        } else if (this.infiniteRenderMod && !isNullOrUndefined(this.sBox.children[2]) && this.sBox.children[2].innerText === "Add current selection to filter") {
          var checkBoxListElem = this.spinner.querySelector(".e-checkboxlist");
          var increaseHeight = Math.ceil(this.sBox.children[2].getBoundingClientRect().height);
          checkBoxListElem.style.height = parseInt(getComputedStyle(checkBoxListElem).height.split("px")[0], 10) + increaseHeight + "px";
          checkBoxListElem.style.minHeight = checkBoxListElem.style.height;
          remove(this.sBox.children[2]);
        }
        var isRndere = void 0;
        for (var i = 0; i < data.length; i++) {
          var uid2 = getUid("cbox");
          this.values["" + uid2] = getValue(key, data[parseInt(i.toString(), 10)]);
          var value = getValue(this.options.field, data[parseInt(i.toString(), 10)]);
          if (this.options.formatFn) {
            value = this.valueFormatter.toView(value, this.options.formatFn);
          }
          var args_1 = {
            value,
            column: this.options.column,
            data: data[parseInt(i.toString(), 10)]
          };
          this.parent.notify(filterCboxValue, args_1);
          value = args_1.value;
          if (value === "" || isNullOrUndefined(value)) {
            if (isRndere) {
              continue;
            }
            isRndere = true;
          }
          if (this.infiniteRenderMod) {
            this.updateInfiniteUnLoadedCheckboxExistPred(value, this.infiniteUnloadParentExistPred);
          }
          var checkbox = this.localInfiniteSelectAllClicked ? this.createCheckbox(value, this.infiniteLocalSelectAll, getValue("dataObj", data[i])) : this.createCheckbox(value, this.getCheckedState(isColFiltered, this.values["" + uid2]), getValue("dataObj", data[i]));
          cBoxes.appendChild(createCboxWithWrap(uid2, checkbox, "e-ftrchk"));
          if (this.infiniteRenderMod) {
            cBoxes.lastChild.style.height = this.getListHeight(this.cBox) + "px";
          }
        }
        var scrollTop = this.cBox.scrollTop;
        if (!this.infiniteRenderMod || this.infiniteSearchValChange) {
          this.cBox.innerHTML = "";
        } else if (this.infiniteRenderMod && this.cBox.children.length) {
          this.infiniteRemoveElements([].slice.call(this.cBox.children).splice(0, this.parent.filterSettings.itemsCount));
        }
        if (this.infiniteRenderMod) {
          (_c = this.infiniteLoadedElem).push.apply(_c, [].slice.call(cBoxes.children));
          this.itemsCnt = nullCounter !== -1 ? this.infiniteLoadedElem.length - nullCounter : this.infiniteLoadedElem.length;
        }
        if (this.infiniteUnloadParentExistPred.length && (this.infiniteLoadedElem.length >= this.infiniteDataCount || !this.options.parentCurrentViewDataCount || this.options.parentTotalDataCount === this.infiniteDataCount && this.options.parentCurrentViewDataCount)) {
          this.infiniteUnloadParentExistPred = [];
        }
        appendChildren(this.cBox, [].slice.call(cBoxes.children));
        if (this.infiniteRenderMod && !this.infiniteScrollAppendDiff) {
          this.infiniteScrollAppendDiff = Math.round(scrollTop - this.cBox.scrollTop);
        }
        this.updateIndeterminatenBtn();
        if (!this.infiniteRenderMod) {
          if (btn) {
            btn.disabled = false;
          }
          disabled = false;
        } else {
          if (btn && btn.disabled) {
            disabled = true;
          } else {
            disabled = false;
          }
        }
      } else {
        cBoxes.appendChild(this.parent.createElement("span", {
          innerHTML: this.getLocalizedLabel("NoResult")
        }));
        this.cBox.innerHTML = "";
        if (this.infiniteRenderMod) {
          var selectAll2 = this.sBox.querySelector(".e-ftrchk .e-selectall");
          if (selectAll2) {
            var selectAllParent = selectAll2.parentElement.parentElement;
            if (selectAll2.classList.contains("e-check")) {
              toogleCheckbox(selectAllParent);
            } else if (selectAll2.classList.contains("e-stop")) {
              toogleCheckbox(selectAllParent);
              selectAll2.classList.remove("e-stop");
              toogleCheckbox(selectAllParent);
            }
            selectAll2.previousSibling.disabled = true;
            selectAll2.parentElement.classList.add("e-checkbox-disabled");
          }
          var addCurrSelection = this.sBox.querySelector(".e-ftrchk .e-add-current");
          if (addCurrSelection) {
            var addCurrSelectionParent = addCurrSelection.parentElement.parentElement;
            if (addCurrSelection.classList.contains("e-check")) {
              toogleCheckbox(addCurrSelectionParent);
            }
            addCurrSelection.previousSibling.disabled = true;
            addCurrSelection.parentElement.classList.add("e-checkbox-disabled");
          }
        }
        this.cBox.appendChild(this.parent.createElement("div", {
          className: "e-checkfltrnmdiv"
        }));
        appendChildren(this.cBox.children[0], [].slice.call(cBoxes.children));
        if (btn) {
          btn.disabled = true;
        }
        disabled = true;
        this.filterState = !disabled;
      }
      if (btn && data.length) {
        this.filterState = !btn.disabled;
        btn.dataBind();
      }
      var args = {
        requestType: filterChoiceRequest,
        dataSource: this.renderEmpty ? [] : data
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.notify(cBoxFltrComplete, args);
      this.parent.notify(refreshCustomFilterOkBtn, {
        disabled
      });
      if (this.infiniteRenderMod && this.infiniteInitialLoad) {
        this.cBox.style.marginTop = "0px";
      }
      hideSpinner(this.spinner);
    };
    CheckBoxFilterBase2.prototype.updateInfiniteUnLoadedCheckboxExistPred = function(value, updatePredArr) {
      for (var j = 0; j < updatePredArr.length; j++) {
        var pred = updatePredArr[j];
        var predValue = pred.value instanceof Date ? this.valueFormatter.toView(pred.value, this.options.formatFn) : pred.value;
        if (value === predValue && (pred.operator === "equal" || pred.operator === "notequal")) {
          this.infiniteManualSelectMaintainPred.push(updatePredArr[j]);
          updatePredArr.splice(j, 1);
          j--;
        }
      }
    };
    CheckBoxFilterBase2.prototype.getCheckedState = function(isColFiltered, value) {
      if (!this.isFiltered || !isColFiltered) {
        return true;
      } else {
        var checkState = this.sInput.value ? true : this.result["" + value];
        if (this.infiniteRenderMod) {
          return checkState;
        } else {
          return this.options.operator === "notequal" ? !checkState : checkState;
        }
      }
    };
    CheckBoxFilterBase2.getDistinct = function(json, field, column, foreignKeyData2, checkboxFilter) {
      var len = json.length;
      var result = [];
      var value;
      var ejValue = "ejValue";
      var lookup = {};
      var isForeignKey = column && column.isForeignColumn ? column.isForeignColumn() : false;
      while (len--) {
        value = json[parseInt(len.toString(), 10)];
        if (column && column.type === "dateonly" && typeof value["" + field] === "string" && value["" + field]) {
          var arr = value["" + field].split(/[^0-9.]/);
          value["" + field] = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
        }
        value = getObject(field, value);
        var currentFilterValue = typeof value === "string" && !isNullOrUndefined(checkboxFilter) && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        !isNullOrUndefined(checkboxFilter.parent) && !isNullOrUndefined(checkboxFilter.parent.filterSettings) && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        !isNullOrUndefined(checkboxFilter.parent.filterSettings.enableCaseSensitivity) ? value.toLowerCase() : value;
        if (!(currentFilterValue in lookup)) {
          var obj = {};
          obj["" + ejValue] = value;
          lookup["" + currentFilterValue] = true;
          if (isForeignKey) {
            var foreignDataObj = getForeignData(column, {}, value, foreignKeyData2)[0];
            setValue(foreignKeyData, foreignDataObj, json[parseInt(len.toString(), 10)]);
            value = getValue(column.foreignKeyValue, foreignDataObj);
          }
          setValue(field, isNullOrUndefined(value) ? null : value, obj);
          setValue("dataObj", json[parseInt(len.toString(), 10)], obj);
          result.push(obj);
        }
      }
      return DataUtil.group(DataUtil.sort(result, field, DataUtil.fnAscending), "ejValue");
    };
    CheckBoxFilterBase2.getPredicate = function(columns, isExecuteLocal) {
      var cols = DataUtil.distinct(columns, "field", true) || [];
      var collection = [];
      var pred = {};
      for (var i = 0; i < cols.length; i++) {
        collection = new DataManager(columns).executeLocal(new Query().where("field", "equal", cols[parseInt(i.toString(), 10)].field));
        if (collection.length !== 0) {
          pred[cols[parseInt(i.toString(), 10)].field] = CheckBoxFilterBase2.generatePredicate(collection, isExecuteLocal);
        }
      }
      return pred;
    };
    CheckBoxFilterBase2.generatePredicate = function(cols, isExecuteLocal) {
      var len = cols ? cols.length : 0;
      var predicate;
      var operate = "or";
      var first = CheckBoxFilterBase2.updateDateFilter(cols[0]);
      first.ignoreAccent = !isNullOrUndefined(first.ignoreAccent) ? first.ignoreAccent : false;
      if (first.type === "date" || first.type === "datetime" || first.type === "dateonly") {
        predicate = getDatePredicate(first, first.type, isExecuteLocal);
      } else {
        predicate = first.ejpredicate ? first.ejpredicate : new Predicate(first.field, first.operator, first.value, !CheckBoxFilterBase2.getCaseValue(first), first.ignoreAccent);
      }
      for (var p = 1; p < len; p++) {
        cols[parseInt(p.toString(), 10)] = CheckBoxFilterBase2.updateDateFilter(cols[parseInt(p.toString(), 10)]);
        if (len > 2 && p > 1 && (cols[p].predicate === "or" && cols[p - 1].predicate === "or" || cols[p].predicate === "and" && cols[p - 1].predicate === "and")) {
          if (cols[p].type === "date" || cols[p].type === "datetime" || cols[p].type === "dateonly") {
            predicate.predicates.push(getDatePredicate(cols[parseInt(p.toString(), 10)], cols[p].type, isExecuteLocal));
          } else {
            predicate.predicates.push(new Predicate(cols[p].field, cols[parseInt(p.toString(), 10)].operator, cols[parseInt(p.toString(), 10)].value, !CheckBoxFilterBase2.getCaseValue(cols[parseInt(p.toString(), 10)]), cols[parseInt(p.toString(), 10)].ignoreAccent));
          }
        } else {
          if (cols[p].type === "date" || cols[p].type === "datetime" || cols[p].type === "dateonly") {
            if (cols[parseInt(p.toString(), 10)].predicate === "and" && cols[parseInt(p.toString(), 10)].operator === "equal") {
              predicate = predicate["" + operate](getDatePredicate(cols[parseInt(p.toString(), 10)], cols[parseInt(p.toString(), 10)].type, isExecuteLocal), cols[parseInt(p.toString(), 10)].type, cols[parseInt(p.toString(), 10)].ignoreAccent);
            } else {
              predicate = predicate[cols[parseInt(p.toString(), 10)].predicate](getDatePredicate(cols[parseInt(p.toString(), 10)], cols[parseInt(p.toString(), 10)].type, isExecuteLocal), cols[parseInt(p.toString(), 10)].type, cols[parseInt(p.toString(), 10)].ignoreAccent);
            }
          } else {
            predicate = cols[parseInt(p.toString(), 10)].ejpredicate ? predicate[cols[parseInt(p.toString(), 10)].predicate](cols[parseInt(p.toString(), 10)].ejpredicate) : predicate[cols[parseInt(p.toString(), 10)].predicate](cols[parseInt(p.toString(), 10)].field, cols[parseInt(p.toString(), 10)].operator, cols[parseInt(p.toString(), 10)].value, !CheckBoxFilterBase2.getCaseValue(cols[parseInt(p.toString(), 10)]), cols[parseInt(p.toString(), 10)].ignoreAccent);
          }
        }
      }
      return predicate || null;
    };
    CheckBoxFilterBase2.getCaseValue = function(filter) {
      if (isNullOrUndefined(filter.matchCase)) {
        if (filter.type === "string" || isNullOrUndefined(filter.type) && typeof filter.value === "string") {
          return false;
        } else {
          return true;
        }
      } else {
        return filter.matchCase;
      }
    };
    CheckBoxFilterBase2.updateDateFilter = function(filter) {
      if (filter.type === "date" || filter.type === "datetime" || filter.type === "dateonly" || filter.value instanceof Date) {
        filter.type = filter.type || "date";
      }
      return filter;
    };
    return CheckBoxFilterBase2;
  }()
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/calendar.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OTHERMONTH = "e-other-month";
var OTHERDECADE = "e-other-year";
var ROOT = "e-calendar";
var DEVICE = "e-device";
var HEADER = "e-header";
var RTL = "e-rtl";
var CONTENT = "e-content";
var CONTENTTABLE = "e-calendar-content-table";
var YEAR = "e-year";
var MONTH = "e-month";
var DECADE = "e-decade";
var ICON = "e-icons";
var PREVICON = "e-prev";
var NEXTICON = "e-next";
var PREVSPAN = "e-date-icon-prev";
var NEXTSPAN = "e-date-icon-next ";
var ICONCONTAINER = "e-icon-container";
var DISABLED = "e-disabled";
var OVERLAY = "e-overlay";
var WEEKEND = "e-weekend";
var WEEKNUMBER = "e-week-number";
var SELECTED = "e-selected";
var FOCUSEDDATE = "e-focused-date";
var FOCUSEDCELL = "e-focused-cell";
var OTHERMONTHROW = "e-month-hide";
var TODAY = "e-today";
var TITLE = "e-title";
var LINK = "e-day";
var CELL = "e-cell";
var WEEKHEADER = "e-week-header";
var ZOOMIN = "e-zoomin";
var FOOTER = "e-footer-container";
var BTN = "e-btn";
var FLAT = "e-flat";
var CSS = "e-css";
var PRIMARY = "e-primary";
var DAYHEADERLONG = "e-calendar-day-header-lg";
var dayMilliSeconds = 864e5;
var minutesMilliSeconds = 6e4;
var CalendarBase = (
  /** @class */
  function(_super) {
    __extends19(CalendarBase2, _super);
    function CalendarBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.effect = "";
      _this.isPopupClicked = false;
      _this.isDateSelected = true;
      _this.isTodayClicked = false;
      _this.preventChange = false;
      _this.previousDates = false;
      return _this;
    }
    CalendarBase2.prototype.render = function() {
      this.rangeValidation(this.min, this.max);
      this.calendarEleCopy = this.element.cloneNode(true);
      if (this.calendarMode === "Islamic") {
        if (+this.min.setSeconds(0) === +new Date(1900, 0, 1, 0, 0, 0)) {
          this.min = new Date(1944, 2, 18);
        }
        if (+this.max === +new Date(2099, 11, 31)) {
          this.max = new Date(2069, 10, 16);
        }
      }
      this.globalize = new Internationalization(this.locale);
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({
          firstDayOfWeek: this.globalize.getFirstDayOfWeek()
        }, true);
      }
      this.todayDisabled = false;
      this.todayDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (this.getModuleName() === "calendar") {
        this.element.classList.add(ROOT);
        if (this.enableRtl) {
          this.element.classList.add(RTL);
        }
        if (Browser.isDevice) {
          this.element.classList.add(DEVICE);
        }
        attributes(this.element, {
          "data-role": "calendar"
        });
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.setAttribute("tabindex", this.tabIndex);
      } else {
        this.calendarElement = this.createElement("div");
        this.calendarElement.classList.add(ROOT);
        if (this.enableRtl) {
          this.calendarElement.classList.add(RTL);
        }
        if (Browser.isDevice) {
          this.calendarElement.classList.add(DEVICE);
        }
        attributes(this.calendarElement, {
          "data-role": "calendar"
        });
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.createHeader();
      this.createContent();
      this.wireEvents();
    };
    CalendarBase2.prototype.rangeValidation = function(min, max) {
      if (isNullOrUndefined(min)) {
        this.setProperties({
          min: new Date(1900, 0, 1)
        }, true);
      }
      if (isNullOrUndefined(max)) {
        this.setProperties({
          max: new Date(2099, 11, 31)
        }, true);
      }
    };
    CalendarBase2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        altUpArrow: "alt+uparrow",
        spacebar: "space",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow"
      };
      return this.defaultKeyConfigs;
    };
    CalendarBase2.prototype.validateDate = function(value) {
      this.setProperties({
        min: this.checkDateValue(new Date(this.checkValue(this.min)))
      }, true);
      this.setProperties({
        max: this.checkDateValue(new Date(this.checkValue(this.max)))
      }, true);
      this.currentDate = this.currentDate ? this.currentDate : new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (!isNullOrUndefined(value) && this.min <= this.max && value >= this.min && value <= this.max) {
        this.currentDate = new Date(this.checkValue(value));
      }
    };
    CalendarBase2.prototype.setOverlayIndex = function(popupWrapper, popupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(popupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(popupElement.style.zIndex, 10) ? parseInt(popupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    CalendarBase2.prototype.minMaxUpdate = function(value) {
      if (!(+this.min <= +this.max)) {
        this.setProperties({
          min: this.min
        }, true);
        addClass([this.element], OVERLAY);
      } else {
        removeClass([this.element], OVERLAY);
      }
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (+this.min <= +this.max && value && +value <= +this.max && +value >= +this.min) {
        this.currentDate = new Date(this.checkValue(value));
      } else {
        if (+this.min <= +this.max && !value && +this.currentDate > +this.max) {
          this.currentDate = new Date(this.checkValue(this.max));
        } else {
          if (+this.currentDate < +this.min) {
            this.currentDate = new Date(this.checkValue(this.min));
          }
        }
      }
    };
    CalendarBase2.prototype.createHeader = function() {
      var ariaPrevAttrs = {
        "aria-disabled": "false",
        "aria-label": "previous month"
      };
      var ariaNextAttrs = {
        "aria-disabled": "false",
        "aria-label": "next month"
      };
      var ariaTitleAttrs = {
        "aria-atomic": "true",
        "aria-live": "assertive",
        "aria-label": "title"
      };
      var tabIndexAttr = {
        "tabindex": "0"
      };
      this.headerElement = this.createElement("div", {
        className: HEADER
      });
      var iconContainer = this.createElement("div", {
        className: ICONCONTAINER
      });
      this.previousIcon = this.createElement("button", {
        className: "" + PREVICON,
        attrs: {
          type: "button"
        }
      });
      rippleEffect(this.previousIcon, {
        duration: 400,
        selector: ".e-prev",
        isCenterRipple: true
      });
      attributes(this.previousIcon, ariaPrevAttrs);
      attributes(this.previousIcon, tabIndexAttr);
      this.nextIcon = this.createElement("button", {
        className: "" + NEXTICON,
        attrs: {
          type: "button"
        }
      });
      rippleEffect(this.nextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      if (this.getModuleName() === "daterangepicker") {
        attributes(this.previousIcon, {
          tabIndex: "-1"
        });
        attributes(this.nextIcon, {
          tabIndex: "-1"
        });
      }
      attributes(this.nextIcon, ariaNextAttrs);
      attributes(this.nextIcon, tabIndexAttr);
      this.headerTitleElement = this.createElement("div", {
        className: "" + LINK + " " + TITLE
      });
      attributes(this.headerTitleElement, ariaTitleAttrs);
      attributes(this.headerTitleElement, tabIndexAttr);
      this.headerElement.appendChild(this.headerTitleElement);
      this.previousIcon.appendChild(this.createElement("span", {
        className: "" + PREVSPAN + " " + ICON
      }));
      this.nextIcon.appendChild(this.createElement("span", {
        className: "" + NEXTSPAN + " " + ICON
      }));
      iconContainer.appendChild(this.previousIcon);
      iconContainer.appendChild(this.nextIcon);
      this.headerElement.appendChild(iconContainer);
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.headerElement);
      } else {
        this.calendarElement.appendChild(this.headerElement);
      }
      this.adjustLongHeaderSize();
    };
    CalendarBase2.prototype.createContent = function() {
      this.contentElement = this.createElement("div", {
        className: CONTENT
      });
      this.table = this.createElement("table", {
        attrs: {
          "class": CONTENTTABLE,
          "tabIndex": "0",
          "role": "grid",
          "aria-activedescendant": "",
          "aria-labelledby": this.element.id
        }
      });
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.contentElement);
      } else {
        this.calendarElement.appendChild(this.contentElement);
      }
      this.contentElement.appendChild(this.table);
      this.createContentHeader();
      this.createContentBody();
      if (this.showTodayButton) {
        this.createContentFooter();
      }
      if (this.getModuleName() !== "daterangepicker") {
        EventHandler.add(this.table, "focus", this.addContentFocus, this);
        EventHandler.add(this.table, "blur", this.removeContentFocus, this);
      }
    };
    CalendarBase2.prototype.addContentFocus = function(args) {
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      if (!isNullOrUndefined(selectedDate)) {
        selectedDate.classList.add(FOCUSEDCELL);
      } else if (!isNullOrUndefined(focusedDate)) {
        focusedDate.classList.add(FOCUSEDCELL);
      }
    };
    CalendarBase2.prototype.removeContentFocus = function(args) {
      var focusedDate = !isNullOrUndefined(this.tableBodyElement) ? this.tableBodyElement.querySelector("tr td.e-focused-date") : null;
      var selectedDate = !isNullOrUndefined(this.tableBodyElement) ? this.tableBodyElement.querySelector("tr td.e-selected") : null;
      if (!isNullOrUndefined(selectedDate)) {
        selectedDate.classList.remove(FOCUSEDCELL);
      } else if (!isNullOrUndefined(focusedDate)) {
        focusedDate.classList.remove(FOCUSEDCELL);
      }
    };
    CalendarBase2.prototype.getCultureValues = function() {
      var culShortNames = [];
      var cldrObj;
      var dayFormat = "days.stand-alone." + this.dayHeaderFormat.toLowerCase();
      if (this.locale === "en" || this.locale === "en-US") {
        cldrObj = getValue(dayFormat, getDefaultDateObject());
      } else {
        cldrObj = this.getCultureObjects(cldrData, "" + this.locale);
      }
      if (!isNullOrUndefined(cldrObj)) {
        for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
          var obj = _a[_i];
          culShortNames.push(getValue(obj, cldrObj));
        }
      }
      return culShortNames;
    };
    CalendarBase2.prototype.toCapitalize = function(text) {
      return !isNullOrUndefined(text) && text.length ? text[0].toUpperCase() + text.slice(1) : text;
    };
    CalendarBase2.prototype.createContentHeader = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.element.querySelectorAll(".e-content .e-week-header")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]);
        }
      }
      var daysCount = 6;
      var html = "";
      if (this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({
          firstDayOfWeek: 0
        }, true);
      }
      this.tableHeadElement = this.createElement("thead", {
        className: WEEKHEADER
      });
      if (this.weekNumber) {
        html += '<th class="e-week-number" aria-hidden="true"></th>';
        if (this.getModuleName() === "calendar") {
          addClass([this.element], "" + WEEKNUMBER);
        } else {
          addClass([this.calendarElement], "" + WEEKNUMBER);
        }
      }
      var shortNames = this.getCultureValues().length > 0 && this.getCultureValues() ? this.shiftArray(this.getCultureValues().length > 0 && this.getCultureValues(), this.firstDayOfWeek) : null;
      if (!isNullOrUndefined(shortNames)) {
        for (var days = 0; days <= daysCount; days++) {
          html += '<th  class="">' + this.toCapitalize(shortNames[days]) + "</th>";
        }
      }
      html = "<tr>" + html + "</tr>";
      this.tableHeadElement.innerHTML = html;
      this.table.appendChild(this.tableHeadElement);
    };
    CalendarBase2.prototype.createContentBody = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content tbody")[0])) {
          detach(this.element.querySelectorAll(".e-content tbody")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content tbody")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content tbody")[0]);
        }
      }
      switch (this.start) {
        case "Year":
          this.renderYears();
          break;
        case "Decade":
          this.renderDecades();
          break;
        default:
          this.renderMonths();
      }
    };
    CalendarBase2.prototype.updateFooter = function() {
      this.todayElement.textContent = this.l10.getConstant("today");
      this.todayElement.setAttribute("aria-label", this.l10.getConstant("today"));
      this.todayElement.setAttribute("tabindex", "0");
    };
    CalendarBase2.prototype.createContentFooter = function() {
      if (this.showTodayButton) {
        var minimum = /* @__PURE__ */ new Date(+this.min);
        var maximum = /* @__PURE__ */ new Date(+this.max);
        var l10nLocale = {
          today: "Today"
        };
        this.globalize = new Internationalization(this.locale);
        this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
        this.todayElement = this.createElement("button", {
          attrs: {
            role: "button"
          }
        });
        rippleEffect(this.todayElement);
        this.updateFooter();
        addClass([this.todayElement], [BTN, TODAY, FLAT, PRIMARY, CSS]);
        if (!(+new Date(minimum.setHours(0, 0, 0, 0)) <= +this.todayDate && +this.todayDate <= +new Date(maximum.setHours(0, 0, 0, 0))) || this.todayDisabled) {
          addClass([this.todayElement], DISABLED);
        }
        this.footer = this.createElement("div", {
          className: FOOTER
        });
        this.footer.appendChild(this.todayElement);
        if (this.getModuleName() === "calendar") {
          this.element.appendChild(this.footer);
        }
        if (this.getModuleName() === "datepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (this.getModuleName() === "datetimepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (!this.todayElement.classList.contains(DISABLED)) {
          EventHandler.add(this.todayElement, "click", this.todayButtonClick, this);
        }
      }
    };
    CalendarBase2.prototype.wireEvents = function(id, ref, keyConfig, moduleName) {
      EventHandler.add(this.headerTitleElement, "click", this.navigateTitle, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      if (this.getModuleName() === "calendar") {
        this.keyboardModule = new KeyboardEvents(this.element, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.calendarElement, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
    };
    CalendarBase2.prototype.dateWireEvents = function(id, ref, keyConfig, moduleName) {
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, keyConfig);
      this.serverModuleName = moduleName;
    };
    CalendarBase2.prototype.todayButtonClick = function(e, value, isCustomDate) {
      if (this.showTodayButton) {
        if (this.currentView() === this.depth) {
          this.effect = "";
        } else {
          this.effect = "e-zoomin";
        }
        if (this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
          this.navigateTo(this.depth, new Date(this.checkValue(value)), isCustomDate);
        } else {
          this.navigateTo("Month", new Date(this.checkValue(value)), isCustomDate);
        }
      }
    };
    CalendarBase2.prototype.resetCalendar = function() {
      this.calendarElement && detach(this.calendarElement);
      this.tableBodyElement && detach(this.tableBodyElement);
      this.table && detach(this.table);
      this.tableHeadElement && detach(this.tableHeadElement);
      this.nextIcon && detach(this.nextIcon);
      this.previousIcon && detach(this.previousIcon);
      this.footer && detach(this.footer);
      this.todayElement = null;
      this.renderDayCellArgs = null;
      this.calendarElement = this.tableBodyElement = this.footer = this.tableHeadElement = this.nextIcon = this.previousIcon = this.table = null;
    };
    CalendarBase2.prototype.keyActionHandle = function(e, value, multiSelection) {
      if (this.calendarElement === null && e.action === "escape") {
        return;
      }
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate;
      if (multiSelection) {
        if (!isNullOrUndefined(focusedDate) && +value === parseInt(focusedDate.getAttribute("id").split("_")[0], 10)) {
          selectedDate = focusedDate;
        } else {
          selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
        }
      } else {
        selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      }
      var view = this.getViewNumber(this.currentView());
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      this.effect = "";
      switch (e.action) {
        case "moveLeft":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            this.keyboardNavigate(-1, view, e, this.max, this.min);
            e.preventDefault();
          }
          break;
        case "moveRight":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            this.keyboardNavigate(1, view, e, this.max, this.min);
            e.preventDefault();
          }
          break;
        case "moveUp":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            if (view === 0) {
              this.keyboardNavigate(-7, view, e, this.max, this.min);
            } else {
              this.keyboardNavigate(-4, view, e, this.max, this.min);
            }
            e.preventDefault();
          }
          break;
        case "moveDown":
          if (this.getModuleName() !== "daterangepicker" && !isNullOrUndefined(e.target) && e.target.classList.length > 0 && e.target.classList.contains(CONTENTTABLE)) {
            if (view === 0) {
              this.keyboardNavigate(7, view, e, this.max, this.min);
            } else {
              this.keyboardNavigate(4, view, e, this.max, this.min);
            }
            e.preventDefault();
          }
          break;
        case "select":
          if (e.target === this.headerTitleElement) {
            this.navigateTitle(e);
          } else if (e.target === this.previousIcon && !e.target.className.includes(DISABLED)) {
            this.navigatePrevious(e);
          } else if (e.target === this.nextIcon && !e.target.className.includes(DISABLED)) {
            this.navigateNext(e);
          } else if (e.target === this.todayElement && !e.target.className.includes(DISABLED)) {
            this.todayButtonClick(e, value);
            if (this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") {
              this.element.focus();
            }
          } else {
            var element = !isNullOrUndefined(focusedDate) ? focusedDate : selectedDate;
            if (!isNullOrUndefined(element) && !element.classList.contains(DISABLED)) {
              if (levelRestrict) {
                var d = new Date(parseInt("" + element.id, 0));
                this.selectDate(e, d, element);
                if (this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") {
                  this.element.focus();
                }
              } else {
                if (!e.target.className.includes(DISABLED)) {
                  this.contentClick(null, --view, element, value);
                }
              }
            }
          }
          break;
        case "controlUp":
          this.title();
          e.preventDefault();
          break;
        case "controlDown":
          if (!isNullOrUndefined(focusedDate) && !levelRestrict || !isNullOrUndefined(selectedDate) && !levelRestrict) {
            this.contentClick(null, --view, focusedDate || selectedDate, value);
          }
          e.preventDefault();
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "pageUp":
          this.addMonths(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "pageDown":
          this.addMonths(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageUp":
          this.addYears(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageDown":
          this.addYears(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "controlHome":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1));
          e.preventDefault();
          break;
        case "controlEnd":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31));
          e.preventDefault();
          break;
        case "tab":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && e.target === this.todayElement) {
            e.preventDefault();
            if (this.isAngular) {
              this.inputElement.focus();
            } else {
              this.element.focus();
            }
            this.hide();
          }
          break;
        case "shiftTab":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && e.target === this.headerTitleElement) {
            e.preventDefault();
            this.element.focus();
            this.hide();
          }
          break;
        case "escape":
          if ((this.getModuleName() === "datepicker" || this.getModuleName() === "datetimepicker") && (e.target === this.headerTitleElement || e.target === this.previousIcon || e.target === this.nextIcon || e.target === this.todayElement)) {
            this.hide();
          }
          break;
      }
    };
    CalendarBase2.prototype.keyboardNavigate = function(number, currentView, e, max, min) {
      var date = new Date(this.checkValue(this.currentDate));
      switch (currentView) {
        case 2:
          this.addYears(this.currentDate, number);
          if (this.isMonthYearRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderDecades(e);
          } else {
            this.currentDate = date;
          }
          break;
        case 1:
          this.addMonths(this.currentDate, number);
          if (this.calendarMode === "Gregorian") {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          } else {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          }
          break;
        case 0:
          this.addDay(this.currentDate, number, e, max, min);
          if (this.isMinMaxRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderMonths(e);
          } else {
            this.currentDate = date;
          }
          break;
      }
    };
    CalendarBase2.prototype.preRender = function(value) {
      var _this = this;
      this.navigatePreviousHandler = this.navigatePrevious.bind(this);
      this.navigateNextHandler = this.navigateNext.bind(this);
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.navigateHandler = function(e) {
        _this.triggerNavigate(e);
      };
    };
    CalendarBase2.prototype.minMaxDate = function(localDate) {
      var currentDate = new Date((/* @__PURE__ */ new Date(+localDate)).setHours(0, 0, 0, 0));
      var minDate = new Date((/* @__PURE__ */ new Date(+this.min)).setHours(0, 0, 0, 0));
      var maxDate = new Date((/* @__PURE__ */ new Date(+this.max)).setHours(0, 0, 0, 0));
      if (+currentDate === +minDate || +currentDate === +maxDate) {
        if (+localDate < +this.min) {
          localDate = /* @__PURE__ */ new Date(+this.min);
        }
        if (+localDate > +this.max) {
          localDate = /* @__PURE__ */ new Date(+this.max);
        }
      }
      return localDate;
    };
    CalendarBase2.prototype.renderMonths = function(e, value, isCustomDate) {
      var numCells = this.weekNumber ? 8 : 7;
      var tdEles;
      if (this.calendarMode === "Gregorian") {
        tdEles = this.renderDays(this.currentDate, value, null, null, isCustomDate, e);
      } else {
        tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
      }
      this.createContentHeader();
      if (this.calendarMode === "Gregorian") {
        this.renderTemplate(tdEles, numCells, MONTH, e, value);
      } else {
        this.islamicModule.islamicRenderTemplate(tdEles, numCells, MONTH, e, value);
      }
    };
    CalendarBase2.prototype.renderDays = function(currentDate, value, multiSelection, values, isTodayDate, e) {
      var tdEles = [];
      var cellsCount = 42;
      var todayDate = isTodayDate ? /* @__PURE__ */ new Date(+currentDate) : this.getDate(/* @__PURE__ */ new Date(), this.timezone);
      var localDate = new Date(this.checkValue(currentDate));
      var minMaxDate;
      var currentMonth = localDate.getMonth();
      this.titleUpdate(currentDate, "days");
      var d = localDate;
      localDate = new Date(d.getFullYear(), d.getMonth(), 0, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());
      while (localDate.getDay() !== this.firstDayOfWeek) {
        this.setStartDate(localDate, -1 * dayMilliSeconds);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.createElement("td", {
          className: CELL
        });
        var weekAnchor = this.createElement("span");
        if (day % 7 === 0 && this.weekNumber) {
          var numberOfDays = this.weekRule === "FirstDay" ? 6 : this.weekRule === "FirstFourDayWeek" ? 3 : 0;
          var finalDate = new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate() + numberOfDays);
          weekAnchor.textContent = "" + this.getWeek(finalDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.minMaxDate(localDate);
        var dateFormatOptions = {
          type: "dateTime",
          skeleton: "full"
        };
        var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.dayCell(localDate);
        var title = this.globalize.formatDate(localDate, {
          type: "date",
          skeleton: "full"
        });
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, {
          format: "d",
          type: "date",
          skeleton: "yMd"
        });
        var disabled = this.min > localDate || this.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED);
          addClass([tdEle], OVERLAY);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        if (currentMonth !== localDate.getMonth()) {
          addClass([tdEle], OTHERMONTH);
          dayLink.setAttribute("aria-disabled", "true");
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND);
        }
        tdEle.appendChild(dayLink);
        this.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.renderDayCellArgs;
        this.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          var selectDate = new Date(this.checkValue(value));
          var argsDate = new Date(this.checkValue(argument.date));
          if (multiSelection) {
            if (!isNullOrUndefined(values) && values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.globalize.formatDate(argument.date, {
                  type: "date",
                  skeleton: "yMd"
                }));
                var tempDateString = +new Date(this.globalize.formatDate(values[index], {
                  type: "date",
                  skeleton: "yMd"
                }));
                if (localDateString === tempDateString) {
                  values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (selectDate && +selectDate === +argsDate) {
            this.setProperties({
              value: null
            }, true);
          }
        }
        if (this.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED)) {
          addClass([tdEle], DISABLED);
          addClass([tdEle], OVERLAY);
          dayLink.setAttribute("aria-disabled", "true");
          if (+this.renderDayCellArgs.date === +this.todayDate) {
            this.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH);
        var disabledCls = tdEle.classList.contains(DISABLED);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
        }
        var currentTarget = void 0;
        if (!isNullOrUndefined(e) && e.type === "click") {
          currentTarget = e.currentTarget;
        }
        if (multiSelection && !isNullOrUndefined(values) && !disabledCls) {
          for (var tempValue = 0; tempValue < values.length; tempValue++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = {
              format: null,
              type: "date",
              skeleton: "short",
              calendar: type
            };
            var localDateString = this.globalize.formatDate(localDate, formatOptions);
            var tempDateString = this.globalize.formatDate(values[tempValue], formatOptions);
            if (localDateString === tempDateString && this.getDateVal(localDate, values[tempValue]) || this.getDateVal(localDate, value)) {
              addClass([tdEle], SELECTED);
            }
            if (!isNullOrUndefined(currentTarget) && currentTarget.innerText === tdEle.innerText && this.previousDates && tdEle.classList.contains(SELECTED) && currentTarget.classList.contains(SELECTED)) {
              removeClass([tdEle], SELECTED);
              this.previousDates = false;
              var copyValues = this.copyValues(values);
              for (var i = 0; i < copyValues.length; i++) {
                var type_1 = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
                var formatOptions_1 = {
                  format: null,
                  type: "date",
                  skeleton: "short",
                  calendar: type_1
                };
                var localDateString_1 = this.globalize.formatDate(date, formatOptions_1);
                var tempDateString_1 = this.globalize.formatDate(copyValues[i], formatOptions_1);
                if (localDateString_1 === tempDateString_1) {
                  var index = copyValues.indexOf(copyValues[i]);
                  copyValues.splice(index, 1);
                  values.splice(index, 1);
                }
              }
              this.setProperties({
                values: copyValues
              }, true);
            } else {
              this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (values.length <= 0) {
            this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!disabledCls && this.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED);
        }
        this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        if (!isNullOrUndefined(date) && date.getFullYear() === todayDate.getFullYear() && date.getMonth() === todayDate.getMonth() && date.getDate() === todayDate.getDate()) {
          addClass([tdEle], TODAY);
        }
        tdEles.push(this.renderDayCellArgs.element);
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      return tdEles;
    };
    CalendarBase2.prototype.updateFocus = function(otherMonth, disabled, localDate, tableElement, currentDate) {
      if (currentDate.getDate() === localDate.getDate() && !otherMonth && !disabled) {
        addClass([tableElement], FOCUSEDDATE);
      } else {
        if (currentDate >= this.max && parseInt(tableElement.id, 0) === +this.max && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
        if (currentDate <= this.min && parseInt(tableElement.id, 0) === +this.min && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
      }
    };
    CalendarBase2.prototype.renderYears = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.checkValue(this.currentDate));
      var mon = curDate.getMonth();
      var yr = curDate.getFullYear();
      var localDate = curDate;
      var curYrs = localDate.getFullYear();
      var minYr = new Date(this.checkValue(this.min)).getFullYear();
      var minMonth = new Date(this.checkValue(this.min)).getMonth();
      var maxYr = new Date(this.checkValue(this.max)).getFullYear();
      var maxMonth = new Date(this.checkValue(this.max)).getMonth();
      localDate.setMonth(0);
      this.titleUpdate(this.currentDate, "months");
      localDate.setDate(1);
      for (var month = 0; month < 12; ++month) {
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        var localMonth = value && value.getMonth() === localDate.getMonth();
        var select2 = value && value.getFullYear() === yr && localMonth;
        var title = this.globalize.formatDate(localDate, {
          type: "date",
          format: "MMM y"
        });
        dayLink.textContent = this.toCapitalize(this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "MMM"
        }));
        if (this.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED);
        } else if (!valueUtil && select2) {
          addClass([tdEle], SELECTED);
        } else {
          if (localDate.getMonth() === mon && this.currentDate.getMonth() === mon) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        localDate.setDate(1);
        localDate.setMonth(localDate.getMonth() + 1);
        if (!tdEle.classList.contains(DISABLED)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
          dayLink.setAttribute("title", "" + title);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, YEAR, e, value);
    };
    CalendarBase2.prototype.renderDecades = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.checkValue(this.currentDate));
      localDate.setMonth(0);
      localDate.setDate(1);
      var localYr = localDate.getFullYear();
      var startYr = new Date(localDate.setFullYear(localYr - localYr % 10));
      var endYr = new Date(localDate.setFullYear(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.globalize.formatDate(startYr, {
        format: null,
        type: "dateTime",
        skeleton: "y"
      });
      var endHdrYr = this.globalize.formatDate(endYr, {
        format: null,
        type: "dateTime",
        skeleton: "y"
      });
      this.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      var start = new Date(localYr - localYr % 10 - 1, 0, 1);
      var startYear = start.getFullYear();
      for (var rowIterator = 0; rowIterator < yearCell; ++rowIterator) {
        var year = startYear + rowIterator;
        localDate.setFullYear(year);
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "y"
        });
        if (year < startFullYr || year > endFullYr) {
          addClass([tdEle], OTHERDECADE);
          dayLink.setAttribute("aria-disabled", "true");
          if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
            addClass([tdEle], SELECTED);
          }
          if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
            addClass([tdEle], DISABLED);
          }
        } else if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
          addClass([tdEle], DISABLED);
        } else if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
          addClass([tdEle], SELECTED);
        } else {
          if (localDate.getFullYear() === this.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED)) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        if (!tdEle.classList.contains(DISABLED)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
          dayLink.setAttribute("title", "" + dayLink.textContent);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    CalendarBase2.prototype.dayCell = function(localDate) {
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = {
        skeleton: "full",
        type: "dateTime",
        calendar: type
      };
      var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
      var value;
      if (!isNullOrUndefined(date)) {
        value = date.valueOf();
      }
      var attrs = {
        className: CELL,
        attrs: {
          "id": "" + getUniqueID("" + value),
          "aria-selected": "false"
        }
      };
      return this.createElement("td", attrs);
    };
    CalendarBase2.prototype.firstDay = function(date) {
      var collection = this.currentView() !== "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE);
      if (collection.length) {
        for (var i = 0; i < collection.length; i++) {
          if (!collection[i].classList.contains(DISABLED)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.lastDay = function(date, view) {
      var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
      if (view !== 2) {
        var timeOffset = Math.abs(lastDate.getTimezoneOffset() - this.firstDay(date).getTimezoneOffset());
        if (timeOffset) {
          lastDate.setHours(this.firstDay(date).getHours() + timeOffset / 60);
        }
        return this.findLastDay(lastDate);
      } else {
        return this.findLastDay(this.firstDay(lastDate));
      }
    };
    CalendarBase2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    CalendarBase2.prototype.findLastDay = function(date) {
      var collection = this.currentView() === "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH);
      if (collection.length) {
        for (var i = collection.length - 1; i >= 0; i--) {
          if (!collection[i].classList.contains(DISABLED)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.removeTableHeadElement = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      }
    };
    CalendarBase2.prototype.renderTemplate = function(elements, count2, classNm, e, value) {
      var view = this.getViewNumber(this.currentView());
      var trEle;
      this.tableBodyElement = this.createElement("tbody");
      this.table.appendChild(this.tableBodyElement);
      removeClass([this.contentElement, this.headerElement], [MONTH, DECADE, YEAR]);
      addClass([this.contentElement, this.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row2 = count2;
      var rowIterator = 0;
      for (var dayCell = 0; dayCell < elements.length / count2; ++dayCell) {
        trEle = this.createElement("tr");
        for (rowIterator = 0 + rowIterator; rowIterator < row2; rowIterator++) {
          if (!elements[rowIterator].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowIterator].children[0])) {
            addClass([elements[rowIterator].children[0]], [LINK]);
            rippleEffect(elements[rowIterator].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowIterator]);
          if (this.weekNumber && rowIterator === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (!this.weekNumber && rowIterator === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (this.weekNumber) {
            if (rowIterator === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          } else {
            if (rowIterator === numberCell && elements[numberCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          }
        }
        row2 = row2 + count2;
        rowIterator = rowIterator + 0;
        this.tableBodyElement.appendChild(trEle);
      }
      this.table.querySelector("tbody").className = this.effect;
      if (this.calendarMode === "Gregorian") {
        this.iconHandler();
      } else {
        this.islamicModule.islamicIconHandler();
      }
      if (view !== this.getViewNumber(this.currentView()) || view === 0 && view !== this.getViewNumber(this.currentView())) {
        this.navigateHandler(e);
      }
      this.setAriaActiveDescendant();
    };
    CalendarBase2.prototype.clickHandler = function(e, value) {
      this.clickEventEmitter(e);
      var eve = e.currentTarget;
      var view = this.getViewNumber(this.currentView());
      if (eve.classList.contains(OTHERMONTH)) {
        this.contentClick(e, 0, null, value);
      } else if (view === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
        this.contentClick(e, 1, null, value);
      } else if (2 === view) {
        this.contentClick(e, 1, null, value);
      } else if (!eve.classList.contains(OTHERMONTH) && view === 0) {
        this.selectDate(e, this.getIdValue(e, null), null);
      } else {
        this.contentClick(e, 0, eve, value);
      }
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.clickEventEmitter = function(e) {
      e.preventDefault();
    };
    CalendarBase2.prototype.contentClick = function(e, view, element, value) {
      var currentView = this.getViewNumber(this.currentView());
      var d = this.getIdValue(e, element);
      switch (view) {
        case 0:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            detach(this.tableBodyElement);
            this.currentDate = d;
            this.effect = ZOOMIN;
            this.renderMonths(e);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setMonth(d.getMonth());
              if (d.getMonth() > 0 && this.currentDate.getMonth() !== d.getMonth()) {
                this.currentDate.setDate(0);
              }
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.currentDate = d;
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderMonths(e);
          }
          break;
        case 1:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            this.selectDate(e, d, null);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.islamicPreviousHeader = this.headerElement.textContent;
              var islamicDate = this.islamicModule.getIslamicDate(d);
              this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month, 1);
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderYears(e);
          }
      }
    };
    CalendarBase2.prototype.switchView = function(view, e, multiSelection, isCustomDate) {
      switch (view) {
        case 0:
          detach(this.tableBodyElement);
          this.renderMonths(e, null, isCustomDate);
          break;
        case 1:
          detach(this.tableBodyElement);
          this.renderYears(e);
          break;
        case 2:
          detach(this.tableBodyElement);
          this.renderDecades(e);
      }
    };
    CalendarBase2.prototype.getModuleName = function() {
      return "calendar";
    };
    CalendarBase2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({
          args: [this],
          member: "islamic",
          name: "Islamic"
        });
      }
      return modules;
    };
    CalendarBase2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    CalendarBase2.prototype.onPropertyChanged = function(newProp, oldProp, multiSelection, values) {
      this.effect = "";
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            if (newProp.enableRtl) {
              if (this.getModuleName() === "calendar") {
                this.element.classList.add("e-rtl");
              } else {
                this.calendarElement.classList.add("e-rtl");
              }
            } else {
              if (this.getModuleName() === "calendar") {
                this.element.classList.remove("e-rtl");
              } else {
                this.calendarElement.classList.remove("e-rtl");
              }
            }
            break;
          case "dayHeaderFormat":
            this.getCultureValues();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
            } else if (this.calendarElement) {
              this.createContentHeader();
            }
            this.adjustLongHeaderSize();
            break;
          case "min":
          case "max":
            this.rangeValidation(this.min, this.max);
            if (prop === "min") {
              this.setProperties({
                min: this.checkDateValue(new Date(this.checkValue(newProp.min)))
              }, true);
            } else {
              this.setProperties({
                max: this.checkDateValue(new Date(this.checkValue(newProp.max)))
              }, true);
            }
            this.setProperties({
              start: this.currentView()
            }, true);
            if (this.tableBodyElement) {
              detach(this.tableBodyElement);
            }
            this.minMaxUpdate();
            if (multiSelection) {
              this.validateValues(multiSelection, values);
            }
            if (this.getModuleName() !== "datepicker") {
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentBody();
            }
            if ((this.todayDate < this.min || this.max < this.todayDate) && this.footer && this.todayElement) {
              detach(this.todayElement);
              detach(this.footer);
              this.todayElement = this.footer = null;
              this.createContentFooter();
            } else {
              if (this.footer && this.todayElement && this.todayElement.classList.contains("e-disabled")) {
                removeClass([this.todayElement], DISABLED);
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = null;
                this.createContentFooter();
              }
            }
            break;
          case "start":
          case "depth":
          case "weekNumber":
          case "firstDayOfWeek":
          case "weekRule":
            this.checkView();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            if (this.getModuleName() === "calendar") {
              var l10nLocale = {
                today: "Today"
              };
              this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
            }
            this.l10.setLocale(this.locale);
            if (this.showTodayButton) {
              this.updateFooter();
            }
            break;
          case "showTodayButton":
            if (newProp.showTodayButton) {
              this.createContentFooter();
            } else {
              if (!isNullOrUndefined(this.todayElement) && !isNullOrUndefined(this.footer)) {
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = void 0;
              }
            }
            this.setProperties({
              showTodayButton: newProp.showTodayButton
            }, true);
            break;
        }
      }
    };
    CalendarBase2.prototype.validateValues = function(multiSelection, values) {
      if (multiSelection && !isNullOrUndefined(values) && values.length > 0) {
        var copyValues = this.copyValues(values);
        for (var skipIndex = 0; skipIndex < copyValues.length; skipIndex++) {
          var tempValue = copyValues[skipIndex];
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var tempValueString = void 0;
          if (this.calendarMode === "Gregorian") {
            tempValueString = this.globalize.formatDate(tempValue, {
              type: "date",
              skeleton: "yMd"
            });
          } else {
            tempValueString = this.globalize.formatDate(tempValue, {
              type: "dateTime",
              skeleton: "full",
              calendar: "islamic"
            });
          }
          var minFormatOption = {
            type: "date",
            skeleton: "yMd",
            calendar: type
          };
          var minStringValue = this.globalize.formatDate(this.min, minFormatOption);
          var minString = minStringValue;
          var maxFormatOption = {
            type: "date",
            skeleton: "yMd",
            calendar: type
          };
          var maxStringValue = this.globalize.formatDate(this.max, maxFormatOption);
          var maxString = maxStringValue;
          if (+new Date(tempValueString) < +new Date(minString) || +new Date(tempValueString) > +new Date(maxString)) {
            copyValues.splice(skipIndex, 1);
            skipIndex = -1;
          }
        }
        this.setProperties({
          values: copyValues
        }, true);
      }
    };
    CalendarBase2.prototype.setValueUpdate = function() {
      if (!isNullOrUndefined(this.tableBodyElement)) {
        detach(this.tableBodyElement);
        this.setProperties({
          start: this.currentView()
        }, true);
        this.createContentBody();
      }
    };
    CalendarBase2.prototype.copyValues = function(values) {
      var copyValues = [];
      if (!isNullOrUndefined(values) && values.length > 0) {
        for (var index = 0; index < values.length; index++) {
          copyValues.push(/* @__PURE__ */ new Date(+values[index]));
        }
      }
      return copyValues;
    };
    CalendarBase2.prototype.titleUpdate = function(date, view) {
      var globalize = new Internationalization(this.locale);
      var dayFormatOptions;
      var monthFormatOptions;
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      if (this.calendarMode === "Gregorian") {
        dayFormatOptions = globalize.formatDate(date, {
          type: "dateTime",
          skeleton: "yMMMM",
          calendar: type
        });
        monthFormatOptions = globalize.formatDate(date, {
          format: null,
          type: "dateTime",
          skeleton: "y",
          calendar: type
        });
      } else {
        dayFormatOptions = globalize.formatDate(date, {
          type: "dateTime",
          format: "MMMM y",
          calendar: type
        });
        monthFormatOptions = globalize.formatDate(date, {
          type: "dateTime",
          format: "y",
          calendar: type
        });
      }
      switch (view) {
        case "days":
          this.headerTitleElement.textContent = this.toCapitalize(dayFormatOptions);
          break;
        case "months":
          this.headerTitleElement.textContent = monthFormatOptions;
      }
    };
    CalendarBase2.prototype.setActiveDescendant = function() {
      var id;
      var focusedEle = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedEle = this.tableBodyElement.querySelector("tr td.e-selected");
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var title;
      var view = this.currentView();
      if (view === "Month") {
        title = this.globalize.formatDate(this.currentDate, {
          type: "date",
          skeleton: "full",
          calendar: type
        });
      } else if (view === "Year") {
        if (type !== "islamic") {
          title = this.globalize.formatDate(this.currentDate, {
            type: "date",
            skeleton: "yMMMM",
            calendar: type
          });
        } else {
          title = this.globalize.formatDate(this.currentDate, {
            type: "date",
            skeleton: "GyMMM",
            calendar: type
          });
        }
      } else {
        title = this.globalize.formatDate(this.currentDate, {
          format: null,
          type: "date",
          skeleton: "y",
          calendar: type
        });
      }
      if (selectedEle || focusedEle) {
        if (!isNullOrUndefined(selectedEle)) {
          selectedEle.setAttribute("aria-selected", "true");
        }
        (focusedEle || selectedEle).setAttribute("aria-label", title);
        id = (focusedEle || selectedEle).getAttribute("id");
      }
      return id;
    };
    CalendarBase2.prototype.iconHandler = function() {
      new Date(this.checkValue(this.currentDate)).setDate(1);
      switch (this.currentView()) {
        case "Month":
          this.previousIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Year":
          this.previousIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Decade":
          this.previousIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.max) > -1);
      }
    };
    CalendarBase2.prototype.destroy = function() {
      if (this.getModuleName() === "calendar" && this.element) {
        removeClass([this.element], [ROOT]);
      } else {
        if (this.calendarElement && this.element) {
          removeClass([this.element], [ROOT]);
        }
      }
      if (this.getModuleName() === "calendar" && this.element) {
        if (!isNullOrUndefined(this.headerTitleElement)) {
          EventHandler.remove(this.headerTitleElement, "click", this.navigateTitle);
        }
        if (this.todayElement) {
          EventHandler.remove(this.todayElement, "click", this.todayButtonClick);
        }
        this.previousIconHandler(true);
        this.nextIconHandler(true);
        this.keyboardModule.destroy();
        this.element.removeAttribute("data-role");
        if (!isNullOrUndefined(this.calendarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      if (this.element) {
        this.element.innerHTML = "";
      }
      this.todayElement = null;
      this.tableBodyElement = null;
      this.todayButtonEvent = null;
      this.renderDayCellArgs = null;
      this.headerElement = null;
      this.nextIcon = null;
      this.table = null;
      this.tableHeadElement = null;
      this.previousIcon = null;
      this.headerTitleElement = null;
      this.footer = null;
      this.contentElement = null;
      _super.prototype.destroy.call(this);
    };
    CalendarBase2.prototype.title = function(e) {
      var currentView = this.getViewNumber(this.currentView());
      this.effect = ZOOMIN;
      this.switchView(++currentView, e);
    };
    CalendarBase2.prototype.getViewNumber = function(stringVal) {
      if (stringVal === "Month") {
        return 0;
      } else if (stringVal === "Year") {
        return 1;
      } else {
        return 2;
      }
    };
    CalendarBase2.prototype.navigateTitle = function(e) {
      e.preventDefault();
      this.title(e);
    };
    CalendarBase2.prototype.previous = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, -10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigatePrevious = function(e) {
      !Browser.isDevice && e.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.previous();
      } else {
        this.islamicModule.islamicPrevious();
      }
      this.triggerNavigate(e);
    };
    CalendarBase2.prototype.next = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, 10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigateNext = function(eve) {
      !Browser.isDevice && eve.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.next();
      } else {
        this.islamicModule.islamicNext();
      }
      this.triggerNavigate(eve);
    };
    CalendarBase2.prototype.navigateTo = function(view, date, isCustomDate) {
      if (+date >= +this.min && +date <= +this.max) {
        this.currentDate = date;
      }
      if (+date <= +this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
      if (+date >= +this.max) {
        this.currentDate = new Date(this.checkValue(this.max));
      }
      if (this.getViewNumber(this.depth) >= this.getViewNumber(view)) {
        if (this.getViewNumber(this.depth) <= this.getViewNumber(this.start) || this.getViewNumber(this.depth) === this.getViewNumber(view)) {
          view = this.depth;
        }
      }
      this.switchView(this.getViewNumber(view), null, null, isCustomDate);
    };
    CalendarBase2.prototype.currentView = function() {
      if (!isNullOrUndefined(this.contentElement) && this.contentElement.classList.contains(YEAR)) {
        return "Year";
      } else if (!isNullOrUndefined(this.contentElement) && this.contentElement.classList.contains(DECADE)) {
        return "Decade";
      } else {
        return "Month";
      }
    };
    CalendarBase2.prototype.getDateVal = function(date, value) {
      return !isNullOrUndefined(value) && date.getDate() === value.getDate() && date.getMonth() === value.getMonth() && date.getFullYear() === value.getFullYear();
    };
    CalendarBase2.prototype.getCultureObjects = function(ld, c) {
      var gregorianFormat = ".dates.calendars.gregorian.days.format." + this.dayHeaderFormat.toLowerCase();
      var islamicFormat = ".dates.calendars.islamic.days.format." + this.dayHeaderFormat.toLowerCase();
      var mainVal = "main.";
      if (this.calendarMode === "Gregorian") {
        return getValue(mainVal + "" + this.locale + gregorianFormat, ld);
      } else {
        return getValue("main." + this.locale + islamicFormat, ld);
      }
    };
    CalendarBase2.prototype.getWeek = function(d) {
      var currentDate = new Date(this.checkValue(d)).valueOf();
      var date = new Date(d.getFullYear(), 0, 1).valueOf();
      return Math.ceil((currentDate - date + dayMilliSeconds) / dayMilliSeconds / 7);
    };
    CalendarBase2.prototype.setStartDate = function(date, time) {
      var tzOffset = date.getTimezoneOffset();
      var d = new Date(date.getTime() + time);
      var tzOffsetDiff = d.getTimezoneOffset() - tzOffset;
      date.setTime(d.getTime() + tzOffsetDiff * minutesMilliSeconds);
    };
    CalendarBase2.prototype.addMonths = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setMonth(date.getMonth() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month + i, 1);
      }
    };
    CalendarBase2.prototype.addYears = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setFullYear(date.getFullYear() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year + i, islamicDate.month, 1);
      }
    };
    CalendarBase2.prototype.getIdValue = function(e, element) {
      var eve;
      if (e) {
        eve = e.currentTarget;
      } else {
        eve = element;
      }
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = {
        type: "dateTime",
        skeleton: "full",
        calendar: type
      };
      var dateString = this.globalize.formatDate(new Date(parseInt("" + eve.getAttribute("id"), 0)), dateFormatOptions);
      var date = this.globalize.parseDate(dateString, dateFormatOptions);
      var value = date.valueOf() - date.valueOf() % 1e3;
      return new Date(value);
    };
    CalendarBase2.prototype.adjustLongHeaderSize = function() {
      removeClass([this.element], DAYHEADERLONG);
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.getModuleName() === "calendar" ? this.element : this.calendarElement], DAYHEADERLONG);
      }
    };
    CalendarBase2.prototype.selectDate = function(e, date, node, multiSelection, values) {
      var element = node || e.currentTarget;
      this.isDateSelected = false;
      if (this.currentView() === "Decade") {
        this.setDateDecade(this.currentDate, date.getFullYear());
      } else if (this.currentView() === "Year") {
        this.setDateYear(this.currentDate, date);
      } else {
        if (multiSelection && !this.checkPresentDate(date, values)) {
          var copyValues = this.copyValues(values);
          if (!isNullOrUndefined(values) && copyValues.length > 0) {
            copyValues.push(new Date(this.checkValue(date)));
            this.setProperties({
              values: copyValues
            }, true);
            this.setProperties({
              value: values[values.length - 1]
            }, true);
          } else {
            this.setProperties({
              values: [new Date(this.checkValue(date))]
            }, true);
          }
        } else {
          this.setProperties({
            value: new Date(this.checkValue(date))
          }, true);
        }
        this.currentDate = new Date(this.checkValue(date));
      }
      var tableBodyElement = closest(element, "." + ROOT);
      if (isNullOrUndefined(tableBodyElement)) {
        tableBodyElement = this.tableBodyElement;
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + SELECTED))) {
        removeClass([tableBodyElement.querySelector("." + SELECTED)], SELECTED);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDDATE))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDDATE)], FOCUSEDDATE);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDCELL))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDCELL)], FOCUSEDCELL);
      }
      if (multiSelection) {
        var copyValues = this.copyValues(values);
        var collection = Array.prototype.slice.call(this.tableBodyElement.querySelectorAll("td"));
        for (var index = 0; index < collection.length; index++) {
          var tempElement = tableBodyElement.querySelectorAll("td." + FOCUSEDDATE)[0];
          var selectedElement = tableBodyElement.querySelectorAll("td." + SELECTED)[0];
          if (collection[index] === tempElement) {
            removeClass([collection[index]], FOCUSEDDATE);
          }
          if (collection[index] === selectedElement && !this.checkPresentDate(new Date(parseInt(selectedElement.getAttribute("id").split("_")[0], 10)), values)) {
            removeClass([collection[index]], SELECTED);
          }
        }
        if (element.classList.contains(SELECTED)) {
          removeClass([element], SELECTED);
          for (var i = 0; i < copyValues.length; i++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = {
              format: null,
              type: "date",
              skeleton: "short",
              calendar: type
            };
            var localDateString = this.globalize.formatDate(date, formatOptions);
            var tempDateString = this.globalize.formatDate(copyValues[i], formatOptions);
            if (localDateString === tempDateString) {
              var index = copyValues.indexOf(copyValues[i]);
              copyValues.splice(index, 1);
              addClass([element], FOCUSEDDATE);
            }
          }
          this.setProperties({
            values: copyValues
          }, true);
        } else {
          addClass([element], SELECTED);
        }
      } else {
        addClass([element], SELECTED);
      }
      this.isDateSelected = true;
    };
    CalendarBase2.prototype.checkPresentDate = function(dates, values) {
      var previousValue = false;
      if (!isNullOrUndefined(values)) {
        for (var checkPrevious = 0; checkPrevious < values.length; checkPrevious++) {
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var localDateString = this.globalize.formatDate(dates, {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          var tempDateString = this.globalize.formatDate(values[checkPrevious], {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          if (localDateString === tempDateString) {
            previousValue = true;
          }
        }
      }
      return previousValue;
    };
    CalendarBase2.prototype.setAriaActiveDescendant = function() {
      attributes(this.table, {
        "aria-activedescendant": "" + this.setActiveDescendant()
      });
    };
    CalendarBase2.prototype.previousIconHandler = function(disabled) {
      if (disabled) {
        if (!isNullOrUndefined(this.previousIcon)) {
          EventHandler.remove(this.previousIcon, "click", this.navigatePreviousHandler);
          addClass([this.previousIcon], "" + DISABLED);
          addClass([this.previousIcon], "" + OVERLAY);
          this.previousIcon.setAttribute("aria-disabled", "true");
        }
      } else {
        EventHandler.add(this.previousIcon, "click", this.navigatePreviousHandler);
        removeClass([this.previousIcon], "" + DISABLED);
        removeClass([this.previousIcon], "" + OVERLAY);
        this.previousIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.renderDayCellEvent = function(args) {
      extend(this.renderDayCellArgs, {
        name: "renderDayCell"
      });
      this.trigger("renderDayCell", args);
    };
    CalendarBase2.prototype.navigatedEvent = function(eve) {
      extend(this.navigatedArgs, {
        name: "navigated",
        event: eve
      });
      this.trigger("navigated", this.navigatedArgs);
    };
    CalendarBase2.prototype.triggerNavigate = function(event2) {
      this.navigatedArgs = {
        view: this.currentView(),
        date: this.currentDate
      };
      this.navigatedEvent(event2);
    };
    CalendarBase2.prototype.nextIconHandler = function(disabled) {
      if (disabled) {
        if (!isNullOrUndefined(this.previousIcon)) {
          EventHandler.remove(this.nextIcon, "click", this.navigateNextHandler);
          addClass([this.nextIcon], DISABLED);
          addClass([this.nextIcon], OVERLAY);
          this.nextIcon.setAttribute("aria-disabled", "true");
        }
      } else {
        EventHandler.add(this.nextIcon, "click", this.navigateNextHandler);
        removeClass([this.nextIcon], DISABLED);
        removeClass([this.nextIcon], OVERLAY);
        this.nextIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.compare = function(startDate, endDate, modifier) {
      var start = endDate.getFullYear();
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (startDate.getFullYear() > end) {
        result = 1;
      } else if (startDate.getFullYear() < start) {
        result = -1;
      }
      return result;
    };
    CalendarBase2.prototype.isMinMaxRange = function(date) {
      return +date >= +this.min && +date <= +this.max;
    };
    CalendarBase2.prototype.isMonthYearRange = function(date) {
      if (this.calendarMode === "Gregorian") {
        return date.getMonth() >= this.min.getMonth() && date.getFullYear() >= this.min.getFullYear() && date.getMonth() <= this.max.getMonth() && date.getFullYear() <= this.max.getFullYear();
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        return islamicDate.month >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).month && islamicDate.year >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).year && islamicDate.month <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).month && islamicDate.year <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).year;
      }
    };
    CalendarBase2.prototype.compareYear = function(start, end) {
      return this.compare(start, end, 0);
    };
    CalendarBase2.prototype.compareDecade = function(start, end) {
      return this.compare(start, end, 10);
    };
    CalendarBase2.prototype.shiftArray = function(array, i) {
      return array.slice(i).concat(array.slice(0, i));
    };
    CalendarBase2.prototype.addDay = function(date, i, e, max, min) {
      var column = i;
      var value = /* @__PURE__ */ new Date(+date);
      if (!isNullOrUndefined(this.tableBodyElement) && !isNullOrUndefined(e)) {
        while (this.findNextTD(/* @__PURE__ */ new Date(+date), column, max, min)) {
          column += i;
        }
        var rangeValue = new Date(value.setDate(value.getDate() + column));
        column = +rangeValue > +max || +rangeValue < +min ? column === i ? i - i : i : column;
      }
      date.setDate(date.getDate() + column);
    };
    CalendarBase2.prototype.findNextTD = function(date, column, max, min) {
      var value = new Date(date.setDate(date.getDate() + column));
      var collection = [];
      var isDisabled = false;
      if ((!isNullOrUndefined(value) && value.getMonth()) === (!isNullOrUndefined(this.currentDate) && this.currentDate.getMonth())) {
        var tdEles = void 0;
        if (this.calendarMode === "Gregorian") {
          tdEles = this.renderDays(value);
        } else {
          tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
        }
        collection = tdEles.filter(function(element) {
          return element.classList.contains(DISABLED);
        });
      } else {
        collection = this.tableBodyElement.querySelectorAll("td." + DISABLED);
      }
      if (+value <= +max && +value >= +min) {
        if (collection.length) {
          for (var i = 0; i < collection.length; i++) {
            isDisabled = +value === +new Date(parseInt(collection[i].id, 0)) ? true : false;
            if (isDisabled) {
              break;
            }
          }
        }
      }
      return isDisabled;
    };
    CalendarBase2.prototype.getMaxDays = function(d) {
      var date;
      var tmpDate = new Date(this.checkValue(d));
      date = 28;
      var month = tmpDate.getMonth();
      while (tmpDate.getMonth() === month) {
        ++date;
        tmpDate.setDate(date);
      }
      return date - 1;
    };
    CalendarBase2.prototype.setDateDecade = function(date, year) {
      date.setFullYear(year);
      this.setProperties({
        value: new Date(this.checkValue(date))
      }, true);
    };
    CalendarBase2.prototype.setDateYear = function(date, value) {
      date.setFullYear(value.getFullYear(), value.getMonth(), date.getDate());
      if (value.getMonth() !== date.getMonth()) {
        date.setDate(0);
        this.currentDate = new Date(this.checkValue(value));
      }
      this.setProperties({
        value: new Date(this.checkValue(date))
      }, true);
    };
    CalendarBase2.prototype.compareMonth = function(start, end) {
      var result;
      if (start.getFullYear() > end.getFullYear()) {
        result = 1;
      } else if (start.getFullYear() < end.getFullYear()) {
        result = -1;
      } else {
        result = start.getMonth() === end.getMonth() ? 0 : start.getMonth() > end.getMonth() ? 1 : -1;
      }
      return result;
    };
    CalendarBase2.prototype.checkValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    CalendarBase2.prototype.checkView = function() {
      if (this.start !== "Decade" && this.start !== "Year") {
        this.setProperties({
          start: "Month"
        }, true);
      }
      if (this.depth !== "Decade" && this.depth !== "Year") {
        this.setProperties({
          depth: "Month"
        }, true);
      }
      if (this.getViewNumber(this.depth) > this.getViewNumber(this.start)) {
        this.setProperties({
          depth: "Month"
        }, true);
      }
    };
    CalendarBase2.prototype.getDate = function(date, timezone) {
      if (timezone) {
        date = new Date(date.toLocaleString("en-US", {
          timeZone: timezone
        }));
      }
      return date;
    };
    __decorate7([Property(new Date(1900, 0, 1))], CalendarBase2.prototype, "min", void 0);
    __decorate7([Property(true)], CalendarBase2.prototype, "enabled", void 0);
    __decorate7([Property(null)], CalendarBase2.prototype, "cssClass", void 0);
    __decorate7([Property(new Date(2099, 11, 31))], CalendarBase2.prototype, "max", void 0);
    __decorate7([Property(null)], CalendarBase2.prototype, "firstDayOfWeek", void 0);
    __decorate7([Property("Gregorian")], CalendarBase2.prototype, "calendarMode", void 0);
    __decorate7([Property("Month")], CalendarBase2.prototype, "start", void 0);
    __decorate7([Property("Month")], CalendarBase2.prototype, "depth", void 0);
    __decorate7([Property(false)], CalendarBase2.prototype, "weekNumber", void 0);
    __decorate7([Property("FirstDay")], CalendarBase2.prototype, "weekRule", void 0);
    __decorate7([Property(true)], CalendarBase2.prototype, "showTodayButton", void 0);
    __decorate7([Property("Short")], CalendarBase2.prototype, "dayHeaderFormat", void 0);
    __decorate7([Property(false)], CalendarBase2.prototype, "enablePersistence", void 0);
    __decorate7([Property(null)], CalendarBase2.prototype, "keyConfigs", void 0);
    __decorate7([Property(null)], CalendarBase2.prototype, "serverTimezoneOffset", void 0);
    __decorate7([Event2()], CalendarBase2.prototype, "created", void 0);
    __decorate7([Event2()], CalendarBase2.prototype, "destroyed", void 0);
    __decorate7([Event2()], CalendarBase2.prototype, "navigated", void 0);
    __decorate7([Event2()], CalendarBase2.prototype, "renderDayCell", void 0);
    CalendarBase2 = __decorate7([NotifyPropertyChanges], CalendarBase2);
    return CalendarBase2;
  }(Component2)
);
var Calendar = (
  /** @class */
  function(_super) {
    __extends19(Calendar2, _super);
    function Calendar2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Calendar2.prototype.render = function() {
      if (this.calendarMode === "Islamic" && this.islamicModule === void 0) {
        throwError("Requires the injectable Islamic modules to render Calendar in Islamic mode");
      }
      if (this.isMultiSelection && typeof this.values === "object" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var tempValues = [];
        var copyValues = [];
        for (var limit = 0; limit < this.values.length; limit++) {
          if (tempValues.indexOf(+this.values[limit]) === -1) {
            tempValues.push(+this.values[limit]);
            copyValues.push(this.values[limit]);
          }
        }
        this.setProperties({
          values: copyValues
        }, true);
        for (var index = 0; index < this.values.length; index++) {
          if (!this.checkDateValue(this.values[index])) {
            if (typeof this.values[index] === "string" && this.checkDateValue(new Date(this.checkValue(this.values[index])))) {
              var copyDate = new Date(this.checkValue(this.values[index]));
              this.values.splice(index, 1);
              this.values.splice(index, 0, copyDate);
            } else {
              this.values.splice(index, 1);
            }
          }
        }
        this.setProperties({
          value: this.values[this.values.length - 1]
        }, true);
        this.previousValues = this.values.length;
      }
      this.validateDate();
      this.minMaxUpdate();
      if (this.getModuleName() === "calendar") {
        this.setEnable(this.enabled);
        this.setClass(this.cssClass);
      }
      _super.prototype.render.call(this);
      if (this.getModuleName() === "calendar") {
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.add(form, "reset", this.formResetHandler.bind(this));
        }
        this.setTimeZone(this.serverTimezoneOffset);
      }
      this.renderComplete();
    };
    Calendar2.prototype.setEnable = function(enable) {
      if (!enable) {
        addClass([this.element], DISABLED);
      } else {
        removeClass([this.element], DISABLED);
      }
    };
    Calendar2.prototype.setClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(oldCssClass) && oldCssClass !== "") {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (!isNullOrUndefined(newCssClass)) {
        addClass([this.element], newCssClass.split(" "));
      }
    };
    Calendar2.prototype.isDayLightSaving = function() {
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    Calendar2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var serverTimezoneDiff = offsetValue;
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    Calendar2.prototype.formResetHandler = function() {
      this.setProperties({
        value: null
      }, true);
    };
    Calendar2.prototype.validateDate = function() {
      if (typeof this.value === "string") {
        this.setProperties({
          value: this.checkDateValue(new Date(this.checkValue(this.value)))
        }, true);
      }
      _super.prototype.validateDate.call(this, this.value);
      if (!isNullOrUndefined(this.value) && this.min <= this.max && this.value >= this.min && this.value <= this.max) {
        this.currentDate = new Date(this.checkValue(this.value));
      }
      if (isNaN(+this.value)) {
        this.setProperties({
          value: null
        }, true);
      }
    };
    Calendar2.prototype.minMaxUpdate = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.value) && this.value <= this.min && this.min <= this.max) {
          this.setProperties({
            value: this.min
          }, true);
          this.changedArgs = {
            value: this.value
          };
        } else {
          if (!isNullOrUndefined(this.value) && this.value >= this.max && this.min <= this.max) {
            this.setProperties({
              value: this.max
            }, true);
            this.changedArgs = {
              value: this.value
            };
          }
        }
      }
      if (this.getModuleName() !== "calendar" && !isNullOrUndefined(this.value)) {
        if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max) {
          _super.prototype.minMaxUpdate.call(this, this.min);
        } else {
          if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max) {
            _super.prototype.minMaxUpdate.call(this, this.max);
          }
        }
      } else {
        _super.prototype.minMaxUpdate.call(this, this.value);
      }
    };
    Calendar2.prototype.generateTodayVal = function(value) {
      var tempValue = /* @__PURE__ */ new Date();
      if (!isNullOrUndefined(this.timezone)) {
        tempValue = _super.prototype.getDate.call(this, tempValue, this.timezone);
      }
      if (value && isNullOrUndefined(this.timezone)) {
        tempValue.setHours(value.getHours());
        tempValue.setMinutes(value.getMinutes());
        tempValue.setSeconds(value.getSeconds());
        tempValue.setMilliseconds(value.getMilliseconds());
      } else {
        tempValue = new Date(tempValue.getFullYear(), tempValue.getMonth(), tempValue.getDate(), 0, 0, 0, 0);
      }
      return tempValue;
    };
    Calendar2.prototype.todayButtonClick = function(e) {
      if (this.showTodayButton) {
        var tempValue = this.generateTodayVal(this.value);
        this.setProperties({
          value: tempValue
        }, true);
        this.isTodayClicked = true;
        this.todayButtonEvent = e;
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (!_super.prototype.checkPresentDate.call(this, tempValue, this.values)) {
            copyValues.push(tempValue);
            this.setProperties({
              values: copyValues
            });
          }
        }
        _super.prototype.todayButtonClick.call(this, e, /* @__PURE__ */ new Date(+this.value));
      }
    };
    Calendar2.prototype.keyActionHandle = function(e) {
      _super.prototype.keyActionHandle.call(this, e, this.value, this.isMultiSelection);
    };
    Calendar2.prototype.preRender = function() {
      var _this = this;
      this.changeHandler = function(e) {
        _this.triggerChange(e);
      };
      this.checkView();
      _super.prototype.preRender.call(this, this.value);
    };
    Calendar2.prototype.createContent = function() {
      this.previousDate = this.value;
      this.previousDateTime = this.value;
      _super.prototype.createContent.call(this);
    };
    Calendar2.prototype.minMaxDate = function(localDate) {
      return _super.prototype.minMaxDate.call(this, localDate);
    };
    Calendar2.prototype.renderMonths = function(e, value, isCustomDate) {
      _super.prototype.renderMonths.call(this, e, this.value, isCustomDate);
    };
    Calendar2.prototype.renderDays = function(currentDate, value, isMultiSelect, values, isCustomDate, e) {
      var tempDays = _super.prototype.renderDays.call(this, currentDate, this.value, this.isMultiSelection, this.values, isCustomDate, e);
      if (this.isMultiSelection) {
        _super.prototype.validateValues.call(this, this.isMultiSelection, this.values);
      }
      return tempDays;
    };
    Calendar2.prototype.renderYears = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderYears.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderYears(e, this.value);
      }
    };
    Calendar2.prototype.renderDecades = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderDecades.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderDecade(e, this.value);
      }
    };
    Calendar2.prototype.renderTemplate = function(elements, count2, classNm, e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderTemplate.call(this, elements, count2, classNm, e, this.value);
      } else {
        this.islamicModule.islamicRenderTemplate(elements, count2, classNm, e, this.value);
      }
      this.changedArgs = {
        value: this.value,
        values: this.values
      };
      e && e.type === "click" && e.currentTarget.classList.contains(OTHERMONTH) ? this.changeHandler(e) : this.changeHandler();
    };
    Calendar2.prototype.clickHandler = function(e) {
      var eve = e.currentTarget;
      this.isPopupClicked = true;
      if (eve.classList.contains(OTHERMONTH)) {
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (copyValues.toString().indexOf(this.getIdValue(e, null).toString()) === -1) {
            copyValues.push(this.getIdValue(e, null));
            this.setProperties({
              values: copyValues
            }, true);
            this.setProperties({
              value: this.values[this.values.length - 1]
            }, true);
          } else {
            this.previousDates = true;
          }
        } else {
          this.setProperties({
            value: this.getIdValue(e, null)
          }, true);
        }
      }
      var storeView = this.currentView();
      _super.prototype.clickHandler.call(this, e, this.value);
      if (this.isMultiSelection && this.currentDate !== this.value && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0]) && storeView === "Year") {
        this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
      }
    };
    Calendar2.prototype.switchView = function(view, e, isMultiSelection, isCustomDate) {
      _super.prototype.switchView.call(this, view, e, this.isMultiSelection, isCustomDate);
    };
    Calendar2.prototype.getModuleName = function() {
      _super.prototype.getModuleName.call(this);
      return "calendar";
    };
    Calendar2.prototype.getPersistData = function() {
      _super.prototype.getPersistData.call(this);
      var keyEntity = ["value", "values"];
      return this.addOnPersist(keyEntity);
    };
    Calendar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      this.effect = "";
      this.rangeValidation(this.min, this.max);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            if (this.isDateSelected) {
              if (typeof newProp.value === "string") {
                this.setProperties({
                  value: new Date(this.checkValue(newProp.value))
                }, true);
              } else {
                newProp.value = new Date(this.checkValue(newProp.value));
              }
              if (isNaN(+this.value)) {
                this.setProperties({
                  value: oldProp.value
                }, true);
              }
              this.update();
            }
            break;
          case "values":
            if (this.isDateSelected) {
              if (typeof newProp.values === "string" || typeof newProp.values === "number") {
                this.setProperties({
                  values: null
                }, true);
              } else {
                var copyValues = this.copyValues(this.values);
                for (var index = 0; index < copyValues.length; index++) {
                  var tempDate = copyValues[index];
                  if (this.checkDateValue(tempDate) && !_super.prototype.checkPresentDate.call(this, tempDate, copyValues)) {
                    copyValues.push(tempDate);
                  }
                }
                this.setProperties({
                  values: copyValues
                }, true);
                if (this.values.length > 0) {
                  this.setProperties({
                    value: newProp.values[newProp.values.length - 1]
                  }, true);
                }
              }
              this.validateValues(this.isMultiSelection, this.values);
              this.update();
            }
            break;
          case "isMultiSelection":
            if (this.isDateSelected) {
              this.setProperties({
                isMultiSelection: newProp.isMultiSelection
              }, true);
              this.update();
            }
            break;
          case "enabled":
            this.setEnable(this.enabled);
            break;
          case "cssClass":
            if (this.getModuleName() === "calendar") {
              this.setClass(newProp.cssClass, oldProp.cssClass);
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp, this.isMultiSelection, this.values);
        }
      }
      this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
    };
    Calendar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.getModuleName() === "calendar") {
        this.changedArgs = null;
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
        }
      }
    };
    Calendar2.prototype.navigateTo = function(view, date, isCustomDate) {
      this.minMaxUpdate();
      _super.prototype.navigateTo.call(this, view, date, isCustomDate);
    };
    Calendar2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    Calendar2.prototype.addDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number") {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var i = 0; i < tempDates.length; i++) {
            if (this.checkDateValue(tempDates[i]) && !_super.prototype.checkPresentDate.call(this, tempDates[i], copyValues)) {
              if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
                copyValues.push(tempDates[i]);
              } else {
                copyValues = [/* @__PURE__ */ new Date(+tempDates[i])];
              }
            }
          }
        } else {
          if (this.checkDateValue(dates) && !_super.prototype.checkPresentDate.call(this, dates, copyValues)) {
            if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
              copyValues.push(dates);
            } else {
              copyValues = [/* @__PURE__ */ new Date(+dates)];
            }
          }
        }
        this.setProperties({
          values: copyValues
        }, true);
        if (this.isMultiSelection) {
          this.setProperties({
            value: this.values[this.values.length - 1]
          }, true);
        }
        this.validateValues(this.isMultiSelection, copyValues);
        this.update();
        this.changedArgs = {
          value: this.value,
          values: this.values
        };
        this.changeHandler();
      }
    };
    Calendar2.prototype.removeDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var index = 0; index < tempDates.length; index++) {
            for (var i = 0; i < copyValues.length; i++) {
              if (+copyValues[i] === +tempDates[index]) {
                copyValues.splice(i, 1);
              }
            }
          }
        } else {
          for (var i = 0; i < copyValues.length; i++) {
            if (+copyValues[i] === +dates) {
              copyValues.splice(i, 1);
            }
          }
        }
        this.setProperties({
          values: copyValues
        }, false);
        this.update();
        if (this.isMultiSelection) {
          this.setProperties({
            value: this.values[this.values.length - 1]
          }, true);
        }
        this.changedArgs = {
          value: this.value,
          values: this.values
        };
        this.changeHandler();
      }
    };
    Calendar2.prototype.setTodayDate = function(date) {
      var todayDate = /* @__PURE__ */ new Date(+date);
      this.setProperties({
        value: todayDate
      }, true);
      _super.prototype.todayButtonClick.call(this, null, todayDate, true);
    };
    Calendar2.prototype.update = function() {
      this.validateDate();
      this.minMaxUpdate();
      _super.prototype.setValueUpdate.call(this);
    };
    Calendar2.prototype.selectDate = function(e, date, element) {
      _super.prototype.selectDate.call(this, e, date, element, this.isMultiSelection, this.values);
      if (this.isMultiSelection && !isNullOrUndefined(this.values) && this.values.length > 0) {
        this.setProperties({
          value: this.values[this.values.length - 1]
        }, true);
      }
      this.changedArgs = {
        value: this.value,
        values: this.values
      };
      this.changeHandler(e);
    };
    Calendar2.prototype.changeEvent = function(e) {
      if ((this.value && this.value.valueOf()) !== (this.previousDate && +this.previousDate.valueOf()) || this.isMultiSelection) {
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = /* @__PURE__ */ new Date(+this.value);
      }
    };
    Calendar2.prototype.triggerChange = function(e) {
      if (!isNullOrUndefined(this.todayButtonEvent) && this.isTodayClicked) {
        e = this.todayButtonEvent;
        this.isTodayClicked = false;
      }
      this.changedArgs.event = e || null;
      this.changedArgs.isInteracted = !isNullOrUndefined(e);
      if (!isNullOrUndefined(this.value)) {
        this.setProperties({
          value: this.value
        }, true);
      }
      if (!this.isMultiSelection && +this.value !== Number.NaN && (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || this.previousDate === null && !isNaN(+this.value))) {
        this.changeEvent(e);
      } else if (!isNullOrUndefined(this.values) && this.previousValues !== this.values.length) {
        this.changeEvent(e);
        this.previousValues = this.values.length;
      }
    };
    __decorate7([Property(null)], Calendar2.prototype, "value", void 0);
    __decorate7([Property(null)], Calendar2.prototype, "values", void 0);
    __decorate7([Property(false)], Calendar2.prototype, "isMultiSelection", void 0);
    __decorate7([Event2()], Calendar2.prototype, "change", void 0);
    Calendar2 = __decorate7([NotifyPropertyChanges], Calendar2);
    return Calendar2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/islamic.js
var OTHERMONTH2 = "e-other-month";
var YEAR2 = "e-year";
var MONTH2 = "e-month";
var DECADE2 = "e-decade";
var DISABLED2 = "e-disabled";
var OVERLAY2 = "e-overlay";
var WEEKEND2 = "e-weekend";
var WEEKNUMBER2 = "e-week-number";
var SELECTED2 = "e-selected";
var FOCUSEDDATE2 = "e-focused-date";
var OTHERMONTHROW2 = "e-month-hide";
var TODAY2 = "e-today";
var LINK2 = "e-day";
var CELL2 = "e-cell";
var dayMilliSeconds2 = 864e5;
var minDecade = 2060;
var maxDecade = 2069;
var Islamic = (
  /** @class */
  function() {
    function Islamic2(instance) {
      this.calendarInstance = instance;
    }
    Islamic2.prototype.getModuleName = function() {
      return "islamic";
    };
    Islamic2.prototype.islamicTitleUpdate = function(date, view) {
      var globalize = new Internationalization(this.calendarInstance.locale);
      switch (view) {
        case "days":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, {
            type: "dateTime",
            format: "MMMMyyyy",
            calendar: "islamic"
          });
          break;
        case "months":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, {
            type: "dateTime",
            format: "yyyy",
            calendar: "islamic"
          });
      }
    };
    Islamic2.prototype.islamicRenderDays = function(currentDate, value, multiSelection, values) {
      var tdEles = [];
      var cellsCount = 42;
      var localDate = new Date(this.islamicInValue(currentDate));
      var minMaxDate;
      this.islamicTitleUpdate(currentDate, "days");
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = this.toGregorian(islamicDate.year, islamicDate.month, 1);
      var currentMonth = islamicDate.month;
      localDate = gregorianObject;
      while (localDate.getDay() !== this.calendarInstance.firstDayOfWeek) {
        this.calendarInstance.setStartDate(localDate, -1 * dayMilliSeconds2);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.calendarInstance.createElement("td", {
          className: CELL2
        });
        var weekAnchor = this.calendarInstance.createElement("span");
        if (day % 7 === 0 && this.calendarInstance.weekNumber) {
          weekAnchor.textContent = "" + this.calendarInstance.getWeek(localDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER2);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.calendarInstance.minMaxDate(localDate);
        var dateFormatOptions = {
          type: "dateTime",
          skeleton: "full",
          calendar: "islamic"
        };
        var date = this.calendarInstance.globalize.parseDate(this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.islamicDayCell(localDate);
        var title = this.calendarInstance.globalize.formatDate(localDate, {
          type: "date",
          skeleton: "full",
          calendar: "islamic"
        });
        var dayLink = this.calendarInstance.createElement("span");
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {
          type: "date",
          skeleton: "d",
          calendar: "islamic"
        });
        var disabled = this.calendarInstance.min > localDate || this.calendarInstance.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED2);
          addClass([tdEle], OVERLAY2);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        var hijriMonthObject = this.getIslamicDate(localDate);
        if (currentMonth !== hijriMonthObject.month) {
          addClass([tdEle], OTHERMONTH2);
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND2);
        }
        tdEle.appendChild(dayLink);
        this.calendarInstance.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.calendarInstance.renderDayCellArgs;
        this.calendarInstance.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          if (this.calendarInstance.isMultiSelection) {
            if (!isNullOrUndefined(this.calendarInstance.values) && this.calendarInstance.values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.calendarInstance.globalize.formatDate(argument.date, {
                  type: "date",
                  skeleton: "yMd",
                  calendar: "islamic"
                }));
                var tempDateString = +new Date(this.calendarInstance.globalize.formatDate(this.calendarInstance.values[index], {
                  type: "date",
                  skeleton: "yMd",
                  calendar: "islamic"
                }));
                if (localDateString === tempDateString) {
                  this.calendarInstance.values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (value && +value === +argument.date) {
            this.calendarInstance.setProperties({
              value: null
            }, true);
          }
        }
        if (this.calendarInstance.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED2)) {
          addClass([tdEle], DISABLED2);
          addClass([tdEle], OVERLAY2);
          if (+this.calendarInstance.renderDayCellArgs.date === +this.calendarInstance.todayDate) {
            this.calendarInstance.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH2);
        var disabledCls = tdEle.classList.contains(DISABLED2);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        if (this.calendarInstance.isMultiSelection && !isNullOrUndefined(this.calendarInstance.values) && !otherMnthBool && !disabledCls) {
          for (var tempValue = 0; tempValue < this.calendarInstance.values.length; tempValue++) {
            var localDateString = this.calendarInstance.globalize.formatDate(localDate, {
              type: "date",
              skeleton: "short",
              calendar: "islamic"
            });
            var tempDateString = this.calendarInstance.globalize.formatDate(this.calendarInstance.values[tempValue], {
              type: "date",
              skeleton: "short",
              calendar: "islamic"
            });
            if (localDateString === tempDateString && this.calendarInstance.getDateVal(localDate, this.calendarInstance.values[tempValue])) {
              addClass([tdEle], SELECTED2);
            } else {
              this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (this.calendarInstance.values.length <= 0) {
            this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!otherMnthBool && !disabledCls && this.calendarInstance.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED2);
        } else {
          this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        }
        if (date.getDate() === (/* @__PURE__ */ new Date()).getDate() && date.getMonth() === (/* @__PURE__ */ new Date()).getMonth()) {
          if (date.getFullYear() === (/* @__PURE__ */ new Date()).getFullYear()) {
            addClass([tdEle], TODAY2);
          }
        }
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        tdEles.push(this.calendarInstance.renderDayCellArgs.element);
        this.calendarInstance.addDay(localDate, 1, null, this.calendarInstance.max, this.calendarInstance.min);
      }
      return tdEles;
    };
    Islamic2.prototype.islamicIconHandler = function() {
      new Date(this.islamicInValue(this.calendarInstance.currentDate)).setDate(1);
      var date = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      switch (this.calendarInstance.currentView()) {
        case "Month":
          {
            var prevMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.min) < 1;
            var nextMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevMonthCompare);
            this.calendarInstance.nextIconHandler(nextMonthCompare);
          }
          break;
        case "Year":
          {
            var prevYearCompare = this.hijriCompareYear(date, this.calendarInstance.min) < 1;
            var nextYearCompare = this.hijriCompareYear(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevYearCompare);
            this.calendarInstance.nextIconHandler(nextYearCompare);
          }
          break;
        case "Decade": {
          var startIslamicYear = 1361;
          var gregorianValue = HijriParser.toGregorian(startIslamicYear, 1, 1);
          var prevDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.min) < 1;
          var nextDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.max) > -1;
          prevDecadeCompare = HijriParser.toGregorian(this.calendarInstance.headerTitleElement.textContent.split("-")[0].trim(), 1, 1).getFullYear() === gregorianValue.getFullYear() ? true : prevDecadeCompare;
          this.calendarInstance.previousIconHandler(prevDecadeCompare);
          this.calendarInstance.nextIconHandler(nextDecadeCompare);
        }
      }
    };
    Islamic2.prototype.islamicNext = function() {
      this.calendarInstance.effect = "";
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 1, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month + 1, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Decade":
          this.calendarInstance.nextIconClicked = true;
          if (islamicDate.year - this.calendarInstance.headerElement.textContent.split("-")[0].trim() === 1) {
            islamicDate.year = islamicDate.year - this.calendarInstance.headerElement.textContent.split("-")[0].trim() === 1 ? islamicDate.year + 1 : islamicDate.year;
          }
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 10, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
      }
    };
    Islamic2.prototype.islamicPrevious = function() {
      var currentView = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      this.calendarInstance.effect = "";
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 1, islamicDate.month, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Decade":
          this.calendarInstance.previousIconClicked = true;
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 10, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
      }
    };
    Islamic2.prototype.islamicRenderYears = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var localDate = curDate;
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var mon = islamicDate.month;
      var yr = islamicDate.year;
      var curYrs = islamicDate.year;
      var minYr = this.getIslamicDate(this.calendarInstance.min).year;
      var minMonth = this.getIslamicDate(this.calendarInstance.min).month;
      var maxYr = this.getIslamicDate(this.calendarInstance.max).year;
      var maxMonth = this.getIslamicDate(this.calendarInstance.max).month;
      this.islamicTitleUpdate(this.calendarInstance.currentDate, "months");
      for (var month = 1; month <= 12; ++month) {
        var islamicDate_1 = this.getIslamicDate(localDate);
        var gregorianObject_1 = HijriParser.toGregorian(islamicDate_1.year, month, 1);
        localDate = gregorianObject_1;
        var tdEle = this.islamicDayCell(localDate);
        var dayLink = this.calendarInstance.createElement("span");
        var localMonth = value && this.getIslamicDate(value).month === this.getIslamicDate(localDate).month;
        var select2 = value && this.getIslamicDate(value).year === yr && localMonth;
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {
          type: "dateTime",
          format: "MMM",
          calendar: "islamic"
        });
        if (this.calendarInstance.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.calendarInstance.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED2);
        } else if (!valueUtil && select2) {
          addClass([tdEle], SELECTED2);
        } else {
          if (this.getIslamicDate(localDate).month === mon && this.getIslamicDate(this.calendarInstance.currentDate).month === mon) {
            addClass([tdEle], FOCUSEDDATE2);
          }
        }
        if (!tdEle.classList.contains(DISABLED2)) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.islamicRenderTemplate(tdEles, numCells, YEAR2, e, value);
    };
    Islamic2.prototype.islamicRenderDecade = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var localYr = localDate.getFullYear();
      var startYr = new Date(this.islamicInValue(localYr - localYr % 10));
      var endYr = new Date(this.islamicInValue(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.calendarInstance.globalize.formatDate(startYr, {
        type: "dateTime",
        format: "y",
        calendar: "islamic"
      });
      var endHdrYr = this.calendarInstance.globalize.formatDate(endYr, {
        type: "dateTime",
        format: "y",
        calendar: "islamic"
      });
      if (this.calendarInstance.locale === "ar") {
        startHdrYr = Number(startHdrYr.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
          return String.fromCharCode(d.charCodeAt(0) - 1632 + 48);
        }));
        endHdrYr = Number(endHdrYr.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {
          return String.fromCharCode(d.charCodeAt(0) - 1632 + 48);
        }));
      }
      var splityear = this.calendarInstance.headerElement.textContent.split("-");
      if (!isNullOrUndefined(e) && splityear[0] !== startHdrYr && e.action === "home" || !isNullOrUndefined(e) && e.type === "keydown" && e.action === "end") {
        startHdrYr = this.calendarInstance.headerElement.textContent.split("-")[0].trim();
        endHdrYr = this.calendarInstance.headerElement.textContent.split("-")[1].trim();
      }
      if (this.calendarInstance.islamicPreviousHeader) {
        startHdrYr = this.calendarInstance.islamicPreviousHeader.split("-")[0].trim();
        endHdrYr = this.calendarInstance.islamicPreviousHeader.split("-")[1].trim();
        this.calendarInstance.islamicPreviousHeader = null;
      }
      if (this.calendarInstance.previousIconClicked) {
        var i = 0;
        for (i = 0; i <= splityear.length; i++) {
          endHdrYr = endHdrYr - splityear[i] === 2 || splityear[i] - endHdrYr === 2 ? (parseInt(endHdrYr, 10) + 1).toString() : endHdrYr - splityear[i] === 3 || splityear[i] - endHdrYr === 3 ? (parseInt(endHdrYr, 10) + 2).toString() : endHdrYr - splityear[i] === 4 || splityear[i] - endHdrYr === 4 ? (parseInt(endHdrYr, 10) + 3).toString() : endHdrYr - splityear[i] === 5 || splityear[i] - endHdrYr === 5 ? (parseInt(endHdrYr, 10) + 4).toString() : endHdrYr;
          if (endHdrYr - splityear[i] === 0 || splityear[i] - endHdrYr === 0) {
            endHdrYr = (parseInt(endHdrYr, 10) - 1).toString();
          }
        }
        if (endHdrYr - splityear[i] === 8 || splityear[i] - endHdrYr === 8) {
          endHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
          startHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
        }
        if (endHdrYr - splityear[i] === 7 || splityear[i] - endHdrYr === 7) {
          endHdrYr = (parseInt(endHdrYr, 10) - 8).toString();
          startHdrYr = (parseInt(endHdrYr, 10) - 9).toString();
        }
        startHdrYr = endHdrYr - startHdrYr === 10 ? (parseInt(startHdrYr, 10) + 1).toString() : endHdrYr - startHdrYr === 11 ? (parseInt(startHdrYr, 10) + 2).toString() : endHdrYr - startHdrYr === 12 ? (parseInt(startHdrYr, 10) + 3).toString() : startHdrYr;
        if (endHdrYr - startHdrYr === 8) {
          startHdrYr = (parseInt(startHdrYr, 10) - 1).toString();
        }
      }
      if (this.calendarInstance.nextIconClicked) {
        for (var i = 0; i <= splityear.length; i++) {
          if (startHdrYr - splityear[i] === 0 || splityear[i] - startHdrYr === 0) {
            startHdrYr = (parseInt(startHdrYr, 10) + 1).toString();
          }
          if (startHdrYr - splityear[i] === 2 && startHdrYr > splityear[i].trim()) {
            startHdrYr = (parseInt(startHdrYr, 10) - 1).toString();
          }
          if (splityear[i] - startHdrYr === 1 && startHdrYr < splityear[i].trim()) {
            startHdrYr = (parseInt(startHdrYr, 10) + 2).toString();
          }
        }
        if (startHdrYr - this.calendarInstance.headerTitleElement.textContent.split("-")[1].trim() > 1) {
          startHdrYr = (parseInt(this.calendarInstance.headerTitleElement.textContent.split("-")[1].trim(), 10) + 1).toString();
          endHdrYr = (parseInt(startHdrYr, 10) + 9).toString();
        }
        endHdrYr = endHdrYr - startHdrYr === 10 ? (parseInt(endHdrYr, 10) - 1).toString() : endHdrYr;
        endHdrYr = endHdrYr - startHdrYr === 7 ? (parseInt(endHdrYr, 10) + 2).toString() : endHdrYr - startHdrYr === 8 ? (parseInt(endHdrYr, 10) + 1).toString() : endHdrYr;
      }
      if (this.calendarInstance.locale === "ar") {
        var startHeaderYear = this.calendarInstance.globalize.formatDate(startYr, {
          type: "dateTime",
          format: "y",
          calendar: "islamic"
        });
        var endHeaderYear = this.calendarInstance.globalize.formatDate(endYr, {
          type: "dateTime",
          format: "y",
          calendar: "islamic"
        });
        this.calendarInstance.headerTitleElement.textContent = startHeaderYear + " - " + endHeaderYear;
      } else {
        this.calendarInstance.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      }
      this.calendarInstance.nextIconClicked = this.calendarInstance.previousIconClicked = false;
      var year = (parseInt(startHdrYr, 10) - 2).toString();
      startFullYr = Math.round(parseInt(startHdrYr, 10) * 0.97 + 622);
      endFullYr = Math.round(parseInt(endHdrYr, 10) * 0.97 + 622);
      var startYear = Math.round(parseInt(year, 10) * 0.97 + 622);
      for (var rowCount = 1; rowCount <= yearCell; ++rowCount) {
        var year_1 = startYear + rowCount;
        localDate.setFullYear(year_1);
        localDate.setDate(1);
        localDate.setMonth(0);
        if (this.getIslamicDate(localDate).year - islamicDate.year > 1) {
          localDate.setMonth(1);
          rowCount = rowCount - 1;
          localDate.setFullYear(localDate.getFullYear() - 1);
        }
        islamicDate = this.getIslamicDate(localDate);
        var gregorianObject_2 = HijriParser.toGregorian(islamicDate.year, 1, 1);
        localDate = gregorianObject_2;
        if (islamicDate.year === parseInt(startHdrYr, 10) - 1 || islamicDate.year >= startHdrYr && islamicDate.year <= endFullYr || islamicDate.year === parseInt(endHdrYr, 10) + 1) {
          var tdEle = this.islamicDayCell(localDate);
          attributes(tdEle, {
            "role": "gridcell"
          });
          var dayLink = this.calendarInstance.createElement("span");
          dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, {
            type: "dateTime",
            format: "y",
            calendar: "islamic"
          });
          if (islamicDate.year === parseInt(startHdrYr, 10) - 1 || year_1 < startFullYr || year_1 > endFullYr && islamicDate.year !== parseInt(endHdrYr, 10)) {
            addClass([tdEle], OTHERMONTH2);
          } else if (year_1 < new Date(this.islamicInValue(this.calendarInstance.min)).getFullYear() || year_1 > new Date(this.islamicInValue(this.calendarInstance.max)).getFullYear()) {
            addClass([tdEle], DISABLED2);
          } else if (!isNullOrUndefined(value) && this.getIslamicDate(localDate).year === this.getIslamicDate(value).year) {
            addClass([tdEle], SELECTED2);
          } else {
            if (localDate.getFullYear() === this.calendarInstance.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED2)) {
              addClass([tdEle], FOCUSEDDATE2);
            }
          }
          if (!tdEle.classList.contains(DISABLED2)) {
            EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
          }
          tdEle.appendChild(dayLink);
          if (!isNullOrUndefined(e) && e.action === "home" && islamicDate.year.toString() === startHdrYr || !isNullOrUndefined(e) && e.action === "end" && islamicDate.year.toString() === endHdrYr) {
            addClass([tdEle], FOCUSEDDATE2);
          }
          tdEles.push(tdEle);
        }
      }
      this.islamicRenderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    Islamic2.prototype.islamicDayCell = function(localDate) {
      var dateFormatOptions = {
        skeleton: "full",
        type: "dateTime",
        calendar: "islamic"
      };
      var formatDate = this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions);
      var date = this.calendarInstance.globalize.parseDate(formatDate, dateFormatOptions);
      var value = date.valueOf();
      var attrs = {
        className: CELL2,
        attrs: {
          "id": "" + getUniqueID("" + value),
          "aria-selected": "false",
          "role": "gridcell"
        }
      };
      return this.calendarInstance.createElement("td", attrs);
    };
    Islamic2.prototype.islamicRenderTemplate = function(elements, count2, classNm, e, value) {
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var trEle;
      this.calendarInstance.tableBodyElement = this.calendarInstance.createElement("tbody");
      this.calendarInstance.table.appendChild(this.calendarInstance.tableBodyElement);
      removeClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [MONTH2, DECADE2, YEAR2]);
      addClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row2 = count2;
      var rowCount = 0;
      for (var dayCell = 0; dayCell < Math.round(elements.length / count2); ++dayCell) {
        trEle = this.calendarInstance.createElement("tr", {
          attrs: {
            "role": "row"
          }
        });
        for (rowCount = 0 + rowCount; rowCount < row2; rowCount++) {
          if (!elements[rowCount].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowCount].children[0])) {
            addClass([elements[rowCount].children[0]], [LINK2]);
            rippleEffect(elements[rowCount].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowCount]);
          if (this.calendarInstance.weekNumber && rowCount === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH2)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (!this.calendarInstance.weekNumber && rowCount === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH2)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (this.calendarInstance.weekNumber) {
            if (rowCount === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH2)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          } else {
            if (rowCount === numberCell && elements[numberCell].classList.contains(OTHERMONTH2)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          }
        }
        row2 = row2 + count2;
        rowCount = rowCount + 0;
        this.calendarInstance.tableBodyElement.appendChild(trEle);
      }
      this.calendarInstance.table.querySelector("tbody").className = this.calendarInstance.effect;
      this.islamicIconHandler();
      if (view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView()) || view === 0 && view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView())) {
        this.calendarInstance.navigateHandler(e);
      }
      this.calendarInstance.setAriaActiveDescendant();
      this.calendarInstance.changedArgs = {
        value: this.calendarInstance.value,
        values: this.calendarInstance.values
      };
      this.calendarInstance.changeHandler();
    };
    Islamic2.prototype.islamicCompareMonth = function(start, end) {
      var hijriStart = this.getIslamicDate(start);
      var hijriEnd = this.getIslamicDate(end);
      var result;
      if (hijriStart.year > hijriEnd.year) {
        result = 1;
      } else if (hijriStart.year < hijriEnd.year) {
        result = -1;
      } else {
        result = hijriStart.month === hijriEnd.month ? 0 : hijriStart.month > hijriEnd.month ? 1 : -1;
      }
      return result;
    };
    Islamic2.prototype.islamicCompare = function(startDate, endDate, modifier) {
      var hijriStart = this.getIslamicDate(startDate);
      var hijriEnd = this.getIslamicDate(endDate);
      var start = hijriEnd.year;
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (hijriStart.year > end) {
        result = 1;
      } else if (this.calendarInstance.currentView() === "Decade" && hijriStart.year < start && !(startDate.getFullYear() >= minDecade && startDate.getFullYear() <= maxDecade)) {
        result = -1;
      } else if (hijriStart.year < start && this.calendarInstance.currentView() === "Year") {
        result = -1;
      }
      return result;
    };
    Islamic2.prototype.getIslamicDate = function(date) {
      return HijriParser.getHijriDate(date);
    };
    Islamic2.prototype.toGregorian = function(year, month, date) {
      return HijriParser.toGregorian(year, month, date);
    };
    Islamic2.prototype.hijriCompareYear = function(start, end) {
      return this.islamicCompare(start, end, 0);
    };
    Islamic2.prototype.hijriCompareDecade = function(start, end) {
      return this.islamicCompare(start, end, 10);
    };
    Islamic2.prototype.destroy = function() {
      this.calendarInstance = null;
    };
    Islamic2.prototype.islamicInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    return Islamic2;
  }()
);

// node_modules/@syncfusion/ej2-calendars/src/datepicker/datepicker.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER = "e-date-wrapper";
var ROOT2 = "e-datepicker";
var LIBRARY = "e-lib";
var CONTROL = "e-control";
var POPUPWRAPPER = "e-popup-wrapper";
var INPUTWRAPPER = "e-input-group-icon";
var POPUP = "e-popup";
var INPUTCONTAINER = "e-input-group";
var INPUTFOCUS = "e-input-focus";
var INPUTROOT = "e-input";
var ERROR2 = "e-error";
var ACTIVE = "e-active";
var OVERFLOW = "e-date-overflow";
var DATEICON = "e-date-icon";
var ICONS = "e-icons";
var OPENDURATION = 300;
var OFFSETVALUE = 4;
var SELECTED3 = "e-selected";
var FOCUSEDDATE3 = "e-focused-date";
var NONEDIT = "e-non-edit";
var containerAttr = ["title", "class", "style"];
var DatePicker = (
  /** @class */
  function(_super) {
    __extends20(DatePicker2, _super);
    function DatePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isDateIconClicked = false;
      _this.isAltKeyPressed = false;
      _this.isInteracted = true;
      _this.invalidValueString = null;
      _this.checkPreviousValue = null;
      _this.maskedDateValue = "";
      _this.preventChange = false;
      _this.isIconClicked = false;
      _this.isDynamicValueChanged = false;
      _this.moduleName = _this.getModuleName();
      _this.isFocused = false;
      _this.isBlur = false;
      _this.isKeyAction = false;
      _this.datepickerOptions = options;
      return _this;
    }
    DatePicker2.prototype.render = function() {
      this.initialize();
      this.bindEvents();
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
      this.setTimeZone(this.serverTimezoneOffset);
    };
    DatePicker2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = offsetValue;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
        this.updateInput();
      }
    };
    DatePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    DatePicker2.prototype.setAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, {
          "readonly": ""
        });
      }
      this.updateIconState();
    };
    DatePicker2.prototype.updateIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDIT]);
        } else {
          addClass([this.inputWrapper.container], [NONEDIT]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDIT]);
      }
    };
    DatePicker2.prototype.initialize = function() {
      this.checkInvalidValue(this.value);
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setAllowEdit();
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInput(true);
        this.updateInputValue(this.maskedDateValue);
      } else if (!this.enableMask) {
        this.updateInput(true);
      }
      this.previousElementValue = this.inputElement.value;
      this.previousDate = !isNullOrUndefined(this.value) ? /* @__PURE__ */ new Date(+this.value) : null;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputValueCopy = this.value;
    };
    DatePicker2.prototype.createInput = function() {
      var ariaAttrs = {
        "aria-atomic": "true",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-invalid": "false",
        "aria-label": this.getModuleName()
      };
      if (this.getModuleName() === "datepicker") {
        var l10nLocale = {
          placeholder: this.placeholder
        };
        this.globalize = new Internationalization(this.locale);
        this.l10n = new L10n("datepicker", l10nLocale, this.locale);
        this.setProperties({
          placeholder: this.placeholder || this.l10n.getConstant("placeholder")
        }, true);
      }
      if (this.fullScreenMode && Browser.isDevice) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      var isBindClearAction = this.enableMask ? false : true;
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        bindClearAction: isBindClearAction,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [INPUTWRAPPER + " " + DATEICON + " " + ICONS]
      }, this.createElement);
      this.setWidth(this.width);
      if (this.inputElement.name !== "") {
        this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute("name"));
      } else {
        this.inputElement.setAttribute("name", "" + this.element.id);
      }
      attributes(this.inputElement, ariaAttrs);
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
      Input.addAttributes({
        "aria-label": "select",
        "role": "button"
      }, this.inputWrapper.buttons[0]);
      addClass([this.inputWrapper.container], DATEWRAPPER);
    };
    DatePicker2.prototype.updateInput = function(isDynamic, isBlur) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      if (isBlur === void 0) {
        isBlur = false;
      }
      var formatOptions;
      if (this.value && !this.isCalendar()) {
        this.disabledDates(isDynamic, isBlur);
      }
      if (isNaN(+new Date(this.checkValue(this.value)))) {
        this.setProperties({
          value: null
        }, true);
      }
      if (this.strictMode) {
        _super.prototype.validateDate.call(this);
        this.minMaxUpdates();
        _super.prototype.minMaxUpdate.call(this);
      }
      if (!isNullOrUndefined(this.value)) {
        var dateValue = this.value;
        var dateString = void 0;
        var tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd"
            });
          } else {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            });
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          dateString = this.globalize.formatDate(this.value, formatOptions);
        }
        if (+dateValue <= +this.max && +dateValue >= +this.min) {
          this.updateInputValue(dateString);
        } else {
          var value = +dateValue >= +this.max || !+this.value || !+this.value || +dateValue <= +this.min;
          if (!this.strictMode && value) {
            this.updateInputValue(dateString);
          }
        }
      }
      if (isNullOrUndefined(this.value) && this.strictMode) {
        if (!this.enableMask) {
          this.updateInputValue("");
        } else {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.updateInputValue(this.invalidValueString);
      }
      this.changedArgs = {
        value: this.value
      };
      this.errorClass();
      this.updateIconState();
    };
    DatePicker2.prototype.minMaxUpdates = function() {
      if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode) {
        this.setProperties({
          value: this.min
        }, true);
        this.changedArgs = {
          value: this.value
        };
      } else {
        if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode) {
          this.setProperties({
            value: this.max
          }, true);
          this.changedArgs = {
            value: this.value
          };
        }
      }
    };
    DatePicker2.prototype.checkStringValue = function(val) {
      var returnDate = null;
      var formatOptions = null;
      var formatDateTime = null;
      if (this.getModuleName() === "datetimepicker") {
        var culture = new Internationalization(this.locale);
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format: this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
          formatDateTime = {
            format: culture.getDatePattern({
              skeleton: "yMd"
            }),
            type: "dateTime"
          };
        } else {
          formatOptions = {
            format: this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
          formatDateTime = {
            format: culture.getDatePattern({
              skeleton: "yMd"
            }),
            type: "dateTime",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      }
      returnDate = this.checkDateValue(this.globalize.parseDate(val, formatOptions));
      if (isNullOrUndefined(returnDate) && this.getModuleName() === "datetimepicker") {
        returnDate = this.checkDateValue(this.globalize.parseDate(val, formatDateTime));
      }
      return returnDate;
    };
    DatePicker2.prototype.checkInvalidValue = function(value) {
      if (!(value instanceof Date) && !isNullOrUndefined(value)) {
        var valueDate = null;
        var valueString = value;
        if (typeof value === "number") {
          valueString = value.toString();
        }
        var formatOptions = null;
        var formatDateTime = null;
        if (this.getModuleName() === "datetimepicker") {
          var culture = new Internationalization(this.locale);
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.dateTimeFormat,
              type: "dateTime",
              skeleton: "yMd"
            };
            formatDateTime = {
              format: culture.getDatePattern({
                skeleton: "yMd"
              }),
              type: "dateTime"
            };
          } else {
            formatOptions = {
              format: this.dateTimeFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
            formatDateTime = {
              format: culture.getDatePattern({
                skeleton: "yMd"
              }),
              type: "dateTime",
              calendar: "islamic"
            };
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
        }
        var invalid = false;
        if (typeof valueString !== "string") {
          valueString = null;
          invalid = true;
        } else {
          if (typeof valueString === "string") {
            valueString = valueString.trim();
          }
          valueDate = this.checkStringValue(valueString);
          if (!valueDate) {
            var extISOString = null;
            var basicISOString = null;
            extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
              invalid = true;
            } else {
              valueDate = new Date(valueString);
            }
          }
        }
        if (invalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({
            value: null
          }, true);
        } else {
          this.setProperties({
            value: valueDate
          }, true);
        }
      }
    };
    DatePicker2.prototype.bindInputEvent = function() {
      if (!isNullOrUndefined(this.formatString) || this.enableMask) {
        if (this.enableMask || this.formatString.indexOf("y") === -1) {
          EventHandler.add(this.inputElement, "input", this.inputHandler, this);
        } else {
          EventHandler.remove(this.inputElement, "input", this.inputHandler);
        }
      }
    };
    DatePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateIconHandler, this);
      EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "keyup", this.keyupHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      this.bindInputEvent();
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.resetFormHandler, this);
      }
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardModules = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyActionHandle.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DatePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown":
        case "Home":
        case "End":
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            if (e.code !== "Delete") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    DatePicker2.prototype.unBindEvents = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dateIconHandler);
      }
      EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "keyup", this.keyupHandler);
      if (this.enableMask) {
        EventHandler.remove(this.inputElement, "keydown", this.keydownHandler);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
    };
    DatePicker2.prototype.resetFormHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var value = this.inputElement.getAttribute("value");
        if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
          value = "";
          this.inputValueCopy = null;
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({
          value: this.inputValueCopy
        }, true);
        this.restoreValue();
        if (this.inputElement) {
          this.updateInputValue(value);
          this.errorClass();
        }
      }
    };
    DatePicker2.prototype.restoreValue = function() {
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.previousDate = this.value;
      this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.globalize.formatDate(this.inputValueCopy, {
        format: this.formatString,
        type: "dateTime",
        skeleton: "yMd"
      });
    };
    DatePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    DatePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
    };
    DatePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      this.clear(e);
    };
    DatePicker2.prototype.mouseUpHandler = function(e) {
      if (this.enableMask) {
        e.preventDefault();
        this.notify("setMaskSelection", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.clear = function(event2) {
      this.setProperties({
        value: null
      }, true);
      if (!this.enableMask) {
        this.updateInputValue("");
      }
      var clearedArgs = {
        event: event2
      };
      this.trigger("cleared", clearedArgs);
      this.invalidValueString = "";
      this.updateInput();
      this.popupUpdate();
      this.changeEvent(event2);
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
      if (closest(this.element, "form")) {
        var element = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element.dispatchEvent(keyupEvent);
      }
    };
    DatePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnDateIconClick");
    };
    DatePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DatePicker2.prototype.dateIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
        this.inputElement.blur();
      }
      e.preventDefault();
      if (!this.readonly) {
        if (this.isCalendar()) {
          this.hide(e);
        } else {
          this.isDateIconClicked = true;
          this.show(null, e);
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          this.inputElement.focus();
          addClass([this.inputWrapper.container], [INPUTFOCUS]);
          addClass(this.inputWrapper.buttons, ACTIVE);
        }
      }
      this.isIconClicked = false;
    };
    DatePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (!isNullOrUndefined(this.htmlAttributes["" + key])) {
            if (containerAttr.indexOf(key) > -1) {
              if (key === "class") {
                var updatedClassValues = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
                if (updatedClassValues !== "") {
                  addClass([this.inputWrapper.container], updatedClassValues.split(" "));
                }
              } else if (key === "style") {
                var setStyle = this.inputWrapper.container.getAttribute(key);
                if (!isNullOrUndefined(setStyle)) {
                  if (setStyle.charAt(setStyle.length - 1) === ";") {
                    setStyle = setStyle + this.htmlAttributes["" + key];
                  } else {
                    setStyle = setStyle + ";" + this.htmlAttributes["" + key];
                  }
                } else {
                  setStyle = this.htmlAttributes["" + key];
                }
                this.inputWrapper.container.setAttribute(key, setStyle);
              } else {
                this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
              }
            }
          }
        }
      }
    };
    DatePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    DatePicker2.prototype.updateCssClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newCssClass, [this.inputWrapper.container], oldCssClass);
      if (this.popupWrapper) {
        Input.setCssClass(newCssClass, [this.popupWrapper], oldCssClass);
      }
    };
    DatePicker2.prototype.calendarKeyActionHandle = function(e) {
      switch (e.action) {
        case "escape":
          if (this.isCalendar()) {
            this.hide(e);
          } else {
            this.inputWrapper.container.children[this.index].blur();
          }
          break;
        case "enter":
          if (!this.isCalendar()) {
            this.show(null, e);
          } else {
            if (+this.value !== +this.currentDate && !this.isCalendar()) {
              this.inputWrapper.container.children[this.index].focus();
            }
          }
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          break;
      }
    };
    DatePicker2.prototype.inputFocusHandler = function() {
      this.isFocused = true;
      if (!this.enabled) {
        return;
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      var focusArguments = {
        model: this
      };
      this.isDateIconClicked = false;
      this.trigger("focus", focusArguments);
      this.updateIconState();
      if (this.openOnFocus && !this.isIconClicked) {
        this.show();
      }
    };
    DatePicker2.prototype.inputHandler = function() {
      this.isPopupClicked = false;
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.strictModeUpdate();
      if (this.inputElement.value === "" && isNullOrUndefined(this.value)) {
        this.invalidValueString = null;
        this.updateInputValue("");
      }
      this.isBlur = true;
      this.updateInput(false, true);
      this.isBlur = false;
      this.popupUpdate();
      this.changeTrigger(e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value === this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      this.errorClass();
      if (this.isCalendar() && document.activeElement === this.inputElement) {
        this.hide(e);
      }
      if (this.getModuleName() === "datepicker") {
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
      if (this.isCalendar()) {
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {
          eventName: "keydown",
          keyAction: this.calendarKeyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
      this.isPopupClicked = false;
    };
    DatePicker2.prototype.documentHandler = function(e) {
      if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(e.target) && e.type !== "mousedown" || this.popupObj.element && this.popupObj.element.contains(e.target)) && e.type !== "touchstart") {
        e.preventDefault();
      }
      var target = e.target;
      if (!closest(target, ".e-datepicker.e-popup-wrapper") && !isNullOrUndefined(this.inputWrapper) && !(closest(target, "." + INPUTCONTAINER) === this.inputWrapper.container) && !target.classList.contains("e-day") && !target.classList.contains("e-dlg-overlay")) {
        this.hide(e);
        this.focusOut();
      } else if (closest(target, ".e-datepicker.e-popup-wrapper")) {
        if (target.classList.contains("e-day") && !isNullOrUndefined(e.target.parentElement) && e.target.parentElement.classList.contains("e-selected") && closest(target, ".e-content") && closest(target, ".e-content").classList.contains("e-" + this.depth.toLowerCase())) {
          this.hide(e);
        } else if (closest(target, ".e-footer-container") && target.classList.contains("e-today") && target.classList.contains("e-btn") && +/* @__PURE__ */ new Date(+this.value) === +_super.prototype.generateTodayVal.call(this, this.value)) {
          this.hide(e);
        }
      }
    };
    DatePicker2.prototype.inputKeyActionHandle = function(e) {
      var clickedView = this.currentView();
      switch (e.action) {
        case "altUpArrow":
          this.isAltKeyPressed = false;
          this.hide(e);
          this.inputElement.focus();
          break;
        case "altDownArrow":
          this.isAltKeyPressed = true;
          this.strictModeUpdate();
          this.updateInput();
          this.changeTrigger(e);
          if (this.getModuleName() === "datepicker") {
            this.show(null, e);
          }
          break;
        case "escape":
          this.hide(e);
          break;
        case "enter":
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (!this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          if (this.isCalendar()) {
            e.preventDefault();
            e.stopPropagation();
          }
          break;
        case "tab":
        case "shiftTab": {
          var start = this.inputElement.selectionStart;
          var end = this.inputElement.selectionEnd;
          if (this.enableMask && !this.popupObj && !this.readonly) {
            var length_1 = this.inputElement.value.length;
            if (start === 0 && end === length_1 || end !== length_1 && e.action === "tab" || start !== 0 && e.action === "shiftTab") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
            start = this.inputElement.selectionStart;
            end = this.inputElement.selectionEnd;
          }
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (this.enableMask) {
            this.inputElement.selectionStart = start;
            this.inputElement.selectionEnd = end;
          }
          if (e.action === "tab" && e.target === this.inputElement && this.isCalendar() && document.activeElement === this.inputElement) {
            e.preventDefault();
            this.headerTitleElement.focus();
          }
          if (e.action === "shiftTab" && e.target === this.inputElement && this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          break;
        }
        default:
          this.defaultAction(e);
          if (e.action === "select" && clickedView === this.depth) {
            this.hide(e);
          }
      }
    };
    DatePicker2.prototype.defaultAction = function(e) {
      this.previousDate = !isNullOrUndefined(this.value) && /* @__PURE__ */ new Date(+this.value) || null;
      if (this.isCalendar()) {
        _super.prototype.keyActionHandle.call(this, e);
        if (this.isCalendar()) {
          attributes(this.inputElement, {
            "aria-activedescendant": "" + this.setActiveDescendant()
          });
        }
      }
    };
    DatePicker2.prototype.popupUpdate = function() {
      if (isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || this.getModuleName() !== "datetimepicker" && +this.value !== +this.previousDate || this.getModuleName() === "datetimepicker" && +this.value !== +this.previousDateTime) {
        if (this.popupObj) {
          if (this.popupObj.element.querySelectorAll("." + SELECTED3).length > 0) {
            removeClass(this.popupObj.element.querySelectorAll("." + SELECTED3), [SELECTED3]);
          }
        }
        if (!isNullOrUndefined(this.value)) {
          if (+this.value >= +this.min && +this.value <= +this.max) {
            var targetdate = new Date(this.checkValue(this.value));
            _super.prototype.navigateTo.call(this, "Month", targetdate);
          }
        }
      }
    };
    DatePicker2.prototype.strictModeUpdate = function() {
      var format;
      var pattern = /^y/;
      var charPattern = /[^a-zA-Z]/;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        format = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else if (!pattern.test(this.formatString) || charPattern.test(this.formatString)) {
        format = isNullOrUndefined(this.formatString) ? this.formatString : this.formatString.replace("dd", "d");
      }
      if (!isNullOrUndefined(format)) {
        var len = format.split("M").length - 1;
        if (len < 3) {
          format = format.replace("MM", "M");
        }
      } else {
        format = this.formatString;
      }
      var dateOptions;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          formatOptions = {
            format,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
        dateOptions = formatOptions;
      }
      var date;
      if (typeof this.inputElement.value === "string") {
        this.inputElement.value = this.inputElement.value.trim();
      }
      if (this.getModuleName() === "datetimepicker") {
        if (this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions))) {
          var modifiedValue = this.inputElement.value.replace(/(am|pm|Am|aM|pM|Pm)/g, function(match) {
            return match.toLocaleUpperCase();
          });
          date = this.globalize.parseDate(modifiedValue, dateOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          date = this.globalize.parseDate(this.inputElement.value, formatOptions);
        }
      } else {
        date = this.globalize.parseDate(this.inputElement.value, dateOptions);
        date = !isNullOrUndefined(date) && isNaN(+date) ? null : date;
        if (!isNullOrUndefined(this.formatString) && this.inputElement.value !== "" && this.strictMode) {
          if ((this.isPopupClicked || !this.isPopupClicked && this.inputElement.value === this.previousElementValue) && this.formatString.indexOf("y") === -1) {
            date.setFullYear(this.value.getFullYear());
          }
        }
      }
      if (this.getModuleName() === "datepicker" && this.value && !isNaN(+this.value) && date) {
        date.setHours(this.value.getHours(), this.value.getMinutes(), this.value.getSeconds(), this.value.getMilliseconds());
      }
      if (this.strictMode && date) {
        this.updateInputValue(this.globalize.formatDate(date, dateOptions));
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({
            value: date
          }, true);
        }
      } else if (!this.strictMode) {
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({
            value: date
          }, true);
        }
      }
      if (this.strictMode && !date && this.inputElement.value === (this.enableMask ? this.maskedDateValue : "")) {
        this.setProperties({
          value: null
        }, true);
      }
      if (isNaN(+this.value)) {
        this.setProperties({
          value: null
        }, true);
      }
      if (isNullOrUndefined(this.value)) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
    };
    DatePicker2.prototype.createCalendar = function() {
      var _this = this;
      this.popupWrapper = this.createElement("div", {
        className: "" + ROOT2 + " " + POPUPWRAPPER,
        id: this.inputElement.id + "_options"
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (Browser.isDevice) {
        this.modelHeader();
        this.modal = this.createElement("div");
        this.modal.className = "" + ROOT2 + " e-date-modal";
        document.body.className += " " + OVERFLOW;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
      this.calendarElement.querySelector("table tbody").className = "";
      this.popupObj = new Popup(this.popupWrapper, {
        content: this.calendarElement,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? {
          X: "center",
          Y: "center"
        } : this.enableRtl ? {
          X: "right",
          Y: "bottom"
        } : {
          X: "left",
          Y: "bottom"
        },
        offsetY: OFFSETVALUE,
        targetType: "container",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        collision: Browser.isDevice ? {
          X: "fit",
          Y: "fit"
        } : this.enableRtl ? {
          X: "fit",
          Y: "flip"
        } : {
          X: "flip",
          Y: "flip"
        },
        open: function() {
          if (Browser.isDevice && _this.fullScreenMode) {
            _this.iconRight = parseInt(window.getComputedStyle(_this.calendarElement.querySelector(".e-header.e-month .e-prev")).marginRight, 10) > 16 ? true : false;
            _this.touchModule = new Touch(_this.calendarElement.querySelector(".e-content.e-month"), {
              swipe: _this.CalendarSwipeHandler.bind(_this)
            });
            EventHandler.add(_this.calendarElement.querySelector(".e-content.e-month"), "touchstart", _this.TouchStartHandler, _this);
          }
          if (_this.getModuleName() !== "datetimepicker") {
            if (document.activeElement !== _this.inputElement) {
              _this.defaultKeyConfigs = extend(_this.defaultKeyConfigs, _this.keyConfigs);
              _this.calendarElement.children[1].firstElementChild.focus();
              _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
              _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
            }
          }
        },
        close: function() {
          if (_this.isDateIconClicked) {
            _this.inputWrapper.container.children[_this.index].focus();
          }
          if (_this.value) {
            _this.disabledDates();
          }
          if (_this.popupObj) {
            _this.popupObj.destroy();
          }
          _this.resetCalendar();
          detach(_this.popupWrapper);
          _this.popupObj = _this.popupWrapper = null;
          _this.preventArgs = null;
          _this.calendarKeyboardModules = null;
          _this.setAriaAttributes();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      this.popupObj.element.className += " " + this.cssClass;
      this.setAriaAttributes();
    };
    DatePicker2.prototype.CalendarSwipeHandler = function(e) {
      var direction = 0;
      if (this.iconRight) {
        switch (e.swipeDirection) {
          case "Left":
            direction = 1;
            break;
          case "Right":
            direction = -1;
            break;
          default:
            break;
        }
      } else {
        switch (e.swipeDirection) {
          case "Up":
            direction = 1;
            break;
          case "Down":
            direction = -1;
            break;
          default:
            break;
        }
      }
      if (this.touchStart) {
        if (direction === 1) {
          this.navigateNext(e);
        } else if (direction === -1) {
          this.navigatePrevious(e);
        }
        this.touchStart = false;
      }
    };
    DatePicker2.prototype.TouchStartHandler = function(e) {
      this.touchStart = true;
    };
    DatePicker2.prototype.setAriaDisabled = function() {
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
    };
    DatePicker2.prototype.modelHeader = function() {
      var dateOptions;
      var modelHeader = this.createElement("div", {
        className: "e-model-header"
      });
      var yearHeading = this.createElement("h1", {
        className: "e-model-year"
      });
      var h2 = this.createElement("div");
      var daySpan = this.createElement("span", {
        className: "e-model-day"
      });
      var monthSpan = this.createElement("span", {
        className: "e-model-month"
      });
      if (this.calendarMode === "Gregorian") {
        dateOptions = {
          format: "y",
          skeleton: "dateTime"
        };
      } else {
        dateOptions = {
          format: "y",
          skeleton: "dateTime",
          calendar: "islamic"
        };
      }
      yearHeading.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.calendarMode === "Gregorian") {
        dateOptions = {
          format: "E",
          skeleton: "dateTime"
        };
      } else {
        dateOptions = {
          format: "E",
          skeleton: "dateTime",
          calendar: "islamic"
        };
      }
      daySpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions) + ", ";
      if (this.calendarMode === "Gregorian") {
        dateOptions = {
          format: "MMM d",
          skeleton: "dateTime"
        };
      } else {
        dateOptions = {
          format: "MMM d",
          skeleton: "dateTime",
          calendar: "islamic"
        };
      }
      monthSpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.fullScreenMode) {
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelCloseHandler, this);
        var modelTodayButton = this.calendarElement.querySelector("button.e-today");
        h2.classList.add("e-day-wrapper");
        modelTodayButton.classList.add("e-outline");
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTodayButton);
      }
      if (!this.fullScreenMode) {
        modelHeader.appendChild(yearHeading);
      }
      h2.appendChild(daySpan);
      h2.appendChild(monthSpan);
      modelHeader.appendChild(h2);
      this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);
    };
    DatePicker2.prototype.modelCloseHandler = function(e) {
      this.hide();
    };
    DatePicker2.prototype.changeTrigger = function(event2) {
      if (this.inputElement.value !== this.previousElementValue) {
        if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
          if (this.isDynamicValueChanged && this.isCalendar()) {
            this.popupUpdate();
          }
          this.changedArgs.value = this.value;
          this.changedArgs.event = event2 || null;
          this.changedArgs.element = this.element;
          this.changedArgs.isInteracted = !isNullOrUndefined(event2);
          if (this.isAngular && this.preventChange) {
            this.preventChange = false;
          } else {
            this.trigger("change", this.changedArgs);
          }
          this.previousElementValue = this.inputElement.value;
          this.previousDate = !isNaN(+new Date(this.checkValue(this.value))) ? new Date(this.checkValue(this.value)) : null;
          this.isInteracted = true;
        }
      }
      this.isKeyAction = false;
    };
    DatePicker2.prototype.navigatedEvent = function() {
      this.trigger("navigated", this.navigatedArgs);
    };
    DatePicker2.prototype.keyupHandler = function(e) {
      this.isKeyAction = this.inputElement.value !== this.previousElementValue ? true : false;
    };
    DatePicker2.prototype.changeEvent = function(event2) {
      if (!this.isIconClicked && !(this.isBlur || this.isKeyAction)) {
        this.selectCalendar(event2);
      }
      if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
        this.changedArgs.event = event2 ? event2 : null;
        this.changedArgs.element = this.element;
        this.changedArgs.isInteracted = this.isInteracted;
        if (!this.isDynamicValueChanged) {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = this.value && /* @__PURE__ */ new Date(+this.value);
        if (!this.isDynamicValueChanged) {
          this.hide(event2);
        }
        this.previousElementValue = this.inputElement.value;
        this.errorClass();
      } else if (event2) {
        this.hide(event2);
      }
      this.isKeyAction = false;
    };
    DatePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({
          args: [this],
          member: "islamic",
          name: "Islamic"
        });
      }
      if (this.enableMask) {
        modules.push({
          args: [this],
          member: "MaskedDateTime"
        });
      }
      return modules;
    };
    DatePicker2.prototype.selectCalendar = function(e) {
      var date;
      var tempFormat;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else {
        tempFormat = this.formatString;
      }
      if (this.value) {
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd"
            };
          } else {
            formatOptions = {
              format: this.formatString,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        }
        if (this.enableMask) {
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!isNullOrUndefined(date)) {
        this.updateInputValue(date);
        if (this.enableMask) {
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
        }
      }
    };
    DatePicker2.prototype.isCalendar = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + POPUPWRAPPER)) {
        return true;
      }
      return false;
    };
    DatePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else if (typeof width === "string") {
        this.inputWrapper.container.style.width = width.match(/px|%|em/) ? this.width : formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DatePicker2.prototype.show = function(type, e) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        var prevent_1 = true;
        var outOfRange = void 0;
        if (!isNullOrUndefined(this.value) && !(+this.value >= +new Date(this.checkValue(this.min)) && +this.value <= +new Date(this.checkValue(this.max)))) {
          outOfRange = new Date(this.checkValue(this.value));
          this.setProperties({
            "value": null
          }, true);
        } else {
          outOfRange = this.value || null;
        }
        if (!this.isCalendar()) {
          _super.prototype.render.call(this);
          this.setProperties({
            "value": outOfRange || null
          }, true);
          this.previousDate = outOfRange;
          this.createCalendar();
        }
        if (Browser.isDevice) {
          this.mobilePopupWrapper = this.createElement("div", {
            className: "e-datepick-mob-popup-wrap"
          });
          document.body.appendChild(this.mobilePopupWrapper);
        }
        this.preventArgs = {
          preventDefault: function() {
            prevent_1 = false;
          },
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          appendTo: Browser.isDevice ? this.mobilePopupWrapper : document.body
        };
        var eventArgs = this.preventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.preventArgs = eventArgs2;
          if (prevent_1 && !_this.preventArgs.cancel) {
            addClass(_this.inputWrapper.buttons, ACTIVE);
            _this.preventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupObj.refreshPosition(_this.inputElement);
            var openAnimation = {
              name: "FadeIn",
              duration: Browser.isDevice ? 0 : OPENDURATION
            };
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _super.prototype.setOverlayIndex.call(_this, _this.mobilePopupWrapper, _this.popupObj.element, _this.modal, Browser.isDevice);
            _this.setAriaAttributes();
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.popupObj = null;
          }
          if (!isNullOrUndefined(_this.inputElement) && _this.inputElement.value === "") {
            if (!isNullOrUndefined(_this.tableBodyElement) && _this.tableBodyElement.querySelectorAll("td.e-selected").length > 0) {
              addClass([_this.tableBodyElement.querySelector("td.e-selected")], FOCUSEDDATE3);
              removeClass(_this.tableBodyElement.querySelectorAll("td.e-selected"), SELECTED3);
            }
          }
          EventHandler.add(document, "mousedown touchstart", _this.documentHandler, _this);
        });
        if (Browser.isDevice) {
          var dlgOverlay = this.createElement("div", {
            className: "e-dlg-overlay"
          });
          dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
          this.mobilePopupWrapper.appendChild(dlgOverlay);
        }
      }
    };
    DatePicker2.prototype.hide = function(event2) {
      var _this = this;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var prevent_2 = true;
        this.preventArgs = {
          preventDefault: function() {
            prevent_2 = false;
          },
          popup: this.popupObj,
          event: event2 || null,
          cancel: false
        };
        removeClass(this.inputWrapper.buttons, ACTIVE);
        removeClass([document.body], OVERFLOW);
        var eventArgs = this.preventArgs;
        if (this.isCalendar()) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventCallback(prevent_2, eventArgs2);
          });
        } else {
          this.closeEventCallback(prevent_2, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DatePicker2.prototype.closeEventCallback = function(prevent, eventArgs) {
      this.preventArgs = eventArgs;
      if (this.isCalendar() && prevent && !this.preventArgs.cancel) {
        this.popupObj.hide();
        this.isAltKeyPressed = false;
        this.keyboardModule.destroy();
        removeClass(this.inputWrapper.buttons, ACTIVE);
      }
      this.setAriaAttributes();
      if (Browser.isDevice && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
      if (Browser.isDevice) {
        if (!isNullOrUndefined(this.mobilePopupWrapper) && prevent && (isNullOrUndefined(this.preventArgs) || !this.preventArgs.cancel)) {
          this.mobilePopupWrapper.remove();
          this.mobilePopupWrapper = null;
        }
      }
      EventHandler.remove(document, "mousedown touchstart", this.documentHandler);
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DatePicker2.prototype.focusIn = function(triggerEvent) {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS]);
      }
    };
    DatePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS]);
        this.inputElement.blur();
      }
    };
    DatePicker2.prototype.currentView = function() {
      var currentView;
      if (this.calendarElement) {
        currentView = _super.prototype.currentView.call(this);
      }
      return currentView;
    };
    DatePicker2.prototype.navigateTo = function(view, date) {
      if (this.calendarElement) {
        _super.prototype.navigateTo.call(this, view, date);
      }
    };
    DatePicker2.prototype.destroy = function() {
      this.unBindEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      _super.prototype.destroy.call(this);
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      if (!isNullOrUndefined(this.keyboardModules)) {
        this.keyboardModules.destroy();
      }
      if (this.popupObj && this.popupObj.element.classList.contains(POPUP)) {
        _super.prototype.destroy.call(this);
      }
      var ariaAttrs = {
        "aria-atomic": "true",
        "aria-disabled": "true",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-label": this.getModuleName()
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.inputElementCopy.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
        this.ensureInputAttribute();
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObj = this.popupWrapper = null;
        this.keyboardModule.destroy();
      }
      if (this.ngTag === null) {
        if (this.inputElement) {
          if (!isNullOrUndefined(this.inputWrapper)) {
            this.inputWrapper.container.insertAdjacentElement("afterend", this.inputElement);
          }
          removeClass([this.inputElement], [INPUTROOT]);
        }
        removeClass([this.element], [ROOT2]);
        if (!isNullOrUndefined(this.inputWrapper)) {
          detach(this.inputWrapper.container);
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
      this.inputWrapper = null;
      this.keyboardModules = null;
    };
    DatePicker2.prototype.ensureInputAttribute = function() {
      var prop = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        prop[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < prop.length; i++) {
        if (isNullOrUndefined(this.inputElementCopy.getAttribute(prop[i]))) {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(prop[i]);
        } else {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = this.inputElementCopy.getAttribute(prop[i]);
          }
          this.inputElement.setAttribute(prop[i], this.inputElementCopy.getAttribute(prop[i]));
        }
      }
    };
    DatePicker2.prototype.preRender = function() {
      this.inputElementCopy = this.element.cloneNode(true);
      removeClass([this.inputElementCopy], [ROOT2, CONTROL, LIBRARY]);
      this.inputElement = this.element;
      this.formElement = closest(this.inputElement, "form");
      this.index = this.showClearButton ? 2 : 1;
      this.ngTag = null;
      if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
        this.ngTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      if (this.element.getAttribute("id")) {
        if (this.ngTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        if (this.getModuleName() === "datetimepicker") {
          this.element.id = getUniqueID("ej2-datetimepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, {
              "id": this.element.id + "_input"
            });
          }
        } else {
          this.element.id = getUniqueID("ej2-datepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, {
              "id": this.element.id + "_input"
            });
          }
        }
      }
      if (this.ngTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.checkHtmlAttributes(false);
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
    };
    DatePicker2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        altUpArrow: "alt+uparrow",
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        shiftTab: "shift+tab",
        tab: "tab"
      };
      return this.defaultKeyConfigs;
    };
    DatePicker2.prototype.validationAttribute = function(target, inputElement) {
      var nameAttribute = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      inputElement.setAttribute("name", nameAttribute);
      target.removeAttribute("name");
      var attribute = ["required", "aria-required", "form"];
      for (var i = 0; i < attribute.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attribute[i]))) {
          continue;
        }
        var attr = target.getAttribute(attribute[i]);
        inputElement.setAttribute(attribute[i], attr);
        target.removeAttribute(attribute[i]);
      }
    };
    DatePicker2.prototype.checkFormat = function() {
      var culture = new Internationalization(this.locale);
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = culture.getDatePattern({
              skeleton: skeletonString,
              type: "dateTime"
            });
          } else {
            this.formatString = culture.getDatePattern({
              skeleton: skeletonString,
              type: "date"
            });
          }
        } else {
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = this.dateTimeFormat;
          } else {
            this.formatString = null;
          }
        }
      } else {
        this.formatString = null;
      }
    };
    DatePicker2.prototype.checkHtmlAttributes = function(dynamic) {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      var attributes2 = dynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["value", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type"];
      var options;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          options = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          options = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      }
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["enabled"] === void 0 || dynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !dynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["readonly"] === void 0 || dynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !dynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["placeholder"] === void 0 || dynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !dynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "value":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["value"] === void 0 || dynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), !dynamic);
              }
              break;
            case "min":
              if (+this.min === +new Date(1900, 0, 1) || dynamic) {
                var min = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(min, options), {}), !dynamic);
              }
              break;
            case "max":
              if (+this.max === +new Date(2099, 11, 31) || dynamic) {
                var max = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(max, options), {}), !dynamic);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DatePicker2.prototype.getModuleName = function() {
      return "datepicker";
    };
    DatePicker2.prototype.disabledDates = function(isDynamic, isBlur) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      if (isBlur === void 0) {
        isBlur = false;
      }
      var formatOptions;
      var globalize;
      var valueCopy = this.checkDateValue(this.value) ? /* @__PURE__ */ new Date(+this.value) : new Date(this.checkValue(this.value));
      var previousValCopy = this.previousDate;
      this.minMaxUpdates();
      if (!isDynamic || isDynamic && !isNullOrUndefined(this.renderDayCell)) {
        _super.prototype.render.call(this);
      }
      this.previousDate = previousValCopy;
      var date = valueCopy && +valueCopy;
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + date);
      if (!this.strictMode) {
        if (typeof this.value === "string" || typeof this.value === "object" && +this.value !== +valueCopy) {
          this.setProperties({
            value: valueCopy
          }, true);
        }
      }
      if (!isNullOrUndefined(this.calendarElement) && !isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0])) {
        if (this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled")) {
          if (!this.strictMode) {
            this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
          }
        }
      }
      var inputVal;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          });
        } else {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          });
        }
        inputVal = globalize;
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          formatOptions = {
            format: this.formatString,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
        inputVal = this.globalize.formatDate(valueCopy, formatOptions);
      }
      if (!this.popupObj) {
        this.updateInputValue(inputVal);
        if (this.enableMask) {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime",
            isBlur
          });
        }
      }
    };
    DatePicker2.prototype.setAriaAttributes = function() {
      if (this.isCalendar()) {
        Input.addAttributes({
          "aria-expanded": "true"
        }, this.inputElement);
        attributes(this.inputElement, {
          "aria-owns": this.inputElement.id + "_options"
        });
        attributes(this.inputElement, {
          "aria-controls": this.inputElement.id
        });
        if (this.value) {
          attributes(this.inputElement, {
            "aria-activedescendant": "" + this.setActiveDescendant()
          });
        }
      } else {
        Input.addAttributes({
          "aria-expanded": "false"
        }, this.inputElement);
        this.inputElement.removeAttribute("aria-owns");
        this.inputElement.removeAttribute("aria-controls");
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    DatePicker2.prototype.errorClass = function() {
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + +this.value);
      var isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled");
      if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.min) && !isNullOrUndefined(this.max) && !(new Date(this.value).setMilliseconds(0) >= new Date(this.min).setMilliseconds(0) && new Date(this.value).setMilliseconds(0) <= new Date(this.max).setMilliseconds(0)) || !this.strictMode && this.inputElement.value !== "" && this.inputElement.value !== this.maskedDateValue && isNullOrUndefined(this.value) || isDisabledDate) {
        addClass([this.inputWrapper.container], ERROR2);
        attributes(this.inputElement, {
          "aria-invalid": "true"
        });
      } else if (!isNullOrUndefined(this.inputWrapper)) {
        removeClass([this.inputWrapper.container], ERROR2);
        attributes(this.inputElement, {
          "aria-invalid": "false"
        });
      }
    };
    DatePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          this.isDynamicValueChanged = true;
        }
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.isInteracted = false;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            this.previousElementValue = this.inputElement.value;
            if (isNullOrUndefined(this.value)) {
              if (this.enableMask) {
                this.updateInputValue(this.maskedDateValue);
              } else {
                this.updateInputValue("");
              }
              this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
            }
            this.updateInput(true);
            if (+this.previousDate !== +this.value) {
              this.changeTrigger(null);
            }
            this.isInteracted = true;
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "format":
            this.checkFormat();
            this.bindInputEvent();
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "allowEdit":
            this.setAllowEdit();
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            this.setAriaDisabled();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkHtmlAttributes(true);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.datepickerOptions && this.datepickerOptions.placeholder == null) {
              this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
              }, true);
              Input.setPlaceholder(this.placeholder, this.inputElement);
            }
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "start":
          case "depth":
            this.checkView();
            if (this.calendarElement) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            this.index = this.showClearButton ? 2 : 1;
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
              this.bindInputEvent();
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
          default:
            if (this.calendarElement && this.isCalendar()) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    __decorate8([Property(null)], DatePicker2.prototype, "width", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "value", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "cssClass", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "strictMode", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "format", void 0);
    __decorate8([Property(true)], DatePicker2.prototype, "enabled", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "fullScreenMode", void 0);
    __decorate8([Property({})], DatePicker2.prototype, "htmlAttributes", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "values", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "isMultiSelection", void 0);
    __decorate8([Property(true)], DatePicker2.prototype, "showClearButton", void 0);
    __decorate8([Property(true)], DatePicker2.prototype, "allowEdit", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "keyConfigs", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "enablePersistence", void 0);
    __decorate8([Property(1e3)], DatePicker2.prototype, "zIndex", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "readonly", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "placeholder", void 0);
    __decorate8([Property("Never")], DatePicker2.prototype, "floatLabelType", void 0);
    __decorate8([Property(null)], DatePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "openOnFocus", void 0);
    __decorate8([Property(false)], DatePicker2.prototype, "enableMask", void 0);
    __decorate8([Property({
      day: "day",
      month: "month",
      year: "year",
      hour: "hour",
      minute: "minute",
      second: "second",
      dayOfTheWeek: "day of the week"
    })], DatePicker2.prototype, "maskPlaceholder", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "open", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "cleared", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "close", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "blur", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "focus", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "created", void 0);
    __decorate8([Event2()], DatePicker2.prototype, "destroyed", void 0);
    DatePicker2 = __decorate8([NotifyPropertyChanges], DatePicker2);
    return DatePicker2;
  }(Calendar)
);

// node_modules/@syncfusion/ej2-calendars/src/daterangepicker/daterangepicker.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATERANGEWRAPPER = "e-date-range-wrapper";
var INPUTCONTAINER2 = "e-input-group";
var DATERANGEICON = "e-input-group-icon e-range-icon e-icons";
var POPUP2 = "e-popup";
var LEFTCALENDER = "e-left-calendar";
var RIGHTCALENDER = "e-right-calendar";
var LEFTCONTAINER = "e-left-container";
var RIGHTCONTAINER = "e-right-container";
var ROOT3 = "e-daterangepicker";
var LIBRARY2 = "e-lib";
var CONTROL2 = "e-control";
var ERROR3 = "e-error";
var ACTIVE2 = "e-active";
var STARTENDCONTAINER = "e-start-end";
var STARTDATE = "e-start-date";
var ENDDATE = "e-end-date";
var STARTBUTTON = "e-start-btn";
var INPUTFOCUS2 = "e-input-focus";
var ENDBUTTON = "e-end-btn";
var RANGEHOVER = "e-range-hover";
var OTHERMONTH3 = "e-other-month";
var STARTLABEL = "e-start-label";
var ENDLABEL = "e-end-label";
var DISABLED3 = "e-disabled";
var SELECTED4 = "e-selected";
var CALENDAR = "e-calendar";
var NEXTICON2 = "e-next";
var PREVICON2 = "e-prev";
var HEADER2 = "e-header";
var TITLE2 = "e-title";
var ICONCONTAINER2 = "e-icon-container";
var RANGECONTAINER = "e-date-range-container";
var RANGEHEADER = "e-range-header";
var PRESETS = "e-presets";
var FOOTER2 = "e-footer";
var RANGEBORDER = "e-range-border";
var TODAY3 = "e-today";
var FOCUSDATE = "e-focused-date";
var CONTENT2 = "e-content";
var DAYSPAN = "e-day-span";
var WEEKNUMBER3 = "e-week-number";
var DATEDISABLED = "e-date-disabled";
var ICONDISABLED = "e-icon-disabled";
var CALENDARCONTAINER = "e-calendar-container";
var SEPARATOR = "e-separator";
var APPLY = "e-apply";
var CANCEL = "e-cancel";
var DEVICE2 = "e-device";
var OVERLAY3 = "e-overlay";
var CHANGEICON = "e-change-icon e-icons";
var LISTCLASS = "e-list-item";
var RTL2 = "e-rtl";
var HOVER = "e-hover";
var OVERFLOW2 = "e-range-overflow";
var OFFSETVALUE2 = 4;
var PRIMARY2 = "e-primary";
var FLAT2 = "e-flat";
var CSS2 = "e-css";
var ZOOMIN2 = "e-zoomin";
var NONEDITABLE = "e-non-edit";
var DAYHEADERLONG2 = "e-daterange-day-header-lg";
var HIDDENELEMENT = "e-daterange-hidden";
var wrapperAttr = ["title", "class", "style"];
var Presets = (
  /** @class */
  function(_super) {
    __extends21(Presets2, _super);
    function Presets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([Property()], Presets2.prototype, "label", void 0);
    __decorate9([Property()], Presets2.prototype, "start", void 0);
    __decorate9([Property()], Presets2.prototype, "end", void 0);
    return Presets2;
  }(ChildProperty)
);
var DateRangePicker = (
  /** @class */
  function(_super) {
    __extends21(DateRangePicker2, _super);
    function DateRangePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isCustomRange = false;
      _this.isCustomWindow = false;
      _this.presetsItem = [];
      _this.liCollections = [];
      _this.previousEleValue = "";
      _this.isKeyPopup = false;
      _this.dateDisabled = false;
      _this.isRangeIconClicked = false;
      _this.isMaxDaysClicked = false;
      _this.disabledDays = [];
      _this.preventBlur = false;
      _this.preventFocus = false;
      _this.invalidValueString = null;
      _this.preventChange = false;
      _this.dateRangeOptions = options;
      return _this;
    }
    DateRangePicker2.prototype.render = function() {
      this.initialize();
      this.setProperties({
        startDate: this.startValue
      }, true);
      this.setProperties({
        endDate: this.endValue
      }, true);
      this.setModelValue();
      this.setDataAttribute(false);
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
    };
    DateRangePicker2.prototype.preRender = function() {
      this.keyInputConfigs = {
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        tab: "tab",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        spacebar: "space"
      };
      this.defaultConstant = {
        placeholder: this.placeholder,
        startLabel: "Start Date",
        endLabel: "End Date",
        customRange: "Custom Range",
        applyText: "Apply",
        cancelText: "Cancel",
        selectedDays: "Selected Days",
        days: "days"
      };
      this.isMobile = Browser.isDevice ? true : window.matchMedia("(max-width:550px)").matches;
      this.inputElement = this.element;
      this.angularTag = null;
      if (this.element.tagName === "EJS-DATERANGEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT3, CONTROL2, LIBRARY2]);
      this.updateHtmlAttributeToElement();
      if (this.element.getAttribute("id")) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2-datetimepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, {
            "id": this.element.id + "_input"
          });
        }
      }
      this.checkInvalidRange(this.value);
      if (!this.invalidValueString && typeof this.value === "string") {
        var rangeArray = this.value.split(" " + this.separator + " ");
        this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
      }
      this.initProperty();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
      this.navNextFunction = this.navNextMonth.bind(this);
      this.navPrevFunction = this.navPrevMonth.bind(this);
      this.deviceNavNextFunction = this.deviceNavNext.bind(this);
      this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this);
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.formElement = closest(this.element, "form");
    };
    DateRangePicker2.prototype.updateValue = function() {
      if (this.value && this.value.length > 0) {
        if (this.value[0] instanceof Date && !isNaN(+this.value[0])) {
          this.setProperties({
            startDate: this.value[0]
          }, true);
          this.startValue = this.value[0];
        } else if (typeof this.value[0] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.startValue = null;
            this.setValue();
          } else {
            this.setProperties({
              startDate: new Date(this.checkValue(this.value[0]))
            }, true);
            this.startValue = new Date(this.checkValue(this.value[0]));
          }
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value[1] instanceof Date && !isNaN(+this.value[1])) {
          this.setProperties({
            endDate: this.value[1]
          }, true);
          this.endValue = this.value[1];
        } else if (typeof this.value[1] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.setProperties({
              endDate: null
            }, true);
            this.endValue = null;
            this.setValue();
          } else {
            this.setProperties({
              endDate: new Date(this.checkValue(this.value[1]))
            }, true);
            this.endValue = new Date(this.checkValue(this.value[1]));
            this.setValue();
          }
        } else {
          this.setProperties({
            endDate: null
          }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (this.value && this.value.start) {
        if (this.value.start instanceof Date && !isNaN(+this.value.start)) {
          this.setProperties({
            startDate: this.value.start
          }, true);
          this.startValue = this.value.start;
        } else if (typeof this.value.start === "string") {
          this.setProperties({
            startDate: new Date(this.checkValue(this.value.start))
          }, true);
          this.startValue = new Date(this.checkValue(this.value.start));
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value.end instanceof Date && !isNaN(+this.value.end)) {
          this.setProperties({
            endDate: this.value.end
          }, true);
          this.endValue = this.value.end;
        } else if (typeof this.value.end === "string") {
          this.setProperties({
            endDate: new Date(this.checkValue(this.value.end))
          }, true);
          this.endValue = new Date(this.checkValue(this.value.end));
          this.setValue();
        } else {
          this.setProperties({
            endDate: null
          }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (isNullOrUndefined(this.value)) {
        this.endValue = this.checkDateValue(new Date(this.checkValue(this.endDate)));
        this.startValue = this.checkDateValue(new Date(this.checkValue(this.startDate)));
        this.setValue();
      }
    };
    DateRangePicker2.prototype.initProperty = function() {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({
          firstDayOfWeek: this.globalize.getFirstDayOfWeek()
        }, true);
      }
      this.updateValue();
    };
    DateRangePicker2.prototype.checkFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({
            skeleton: skeletonString,
            type: "date"
          });
        } else {
          this.formatString = null;
        }
      } else {
        this.formatString = null;
      }
    };
    DateRangePicker2.prototype.initialize = function() {
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.checkHtmlAttributes(false);
      merge(this.defaultKeyConfigs, {
        shiftTab: "shift+tab",
        tab: "tab"
      });
      var start = this.checkDateValue(new Date(this.checkValue(this.startValue)));
      this.setProperties({
        startDate: start
      }, true);
      this.setProperties({
        endValue: this.checkDateValue(new Date(this.checkValue(this.endValue)))
      }, true);
      this.setValue();
      this.setProperties({
        min: this.checkDateValue(new Date(this.checkValue(this.min)))
      }, true);
      this.setProperties({
        max: this.checkDateValue(new Date(this.checkValue(this.max)))
      }, true);
      this.l10n = new L10n("daterangepicker", this.defaultConstant, this.locale);
      this.l10n.setLocale(this.locale);
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant("placeholder")
      }, true);
      this.processPresets();
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setRangeAllowEdit();
      this.bindEvents();
    };
    DateRangePicker2.prototype.setDataAttribute = function(isDynamic) {
      var attributes2 = {};
      if (!isDynamic) {
        for (var i = 0; i < this.element.attributes.length; i++) {
          attributes2[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);
        }
      } else {
        attributes2 = this.htmlAttributes;
      }
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var pro = _a[_i];
        if (pro.indexOf("data") === 0) {
          this.firstHiddenChild.setAttribute(pro, attributes2["" + pro]);
          this.secondHiddenChild.setAttribute(pro, attributes2["" + pro]);
        }
      }
    };
    DateRangePicker2.prototype.setRangeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, {
          "readonly": ""
        });
      }
      this.updateClearIconState();
    };
    DateRangePicker2.prototype.updateClearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [NONEDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDITABLE]);
      }
    };
    DateRangePicker2.prototype.validationAttribute = function(element, input2) {
      var name = element.getAttribute("name") ? element.getAttribute("name") : element.getAttribute("id");
      input2.setAttribute("name", name);
      element.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(element.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = element.getAttribute(attributes2[i]);
        input2.setAttribute(attributes2[i], attr);
        element.removeAttribute(attributes2[i]);
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValue = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.inputWrapper.container], updatedClassValue.split(" "));
              }
            } else if (key === "style") {
              var dateRangeStyle = this.inputWrapper.container.getAttribute(key);
              dateRangeStyle = !isNullOrUndefined(dateRangeStyle) ? dateRangeStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputWrapper.container.setAttribute(key, dateRangeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateCssClass = function(cssNewClass, cssOldClass) {
      if (!isNullOrUndefined(cssOldClass)) {
        cssOldClass = cssOldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssNewClass)) {
        cssNewClass = cssNewClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssNewClass, [this.inputWrapper.container], cssOldClass);
      if (this.popupWrapper) {
        Input.setCssClass(cssNewClass, [this.popupWrapper], cssOldClass);
      }
    };
    DateRangePicker2.prototype.processPresets = function() {
      this.presetsItem = [];
      var i = 0;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {
          var range = _a[_i];
          var id = range.label.replace(/\s+/g, "") + "_" + ++i;
          if (typeof range.end === "string") {
            this.presetsItem.push({
              id,
              text: range.label,
              end: new Date(this.checkValue(range.end)),
              start: new Date(this.checkValue(range.start))
            });
          } else {
            this.presetsItem.push({
              id,
              text: range.label,
              start: range.start,
              end: range.end
            });
          }
        }
        var startDate = isNullOrUndefined(this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
        var endDate = isNullOrUndefined(this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
        this.presetsItem.push({
          id: "custom_range",
          text: this.l10n.getConstant("customRange"),
          start: startDate,
          end: endDate
        });
        if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
          this.isCustomRange = true;
          this.activeIndex = this.presetsItem.length - 1;
        }
      }
    };
    DateRangePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
      if (!this.isMobile) {
        this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
        this.inputKeyboardModule = new KeyboardEvents(this.inputElement, {
          eventName: "keydown",
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyInputConfigs
        });
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (this.enabled) {
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.inputElement.tabIndex = -1;
      }
    };
    DateRangePicker2.prototype.unBindEvents = function() {
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.inputKeyboardModule)) {
          this.inputKeyboardModule.destroy();
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.inputElement.tabIndex = -1;
    };
    DateRangePicker2.prototype.updateHiddenInput = function() {
      if (this.firstHiddenChild && this.secondHiddenChild) {
        var format = {
          format: this.formatString,
          type: "datetime",
          skeleton: "yMd"
        };
        if (typeof this.startDate === "string") {
          this.startDate = this.globalize.parseDate(this.startDate, format);
        }
        if (typeof this.endDate === "string") {
          this.endDate = this.globalize.parseDate(this.endDate, format);
        }
        this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format) || this.inputElement.value;
        this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format) || this.inputElement.value;
        this.dispatchEvent(this.firstHiddenChild, "focusout");
        this.dispatchEvent(this.firstHiddenChild, "change");
      }
    };
    DateRangePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DateRangePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.valueType = this.value;
      e.preventDefault();
      this.clear();
      var clearedArgs = {
        event: e
      };
      this.setProperties({
        endDate: this.checkDateValue(this.endValue)
      }, true);
      this.setProperties({
        startDate: this.checkDateValue(this.startValue)
      }, true);
      this.trigger("cleared", clearedArgs);
      this.changeTrigger(e);
      this.clearRange();
      this.hide(e);
      if (closest(this.element, "form")) {
        var element = this.firstHiddenChild;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element.dispatchEvent(keyupEvent);
      }
    };
    DateRangePicker2.prototype.restoreValue = function() {
      this.previousEleValue = this.inputElement.value;
      this.previousStartValue = this.startValue;
      this.previousEndValue = this.endValue;
      this.valueType = null;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.setValue();
      this.setModelValue();
    };
    DateRangePicker2.prototype.formResetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.formElement && e.target === this.formElement && !this.inputElement.disabled) {
        var val = this.inputElement.getAttribute("value");
        if (!isNullOrUndefined(this.startCopy)) {
          if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.value.start)) {
            this.setProperties({
              value: {
                start: this.startCopy,
                end: this.endCopy
              }
            }, true);
            this.startValue = this.value.start;
            this.endValue = this.value.end;
          } else {
            this.setProperties({
              value: [this.startCopy, this.endCopy]
            }, true);
            this.startValue = this.value[0];
            this.endValue = this.value[1];
          }
          this.setProperties({
            startDate: this.startValue,
            endDate: this.endValue
          }, true);
        } else {
          this.setProperties({
            value: null,
            startDate: null,
            endDate: null
          }, true);
          this.startValue = this.endValue = null;
        }
        if (this.element.tagName === "EJS-DATERANGEPICKER") {
          this.setProperties({
            value: null,
            startDate: null,
            endDate: null
          }, true);
          val = "";
          this.startValue = this.endValue = null;
          this.inputElement.setAttribute("value", "");
        }
        this.restoreValue();
        if (this.inputElement) {
          Input.setValue(val, this.inputElement, this.floatLabelType, this.showClearButton);
          this.errorClass();
        }
      }
    };
    DateRangePicker2.prototype.clear = function() {
      if (this.startValue !== null) {
        this.startValue = null;
      }
      if (this.endValue !== null) {
        this.endValue = null;
      }
      if (this.value && this.value.start) {
        this.setProperties({
          value: {
            start: null,
            end: null
          }
        }, true);
      }
      if (this.value !== null && this.value.length > 0) {
        this.setProperties({
          value: null
        }, true);
      }
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      if (!isNullOrUndefined(this.applyButton)) {
        this.applyButton.disabled = this.applyButton.element.disabled = true;
      }
      this.removeSelection();
    };
    DateRangePicker2.prototype.rangeIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isMobile) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      this.targetElement = null;
      if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
        this.applyFunction(e);
      } else {
        this.isRangeIconClicked = true;
        this.inputWrapper.container.children[0].focus();
        this.show(null, e);
        if (!this.isMobile) {
          if (!isNullOrUndefined(this.leftCalendar)) {
            this.isRangeIconClicked = false;
            this.calendarFocus();
            this.isRangeIconClicked = true;
          }
        }
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
    };
    DateRangePicker2.prototype.checkHtmlAttributes = function(isDynamic) {
      this.globalize = new Internationalization(this.locale);
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["startDate", "endDate", "minDays", "maxDays", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type", "value"];
      var format = {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      };
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["enabled"] === void 0 || isDynamic) {
                var disabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  enabled: !disabled
                }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["value"] === void 0 || isDynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, value, {}), !isDynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "min":
              if (isNullOrUndefined(this.min) || +this.min === +new Date(1900, 0, 1) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "max":
              if (isNullOrUndefined(this.max) || +this.max === +new Date(2099, 11, 31) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "startDate":
              if (isNullOrUndefined(this.startDate)) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.startValue = dateValue;
                this.setValue();
              }
              break;
            case "endDate":
              if (isNullOrUndefined(this.endDate)) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.endValue = dateValue;
                this.setValue();
              }
              break;
            case "minDays":
              if (isNullOrUndefined(this.minDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "maxDays":
              if (isNullOrUndefined(this.maxDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DateRangePicker2.prototype.createPopup = function() {
      for (var i = 0; i < this.presetsItem.length; i++) {
        if (i !== this.presetsItem.length - 1 && this.presetsItem[i].id === "custom_range") {
          this.presetsItem.splice(i, 1);
        }
      }
      this.activeIndex = this.presetsItem.length - 1;
      this.isCustomRange = true;
      for (var i = 0; i <= this.presetsItem.length - 2; i++) {
        var startDate = this.presetsItem[i].start;
        var endDate = this.presetsItem[i].end;
        if (this.startValue && this.endValue) {
          if (startDate.getDate() === this.startValue.getDate() && startDate.getMonth() === this.startValue.getMonth() && startDate.getFullYear() === this.startValue.getFullYear() && endDate.getDate() === this.endValue.getDate() && endDate.getMonth() === this.endValue.getMonth() && endDate.getFullYear() === this.endValue.getFullYear()) {
            this.activeIndex = i;
            this.isCustomRange = false;
          }
        }
      }
      this.popupWrapper = createElement("div", {
        id: this.element.id + "_popup",
        className: ROOT3 + " " + POPUP2
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      this.adjustLongHeaderWidth();
      var isPreset = !this.isCustomRange || this.isMobile;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {
        this.isCustomWindow = false;
        this.createPresets();
        this.listRippleEffect();
        this.renderPopup();
      } else {
        this.isCustomWindow = true;
        this.renderControl();
      }
    };
    DateRangePicker2.prototype.renderControl = function() {
      this.createControl();
      this.bindCalendarEvents();
      this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
        this.disabledDateRender();
      }
      this.updateHeader();
    };
    DateRangePicker2.prototype.clearCalendarEvents = function() {
      if (this.leftCalPrevIcon && this.leftCalNextIcon && this.rightCalPrevIcon && this.rightCalNextIcon) {
        EventHandler.clearEvents(this.leftCalPrevIcon);
        EventHandler.clearEvents(this.leftCalNextIcon);
        EventHandler.clearEvents(this.rightCalPrevIcon);
        EventHandler.clearEvents(this.rightCalNextIcon);
      }
    };
    DateRangePicker2.prototype.updateNavIcons = function() {
      _super.prototype.iconHandler.call(this);
    };
    DateRangePicker2.prototype.calendarIconEvent = function() {
      this.clearCalendarEvents();
      if (this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED3)) {
        EventHandler.add(this.leftCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED3)) {
        EventHandler.add(this.leftCalNextIcon, "mousedown", this.navNextFunction);
      }
      if (this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED3)) {
        EventHandler.add(this.rightCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED3)) {
        EventHandler.add(this.rightCalNextIcon, "mousedown", this.navNextFunction);
      }
    };
    DateRangePicker2.prototype.bindCalendarEvents = function() {
      if (!this.isMobile) {
        this.updateNavIcons();
        this.calendarIconEvent();
        this.calendarIconRipple();
        this.headerTitleElement = this.popupObj.element.querySelector("." + RIGHTCALENDER + " ." + HEADER2 + " ." + TITLE2);
        this.headerTitleElement = this.popupObj.element.querySelector("." + LEFTCALENDER + " ." + HEADER2 + " ." + TITLE2);
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.leftKeyboardModule = new KeyboardEvents(this.leftCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
        this.rightKeyboardModule = new KeyboardEvents(this.rightCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.deviceCalendarEvent();
        EventHandler.add(this.startButton.element, "click", this.deviceHeaderClick, this);
        EventHandler.add(this.endButton.element, "click", this.deviceHeaderClick, this);
      }
      if (this.start === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.calendarIconRipple = function() {
      rippleEffect(this.leftCalPrevIcon, {
        selector: ".e-prev",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.leftCalNextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.rightCalPrevIcon, {
        selector: ".e-prev",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.rightCalNextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
    };
    DateRangePicker2.prototype.deviceCalendarEvent = function() {
      EventHandler.clearEvents(this.nextIcon);
      EventHandler.clearEvents(this.previousIcon);
      rippleEffect(this.nextIcon, {
        selector: ".e-prev",
        duration: 400,
        isCenterRipple: true
      });
      rippleEffect(this.previousIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      if (this.nextIcon && !this.nextIcon.classList.contains(DISABLED3)) {
        EventHandler.add(this.nextIcon, "mousedown", this.deviceNavNextFunction);
      }
      if (this.previousIcon && !this.previousIcon.classList.contains(DISABLED3)) {
        EventHandler.add(this.previousIcon, "mousedown", this.deviceNavPrevFunction);
      }
    };
    DateRangePicker2.prototype.deviceNavNext = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigateNext(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.deviceNavPrevious = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigatePrevious(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.updateDeviceCalendar = function(calendar) {
      if (calendar) {
        this.previousIcon = calendar.querySelector("." + PREVICON2);
        this.nextIcon = calendar.querySelector("." + NEXTICON2);
        this.calendarElement = calendar;
        this.deviceCalendar = calendar;
        this.contentElement = calendar.querySelector("." + CONTENT2);
        this.tableBodyElement = select("." + CONTENT2 + " tbody", calendar);
        this.table = calendar.querySelector("." + CONTENT2).getElementsByTagName("table")[0];
        this.headerTitleElement = calendar.querySelector("." + HEADER2 + " ." + TITLE2);
        this.headerElement = calendar.querySelector("." + HEADER2);
      }
    };
    DateRangePicker2.prototype.deviceHeaderClick = function(event2) {
      var element = event2.currentTarget;
      if (element.classList.contains(STARTBUTTON) && !isNullOrUndefined(this.startValue)) {
        this.endButton.element.classList.remove(ACTIVE2);
        this.startButton.element.classList.add(ACTIVE2);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + STARTDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.removeClassDisabled();
      } else if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        this.startButton.element.classList.remove(ACTIVE2);
        this.endButton.element.classList.add(ACTIVE2);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + ENDDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        this.selectableDates();
      }
    };
    DateRangePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      this.preventBlur = false;
      var focusArguments = {
        model: this
      };
      if (!this.preventFocus) {
        this.trigger("focus", focusArguments);
      }
      this.updateClearIconState();
      if (this.openOnFocus && !this.preventFocus) {
        this.preventFocus = true;
        this.show();
      } else {
        this.preventFocus = true;
      }
    };
    DateRangePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.preventBlur) {
        var value = this.inputElement.value;
        if (!isNullOrUndefined(this.presetsItem)) {
          if (this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value) {
            this.activeIndex = this.presetsItem.length - 1;
            this.isCustomRange = true;
          }
        }
        if (!isNullOrUndefined(value) && value.trim() !== "") {
          var range = value.split(" " + this.separator + " ");
          if (range.length > 1) {
            this.invalidValueString = null;
            var dateOptions = {
              format: this.formatString,
              type: "date",
              skeleton: "yMd"
            };
            var start = this.globalize.parseDate(range[0], dateOptions);
            var end = this.globalize.parseDate(range[1], dateOptions);
            var startDate = this.getStartEndDate(start, false, range, dateOptions);
            var endDate = this.getStartEndDate(end, true, range, dateOptions);
            if (!isNullOrUndefined(startDate) && !isNaN(+startDate) && !isNullOrUndefined(endDate) && !isNaN(+endDate)) {
              var prevStartVal = this.startValue;
              this.startValue = startDate;
              var prevEndVal = this.endValue;
              this.endValue = endDate;
              this.setValue();
              this.refreshControl();
              if (value !== this.previousEleValue) {
                this.changeTrigger(e);
              }
              if (!this.preventBlur && document.activeElement !== this.inputElement) {
                this.preventFocus = false;
                var blurArguments = {
                  model: this
                };
                this.trigger("blur", blurArguments);
              }
              this.updateHiddenInput();
              if (this.isMobile && this.isPopupOpen()) {
                this.startValue = prevStartVal;
                this.endValue = prevEndVal;
              }
              return;
            } else {
              if (!this.strictMode) {
                this.startValue = null;
                this.endValue = null;
                this.setValue();
              }
            }
          } else {
            if (!this.strictMode) {
              this.startValue = null;
              this.endValue = null;
              this.setValue();
            }
          }
        }
        if (!this.strictMode) {
          if (isNullOrUndefined(this.popupObj)) {
            this.currentDate = null;
          }
          this.previousStartValue = this.previousEndValue = null;
          this.startValue = null;
          this.endValue = null;
          this.setValue();
        } else {
          if (!isNullOrUndefined(value) && value.trim() === "") {
            this.startValue = null;
            this.endValue = null;
          }
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
          this.updateInput();
        }
        this.errorClass();
        this.changeTrigger(e);
        if (!this.preventBlur && document.activeElement !== this.inputElement) {
          this.preventFocus = false;
          var blurArguments = {
            model: this
          };
          this.trigger("blur", blurArguments);
        }
      }
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.getStartEndDate = function(date, isEnd, range, dateOptions) {
      if (this.depth === "Month") {
        return this.globalize.parseDate(range[isEnd ? 1 : 0].trim(), dateOptions);
      } else if (this.depth === "Year") {
        return new Date(date.getFullYear(), date.getMonth() + (isEnd ? 1 : 0), isEnd ? 0 : 1);
      } else {
        return new Date(date.getFullYear(), isEnd ? 11 : 0, isEnd ? 31 : 1);
      }
    };
    DateRangePicker2.prototype.clearRange = function() {
      this.previousStartValue = this.previousEndValue = null;
      this.currentDate = null;
    };
    DateRangePicker2.prototype.errorClass = function() {
      var inputStr = this.inputElement.value.trim();
      if ((isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) && inputStr !== "" || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || this.startValue && this.isDateDisabled(this.startValue) || this.endValue && this.isDateDisabled(this.endValue)) && inputStr !== "") {
        addClass([this.inputWrapper.container], ERROR3);
        attributes(this.inputElement, {
          "aria-invalid": "true"
        });
      } else {
        if (this.inputWrapper) {
          removeClass([this.inputWrapper.container], ERROR3);
          attributes(this.inputElement, {
            "aria-invalid": "false"
          });
        }
      }
    };
    DateRangePicker2.prototype.keyCalendarUpdate = function(isLeftCalendar, ele, isRemoveFocus) {
      if (isRemoveFocus === void 0) {
        isRemoveFocus = true;
      }
      if (isRemoveFocus) {
        this.removeFocusedDate();
      }
      if (isLeftCalendar) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.leftCalendar;
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.rightCalendar;
      }
      this.updateCalendarElement(ele);
      this.table.focus();
      return ele;
    };
    DateRangePicker2.prototype.navInCalendar = function(e, isLeftCalendar, leftLimit, rightLimit, ele) {
      var view = this.getViewNumber(this.currentView());
      var date;
      var min = this.min;
      var max;
      if (!isNullOrUndefined(this.maxDays) && this.isMaxDaysClicked && !isNullOrUndefined(this.startValue)) {
        max = new Date((/* @__PURE__ */ new Date(+this.startValue)).setDate(this.startValue.getDate() + (this.maxDays - 1)));
      } else {
        max = this.max;
      }
      switch (e.action) {
        case "moveRight":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, 1, e, max, min);
          if (isLeftCalendar && +date === +rightLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.keyboardNavigate(1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveLeft":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, -1, e, max, min);
          if (!isLeftCalendar) {
            if (+date === +leftLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
          }
          this.keyboardNavigate(-1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveUp":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, -7, e, max, min);
            if (+date <= +leftLimit && !isLeftCalendar) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            this.keyboardNavigate(-7, view, e, max, min);
          } else {
            this.keyboardNavigate(-4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "moveDown":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, 7, e, max, min);
            if (isLeftCalendar && +date >= +rightLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            this.keyboardNavigate(7, view, e, max, min);
          } else {
            this.keyboardNavigate(4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "tab":
          if (this.tabKeyValidation(ele, LEFTCALENDER)) {
            ele = this.keyCalendarUpdate(false, ele, false);
            this.currentDate = this.firstCellToFocus(this.rightCalendar);
            view = this.getViewNumber(this.currentView());
            this.keyboardNavigate(0, view, e, max, min);
            this.keyNavigation(ele, e);
          }
          break;
        case "shiftTab":
          if (this.tabKeyValidation(ele, RIGHTCALENDER)) {
            ele = this.keyCalendarUpdate(true, ele, false);
            this.currentDate = this.firstCellToFocus(this.leftCalendar);
            this.keyboardNavigate(0, view, e, max, min);
            this.keyNavigation(ele, e);
          }
          break;
      }
    };
    DateRangePicker2.prototype.firstCellToFocus = function(calendar) {
      var focusAbleEle = this.getViewNumber(this.currentView()) === 2 ? calendar.children[1].firstElementChild.querySelector("td.e-cell:not(.e-week-number):not(.e-disabled):not(.e-other-year)") : calendar.children[1].firstElementChild.querySelector("td.e-cell:not(.e-week-number):not(.e-disabled):not(.e-other-month)");
      var focusEleID = focusAbleEle && focusAbleEle.id ? focusAbleEle.id.split("_")[0] : null;
      var currentFirstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
      var focusDate = focusEleID ? /* @__PURE__ */ new Date(+focusEleID) : currentFirstDay;
      return focusDate;
    };
    DateRangePicker2.prototype.keyInputHandler = function(e, value) {
      var date;
      var view = this.getViewNumber(this.currentView());
      var rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1);
      var leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0);
      var ele = closest(e.target, "." + RIGHTCALENDER);
      ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
      var isLeftCalendar = ele.classList.contains(LEFTCALENDER);
      this.updateCalendarElement(ele);
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      var focusedDate = ele.querySelector("tr td." + FOCUSDATE);
      var startDate = ele.querySelector("tr td." + STARTDATE);
      var endDate = ele.querySelector("tr td." + ENDDATE);
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      var leftCalendar = closest(e.target, "." + LEFTCALENDER);
      var rightCalendar = closest(e.target, "." + RIGHTCALENDER);
      var presetElement = closest(e.target, "." + PRESETS);
      if (!isNullOrUndefined(focusedDate)) {
        this.currentDate = this.currentDate;
      } else if (!isNullOrUndefined(endDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else if (!isNullOrUndefined(startDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
      } else if (!this.dateDisabled) {
        this.currentDate.setDate(1);
      }
      this.effect = "";
      switch (e.action) {
        case "altUpArrow":
          if (this.isPopupOpen()) {
            this.hide(e);
            this.preventFocus = true;
            this.inputElement.focus();
            addClass([this.inputWrapper.container], [INPUTFOCUS2]);
          }
          break;
        case "select":
          if (levelRestrict) {
            var element = !isNullOrUndefined(focusedDate) ? focusedDate : startDate;
            if (!isNullOrUndefined(element) && !element.classList.contains(DISABLED3)) {
              this.selectRange(null, element);
            }
          } else {
            if (!isNullOrUndefined(selectedDate) && !levelRestrict || !isNullOrUndefined(focusedDate)) {
              if (!isNullOrUndefined(this.value)) {
                if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                  value = this.startDate;
                } else {
                  value = this.endDate;
                }
              }
              this.controlDown = e;
              this.contentClick(null, --view, focusedDate || selectedDate, value);
            }
          }
          e.preventDefault();
          break;
        case "controlHome":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);
            if (!isLeftCalendar && +yearDate < +leftDateLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 0, 1));
            this.keyNavigation(ele, e);
          }
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else if (!isNullOrUndefined(rightCalendar)) {
            if (!isNullOrUndefined(this.presetElement)) {
              this.presetElement.focus();
              this.removeFocusedDate();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(presetElement)) {
              this.cancelButton.element.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            if (this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(rightCalendar)) {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "controlUp":
          if (this.calendarElement.classList.contains(LEFTCALENDER)) {
            this.calendarNavigation(e, this.calendarElement);
          } else {
            this.calendarNavigation(e, this.calendarElement);
          }
          e.preventDefault();
          break;
        case "controlDown":
          if ((!isNullOrUndefined(selectedDate) || !isNullOrUndefined(focusedDate)) && !levelRestrict) {
            if (!isNullOrUndefined(this.value)) {
              if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                value = this.startDate;
              } else {
                value = this.endDate;
              }
            }
            this.controlDown = e;
            this.contentClick(null, --view, selectedDate || focusedDate, value);
          }
          e.preventDefault();
          break;
        case "controlEnd":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 11, 31);
            if (isLeftCalendar && +yearDate > +rightDateLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 11, 31));
            this.keyNavigation(ele, e);
          }
          break;
        case "pageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addMonths(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "pageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addMonths(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addYears(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addYears(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftTab":
          if (!isNullOrUndefined(this.presetElement)) {
            this.presetElement.setAttribute("tabindex", "0");
            this.presetElement.focus();
            this.removeFocusedDate();
          }
          if (isLeftCalendar) {
            e.preventDefault();
          }
          if (this.tabKeyValidation(ele, RIGHTCALENDER)) {
            this.currentDate = /* @__PURE__ */ new Date(+this.leftCalCurrentDate);
            this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          }
          break;
        case "spacebar":
          if (this.applyButton && !this.applyButton.disabled) {
            this.applyFunction(e);
          }
          break;
        case "tab":
          if (this.tabKeyValidation(ele, LEFTCALENDER)) {
            this.currentDate = /* @__PURE__ */ new Date(+this.rightCalCurrentDate);
            this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          }
          break;
        default:
          this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          this.checkMinMaxDays();
      }
      this.presetHeight();
    };
    DateRangePicker2.prototype.tabKeyValidation = function(ele, calendarPos) {
      var isLeftCalendar = ele.classList.contains(calendarPos);
      var rightHeader = this.rightCalendar.querySelector(".e-header");
      var leftHeader = this.leftCalendar.querySelector(".e-header");
      var isRightMonth = rightHeader ? rightHeader.classList.contains("e-month") : false;
      var isLeftMonth = leftHeader ? leftHeader.classList.contains("e-month") : false;
      var isRightYear = rightHeader ? rightHeader.classList.contains("e-year") : false;
      var isLeftYear = leftHeader ? leftHeader.classList.contains("e-year") : false;
      var isRightDecade = rightHeader ? rightHeader.classList.contains("e-decade") : false;
      var isLeftDecade = leftHeader ? leftHeader.classList.contains("e-decade") : false;
      return isLeftCalendar && (isLeftMonth || isLeftYear || isLeftDecade) && (isRightMonth || isRightYear || isRightDecade) && !this.isMobile;
    };
    DateRangePicker2.prototype.keyNavigation = function(calendar, e) {
      this.bindCalendarCellEvents(calendar);
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.updateNavIcons();
      this.calendarIconEvent();
      this.updateRange([calendar]);
      this.dateDisabled = this.isDateDisabled(this.currentDate);
      e.preventDefault();
    };
    DateRangePicker2.prototype.inputHandler = function(e) {
      switch (e.action) {
        case "altDownArrow":
          if (!this.isPopupOpen()) {
            if (this.inputElement.value === "") {
              this.clear();
              this.changeTrigger(e);
              this.clearRange();
            }
            this.show(null, e);
            this.isRangeIconClicked = false;
            if (!this.isMobile) {
              if (!isNullOrUndefined(this.leftCalendar)) {
                this.calendarFocus();
              }
            }
            this.isKeyPopup = true;
          }
          break;
        case "escape":
          if (this.isPopupOpen()) {
            this.hide(e);
          }
          break;
        case "enter":
          if (document.activeElement === this.inputElement) {
            this.inputBlurHandler(e);
            this.hide(e);
          }
          break;
        case "tab":
          if (document.activeElement === this.inputElement && this.isPopupOpen()) {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.bindCalendarCellEvents = function(calendar) {
      var tdCells;
      if (calendar) {
        tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
      } else {
        tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
      }
      for (var _i = 0, tdCells_1 = tdCells; _i < tdCells_1.length; _i++) {
        var cell = tdCells_1[_i];
        EventHandler.clearEvents(cell);
        var disabledCell = cell.classList.contains(DISABLED3) || cell.classList.contains(DATEDISABLED);
        if (!disabledCell && !cell.classList.contains(WEEKNUMBER3)) {
          if (!this.isMobile) {
            EventHandler.add(cell, "mouseover", this.hoverSelection, this);
          }
          EventHandler.add(cell, "mousedown", this.selectRange, this);
        }
      }
    };
    DateRangePicker2.prototype.removeFocusedDate = function() {
      var isDate = !isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue);
      var focusedDate = this.popupObj.element.querySelectorAll("." + CALENDAR + " ." + FOCUSDATE);
      for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {
        var ele = focusedDate_1[_i];
        var today = /* @__PURE__ */ new Date();
        var eleDate = this.getIdValue(null, ele);
        if (this.depth === "Month" && this.currentView() === "Month" && (!ele.classList.contains(TODAY3) || ele.classList.contains(TODAY3) && isDate) || this.depth === "Year" && this.currentView() === "Year" && (!this.isSameMonth(today, eleDate) && !this.isSameYear(today, eleDate) || isDate) || this.depth === "Decade" && this.currentView() === "Decade" && (!this.isSameYear(today, eleDate) || isDate)) {
          ele.classList.remove(FOCUSDATE);
          if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(ENDDATE)) {
            ele.removeAttribute("aria-label");
          }
        }
      }
    };
    DateRangePicker2.prototype.hoverSelection = function(event2, element) {
      var currentElement = element || event2.currentTarget;
      var currentDate = this.getIdValue(null, currentElement);
      if (!isNullOrUndefined(this.startValue) && +this.startValue >= +this.min && +this.startValue <= +this.max) {
        if (!this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue) && isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
          var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
          for (var _i = 0, tdCells_2 = tdCells; _i < tdCells_2.length; _i++) {
            var ele = tdCells_2[_i];
            var isDisabledCell = !ele.classList.contains(DISABLED3) || ele.classList.contains(DATEDISABLED);
            if (!ele.classList.contains(WEEKNUMBER3) && isDisabledCell) {
              var eleDate = this.getIdValue(null, ele);
              var startDateValue = /* @__PURE__ */ new Date(+this.startValue);
              var eleDateValue = /* @__PURE__ */ new Date(+eleDate);
              if (eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate) {
                addClass([ele], RANGEHOVER);
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.isSameStartEnd = function(startVal, endVal) {
      var isSame = false;
      if (this.depth === "Month") {
        if (startVal.setHours(0, 0, 0, 0) === endVal.setHours(0, 0, 0, 0)) {
          isSame = true;
        }
      } else if (this.depth === "Year") {
        if (startVal.getFullYear() === endVal.getFullYear() && startVal.getMonth() === endVal.getMonth()) {
          isSame = true;
        }
      } else if (this.depth === "Decade") {
        if (startVal.getFullYear() === endVal.getFullYear()) {
          isSame = true;
        }
      }
      return isSame;
    };
    DateRangePicker2.prototype.updateRange = function(elementCollection) {
      if (!isNullOrUndefined(this.startValue)) {
        for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) {
          var calendar = elementCollection_1[_i];
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          for (var _a = 0, tdCells_3 = tdCells; _a < tdCells_3.length; _a++) {
            var ele = tdCells_3[_a];
            if (!ele.classList.contains(WEEKNUMBER3) && !ele.classList.contains(DISABLED3)) {
              var eleDate = this.getIdValue(null, ele);
              var eleDateValue = this.getIdValue(null, ele);
              if (!isNullOrUndefined(this.endValue)) {
                if (this.currentView() === this.depth && +eleDateValue.setHours(0, 0, 0, 0) >= +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) && +eleDateValue.setHours(0, 0, 0, 0) <= +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) && !this.isSameStartEnd(/* @__PURE__ */ new Date(+this.startValue), /* @__PURE__ */ new Date(+this.endValue)) && +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) >= +this.min && +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) <= +this.max && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], RANGEHOVER);
                }
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
              if (ele.classList.contains(SELECTED4) && ele.classList.contains(ENDDATE) && +eleDateValue !== +this.endValue) {
                removeClass([ele], [SELECTED4]);
                removeClass([ele], [ENDDATE]);
              }
              if (ele.classList.contains(RANGEHOVER) && +eleDateValue > +this.endValue) {
                removeClass([ele], [RANGEHOVER]);
              }
              if (!ele.classList.contains(OTHERMONTH3)) {
                var startDateValue = /* @__PURE__ */ new Date(+this.startValue);
                var eleDateValue_1 = /* @__PURE__ */ new Date(+eleDate);
                if (this.currentView() === this.depth && +eleDateValue_1.setHours(0, 0, 0, 0) === +startDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) >= +startDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [STARTDATE, SELECTED4]);
                  this.addSelectedAttributes(ele, this.startValue, true);
                }
                var endDateValue = /* @__PURE__ */ new Date(+this.endValue);
                if (this.currentView() === "Year") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), eleDateValue_1.getMonth() + 1, 0);
                } else if (this.currentView() === "Decade") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), 11, 31);
                }
                if (this.currentView() === this.depth && !isNullOrUndefined(this.endValue) && +eleDateValue_1.setHours(0, 0, 0, 0) === +endDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) <= +endDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [ENDDATE, SELECTED4]);
                  this.addSelectedAttributes(ele, this.startValue, false);
                }
                if (+eleDate === +this.startValue && !isNullOrUndefined(this.endValue) && +eleDate === +this.endValue) {
                  this.addSelectedAttributes(ele, this.endValue, false, true);
                }
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.checkMinMaxDays = function() {
      if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
        if (!this.isMobile) {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + LEFTCALENDER));
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + RIGHTCALENDER));
        } else {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        }
      }
    };
    DateRangePicker2.prototype.rangeArgs = function(e) {
      var inputValue;
      var range;
      var startDate = !isNullOrUndefined(this.startValue) ? this.globalize.formatDate(this.startValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      var endDate = !isNullOrUndefined(this.endValue) ? this.globalize.formatDate(this.endValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        inputValue = startDate + " " + this.separator + " " + endDate;
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
      } else {
        inputValue = "";
        range = 0;
      }
      var args = {
        value: this.value,
        startDate: this.startValue,
        endDate: this.endValue,
        daySpan: range,
        event: e || null,
        element: this.element,
        isInteracted: !isNullOrUndefined(e),
        text: inputValue
      };
      return args;
    };
    DateRangePicker2.prototype.otherMonthSelect = function(ele, isStartDate, sameDate) {
      var value = +this.getIdValue(null, ele);
      var dateIdString = '*[id^="/id"]:not(.e-other-month)'.replace("/id", "" + value);
      var tdCell = this.popupObj && this.popupObj.element.querySelector(dateIdString);
      if (!isNullOrUndefined(tdCell)) {
        if (isStartDate) {
          addClass([tdCell], [STARTDATE, SELECTED4]);
          this.addSelectedAttributes(tdCell, this.startValue, true);
        } else {
          addClass([tdCell], [ENDDATE, SELECTED4]);
          this.addSelectedAttributes(tdCell, this.endValue, true);
        }
        if (sameDate) {
          this.addSelectedAttributes(ele, this.endValue, false, true);
        }
      }
    };
    DateRangePicker2.prototype.selectRange = function(event2, element) {
      var leftCalendar;
      var rightCalendar;
      if (event2) {
        event2.preventDefault();
      }
      var date = isNullOrUndefined(event2) ? this.getIdValue(null, element) : this.getIdValue(event2, null);
      var y = date.getFullYear();
      var m = date.getMonth();
      var firstDay = new Date(y, m, 1);
      var lastDay = new Date(y, m + 1, 0);
      var firstMonth = new Date(y, 0, 1);
      var lastMonth = new Date(y, 11, 31);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        if (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE2)) {
          this.removeSelection();
        }
      } else if (this.isMobile && this.startButton.element.classList.contains(ACTIVE2)) {
        this.removeSelection();
      }
      var ele = element || event2.currentTarget;
      if (isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.previousStartValue)) {
          date.setHours(this.previousStartValue.getHours());
          date.setMinutes(this.previousStartValue.getMinutes());
          date.setSeconds(this.previousStartValue.getSeconds());
        }
        this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
        this.endValue = null;
        this.setValue();
        addClass([ele], STARTDATE);
        this.addSelectedAttributes(ele, this.startValue, true);
        if (ele.classList.contains(OTHERMONTH3)) {
          this.otherMonthSelect(ele, true);
        }
        this.checkMinMaxDays();
        this.applyButton.disabled = true;
        this.applyButton.element.disabled = true;
        if (this.isMobile) {
          this.endButton.element.classList.add(ACTIVE2);
          this.startButton.element.classList.remove(ACTIVE2);
          this.endButton.element.removeAttribute("disabled");
          this.selectableDates();
        }
        this.trigger("select", this.rangeArgs(event2));
      } else {
        if (+date === +this.startValue || +date > +this.startValue) {
          if (+date === +this.startValue && !isNullOrUndefined(this.minDays) && this.minDays > 1) {
            return;
          }
          this.endValue = null;
          this.setValue();
          if (this.isMobile || element) {
            this.hoverSelection(event2, element);
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            date.setHours(this.previousEndValue.getHours());
            date.setMinutes(this.previousEndValue.getMinutes());
            date.setSeconds(this.previousEndValue.getSeconds());
          }
          this.endValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? lastDay : lastMonth;
          this.setValue();
          var endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          if (this.isMobile) {
            this.startButton.element.classList.remove(ACTIVE2);
            this.endButton.element.classList.add(ACTIVE2);
            for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {
              var ele_1 = endEle_1[_i];
              ele_1.removeAttribute("aria-label");
              if (!ele_1.classList.contains(STARTDATE)) {
                ele_1.setAttribute("aria-selected", "false");
                removeClass([ele_1], [ENDDATE, SELECTED4]);
              } else {
                this.addSelectedAttributes(ele_1, this.startValue, true);
                removeClass([ele_1], [ENDDATE]);
              }
            }
          }
          addClass([ele], ENDDATE);
          if (+this.endValue === +this.startValue) {
            this.addSelectedAttributes(ele, this.endValue, false, true);
          } else {
            this.addSelectedAttributes(ele, this.endValue, false);
          }
          if (ele.classList.contains(OTHERMONTH3)) {
            if (+this.endValue === +this.startValue) {
              this.otherMonthSelect(ele, false, true);
            } else {
              this.otherMonthSelect(ele, false);
            }
          }
          endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          for (var _a = 0, endEle_2 = endEle; _a < endEle_2.length; _a++) {
            var ele_2 = endEle_2[_a];
            if (ele_2.classList.contains(STARTDATE)) {
              removeClass([ele_2], [RANGEHOVER]);
            }
          }
          this.applyButton.disabled = false;
          this.applyButton.element.disabled = false;
          if (!this.isMobile) {
            this.removeClassDisabled();
          }
          if (!isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
            this.disabledDateRender();
          }
          this.trigger("select", this.rangeArgs(event2));
        } else if (+date < +this.startValue) {
          this.removeClassDisabled();
          this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
          this.setValue();
          this.removeSelectedAttributes();
          removeClass(this.popupObj.element.querySelectorAll("." + STARTDATE), [STARTDATE, SELECTED4]);
          addClass([ele], STARTDATE);
          this.addSelectedAttributes(ele, this.startValue, true);
          if (ele.classList.contains(OTHERMONTH3)) {
            this.otherMonthSelect(ele, true);
          }
          this.checkMinMaxDays();
        }
      }
      if (event2) {
        leftCalendar = closest(event2.target, "." + LEFTCALENDER);
      }
      if (!isNullOrUndefined(leftCalendar)) {
        this.leftCalendar.children[1].firstElementChild.focus();
      } else {
        if (event2) {
          rightCalendar = event2 && closest(event2.target, "." + RIGHTCALENDER);
        }
        if (!isNullOrUndefined(rightCalendar)) {
          this.rightCalendar.children[1].firstElementChild.focus();
        }
      }
      addClass([ele], SELECTED4);
      this.calendarIconEvent();
      this.updateHeader();
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.selectableDates = function() {
      if (!isNullOrUndefined(this.startValue)) {
        var tdCells = this.calendarElement.querySelectorAll("." + CALENDAR + " td");
        var isStartDate = false;
        if (this.currentView() === this.depth) {
          for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {
            var ele = tdCells_4[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER3)) {
              if (!ele.classList.contains(DISABLED3)) {
                var eleDate = this.getIdValue(null, ele);
                if (+eleDate < +this.startValue) {
                  addClass([ele], [DATEDISABLED, DISABLED3, OVERLAY3]);
                  EventHandler.clearEvents(ele);
                  continue;
                } else {
                  break;
                }
              }
            }
            if (ele.classList.contains(STARTDATE) && !ele.classList.contains(OTHERMONTH3)) {
              isStartDate = true;
              break;
            }
          }
          if (isStartDate) {
            if (!this.previousIcon.classList.contains(DISABLED3)) {
              addClass([this.previousIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
            }
          }
        } else {
          for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {
            var ele = tdCells_5[_a];
            var startMonth = this.startValue.getMonth();
            var startYear = this.startValue.getFullYear();
            var element = this.getIdValue(null, ele);
            if (!this.startButton.element.classList.contains(ACTIVE2) && (this.currentView() === "Year" && element.getMonth() < startMonth && element.getFullYear() <= startYear || this.currentView() === "Decade" && element.getMonth() <= startMonth && element.getFullYear() < startYear)) {
              addClass([ele], [DISABLED3]);
            } else {
              break;
            }
          }
          if (tdCells[0].classList.contains(DISABLED3)) {
            this.previousIconHandler(true);
          } else if (tdCells[tdCells.length - 1].classList.contains(DISABLED3)) {
            this.nextIconHandler(true);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateMinMaxDays = function(calendar) {
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) || this.isMobile && this.endButton.element.classList.contains(ACTIVE2)) {
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
          var startValueSelected = this.removeTimeValueFromDate(this.startValue);
          var minDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.minDays - 1)));
          var maxDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.maxDays - 1)));
          minDate = !isNullOrUndefined(this.minDays) && this.minDays > 0 ? minDate : null;
          maxDate = !isNullOrUndefined(this.maxDays) && this.maxDays > 0 ? maxDate : null;
          if (this.currentView() === "Year") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear(), minDate.getMonth(), 0);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);
          } else if (this.currentView() === "Decade") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear() - 1, 11, 1);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), 0, 1);
          }
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          var maxEle = void 0;
          for (var _i = 0, tdCells_6 = tdCells; _i < tdCells_6.length; _i++) {
            var ele = tdCells_6[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER3)) {
              var eleDate = this.getIdValue(null, ele);
              eleDate = this.removeTimeValueFromDate(eleDate);
              if (!isNullOrUndefined(minDate) && +eleDate === +minDate && ele.classList.contains(DISABLED3)) {
                minDate.setDate(minDate.getDate() + 1);
              }
              if (!ele.classList.contains(DISABLED3)) {
                if (+eleDate <= +startValueSelected) {
                  continue;
                }
                if (!isNullOrUndefined(minDate) && +eleDate < +minDate) {
                  addClass([ele], [DATEDISABLED, DISABLED3, OVERLAY3]);
                  EventHandler.clearEvents(ele);
                }
                if (!isNullOrUndefined(maxDate) && +eleDate > +maxDate) {
                  addClass([ele], [DATEDISABLED, DISABLED3, OVERLAY3]);
                  this.isMaxDaysClicked = true;
                  EventHandler.clearEvents(ele);
                  if (isNullOrUndefined(maxEle) && !ele.classList.contains(OTHERMONTH3)) {
                    maxEle = ele;
                  }
                }
              }
            }
          }
          if (!isNullOrUndefined(maxEle)) {
            if (this.isMobile) {
              if (!this.nextIcon.classList.contains(DISABLED3)) {
                addClass([this.nextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
              }
            } else {
              var calendar_1 = closest(maxEle, "." + RIGHTCALENDER);
              calendar_1 = isNullOrUndefined(calendar_1) ? this.leftCalendar : calendar_1;
              var isLeftCalendar = calendar_1.classList.contains(LEFTCALENDER);
              if (!isLeftCalendar) {
                if (!this.rightCalNextIcon.classList.contains(DISABLED3)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
                }
              } else {
                if (!this.rightCalNextIcon.classList.contains(DISABLED3)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
                }
                if (!this.leftCalNextIcon.classList.contains(DISABLED3)) {
                  addClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
                }
                if (!this.rightCalPrevIcon.classList.contains(DISABLED3)) {
                  addClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
                }
              }
            }
          }
        }
      } else {
        this.isMaxDaysClicked = false;
      }
    };
    DateRangePicker2.prototype.removeTimeValueFromDate = function(value) {
      var dateValue = new Date(value.getFullYear(), value.getMonth(), value.getDate());
      return dateValue;
    };
    DateRangePicker2.prototype.removeClassDisabled = function() {
      var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td." + DATEDISABLED);
      for (var _i = 0, tdCells_7 = tdCells; _i < tdCells_7.length; _i++) {
        var ele = tdCells_7[_i];
        if (ele.classList.contains(DATEDISABLED)) {
          removeClass([ele], [DATEDISABLED, DISABLED3, OVERLAY3]);
          EventHandler.add(ele, "click", this.selectRange, this);
          if (!this.isMobile) {
            EventHandler.add(ele, "mouseover", this.hoverSelection, this);
          }
        }
      }
      if (this.isMobile) {
        if (this.nextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.nextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
        }
        if (this.previousIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.previousIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
        }
      } else {
        if (this.rightCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
        }
        if (this.rightCalPrevIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
        }
        if (this.leftCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED3, OVERLAY3]);
        }
      }
    };
    DateRangePicker2.prototype.updateHeader = function() {
      var format = {
        type: "date",
        skeleton: "yMMMd"
      };
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = range.toString() + " " + this.l10n.getConstant("days");
      } else {
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        }
        if (!isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.startButton.element.textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
        }
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.endButton.element.textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
        }
      }
      if (this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue) || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        if (!this.isMobile) {
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
        }
      }
      if (this.popupObj.element.querySelector("#custom_range")) {
        this.popupObj.element.querySelector("#custom_range").textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
      }
    };
    DateRangePicker2.prototype.removeSelection = function() {
      this.startValue = null;
      this.endValue = null;
      this.setValue();
      this.removeSelectedAttributes();
      if (this.popupObj) {
        if (this.popupObj.element.querySelectorAll("." + SELECTED4).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + SELECTED4), [STARTDATE, ENDDATE, SELECTED4]);
        }
        if (this.popupObj.element.querySelectorAll("." + FOCUSDATE).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + FOCUSDATE), FOCUSDATE);
        }
        if (this.popupObj.element.querySelectorAll("." + RANGEHOVER).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + RANGEHOVER), [RANGEHOVER]);
        }
      }
    };
    DateRangePicker2.prototype.addSelectedAttributes = function(ele, date, isStartDate, sameDate) {
      if (ele) {
        var title = this.globalize.formatDate(date, {
          type: "date",
          skeleton: "full"
        });
        if (!isNullOrUndefined(sameDate) && sameDate) {
          ele.setAttribute("aria-label", "The current start and end date is " + title);
        } else {
          ele.setAttribute("aria-label", "The current " + (isStartDate ? "start" : "end") + " date is " + title);
        }
        ele.setAttribute("aria-selected", "true");
      }
    };
    DateRangePicker2.prototype.removeSelectedAttributes = function() {
      if (this.popupObj) {
        var start = this.popupObj.element.querySelectorAll("." + STARTDATE);
        for (var _i = 0, start_1 = start; _i < start_1.length; _i++) {
          var ele = start_1[_i];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
        var end = this.popupObj.element.querySelectorAll("." + ENDDATE);
        for (var _a = 0, end_1 = end; _a < end_1.length; _a++) {
          var ele = end_1[_a];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
      }
    };
    DateRangePicker2.prototype.updateCalendarElement = function(calendar) {
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.calendarElement = this.leftCalendar;
        this.currentDate = this.leftCalCurrentDate;
        this.previousIcon = this.leftCalPrevIcon;
        this.nextIcon = this.leftCalNextIcon;
      } else {
        this.calendarElement = this.rightCalendar;
        this.currentDate = this.rightCalCurrentDate;
        this.previousIcon = this.rightCalPrevIcon;
        this.nextIcon = this.rightCalNextIcon;
      }
      this.contentElement = calendar.querySelector("." + CONTENT2);
      this.tableBodyElement = select("." + CONTENT2 + " tbody", calendar);
      this.table = calendar.querySelector("." + CONTENT2).getElementsByTagName("table")[0];
      this.headerTitleElement = calendar.querySelector("." + HEADER2 + " ." + TITLE2);
      this.headerElement = calendar.querySelector("." + HEADER2);
    };
    DateRangePicker2.prototype.navPrevMonth = function(e) {
      e.preventDefault();
      var ele = closest(e.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(e.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigatePrevious(e);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.deviceNavigation = function(ele) {
      this.deviceCalendarEvent();
      this.updateRange([this.popupObj.element.querySelector("." + CALENDAR)]);
      if (this.endButton.element.classList.contains(ACTIVE2)) {
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
      }
      if (this.endButton.element.classList.contains(ACTIVE2)) {
        this.selectableDates();
      }
      if (this.currentView() === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.updateControl = function(calendar, customDate) {
      if (customDate === void 0) {
        customDate = null;
      }
      if (calendar.classList.contains(RIGHTCALENDER)) {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+(customDate ? customDate : this.currentDate));
      } else {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.calendarIconEvent();
      if (this.depth === "Month" && this.leftCalendar.querySelector(".e-content").classList.contains("e-month") && this.rightCalendar.querySelector(".e-content").classList.contains("e-month") || this.depth === "Year" && this.leftCalendar.querySelector(".e-content").classList.contains("e-year") && this.rightCalendar.querySelector(".e-content").classList.contains("e-year") || this.depth === "Decade" && this.leftCalendar.querySelector(".e-content").classList.contains("e-decade") && this.rightCalendar.querySelector(".e-content").classList.contains("e-decade") || this.isMobile) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
      this.updateRange([calendar]);
    };
    DateRangePicker2.prototype.navNextMonth = function(event2) {
      event2.preventDefault();
      var ele = closest(event2.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(event2.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigateNext(event2);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.isPopupOpen = function() {
      if (!isNullOrUndefined(this.popupObj) && this.popupObj.element.classList.contains(POPUP2)) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.createRangeHeader = function() {
      var labelContainer = this.createElement("div", {
        className: STARTENDCONTAINER
      });
      if (!this.isMobile) {
        var startLabel = this.createElement("a", {
          className: STARTLABEL
        });
        var endLabel = this.createElement("a", {
          className: ENDLABEL
        });
        var changeIcon = this.createElement("span", {
          className: CHANGEICON
        });
        attributes(startLabel, {
          "aria-atomic": "true",
          "aria-live": "assertive",
          "aria-label": "Start Date",
          "role": "button"
        });
        attributes(endLabel, {
          "aria-atomic": "true",
          "aria-live": "assertive",
          "aria-label": "End Date",
          "role": "button"
        });
        labelContainer.appendChild(startLabel);
        labelContainer.appendChild(changeIcon);
        labelContainer.appendChild(endLabel);
        startLabel.textContent = this.l10n.getConstant("startLabel");
        endLabel.textContent = this.l10n.getConstant("endLabel");
      } else {
        var endBtn = this.createElement("button", {
          className: ENDBUTTON
        });
        var startBtn = this.createElement("button", {
          className: STARTBUTTON
        });
        this.startButton = new Button({
          content: this.l10n.getConstant("startLabel")
        }, startBtn);
        this.endButton = new Button({
          content: this.l10n.getConstant("endLabel")
        }, endBtn);
        labelContainer.appendChild(startBtn);
        labelContainer.appendChild(endBtn);
      }
      return labelContainer;
    };
    DateRangePicker2.prototype.disableInput = function() {
      if (this.strictMode) {
        if (!isNullOrUndefined(this.previousStartValue) && !isNullOrUndefined(this.previousEndValue)) {
          this.startValue = this.previousStartValue;
          this.endValue = this.previousEndValue;
          this.setValue();
          this.updateInput();
        }
      } else {
        this.updateInput();
        this.clearRange();
        this.setProperties({
          startDate: null
        }, true);
        this.setProperties({
          endDate: null
        }, true);
        this.startValue = null;
        this.endValue = null;
        this.setValue();
        this.errorClass();
      }
      this.setProperties({
        enabled: false
      }, true);
      Input.setEnabled(this.enabled, this.inputElement);
      this.bindEvents();
    };
    DateRangePicker2.prototype.validateMinMax = function() {
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (!(this.min <= this.max)) {
        this.disableInput();
        return;
      }
      if (!isNullOrUndefined(this.minDays) && !isNullOrUndefined(this.maxDays)) {
        if (this.maxDays > 0 && this.minDays > 0 && this.minDays > this.maxDays) {
          this.maxDays = null;
        }
      }
      if (!isNullOrUndefined(this.minDays) && this.minDays < 0) {
        this.minDays = null;
      }
      if (!isNullOrUndefined(this.maxDays) && this.maxDays < 0) {
        this.maxDays = null;
      }
    };
    DateRangePicker2.prototype.validateRangeStrict = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (+this.startValue <= +this.min) {
          this.startValue = this.min;
          this.setValue();
        } else if (+this.startValue >= +this.min && +this.startValue >= +this.max) {
          this.startValue = this.max;
        }
      }
      if (!isNullOrUndefined(this.endValue)) {
        if (+this.endValue > +this.max) {
          this.endValue = this.max;
          this.setValue();
        } else if (+this.endValue < +this.min) {
          this.endValue = this.min;
          this.setValue();
        }
      }
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateRange = function() {
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateMinMaxDays = function() {
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 && !(range >= this.minDays)) {
          if (this.strictMode) {
            var date = /* @__PURE__ */ new Date(+this.startValue);
            date.setDate(date.getDate() + (this.minDays - 1));
            if (+date > +this.max) {
              this.endValue = this.max;
              this.setValue();
            } else {
              this.endValue = date;
              this.setValue();
            }
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
        if (!isNullOrUndefined(this.maxDays) && this.maxDays > 0 && !(range <= this.maxDays)) {
          if (this.strictMode) {
            this.endValue = /* @__PURE__ */ new Date(+this.startValue);
            this.endValue.setDate(this.endValue.getDate() + (this.maxDays - 1));
            this.setValue();
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
      }
    };
    DateRangePicker2.prototype.renderCalendar = function() {
      this.calendarElement = this.createElement("div");
      this.calendarElement.classList.add(CALENDAR);
      if (this.enableRtl) {
        this.calendarElement.classList.add(RTL2);
      }
      attributes(this.calendarElement, {
        "data-role": "calendar"
      });
      _super.prototype.createHeader.call(this);
      _super.prototype.createContent.call(this);
    };
    DateRangePicker2.prototype.isSameMonth = function(start, end) {
      if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameYear = function(start, end) {
      if (start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameDecade = function(start, end) {
      var startYear = start.getFullYear();
      var endYear = end.getFullYear();
      if (startYear - startYear % 10 === endYear - endYear % 10) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.startMonthCurrentDate = function() {
      if (this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.max);
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      } else if (this.currentDate < this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
    };
    DateRangePicker2.prototype.selectNextMonth = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameMonth(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setDate(1);
        var month = this.currentDate.getMonth() + 1;
        this.currentDate.setMonth(month);
      }
    };
    DateRangePicker2.prototype.selectNextYear = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameYear(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setMonth(0);
        var yr = this.currentDate.getFullYear() + 1;
        this.currentDate.setFullYear(yr);
        return;
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setMonth(0);
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 1);
      }
    };
    DateRangePicker2.prototype.selectNextDecade = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameDecade(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        var decyr = this.currentDate.getFullYear() + 10;
        this.currentDate.setFullYear(decyr);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 10);
      }
    };
    DateRangePicker2.prototype.selectStartMonth = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.max) && this.isSameMonth(this.startValue, this.max)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.max);
          this.currentDate.setDate(1);
          this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        } else if (!(this.startValue >= this.min && this.startValue <= this.max) || this.isDateDisabled(this.startValue)) {
          this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        } else {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
      } else {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.startMonthCurrentDate();
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
      this.startMonthCurrentDate();
    };
    DateRangePicker2.prototype.createCalendar = function() {
      var calendarContainer = this.createElement("div", {
        className: CALENDARCONTAINER
      });
      if (!this.isMobile) {
        this.selectStartMonth();
        this.renderCalendar();
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        this.calendarElement.classList.add(LEFTCALENDER);
        this.leftCalPrevIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + PREVICON2);
        this.leftCalNextIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + NEXTICON2);
        this.leftTitle = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + LEFTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER2).appendChild(this.leftCalNextIcon);
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER2).appendChild(this.leftCalPrevIcon);
        prepend([this.leftCalPrevIcon], this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER2));
        this.leftCalendar = this.calendarElement;
        var leftContainer = this.createElement("div", {
          className: LEFTCONTAINER
        });
        var rightContainer = this.createElement("div", {
          className: RIGHTCONTAINER
        });
        leftContainer.appendChild(this.leftCalendar);
        calendarContainer.appendChild(leftContainer);
        if (!this.isMobile) {
          EventHandler.add(this.leftTitle, "click", this.leftNavTitle, this);
        }
        if (this.start === "Month") {
          this.selectNextMonth();
        }
        if (this.start === "Year") {
          this.selectNextYear();
        }
        if (this.start === "Decade") {
          this.selectNextDecade();
        }
        this.renderCalendar();
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        addClass([this.calendarElement], RIGHTCALENDER);
        this.rightCalendar = this.calendarElement;
        removeClass([this.leftCalendar && this.leftCalendar.querySelector(".e-content tbody")], "e-zoomin");
        removeClass([this.rightCalendar && this.rightCalendar.querySelector(".e-content tbody")], "e-zoomin");
        this.rightCalPrevIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + PREVICON2);
        this.rightCalNextIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + NEXTICON2);
        this.rightTitle = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("table").setAttribute("tabindex", "0");
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER2).appendChild(this.rightCalNextIcon);
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER2).appendChild(this.rightCalPrevIcon);
        prepend([this.rightCalPrevIcon], this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER2));
        rightContainer.appendChild(this.rightCalendar);
        calendarContainer.appendChild(rightContainer);
        if (!this.isMobile) {
          EventHandler.add(this.rightTitle, "click", this.rightNavTitle, this);
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
        _super.prototype.validateDate.call(this);
        _super.prototype.minMaxUpdate.call(this);
        _super.prototype.render.call(this);
        var prevIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + PREVICON2);
        var nextIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + NEXTICON2);
        remove(this.calendarElement.querySelector("." + CALENDAR + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2).appendChild(nextIcon);
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2).appendChild(prevIcon);
        prepend([prevIcon], this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2));
        this.deviceCalendar = this.calendarElement;
        calendarContainer.appendChild(this.calendarElement);
        this.headerTitleElement = this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2 + " ." + TITLE2);
      }
      return calendarContainer;
    };
    DateRangePicker2.prototype.leftNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.leftCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.calendarNavigation = function(e, element) {
      this.table = element.querySelector("table");
      this.headerTitleElement = element.querySelector(".e-title");
      this.tableBodyElement = element.querySelector("tbody");
      this.tableHeadElement = element.querySelector("thead");
      this.contentElement = element.querySelector(".e-content");
      this.updateCalendarElement(element);
      _super.prototype.navigateTitle.call(this, e);
      this.updateNavIcons();
    };
    DateRangePicker2.prototype.rightNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.rightCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.clickEventEmitter = function(e) {
      if (!this.isMobile) {
        if (closest(e.target, ".e-calendar.e-left-calendar")) {
          this.calendarElement = this.leftCalendar;
          this.updateCalendarElement(this.leftCalendar);
        } else {
          this.calendarElement = this.rightCalendar;
          this.updateCalendarElement(this.rightCalendar);
        }
      }
    };
    DateRangePicker2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    DateRangePicker2.prototype.getCalendarView = function(view) {
      if (view === "Year") {
        return "Year";
      } else if (view === "Decade") {
        return "Decade";
      } else {
        return "Month";
      }
    };
    DateRangePicker2.prototype.navigatedEvent = function(e) {
      this.trigger("navigated", this.navigatedArgs);
      if (!isNullOrUndefined(this.popupObj)) {
        var element = void 0;
        var view = this.getCalendarView(this.currentView());
        if (this.isMobile) {
          if (view === this.depth) {
            this.bindCalendarCellEvents();
            this.deviceNavigation();
            this.removeFocusedDate();
            this.checkMinMaxDays();
          } else {
            this.selectableDates();
          }
        } else {
          if (!this.isMobile && view === this.depth) {
            element = this.calendarElement.classList.contains("e-left-calendar") ? this.leftCalendar : this.rightCalendar;
            if (element === this.leftCalendar && (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown))) {
              this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.leftCalCurrentDate;
              this.updateCalendarElement(this.leftCalendar);
              this.updateControl(this.leftCalendar);
              this.updateCalendarElement(this.rightCalendar);
              _super.prototype.navigateTo.call(this, view, this.rightCalCurrentDate);
              var customDate = this.rightCalCurrentDate ? this.rightCalCurrentDate : this.currentDate;
              this.updateControl(this.rightCalendar, customDate);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            } else if (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown)) {
              this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.rightCalCurrentDate;
              this.updateCalendarElement(this.rightCalendar);
              this.updateControl(this.rightCalendar);
              this.updateCalendarElement(this.leftCalendar);
              if (this.startValue && isNullOrUndefined(this.endValue)) {
                if (view === "Month" && this.startValue.getMonth() < this.rightCalCurrentDate.getMonth() && this.startValue.getFullYear() <= this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else if (view === "Year" && this.startValue.getFullYear() < this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else {
                  _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
                }
              } else {
                _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
              }
              this.updateControl(this.leftCalendar);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            }
            this.checkMinMaxDays();
          } else {
            this.updateNavIcons();
            this.calendarIconEvent();
          }
        }
      }
    };
    DateRangePicker2.prototype.createControl = function() {
      var controlContainer = this.createElement("div", {
        className: RANGECONTAINER
      });
      var headerContainer = this.createElement("div", {
        className: RANGEHEADER
      });
      if (this.isMobile && this.fullScreenMode) {
        var modelHeaderIconWrapper = this.createElement("div", {
          className: "e-model-header-wrapper"
        });
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelRangeCloseHandler, this);
        var modelApplyButton = this.createElement("span", {
          className: "e-apply"
        });
        EventHandler.add(modelApplyButton, "mousedown touchstart", this.applyFunction, this);
        modelHeaderIconWrapper.appendChild(modelCloseIcon);
        modelHeaderIconWrapper.appendChild(modelApplyButton);
        headerContainer.appendChild(modelHeaderIconWrapper);
      }
      var labelContainer = this.createRangeHeader();
      headerContainer.appendChild(labelContainer);
      var daySpan = this.createElement("div", {
        className: DAYSPAN
      });
      attributes(daySpan, {
        "aria-label": "Selected Days"
      });
      daySpan.textContent = this.l10n.getConstant("selectedDays");
      headerContainer.appendChild(daySpan);
      var separator = this.createElement("div", {
        className: SEPARATOR
      });
      var calendarContainer = this.createCalendar();
      controlContainer.appendChild(headerContainer);
      controlContainer.appendChild(separator);
      controlContainer.appendChild(calendarContainer);
      var footerSection = this.createElement("div", {
        className: FOOTER2
      });
      var cancelBtn = this.createElement("button", {
        className: CANCEL + " " + FLAT2 + " " + CSS2
      });
      var applyBtn = this.createElement("button");
      addClass([applyBtn], [APPLY, FLAT2, PRIMARY2, CSS2]);
      footerSection.appendChild(applyBtn);
      footerSection.appendChild(cancelBtn);
      var enable = !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue);
      this.cancelButton = new Button({
        content: this.l10n.getConstant("cancelText")
      }, cancelBtn);
      this.applyButton = new Button({
        content: this.l10n.getConstant("applyText"),
        disabled: !enable
      }, applyBtn);
      EventHandler.add(applyBtn, "click", this.applyFunction, this);
      EventHandler.add(cancelBtn, "click", this.cancelFunction, this);
      this.popupWrapper.appendChild(controlContainer);
      if (!this.isMobile) {
        if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
          this.createPresets();
          this.listRippleEffect();
          addClass([controlContainer], RANGEBORDER);
          addClass([this.popupWrapper], "e-preset-wrapper");
          var presets = this.popupWrapper.querySelector("." + PRESETS);
          presets.style.height = this.popupWrapper.querySelector("." + RANGECONTAINER).getBoundingClientRect().height + "px";
        }
      }
      this.popupWrapper.appendChild(footerSection);
      if (this.isMobile) {
        this.deviceHeaderUpdate();
      }
      this.renderPopup();
    };
    DateRangePicker2.prototype.modelRangeCloseHandler = function(e) {
      this.hide();
    };
    DateRangePicker2.prototype.cancelFunction = function(eve) {
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      eve.preventDefault();
      if (this.isKeyPopup) {
        this.inputElement.focus();
        this.isKeyPopup = false;
      }
      this.startValue = null;
      this.endValue = null;
      this.removeSelection();
      this.hide(eve);
    };
    DateRangePicker2.prototype.deviceHeaderUpdate = function() {
      if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.endButton.element.setAttribute("disabled", "");
        this.startButton.element.classList.add(ACTIVE2);
      } else if (!isNullOrUndefined(this.startValue)) {
        this.startButton.element.classList.add(ACTIVE2);
      }
    };
    DateRangePicker2.prototype.applyFunction = function(eve) {
      var isValueChanged = false;
      if (eve.type !== "touchstart") {
        eve.preventDefault();
      }
      if (this.closeEventArgs && this.closeEventArgs.cancel) {
        this.startValue = this.popupWrapper.querySelector(".e-start-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-start-date"));
        this.endValue = this.popupWrapper.querySelector(".e-end-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-end-date"));
        this.setValue();
      }
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      if (eve.type !== "touchstart" && this.closeEventArgs && !this.closeEventArgs.cancel) {
        eve.preventDefault();
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        if (!(this.previousStartValue && this.previousEndValue && this.startValue.getDate() === this.previousStartValue.getDate() && this.startValue.getMonth() === this.previousStartValue.getMonth() && this.startValue.getFullYear() === this.previousStartValue.getFullYear() && this.endValue.getDate() === this.previousEndValue.getDate() && this.endValue.getMonth() === this.previousEndValue.getMonth() && this.endValue.getFullYear() === this.previousEndValue.getFullYear())) {
          Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
        this.previousEleValue = this.inputElement.value;
        if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
          isValueChanged = true;
        }
        this.changeTrigger(eve);
        this.hide(eve ? eve : null);
        this.errorClass();
        isValueChanged = true;
      } else {
        this.hide(eve ? eve : null);
      }
      if (!closest(eve.target, "." + INPUTCONTAINER2) && !isValueChanged) {
        this.focusOut();
      }
      if (!this.isMobile) {
        this.isKeyPopup = false;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.children[1].focus();
          this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
          this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
            eventName: "keydown",
            keyConfigs: this.keyInputConfigs,
            keyAction: this.popupKeyActionHandle.bind(this)
          });
        }
      }
    };
    DateRangePicker2.prototype.onMouseClick = function(event2, item) {
      if (event2.type === "touchstart") {
        return;
      }
      var target = item || event2.target;
      var li = closest(target, "." + LISTCLASS);
      var isClick = li && li.classList.contains(ACTIVE2);
      if (li && li.classList.contains(LISTCLASS)) {
        this.setListSelection(li, event2);
      }
      this.preventFocus = true;
      this.inputElement.focus();
      if (!this.isMobile) {
        this.preventFocus = true;
        if (li && li.classList.contains(LISTCLASS) && li.getAttribute("id") === "custom_range") {
          this.leftCalendar.children[1].firstElementChild.focus();
        } else {
          if (!isClick && event2.type === "keydown") {
            this.inputElement.focus();
          }
        }
      }
    };
    DateRangePicker2.prototype.onMouseOver = function(event2) {
      var li = closest(event2.target, "." + LISTCLASS);
      if (li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER)) {
        addClass([li], HOVER);
      }
    };
    DateRangePicker2.prototype.onMouseLeave = function(event2) {
      var item = closest(event2.target, "." + HOVER);
      if (!isNullOrUndefined(item)) {
        removeClass([item], HOVER);
      }
    };
    DateRangePicker2.prototype.setListSelection = function(li, event2) {
      if (li && (!li.classList.contains(ACTIVE2) || this.isMobile && li.classList.contains(ACTIVE2))) {
        if (this.isMobile && li.classList.contains(ACTIVE2)) {
          this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
          var values_1 = this.presetsItem[this.activeIndex];
          if (values_1.id === "custom_range") {
            this.renderCustomPopup();
            return;
          }
          return;
        }
        this.removeListSelection();
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        addClass([li], ACTIVE2);
        li.setAttribute("aria-selected", "true");
        var values = this.presetsItem[this.activeIndex];
        if (values.id === "custom_range") {
          this.renderCustomPopup();
        } else {
          this.applyPresetRange(values, event2);
        }
      }
    };
    DateRangePicker2.prototype.removeListSelection = function() {
      var item = this.presetElement.querySelector("." + ACTIVE2);
      if (!isNullOrUndefined(item)) {
        removeClass([item], ACTIVE2);
        item.removeAttribute("aria-selected");
      }
    };
    DateRangePicker2.prototype.setValue = function() {
      this.modelValue = [this.startValue, this.endValue];
    };
    DateRangePicker2.prototype.applyPresetRange = function(values, e) {
      this.hide(null);
      this.presetsItem[this.presetsItem.length - 1].start = null;
      this.presetsItem[this.presetsItem.length - 1].end = null;
      this.startValue = values.start;
      this.endValue = values.end;
      this.setValue();
      this.refreshControl();
      this.trigger("select", this.rangeArgs(e));
      this.changeTrigger(e);
      this.previousEleValue = this.inputElement.value;
      this.isCustomRange = false;
      this.leftCalendar = this.rightCalendar = null;
      if (this.isKeyPopup) {
        this.isRangeIconClicked = false;
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.showPopup = function(element, event2) {
      this.presetHeight();
      if (this.zIndex === 1e3) {
        this.popupObj.show(null, this.element);
      } else {
        this.popupObj.show(null, null);
      }
      if (this.isMobile) {
        this.popupObj.refreshPosition();
      }
    };
    DateRangePicker2.prototype.renderCustomPopup = function() {
      this.isCustomWindow = true;
      this.popupObj.hide();
      this.popupWrapper = this.createElement("div", {
        id: this.element.id + "_popup",
        className: ROOT3 + " " + POPUP2
      });
      this.renderControl();
      this.openEventArgs.appendTo.appendChild(this.popupWrapper);
      this.showPopup();
      this.isCustomRange = true;
      if (!this.isMobile) {
        this.calendarFocus();
      }
    };
    DateRangePicker2.prototype.listRippleEffect = function() {
      for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {
        var li = _a[_i];
        rippleEffect(li);
      }
    };
    DateRangePicker2.prototype.createPresets = function() {
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        this.presetElement = this.createElement("div", {
          className: PRESETS,
          attrs: {
            "tabindex": "0"
          }
        });
        var listTag = ListBase.createList(this.createElement, this.presetsItem, null, true);
        attributes(listTag, {
          "role": "listbox",
          "aria-hidden": "false",
          "id": this.element.id + "_options",
          "tabindex": "0",
          "aria-label": "daterangepicker-preset"
        });
        this.presetElement.appendChild(listTag);
        this.popupWrapper.appendChild(this.presetElement);
        var customElement = this.presetElement.querySelector("#custom_range");
        if (!isNullOrUndefined(customElement)) {
          customElement.textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
        }
        this.liCollections = this.presetElement.querySelectorAll("." + LISTCLASS);
        this.wireListEvents();
        if (this.isMobile) {
          if (this.fullScreenMode) {
            var modelWrapper = createElement("div", {
              className: "e-range-mob-popup-wrap"
            });
            var modelHeader = this.createElement("div", {
              className: "e-model-header"
            });
            var modelTitleSpan = this.createElement("span", {
              className: "e-model-title"
            });
            modelTitleSpan.textContent = "Select Preset";
            var modelCloseIcon = this.createElement("span", {
              className: "e-popup-close"
            });
            EventHandler.add(modelCloseIcon, "mousedown touchstart", this.modelRangeCloseHandler, this);
            var presetContent = this.presetElement;
            modelHeader.appendChild(modelCloseIcon);
            modelHeader.appendChild(modelTitleSpan);
            modelWrapper.appendChild(modelHeader);
            modelWrapper.appendChild(presetContent);
            this.popupWrapper.insertBefore(modelWrapper, this.popupWrapper.firstElementChild);
            this.presetElement.style.width = "100%";
          } else {
            this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + "px";
          }
        }
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex > -1) {
          addClass([this.liCollections[this.activeIndex]], ACTIVE2);
        }
      }
    };
    DateRangePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.presetElement, "click", this.onMouseClick, this);
      if (!this.isMobile) {
        EventHandler.add(this.presetElement, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.presetElement, "mouseout", this.onMouseLeave, this);
      }
    };
    DateRangePicker2.prototype.unWireListEvents = function() {
      if (!isNullOrUndefined(this.presetElement)) {
        EventHandler.remove(this.presetElement, "click touchstart", this.onMouseClick);
        if (!this.isMobile) {
          EventHandler.remove(this.presetElement, "mouseover", this.onMouseOver);
          EventHandler.remove(this.presetElement, "mouseout", this.onMouseLeave);
        }
      }
    };
    DateRangePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.popupWrapper.classList.add("e-control");
      var popupWidth = this.popupWrapper.getBoundingClientRect().width;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass.trim() !== "") {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (this.isMobile && this.isCustomWindow) {
        this.modal = this.createElement("div");
        document.body.appendChild(this.modal);
      }
      this.popupObj = new Popup(this.popupWrapper, {
        relateTo: this.isMobile && this.isCustomWindow ? document.body : !isNullOrUndefined(this.targetElement) ? this.targetElement : this.inputWrapper.container,
        position: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? {
          X: "left",
          Y: "bottom"
        } : {
          X: "center",
          Y: "center"
        } : this.enableRtl ? {
          X: "left",
          Y: "bottom"
        } : {
          X: "right",
          Y: "bottom"
        },
        offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,
        offsetY: OFFSETVALUE2,
        collision: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? {
          X: "fit"
        } : {
          X: "fit",
          Y: "fit"
        } : {
          X: "fit",
          Y: "flip"
        },
        targetType: this.isMobile && this.isCustomWindow ? "container" : "relative",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        open: function() {
          if (_this.isMobile && _this.fullScreenMode) {
            _this.iconRangeRight = _this.calendarElement && window.getComputedStyle(_this.calendarElement.querySelector(".e-header.e-month .e-prev")).cssFloat;
            if (_this.iconRangeRight) {
              _this.touchRangeModule = new Touch(_this.calendarElement.querySelector(".e-content.e-month"), {
                swipe: _this.dateRangeSwipeHandler.bind(_this)
              });
              EventHandler.add(_this.calendarElement.querySelector(".e-content.e-month"), "touchstart", _this.touchStartRangeHandler, _this);
            }
          }
          attributes(_this.inputElement, {
            "aria-expanded": "true",
            "aria-owns": _this.element.id,
            "aria-controls": _this.inputElement.id
          });
          if (_this.value) {
            attributes(_this.inputElement, {
              "aria-activedescendant": _this.inputElement.id
            });
          } else {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          addClass([_this.inputWrapper.buttons[0]], ACTIVE2);
          if (!_this.isMobile) {
            if (_this.cancelButton) {
              _this.btnKeyboardModule = new KeyboardEvents(_this.cancelButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: {
                  tab: "tab",
                  altRightArrow: "alt+rightarrow",
                  altLeftArrow: "alt+leftarrow"
                }
              });
              _this.btnKeyboardModule = new KeyboardEvents(_this.applyButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: {
                  altRightArrow: "alt+rightarrow",
                  altLeftArrow: "alt+leftarrow"
                }
              });
            }
            if (!isNullOrUndefined(_this.leftCalendar)) {
              if (!_this.isRangeIconClicked) {
                _this.calendarFocus();
              }
            }
            if (!isNullOrUndefined(_this.presetElement)) {
              _this.keyInputConfigs = extend(_this.keyInputConfigs, _this.keyConfigs);
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.presetKeyActionHandler.bind(_this),
                keyConfigs: _this.keyInputConfigs
              });
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: {
                  altRightArrow: "alt+rightarrow",
                  altLeftArrow: "alt+leftarrow"
                }
              });
              if (isNullOrUndefined(_this.leftCalendar)) {
                _this.preventBlur = true;
                _this.presetElement.focus();
              } else {
                _this.presetElement.setAttribute("tabindex", "-1");
              }
            }
            _this.popupKeyBoardHandler();
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.add(document, "keydown", _this.popupCloseHandler, _this);
          }
        },
        close: function() {
          attributes(_this.inputElement, {
            "aria-expanded": "false"
          });
          _this.inputElement.removeAttribute("aria-owns");
          _this.inputElement.removeAttribute("aria-controls");
          _this.inputElement.removeAttribute("aria-activedescendant");
          removeClass([_this.inputWrapper.buttons[0]], ACTIVE2);
          if (_this.isRangeIconClicked) {
            _this.inputWrapper.container.children[1].focus();
          }
          if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label)) {
            _this.unWireListEvents();
          }
          if (!isNullOrUndefined(_this.popupObj)) {
            if (!isNullOrUndefined(_this.popupObj.element.parentElement)) {
              detach(_this.popupObj.element);
            }
            _this.popupObj.destroy();
            _this.popupObj = null;
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.remove(document, "keydown", _this.popupCloseHandler);
          }
        },
        targetExitViewport: function() {
          var popupEle = _this.popupObj && _this.popupObj.element;
          if (!Browser.isDevice && popupEle && popupEle.getBoundingClientRect().height < window.innerHeight) {
            _this.hide();
          }
        }
      });
      if (this.isMobile) {
        this.popupObj.element.classList.add(DEVICE2);
        if (!this.isMobile) {
          this.popupObj.element.classList.add("e-bigger");
        }
      }
      if (this.isMobile && this.isCustomWindow) {
        addClass([this.modal], [DEVICE2, ROOT3, "e-range-modal"]);
        document.body.className += " " + OVERFLOW2;
        this.modal.style.display = "block";
      }
      EventHandler.add(document, "mousedown touchstart", this.documentHandler, this);
    };
    DateRangePicker2.prototype.dateRangeSwipeHandler = function(e) {
      var direction = 0;
      if (this.iconRangeRight === "left") {
        switch (e.swipeDirection) {
          case "Left":
            direction = 1;
            break;
          case "Right":
            direction = -1;
            break;
          default:
            break;
        }
      } else {
        switch (e.swipeDirection) {
          case "Up":
            direction = 1;
            break;
          case "Down":
            direction = -1;
            break;
          default:
            break;
        }
      }
      if (this.touchRangeStart) {
        if (direction === 1) {
          this.navigateNext(e);
        } else if (direction === -1) {
          this.navigatePrevious(e);
        }
        this.touchRangeStart = false;
      }
    };
    DateRangePicker2.prototype.touchStartRangeHandler = function(e) {
      this.touchRangeStart = true;
    };
    DateRangePicker2.prototype.popupCloseHandler = function(e) {
      switch (e.keyCode) {
        case 27:
          this.hide(e);
          break;
      }
    };
    DateRangePicker2.prototype.calendarFocus = function() {
      var startDate = this.popupObj && this.popupObj.element.querySelector("." + STARTDATE);
      if (startDate) {
        var ele = closest(startDate, "." + RIGHTCALENDER);
        ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          ele.children[1].firstElementChild.focus();
        }
        addClass([startDate], FOCUSDATE);
      } else {
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          this.leftCalendar.children[1].firstElementChild.focus();
        }
      }
    };
    DateRangePicker2.prototype.presetHeight = function() {
      var presets = this.popupObj && this.popupObj.element.querySelector("." + PRESETS);
      var rangeContainer = this.popupObj && this.popupObj.element.querySelector("." + RANGECONTAINER);
      if (!isNullOrUndefined(presets) && !isNullOrUndefined(rangeContainer)) {
        presets.style.height = rangeContainer.getBoundingClientRect().height + "px";
      }
    };
    DateRangePicker2.prototype.presetKeyActionHandler = function(e) {
      switch (e.action) {
        case "moveDown":
          this.listMoveDown(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "moveUp":
          this.listMoveUp(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "enter":
          {
            var hvrItem = this.getHoverLI();
            var actItem = this.getActiveLI();
            if (!isNullOrUndefined(this.leftCalendar) && !isNullOrUndefined(actItem)) {
              if (isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem) && actItem === hvrItem) {
                this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);
                var values = this.presetsItem[this.activeIndex];
                if (values.id === "custom_range") {
                  this.calendarFocus();
                  actItem.classList.remove(HOVER);
                  e.preventDefault();
                  return;
                }
              }
            }
            if (!isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem)) {
              this.onMouseClick(e, hvrItem || actItem);
            }
            e.preventDefault();
          }
          break;
        case "tab":
          if (this.leftCalendar) {
            var item = this.getHoverLI();
            if (!isNullOrUndefined(item)) {
              item.classList.remove(HOVER);
            }
          } else {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.listMoveDown = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER);
          addClass([li], HOVER);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER);
        }
      } else {
        addClass([this.liCollections[0]], HOVER);
      }
    };
    DateRangePicker2.prototype.listMoveUp = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER);
          addClass([li], HOVER);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER);
        }
      }
    };
    DateRangePicker2.prototype.getHoverLI = function() {
      var item = this.presetElement.querySelector("." + HOVER);
      return item;
    };
    DateRangePicker2.prototype.getActiveLI = function() {
      var item = this.presetElement.querySelector("." + ACTIVE2);
      return item;
    };
    DateRangePicker2.prototype.popupKeyBoardHandler = function() {
      this.popupKeyboardModule = new KeyboardEvents(this.popupWrapper, {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: {
          escape: "escape"
        }
      });
      this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
      this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: this.keyInputConfigs
      });
    };
    DateRangePicker2.prototype.setScrollPosition = function() {
      var listHeight = this.presetElement.getBoundingClientRect().height;
      var hover = this.presetElement.querySelector("." + HOVER);
      var active = this.presetElement.querySelector("." + ACTIVE2);
      var element = !isNullOrUndefined(hover) ? hover : active;
      if (!isNullOrUndefined(element)) {
        var nextEle = element.nextElementSibling;
        var height = nextEle ? nextEle.offsetTop : element.offsetTop;
        var liHeight = element.getBoundingClientRect().height;
        if (height + element.offsetTop > listHeight) {
          this.presetElement.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height;
        } else {
          this.presetElement.scrollTop = 0;
        }
      }
    };
    DateRangePicker2.prototype.popupKeyActionHandle = function(e) {
      var presetElement = closest(e.target, "." + PRESETS);
      switch (e.action) {
        case "escape":
          if (this.isPopupOpen()) {
            if (this.isKeyPopup) {
              this.inputElement.focus();
              this.isKeyPopup = false;
            }
            this.hide(e);
          } else {
            this.inputWrapper.container.children[1].blur();
          }
          break;
        case "enter":
          if (!this.isPopupOpen()) {
            this.show(null, e);
          } else {
            this.inputWrapper.container.children[1].focus();
          }
          break;
        case "tab":
          this.hide(e);
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.cancelButton.element.focus();
          } else {
            if (document.activeElement === this.cancelButton.element && this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else {
            if (document.activeElement === this.applyButton.element && this.applyButton.element.disabled !== true) {
              this.cancelButton.element.focus();
            } else {
              if (!isNullOrUndefined(this.presetElement) && document.activeElement === this.cancelButton.element) {
                this.presetElement.focus();
              } else {
                this.rightCalendar.children[1].firstElementChild.focus();
              }
            }
          }
          e.preventDefault();
          break;
      }
    };
    DateRangePicker2.prototype.documentHandler = function(e) {
      if (isNullOrUndefined(this.popupObj)) {
        return;
      }
      var target = e.target;
      if (!this.inputWrapper.container.contains(target) || !isNullOrUndefined(this.popupObj) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && e.type !== "mousedown") {
        if (e.type !== "touchstart" && (e.type === "mousedown" || this.closeEventArgs && !this.closeEventArgs.cancel)) {
          e.preventDefault();
        }
      }
      if ((isNullOrUndefined(this.targetElement) || !isNullOrUndefined(this.targetElement) && !(target === this.targetElement)) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && !(closest(target, "." + INPUTCONTAINER2) === this.inputWrapper.container) && !(closest(target, ".e-daterangepicker.e-popup") && !target.classList.contains("e-day")) && !target.classList.contains("e-dlg-overlay")) {
        this.preventBlur = false;
        if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
          this.applyFunction(e);
          if (!this.isMobile) {
            this.isRangeIconClicked = false;
          }
        }
      }
    };
    DateRangePicker2.prototype.createInput = function() {
      if (this.fullScreenMode && this.isMobile) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        floatLabelType: this.floatLabelType,
        element: this.inputElement,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [DATERANGEICON]
      }, this.createElement);
      attributes(this.inputElement, {
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      });
      Input.addAttributes({
        "aria-label": "select",
        "role": "button"
      }, this.inputWrapper.buttons[0]);
      this.setEleWidth(this.width);
      addClass([this.inputWrapper.container], DATERANGEWRAPPER);
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, {
          "name": this.element.id
        });
      }
      if (this.inputElement.type === "hidden") {
        this.inputWrapper.container.style.display = "none";
      }
      this.refreshControl();
      this.previousEleValue = this.inputElement.value;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.startCopy = this.startDate;
      this.endCopy = this.endDate;
    };
    DateRangePicker2.prototype.setEleWidth = function(width) {
      if (typeof width === "string") {
        this.inputWrapper.container.style.width = this.width;
      } else if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DateRangePicker2.prototype.adjustLongHeaderWidth = function() {
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.popupWrapper], DAYHEADERLONG2);
      }
    };
    DateRangePicker2.prototype.refreshControl = function() {
      this.validateMinMax();
      if (this.strictMode) {
        this.validateRangeStrict();
      }
      var isDisabled = this.disabledDates();
      if (this.strictMode && isDisabled) {
        this.startValue = this.previousStartValue;
        this.setProperties({
          startDate: this.startValue
        }, true);
        this.endValue = this.previousEndValue;
        this.setProperties({
          endDate: this.endValue
        }, true);
        this.setValue();
      }
      this.updateInput();
      if (!this.strictMode) {
        this.validateRange();
      }
      if (!this.strictMode && isDisabled) {
        this.clearRange();
      }
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isDisabled && !isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
        this.disabledDateRender();
      }
      this.errorClass();
      this.previousStartValue = isNullOrUndefined(this.startValue) || isNaN(+this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
      this.previousEndValue = isNullOrUndefined(this.endValue) || isNaN(+this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
    };
    DateRangePicker2.prototype.updateInput = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var formatOption = {
          format: this.formatString,
          type: "date",
          skeleton: "yMd"
        };
        var startDate = this.globalize.formatDate(this.startValue, formatOption);
        var endDate = this.globalize.formatDate(this.endValue, formatOption);
        Input.setValue(startDate + " " + this.separator + " " + endDate, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        Input.setValue(this.invalidValueString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DateRangePicker2.prototype.checkInvalidRange = function(value) {
      if (!isNullOrUndefined(value)) {
        var invalid = false;
        var startinvalue = void 0;
        var endinvalue = void 0;
        var startString = null;
        var endString = null;
        var valueString = null;
        var startObject = false;
        var endObject = false;
        var invalidobject = false;
        if (typeof value === "string") {
          var range = value.split(" " + this.separator + " ");
          if (range.length === 2) {
            startString = range[0];
            endString = range[1];
          } else {
            invalid = true;
            valueString = value;
          }
        } else {
          if (value.length > 0) {
            startinvalue = value[0];
            endinvalue = value[1];
          } else {
            startinvalue = value.start;
            endinvalue = value.end;
          }
          if (!(startinvalue instanceof Date) && typeof startinvalue !== "object") {
            startString = this.getstringvalue(startinvalue);
          } else if (startinvalue instanceof Date) {
            startObject = true;
          } else if (!isNullOrUndefined(startinvalue)) {
            invalidobject = true;
          }
          if (!(endinvalue instanceof Date) && typeof endinvalue !== "object") {
            endString = this.getstringvalue(endinvalue);
          } else if (endinvalue instanceof Date) {
            endObject = true;
          } else if (!isNullOrUndefined(endinvalue)) {
            invalidobject = true;
          }
        }
        if (isNullOrUndefined(startString) && !startObject && !isNullOrUndefined(endString) || !isNullOrUndefined(startString) && !endObject && isNullOrUndefined(endString)) {
          invalid = true;
        }
        if (invalidobject) {
          startString = endString = valueString = null;
          invalid = true;
        }
        if (startString) {
          invalid = invalid || this.checkInvalidValue(startString);
        }
        if (endString) {
          invalid = invalid || this.checkInvalidValue(endString);
        }
        if (invalid) {
          if (startObject && !invalidobject) {
            startString = startinvalue.toLocaleDateString();
          }
          if (endObject && !invalidobject) {
            endString = endinvalue.toLocaleDateString();
          }
          if (!isNullOrUndefined(startString) && !isNullOrUndefined(endString)) {
            valueString = startString + " " + this.separator + " " + endString;
          } else if (!isNullOrUndefined(startString)) {
            valueString = startString;
          } else if (!isNullOrUndefined(endString)) {
            valueString = endString;
          }
          this.invalidValueString = valueString;
          this.setProperties({
            value: null
          }, true);
          this.setProperties({
            startValue: null
          }, true);
          this.setProperties({
            endValue: null
          }, true);
          this.startDate = null;
          this.endDate = null;
        }
      }
    };
    DateRangePicker2.prototype.getstringvalue = function(value) {
      var stringValue = null;
      if (!isNullOrUndefined(value) && typeof value === "number") {
        stringValue = value.toString();
      } else if (!isNullOrUndefined(value) && typeof value === "string") {
        stringValue = "" + value;
      }
      return stringValue;
    };
    DateRangePicker2.prototype.checkInvalidValue = function(value) {
      var valueString = value;
      var invalid = false;
      var formatOpt = null;
      formatOpt = {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      };
      if (typeof valueString !== "string") {
        invalid = true;
      } else {
        var globalize = new Internationalization(this.locale);
        if (!this.checkDateValue(globalize.parseDate(valueString, formatOpt))) {
          var extISOStr = null;
          var basISOString = null;
          extISOStr = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOStr.test(valueString) && !basISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
            invalid = true;
          }
        }
      }
      return invalid;
    };
    DateRangePicker2.prototype.isDateDisabled = function(date) {
      if (isNullOrUndefined(date)) {
        return false;
      }
      var value = /* @__PURE__ */ new Date(+date);
      if (+value < +this.min || +value > +this.max) {
        return true;
      }
      this.virtualRenderCellArgs = {
        date: value,
        isDisabled: false
      };
      var args = this.virtualRenderCellArgs;
      this.virtualRenderCellEvent(args);
      if (args.isDisabled) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.disabledDateRender = function() {
      this.disabledDays = [];
      this.disabledDayCnt = null;
      var localDate = /* @__PURE__ */ new Date(+this.startValue);
      var count2 = 0;
      while (+localDate <= +this.endValue && +this.endValue <= +this.max) {
        this.virtualRenderCellArgs = {
          date: localDate,
          isDisabled: false
        };
        var args = this.virtualRenderCellArgs;
        this.virtualRenderCellEvent(args);
        if (args.isDisabled) {
          this.disabledDays.push(/* @__PURE__ */ new Date(+args.date));
          if (+localDate > +this.startValue && +localDate < +this.endValue) {
            count2++;
          }
        }
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      this.disabledDayCnt = count2;
    };
    DateRangePicker2.prototype.virtualRenderCellEvent = function(args) {
      extend(this.virtualRenderCellArgs, {
        name: "renderDayCell"
      });
      this.trigger("renderDayCell", args);
    };
    DateRangePicker2.prototype.disabledDates = function() {
      var isStartDisabled = false;
      var isEndDisabled = false;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        isStartDisabled = this.isDateDisabled(this.startValue);
        isEndDisabled = this.isDateDisabled(this.endValue);
        if (!this.isPopupOpen()) {
          this.currentDate = null;
        }
        this.setValue();
      }
      return isStartDisabled || isEndDisabled;
    };
    DateRangePicker2.prototype.setModelValue = function() {
      if (!this.value && this.startDate === null && this.endDate === null) {
        this.setProperties({
          value: null
        }, true);
      } else if (this.value === null || this.value.start === null) {
        if (this.value === null) {
          this.setProperties({
            value: [this.startDate, this.endDate]
          }, true);
        } else if (this.value.start === null) {
          this.setProperties({
            value: {
              start: this.startDate,
              end: this.endDate
            }
          }, true);
        }
      } else {
        if (this.value && this.value.length > 0 || this.valueType && this.valueType.length > 0) {
          if (+this.startDate !== +this.value[0] || +this.endDate !== +this.value[1]) {
            this.setProperties({
              value: [this.startDate, this.endDate]
            }, true);
          }
          if (this.value && this.value[0] == null && this.value[1] == null) {
            this.setProperties({
              value: null
            }, true);
          }
        } else {
          if (this.value && this.value.start) {
            this.setProperties({
              value: {
                start: this.startDate,
                end: this.endDate
              }
            }, true);
          }
        }
      }
      this.createHiddenInput();
    };
    DateRangePicker2.prototype.dispatchEvent = function(element, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      element.dispatchEvent(evt);
      this.firstHiddenChild.dispatchEvent(evt);
    };
    DateRangePicker2.prototype.changeTrigger = function(e) {
      if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
        this.setProperties({
          endDate: this.checkDateValue(this.endValue)
        }, true);
        this.setProperties({
          startDate: this.checkDateValue(this.startValue)
        }, true);
        this.setModelValue();
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.rangeArgs(e));
        }
      }
      this.previousEleValue = this.inputElement.value;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
    };
    DateRangePicker2.prototype.navigateTo = function(view, date) {
      if (this.isPopupOpen()) {
        if (view.toLowerCase() === "month") {
          view = "Month";
        } else if (view.toLowerCase() === "year") {
          view = "Year";
        } else if (view.toLowerCase() === "decade") {
          view = "Decade";
        } else {
          return;
        }
        if (this.getViewNumber(view) < this.getViewNumber(this.depth)) {
          view = this.depth;
        }
        if (this.isMobile) {
          _super.prototype.navigateTo.call(this, view, date);
        } else {
          if (date < this.min) {
            date = /* @__PURE__ */ new Date(+this.min);
          } else if (date >= this.max) {
            date = /* @__PURE__ */ new Date(+this.max);
          }
          if (view === "Month" && this.isSameMonth(date, this.max)) {
            date = new Date(this.max.getFullYear(), this.max.getMonth() - 1, this.min.getDate());
          } else if (view === "Year" && this.isSameYear(date, this.max)) {
            date = new Date(this.max.getFullYear() - 1, this.max.getMonth(), this.max.getDate());
          } else if (view === "Decade" && this.isSameDecade(date, this.max)) {
            date = new Date(this.max.getFullYear() - 10, this.max.getMonth(), this.max.getDate());
          }
          this.leftCalCurrentDate = date;
          this.navigate(this.leftCalendar, this.leftCalCurrentDate, view);
          if (view === "Month") {
            date = new Date(this.currentDate.setMonth(this.currentDate.getMonth() + 1));
          } else if (view === "Year") {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 1));
          } else {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 10));
          }
          this.rightCalCurrentDate = date;
          this.navigate(this.rightCalendar, this.rightCalCurrentDate, view);
          this.leftKeyboardModule = this.rightKeyboardModule = null;
          this.updateNavIcons();
        }
        if (this.currentView() === this.depth) {
          this.bindCalendarCellEvents();
        }
        this.removeFocusedDate();
        this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      }
    };
    DateRangePicker2.prototype.navigate = function(calendar, date, view) {
      this.calendarElement = calendar;
      this.table = calendar.querySelector("table");
      this.tableBodyElement = calendar.querySelector("tbody");
      this.headerTitleElement = calendar.querySelector(".e-title");
      this.tableHeadElement = calendar.querySelector("thead");
      this.contentElement = calendar.querySelector(".e-content");
      this.previousIcon = calendar.querySelector(".e-prev");
      this.nextIcon = calendar.querySelector(".e-next");
      this.effect = ZOOMIN2;
      _super.prototype.navigateTo.call(this, view, date);
    };
    DateRangePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.focusOut = function() {
      var isBlur = this.preventBlur;
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.preventBlur = false;
        this.inputElement.blur();
        this.preventBlur = isBlur;
      }
    };
    DateRangePicker2.prototype.destroy = function() {
      this.unBindEvents();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.hide(null);
      var ariaAttrs = {
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "aria-invalid": "false",
        "spellcheck": "false"
      };
      if (this.inputElement) {
        removeClass([this.inputElement], [ROOT3]);
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.inputElement.classList.remove("e-input");
        if (!isNullOrUndefined(this.inputWrapper)) {
          EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
          if (this.angularTag === null) {
            this.inputWrapper.container.parentElement.appendChild(this.inputElement);
          }
          detach(this.inputWrapper.container);
        }
      }
      if (!isNullOrUndefined(this.inputKeyboardModule) && !this.isMobile) {
        this.inputKeyboardModule.destroy();
      }
      if (this.popupObj) {
        if (!this.isMobile) {
          this.clearCalendarEvents();
        }
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
      this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null;
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      if (!isNullOrUndefined(this.firstHiddenChild) && !isNullOrUndefined(this.secondHiddenChild)) {
        detach(this.firstHiddenChild);
        detach(this.secondHiddenChild);
        this.firstHiddenChild = this.secondHiddenChild = null;
        this.inputElement.setAttribute("name", this.element.getAttribute("data-name"));
        this.inputElement.removeAttribute("data-name");
      }
      this.closeEventArgs = null;
      this.leftCalendar = null;
      this.rightTitle = null;
      this.leftTitle = null;
      this.openEventArgs = null;
      this.leftCalNextIcon = null;
      this.rightCalendar = null;
      this.closeEventArgs = null;
      this.rightCalPrevIcon = null;
      this.leftCalPrevIcon = null;
      this.popupKeyboardModule = null;
      this.cancelButton = null;
      this.applyButton = null;
      this.calendarElement = null;
      this.leftKeyboardModule = null;
      this.rightCalNextIcon = null;
      this.leftCalNextIcon = null;
      this.btnKeyboardModule = null;
      this.rightKeyboardModule = null;
      this.leftKeyboardModule = null;
      this.presetKeyboardModule = null;
      this.liCollections = null;
      this.popupObj = null;
      this.popupWrapper = null;
    };
    DateRangePicker2.prototype.ensureInputAttribute = function() {
      var attr = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        attr[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < attr.length; i++) {
        if (isNullOrUndefined(this.cloneElement.getAttribute(attr[i]))) {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(attr[i]);
        } else {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(attr[i]);
          }
          this.inputElement.setAttribute(attr[i], this.cloneElement.getAttribute(attr[i]));
        }
      }
    };
    DateRangePicker2.prototype.getModuleName = function() {
      return "daterangepicker";
    };
    DateRangePicker2.prototype.getPersistData = function() {
      var keyEntity = ["startDate", "endDate", "value"];
      return this.addOnPersist(keyEntity);
    };
    DateRangePicker2.prototype.getSelectedRange = function() {
      var range;
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.renderDayCellArgs) && this.renderDayCellArgs.isDisabled) {
          this.disabledDateRender();
        }
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
      } else {
        range = 0;
      }
      return {
        startDate: this.startValue,
        endDate: this.endValue,
        daySpan: range
      };
    };
    DateRangePicker2.prototype.show = function(element, event2) {
      var _this = this;
      if (this.isMobile && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        if (!this.isPopupOpen()) {
          if (element) {
            this.targetElement = element;
          }
          this.createPopup();
          if (this.isMobile || Browser.isDevice) {
            this.mobileRangePopupWrap = this.createElement("div", {
              className: "e-daterangepick-mob-popup-wrap"
            });
            document.body.appendChild(this.mobileRangePopupWrap);
          }
          this.openEventArgs = {
            popup: this.popupObj || null,
            cancel: false,
            date: this.inputElement.value,
            model: this,
            event: event2 ? event2 : null,
            appendTo: this.isMobile || Browser.isDevice ? this.mobileRangePopupWrap : document.body
          };
          var eventArgs = this.openEventArgs;
          this.trigger("open", eventArgs, function(eventArgs2) {
            _this.openEventArgs = eventArgs2;
            if (!_this.openEventArgs.cancel) {
              _this.openEventArgs.appendTo.appendChild(_this.popupWrapper);
              _this.showPopup(element, event2);
              var isPreset = !_this.isCustomRange || _this.isMobile && _this.isCustomRange;
              if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label) && isPreset) {
                _this.setScrollPosition();
              }
              _this.checkMinMaxDays();
              if (_this.isMobile && !isNullOrUndefined(_this.startDate) && isNullOrUndefined(_this.endDate)) {
                _this.endButton.element.classList.add(ACTIVE2);
                _this.startButton.element.classList.remove(ACTIVE2);
                _this.endButton.element.removeAttribute("disabled");
                _this.selectableDates();
              }
              _super.prototype.setOverlayIndex.call(_this, _this.mobileRangePopupWrap, _this.popupObj.element, _this.modal, _this.isMobile || Browser.isDevice);
            }
          });
          if (Browser.isDevice) {
            var dlgOverlay = this.createElement("div", {
              className: "e-dlg-overlay"
            });
            dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
            this.mobileRangePopupWrap.appendChild(dlgOverlay);
          }
        }
      }
    };
    DateRangePicker2.prototype.hide = function(event2) {
      var _this = this;
      if (this.popupObj) {
        if (isNullOrUndefined(this.previousEndValue) && isNullOrUndefined(this.previousStartValue)) {
          this.clearRange();
        } else {
          if (!isNullOrUndefined(this.previousStartValue)) {
            this.startValue = new Date(this.checkValue(this.previousStartValue));
            this.setValue();
            this.currentDate = new Date(this.checkValue(this.startValue));
          } else {
            this.startValue = null;
            this.setValue();
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            this.endValue = new Date(this.checkValue(this.previousEndValue));
            this.setValue();
          } else {
            this.endValue = null;
            this.setValue();
          }
        }
        if (this.isPopupOpen()) {
          this.closeEventArgs = {
            cancel: false,
            popup: this.popupObj,
            date: this.inputElement.value,
            model: this,
            event: event2 ? event2 : null
          };
          var eventArgs = this.closeEventArgs;
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventArgs = eventArgs2;
            if (!_this.closeEventArgs.cancel) {
              if (_this.isMobile) {
                if (!isNullOrUndefined(_this.startButton) && !isNullOrUndefined(_this.endButton)) {
                  EventHandler.remove(_this.startButton.element, "click touchstart", _this.deviceHeaderClick);
                  EventHandler.remove(_this.endButton.element, "click touchstart", _this.deviceHeaderClick);
                }
              }
              if (_this.popupObj) {
                _this.popupObj.hide();
                if (_this.preventBlur) {
                  _this.inputElement.focus();
                  addClass([_this.inputWrapper.container], [INPUTFOCUS2]);
                }
              }
              if (!_this.isMobile) {
                if (!isNullOrUndefined(_this.leftKeyboardModule) && !isNullOrUndefined(_this.rightKeyboardModule)) {
                  _this.leftKeyboardModule.destroy();
                  _this.rightKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.presetElement)) {
                  _this.presetKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.cancelButton)) {
                  _this.btnKeyboardModule.destroy();
                }
              }
              _this.targetElement = null;
              removeClass([document.body], OVERFLOW2);
              EventHandler.remove(document, "mousedown touchstart", _this.documentHandler);
              if (_this.isMobile && _this.modal) {
                _this.modal.style.display = "none";
                _this.modal.outerHTML = "";
                _this.modal = null;
              }
              if (_this.isMobile || Browser.isDevice) {
                if (!isNullOrUndefined(_this.mobileRangePopupWrap)) {
                  _this.mobileRangePopupWrap.remove();
                  _this.mobileRangePopupWrap = null;
                }
              }
              _this.isKeyPopup = _this.dateDisabled = false;
            } else {
              removeClass([_this.inputWrapper.buttons[0]], ACTIVE2);
            }
            _this.updateClearIconState();
            _this.updateHiddenInput();
            if (_this.isMobile && _this.allowEdit && !_this.readonly) {
              _this.inputElement.removeAttribute("readonly");
            }
          });
        }
      } else {
        this.updateClearIconState();
        this.updateHiddenInput();
        if (this.isMobile && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    DateRangePicker2.prototype.setLocale = function() {
      this.globalize = new Internationalization(this.locale);
      this.l10n.setLocale(this.locale);
      if (this.dateRangeOptions && this.dateRangeOptions.placeholder == null) {
        this.setProperties({
          placeholder: this.l10n.getConstant("placeholder")
        }, true);
        Input.setPlaceholder(this.placeholder, this.inputElement);
      }
      this.updateInput();
      this.updateHiddenInput();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.refreshChange = function() {
      this.checkView();
      this.refreshControl();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.setDate = function() {
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      this.refreshChange();
    };
    DateRangePicker2.prototype.enableInput = function() {
      if (+this.min <= +this.max) {
        this.setProperties({
          enabled: true
        }, true);
        Input.setEnabled(this.enabled, this.inputElement);
        if (this.element.hasAttribute("disabled")) {
          this.bindEvents();
        }
      }
    };
    DateRangePicker2.prototype.clearModelvalue = function(newProp, oldProp) {
      this.setProperties({
        startDate: null
      }, true);
      this.setProperties({
        endDate: null
      }, true);
      if (oldProp.value && oldProp.value.length > 0) {
        this.setProperties({
          value: null
        }, true);
      } else if (oldProp.value && oldProp.value.start) {
        this.setProperties({
          value: {
            start: null,
            end: null
          }
        }, true);
      } else if (oldProp.value && !oldProp.value.start) {
        this.setProperties({
          value: {
            start: null,
            end: null
          }
        }, true);
      }
      this.updateValue();
      this.setDate();
    };
    DateRangePicker2.prototype.createHiddenInput = function() {
      if (isNullOrUndefined(this.firstHiddenChild) && isNullOrUndefined(this.secondHiddenChild)) {
        this.firstHiddenChild = this.createElement("input");
        this.secondHiddenChild = this.createElement("input");
      }
      if (!isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        this.inputElement.setAttribute("data-name", this.inputElement.getAttribute("name"));
        this.inputElement.removeAttribute("name");
      }
      attributes(this.firstHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT
      });
      attributes(this.secondHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT
      });
      var format = {
        format: this.formatString,
        type: "datetime",
        skeleton: "yMd"
      };
      this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format);
      this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format);
      this.inputElement.parentElement.appendChild(this.firstHiddenChild);
      this.inputElement.parentElement.appendChild(this.secondHiddenChild);
    };
    DateRangePicker2.prototype.setMinMaxDays = function() {
      if (this.isPopupOpen()) {
        this.removeClassDisabled();
        this.checkMinMaxDays();
        if (this.isMobile) {
          this.selectableDates();
        }
        if (!this.strictMode && isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
          this.removeSelection();
        } else {
          this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
        }
        this.updateHeader();
      }
    };
    DateRangePicker2.prototype.getStartEndValue = function(date, isEnd) {
      if (this.depth === "Month") {
        return this.checkDateValue(new Date(this.checkValue(date)));
      } else if (this.depth === "Year") {
        return new Date(date.getFullYear(), date.getMonth() + (isEnd ? 1 : 0), isEnd ? 0 : 1);
      } else {
        return new Date(date.getFullYear(), isEnd ? 11 : 0, isEnd ? 31 : 1);
      }
    };
    DateRangePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var format = {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      };
      var isDynamicValueChange = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell", "select"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          isDynamicValueChange = true;
        }
        switch (prop) {
          case "width":
            this.setEleWidth(this.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "separator":
            this.previousEleValue = this.inputElement.value;
            this.setProperties({
              separator: newProp.separator
            }, true);
            this.updateInput();
            this.changeTrigger();
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            this.setProperties({
              placeholder: newProp.placeholder
            }, true);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            this.setRangeAllowEdit();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            this.setProperties({
              enabled: newProp.enabled
            }, true);
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "allowEdit":
            this.setRangeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({
              enableRtl: newProp.enableRtl
            }, true);
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            break;
          case "format":
            this.setProperties({
              format: newProp.format
            }, true);
            this.checkFormat();
            this.updateInput();
            this.changeTrigger();
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.dateRangeOptions && this.dateRangeOptions.placeholder == null) {
              this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
              }, true);
              Input.setPlaceholder(this.placeholder, this.inputElement);
            }
            this.setLocale();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.setDataAttribute(true);
            this.checkHtmlAttributes(true);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "startDate":
            if (typeof newProp.startDate === "string") {
              newProp.startDate = this.globalize.parseDate(newProp.startDate, format);
            }
            if (+this.initStartDate !== +newProp.startDate) {
              this.startValue = this.getStartEndValue(newProp.startDate, false);
              this.setDate();
              this.setValue();
            }
            break;
          case "endDate":
            if (typeof newProp.endDate === "string") {
              newProp.endDate = this.globalize.parseDate(newProp.endDate, format);
            }
            if (+this.initEndDate !== +newProp.endDate) {
              this.endValue = this.getStartEndValue(newProp.endDate, true);
              this.setDate();
              this.setValue();
            }
            break;
          case "value":
            isDynamicValueChange = true;
            this.invalidValueString = null;
            this.checkInvalidRange(newProp.value);
            if (typeof newProp.value === "string") {
              if (!this.invalidValueString) {
                var rangeArray = newProp.value.split(" " + this.separator + " ");
                this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
                this.updateValue();
                this.setDate();
              } else {
                this.clearModelvalue(newProp, oldProp);
              }
            } else {
              if (!isNullOrUndefined(newProp.value) && newProp.value.length > 0 || !isNullOrUndefined(newProp.value) && newProp.value.start) {
                this.valueType = newProp.value;
                if (newProp.value[0] === null || newProp.value.start === null) {
                  if (newProp.value.length === 1 || newProp.value.start) {
                    this.clearModelvalue(newProp, oldProp);
                  } else if (newProp.value[1] === null || newProp.value.start === null) {
                    this.clearModelvalue(newProp, oldProp);
                  }
                } else if (+this.initStartDate !== +newProp.value[0] || +this.initEndDate !== +newProp.value[1] || +this.initStartDate !== +(newProp.value.start || +this.initEndDate !== +newProp.value.start)) {
                  if (newProp.value.length === 1) {
                    this.modelValue = newProp.value;
                  } else if (newProp.value.start) {
                    this.modelValue = newProp.value;
                  }
                  this.updateValue();
                  this.setDate();
                }
              } else {
                if (isNullOrUndefined(this.value) || newProp.value.start == null) {
                  this.valueType = newProp.value;
                  this.startValue = null;
                  this.endValue = null;
                  this.clearModelvalue(newProp, oldProp);
                }
              }
            }
            if (this.isPopupOpen()) {
              if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
                this.removeSelection();
                if (this.isMobile) {
                  this.deviceHeaderUpdate();
                }
                return;
              }
              if (this.isMobile) {
                this.navigate(this.deviceCalendar, this.startValue, this.currentView());
                this.deviceHeaderUpdate();
              } else {
                this.navigate(this.leftCalendar, this.startValue, this.currentView());
                this.updateControl(this.leftCalendar);
                this.navigate(this.rightCalendar, this.endValue, this.currentView());
                this.updateControl(this.rightCalendar);
              }
              this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
              this.updateHeader();
              this.applyButton.disabled = this.applyButton.element.disabled = false;
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "minDays":
            isDynamicValueChange = true;
            this.setProperties({
              minDays: newProp.minDays
            }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "maxDays":
            isDynamicValueChange = true;
            this.setProperties({
              maxDays: newProp.maxDays
            }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "min":
            this.setProperties({
              min: this.checkDateValue(new Date(this.checkValue(newProp.min)))
            }, true);
            this.previousEleValue = this.inputElement.value;
            this.enableInput();
            this.refreshChange();
            break;
          case "max":
            this.setProperties({
              max: this.checkDateValue(new Date(this.checkValue(newProp.max)))
            }, true);
            this.enableInput();
            this.refreshChange();
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.setProperties({
              strictMode: newProp.strictMode
            }, true);
            this.refreshChange();
            break;
          case "presets":
            this.setProperties({
              presets: newProp.presets
            }, true);
            this.processPresets();
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "start":
            this.setProperties({
              start: newProp.start
            }, true);
            this.refreshChange();
            break;
          case "depth":
            this.setProperties({
              depth: newProp.depth
            }, true);
            this.refreshChange();
            break;
        }
        if (!isDynamicValueChange) {
          this.hide(null);
        }
      }
    };
    __decorate9([Property(null)], DateRangePicker2.prototype, "value", void 0);
    __decorate9([Property(false)], DateRangePicker2.prototype, "enablePersistence", void 0);
    __decorate9([Property(new Date(1900, 0, 1))], DateRangePicker2.prototype, "min", void 0);
    __decorate9([Property(new Date(2099, 11, 31))], DateRangePicker2.prototype, "max", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "locale", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate9([Property(false)], DateRangePicker2.prototype, "weekNumber", void 0);
    __decorate9([Property("Gregorian")], DateRangePicker2.prototype, "calendarMode", void 0);
    __decorate9([Property(false)], DateRangePicker2.prototype, "openOnFocus", void 0);
    __decorate9([Property(false)], DateRangePicker2.prototype, "fullScreenMode", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "created", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "destroyed", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "change", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "cleared", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "navigated", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "renderDayCell", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "startDate", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "endDate", void 0);
    __decorate9([Collection([{}], Presets)], DateRangePicker2.prototype, "presets", void 0);
    __decorate9([Property("")], DateRangePicker2.prototype, "width", void 0);
    __decorate9([Property(1e3)], DateRangePicker2.prototype, "zIndex", void 0);
    __decorate9([Property(true)], DateRangePicker2.prototype, "showClearButton", void 0);
    __decorate9([Property(true)], DateRangePicker2.prototype, "showTodayButton", void 0);
    __decorate9([Property("Month")], DateRangePicker2.prototype, "start", void 0);
    __decorate9([Property("Month")], DateRangePicker2.prototype, "depth", void 0);
    __decorate9([Property("")], DateRangePicker2.prototype, "cssClass", void 0);
    __decorate9([Property("-")], DateRangePicker2.prototype, "separator", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "minDays", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "maxDays", void 0);
    __decorate9([Property(false)], DateRangePicker2.prototype, "strictMode", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "keyConfigs", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "format", void 0);
    __decorate9([Property(true)], DateRangePicker2.prototype, "enabled", void 0);
    __decorate9([Property(false)], DateRangePicker2.prototype, "readonly", void 0);
    __decorate9([Property(true)], DateRangePicker2.prototype, "allowEdit", void 0);
    __decorate9([Property("Never")], DateRangePicker2.prototype, "floatLabelType", void 0);
    __decorate9([Property(null)], DateRangePicker2.prototype, "placeholder", void 0);
    __decorate9([Property({})], DateRangePicker2.prototype, "htmlAttributes", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "open", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "close", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "select", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "focus", void 0);
    __decorate9([Event2()], DateRangePicker2.prototype, "blur", void 0);
    DateRangePicker2 = __decorate9([NotifyPropertyChanges], DateRangePicker2);
    return DateRangePicker2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/timepicker/timepicker.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WRAPPERCLASS = "e-time-wrapper";
var POPUP3 = "e-popup";
var ERROR4 = "e-error";
var POPUPDIMENSION = "240px";
var DAY = (/* @__PURE__ */ new Date()).getDate();
var MONTH3 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR3 = (/* @__PURE__ */ new Date()).getFullYear();
var ROOT4 = "e-timepicker";
var LIBRARY3 = "e-lib";
var CONTROL3 = "e-control";
var CONTENT3 = "e-content";
var SELECTED5 = "e-active";
var HOVER2 = "e-hover";
var NAVIGATION = "e-navigation";
var DISABLED4 = "e-disabled";
var ICONANIMATION = "e-icon-anim";
var FOCUS = "e-input-focus";
var LISTCLASS2 = "e-list-item";
var HALFPOSITION = 2;
var ANIMATIONDURATION = 50;
var OVERFLOW3 = "e-time-overflow";
var OFFSETVAL = 4;
var EDITABLE = "e-non-edit";
var wrapperAttributes = ["title", "class", "style"];
var TimePickerBase;
(function(TimePickerBase2) {
  function createListItems(createdEl, min, max, globalize, timeFormat, step) {
    var formatOptions;
    if (this.calendarMode === "Gregorian") {
      formatOptions = {
        format: timeFormat,
        type: "time"
      };
    } else {
      formatOptions = {
        format: timeFormat,
        type: "time",
        calendar: "islamic"
      };
    }
    var start;
    var interval = step * 6e4;
    var listItems = [];
    var timeCollections = [];
    start = +min.setMilliseconds(0);
    var end = +max.setMilliseconds(0);
    while (end >= start) {
      timeCollections.push(start);
      listItems.push(globalize.formatDate(new Date(start), {
        format: timeFormat,
        type: "time"
      }));
      start += interval;
    }
    var listTag = ListBase.createList(createdEl, listItems, null, true);
    return {
      collection: timeCollections,
      list: listTag
    };
  }
  TimePickerBase2.createListItems = createListItems;
})(TimePickerBase || (TimePickerBase = {}));
var TimeMaskPlaceholder = (
  /** @class */
  function(_super) {
    __extends22(TimeMaskPlaceholder2, _super);
    function TimeMaskPlaceholder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([Property("day")], TimeMaskPlaceholder2.prototype, "day", void 0);
    __decorate10([Property("month")], TimeMaskPlaceholder2.prototype, "month", void 0);
    __decorate10([Property("year")], TimeMaskPlaceholder2.prototype, "year", void 0);
    __decorate10([Property("day of the week")], TimeMaskPlaceholder2.prototype, "dayOfTheWeek", void 0);
    __decorate10([Property("hour")], TimeMaskPlaceholder2.prototype, "hour", void 0);
    __decorate10([Property("minute")], TimeMaskPlaceholder2.prototype, "minute", void 0);
    __decorate10([Property("second")], TimeMaskPlaceholder2.prototype, "second", void 0);
    return TimeMaskPlaceholder2;
  }(ChildProperty)
);
var TimePicker = (
  /** @class */
  function(_super) {
    __extends22(TimePicker2, _super);
    function TimePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.liCollections = [];
      _this.timeCollections = [];
      _this.disableItemCollection = [];
      _this.invalidValueString = null;
      _this.preventChange = false;
      _this.maskedDateValue = "";
      _this.moduleName = _this.getModuleName();
      _this.timeOptions = options;
      return _this;
    }
    TimePicker2.prototype.preRender = function() {
      this.keyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT4, CONTROL3, LIBRARY3]);
      this.inputElement = this.element;
      this.angularTag = null;
      this.formElement = closest(this.element, "form");
      if (this.element.tagName === "EJS-TIMEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      this.openPopupEventArgs = {
        appendTo: document.body
      };
    };
    TimePicker2.prototype.render = function() {
      this.initialize();
      this.createInputElement();
      this.updateHtmlAttributeToWrapper();
      this.setTimeAllowEdit();
      this.setEnable();
      this.validateInterval();
      this.bindEvents();
      this.validateDisable();
      this.setTimeZone();
      this.setValue(this.getFormattedValue(this.value));
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInputValue(this.maskedDateValue);
        this.checkErrorState(this.maskedDateValue);
      }
      this.anchor = this.inputElement;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputEleValue = this.getDateObject(this.inputElement.value);
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.renderComplete();
    };
    TimePicker2.prototype.setTimeZone = function() {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = this.serverTimezoneOffset;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    TimePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    TimePicker2.prototype.setTimeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, {
          "readonly": ""
        });
      }
      this.clearIconState();
    };
    TimePicker2.prototype.clearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [EDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [EDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [EDITABLE]);
      }
    };
    TimePicker2.prototype.validateDisable = function() {
      this.setMinMax(this.initMin, this.initMax);
      if (!isNullOrUndefined(this.value)) {
        this.popupCreation();
        this.popupObj.destroy();
        this.popupWrapper = this.popupObj = null;
      }
      if (!isNaN(+this.value) && this.value !== null) {
        if (!this.valueIsDisable(this.value)) {
          if (this.strictMode) {
            this.resetState();
          }
          this.initValue = null;
          this.initMax = this.getDateObject(this.initMax);
          this.initMin = this.getDateObject(this.initMin);
          this.timeCollections = this.liCollections = [];
          this.setMinMax(this.initMin, this.initMax);
        }
      }
    };
    TimePicker2.prototype.validationAttribute = function(target, input2) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      input2.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        input2.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    TimePicker2.prototype.initialize = function() {
      this.globalize = new Internationalization(this.locale);
      this.defaultCulture = new Internationalization("en");
      this.checkTimeFormat();
      this.checkInvalidValue(this.value);
      this.setProperties({
        value: this.checkDateValue(new Date(this.checkInValue(this.value)))
      }, true);
      this.setProperties({
        min: this.checkDateValue(new Date(this.checkInValue(this.min)))
      }, true);
      this.setProperties({
        max: this.checkDateValue(new Date(this.checkInValue(this.max)))
      }, true);
      this.setProperties({
        scrollTo: this.checkDateValue(new Date(this.checkInValue(this.scrollTo)))
      }, true);
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.checkAttributes(false);
      var localeText = {
        placeholder: this.placeholder
      };
      this.l10n = new L10n("timepicker", localeText, this.locale);
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant("placeholder")
      }, true);
      this.initValue = this.checkDateValue(this.value);
      this.initMin = this.checkDateValue(this.min);
      this.initMax = this.checkDateValue(this.max);
      this.isNavigate = this.isPreventBlur = this.isTextSelected = false;
      this.activeIndex = this.valueWithMinutes = this.prevDate = null;
      if (!isNullOrUndefined(this.element.getAttribute("id"))) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2_timepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, {
            "id": this.element.id + "_input"
          });
        }
      }
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, {
          "name": this.element.id
        });
      }
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.checkTimeFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (!isNullOrUndefined(this.format.skeleton) && this.format.skeleton !== "") {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({
            type: "time",
            skeleton: skeletonString
          });
        } else {
          this.formatString = this.globalize.getDatePattern({
            type: "time",
            skeleton: "short"
          });
        }
      } else {
        this.formatString = null;
      }
    };
    TimePicker2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    TimePicker2.prototype.createInputElement = function() {
      if (this.fullScreenMode && Browser.isDevice) {
        this.cssClass += " e-popup-expand";
      }
      var updatedCssClassesValue = this.cssClass;
      var isBindClearAction = this.enableMask ? false : true;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassesValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        bindClearAction: isBindClearAction,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassesValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [" e-input-group-icon e-time-icon e-icons"]
      }, this.createElement);
      this.inputWrapper.container.style.width = this.setWidth(this.width);
      attributes(this.inputElement, {
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "false",
        "aria-invalid": "false"
      });
      if (!this.isNullOrEmpty(this.inputStyle)) {
        Input.addAttributes({
          "style": this.inputStyle
        }, this.inputElement);
      }
      addClass([this.inputWrapper.container], WRAPPERCLASS);
    };
    TimePicker2.prototype.getCldrDateTimeFormat = function() {
      var culture = new Internationalization(this.locale);
      var cldrTime;
      var dateFormat = culture.getDatePattern({
        skeleton: "yMd"
      });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.cldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.checkInvalidValue = function(value) {
      var isInvalid = false;
      if (typeof value !== "object" && !isNullOrUndefined(value)) {
        var valueString = value;
        if (typeof valueString === "string") {
          valueString = valueString.trim();
        }
        var valueExpression = null;
        var valueExp = null;
        if (typeof value === "number") {
          valueString = value.toString();
        } else if (typeof value === "string") {
          if (!/^[a-zA-Z0-9- ]*$/.test(value)) {
            valueExpression = this.setCurrentDate(this.getDateObject(value));
            if (isNullOrUndefined(valueExpression)) {
              valueExpression = this.checkDateValue(this.globalize.parseDate(valueString, {
                format: this.getCldrDateTimeFormat(),
                type: "datetime"
              }));
              if (isNullOrUndefined(valueExpression)) {
                valueExpression = this.checkDateValue(this.globalize.parseDate(valueString, {
                  format: this.formatString,
                  type: "dateTime",
                  skeleton: "yMd"
                }));
              }
            }
          }
        }
        valueExp = this.globalize.parseDate(valueString, {
          format: this.getCldrDateTimeFormat(),
          type: "datetime"
        });
        valueExpression = !isNullOrUndefined(valueExp) && valueExp instanceof Date && !isNaN(+valueExp) ? valueExp : null;
        if (isNullOrUndefined(valueExpression) && valueString.replace(/\s/g, "").length) {
          var extISOString = null;
          var basicISOString = null;
          extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(value) || isNaN(+/* @__PURE__ */ new Date("" + valueString))) {
            isInvalid = true;
          } else {
            valueExpression = /* @__PURE__ */ new Date("" + valueString);
          }
        }
        if (isInvalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({
            value: null
          }, true);
          this.initValue = null;
        } else {
          this.setProperties({
            value: valueExpression
          }, true);
          this.initValue = this.value;
        }
      }
    };
    TimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableMask) {
        modules.push({
          args: [this],
          member: "MaskedDateTime"
        });
      }
      return modules;
    };
    TimePicker2.prototype.cldrFormat = function(type) {
      var cldrDateTimeString;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTimeString = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTimeString = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTimeString;
    };
    TimePicker2.prototype.destroy = function() {
      this.hide();
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      this.unBindEvents();
      var ariaAttribute = {
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "true",
        "aria-invalid": "false"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
        if (this.angularTag === null) {
          this.inputWrapper.container.parentElement.appendChild(this.inputElement);
        }
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.enableElement([this.inputElement]);
        this.inputElement.classList.remove("e-input");
        if (isNullOrUndefined(this.cloneElement.getAttribute("disabled"))) {
          Input.setEnabled(true, this.inputElement, this.floatLabelType);
        }
      }
      if (this.inputWrapper.container) {
        detach(this.inputWrapper.container);
      }
      this.inputWrapper = this.popupWrapper = this.cloneElement = void 0;
      this.liCollections = this.timeCollections = this.disableItemCollection = [];
      if (!isNullOrUndefined(this.rippleFn)) {
        this.rippleFn();
      }
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.rippleFn = null;
      this.openPopupEventArgs = null;
      this.selectedElement = null;
      this.listTag = null;
      this.liCollections = null;
    };
    TimePicker2.prototype.ensureInputAttribute = function() {
      var propertyList = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        propertyList[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < propertyList.length; i++) {
        if (!isNullOrUndefined(this.cloneElement.getAttribute(propertyList[i]))) {
          this.inputElement.setAttribute(propertyList[i], this.cloneElement.getAttribute(propertyList[i]));
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(propertyList[i]);
          }
        } else {
          this.inputElement.removeAttribute(propertyList[i]);
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
        }
      }
    };
    TimePicker2.prototype.popupCreation = function() {
      this.popupWrapper = this.createElement("div", {
        className: ROOT4 + " " + POPUP3,
        attrs: {
          "id": this.element.id + "_popup",
          "style": "visibility:hidden"
        }
      });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.generateList();
        append([this.listWrapper], this.popupWrapper);
      }
      this.addSelection();
      this.renderPopup();
      detach(this.popupWrapper);
    };
    TimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION, 10);
      var popupHeight = this.popupWrapper.getBoundingClientRect().height;
      return popupHeight > height ? height : popupHeight;
    };
    TimePicker2.prototype.generateList = function() {
      this.createListItems();
      this.wireListEvents();
      var rippleModel = {
        duration: 300,
        selector: "." + LISTCLASS2
      };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS2);
    };
    TimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      this.popupObj = new Popup(this.popupWrapper, {
        width: this.setPopupWidth(this.width),
        zIndex: this.zIndex,
        targetType: "relative",
        position: Browser.isDevice ? {
          X: "center",
          Y: "center"
        } : {
          X: "left",
          Y: "bottom"
        },
        collision: Browser.isDevice ? {
          X: "fit",
          Y: "fit"
        } : {
          X: "flip",
          Y: "flip"
        },
        enableRtl: this.enableRtl,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        offsetY: OFFSETVAL,
        open: function() {
          _this.popupWrapper.style.visibility = "visible";
          addClass([_this.inputWrapper.buttons[0]], SELECTED5);
        },
        close: function() {
          removeClass([_this.inputWrapper.buttons[0]], SELECTED5);
          _this.unWireListEvents();
          _this.inputElement.removeAttribute("aria-activedescendant");
          remove(_this.popupObj.element);
          _this.popupObj.destroy();
          _this.popupWrapper.innerHTML = "";
          _this.listWrapper = _this.popupWrapper = _this.listTag = void 0;
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (!Browser.isDevice) {
        this.popupObj.collision = {
          X: "none",
          Y: "flip"
        };
      }
      if (Browser.isDevice && this.fullScreenMode) {
        this.popupObj.element.style.maxHeight = "100%";
        this.popupObj.element.style.width = "100%";
      } else {
        this.popupObj.element.style.maxHeight = POPUPDIMENSION;
      }
      if (Browser.isDevice && this.fullScreenMode) {
        var modelHeader = this.createElement("div", {
          className: "e-model-header"
        });
        var modelTitleSpan = this.createElement("span", {
          className: "e-model-title"
        });
        modelTitleSpan.textContent = "Select time";
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.timePopupCloseHandler, this);
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTitleSpan);
        this.popupWrapper.insertBefore(modelHeader, this.popupWrapper.firstElementChild);
      }
    };
    TimePicker2.prototype.timePopupCloseHandler = function(e) {
      this.hide();
    };
    TimePicker2.prototype.getFormattedValue = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, {
          skeleton: "medium",
          type: "time"
        });
      }
    };
    TimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = !this.isNullOrEmpty(this.initValue);
        if (this.checkDateValue(dateValue)) {
          var date = value ? this.initValue.getDate() : DAY;
          var month = value ? this.initValue.getMonth() : MONTH3;
          var year = value ? this.initValue.getFullYear() : YEAR3;
          return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds());
        }
      }
      return null;
    };
    TimePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassesValue = this.htmlAttributes["" + key].replace(/\s+/g, " ").trim();
              if (updatedClassesValue !== "") {
                addClass([this.inputWrapper.container], updatedClassesValue.split(" "));
              }
            } else if (key === "style") {
              var timeStyle = this.inputWrapper.container.getAttribute(key);
              timeStyle = !isNullOrUndefined(timeStyle) ? timeStyle + this.htmlAttributes["" + key] : this.htmlAttributes["" + key];
              this.inputWrapper.container.setAttribute(key, timeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    TimePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes["" + key]);
          }
        }
      }
    };
    TimePicker2.prototype.updateCssClass = function(cssClassNew, cssClassOld) {
      if (!isNullOrUndefined(cssClassOld)) {
        cssClassOld = cssClassOld.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssClassNew)) {
        cssClassNew = cssClassNew.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssClassNew, [this.inputWrapper.container], cssClassOld);
      if (this.popupWrapper) {
        Input.setCssClass(cssClassNew, [this.popupWrapper], cssClassOld);
      }
    };
    TimePicker2.prototype.removeErrorClass = function() {
      removeClass([this.inputWrapper.container], ERROR4);
      attributes(this.inputElement, {
        "aria-invalid": "false"
      });
    };
    TimePicker2.prototype.checkErrorState = function(val) {
      var value = this.getDateObject(val);
      if (this.validateState(value) && !this.invalidValueString || this.enableMask && this.inputElement.value === this.maskedDateValue) {
        this.removeErrorClass();
      } else {
        addClass([this.inputWrapper.container], ERROR4);
        attributes(this.inputElement, {
          "aria-invalid": "true"
        });
      }
    };
    TimePicker2.prototype.validateInterval = function() {
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.enableElement([this.inputWrapper.buttons[0]]);
      } else {
        this.disableTimeIcon();
      }
    };
    TimePicker2.prototype.disableTimeIcon = function() {
      this.disableElement([this.inputWrapper.buttons[0]]);
      this.hide();
    };
    TimePicker2.prototype.disableElement = function(element) {
      addClass(element, DISABLED4);
    };
    TimePicker2.prototype.enableElement = function(element) {
      removeClass(element, DISABLED4);
    };
    TimePicker2.prototype.selectInputText = function() {
      this.inputElement.setSelectionRange(0, this.inputElement.value.length);
    };
    TimePicker2.prototype.setCursorToEnd = function() {
      this.inputElement.setSelectionRange(this.inputElement.value.length, this.inputElement.value.length);
    };
    TimePicker2.prototype.getMeridianText = function() {
      var meridian;
      if (this.locale === "en" || this.locale === "en-US") {
        meridian = getValue("dayPeriods.format.wide", getDefaultDateObject());
      } else {
        var gregorianFormat = ".dates.calendars.gregorian.dayPeriods.format.abbreviated";
        var mainVal = "main.";
        meridian = getValue(mainVal + "" + this.locale + gregorianFormat, cldrData);
      }
      return meridian;
    };
    TimePicker2.prototype.getCursorSelection = function() {
      var input2 = this.inputElement;
      var start = 0;
      var end = 0;
      if (!isNaN(input2.selectionStart)) {
        start = input2.selectionStart;
        end = input2.selectionEnd;
      }
      return {
        start: Math.abs(start),
        end: Math.abs(end)
      };
    };
    TimePicker2.prototype.getActiveElement = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        return this.popupWrapper.querySelectorAll("." + SELECTED5);
      } else {
        return null;
      }
    };
    TimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    TimePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    TimePicker2.prototype.setPopupWidth = function(width) {
      width = this.setWidth(width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    TimePicker2.prototype.setScrollPosition = function() {
      var element = this.selectedElement;
      if (!isNullOrUndefined(element)) {
        this.findScrollTop(element);
      } else if (this.popupWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    TimePicker2.prototype.findScrollTop = function(element) {
      var listHeight = this.getPopupHeight();
      var nextEle = element.nextElementSibling;
      var height = nextEle ? nextEle.offsetTop : element.offsetTop;
      var liHeight = element.getBoundingClientRect().height;
      if (height + element.offsetTop > listHeight) {
        this.popupWrapper.scrollTop = nextEle ? height - (listHeight / HALFPOSITION + liHeight / HALFPOSITION) : height;
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.setScrollTo = function() {
      var element;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          var initialTime = this.timeCollections[0];
          var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
          element = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
        }
      } else {
        this.popupWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element)) {
        this.findScrollTop(element);
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.getText = function() {
      return isNullOrUndefined(this.checkDateValue(this.value)) ? "" : this.getValue(this.value);
    };
    TimePicker2.prototype.getValue = function(value) {
      return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
        format: this.cldrTimeFormat(),
        type: "time"
      });
    };
    TimePicker2.prototype.cldrDateFormat = function() {
      var cldrDate;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDate = getValue("dateFormats.short", getDefaultDateObject());
      } else {
        cldrDate = this.getCultureDateObject(cldrData, "" + this.locale);
      }
      return cldrDate;
    };
    TimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.formatString)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.dateToNumeric = function() {
      var cldrTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrTime = getValue("timeFormats.medium", getDefaultDateObject());
      } else {
        cldrTime = getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.medium", cldrData);
      }
      return cldrTime;
    };
    TimePicker2.prototype.getExactDateTime = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, {
          format: this.dateToNumeric(),
          type: "time"
        });
      }
    };
    TimePicker2.prototype.setValue = function(value) {
      var time = this.checkValue(value);
      if (!this.strictMode && !this.validateState(time)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        if (this.isNullOrEmpty(time)) {
          this.initValue = null;
          this.validateMinMax(this.value, this.min, this.max);
        } else {
          this.initValue = this.compareFormatChange(time);
        }
      }
      this.updateInput(true, this.initValue);
    };
    TimePicker2.prototype.compareFormatChange = function(value) {
      if (isNullOrUndefined(value)) {
        return null;
      }
      return value !== this.getText() ? this.getDateObject(value) : this.getDateObject(this.value);
    };
    TimePicker2.prototype.updatePlaceHolder = function() {
      Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
    };
    TimePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    TimePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnTimeIconClick");
    };
    TimePicker2.prototype.popupHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      if (this.isPopupOpen()) {
        this.closePopup(0, e);
      } else {
        this.inputElement.focus();
        this.show(e);
      }
    };
    TimePicker2.prototype.mouseDownHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.readonly) {
        this.inputElement.setSelectionRange(0, 0);
        EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      }
    };
    TimePicker2.prototype.mouseUpHandler = function(event2) {
      if (!this.readonly) {
        event2.preventDefault();
        if (this.enableMask) {
          event2.preventDefault();
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
          return;
        } else {
          EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
          var curPos = this.getCursorSelection();
          if (!(curPos.start === 0 && curPos.end === this.inputElement.value.length)) {
            if (this.inputElement.value.length > 0) {
              this.cursorDetails = this.focusSelection();
            }
            this.inputElement.setSelectionRange(this.cursorDetails.start, this.cursorDetails.end);
          }
        }
      }
    };
    TimePicker2.prototype.focusSelection = function() {
      var regex = new RegExp("^[a-zA-Z0-9]+$");
      var split = this.inputElement.value.split("");
      split.push(" ");
      var curPos = this.getCursorSelection();
      var start = 0;
      var end = 0;
      var isSeparator = false;
      if (!this.isTextSelected) {
        for (var i = 0; i < split.length; i++) {
          if (!regex.test(split[i])) {
            end = i;
            isSeparator = true;
          }
          if (isSeparator) {
            if (curPos.start >= start && curPos.end <= end) {
              end = end;
              this.isTextSelected = true;
              break;
            } else {
              start = i + 1;
              isSeparator = false;
            }
          }
        }
      } else {
        start = curPos.start;
        end = curPos.end;
        this.isTextSelected = false;
      }
      return {
        start,
        end
      };
    };
    TimePicker2.prototype.inputHandler = function(event2) {
      if (!this.readonly && this.enabled) {
        if (!(event2.action === "right" || event2.action === "left" || event2.action === "tab" || (event2.action === "home" || event2.action === "end" || event2.action === "up" || event2.action === "down") && !this.isPopupOpen() && !this.enableMask)) {
          event2.preventDefault();
        }
        switch (event2.action) {
          case "home":
          case "end":
          case "up":
          case "down":
            if (!this.isPopupOpen()) {
              this.popupCreation();
              this.popupObj.destroy();
              this.popupObj = this.popupWrapper = null;
            }
            if (this.enableMask && !this.readonly && !this.isPopupOpen()) {
              event2.preventDefault();
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event2
              });
            }
            if (this.isPopupOpen()) {
              this.keyHandler(event2);
            }
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.updateValue(this.valueWithMinutes, event2);
            } else {
              this.updateValue(this.inputElement.value, event2);
            }
            this.hide();
            this.isNavigate = false;
            if (this.isPopupOpen()) {
              event2.stopPropagation();
            }
            break;
          case "open":
            this.show(event2);
            break;
          case "escape":
            this.updateInputValue(this.objToString(this.value));
            if (this.enableMask) {
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
              this.createMask();
            }
            this.previousState(this.value);
            this.hide();
            break;
          case "close":
            this.hide();
            break;
          case "right":
          case "left":
          case "tab":
          case "shiftTab":
            if (!this.isPopupOpen() && this.enableMask && !this.readonly) {
              if (this.inputElement.selectionStart === 0 && this.inputElement.selectionEnd === this.inputElement.value.length || this.inputElement.selectionEnd !== this.inputElement.value.length && event2.action === "tab" || this.inputElement.selectionStart !== 0 && event2.action === "shiftTab" || event2.action === "left" || event2.action === "right") {
                event2.preventDefault();
              }
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event2
              });
            }
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    TimePicker2.prototype.onMouseClick = function(event2) {
      var target = event2.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS2);
      this.setSelection(li, event2);
      if (li && li.classList.contains(LISTCLASS2)) {
        this.hide();
      }
    };
    TimePicker2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (this.isPopupOpen() && this.popupWrapper) {
        var args = {
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          name: "open"
        };
        removeClass([document.body], OVERFLOW3);
        this.trigger("close", args, function(args2) {
          if (!args2.cancel) {
            var animModel = {
              name: "FadeOut",
              duration: ANIMATIONDURATION,
              delay: delay ? delay : 0
            };
            _this.popupObj.hide(new Animation(animModel));
            removeClass([_this.inputWrapper.container], [ICONANIMATION]);
            attributes(_this.inputElement, {
              "aria-expanded": "false"
            });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-controls");
            _this.inputElement.removeAttribute("aria-activedescendant");
            EventHandler.remove(document, "mousedown touchstart", _this.documentClickHandler);
          }
          if (Browser.isDevice && _this.modal) {
            _this.modal.style.display = "none";
            _this.modal.outerHTML = "";
            _this.modal = null;
          }
          if (Browser.isDevice) {
            if (!isNullOrUndefined(_this.mobileTimePopupWrap)) {
              _this.mobileTimePopupWrap.remove();
              _this.mobileTimePopupWrap = null;
            }
          }
          if (Browser.isDevice && _this.allowEdit && !_this.readonly) {
            _this.inputElement.removeAttribute("readonly");
          }
        });
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    TimePicker2.prototype.disposeServerPopup = function() {
      if (this.popupWrapper) {
        this.popupWrapper.style.visibility = "hidden";
        this.popupWrapper.style.top = "-9999px";
        this.popupWrapper.style.left = "-9999px";
        this.popupWrapper.style.width = "0px";
        this.popupWrapper.style.height = "0px";
      }
    };
    TimePicker2.prototype.checkValueChange = function(event2, isNavigation) {
      if (!this.strictMode && !this.validateState(this.valueWithMinutes)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.setProperties({
          value: this.compareFormatChange(this.inputElement.value)
        }, true);
        this.initValue = this.valueWithMinutes = this.compareFormatChange(this.inputElement.value);
        this.prevValue = this.inputElement.value;
        if (+this.prevDate !== +this.value) {
          this.changeEvent(event2);
        }
      } else {
        if (!isNavigation) {
          if (this.prevValue !== this.inputElement.value || isNullOrUndefined(this.checkDateValue(this.value))) {
            this.valueProcess(event2, this.compareFormatChange(this.inputElement.value));
          }
        } else {
          var value = this.getDateObject(new Date(this.timeCollections[this.activeIndex]));
          if (+this.prevDate !== +value) {
            this.valueProcess(event2, value);
          }
        }
      }
    };
    TimePicker2.prototype.onMouseOver = function(event2) {
      var currentLi = closest(event2.target, "." + LISTCLASS2);
      this.setHover(currentLi, HOVER2);
    };
    TimePicker2.prototype.setHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeHover(className);
        addClass([li], className);
        if (className === NAVIGATION) {
          li.setAttribute("aria-selected", "true");
        }
      }
    };
    TimePicker2.prototype.setSelection = function(li, event2) {
      if (this.isValidLI(li)) {
        this.checkValue(li.getAttribute("data-value"));
        if (this.enableMask) {
          this.createMask();
        }
        this.selectedElement = li;
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], SELECTED5);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.checkValueChange(event2, true);
      }
    };
    TimePicker2.prototype.onMouseLeave = function() {
      this.removeHover(HOVER2);
    };
    TimePicker2.prototype.scrollHandler = function() {
      if (this.getModuleName() === "timepicker" && Browser.isDevice) {
        return;
      } else {
        this.hide();
      }
    };
    TimePicker2.prototype.setMinMax = function(minVal, maxVal) {
      if (isNullOrUndefined(this.checkDateValue(minVal))) {
        this.initMin = this.getDateObject("12:00:00 AM");
      }
      if (isNullOrUndefined(this.checkDateValue(maxVal))) {
        this.initMax = this.getDateObject("11:59:59 PM");
      }
    };
    TimePicker2.prototype.validateMinMax = function(dateVal, minVal, maxVal) {
      var value = dateVal instanceof Date ? dateVal : this.getDateObject(dateVal);
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        dateVal = this.strictOperation(this.initMin, this.initMax, dateVal, value);
      } else if (+this.createDateObj(this.getFormattedValue(this.initMin)) > +this.createDateObj(this.getFormattedValue(this.initMax))) {
        this.disableTimeIcon();
      }
      if (this.strictMode) {
        dateVal = this.valueIsDisable(dateVal) ? dateVal : null;
      }
      this.checkErrorState(dateVal);
      return dateVal;
    };
    TimePicker2.prototype.valueIsDisable = function(value) {
      if (this.disableItemCollection.length > 0) {
        if (this.disableItemCollection.length === this.timeCollections.length) {
          return false;
        }
        var time = value instanceof Date ? this.objToString(value) : value;
        for (var index = 0; index < this.disableItemCollection.length; index++) {
          if (time === this.disableItemCollection[index]) {
            return false;
          }
        }
      }
      return true;
    };
    TimePicker2.prototype.validateState = function(val) {
      if (!this.strictMode) {
        if (this.valueIsDisable(val)) {
          var value = typeof val === "string" ? this.setCurrentDate(this.getDateObject(val)) : this.setCurrentDate(this.getDateObject(val));
          var maxValue = this.setCurrentDate(this.getDateObject(this.initMax));
          var minValue = this.setCurrentDate(this.getDateObject(this.initMin));
          if (!isNullOrUndefined(this.checkDateValue(value))) {
            if (+value > +maxValue || +value < +minValue) {
              return false;
            }
          } else {
            if (+maxValue < +minValue || this.inputElement.value !== "") {
              return false;
            }
          }
        } else {
          return false;
        }
      }
      return true;
    };
    TimePicker2.prototype.strictOperation = function(minimum, maximum, dateVal, val) {
      var maxValue = this.createDateObj(this.getFormattedValue(maximum));
      var minValue = this.createDateObj(this.getFormattedValue(minimum));
      var value = this.createDateObj(this.getFormattedValue(val));
      if (this.strictMode) {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          this.initValue = this.getDateObject(maxValue);
          this.updateInputValue(this.getValue(this.initValue));
          if (this.enableMask) {
            this.createMask();
          }
          return this.inputElement.value;
        } else if (+minValue >= +value) {
          return this.getDateObject(minValue);
        } else if (+value >= +maxValue || +minValue === +maxValue) {
          return this.getDateObject(maxValue);
        }
      } else {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          if (!isNaN(+this.createDateObj(dateVal))) {
            return dateVal;
          }
        }
      }
      return dateVal;
    };
    TimePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.popupHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      EventHandler.add(this.inputElement, "input", this.inputEventHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyConfigure = extend(this.keyConfigure, this.keyConfigs);
        this.inputEvent = new KeyboardEvents(this.inputWrapper.container, {
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
        if (this.showClearButton && this.inputElement) {
          EventHandler.add(this.inputElement, "mousedown", this.mouseDownHandler, this);
        }
      }
    };
    TimePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    TimePicker2.prototype.formResetHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var timeValue = this.inputElement.getAttribute("value");
        var val = this.checkDateValue(this.inputEleValue);
        if (this.element.tagName === "EJS-TIMEPICKER") {
          val = null;
          timeValue = "";
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({
          value: val
        }, true);
        this.prevDate = this.value;
        this.valueWithMinutes = this.value;
        this.initValue = this.value;
        if (this.inputElement) {
          this.updateInputValue(timeValue);
          if (this.enableMask) {
            if (!timeValue) {
              this.updateInputValue(this.maskedDateValue);
            }
            this.createMask();
          }
          this.checkErrorState(timeValue);
          this.prevValue = this.inputElement.value;
        }
      }
    };
    TimePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    TimePicker2.prototype.inputEventHandler = function() {
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.unBindEvents = function() {
      if (this.inputWrapper) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.popupHandler);
      }
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "input", this.inputEventHandler);
      if (this.inputEvent) {
        this.inputEvent.destroy();
      }
      EventHandler.remove(this.inputElement, "mousedown touchstart", this.mouseDownHandler);
      if (this.showClearButton && !isNullOrUndefined(this.inputWrapper) && !isNullOrUndefined(this.inputWrapper.clearButton)) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.clearHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    TimePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
    };
    TimePicker2.prototype.raiseClearedEvent = function(e) {
      var clearedArgs = {
        event: e
      };
      this.trigger("cleared", clearedArgs);
    };
    TimePicker2.prototype.clearHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      if (!isNullOrUndefined(this.value)) {
        this.clear(e);
      } else {
        this.resetState();
        this.raiseClearedEvent(e);
      }
      if (this.popupWrapper) {
        this.popupWrapper.scrollTop = 0;
      }
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
      if (closest(this.element, "form")) {
        var element = this.element;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element.dispatchEvent(keyupEvent);
      }
    };
    TimePicker2.prototype.clear = function(event2) {
      this.setProperties({
        value: null
      }, true);
      this.initValue = null;
      this.resetState();
      this.raiseClearedEvent(event2);
      this.changeEvent(event2);
    };
    TimePicker2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.zIndex = this.zIndex;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["step", "disabled", "readonly", "style", "name", "value", "min", "max", "placeholder"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "style":
              this.inputStyle = this.inputElement.getAttribute(prop);
              break;
            case "readonly":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "placeholder":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({
                    min: value
                  }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({
                    max: value
                  }, !isDynamic);
                }
              }
              break;
            case "value":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.initValue = value;
                  this.updateInput(false, this.initValue);
                  this.setProperties({
                    value
                  }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    TimePicker2.prototype.setCurrentDate = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      }
      return new Date(YEAR3, MONTH3, DAY, value.getHours(), value.getMinutes(), value.getSeconds());
    };
    TimePicker2.prototype.getTextFormat = function() {
      var time = 0;
      if (this.cldrTimeFormat().split(" ")[0] === "a" || this.cldrTimeFormat().indexOf("a") === 0) {
        time = 1;
      } else if (this.cldrTimeFormat().indexOf("a") < 0) {
        var strArray = this.cldrTimeFormat().split(" ");
        for (var i = 0; i < strArray.length; i++) {
          if (strArray[i].toLowerCase().indexOf("h") >= 0) {
            time = i;
            break;
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.updateValue = function(value, event2) {
      var val;
      if (this.isNullOrEmpty(value)) {
        this.resetState();
      } else {
        val = this.checkValue(value);
        if (this.strictMode) {
          var inputVal = val === null && value.trim().length > 0 ? this.previousState(this.prevDate) : this.inputElement.value;
          this.updateInputValue(inputVal);
          if (this.enableMask) {
            if (!inputVal) {
              this.updateInputValue(this.maskedDateValue);
            }
            if (isNullOrUndefined(val) && value !== this.maskedDateValue) {
              this.createMask();
            }
            if (isNullOrUndefined(val) && value === this.maskedDateValue) {
              this.updateInputValue(this.maskedDateValue);
            }
          }
        }
      }
      this.checkValueChange(event2, typeof value === "string" ? false : true);
    };
    TimePicker2.prototype.previousState = function(date) {
      var value = this.getDateObject(date);
      for (var i = 0; i < this.timeCollections.length; i++) {
        if (+value === this.timeCollections[i]) {
          this.activeIndex = i;
          this.selectedElement = this.liCollections[i];
          this.valueWithMinutes = new Date(this.timeCollections[i]);
          break;
        }
      }
      return this.getValue(date);
    };
    TimePicker2.prototype.resetState = function() {
      this.removeSelection();
      Input.setValue("", this.inputElement, this.floatLabelType, false);
      this.valueWithMinutes = this.activeIndex = null;
      if (!this.strictMode) {
        this.checkErrorState(null);
      }
    };
    TimePicker2.prototype.objToString = function(val) {
      if (isNullOrUndefined(this.checkDateValue(val))) {
        return null;
      } else {
        return this.globalize.formatDate(val, {
          format: this.cldrTimeFormat(),
          type: "time"
        });
      }
    };
    TimePicker2.prototype.checkValue = function(value) {
      if (!this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.validateValue(date, value);
      }
      this.resetState();
      return this.valueWithMinutes = null;
    };
    TimePicker2.prototype.validateValue = function(date, value) {
      var time;
      var val = this.validateMinMax(value, this.min, this.max);
      var newval = this.getDateObject(val);
      if (this.getFormattedValue(newval) !== this.getFormattedValue(this.value)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = this.objToString(this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = this.objToString(this.valueWithMinutes);
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        var value_1 = val.trim().length > 0 ? val : "";
        this.updateInputValue(value_1);
        if (this.enableMask) {
          if (!value_1) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      } else {
        this.updateInputValue(time);
        if (this.enableMask) {
          if (time === "") {
            this.updateInputValue(this.maskedDateValue);
          }
          if (isNullOrUndefined(time) && value !== this.maskedDateValue) {
            this.createMask();
          }
          if (isNullOrUndefined(time) && value === this.maskedDateValue) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    TimePicker2.prototype.findNextElement = function(event2) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var timeVal = null;
      var count2 = this.liCollections.length;
      var collections = this.timeCollections;
      if (!isNullOrUndefined(this.checkDateValue(value)) || !isNullOrUndefined(this.activeIndex)) {
        if (event2.action === "home") {
          var index = this.validLiElement(0);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else if (event2.action === "end") {
          var index = this.validLiElement(collections.length - 1, true);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else {
          if (event2.action === "down") {
            for (var i = 0; i < count2; i++) {
              if (+value < this.timeCollections[i]) {
                var index = this.validLiElement(i);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === count2 - 1) {
                var index = this.validLiElement(0);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          } else {
            for (var i = count2 - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                var index = this.validLiElement(i, true);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === 0) {
                var index = this.validLiElement(count2 - 1);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(isNullOrUndefined(timeVal) ? null : new Date(timeVal));
      } else {
        this.selectNextItem(event2);
      }
    };
    TimePicker2.prototype.selectNextItem = function(event2) {
      var index = this.validLiElement(0, event2.action === "down" ? false : true);
      this.activeIndex = index;
      this.selectedElement = this.liCollections[index];
      this.elementValue(new Date(this.timeCollections[index]));
    };
    TimePicker2.prototype.elementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        this.checkValue(value);
      }
    };
    TimePicker2.prototype.validLiElement = function(index, backward) {
      var elementIndex = null;
      var items = isNullOrUndefined(this.popupWrapper) ? this.liCollections : this.popupWrapper.querySelectorAll("." + LISTCLASS2);
      var isCheck = true;
      if (items.length) {
        if (backward) {
          for (var i = index; i >= 0; i--) {
            if (!items[i].classList.contains(DISABLED4)) {
              elementIndex = i;
              break;
            } else if (i === 0) {
              if (isCheck) {
                index = i = items.length;
                isCheck = false;
              }
            }
          }
        } else {
          for (var i = index; i <= items.length - 1; i++) {
            if (!items[i].classList.contains(DISABLED4)) {
              elementIndex = i;
              break;
            } else if (i === items.length - 1) {
              if (isCheck) {
                index = i = -1;
                isCheck = false;
              }
            }
          }
        }
      }
      return elementIndex;
    };
    TimePicker2.prototype.keyHandler = function(event2) {
      if (isNullOrUndefined(this.step) || this.step <= 0 || !isNullOrUndefined(this.inputWrapper) && this.inputWrapper.buttons[0].classList.contains(DISABLED4)) {
        return;
      }
      var count2 = this.timeCollections.length;
      if (isNullOrUndefined(this.getActiveElement()) || this.getActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            var index = this.validLiElement(0, event2.action === "down" ? false : true);
            this.activeIndex = index;
            this.selectedElement = this.liCollections[index];
            this.elementValue(new Date(this.timeCollections[index]));
          } else {
            this.findNextElement(event2);
          }
        } else {
          this.findNextElement(event2);
        }
      } else {
        var nextItem = void 0;
        if (event2.keyCode >= 37 && event2.keyCode <= 40) {
          var index = event2.keyCode === 40 || event2.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === count2 ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? count2 - 1 : this.activeIndex;
          this.activeIndex = index = this.validLiElement(this.activeIndex, event2.keyCode === 40 || event2.keyCode === 39 ? false : true);
          nextItem = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event2.action === "home") {
          var index = this.validLiElement(0);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        } else if (event2.action === "end") {
          var index = this.validLiElement(count2 - 1, true);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(new Date(nextItem));
      }
      this.isNavigate = true;
      this.setHover(this.selectedElement, NAVIGATION);
      this.setActiveDescendant();
      if (this.enableMask) {
        this.selectInputText();
      }
      if (this.isPopupOpen() && this.selectedElement !== null && (!event2 || event2.type !== "click")) {
        this.setScrollPosition();
      }
    };
    TimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.timeFormats.short", ld);
    };
    TimePicker2.prototype.getCultureDateObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.dateFormats.short", ld);
    };
    TimePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    TimePicker2.prototype.unWireListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        if (!Browser.isDevice) {
          EventHandler.remove(this.listWrapper, "mouseover", this.onMouseOver);
          EventHandler.remove(this.listWrapper, "mouseout", this.onMouseLeave);
        }
      }
    };
    TimePicker2.prototype.valueProcess = function(event2, value) {
      var result = isNullOrUndefined(this.checkDateValue(value)) ? null : value;
      if (+this.prevDate !== +result) {
        this.initValue = result;
        this.changeEvent(event2);
      }
    };
    TimePicker2.prototype.changeEvent = function(e) {
      this.addSelection();
      this.updateInput(true, this.initValue);
      var eventArgs = {
        event: e || null,
        value: this.value,
        text: this.inputElement.value,
        isInteracted: !isNullOrUndefined(e),
        element: this.element
      };
      eventArgs.value = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      this.prevDate = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      if (this.isAngular && this.preventChange) {
        this.preventChange = false;
      } else {
        this.trigger("change", eventArgs);
      }
      this.invalidValueString = null;
      this.checkErrorState(this.value);
    };
    TimePicker2.prototype.updateInput = function(isUpdate, date) {
      if (isUpdate) {
        this.prevValue = this.getValue(this.prevDate);
      }
      this.prevDate = this.valueWithMinutes = date;
      if (typeof date !== "number" || (this.value && +(/* @__PURE__ */ new Date(+this.value)).setMilliseconds(0)) !== +date) {
        this.setProperties({
          value: date
        }, true);
        if (this.enableMask && this.value) {
          this.createMask();
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.checkErrorState(this.invalidValueString);
        this.updateInputValue(this.invalidValueString);
      }
      this.clearIconState();
    };
    TimePicker2.prototype.setActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement) && this.value) {
        attributes(this.inputElement, {
          "aria-activedescendant": this.selectedElement.getAttribute("id")
        });
      } else {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    TimePicker2.prototype.removeSelection = function() {
      this.removeHover(HOVER2);
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + SELECTED5);
        if (items.length) {
          removeClass(items, SELECTED5);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.removeHover = function(className) {
      var hoveredItem = this.getHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
        if (className === NAVIGATION) {
          hoveredItem[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.getHoverItem = function(className) {
      var hoveredItem;
      if (!isNullOrUndefined(this.popupWrapper)) {
        hoveredItem = this.popupWrapper.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    TimePicker2.prototype.setActiveClass = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.getDateObject(this.valueWithMinutes)) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              break;
            }
          }
        }
      }
    };
    TimePicker2.prototype.addSelection = function() {
      this.selectedElement = null;
      this.removeSelection();
      this.setActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], SELECTED5);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    TimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS2) && !li.classList.contains(DISABLED4);
    };
    TimePicker2.prototype.createDateObj = function(val) {
      var formatStr = null;
      var today = this.globalize.formatDate(/* @__PURE__ */ new Date(), {
        format: formatStr,
        skeleton: "short",
        type: "date"
      });
      var value = null;
      if (typeof val === "string") {
        if (val.toUpperCase().indexOf("AM") > -1 || val.toUpperCase().indexOf("PM") > -1) {
          today = this.defaultCulture.formatDate(/* @__PURE__ */ new Date(), {
            format: formatStr,
            skeleton: "short",
            type: "date"
          });
          value = isNaN(+/* @__PURE__ */ new Date(today + " " + val)) ? null : new Date((/* @__PURE__ */ new Date(today + " " + val)).setMilliseconds(0));
          if (isNullOrUndefined(value)) {
            value = this.timeParse(today, val);
          }
        } else {
          value = this.timeParse(today, val);
        }
      } else if (val instanceof Date) {
        value = val;
      }
      return value;
    };
    TimePicker2.prototype.timeParse = function(today, val) {
      var value;
      value = this.globalize.parseDate(today + " " + val, {
        format: this.cldrDateFormat() + " " + this.cldrTimeFormat(),
        type: "datetime"
      });
      value = isNullOrUndefined(value) ? this.globalize.parseDate(today + " " + val, {
        format: this.cldrDateFormat() + " " + this.dateToNumeric(),
        type: "datetime"
      }) : value;
      value = isNullOrUndefined(value) ? value : new Date(value.setMilliseconds(0));
      return value;
    };
    TimePicker2.prototype.createListItems = function() {
      var _this = this;
      this.listWrapper = this.createElement("div", {
        className: CONTENT3,
        attrs: {
          "tabindex": "-1"
        }
      });
      var start;
      var interval = this.step * 6e4;
      var listItems = [];
      this.timeCollections = [];
      this.disableItemCollection = [];
      start = +this.getDateObject(this.initMin).setMilliseconds(0);
      var end = +this.getDateObject(this.initMax).setMilliseconds(0);
      while (end >= start) {
        this.timeCollections.push(start);
        listItems.push(this.globalize.formatDate(new Date(start), {
          format: this.cldrTimeFormat(),
          type: "time"
        }));
        start += interval;
      }
      var listBaseOptions = {
        itemCreated: function(args) {
          var eventArgs = {
            element: args.item,
            text: args.text,
            value: _this.getDateObject(args.text),
            isDisabled: false
          };
          _this.trigger("itemRender", eventArgs, function(eventArgs2) {
            if (eventArgs2.isDisabled) {
              eventArgs2.element.classList.add(DISABLED4);
            }
            if (eventArgs2.element.classList.contains(DISABLED4)) {
              _this.disableItemCollection.push(eventArgs2.element.getAttribute("data-value"));
            }
          });
        }
      };
      this.listTag = ListBase.createList(this.createElement, listItems, listBaseOptions, true);
      attributes(this.listTag, {
        "role": "listbox",
        "aria-hidden": "false",
        "id": this.element.id + "_options",
        "tabindex": "0"
      });
      append([this.listTag], this.listWrapper);
    };
    TimePicker2.prototype.documentClickHandler = function(event2) {
      var target = event2.target;
      if (!isNullOrUndefined(this.popupObj) && !isNullOrUndefined(this.inputWrapper) && (this.inputWrapper.container.contains(target) && event2.type !== "mousedown" || this.popupObj.element && this.popupObj.element.contains(target)) && event2.type !== "touchstart") {
        event2.preventDefault();
      }
      if (!closest(target, '[id="' + this.popupObj.element.id + '"]') && target !== this.inputElement && target !== (this.inputWrapper && this.inputWrapper.buttons[0]) && target !== (this.inputWrapper && this.inputWrapper.clearButton) && target !== (this.inputWrapper && this.inputWrapper.container) && !target.classList.contains("e-dlg-overlay")) {
        if (this.isPopupOpen()) {
          this.hide();
          this.focusOut();
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement && target === this.popupWrapper;
        }
      }
    };
    TimePicker2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement, this.floatLabelType);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], DISABLED4);
        attributes(this.inputElement, {
          "aria-disabled": "false"
        });
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.hide();
        addClass([this.inputWrapper.container], DISABLED4);
        attributes(this.inputElement, {
          "aria-disabled": "true"
        });
        this.inputElement.tabIndex = -1;
      }
    };
    TimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.initMin = this.checkDateValue(new Date(this.checkInValue(date.min)));
        this.setProperties({
          min: this.initMin
        }, true);
      } else {
        this.initMax = this.checkDateValue(new Date(this.checkInValue(date.max)));
        this.setProperties({
          max: this.initMax
        }, true);
      }
      if (this.inputElement.value === "") {
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        this.checkValue(this.inputElement.value);
      }
      this.checkValueChange(null, false);
    };
    TimePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isPreventBlur && this.isPopupOpen()) {
        this.inputElement.focus();
        return;
      }
      this.closePopup(0, e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value === this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      removeClass([this.inputWrapper.container], [FOCUS]);
      if (this.getText() !== this.inputElement.value) {
        this.updateValue(this.inputElement.value, e);
      } else if (this.inputElement.value.trim().length === 0) {
        this.resetState();
      }
      this.cursorDetails = null;
      this.isNavigate = false;
      if (this.inputElement.value === "") {
        this.invalidValueString = null;
      }
      var blurArguments = {
        model: this
      };
      this.trigger("blur", blurArguments);
    };
    TimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [FOCUS]);
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
    };
    TimePicker2.prototype.isPopupOpen = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + ROOT4)) {
        return true;
      }
      return false;
    };
    TimePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      var focusArguments = {
        model: this
      };
      if (!this.readonly && !Browser.isDevice && !this.enableMask) {
        this.selectInputText();
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType === "Auto" || this.floatLabelType === "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      this.trigger("focus", focusArguments);
      this.clearIconState();
      if (this.openOnFocus) {
        this.show();
      }
    };
    TimePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    TimePicker2.prototype.hide = function() {
      this.closePopup(100, null);
      this.clearIconState();
    };
    TimePicker2.prototype.show = function(event2) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupWrapper) {
        return;
      } else {
        this.popupCreation();
        if (Browser.isDevice && this.listWrapper) {
          this.modal = this.createElement("div");
          this.modal.className = "" + ROOT4 + " e-time-modal";
          document.body.className += " " + OVERFLOW3;
          document.body.appendChild(this.modal);
        }
        if (Browser.isDevice) {
          this.mobileTimePopupWrap = this.createElement("div", {
            className: "e-timepicker-mob-popup-wrap"
          });
          document.body.appendChild(this.mobileTimePopupWrap);
        }
        this.openPopupEventArgs = {
          popup: this.popupObj || null,
          cancel: false,
          event: event2 || null,
          name: "open",
          appendTo: Browser.isDevice ? this.mobileTimePopupWrap : document.body
        };
        var eventArgs = this.openPopupEventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.openPopupEventArgs = eventArgs2;
          if (!_this.openPopupEventArgs.cancel && !_this.inputWrapper.buttons[0].classList.contains(DISABLED4)) {
            _this.openPopupEventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupAlignment(_this.openPopupEventArgs);
            _this.setScrollPosition();
            if (!Browser.isDevice) {
              _this.inputElement.focus();
            }
            var openAnimation = {
              name: "FadeIn",
              duration: ANIMATIONDURATION
            };
            _this.popupObj.refreshPosition(_this.anchor);
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _this.setActiveDescendant();
            attributes(_this.inputElement, {
              "aria-expanded": "true"
            });
            attributes(_this.inputElement, {
              "aria-owns": _this.inputElement.id + "_options"
            });
            attributes(_this.inputElement, {
              "aria-controls": _this.inputElement.id
            });
            addClass([_this.inputWrapper.container], FOCUS);
            EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
            _this.setOverlayIndex(_this.mobileTimePopupWrap, _this.popupObj.element, _this.modal, Browser.isDevice);
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.listTag = void 0;
            _this.liCollections = _this.timeCollections = _this.disableItemCollection = [];
            _this.popupObj = null;
          }
        });
        if (Browser.isDevice) {
          var dlgOverlay = this.createElement("div", {
            className: "e-dlg-overlay"
          });
          dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
          this.mobileTimePopupWrap.appendChild(dlgOverlay);
        }
      }
    };
    TimePicker2.prototype.setOverlayIndex = function(popupWrapper, timePopupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(timePopupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(timePopupElement.style.zIndex, 10) ? parseInt(timePopupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    TimePicker2.prototype.formatValues = function(type) {
      var value;
      if (typeof type === "number") {
        value = formatUnit(type);
      } else if (typeof type === "string") {
        value = type.match(/px|%|em/) ? type : isNaN(parseInt(type, 10)) ? type : formatUnit(type);
      }
      return value;
    };
    TimePicker2.prototype.popupAlignment = function(args) {
      args.popup.position.X = this.formatValues(args.popup.position.X);
      args.popup.position.Y = this.formatValues(args.popup.position.Y);
      if (!isNaN(parseFloat(args.popup.position.X)) || !isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.relateTo = this.anchor = document.body;
        this.popupObj.targetType = "container";
      }
      if (!isNaN(parseFloat(args.popup.position.X))) {
        this.popupObj.offsetX = parseFloat(args.popup.position.X);
      }
      if (!isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.offsetY = parseFloat(args.popup.position.Y);
      }
      if (!Browser.isDevice) {
        switch (args.popup.position.X) {
          case "left":
            break;
          case "right":
            args.popup.offsetX = this.containerStyle.width;
            break;
          case "center":
            args.popup.offsetX = -(this.containerStyle.width / 2);
            break;
        }
        switch (args.popup.position.Y) {
          case "top":
            break;
          case "bottom":
            break;
          case "center":
            args.popup.offsetY = -(this.containerStyle.height / 2);
            break;
        }
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.inputWrapper.container;
          this.anchor = this.inputElement;
          this.popupObj.targetType = "relative";
        }
      } else {
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.anchor = document.body;
          this.popupObj.offsetY = 0;
          this.popupObj.targetType = "container";
          this.popupObj.collision = {
            X: "fit",
            Y: "fit"
          };
        }
      }
    };
    TimePicker2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TimePicker2.prototype.getModuleName = function() {
      return "timepicker";
    };
    TimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement, this.floatLabelType);
            if (this.readonly) {
              this.hide();
            }
            this.setTimeAllowEdit();
            break;
          case "enabled":
            this.setProperties({
              enabled: newProp.enabled
            }, true);
            this.setEnable();
            break;
          case "allowEdit":
            this.setTimeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({
              enableRtl: newProp.enableRtl
            }, true);
            this.setEnableRtl();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "zIndex":
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            this.setZIndex();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "locale":
            this.setProperties({
              locale: newProp.locale
            }, true);
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.timeOptions && this.timeOptions.placeholder == null) {
              this.updatePlaceHolder();
            }
            this.setValue(this.value);
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "width":
            setStyleAttribute(this.inputWrapper.container, {
              "width": this.setWidth(newProp.width)
            });
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "format":
            this.setProperties({
              format: newProp.format
            }, true);
            this.checkTimeFormat();
            this.setValue(this.value);
            if (this.enableMask) {
              this.createMask();
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "value":
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            if (!this.invalidValueString) {
              if (typeof newProp.value === "string") {
                this.setProperties({
                  value: this.checkDateValue(new Date(newProp.value))
                }, true);
                newProp.value = this.value;
              } else {
                if ((newProp.value && +(/* @__PURE__ */ new Date(+newProp.value)).setMilliseconds(0)) !== +this.value) {
                  newProp.value = this.checkDateValue(/* @__PURE__ */ new Date("" + newProp.value));
                }
              }
              this.initValue = newProp.value;
              newProp.value = this.compareFormatChange(this.checkValue(newProp.value));
            } else {
              this.updateInputValue(this.invalidValueString);
              this.checkErrorState(this.invalidValueString);
            }
            if (this.enableMask && isNullOrUndefined(newProp.value)) {
              this.updateInputValue(this.maskedDateValue);
              this.checkErrorState(this.maskedDateValue);
            }
            this.checkValueChange(null, false);
            if (this.isPopupOpen()) {
              this.setScrollPosition();
            }
            if (this.isAngular && this.preventChange) {
              this.preventChange = false;
            }
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            if (newProp.strictMode) {
              this.checkErrorState(null);
            }
            this.setProperties({
              strictMode: newProp.strictMode
            }, true);
            this.checkValue(this.inputElement.value);
            this.checkValueChange(null, false);
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo)))) {
              if (this.popupWrapper) {
                this.setScrollTo();
              }
              this.setProperties({
                scrollTo: this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo)))
              }, true);
            } else {
              this.setProperties({
                scrollTo: null
              }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
        }
      }
    };
    TimePicker2.prototype.checkInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    __decorate10([Property(null)], TimePicker2.prototype, "width", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "cssClass", void 0);
    __decorate10([Property(false)], TimePicker2.prototype, "strictMode", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "keyConfigs", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "format", void 0);
    __decorate10([Property(true)], TimePicker2.prototype, "enabled", void 0);
    __decorate10([Property(false)], TimePicker2.prototype, "fullScreenMode", void 0);
    __decorate10([Property(false)], TimePicker2.prototype, "readonly", void 0);
    __decorate10([Property({})], TimePicker2.prototype, "htmlAttributes", void 0);
    __decorate10([Property("Never")], TimePicker2.prototype, "floatLabelType", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "placeholder", void 0);
    __decorate10([Property(1e3)], TimePicker2.prototype, "zIndex", void 0);
    __decorate10([Property(false)], TimePicker2.prototype, "enablePersistence", void 0);
    __decorate10([Property(true)], TimePicker2.prototype, "showClearButton", void 0);
    __decorate10([Property(30)], TimePicker2.prototype, "step", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "scrollTo", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "value", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "min", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "max", void 0);
    __decorate10([Property(true)], TimePicker2.prototype, "allowEdit", void 0);
    __decorate10([Property(false)], TimePicker2.prototype, "openOnFocus", void 0);
    __decorate10([Property(false)], TimePicker2.prototype, "enableMask", void 0);
    __decorate10([Property({
      day: "day",
      month: "month",
      year: "year",
      hour: "hour",
      minute: "minute",
      second: "second",
      dayOfTheWeek: "day of the week"
    })], TimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate10([Property(null)], TimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "change", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "created", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "destroyed", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "open", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "itemRender", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "close", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "cleared", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "blur", void 0);
    __decorate10([Event2()], TimePicker2.prototype, "focus", void 0);
    TimePicker2 = __decorate10([NotifyPropertyChanges], TimePicker2);
    return TimePicker2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-calendars/src/datetimepicker/datetimepicker.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER2 = "e-date-wrapper";
var DATEPICKERROOT = "e-datepicker";
var DATETIMEWRAPPER = "e-datetime-wrapper";
var DAY2 = (/* @__PURE__ */ new Date()).getDate();
var MONTH4 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR4 = (/* @__PURE__ */ new Date()).getFullYear();
var HOUR = (/* @__PURE__ */ new Date()).getHours();
var MINUTE = (/* @__PURE__ */ new Date()).getMinutes();
var SECOND = (/* @__PURE__ */ new Date()).getSeconds();
var MILLISECOND = (/* @__PURE__ */ new Date()).getMilliseconds();
var ROOT5 = "e-datetimepicker";
var DATETIMEPOPUPWRAPPER = "e-datetimepopup-wrapper";
var INPUTWRAPPER2 = "e-input-group-icon";
var POPUP4 = "e-popup";
var TIMEICON = "e-time-icon";
var INPUTFOCUS3 = "e-input-focus";
var POPUPDIMENSION2 = "250px";
var ICONANIMATION2 = "e-icon-anim";
var DISABLED5 = "e-disabled";
var ERROR5 = "e-error";
var CONTENT4 = "e-content";
var NAVIGATION2 = "e-navigation";
var ACTIVE3 = "e-active";
var HOVER3 = "e-hover";
var ICONS2 = "e-icons";
var HALFPOSITION2 = 2;
var LISTCLASS3 = "e-list-item";
var ANIMATIONDURATION2 = 100;
var OVERFLOW4 = "e-time-overflow";
var DateTimePicker = (
  /** @class */
  function(_super) {
    __extends23(DateTimePicker2, _super);
    function DateTimePicker2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.valueWithMinutes = null;
      _this.scrollInvoked = false;
      _this.moduleName = _this.getModuleName();
      _this.formatRegex = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yyy|yy|y|'[^']*'|'[^']*'/g;
      _this.dateFormatString = "";
      _this.dateTimeOptions = options;
      return _this;
    }
    DateTimePicker2.prototype.focusHandler = function() {
      if (!this.enabled) {
        return;
      }
      addClass([this.inputWrapper.container], INPUTFOCUS3);
    };
    DateTimePicker2.prototype.focusIn = function() {
      _super.prototype.focusIn.call(this);
    };
    DateTimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [INPUTFOCUS3]);
      }
    };
    DateTimePicker2.prototype.blurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isTimePopupOpen() && this.isPreventBlur) {
        this.inputElement.focus();
        return;
      }
      removeClass([this.inputWrapper.container], INPUTFOCUS3);
      var blurArguments = {
        model: this
      };
      if (this.isTimePopupOpen()) {
        this.hide(e);
      }
      this.trigger("blur", blurArguments);
    };
    DateTimePicker2.prototype.destroy = function() {
      if (this.showClearButton) {
        this.clearButton = document.getElementsByClassName("e-clear-icon")[0];
      }
      if (this.popupObject && this.popupObject.element.classList.contains(POPUP4)) {
        this.popupObject.destroy();
        detach(this.dateTimeWrapper);
        this.dateTimeWrapper = void 0;
        this.liCollections = this.timeCollections = [];
        if (!isNullOrUndefined(this.rippleFn)) {
          this.rippleFn();
        }
      }
      var ariaAttribute = {
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-invalid": "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObject = this.popupWrapper = null;
        this.keyboardHandler.destroy();
      }
      this.unBindInputEvents();
      this.liCollections = null;
      this.rippleFn = null;
      this.selectedElement = null;
      this.listTag = null;
      this.timeIcon = null;
      this.popupObject = null;
      this.preventArgs = null;
      this.keyboardModule = null;
      Input.destroy({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        properties: this.properties
      }, this.clearButton);
      _super.prototype.destroy.call(this);
    };
    DateTimePicker2.prototype.render = function() {
      this.timekeyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.valueWithMinutes = null;
      this.previousDateTime = null;
      this.isPreventBlur = false;
      this.cloneElement = this.element.cloneNode(true);
      this.dateTimeFormat = this.cldrDateTimeFormat();
      this.initValue = this.value;
      if (typeof this.min === "string") {
        this.min = this.checkDateValue(new Date(this.min));
      }
      if (typeof this.max === "string") {
        this.max = this.checkDateValue(new Date(this.max));
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      _super.prototype.updateHtmlAttributeToElement.call(this);
      this.checkAttributes(false);
      var localeText = {
        placeholder: this.placeholder
      };
      this.l10n = new L10n("datetimepicker", localeText, this.locale);
      this.setProperties({
        placeholder: this.placeholder || this.l10n.getConstant("placeholder")
      }, true);
      _super.prototype.render.call(this);
      this.createInputElement();
      _super.prototype.updateHtmlAttributeToWrapper.call(this);
      this.bindInputEvents();
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.setValue(true);
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType === "Always" || !this.floatLabelType || !this.placeholder)) {
        Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.setProperties({
        scrollTo: this.checkDateValue(new Date(this.checkValue(this.scrollTo)))
      }, true);
      this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      if (this.element.tagName === "EJS-DATETIMEPICKER") {
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.removeAttribute("tabindex");
        if (!this.enabled) {
          this.inputElement.tabIndex = -1;
        }
      }
      if (this.floatLabelType !== "Never") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
      }
      this.renderComplete();
    };
    DateTimePicker2.prototype.setValue = function(isDynamic) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      this.initValue = this.validateMinMaxRange(this.value);
      if (!this.strictMode && this.isDateObject(this.initValue)) {
        var value = this.validateMinMaxRange(this.initValue);
        Input.setValue(this.getFormattedValue(value), this.inputElement, this.floatLabelType, this.showClearButton);
        this.setProperties({
          value
        }, true);
      } else {
        if (isNullOrUndefined(this.value)) {
          this.initValue = null;
          this.setProperties({
            value: null
          }, true);
        }
      }
      this.valueWithMinutes = this.value;
      _super.prototype.updateInput.call(this, isDynamic);
    };
    DateTimePicker2.prototype.validateMinMaxRange = function(value) {
      var result = value;
      if (this.isDateObject(value)) {
        result = this.validateValue(value);
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
        }
      }
      this.checkValidState(result);
      return result;
    };
    DateTimePicker2.prototype.checkValidState = function(value) {
      this.isValidState = true;
      if (!this.strictMode) {
        if (+value > +this.max || +value < +this.min) {
          this.isValidState = false;
        }
      }
      this.checkErrorState();
    };
    DateTimePicker2.prototype.checkErrorState = function() {
      if (this.isValidState) {
        removeClass([this.inputWrapper.container], ERROR5);
      } else {
        addClass([this.inputWrapper.container], ERROR5);
      }
      attributes(this.inputElement, {
        "aria-invalid": this.isValidState ? "false" : "true"
      });
    };
    DateTimePicker2.prototype.validateValue = function(value) {
      var dateVal = value;
      if (this.strictMode) {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = this.max;
        } else if (+value < +this.min) {
          dateVal = this.min;
        } else if (+value > +this.max) {
          dateVal = this.max;
        }
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = value;
        }
      }
      return dateVal;
    };
    DateTimePicker2.prototype.disablePopupButton = function(isDisable) {
      if (isDisable) {
        addClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED5);
        this.hide();
      } else {
        removeClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED5);
      }
    };
    DateTimePicker2.prototype.getFormattedValue = function(value) {
      var dateOptions;
      if (!isNullOrUndefined(value)) {
        if (this.calendarMode === "Gregorian") {
          dateOptions = {
            format: this.cldrDateTimeFormat(),
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          dateOptions = {
            format: this.cldrDateTimeFormat(),
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
        return this.globalize.formatDate(value, dateOptions);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.isDateObject = function(value) {
      return !isNullOrUndefined(value) && !isNaN(+value) ? true : false;
    };
    DateTimePicker2.prototype.createInputElement = function() {
      removeClass([this.inputElement], DATEPICKERROOT);
      removeClass([this.inputWrapper.container], DATEWRAPPER2);
      addClass([this.inputWrapper.container], DATETIMEWRAPPER);
      addClass([this.inputElement], ROOT5);
      this.renderTimeIcon();
    };
    DateTimePicker2.prototype.renderTimeIcon = function() {
      this.timeIcon = Input.appendSpan(INPUTWRAPPER2 + " " + TIMEICON + " " + ICONS2, this.inputWrapper.container);
    };
    DateTimePicker2.prototype.bindInputEvents = function() {
      EventHandler.add(this.timeIcon, "mousedown", this.timeHandler, this);
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateHandler, this);
      EventHandler.add(this.inputElement, "blur", this.blurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.focusHandler, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardHandler = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyAction.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DateTimePicker2.prototype.unBindInputEvents = function() {
      EventHandler.remove(this.timeIcon, "mousedown touchstart", this.timeHandler);
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateHandler);
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "blur", this.blurHandler);
        EventHandler.remove(this.inputElement, "focus", this.focusHandler);
      }
      if (this.keyboardHandler) {
        this.keyboardHandler.destroy();
      }
    };
    DateTimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.timeFormat)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.timeFormat;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.cldrDateTimeFormat = function() {
      var cldrTime;
      var culture = new Internationalization(this.locale);
      var dateFormat = culture.getDatePattern({
        skeleton: "yMd"
      });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.getCldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.getCldrFormat = function(type) {
      var cldrDateTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTime = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTime = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTime;
    };
    DateTimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    DateTimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      if (this.calendarMode === "Gregorian") {
        return getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.short", ld);
      } else {
        return getValue("main." + this.locale + ".dates.calendars.islamic.timeFormats.short", ld);
      }
    };
    DateTimePicker2.prototype.timeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      if (e.currentTarget === this.timeIcon) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        }
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        } else {
          this.inputElement.focus();
          this.popupCreation("time", e);
          addClass([this.inputWrapper.container], [INPUTFOCUS3]);
        }
      }
      this.isIconClicked = false;
    };
    DateTimePicker2.prototype.dateHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (e.currentTarget === this.inputWrapper.buttons[0]) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        }
        if (!isNullOrUndefined(this.popupWrapper)) {
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.show = function(type, e) {
      if (this.enabled && this.readonly || !this.enabled) {
        return;
      } else {
        if (type === "time" && !this.dateTimeWrapper) {
          if (this.isDatePopupOpen()) {
            this.hide(e);
          }
          this.popupCreation("time", e);
        } else if (!this.popupObj) {
          if (this.isTimePopupOpen()) {
            this.hide(e);
          }
          _super.prototype.show.call(this);
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.toggle = function(e) {
      if (this.isDatePopupOpen()) {
        _super.prototype.hide.call(this, e);
        this.show("time", null);
      } else if (this.isTimePopupOpen()) {
        this.hide(e);
        _super.prototype.show.call(this, null, e);
        this.popupCreation("date", null);
      } else {
        this.show(null, e);
      }
    };
    DateTimePicker2.prototype.listCreation = function() {
      var dateObject;
      if (this.calendarMode === "Gregorian") {
        this.cldrDateTimeFormat().replace(this.formatRegex, this.TimePopupFormat());
        if (this.dateFormatString === "") {
          this.dateFormatString = this.cldrDateTimeFormat();
        }
        dateObject = this.globalize.parseDate(this.inputElement.value, {
          format: this.dateFormatString,
          type: "datetime"
        });
      } else {
        dateObject = this.globalize.parseDate(this.inputElement.value, {
          format: this.cldrDateTimeFormat(),
          type: "datetime",
          calendar: "islamic"
        });
      }
      var value = isNullOrUndefined(this.value) ? this.inputElement.value !== "" ? dateObject : /* @__PURE__ */ new Date() : this.value;
      this.valueWithMinutes = value;
      this.listWrapper = createElement("div", {
        className: CONTENT4,
        attrs: {
          "tabindex": "0"
        }
      });
      var min = this.startTime(value);
      var max = this.endTime(value);
      var listDetails = TimePickerBase.createListItems(this.createElement, min, max, this.globalize, this.cldrTimeFormat(), this.step);
      this.timeCollections = listDetails.collection;
      this.listTag = listDetails.list;
      attributes(this.listTag, {
        "role": "listbox",
        "aria-hidden": "false",
        "id": this.element.id + "_options"
      });
      append([listDetails.list], this.listWrapper);
      this.wireTimeListEvents();
      var rippleModel = {
        duration: 300,
        selector: "." + LISTCLASS3
      };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS3);
    };
    DateTimePicker2.prototype.popupCreation = function(type, e) {
      if (Browser.isDevice) {
        this.element.setAttribute("readonly", "readonly");
      }
      if (type === "date") {
        if (!this.readonly && this.popupWrapper) {
          addClass([this.popupWrapper], DATETIMEPOPUPWRAPPER);
          attributes(this.popupWrapper, {
            "id": this.element.id + "_options"
          });
        }
      } else {
        if (!this.readonly) {
          this.dateTimeWrapper = createElement("div", {
            className: ROOT5 + " " + POPUP4,
            attrs: {
              "id": this.element.id + "_timepopup",
              "style": "visibility:hidden ; display:block"
            }
          });
          if (!isNullOrUndefined(this.cssClass)) {
            this.dateTimeWrapper.className += " " + this.cssClass;
          }
          if (!isNullOrUndefined(this.step) && this.step > 0) {
            this.listCreation();
            append([this.listWrapper], this.dateTimeWrapper);
          }
          document.body.appendChild(this.dateTimeWrapper);
          this.addTimeSelection();
          this.renderPopup();
          this.setTimeScrollPosition();
          this.openPopup(e);
          if (!Browser.isDevice || Browser.isDevice && !this.fullScreenMode) {
            this.popupObject.refreshPosition(this.inputElement);
          }
          if (Browser.isDevice && this.fullScreenMode) {
            this.dateTimeWrapper.style.left = "0px";
          }
          if (Browser.isDevice) {
            var dlgOverlay = this.createElement("div", {
              className: "e-dlg-overlay"
            });
            dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
            this.timeModal.appendChild(dlgOverlay);
          }
        }
      }
    };
    DateTimePicker2.prototype.openPopup = function(e) {
      var _this = this;
      this.preventArgs = {
        cancel: false,
        popup: this.popupObject,
        event: e || null
      };
      var eventArgs = this.preventArgs;
      this.trigger("open", eventArgs, function(eventArgs2) {
        _this.preventArgs = eventArgs2;
        if (!_this.preventArgs.cancel && !_this.readonly) {
          var openAnimation = {
            name: "FadeIn",
            duration: ANIMATIONDURATION2
          };
          if (_this.zIndex === 1e3) {
            _this.popupObject.show(new Animation(openAnimation), _this.element);
          } else {
            _this.popupObject.show(new Animation(openAnimation), null);
          }
          addClass([_this.inputWrapper.container], [ICONANIMATION2]);
          attributes(_this.inputElement, {
            "aria-expanded": "true"
          });
          attributes(_this.inputElement, {
            "aria-owns": _this.inputElement.id + "_options"
          });
          attributes(_this.inputElement, {
            "aria-controls": _this.inputElement.id
          });
          EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
        }
      });
    };
    DateTimePicker2.prototype.documentClickHandler = function(event2) {
      var target = event2.target;
      if (!isNullOrUndefined(this.popupObject) && (this.inputWrapper.container.contains(target) && event2.type !== "mousedown" || this.popupObject.element && this.popupObject.element.contains(target)) && event2.type !== "touchstart") {
        event2.preventDefault();
      }
      if (!closest(target, '[id="' + (this.popupObject && this.popupObject.element.id + '"]')) && target !== this.inputElement && target !== this.timeIcon && !isNullOrUndefined(this.inputWrapper) && target !== this.inputWrapper.container && !target.classList.contains("e-dlg-overlay")) {
        if (this.isTimePopupOpen()) {
          this.hide(event2);
          this.focusOut();
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = document.activeElement === this.inputElement && (Browser.isIE || Browser.info.name === "edge") && target === this.popupObject.element;
        }
      }
    };
    DateTimePicker2.prototype.isTimePopupOpen = function() {
      return this.dateTimeWrapper && this.dateTimeWrapper.classList.contains("" + ROOT5) ? true : false;
    };
    DateTimePicker2.prototype.isDatePopupOpen = function() {
      return this.popupWrapper && this.popupWrapper.classList.contains("" + DATETIMEPOPUPWRAPPER) ? true : false;
    };
    DateTimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      if (Browser.isDevice) {
        this.timeModal = createElement("div");
        this.timeModal.className = "" + ROOT5 + " e-time-modal";
        document.body.className += " " + OVERFLOW4;
        this.timeModal.style.display = "block";
        document.body.appendChild(this.timeModal);
      }
      var offset = 4;
      this.popupObject = new Popup(this.dateTimeWrapper, {
        width: this.setPopupWidth(),
        zIndex: this.zIndex,
        targetType: "container",
        collision: Browser.isDevice ? {
          X: "fit",
          Y: "fit"
        } : {
          X: "flip",
          Y: "flip"
        },
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? {
          X: "center",
          Y: "center"
        } : {
          X: "left",
          Y: "bottom"
        },
        enableRtl: this.enableRtl,
        offsetY: offset,
        open: function() {
          _this.dateTimeWrapper.style.visibility = "visible";
          addClass([_this.timeIcon], ACTIVE3);
          if (!Browser.isDevice) {
            _this.timekeyConfigure = extend(_this.timekeyConfigure, _this.keyConfigs);
            _this.inputEvent = new KeyboardEvents(_this.inputWrapper.container, {
              keyAction: _this.timeKeyActionHandle.bind(_this),
              keyConfigs: _this.timekeyConfigure,
              eventName: "keydown"
            });
          }
        },
        close: function() {
          removeClass([_this.timeIcon], ACTIVE3);
          _this.unWireTimeListEvents();
          _this.inputElement.removeAttribute("aria-activedescendant");
          remove(_this.popupObject.element);
          _this.popupObject.destroy();
          _this.dateTimeWrapper.innerHTML = "";
          _this.listWrapper = _this.dateTimeWrapper = void 0;
          if (_this.inputEvent) {
            _this.inputEvent.destroy();
          }
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (Browser.isDevice && this.fullScreenMode) {
        this.popupObject.element.style.display = "flex";
        this.popupObject.element.style.maxHeight = "100%";
        this.popupObject.element.style.width = "100%";
      } else {
        this.popupObject.element.style.maxHeight = POPUPDIMENSION2;
      }
      if (Browser.isDevice && this.fullScreenMode) {
        var modelWrapper = createElement("div", {
          className: "e-datetime-mob-popup-wrap"
        });
        var modelHeader = this.createElement("div", {
          className: "e-model-header"
        });
        var modelTitleSpan = this.createElement("span", {
          className: "e-model-title"
        });
        modelTitleSpan.textContent = "Select time";
        var modelCloseIcon = this.createElement("span", {
          className: "e-popup-close"
        });
        EventHandler.add(modelCloseIcon, "mousedown touchstart", this.dateTimeCloseHandler, this);
        var timeContent = this.dateTimeWrapper.querySelector(".e-content");
        modelHeader.appendChild(modelCloseIcon);
        modelHeader.appendChild(modelTitleSpan);
        modelWrapper.appendChild(modelHeader);
        modelWrapper.appendChild(timeContent);
        this.dateTimeWrapper.insertBefore(modelWrapper, this.dateTimeWrapper.firstElementChild);
      }
    };
    DateTimePicker2.prototype.dateTimeCloseHandler = function(e) {
      this.hide();
    };
    DateTimePicker2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width;
      } else {
        width = "100%";
      }
      return width;
    };
    DateTimePicker2.prototype.setPopupWidth = function() {
      var width = this.setDimension(this.width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    DateTimePicker2.prototype.wireTimeListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    DateTimePicker2.prototype.unWireTimeListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
        if (!Browser.isDevice) {
          EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
          EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
        }
      }
    };
    DateTimePicker2.prototype.onMouseOver = function(event2) {
      var currentLi = closest(event2.target, "." + LISTCLASS3);
      this.setTimeHover(currentLi, HOVER3);
    };
    DateTimePicker2.prototype.onMouseLeave = function() {
      this.removeTimeHover(HOVER3);
    };
    DateTimePicker2.prototype.setTimeHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeTimeHover(className);
        addClass([li], className);
      }
    };
    DateTimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION2, 10);
      var popupHeight = this.dateTimeWrapper.getBoundingClientRect().height;
      if (Browser.isDevice && this.fullScreenMode) {
        return popupHeight;
      } else {
        return popupHeight > height ? height : popupHeight;
      }
    };
    DateTimePicker2.prototype.changeEvent = function(e) {
      _super.prototype.changeEvent.call(this, e);
      if ((this.value && this.value.valueOf()) !== (this.previousDateTime && +this.previousDateTime.valueOf())) {
        this.valueWithMinutes = this.value;
        this.setInputValue("date");
        this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      }
    };
    DateTimePicker2.prototype.updateValue = function(e) {
      this.setInputValue("time");
      if (+this.previousDateTime !== +this.value) {
        this.changedArgs = {
          value: this.value,
          event: e || null,
          isInteracted: !isNullOrUndefined(e),
          element: this.element
        };
        this.addTimeSelection();
        this.trigger("change", this.changedArgs);
        this.previousDateTime = this.previousDate = this.value;
      }
    };
    DateTimePicker2.prototype.setTimeScrollPosition = function() {
      var popupElement = this.selectedElement;
      if (!isNullOrUndefined(popupElement)) {
        this.findScrollTop(popupElement);
      } else if (this.dateTimeWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    DateTimePicker2.prototype.findScrollTop = function(element) {
      var listHeight = this.getPopupHeight();
      var nextElement = element.nextElementSibling;
      var height = nextElement ? nextElement.offsetTop : element.offsetTop;
      var lineHeight = element.getBoundingClientRect().height;
      if (height + element.offsetTop > listHeight) {
        if (Browser.isDevice && this.fullScreenMode) {
          var listContent = this.dateTimeWrapper.querySelector(".e-content");
          listContent.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
        } else {
          this.dateTimeWrapper.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
        }
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setScrollTo = function() {
      var element;
      var items = this.dateTimeWrapper.querySelectorAll("." + LISTCLASS3);
      if (items.length >= 0) {
        this.scrollInvoked = true;
        var initialTime = this.timeCollections[0];
        var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
        element = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element)) {
        this.findScrollTop(element);
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setInputValue = function(type) {
      if (type === "date") {
        this.inputElement.value = this.previousElementValue = this.getFormattedValue(this.getFullDateTime());
        this.setProperties({
          value: this.getFullDateTime()
        }, true);
      } else {
        var tempVal = this.getFormattedValue(new Date(this.timeCollections[this.activeIndex]));
        Input.setValue(tempVal, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousElementValue = this.inputElement.value;
        this.setProperties({
          value: new Date(this.timeCollections[this.activeIndex])
        }, true);
        if (this.enableMask) {
          this.createMask();
        }
      }
      this.updateIconState();
    };
    DateTimePicker2.prototype.getFullDateTime = function() {
      var value = null;
      if (this.isDateObject(this.valueWithMinutes)) {
        value = this.combineDateTime(this.valueWithMinutes);
      } else {
        value = this.previousDate;
      }
      return this.validateMinMaxRange(value);
    };
    DateTimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    DateTimePicker2.prototype.combineDateTime = function(value) {
      if (this.isDateObject(value)) {
        var day = this.previousDate.getDate();
        var month = this.previousDate.getMonth();
        var year = this.previousDate.getFullYear();
        var hour = value.getHours();
        var minutes = value.getMinutes();
        var seconds = value.getSeconds();
        return new Date(year, month, day, hour, minutes, seconds);
      } else {
        return this.previousDate;
      }
    };
    DateTimePicker2.prototype.onMouseClick = function(event2) {
      var target = event2.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS3);
      if (li && li.classList.contains(LISTCLASS3)) {
        this.timeValue = li.getAttribute("data-value");
        this.hide(event2);
      }
      this.setSelection(li, event2);
    };
    DateTimePicker2.prototype.setSelection = function(li, event2) {
      if (this.isValidLI(li) && !li.classList.contains(ACTIVE3)) {
        this.selectedElement = li;
        var index = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.activeIndex = index;
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], ACTIVE3);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.updateValue(event2);
      }
    };
    DateTimePicker2.prototype.setTimeActiveClass = function() {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      if (!isNullOrUndefined(collections)) {
        var items = collections.querySelectorAll("." + LISTCLASS3);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.valueWithMinutes) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              this.setTimeActiveDescendant();
              break;
            }
          }
        }
      }
    };
    DateTimePicker2.prototype.setTimeActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement) && this.value) {
        attributes(this.inputElement, {
          "aria-activedescendant": this.selectedElement.getAttribute("id")
        });
      } else {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    DateTimePicker2.prototype.addTimeSelection = function() {
      this.selectedElement = null;
      this.removeTimeSelection();
      this.setTimeActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], ACTIVE3);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    DateTimePicker2.prototype.removeTimeSelection = function() {
      this.removeTimeHover(HOVER3);
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        var items = this.dateTimeWrapper.querySelectorAll("." + ACTIVE3);
        if (items.length) {
          removeClass(items, ACTIVE3);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    DateTimePicker2.prototype.removeTimeHover = function(className) {
      var hoveredItem = this.getTimeHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
      }
    };
    DateTimePicker2.prototype.getTimeHoverItem = function(className) {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      var hoveredItem;
      if (!isNullOrUndefined(collections)) {
        hoveredItem = collections.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    DateTimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS3) && !li.classList.contains(DISABLED5);
    };
    DateTimePicker2.prototype.calculateStartEnd = function(value, range, method) {
      var day = value.getDate();
      var month = value.getMonth();
      var year = value.getFullYear();
      var hours = value.getHours();
      var minutes = value.getMinutes();
      var seconds = value.getSeconds();
      var milliseconds = value.getMilliseconds();
      if (range) {
        if (method === "starttime") {
          return new Date(year, month, day, 0, 0, 0);
        } else {
          return new Date(year, month, day, 23, 59, 59);
        }
      } else {
        return new Date(year, month, day, hours, minutes, seconds, milliseconds);
      }
    };
    DateTimePicker2.prototype.startTime = function(date) {
      var tempStartValue;
      var start;
      var tempMin = this.min;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      if (+value.getDate() === +tempMin.getDate() && +value.getMonth() === +tempMin.getMonth() && +value.getFullYear() === +tempMin.getFullYear() || +new Date(value.getFullYear(), value.getMonth(), value.getDate()) <= +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate())) {
        start = false;
        tempStartValue = this.min;
      } else if (+value < +this.max && +value > +this.min) {
        start = true;
        tempStartValue = value;
      } else if (+value >= +this.max) {
        start = true;
        tempStartValue = this.max;
      }
      return this.calculateStartEnd(tempStartValue, start, "starttime");
    };
    DateTimePicker2.prototype.TimePopupFormat = function() {
      var format = "";
      var formatCount = 0;
      var proxy = this;
      function formatValueSpecifier(formattext) {
        switch (formattext) {
          case "d":
          case "dd":
          case "ddd":
          case "dddd":
          case "M":
          case "MM":
          case "MMM":
          case "MMMM":
          case "y":
          case "yy":
          case "yyy":
          case "yyyy":
            if (format === "") {
              format = format + formattext;
            } else {
              format = format + "/" + formattext;
            }
            formatCount = formatCount + 1;
            break;
        }
        if (formatCount > 2) {
          proxy.dateFormatString = format;
        }
        return format;
      }
      return formatValueSpecifier;
    };
    DateTimePicker2.prototype.endTime = function(date) {
      var tempEndValue;
      var end;
      var tempMax = this.max;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      if (+value.getDate() === +tempMax.getDate() && +value.getMonth() === +tempMax.getMonth() && +value.getFullYear() === +tempMax.getFullYear() || +new Date(value.getUTCFullYear(), value.getMonth(), value.getDate()) >= +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate())) {
        end = false;
        tempEndValue = this.max;
      } else if (+value < +this.max && +value > +this.min) {
        end = true;
        tempEndValue = value;
      } else if (+value <= +this.min) {
        end = true;
        tempEndValue = this.min;
      }
      return this.calculateStartEnd(tempEndValue, end, "endtime");
    };
    DateTimePicker2.prototype.hide = function(e) {
      var _this = this;
      if (this.popupObj || this.dateTimeWrapper) {
        this.preventArgs = {
          cancel: false,
          popup: this.popupObj || this.popupObject,
          event: e || null
        };
        var eventArgs = this.preventArgs;
        if (isNullOrUndefined(this.popupObj)) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.dateTimeCloseEventCallback(e, eventArgs2);
          });
        } else {
          this.dateTimeCloseEventCallback(e, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DateTimePicker2.prototype.dateTimeCloseEventCallback = function(e, eventArgs) {
      this.preventArgs = eventArgs;
      if (!this.preventArgs.cancel) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        } else if (this.isTimePopupOpen()) {
          this.closePopup(e);
          removeClass([document.body], OVERFLOW4);
          if (Browser.isDevice && this.timeModal) {
            this.timeModal.style.display = "none";
            this.timeModal.outerHTML = "";
            this.timeModal = null;
          }
          this.setTimeActiveDescendant();
        }
      }
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DateTimePicker2.prototype.closePopup = function(e) {
      if (this.isTimePopupOpen() && this.popupObject) {
        var animModel = {
          name: "FadeOut",
          duration: ANIMATIONDURATION2,
          delay: 0
        };
        this.popupObject.hide(new Animation(animModel));
        this.inputWrapper.container.classList.remove(ICONANIMATION2);
        attributes(this.inputElement, {
          "aria-expanded": "false"
        });
        this.inputElement.removeAttribute("aria-owns");
        this.inputElement.removeAttribute("aria-controls");
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
      }
    };
    DateTimePicker2.prototype.preRender = function() {
      this.checkFormat();
      this.dateTimeFormat = this.cldrDateTimeFormat();
      _super.prototype.preRender.call(this);
      removeClass([this.inputElementCopy], [ROOT5]);
    };
    DateTimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.setProperties({
          min: this.validateValue(date.min)
        }, true);
      } else {
        this.setProperties({
          max: this.validateValue(date.max)
        }, true);
      }
    };
    DateTimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["style", "name", "step", "disabled", "readonly", "value", "min", "max", "placeholder", "type"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({
                  readonly
                }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({
                  placeholder: this.inputElement.getAttribute(prop)
                }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({
                    min: value
                  }, !isDynamic);
                }
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? false : true;
                this.setProperties({
                  enabled
                }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({
                    value
                  }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({
                    max: value
                  }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    DateTimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.calendarMode === "Islamic") {
        modules.push({
          args: [this],
          member: "islamic",
          name: "Islamic"
        });
      }
      if (this.enableMask) {
        modules.push(this.maskedDateModule());
      }
      return modules;
    };
    DateTimePicker2.prototype.maskedDateModule = function() {
      var modules = {
        args: [this],
        member: "MaskedDateTime"
      };
      return modules;
    };
    DateTimePicker2.prototype.getTimeActiveElement = function() {
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        return this.dateTimeWrapper.querySelectorAll("." + ACTIVE3);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.createDateObj = function(val) {
      return val instanceof Date ? val : null;
    };
    DateTimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = this.valueWithMinutes;
        var status_1 = !isNullOrUndefined(value);
        if (this.checkDateValue(dateValue)) {
          var date = status_1 ? value.getDate() : DAY2;
          var month = status_1 ? value.getMonth() : MONTH4;
          var year = status_1 ? value.getFullYear() : YEAR4;
          var hour = status_1 ? value.getHours() : HOUR;
          var minute = status_1 ? value.getMinutes() : MINUTE;
          var second = status_1 ? value.getSeconds() : SECOND;
          var millisecond = status_1 ? value.getMilliseconds() : MILLISECOND;
          if (!this.scrollInvoked) {
            return new Date(year, month, date, hour, minute, second, millisecond);
          } else {
            this.scrollInvoked = false;
            return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds(), dateValue.getMilliseconds());
          }
        }
      }
      return null;
    };
    DateTimePicker2.prototype.findNextTimeElement = function(event2) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var dateTimeVal = null;
      var listCount = this.liCollections.length;
      if (!isNullOrUndefined(this.activeIndex) || !isNullOrUndefined(this.checkDateValue(value))) {
        if (event2.action === "home") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[0]));
          this.activeIndex = 0;
        } else if (event2.action === "end") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[this.timeCollections.length - 1]));
          this.activeIndex = this.timeCollections.length - 1;
        } else {
          if (event2.action === "down") {
            for (var i = 0; i < listCount; i++) {
              if (+value < this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          } else {
            for (var i = listCount - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(isNullOrUndefined(dateTimeVal) ? null : new Date(dateTimeVal));
      }
    };
    DateTimePicker2.prototype.setTimeValue = function(date, value) {
      var dateString;
      var time;
      var val = this.validateMinMaxRange(value);
      var newval = this.createDateObj(val);
      if (this.getFormattedValue(newval) !== (!isNullOrUndefined(this.value) ? this.getFormattedValue(this.value) : null)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      }
      if (this.calendarMode === "Gregorian") {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd"
        });
      } else {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd",
          calendar: "islamic"
        });
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      return time;
    };
    DateTimePicker2.prototype.timeElementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value)) && !this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.setTimeValue(date, value);
      }
      return null;
    };
    DateTimePicker2.prototype.timeKeyHandler = function(event2) {
      if (isNullOrUndefined(this.step) || this.step <= 0) {
        return;
      }
      var listCount = this.timeCollections.length;
      if (isNullOrUndefined(this.getTimeActiveElement()) || this.getTimeActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            this.activeIndex = 0;
            this.selectedElement = this.liCollections[0];
            this.timeElementValue(new Date(this.timeCollections[0]));
          } else {
            this.findNextTimeElement(event2);
          }
        }
      } else {
        var nextItemValue = void 0;
        if (event2.keyCode >= 37 && event2.keyCode <= 40) {
          var index = event2.keyCode === 40 || event2.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === listCount ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? listCount - 1 : this.activeIndex;
          nextItemValue = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event2.action === "home") {
          this.activeIndex = 0;
          nextItemValue = this.timeCollections[0];
        } else if (event2.action === "end") {
          this.activeIndex = listCount - 1;
          nextItemValue = this.timeCollections[listCount - 1];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(new Date(nextItemValue));
      }
      this.isNavigate = true;
      this.setTimeHover(this.selectedElement, NAVIGATION2);
      this.setTimeActiveDescendant();
      if (this.isTimePopupOpen() && this.selectedElement !== null && (!event2 || event2.type !== "click")) {
        this.setTimeScrollPosition();
      }
    };
    DateTimePicker2.prototype.timeKeyActionHandle = function(event2) {
      if (this.enabled) {
        if (event2.action !== "right" && event2.action !== "left" && event2.action !== "tab") {
          event2.preventDefault();
        }
        switch (event2.action) {
          case "up":
          case "down":
          case "home":
          case "end":
            this.timeKeyHandler(event2);
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.setInputValue("time");
              if (+this.previousDateTime !== +this.value) {
                this.changedArgs.value = this.value;
                this.addTimeSelection();
                this.previousDateTime = this.value;
              }
            } else {
              this.updateValue(event2);
            }
            this.hide(event2);
            addClass([this.inputWrapper.container], INPUTFOCUS3);
            this.isNavigate = false;
            event2.stopPropagation();
            break;
          case "escape":
            this.hide(event2);
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    DateTimePicker2.prototype.inputKeyAction = function(event2) {
      switch (event2.action) {
        case "altDownArrow":
          this.strictModeUpdate();
          this.updateInput();
          this.toggle(event2);
          break;
      }
    };
    DateTimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["blur", "change", "cleared", "close", "created", "destroyed", "focus", "navigated", "open", "renderDayCell"];
        if (openPopup.indexOf(prop) > 0 && this.isReact) {
          this.isDynamicValueChanged = true;
        }
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            newProp.value = this.validateValue(newProp.value);
            if (this.enableMask) {
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              Input.setValue(this.getFormattedValue(newProp.value), this.inputElement, this.floatLabelType, this.showClearButton);
            }
            this.valueWithMinutes = newProp.value;
            this.setProperties({
              value: newProp.value
            }, true);
            if (this.popupObj) {
              this.popupUpdate();
            }
            this.previousDateTime = new Date(this.inputElement.value);
            this.updateInput();
            this.changeTrigger(null);
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask && this.value) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            this.updateInput();
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "cssClass":
            if (!isNullOrUndefined(oldProp.cssClass)) {
              oldProp.cssClass = oldProp.cssClass.replace(/\s+/g, " ").trim();
            }
            if (!isNullOrUndefined(newProp.cssClass)) {
              newProp.cssClass = newProp.cssClass.replace(/\s+/g, " ").trim();
            }
            Input.setCssClass(newProp.cssClass, [this.inputWrapper.container], oldProp.cssClass);
            if (this.dateTimeWrapper) {
              Input.setCssClass(newProp.cssClass, [this.dateTimeWrapper], oldProp.cssClass);
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            if (this.dateTimeOptions && this.dateTimeOptions.placeholder == null) {
              this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
              }, true);
              Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
            }
            this.dateTimeFormat = this.cldrDateTimeFormat();
            _super.prototype.updateInput.call(this);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "format":
            this.setProperties({
              format: newProp.format
            }, true);
            this.checkFormat();
            this.dateTimeFormat = this.formatString;
            this.setValue();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            Input.calculateWidth(this.inputElement, this.inputWrapper.container);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
            }
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
              this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-date-time-icon");
            }
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkValue(newProp.scrollTo)))) {
              if (this.dateTimeWrapper) {
                this.setScrollTo();
              }
              this.setProperties({
                scrollTo: this.checkDateValue(new Date(this.checkValue(newProp.scrollTo)))
              }, true);
            } else {
              this.setProperties({
                scrollTo: null
              }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.maskedDateValue = "";
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    DateTimePicker2.prototype.getModuleName = function() {
      return "datetimepicker";
    };
    DateTimePicker2.prototype.restoreValue = function() {
      this.previousDateTime = this.previousDate;
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.valueWithMinutes = this.value;
      this.previousDate = this.value;
      this.previousElementValue = this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.getFormattedValue(this.inputValueCopy);
    };
    __decorate11([Property(null)], DateTimePicker2.prototype, "timeFormat", void 0);
    __decorate11([Property(30)], DateTimePicker2.prototype, "step", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "scrollTo", void 0);
    __decorate11([Property(1e3)], DateTimePicker2.prototype, "zIndex", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "value", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "keyConfigs", void 0);
    __decorate11([Property({})], DateTimePicker2.prototype, "htmlAttributes", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "enablePersistence", void 0);
    __decorate11([Property(true)], DateTimePicker2.prototype, "allowEdit", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "isMultiSelection", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "values", void 0);
    __decorate11([Property(true)], DateTimePicker2.prototype, "showClearButton", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "placeholder", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "strictMode", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "fullScreenMode", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate11([Property(new Date(1900, 0, 1))], DateTimePicker2.prototype, "min", void 0);
    __decorate11([Property(new Date(2099, 11, 31))], DateTimePicker2.prototype, "max", void 0);
    __decorate11([Property(null)], DateTimePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate11([Property("Gregorian")], DateTimePicker2.prototype, "calendarMode", void 0);
    __decorate11([Property("Month")], DateTimePicker2.prototype, "start", void 0);
    __decorate11([Property("Month")], DateTimePicker2.prototype, "depth", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "weekNumber", void 0);
    __decorate11([Property(true)], DateTimePicker2.prototype, "showTodayButton", void 0);
    __decorate11([Property("Short")], DateTimePicker2.prototype, "dayHeaderFormat", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "openOnFocus", void 0);
    __decorate11([Property(false)], DateTimePicker2.prototype, "enableMask", void 0);
    __decorate11([Property({
      day: "day",
      month: "month",
      year: "year",
      hour: "hour",
      minute: "minute",
      second: "second",
      dayOfTheWeek: "day of the week"
    })], DateTimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "open", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "close", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "cleared", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "blur", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "focus", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "created", void 0);
    __decorate11([Event2()], DateTimePicker2.prototype, "destroyed", void 0);
    DateTimePicker2 = __decorate11([NotifyPropertyChanges], DateTimePicker2);
    return DateTimePicker2;
  }(DatePicker)
);

// node_modules/@syncfusion/ej2-calendars/src/maskbase/masked-date-time.js
var ARROWLEFT = "ArrowLeft";
var ARROWRIGHT = "ArrowRight";
var ARROWUP = "ArrowUp";
var ARROWDOWN = "ArrowDown";
var TAB = "Tab";
var SHIFTTAB = "shiftTab";
var END = "End";
var HOME = "Home";
var MaskedDateTime = (
  /** @class */
  function() {
    function MaskedDateTime2(parent) {
      this.mask = "";
      this.defaultConstant = {
        day: "day",
        month: "month",
        year: "year",
        hour: "hour",
        minute: "minute",
        second: "second",
        dayOfTheWeek: "day of the week"
      };
      this.hiddenMask = "";
      this.validCharacters = "dMyhmHfasz";
      this.isDayPart = false;
      this.isMonthPart = false;
      this.isYearPart = false;
      this.isHourPart = false;
      this.isMinutePart = false;
      this.isSecondsPart = false;
      this.isMilliSecondsPart = false;
      this.monthCharacter = "";
      this.periodCharacter = "";
      this.isHiddenMask = false;
      this.isComplete = false;
      this.isNavigate = false;
      this.navigated = false;
      this.isBlur = false;
      this.formatRegex = /EEEEE|EEEE|EEE|EE|E|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yyy|yy|y|HH|H|hh|h|mm|m|fff|ff|f|aa|a|ss|s|zzzz|zzz|zz|z|'[^']*'|'[^']*'/g;
      this.isDeletion = false;
      this.isShortYear = false;
      this.isDeleteKey = false;
      this.isDateZero = false;
      this.isMonthZero = false;
      this.isYearZero = false;
      this.isLeadingZero = false;
      this.dayTypeCount = 0;
      this.monthTypeCount = 0;
      this.hourTypeCount = 0;
      this.minuteTypeCount = 0;
      this.secondTypeCount = 0;
      this.parent = parent;
      this.dateformat = this.getCulturedFormat();
      this.maskDateValue = this.parent.value != null ? /* @__PURE__ */ new Date(+this.parent.value) : /* @__PURE__ */ new Date();
      this.maskDateValue.setMonth(0);
      this.maskDateValue.setHours(0);
      this.maskDateValue.setMinutes(0);
      this.maskDateValue.setSeconds(0);
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.removeEventListener();
      this.addEventListener();
    }
    MaskedDateTime2.prototype.getModuleName = function() {
      return "MaskedDateTime";
    };
    MaskedDateTime2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("createMask", this.createMask, this);
      this.parent.on("setMaskSelection", this.validCharacterCheck, this);
      this.parent.on("inputHandler", this.maskInputHandler, this);
      this.parent.on("keyDownHandler", this.maskKeydownHandler, this);
      this.parent.on("clearHandler", this.clearHandler, this);
    };
    MaskedDateTime2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("createMask", this.createMask);
      this.parent.off("setMaskSelection", this.validCharacterCheck);
      this.parent.off("inputHandler", this.maskInputHandler);
      this.parent.off("keyDownHandler", this.maskKeydownHandler);
      this.parent.off("clearHandler", this.clearHandler);
    };
    MaskedDateTime2.prototype.createMask = function(mask) {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.dateformat = this.getCulturedFormat();
      if (this.parent.maskPlaceholder.day) {
        this.defaultConstant["day"] = this.parent.maskPlaceholder.day;
      }
      if (this.parent.maskPlaceholder.month) {
        this.defaultConstant["month"] = this.parent.maskPlaceholder.month;
      }
      if (this.parent.maskPlaceholder.year) {
        this.defaultConstant["year"] = this.parent.maskPlaceholder.year;
      }
      if (this.parent.maskPlaceholder.hour) {
        this.defaultConstant["hour"] = this.parent.maskPlaceholder.hour;
      }
      if (this.parent.maskPlaceholder.minute) {
        this.defaultConstant["minute"] = this.parent.maskPlaceholder.minute;
      }
      if (this.parent.maskPlaceholder.second) {
        this.defaultConstant["second"] = this.parent.maskPlaceholder.second;
      }
      if (this.parent.maskPlaceholder.dayOfTheWeek) {
        this.defaultConstant["dayOfTheWeek"] = this.parent.maskPlaceholder.dayOfTheWeek.toString();
      }
      this.getCUltureMaskFormat();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.mask = this.previousValue = inputValue;
      this.parent.maskedDateValue = this.mask;
      if (this.parent.value) {
        this.navigated = true;
        this.isBlur = mask.isBlur;
        this.setDynamicValue();
      }
    };
    MaskedDateTime2.prototype.getCUltureMaskFormat = function() {
      this.l10n = new L10n(this.parent.moduleName, this.defaultConstant, this.parent.locale);
      this.objectString = Object.keys(this.defaultConstant);
      for (var i = 0; i < this.objectString.length; i++) {
        this.defaultConstant[this.objectString[i].toString()] = this.l10n.getConstant(this.objectString[i].toString());
      }
    };
    MaskedDateTime2.prototype.validCharacterCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      if (this.parent.moduleName !== "timepicker") {
        if (start === this.hiddenMask.length && this.mask === this.parent.inputElement.value) {
          start = 0;
        }
      }
      for (var i = start, j = start - 1; i < this.hiddenMask.length || j >= 0; i++, j--) {
        if (i < this.hiddenMask.length && this.validCharacters.indexOf(this.hiddenMask[i]) !== -1) {
          this.setSelection(this.hiddenMask[i]);
          return;
        }
        if (j >= 0 && this.validCharacters.indexOf(this.hiddenMask[j]) !== -1) {
          this.setSelection(this.hiddenMask[j]);
          return;
        }
      }
    };
    MaskedDateTime2.prototype.setDynamicValue = function() {
      this.maskDateValue = /* @__PURE__ */ new Date(+this.parent.value);
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = true;
      this.updateValue();
      if (!this.isBlur) {
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.setSelection = function(validChar) {
      var start = -1;
      var end = 0;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (this.hiddenMask[i] === validChar) {
          end = i + 1;
          if (start === -1) {
            start = i;
          }
        }
      }
      if (start < 0) {
        start = 0;
      }
      this.parent.inputElement.setSelectionRange(start, end);
    };
    MaskedDateTime2.prototype.maskKeydownHandler = function(args) {
      this.dayTypeCount = this.monthTypeCount = this.hourTypeCount = this.minuteTypeCount = this.secondTypeCount = 0;
      if (args.e.key === "Delete") {
        this.isDeleteKey = true;
        return;
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWLEFT || args.e.key === ARROWRIGHT || args.e.key === SHIFTTAB || args.e.key === TAB || args.e.action === SHIFTTAB || args.e.key === END || args.e.key === HOME)) {
        var start = this.parent.inputElement.selectionStart;
        var end = this.parent.inputElement.selectionEnd;
        var length_1 = this.parent.inputElement.value.length;
        if (start === 0 && end === length_1 && (args.e.key === TAB || args.e.action === SHIFTTAB)) {
          var index = args.e.action === SHIFTTAB ? end : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = index;
        }
        if (args.e.key === END || args.e.key === HOME) {
          var range = args.e.key === END ? length_1 : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = range;
        }
        this.navigateSelection(args.e.key === ARROWLEFT || args.e.action === SHIFTTAB || args.e.key === END ? true : false);
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWUP || args.e.key === ARROWDOWN)) {
        var start = this.parent.inputElement.selectionStart;
        var formatText = "";
        if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
          formatText = this.hiddenMask[start];
        }
        this.dateAlteration(args.e.key === ARROWDOWN ? true : false);
        var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = true;
        this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = false;
        this.previousHiddenMask = this.hiddenMask;
        this.previousValue = inputValue;
        this.parent.inputElement.value = inputValue;
        for (var i = 0; i < this.hiddenMask.length; i++) {
          if (formatText === this.hiddenMask[i]) {
            start = i;
            break;
          }
        }
        this.parent.inputElement.selectionStart = start;
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.isPersist = function() {
      var isPersist = this.parent.isFocused || this.navigated;
      return isPersist;
    };
    MaskedDateTime2.prototype.differenceCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      var inputValue = this.parent.inputElement.value;
      var previousVal = this.previousValue.substring(0, start + this.previousValue.length - inputValue.length);
      var newVal = inputValue.substring(0, start);
      var newDateValue = /* @__PURE__ */ new Date(+this.maskDateValue);
      var maxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
      if (previousVal.indexOf(newVal) === 0 && (newVal.length === 0 || this.previousHiddenMask[newVal.length - 1] !== this.previousHiddenMask[newVal.length])) {
        for (var i = newVal.length; i < previousVal.length; i++) {
          if (this.previousHiddenMask[i] !== "" && this.validCharacters.indexOf(this.previousHiddenMask[i]) >= 0) {
            this.isDeletion = this.handleDeletion(this.previousHiddenMask[i], false);
          }
        }
        if (this.isDeletion) {
          return;
        }
      }
      switch (this.previousHiddenMask[start - 1]) {
        case "d": {
          var date = (this.isDayPart && newDateValue.getDate().toString().length < 2 && !this.isPersist() ? newDateValue.getDate() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.isDateZero = newVal[start - 1] === "0";
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(date)) {
            return;
          }
          for (var i = 0; date > maxDate; i++) {
            date = parseInt(date.toString().slice(1), 10);
          }
          if (date >= 1) {
            newDateValue.setDate(date);
            this.isNavigate = date.toString().length === 2;
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            if (newDateValue.getMonth() !== this.maskDateValue.getMonth()) {
              return;
            }
            this.isDayPart = true;
            this.dayTypeCount = this.dayTypeCount + 1;
          } else {
            this.isDayPart = false;
            this.dayTypeCount = this.isDateZero ? this.dayTypeCount + 1 : this.dayTypeCount;
          }
          break;
        }
        case "M": {
          var month = void 0;
          if (newDateValue.getMonth().toString().length < 2 && !this.isPersist()) {
            month = (this.isMonthPart ? (newDateValue.getMonth() + 1) * 10 : 0) + parseInt(newVal[start - 1], 10);
          } else {
            month = parseInt(newVal[start - 1], 10);
          }
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          this.isMonthZero = newVal[start - 1] === "0";
          if (!isNaN(month)) {
            while (month > 12) {
              month = parseInt(month.toString().slice(1), 10);
            }
            if (month >= 1) {
              newDateValue.setMonth(month - 1);
              if (month >= 10 || month === 1) {
                if (this.isLeadingZero && month === 1) {
                  this.isNavigate = month.toString().length === 1;
                  this.isLeadingZero = false;
                } else {
                  this.isNavigate = month.toString().length === 2;
                }
              } else {
                this.isNavigate = month.toString().length === 1;
              }
              if (newDateValue.getMonth() !== month - 1) {
                newDateValue.setDate(1);
                newDateValue.setMonth(month - 1);
              }
              if (this.isDayPart) {
                var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
                var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
                if (this.previousDate.getDate() === previousMaxDate && currentMaxDate <= previousMaxDate) {
                  newDateValue.setDate(currentMaxDate);
                }
              }
              this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
              this.isMonthPart = true;
              this.monthTypeCount = this.monthTypeCount + 1;
              this.isLeadingZero = false;
            } else {
              newDateValue.setMonth(0);
              this.isLeadingZero = true;
              this.isMonthPart = false;
              this.monthTypeCount = this.isMonthZero ? this.monthTypeCount + 1 : this.monthTypeCount;
            }
          } else {
            var monthString = this.getCulturedValue("months[stand-alone].wide");
            var monthValue = Object.keys(monthString);
            this.monthCharacter += newVal[start - 1].toLowerCase();
            while (this.monthCharacter.length > 0) {
              var i = 1;
              for (var _i = 0, monthValue_1 = monthValue; _i < monthValue_1.length; _i++) {
                var months = monthValue_1[_i];
                if (monthString[i].toLowerCase().indexOf(this.monthCharacter) === 0) {
                  newDateValue.setMonth(i - 1);
                  this.isMonthPart = true;
                  this.maskDateValue = newDateValue;
                  return;
                }
                i++;
              }
              this.monthCharacter = this.monthCharacter.substring(1, this.monthCharacter.length);
            }
          }
          break;
        }
        case "y": {
          var year = (this.isYearPart && newDateValue.getFullYear().toString().length < 4 && !this.isShortYear ? newDateValue.getFullYear() * 10 : 0) + parseInt(newVal[start - 1], 10);
          var yearValue = (this.dateformat.match(/y/g) || []).length;
          yearValue = yearValue !== 2 ? 4 : yearValue;
          this.isShortYear = false;
          this.isYearZero = newVal[start - 1] === "0";
          if (isNaN(year)) {
            return;
          }
          while (year > 9999) {
            year = parseInt(year.toString().slice(1), 10);
          }
          if (year < 1) {
            this.isYearPart = false;
          } else {
            newDateValue.setFullYear(year);
            if (year.toString().length === yearValue) {
              this.isNavigate = true;
            }
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            this.isYearPart = true;
          }
          break;
        }
        case "h":
          this.hour = (this.isHourPart && (newDateValue.getHours() % 12 || 12).toString().length < 2 && !this.isPersist() ? (newDateValue.getHours() % 12 || 12) * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(this.hour)) {
            return;
          }
          while (this.hour > 12) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(Math.floor(newDateValue.getHours() / 12) * 12 + this.hour % 12);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount + 1;
          break;
        case "H":
          this.hour = (this.isHourPart && newDateValue.getHours().toString().length < 2 && !this.isPersist() ? newDateValue.getHours() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(this.hour)) {
            return;
          }
          for (var i = 0; this.hour > 23; i++) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(this.hour);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount + 1;
          break;
        case "m": {
          var minutes = (this.isMinutePart && newDateValue.getMinutes().toString().length < 2 && !this.isPersist() ? newDateValue.getMinutes() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(minutes)) {
            return;
          }
          for (var i = 0; minutes > 59; i++) {
            minutes = parseInt(minutes.toString().slice(1), 10);
          }
          newDateValue.setMinutes(minutes);
          this.isNavigate = minutes.toString().length === 2;
          this.isMinutePart = true;
          this.minuteTypeCount = this.minuteTypeCount + 1;
          break;
        }
        case "s": {
          var seconds = (this.isSecondsPart && newDateValue.getSeconds().toString().length < 2 && !this.isPersist() ? newDateValue.getSeconds() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.parent.isFocused = this.parent.isFocused ? false : this.parent.isFocused;
          this.navigated = this.navigated ? false : this.navigated;
          if (isNaN(seconds)) {
            return;
          }
          for (var i = 0; seconds > 59; i++) {
            seconds = parseInt(seconds.toString().slice(1), 10);
          }
          newDateValue.setSeconds(seconds);
          this.isNavigate = seconds.toString().length === 2;
          this.isSecondsPart = true;
          this.secondTypeCount = this.secondTypeCount + 1;
          break;
        }
        case "a": {
          this.periodCharacter += newVal[start - 1].toLowerCase();
          var periodString = this.getCulturedValue("dayPeriods.format.wide");
          var periodkeys = Object.keys(periodString);
          for (var i = 0; this.periodCharacter.length > 0; i++) {
            if (periodString[periodkeys[0]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() >= 12 || periodString[periodkeys[1]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() < 12) {
              newDateValue.setHours((newDateValue.getHours() + 12) % 24);
              this.maskDateValue = newDateValue;
            }
            this.periodCharacter = this.periodCharacter.substring(1, this.periodCharacter.length);
          }
          break;
        }
        default:
          break;
      }
      this.maskDateValue = newDateValue;
    };
    MaskedDateTime2.prototype.formatCheck = function() {
      var proxy = this;
      function formatValueSpecifier(formattext) {
        var result;
        var daysAbbreviated = proxy.getCulturedValue("days[stand-alone].abbreviated");
        var dayKeyAbbreviated = Object.keys(daysAbbreviated);
        var daysWide = proxy.getCulturedValue("days[stand-alone].wide");
        var dayKeyWide = Object.keys(daysWide);
        var daysNarrow = proxy.getCulturedValue("days[stand-alone].narrow");
        var dayKeyNarrow = Object.keys(daysNarrow);
        var monthAbbreviated = proxy.getCulturedValue("months[stand-alone].abbreviated");
        var monthWide = proxy.getCulturedValue("months[stand-alone].wide");
        var periodString = proxy.getCulturedValue("dayPeriods.format.wide");
        var periodkeys = Object.keys(periodString);
        var milliseconds;
        var dateOptions;
        switch (formattext) {
          case "ddd":
          case "dddd":
          case "d":
            result = proxy.isDayPart ? proxy.maskDateValue.getDate().toString() : proxy.defaultConstant["day"].toString();
            result = proxy.zeroCheck(proxy.isDateZero, proxy.isDayPart, result);
            if (proxy.dayTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.dayTypeCount = 0;
            }
            break;
          case "dd":
            result = proxy.isDayPart ? proxy.roundOff(proxy.maskDateValue.getDate(), 2) : proxy.defaultConstant["day"].toString();
            result = proxy.zeroCheck(proxy.isDateZero, proxy.isDayPart, result);
            if (proxy.dayTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.dayTypeCount = 0;
            }
            break;
          case "E":
          case "EE":
          case "EEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysAbbreviated[dayKeyAbbreviated[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysWide[dayKeyWide[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEEE":
            result = proxy.isDayPart && proxy.isMonthPart && proxy.isYearPart ? daysNarrow[dayKeyNarrow[proxy.maskDateValue.getDay()]].toString() : proxy.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "M":
            result = proxy.isMonthPart ? (proxy.maskDateValue.getMonth() + 1).toString() : proxy.defaultConstant["month"].toString();
            result = proxy.zeroCheck(proxy.isMonthZero, proxy.isMonthPart, result);
            if (proxy.monthTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.monthTypeCount = 0;
            }
            break;
          case "MM":
            result = proxy.isMonthPart ? proxy.roundOff(proxy.maskDateValue.getMonth() + 1, 2) : proxy.defaultConstant["month"].toString();
            result = proxy.zeroCheck(proxy.isMonthZero, proxy.isMonthPart, result);
            if (proxy.monthTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.monthTypeCount = 0;
            }
            break;
          case "MMM":
            result = proxy.isMonthPart ? monthAbbreviated[proxy.maskDateValue.getMonth() + 1] : proxy.defaultConstant["month"].toString();
            break;
          case "MMMM":
            result = proxy.isMonthPart ? monthWide[proxy.maskDateValue.getMonth() + 1] : proxy.defaultConstant["month"].toString();
            break;
          case "yy":
            result = proxy.isYearPart ? proxy.roundOff(proxy.maskDateValue.getFullYear() % 100, 2) : proxy.defaultConstant["year"].toString();
            result = proxy.zeroCheck(proxy.isYearZero, proxy.isYearPart, result);
            break;
          case "y":
          case "yyy":
          case "yyyy":
            result = proxy.isYearPart ? proxy.roundOff(proxy.maskDateValue.getFullYear(), 4) : proxy.defaultConstant["year"].toString();
            result = proxy.zeroCheck(proxy.isYearZero, proxy.isYearPart, result);
            break;
          case "h":
            result = proxy.isHourPart ? (proxy.maskDateValue.getHours() % 12 || 12).toString() : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "hh":
            result = proxy.isHourPart ? proxy.roundOff(proxy.maskDateValue.getHours() % 12 || 12, 2) : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "H":
            result = proxy.isHourPart ? proxy.maskDateValue.getHours().toString() : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "HH":
            result = proxy.isHourPart ? proxy.roundOff(proxy.maskDateValue.getHours(), 2) : proxy.defaultConstant["hour"].toString();
            if (proxy.hourTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.hourTypeCount = 0;
            }
            break;
          case "m":
            result = proxy.isMinutePart ? proxy.maskDateValue.getMinutes().toString() : proxy.defaultConstant["minute"].toString();
            if (proxy.minuteTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.minuteTypeCount = 0;
            }
            break;
          case "mm":
            result = proxy.isMinutePart ? proxy.roundOff(proxy.maskDateValue.getMinutes(), 2) : proxy.defaultConstant["minute"].toString();
            if (proxy.minuteTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.minuteTypeCount = 0;
            }
            break;
          case "s":
            result = proxy.isSecondsPart ? proxy.maskDateValue.getSeconds().toString() : proxy.defaultConstant["second"].toString();
            if (proxy.secondTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.secondTypeCount = 0;
            }
            break;
          case "ss":
            result = proxy.isSecondsPart ? proxy.roundOff(proxy.maskDateValue.getSeconds(), 2) : proxy.defaultConstant["second"].toString();
            if (proxy.secondTypeCount === 2) {
              proxy.isNavigate = true;
              proxy.secondTypeCount = 0;
            }
            break;
          case "f":
            result = Math.floor(proxy.maskDateValue.getMilliseconds() / 100).toString();
            break;
          case "ff":
            milliseconds = proxy.maskDateValue.getMilliseconds();
            if (proxy.maskDateValue.getMilliseconds() > 99) {
              milliseconds = Math.floor(proxy.maskDateValue.getMilliseconds() / 10);
            }
            result = proxy.roundOff(milliseconds, 2);
            break;
          case "fff":
            result = proxy.roundOff(proxy.maskDateValue.getMilliseconds(), 3);
            break;
          case "a":
          case "aa":
            result = proxy.maskDateValue.getHours() < 12 ? periodString["am"] : periodString["pm"];
            break;
          case "z":
          case "zz":
          case "zzz":
          case "zzzz":
            dateOptions = {
              format: formattext,
              type: "dateTime",
              skeleton: "yMd",
              calendar: proxy.parent.calendarMode
            };
            result = proxy.parent.globalize.formatDate(proxy.maskDateValue, dateOptions);
            break;
        }
        result = result !== void 0 ? result : formattext.slice(1, formattext.length - 1);
        if (proxy.isHiddenMask) {
          var hiddenChar = "";
          for (var i = 0; i < result.length; i++) {
            hiddenChar += formattext[0];
          }
          return hiddenChar;
        } else {
          return result;
        }
      }
      return formatValueSpecifier;
    };
    MaskedDateTime2.prototype.maskInputHandler = function() {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      }
      this.differenceCheck();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isDateZero = this.isMonthZero = this.isYearZero = false;
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.inputElement.value = inputValue;
      this.parent.inputElement.value = inputValue;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (formatText === this.hiddenMask[i]) {
          start = i;
          break;
        }
      }
      this.parent.inputElement.selectionStart = start;
      this.validCharacterCheck();
      if ((this.isNavigate || this.isDeletion) && !this.isDeleteKey) {
        var isbackward = this.isNavigate ? false : true;
        this.isNavigate = this.isDeletion = false;
        this.navigateSelection(isbackward);
      }
      if (this.isDeleteKey) {
        this.isDeletion = false;
      }
      this.isDeleteKey = false;
    };
    MaskedDateTime2.prototype.navigateSelection = function(isbackward) {
      var start = this.parent.inputElement.selectionStart;
      var end = this.parent.inputElement.selectionEnd;
      var formatIndex = isbackward ? start - 1 : end;
      this.navigated = true;
      while (formatIndex < this.hiddenMask.length && formatIndex >= 0) {
        if (this.validCharacters.indexOf(this.hiddenMask[formatIndex]) >= 0) {
          this.setSelection(this.hiddenMask[formatIndex]);
          break;
        }
        formatIndex = formatIndex + (isbackward ? -1 : 1);
      }
    };
    MaskedDateTime2.prototype.roundOff = function(val, count2) {
      var valueText = val.toString();
      var length = count2 - valueText.length;
      var result = "";
      for (var i = 0; i < length; i++) {
        result += "0";
      }
      return result + valueText;
    };
    MaskedDateTime2.prototype.zeroCheck = function(isZero, isDayPart, resultValue) {
      var result = resultValue;
      if (isZero && !isDayPart) {
        result = "0";
      }
      return result;
    };
    MaskedDateTime2.prototype.handleDeletion = function(format, isSegment) {
      switch (format) {
        case "d":
          this.isDayPart = isSegment;
          break;
        case "M":
          this.isMonthPart = isSegment;
          if (!isSegment) {
            this.maskDateValue.setMonth(0);
            this.monthCharacter = "";
          }
          break;
        case "y":
          this.isYearPart = isSegment;
          break;
        case "H":
        case "h":
          this.isHourPart = isSegment;
          if (!isSegment) {
            this.periodCharacter = "";
          }
          break;
        case "m":
          this.isMinutePart = isSegment;
          break;
        case "s":
          this.isSecondsPart = isSegment;
          break;
        default:
          return false;
      }
      return true;
    };
    MaskedDateTime2.prototype.dateAlteration = function(isDecrement) {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      } else {
        return;
      }
      var newDateValue = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      var incrementValue = isDecrement ? -1 : 1;
      switch (formatText) {
        case "d":
          newDateValue.setDate(newDateValue.getDate() + incrementValue);
          break;
        case "M": {
          var newMonth = newDateValue.getMonth() + incrementValue;
          newDateValue.setDate(1);
          newDateValue.setMonth(newMonth);
          if (this.isDayPart) {
            var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
            var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
            if (this.previousDate.getDate() === previousMaxDate && currentMaxDate <= previousMaxDate) {
              newDateValue.setDate(currentMaxDate);
            } else {
              newDateValue.setDate(this.previousDate.getDate());
            }
          } else {
            newDateValue.setDate(this.previousDate.getDate());
          }
          this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
          break;
        }
        case "y":
          newDateValue.setFullYear(newDateValue.getFullYear() + incrementValue);
          break;
        case "H":
        case "h":
          newDateValue.setHours(newDateValue.getHours() + incrementValue);
          break;
        case "m":
          newDateValue.setMinutes(newDateValue.getMinutes() + incrementValue);
          break;
        case "s":
          newDateValue.setSeconds(newDateValue.getSeconds() + incrementValue);
          break;
        case "a":
          newDateValue.setHours((newDateValue.getHours() + 12) % 24);
          break;
        default:
          break;
      }
      this.maskDateValue = newDateValue.getFullYear() > 0 ? newDateValue : this.maskDateValue;
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        this.handleDeletion(this.hiddenMask[start], true);
      }
    };
    MaskedDateTime2.prototype.getCulturedValue = function(format) {
      var locale = this.parent.locale;
      var result;
      if (locale === "en" || locale === "en-US") {
        result = getValue(format, getDefaultDateObject());
      } else {
        result = getValue("main." + locale + (".dates.calendars.gregorian." + format), cldrData);
      }
      return result;
    };
    MaskedDateTime2.prototype.getCulturedFormat = function() {
      var formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
      if (this.parent.moduleName === "datepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.format && this.parent.formatString) {
          formatString = this.parent.formatString;
        }
      }
      if (this.parent.moduleName === "datetimepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.dateTimeFormat) {
          formatString = this.parent.dateTimeFormat;
        }
      }
      if (this.parent.moduleName === "timepicker") {
        formatString = this.parent.cldrTimeFormat();
      }
      return formatString;
    };
    MaskedDateTime2.prototype.clearHandler = function() {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.updateValue();
    };
    MaskedDateTime2.prototype.updateValue = function() {
      this.monthCharacter = this.periodCharacter = "";
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.updateInputValue(inputValue);
    };
    MaskedDateTime2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return MaskedDateTime2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/common/excel-filter-base.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExcelFilterBase = (
  /** @class */
  function(_super) {
    __extends24(ExcelFilterBase2, _super);
    function ExcelFilterBase2(parent, customFltrOperators) {
      var _this = _super.call(this, parent) || this;
      _this.childRefs = [];
      _this.eventHandlers = {};
      _this.isDevice = false;
      _this.focusedMenuItem = null;
      _this.customFilterOperators = customFltrOperators;
      _this.isExcel = true;
      return _this;
    }
    ExcelFilterBase2.prototype.getCMenuDS = function(type, operator) {
      var options = {
        number: ["Equal", "NotEqual", "", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", "Between", "", "CustomFilter"],
        string: ["Equal", "NotEqual", "", "StartsWith", "EndsWith", "", "Contains", "NotContains", "", "CustomFilter"]
      };
      options.date = options.number;
      options.datetime = options.number;
      options.dateonly = options.number;
      var model = [];
      for (var i = 0; i < options["" + type].length; i++) {
        if (options["" + type][parseInt(i.toString(), 10)].length) {
          if (operator) {
            model.push({
              text: this.getLocalizedLabel(options["" + type][parseInt(i.toString(), 10)]) + "...",
              iconCss: "e-icons e-icon-check " + (operator === options["" + type][parseInt(i.toString(), 10)].toLowerCase() ? "" : "e-emptyicon")
            });
          } else {
            model.push({
              text: this.getLocalizedLabel(options["" + type][parseInt(i.toString(), 10)]) + "..."
            });
          }
        } else {
          model.push({
            separator: true
          });
        }
      }
      return model;
    };
    ExcelFilterBase2.prototype.destroy = function() {
      if (this.dlg) {
        this.unwireExEvents();
        _super.prototype.closeDialog.call(this);
      }
      if (!this.isDevice && this.menuObj) {
        var li = this.menuObj.element.querySelector("li.e-focused");
        if (!(li && parentsUntil(li, "e-excel-menu"))) {
          this.destroyCMenu();
        }
      }
      if (this.dlgObj && !this.dlgObj.isDestroyed) {
        this.removeDialog();
      }
    };
    ExcelFilterBase2.prototype.createMenu = function(type, isFiltered, isCheckIcon, eleOptions) {
      var options = {
        string: "TextFilter",
        date: "DateFilter",
        dateonly: "DateFilter",
        datetime: "DateTimeFilter",
        number: "NumberFilter"
      };
      this.menu = this.parent.createElement("div", {
        className: "e-contextmenu-wrapper"
      });
      if (this.parent.enableRtl) {
        this.menu.classList.add("e-rtl");
      } else {
        this.menu.classList.remove("e-rtl");
      }
      if (this.parent.cssClass) {
        this.menu.classList.add(this.parent.cssClass);
      }
      var ul = this.parent.createElement("ul");
      var icon = isFiltered ? "e-excl-filter-icon e-filtered" : "e-excl-filter-icon";
      if (this.parent.allowSorting && this.parent.getModuleName() === "grid" && !this.options.isResponsiveFilter) {
        var hdrele = this.parent.getColumnHeaderByUid(eleOptions.uid).getAttribute("aria-sort");
        var colIsSort = this.parent.getColumnByField(eleOptions.field).allowSorting;
        var isAsc = !colIsSort || hdrele === "ascending" ? "e-disabled e-excel-ascending" : "e-excel-ascending";
        var isDesc = !colIsSort || hdrele === "descending" ? "e-disabled e-excel-descending" : "e-excel-descending";
        var ascName = type === "string" ? this.getLocalizedLabel("SortAtoZ") : type === "datetime" || type === "date" ? this.getLocalizedLabel("SortByOldest") : this.getLocalizedLabel("SortSmallestToLargest");
        var descName = type === "string" ? this.getLocalizedLabel("SortZtoA") : type === "datetime" || type === "date" ? this.getLocalizedLabel("SortByNewest") : this.getLocalizedLabel("SortLargestToSmallest");
        ul.appendChild(this.createMenuElem(ascName, isAsc, "e-sortascending"));
        ul.appendChild(this.createMenuElem(descName, isDesc, "e-sortdescending"));
        var separator = this.parent.createElement("li", {
          className: "e-separator e-menu-item e-excel-separator"
        });
        ul.appendChild(separator);
      }
      if (!this.options.isResponsiveFilter) {
        ul.appendChild(this.createMenuElem(this.getLocalizedLabel("ClearFilter"), isFiltered ? "" : "e-disabled", icon));
      }
      if (type !== "boolean") {
        ul.appendChild(this.createMenuElem(this.getLocalizedLabel(options["" + type]), "e-submenu", isCheckIcon && this.ensureTextFilter() ? "e-icon-check" : icon + " e-emptyicon", true));
      }
      this.menu.appendChild(ul);
      this.parent.notify(beforeFltrcMenuOpen, {
        element: this.menu
      });
      this.parent.notify(refreshCustomFilterClearBtn, {
        isFiltered
      });
    };
    ExcelFilterBase2.prototype.createMenuElem = function(val, className, iconName, isSubMenu) {
      var li = this.parent.createElement("li", {
        className: className + " e-menu-item"
      });
      li.innerHTML = val;
      li.tabIndex = li.classList.contains("e-disabled") ? -1 : 0;
      li.insertBefore(this.parent.createElement("span", {
        className: "e-menu-icon e-icons " + iconName,
        attrs: {
          "aria-hidden": "true"
        }
      }), li.firstChild);
      if (isSubMenu) {
        li.appendChild(this.parent.createElement("span", {
          className: "e-icons e-caret"
        }));
      }
      return li;
    };
    ExcelFilterBase2.prototype.wireExEvents = function() {
      if (!Browser.isDevice) {
        EventHandler.add(this.dlg, "mouseover", this.hoverHandler, this);
      }
      EventHandler.add(this.dlg, "click", this.clickExHandler, this);
      EventHandler.add(this.dlg, "keyup", this.keyUp, this);
      EventHandler.add(this.dlg, "keydown", this.keyDown, this);
    };
    ExcelFilterBase2.prototype.unwireExEvents = function() {
      if (!Browser.isDevice) {
        EventHandler.remove(this.dlg, "mouseover", this.hoverHandler);
      }
      EventHandler.remove(this.dlg, "click", this.clickExHandler);
      EventHandler.remove(this.dlg, "keyup", this.keyUp);
      EventHandler.remove(this.dlg, "keydown", this.keyDown);
    };
    ExcelFilterBase2.prototype.clickExHandler = function(e) {
      var options = {
        string: "TextFilter",
        date: "DateFilter",
        datetime: "DateTimeFilter",
        number: "NumberFilter"
      };
      var menuItem = parentsUntil(e.target, "e-menu-item");
      if (menuItem) {
        if (this.getLocalizedLabel("ClearFilter") === menuItem.innerText.trim()) {
          this.clearFilter();
          this.closeDialog();
        } else if ((this.options.isResponsiveFilter || Browser.isDevice) && this.getLocalizedLabel(options[this.options.type]) === menuItem.innerText.trim()) {
          this.hoverHandler(e);
        }
      }
    };
    ExcelFilterBase2.prototype.focusNextOrPrevElement = function(e, focusableElements, focusClassName) {
      var nextIndex = e.key === "ArrowUp" || e.key === "Tab" && e.shiftKey ? focusableElements.indexOf(document.activeElement) - 1 : focusableElements.indexOf(document.activeElement) + 1;
      var nextElement = focusableElements[(nextIndex + focusableElements.length) % focusableElements.length];
      if (nextElement) {
        nextElement.focus();
        var focusClass = nextElement.classList.contains("e-chk-hidden") ? "e-chkfocus" : focusClassName;
        var target = nextElement.classList.contains("e-chk-hidden") ? parentsUntil(nextElement, "e-ftrchk") : parentsUntil(nextElement, "e-menu-item");
        this.excelSetFocus(target, focusClass);
      }
    };
    ExcelFilterBase2.prototype.keyUp = function(e) {
      if (e.key === "Tab" && e.shiftKey || e.key === "Tab") {
        var focusClass = e.target.classList.contains("e-chk-hidden") ? "e-chkfocus" : "e-menufocus";
        var target = e.target.classList.contains("e-menu-item") ? parentsUntil(e.target, "e-menu-item") : parentsUntil(e.target, "e-ftrchk");
        this.excelSetFocus(target, focusClass);
      } else if ((e.key === "ArrowUp" || e.key === "ArrowDown") && !e.altKey) {
        e.preventDefault();
        var focusableElements = Array.from(this.dlg.querySelectorAll('input, button, [tabindex]:not([tabindex="-1"]), .e-menu-item:not(.e-disabled):not(.e-separator)'));
        this.focusNextOrPrevElement(e, focusableElements, "e-menufocus");
      } else if ((e.key === "Enter" || e.code === "ArrowRight") && e.target.classList.contains("e-menu-item")) {
        e.preventDefault();
        e.target.click();
        if (e.target.classList.contains("e-submenu")) {
          this.hoverHandler(e);
          this.menuObj.element.querySelector(".e-menu-item").focus();
          this.excelSetFocus(parentsUntil(this.menuObj.element.querySelector(".e-menu-item"), "e-menu-item"), "e-focused");
          this.focusedMenuItem = this.menuObj.element.querySelector(".e-menu-item");
        }
      }
    };
    ExcelFilterBase2.prototype.keyDown = function(e) {
      if (e.key === "ArrowUp" || e.key === "ArrowDown") {
        e.preventDefault();
      }
    };
    ExcelFilterBase2.prototype.excelSetFocus = function(elem, className) {
      var prevElem = this.cmenu.querySelector("." + className);
      if (prevElem) {
        prevElem.classList.remove(className);
      }
      if (elem) {
        elem.classList.add(className);
      }
    };
    ExcelFilterBase2.prototype.destroyCMenu = function() {
      this.isCMenuOpen = false;
      if (this.menuObj && !this.menuObj.isDestroyed) {
        this.menuObj.destroy();
        EventHandler.remove(this.menuObj.element, "keydown", this.contextKeyDownHandler);
        remove(this.cmenu);
        this.parent.notify(renderResponsiveCmenu, {
          target: null,
          header: "",
          isOpen: false,
          col: this.options.column
        });
      }
    };
    ExcelFilterBase2.prototype.hoverHandler = function(e) {
      if (this.options.isResponsiveFilter && e.type === "mouseover") {
        return;
      }
      var target = e.target.querySelector(".e-contextmenu");
      var li = parentsUntil(e.target, "e-menu-item");
      var focused = this.menu.querySelector(".e-focused");
      var isSubMenu;
      if (focused) {
        focused.classList.remove("e-focused");
      }
      if (li) {
        li.classList.add("e-focused");
        isSubMenu = li.classList.contains("e-submenu");
      }
      if (target) {
        return;
      }
      if (!isSubMenu) {
        var submenu = this.menu.querySelector(".e-submenu");
        if (!isNullOrUndefined(submenu)) {
          submenu.classList.remove("e-selected");
        }
        this.destroyCMenu();
      }
      var selectedMenu = this.ensureTextFilter();
      if (!this.isCMenuOpen && isSubMenu) {
        li.classList.add("e-selected");
        this.isCMenuOpen = true;
        var menuOptions = {
          items: this.getCMenuDS(this.options.type, selectedMenu ? selectedMenu.replace(/\s/g, "") : void 0),
          select: this.selectHandler.bind(this),
          onClose: this.destroyCMenu.bind(this),
          enableRtl: this.parent.enableRtl,
          animationSettings: {
            effect: "None"
          },
          beforeClose: this.preventClose.bind(this),
          cssClass: this.options.isResponsiveFilter && this.parent.cssClass ? "e-res-contextmenu-wrapper " + this.parent.cssClass : this.options.isResponsiveFilter ? "e-res-contextmenu-wrapper" : this.parent.cssClass ? this.parent.cssClass : ""
        };
        this.parent.element.appendChild(this.cmenu);
        this.menuObj = new ContextMenu(menuOptions, this.cmenu);
        EventHandler.add(this.menuObj.element, "keydown", this.contextKeyDownHandler, this);
        var client = this.menu.querySelector(".e-submenu").getBoundingClientRect();
        var pos = {
          top: 0,
          left: 0
        };
        if (this.options.isResponsiveFilter) {
          var options = {
            string: "TextFilter",
            date: "DateFilter",
            datetime: "DateTimeFilter",
            number: "NumberFilter"
          };
          var content2 = document.querySelector(".e-responsive-dialog > .e-dlg-header-content");
          var height = content2.offsetHeight + 4;
          this.menuObj.element.style.height = "calc(100% - " + height + "px)";
          this.menuObj["open"](height, 0, document.body);
          var header = this.getLocalizedLabel(options[this.options.type]);
          this.parent.notify(renderResponsiveCmenu, {
            target: this.menuObj.element.parentElement,
            header,
            isOpen: true
          });
        } else {
          if (Browser.isDevice) {
            this.isDevice = true;
            var contextRect = this.getContextBounds();
            pos.top = (window.innerHeight - contextRect.height) / 2;
            pos.left = (window.innerWidth - contextRect.width) / 2;
            this.closeDialog();
            this.isDevice = false;
          } else {
            pos.top = Browser.isIE ? window.pageYOffset + client.top : window.scrollY + client.top;
            pos.left = this.getCMenuYPosition(this.dlg);
          }
          this.menuObj["open"](pos.top, pos.left, e.target);
        }
        applyBiggerTheme(this.parent.element, this.menuObj.element.parentElement);
      }
    };
    ExcelFilterBase2.prototype.contextKeyDownHandler = function(e) {
      if (e.key === "Tab" && e.shiftKey || e.key === "Tab") {
        e.preventDefault();
        var focusableElements = Array.from(this.menuObj.element.querySelectorAll('[tabindex]:not([tabindex="-1"]), .e-menu-item:not(.e-disabled):not(.e-separator)'));
        this.focusNextOrPrevElement(e, focusableElements, "e-focused");
      } else if (e.key === "ArrowLeft" || e.key === "Escape") {
        e.preventDefault();
        this.menuObj.close();
        this.focusedMenuItem = null;
        document.querySelector(".e-submenu.e-menu-item").classList.remove("e-selected");
        document.querySelector(".e-submenu.e-menu-item").focus();
      }
    };
    ExcelFilterBase2.prototype.ensureTextFilter = function() {
      var selectedMenu;
      var predicates = this.existingPredicate[this.options.field];
      if (predicates && predicates.length === 2) {
        if (predicates[0].operator === "greaterthanorequal" && predicates[1].operator === "lessthanorequal") {
          selectedMenu = "between";
        } else {
          selectedMenu = "customfilter";
        }
      } else {
        if (predicates && predicates.length === 1) {
          this.optrData = this.customFilterOperators[this.options.type + "Operator"];
          selectedMenu = predicates[0].operator;
        }
      }
      return selectedMenu;
    };
    ExcelFilterBase2.prototype.preventClose = function(args) {
      if (this.options && this.options.isResponsiveFilter && args.event) {
        var target = args.event.target;
        var isFilterBack = target.classList.contains("e-resfilterback") || target.classList.contains("e-res-back-btn") || target.classList.contains("e-menu-item");
        args.cancel = !isFilterBack;
      } else {
        if (args.event instanceof MouseEvent && args.event.target.classList.contains("e-submenu")) {
          args.cancel = true;
        }
      }
    };
    ExcelFilterBase2.prototype.getContextBounds = function() {
      this.menuObj.element.style.display = "block";
      return this.menuObj.element.getBoundingClientRect();
    };
    ExcelFilterBase2.prototype.getCMenuYPosition = function(target) {
      var contextWidth = this.getContextBounds().width;
      var targetPosition = target.getBoundingClientRect();
      var leftPos = targetPosition.right + contextWidth - this.parent.element.clientWidth;
      var targetBorder = target.offsetWidth - target.clientWidth;
      targetBorder = targetBorder ? targetBorder + 1 : 0;
      return leftPos < 1 ? targetPosition.right + 1 - targetBorder : targetPosition.left - contextWidth - 1 + targetBorder;
    };
    ExcelFilterBase2.prototype.openDialog = function(options) {
      var _this = this;
      this.updateModel(options);
      this.getAndSetChkElem(options);
      this.showDialog(options);
      if (options.cancel) {
        return;
      }
      this.dialogObj.dataBind();
      var filterLength = this.existingPredicate[options.field] && this.existingPredicate[options.field].length || this.options.filteredColumns.filter(function(col) {
        return _this.options.field === col.field;
      }).length;
      this.createMenu(options.type, filterLength > 0, filterLength === 1 || filterLength === 2, options);
      this.dlg.insertBefore(this.menu, this.dlg.firstChild);
      this.dlg.classList.add("e-excelfilter");
      if (this.parent.enableRtl) {
        this.dlg.classList.add("e-rtl");
      }
      this.dlg.classList.remove("e-checkboxfilter");
      this.cmenu = this.parent.createElement("ul", {
        className: "e-excel-menu"
      });
      var menuItems = this.dlg.querySelectorAll(".e-menu-item");
      menuItems.forEach(function(menuItem) {
        if (menuItem.scrollWidth > menuItem.clientWidth) {
          menuItem.setAttribute("title", menuItem.textContent);
        }
      });
      if (options.column.showColumnMenu) {
        this.parent.notify(filterDialogCreated, {});
      }
      this.wireExEvents();
    };
    ExcelFilterBase2.prototype.closeDialog = function() {
      this.destroy();
    };
    ExcelFilterBase2.prototype.selectHandler = function(e) {
      if (e.item) {
        this.parent.notify(filterCmenuSelect, {});
        this.menuItem = e.item;
        this.closeDialog();
        this.renderDialogue(e);
      }
    };
    ExcelFilterBase2.prototype.renderDialogue = function(e) {
      var _this = this;
      var target = e ? e.element : void 0;
      var column = this.options.field;
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var mainDiv = this.parent.createElement("div", {
        className: "e-xlfl-maindiv",
        id: isComplex ? complexFieldName + "-xlflmenu" : column + "-xlflmenu"
      });
      this.dlgDiv = this.parent.createElement("div", {
        className: "e-xlflmenu",
        id: isComplex ? complexFieldName + "-xlfldlg" : column + "-xlfldlg"
      });
      if (this.options.isResponsiveFilter) {
        var responsiveCnt = document.querySelector(".e-resfilter > .e-dlg-content > .e-xl-customfilterdiv");
        responsiveCnt.appendChild(this.dlgDiv);
      } else {
        this.parent.element.appendChild(this.dlgDiv);
      }
      this.dlgObj = new Dialog({
        header: this.getLocalizedLabel("CustomFilter"),
        isModal: true,
        overlayClick: this.removeDialog.bind(this),
        showCloseIcon: true,
        locale: this.parent.locale,
        closeOnEscape: true,
        target: document.body,
        // target: this.parent.element,
        visible: false,
        enableRtl: this.parent.enableRtl,
        open: function() {
          var rows = [].slice.call(_this.dlgObj.element.querySelectorAll("table.e-xlfl-table tr.e-xlfl-fields"));
          for (var i = 0; i < rows.length; i++) {
            var valInput = rows[i].children[1].querySelector(".e-control");
            var dropDownList = rows[i].querySelector(".e-dropdownlist.e-control")["ej2_instances"][0];
            if (dropDownList.value === "isempty" || dropDownList.value === "isnotempty" || dropDownList.value === "isnull" || dropDownList.value === "isnotnull") {
              valInput["ej2_instances"][0]["enabled"] = false;
            } else if (valInput && !isNullOrUndefined(valInput.getAttribute("disabled"))) {
              valInput["ej2_instances"][0]["enabled"] = true;
            }
          }
          var row2 = _this.dlgObj.element.querySelector("table.e-xlfl-table>tr");
          if (_this.options.column.filterTemplate) {
            var templateField_1 = isComplexField(_this.options.column.field) ? getComplexFieldID(_this.options.column.field) : _this.options.column.field;
            var isReactCompiler = _this.parent.isReact && typeof _this.options.column.filterTemplate !== "string";
            var isReactChild = _this.parent.parentDetails && _this.parent.parentDetails.parentInstObj && // eslint-disable-next-line @typescript-eslint/no-explicit-any
            _this.parent.parentDetails.parentInstObj.isReact;
            if (isReactCompiler || isReactChild) {
              _this.parent.renderTemplates(function() {
                row2.querySelector("#" + templateField_1 + "-xlfl-frstvalue").focus();
              });
            } else {
              row2.querySelector("#" + templateField_1 + "-xlfl-frstvalue").focus();
            }
          } else {
          }
        },
        close: this.removeDialog.bind(this),
        created: this.createdDialog.bind(this, target, column),
        buttons: [{
          click: this.filterBtnClick.bind(this, column),
          buttonModel: {
            content: this.getLocalizedLabel("OKButton"),
            isPrimary: true,
            cssClass: this.parent.cssClass ? "e-xlfl-okbtn " + this.parent.cssClass : "e-xlfl-okbtn"
          }
        }, {
          click: this.removeDialog.bind(this),
          buttonModel: {
            content: this.getLocalizedLabel("CancelButton"),
            cssClass: this.parent.cssClass ? "e-xlfl-cancelbtn " + this.parent.cssClass : "e-xlfl-cancelbtn"
          }
        }],
        content: mainDiv,
        width: 430,
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      var isStringTemplate = "isStringTemplate";
      this.dlgObj["" + isStringTemplate] = true;
      this.renderResponsiveDialog();
      this.dlgDiv.setAttribute("aria-label", this.getLocalizedLabel("CustomFilterDialogARIA"));
      this.childRefs.unshift(this.dlgObj);
      this.dlgObj.appendTo(this.dlgDiv);
    };
    ExcelFilterBase2.prototype.renderResponsiveDialog = function() {
      if (this.options.isResponsiveFilter) {
        var rowResponsiveDlg = document.querySelector(".e-row-responsive-filter");
        if (rowResponsiveDlg) {
          rowResponsiveDlg.classList.remove("e-row-responsive-filter");
        }
        this.dlgObj.buttons = [{}];
        this.dlgObj.header = void 0;
        this.dlgObj.position = {
          X: "",
          Y: ""
        };
        this.dlgObj.target = document.querySelector(".e-resfilter > .e-dlg-content > .e-xl-customfilterdiv");
        this.dlgObj.width = "100%";
        this.dlgObj.isModal = false;
        this.dlgObj.showCloseIcon = false;
      }
    };
    ExcelFilterBase2.prototype.removeDialog = function() {
      this.parent.notify(customFilterClose, {});
      if ((this.parent.isReact || this.parent.isVue) && this.parent.destroyTemplate !== void 0) {
        clearReactVueTemplates(this.parent, ["filterTemplate"]);
      }
      this.removeObjects(this.childRefs);
      remove(this.dlgDiv);
      this.parent.notify(filterDialogClose, {});
    };
    ExcelFilterBase2.prototype.createdDialog = function(target, column) {
      this.renderCustomFilter(target, column);
      this.dlgObj.element.style.left = "0px";
      if (!this.options.isResponsiveFilter) {
        this.dlgObj.element.style.top = "0px";
      } else {
        var content2 = document.querySelector(".e-responsive-dialog > .e-dlg-header-content");
        var height = content2.offsetHeight + 4;
        this.dlgObj.element.style.top = height + "px";
      }
      if (!this.options.isResponsiveFilter && Browser.isDevice && window.innerWidth < 440) {
        this.dlgObj.element.style.width = "90%";
      }
      this.parent.notify(beforeCustomFilterOpen, {
        column,
        dialog: this.dialogObj
      });
      this.dlgObj.show();
      applyBiggerTheme(this.parent.element, this.dlgObj.element.parentElement);
    };
    ExcelFilterBase2.prototype.renderCustomFilter = function(target, column) {
      var dlgConetntEle = this.dlgObj.element.querySelector(".e-xlfl-maindiv");
      var dlgFields = this.parent.createElement("div", {
        innerHTML: this.getLocalizedLabel("ShowRowsWhere"),
        className: "e-xlfl-dlgfields"
      });
      dlgConetntEle.appendChild(dlgFields);
      var fieldSet = this.parent.createElement("div", {
        innerHTML: this.options.displayName,
        className: "e-xlfl-fieldset"
      });
      dlgConetntEle.appendChild(fieldSet);
      this.renderFilterUI(column, dlgConetntEle);
    };
    ExcelFilterBase2.prototype.filterBtnClick = function(col) {
      var isComplex = !isNullOrUndefined(col) && isComplexField(col);
      var complexFieldName = !isNullOrUndefined(col) && getComplexFieldID(col);
      var colValue = isComplex ? complexFieldName : col;
      var fValue = this.dlgDiv.querySelector("#" + colValue + "-xlfl-frstvalue").ej2_instances[0];
      var fOperator = this.dlgDiv.querySelector("#" + colValue + "-xlfl-frstoptr").ej2_instances[0];
      var sValue = this.dlgDiv.querySelector("#" + colValue + "-xlfl-secndvalue").ej2_instances[0];
      var sOperator = this.dlgDiv.querySelector("#" + colValue + "-xlfl-secndoptr").ej2_instances[0];
      var checkBoxValue;
      if (this.options.type === "string") {
        var checkBox = this.dlgDiv.querySelector("#" + colValue + "-xlflmtcase").ej2_instances[0];
        checkBoxValue = checkBox.checked;
      }
      var andRadio = this.dlgDiv.querySelector("#" + colValue + "e-xlfl-frstpredicate").ej2_instances[0];
      var predicate = andRadio.checked ? "and" : "or";
      if (sValue.value === null) {
        predicate = "or";
      }
      this.filterByColumn(this.options.field, fOperator.value, fValue.value, predicate, checkBoxValue, this.options.ignoreAccent, sOperator.value, sValue.value);
      this.removeDialog();
    };
    ExcelFilterBase2.prototype.filterByColumn = function(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
      var col = this.parent.getColumnByField ? this.parent.getColumnByField(fieldName) : this.options.column;
      var field = this.isForeignColumn(col) ? col.foreignKeyValue : fieldName;
      var fColl = [];
      var mPredicate;
      var arg = {
        instance: this,
        handler: this.filterByColumn,
        arg1: fieldName,
        arg2: firstOperator,
        arg3: firstValue,
        arg4: predicate,
        arg5: matchCase,
        arg6: ignoreAccent,
        arg7: secondOperator,
        arg8: secondValue,
        cancel: false
      };
      this.parent.notify(fltrPrevent, arg);
      if (arg.cancel) {
        return;
      }
      fColl.push({
        field,
        predicate,
        matchCase,
        ignoreAccent,
        operator: firstOperator,
        value: arg.arg3,
        type: this.options.type
      });
      mPredicate = new Predicate(field, firstOperator.toLowerCase(), arg.arg3, !matchCase, ignoreAccent);
      if (!isNullOrUndefined(secondValue) && !isNullOrUndefined(secondOperator)) {
        fColl.push({
          field,
          predicate,
          matchCase,
          ignoreAccent,
          operator: secondOperator,
          value: arg.arg8,
          type: this.options.type
        });
        mPredicate = mPredicate["" + predicate](field, secondOperator.toLowerCase(), secondValue, !matchCase, ignoreAccent);
      }
      var args = {
        action: "filtering",
        filterCollection: fColl,
        field: this.options.field,
        ejpredicate: mPredicate,
        actualPredicate: fColl
      };
      if (this.isForeignColumn(col)) {
        this.foreignKeyFilter(args, fColl, mPredicate);
      } else {
        this.options.handler(args);
      }
    };
    ExcelFilterBase2.prototype.renderOperatorUI = function(column, table2, elementID, predicates, isFirst) {
      var fieldElement = this.parent.createElement("tr", {
        className: "e-xlfl-fields",
        attrs: {
          role: "row"
        }
      });
      table2.appendChild(fieldElement);
      var xlfloptr = this.parent.createElement("td", {
        className: "e-xlfl-optr"
      });
      fieldElement.appendChild(xlfloptr);
      var optrDiv = this.parent.createElement("div", {
        className: "e-xlfl-optrdiv"
      });
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var optrInput = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + elementID : column + elementID
      });
      optrDiv.appendChild(optrInput);
      xlfloptr.appendChild(optrDiv);
      var optr = this.options.type + "Operator";
      var dropDatasource = this.customFilterOperators["" + optr];
      this.optrData = dropDatasource;
      var selectedValue = this.dropSelectedVal(this.options.column, predicates, isFirst);
      var menuText = "";
      if (this.menuItem) {
        menuText = this.menuItem.text.slice(0, -3);
        if (menuText !== this.getLocalizedLabel("CustomFilter")) {
          selectedValue = isFirst ? menuText : void 0;
        }
        if (menuText === this.getLocalizedLabel("Between")) {
          selectedValue = this.getLocalizedLabel(isFirst ? "GreaterThanOrEqual" : "LessThanOrEqual");
        }
      }
      var col = this.options.column;
      var dropOptr = new DropDownList(extend2({
        dataSource: dropDatasource,
        fields: {
          text: "text",
          value: "value"
        },
        text: selectedValue,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, col.filter.params));
      this.childRefs.unshift(dropOptr);
      var evt = {
        "open": this.dropDownOpen.bind(this),
        "change": this.dropDownValueChange.bind(this)
      };
      registerEventHandlers(optrInput.id, [open, change], evt, this);
      dropOptr.addEventListener(open, this.eventHandlers[optrInput.id][open]);
      dropOptr.addEventListener(change, this.eventHandlers[optrInput.id][change]);
      dropOptr.appendTo(optrInput);
      var operator = this.getSelectedValue(selectedValue);
      return {
        fieldElement,
        operator
      };
    };
    ExcelFilterBase2.prototype.removeHandlersFromComponent = function(component) {
      if (component.element.classList.contains("e-dropdownlist")) {
        removeEventHandlers(component, [open, change], this);
      } else if (component.element.classList.contains("e-autocomplete")) {
        removeEventHandlers(component, [actionComplete, focus], this);
      }
    };
    ExcelFilterBase2.prototype.dropDownOpen = function(args) {
      args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
    };
    ExcelFilterBase2.prototype.dropDownValueChange = function(args) {
      if (args.element.id.includes("-xlfl-frstoptr")) {
        this.firstOperator = args.value.toString();
      } else {
        this.secondOperator = args.value.toString();
      }
      var valInput = args.element.closest(".e-xlfl-fields").children[1].querySelector(".e-control");
      var dropDownList = args.element["ej2_instances"][0];
      if (dropDownList.value === "isempty" || dropDownList.value === "isnotempty" || dropDownList.value === "isnull" || dropDownList.value === "isnotnull") {
        valInput["ej2_instances"][0]["enabled"] = false;
      } else if (!isNullOrUndefined(valInput.getAttribute("disabled"))) {
        valInput["ej2_instances"][0]["enabled"] = true;
      }
    };
    ExcelFilterBase2.prototype.getFilterUIInfo = function() {
      return {
        firstOperator: this.firstOperator,
        secondOperator: this.secondOperator,
        field: this.options.field
      };
    };
    ExcelFilterBase2.prototype.getSelectedValue = function(text) {
      var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("text", "equal", text));
      return !isNullOrUndefined(selectedField[0]) ? selectedField[0].value : "";
    };
    ExcelFilterBase2.prototype.dropSelectedVal = function(col, predicates, isFirst) {
      var operator;
      if (predicates && predicates.length > 0) {
        operator = predicates.length === 2 ? isFirst ? predicates[0].operator : predicates[1].operator : isFirst ? predicates[0].operator : void 0;
      } else if (isFirst && col.type === "string" && !col.filter.operator) {
        operator = "startswith";
      } else {
        operator = isFirst ? col.filter.operator || "equal" : void 0;
      }
      return this.getSelectedText(operator);
    };
    ExcelFilterBase2.prototype.getSelectedText = function(operator) {
      var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("value", "equal", operator));
      return !isNullOrUndefined(selectedField[0]) ? selectedField[0].text : "";
    };
    ExcelFilterBase2.prototype.renderFilterUI = function(column, dlgConetntEle) {
      var predicates = this.existingPredicate["" + column];
      var table2 = this.parent.createElement("table", {
        className: "e-xlfl-table",
        attrs: {
          role: "grid"
        }
      });
      dlgConetntEle.appendChild(table2);
      var colGroup2 = this.parent.createElement(colGroup);
      colGroup2.innerHTML = '<col style="width: 50%"></col><col style="width: 50%"></col>';
      table2.appendChild(colGroup2);
      var optr = this.renderOperatorUI(column, table2, "-xlfl-frstoptr", predicates, true);
      this.firstOperator = optr.operator;
      this.renderFlValueUI(column, optr, "-xlfl-frstvalue", predicates, true);
      var predicate = this.parent.createElement("tr", {
        className: "e-xlfl-predicate",
        attrs: {
          role: "row"
        }
      });
      table2.appendChild(predicate);
      this.renderRadioButton(column, predicate, predicates);
      optr = this.renderOperatorUI(column, table2, "-xlfl-secndoptr", predicates, false);
      this.secondOperator = optr.operator;
      this.renderFlValueUI(column, optr, "-xlfl-secndvalue", predicates, false);
    };
    ExcelFilterBase2.prototype.renderRadioButton = function(column, tr, predicates) {
      var td = this.parent.createElement("td", {
        className: "e-xlfl-radio",
        attrs: {
          "colSpan": "2"
        }
      });
      tr.appendChild(td);
      var radioDiv = this.parent.createElement("div", {
        className: "e-xlfl-radiodiv",
        attrs: {
          "style": "display: inline-block"
        }
      });
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var frstpredicate = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + "e-xlfl-frstpredicate" : column + "e-xlfl-frstpredicate",
        attrs: {
          "type": "radio"
        }
      });
      var secndpredicate = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + "e-xlfl-secndpredicate" : column + "e-xlfl-secndpredicate",
        attrs: {
          "type": "radio"
        }
      });
      radioDiv.appendChild(frstpredicate);
      radioDiv.appendChild(secndpredicate);
      td.appendChild(radioDiv);
      if (this.options.type === "string") {
        this.renderMatchCase(column, tr, td, "-xlflmtcase", predicates);
      }
      var andRadio = new RadioButton({
        label: this.getLocalizedLabel("AND"),
        name: "default",
        checked: true,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.childRefs.unshift(andRadio);
      var orRadio = new RadioButton({
        label: this.getLocalizedLabel("OR"),
        name: "default",
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.childRefs.unshift(orRadio);
      var flValue = predicates && predicates.length === 2 ? predicates[1].predicate : "and";
      if (flValue === "and") {
        andRadio.checked = true;
        orRadio.checked = false;
      } else {
        orRadio.checked = true;
        andRadio.checked = false;
      }
      andRadio.appendTo(frstpredicate);
      orRadio.appendTo(secndpredicate);
      andRadio.element.nextElementSibling.classList.add("e-xlfl-radio-and");
      orRadio.element.nextElementSibling.classList.add("e-xlfl-radio-or");
    };
    ExcelFilterBase2.prototype.removeObjects = function(elements) {
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var obj = elements_1[_i];
        if (obj && !obj.isDestroyed) {
          this.removeHandlersFromComponent(obj);
          obj.destroy();
        }
      }
    };
    ExcelFilterBase2.prototype.renderFlValueUI = function(column, optr, elementId, predicates, isFirst) {
      var value = this.parent.createElement("td", {
        className: "e-xlfl-value"
      });
      optr.fieldElement.appendChild(value);
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var valueDiv = this.parent.createElement("div", {
        className: "e-xlfl-valuediv"
      });
      var isFilteredCol = this.options.filteredColumns.some(function(col) {
        return column === col.field;
      });
      var fltrPredicates = this.options.filteredColumns.filter(function(col) {
        return col.field === column;
      });
      if (this.options.column.filterTemplate) {
        var data = {};
        var columnObj = this.options.column;
        if (isFilteredCol && elementId) {
          data = this.getExcelFilterData(elementId, data, columnObj, predicates, fltrPredicates);
        }
        var isReactCompiler = this.parent.isReact && typeof this.options.column.filterTemplate !== "string";
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.parent.parentDetails.parentInstObj.isReact;
        var tempID = this.parent.element.id + columnObj.uid + "filterTemplate";
        if (isReactCompiler || isReactChild) {
          this.options.column.getFilterTemplate()(data, this.parent, "filterTemplate", tempID, null, null, valueDiv);
        } else {
          var element = this.options.column.getFilterTemplate()(data, this.parent, "filterTemplate", tempID);
          appendChildren(valueDiv, element);
        }
        if (isReactCompiler || isReactChild) {
          this.parent.renderTemplates(function() {
            valueDiv.querySelector("input").id = isComplex ? complexFieldName + elementId : column + elementId;
            value.appendChild(valueDiv);
          });
        } else {
          (this.parent.isAngular ? valueDiv.children[0] : valueDiv.querySelector("input")).id = isComplex ? complexFieldName + elementId : column + elementId;
          value.appendChild(valueDiv);
        }
      } else {
        var valueInput = this.parent.createElement("input", {
          id: isComplex ? complexFieldName + elementId : column + elementId
        });
        valueDiv.appendChild(valueInput);
        value.appendChild(valueDiv);
        var flValue = void 0;
        var predicate = void 0;
        if (predicates && predicates.length > 0) {
          predicate = predicates.length === 2 ? isFirst ? predicates[0] : predicates[1] : isFirst ? predicates[0] : void 0;
          flValue = predicate && predicate.operator === optr.operator ? predicate.value : void 0;
          if (isNullOrUndefined(flValue)) {
            flValue = void 0;
          }
        }
        var types = {
          "string": this.renderAutoComplete.bind(this),
          "number": this.renderNumericTextBox.bind(this),
          "date": this.renderDate.bind(this),
          "dateonly": this.renderDate.bind(this),
          "datetime": this.renderDateTime.bind(this)
        };
        types[this.options.type](this.options, column, valueInput, flValue, this.parent.enableRtl);
      }
    };
    ExcelFilterBase2.prototype.getExcelFilterData = function(elementId, data, columnObj, predicates, fltrPredicates) {
      var predIndex = elementId === "-xlfl-frstvalue" ? 0 : 1;
      if (elementId === "-xlfl-frstvalue" || fltrPredicates.length > 1) {
        data = {
          column: predicates instanceof Array ? predicates[parseInt(predIndex.toString(), 10)] : predicates
        };
        var indx = this.options.column.columnData && fltrPredicates.length > 1 ? this.options.column.columnData.length === 1 ? 0 : 1 : predIndex;
        data[this.options.field] = columnObj.foreignKeyValue ? this.options.column.columnData[parseInt(indx.toString(), 10)][columnObj.foreignKeyValue] : fltrPredicates[parseInt(indx.toString(), 10)].value;
        if (this.options.foreignKeyValue) {
          data[this.options.foreignKeyValue] = this.options.column.columnData[parseInt(indx.toString(), 10)][columnObj.foreignKeyValue];
        }
      }
      return data;
    };
    ExcelFilterBase2.prototype.renderMatchCase = function(column, tr, matchCase, elementId, predicates) {
      var matchCaseDiv = this.parent.createElement("div", {
        className: "e-xlfl-matchcasediv",
        attrs: {
          "style": "display: inline-block"
        }
      });
      var isComplex = !isNullOrUndefined(column) && isComplexField(column);
      var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
      var matchCaseInput = this.parent.createElement("input", {
        id: isComplex ? complexFieldName + elementId : column + elementId,
        attrs: {
          "type": "checkbox"
        }
      });
      matchCaseDiv.appendChild(matchCaseInput);
      matchCase.appendChild(matchCaseDiv);
      var flValue = predicates && predicates.length > 0 ? predicates && predicates.length === 2 ? predicates[1].matchCase : predicates[0].matchCase : false;
      var checkbox = new CheckBox({
        label: this.getLocalizedLabel("MatchCase"),
        enableRtl: this.parent.enableRtl,
        checked: flValue,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.childRefs.unshift(checkbox);
      checkbox.appendTo(matchCaseInput);
    };
    ExcelFilterBase2.prototype.renderDate = function(options, column, inputValue, fValue, isRtl) {
      var format = getCustomDateFormat(options.format, options.type) || options.format;
      var datePicker = new DatePicker(extend2({
        format,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        placeholder: this.getLocalizedLabel("CustomFilterDatePlaceHolder"),
        width: "100%",
        enableRtl: isRtl,
        value: new Date(fValue),
        locale: this.parent.locale
      }, options.column.filter.params));
      this.childRefs.unshift(datePicker);
      datePicker.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.renderDateTime = function(options, column, inputValue, fValue, isRtl) {
      var format = getCustomDateFormat(options.format, options.type);
      var dateTimePicker = new DateTimePicker(extend2({
        format,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        placeholder: this.getLocalizedLabel("CustomFilterDatePlaceHolder"),
        width: "100%",
        enableRtl: isRtl,
        value: new Date(fValue),
        locale: this.parent.locale
      }, options.column.filter.params));
      this.childRefs.unshift(dateTimePicker);
      dateTimePicker.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.completeAction = function(e) {
      e.result = distinctStringValues(e.result);
    };
    ExcelFilterBase2.prototype.renderNumericTextBox = function(options, column, inputValue, fValue, isRtl) {
      var numericTextBox = new NumericTextBox(extend2({
        format: options.format,
        placeholder: this.getLocalizedLabel("CustomFilterPlaceHolder"),
        enableRtl: isRtl,
        value: fValue,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, options.column.filter.params));
      this.childRefs.unshift(numericTextBox);
      numericTextBox.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.renderAutoComplete = function(options, column, inputValue, fValue, isRtl) {
      var colObj = this.options.column;
      var isForeignColumn = this.isForeignColumn(colObj);
      var dataSource = isForeignColumn ? colObj.dataSource : options.dataSource;
      var fields = {
        value: isForeignColumn ? colObj.foreignKeyValue : column
      };
      var actObj = new AutoComplete(extend2({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields,
        query: this.getQuery(),
        sortOrder: "Ascending",
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        autofill: true,
        placeholder: this.getLocalizedLabel("CustomFilterPlaceHolder"),
        enableRtl: isRtl,
        text: fValue
      }, colObj.filter.params));
      if (dataSource && "result" in dataSource) {
        var defObj = eventPromise({
          requestType: "stringfilterrequest"
        }, this.getQuery());
        this.parent.trigger(dataStateChange, defObj.state);
        var def = defObj.deffered;
        def.promise.then(function(e) {
          actObj.dataSource = new DataManager(e);
        });
      }
      this.childRefs.unshift(actObj);
      var evt = {
        "actionComplete": this.acActionComplete(actObj, column),
        "focus": this.acFocus(actObj, column, options, inputValue)
      };
      registerEventHandlers(inputValue.id, [actionComplete, focus], evt, this);
      actObj.addEventListener(focus, this.eventHandlers[inputValue.id][focus]);
      actObj.addEventListener(actionComplete, this.eventHandlers[inputValue.id][actionComplete]);
      actObj.appendTo(inputValue);
    };
    ExcelFilterBase2.prototype.acActionComplete = function(actObj, column) {
      return function(e) {
        var isComplex = !isNullOrUndefined(column) && isComplexField(column);
        e.result = e.result.filter(function(obj, index, arr) {
          return arr.map(function(mapObject) {
            return isComplex ? performComplexDataOperation(actObj.fields.value, mapObject) : mapObject[actObj.fields.value];
          }).indexOf(isComplex ? performComplexDataOperation(actObj.fields.value, obj) : obj[actObj.fields.value]) === index;
        });
      };
    };
    ExcelFilterBase2.prototype.acFocus = function(actObj, column, options, inputValue) {
      var _this = this;
      return function() {
        var isComplex = !isNullOrUndefined(column) && isComplexField(column);
        var complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        var columnvalue = isComplex ? complexFieldName : column;
        actObj.filterType = _this.dlgDiv.querySelector("#" + columnvalue + (inputValue.id === columnvalue + "-xlfl-frstvalue" ? "-xlfl-frstoptr" : "-xlfl-secndoptr")).ej2_instances[0].value;
        actObj.ignoreCase = options.type === "string" ? !_this.dlgDiv.querySelector("#" + columnvalue + "-xlflmtcase").ej2_instances[0].checked : true;
        actObj.filterType = !isNullOrUndefined(actObj.filterType) ? actObj.filterType : "equal";
      };
    };
    return ExcelFilterBase2;
  }(CheckBoxFilterBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/sort.js
var Sort = (
  /** @class */
  function() {
    function Sort2(parent, sortSettings, sortedColumns, locator) {
      this.contentRefresh = true;
      this.isModelChanged = true;
      this.aria = new AriaService();
      this.currentTarget = null;
      this.parent = parent;
      this.sortSettings = sortSettings;
      this.sortedColumns = sortedColumns;
      this.serviceLocator = locator;
      this.focus = locator.getService("focus");
      this.addEventListener();
      this.setFullScreenDialog();
    }
    Sort2.prototype.updateModel = function() {
      var sortedColumn = {
        field: this.columnName,
        direction: this.direction
      };
      var index;
      var gCols = this.parent.groupSettings.columns;
      var flag = false;
      if (!this.isMultiSort) {
        if (!gCols.length) {
          this.sortSettings.columns = [sortedColumn];
        } else {
          var sortedCols = [];
          for (var i = 0, len = gCols.length; i < len; i++) {
            index = this.getSortedColsIndexByField(gCols[parseInt(i.toString(), 10)], sortedCols);
            if (this.columnName === gCols[parseInt(i.toString(), 10)]) {
              flag = true;
              sortedCols.push(sortedColumn);
            } else {
              var sCol = this.getSortColumnFromField(gCols[parseInt(i.toString(), 10)]);
              sortedCols.push({
                field: sCol.field,
                direction: sCol.direction,
                isFromGroup: sCol.isFromGroup
              });
            }
          }
          if (!flag) {
            sortedCols.push(sortedColumn);
          }
          this.sortSettings.columns = sortedCols;
        }
      } else {
        index = this.getSortedColsIndexByField(this.columnName);
        if (index > -1) {
          this.sortSettings.columns.splice(index, 1);
        }
        this.sortSettings.columns.push(sortedColumn);
        this.sortSettings.columns = this.sortSettings.columns;
      }
      this.parent.dataBind();
      this.lastSortedCol = this.columnName;
    };
    Sort2.prototype.onActionComplete = function(e) {
      var args = !this.isRemove ? {
        columnName: this.columnName,
        direction: this.direction,
        requestType: "sorting",
        type: actionComplete
      } : {
        requestType: "sorting",
        type: actionComplete
      };
      this.isRemove = false;
      this.parent.trigger(actionComplete, extend(e, args));
    };
    Sort2.prototype.sortColumn = function(columnName, direction, isMultiSort) {
      var gObj = this.parent;
      if (this.parent.getColumnByField(columnName).allowSorting === false || this.parent.isContextMenuOpen()) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          columnName
        });
        return;
      }
      if (!gObj.allowMultiSorting) {
        isMultiSort = gObj.allowMultiSorting;
      }
      if (this.isActionPrevent()) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.sortColumn,
          arg1: columnName,
          arg2: direction,
          arg3: isMultiSort
        });
        return;
      }
      this.backupSettings();
      this.columnName = columnName;
      this.direction = direction;
      this.isMultiSort = isMultiSort;
      this.removeSortIcons();
      this.updateSortedCols(columnName, isMultiSort);
      this.updateModel();
    };
    Sort2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isSort);
      }
    };
    Sort2.prototype.backupSettings = function() {
      this.lastSortedCols = iterateExtend(this.sortSettings.columns);
      this.lastCols = this.sortedColumns;
    };
    Sort2.prototype.restoreSettings = function() {
      this.isModelChanged = false;
      this.isMultiSort = true;
      this.parent.setProperties({
        sortSettings: {
          columns: this.lastSortedCols
        }
      }, true);
      this.sortedColumns = this.lastCols;
      this.isModelChanged = true;
    };
    Sort2.prototype.updateSortedCols = function(columnName, isMultiSort) {
      if (!isMultiSort) {
        if (this.parent.allowGrouping) {
          for (var i = 0, len = this.sortedColumns.length; i < len; i++) {
            if (this.parent.groupSettings.columns.indexOf(this.sortedColumns[parseInt(i.toString(), 10)]) < 0) {
              this.sortedColumns.splice(i, 1);
              len--;
              i--;
            }
          }
        } else {
          this.sortedColumns.splice(0, this.sortedColumns.length);
        }
      }
      if (this.sortedColumns.indexOf(columnName) < 0) {
        this.sortedColumns.push(columnName);
      }
    };
    Sort2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (this.contentRefresh) {
        var args = this.sortSettings.columns.length ? {
          columnName: this.columnName,
          direction: this.direction,
          requestType: "sorting",
          type: actionBegin,
          target: this.currentTarget,
          cancel: false
        } : {
          requestType: "sorting",
          type: actionBegin,
          cancel: false,
          target: this.currentTarget
        };
        this.parent.notify(modelChanged, args);
      }
      this.refreshSortSettings();
      this.removeSortIcons();
      this.addSortIcons();
    };
    Sort2.prototype.refreshSortSettings = function() {
      this.sortedColumns.length = 0;
      var sortColumns = this.sortSettings.columns;
      for (var i = 0; i < sortColumns.length; i++) {
        if (!sortColumns[parseInt(i.toString(), 10)].isFromGroup) {
          this.sortedColumns.push(sortColumns[parseInt(i.toString(), 10)].field);
        }
      }
    };
    Sort2.prototype.clearSorting = function() {
      var cols = getActualPropFromColl(this.sortSettings.columns);
      if (this.isActionPrevent()) {
        this.parent.notify(preventBatch, {
          instance: this,
          handler: this.clearSorting
        });
        return;
      }
      for (var i = 0, len = cols.length; i < len; i++) {
        this.removeSortColumn(cols[parseInt(i.toString(), 10)].field);
      }
    };
    Sort2.prototype.isActionPrevent = function() {
      return isActionPrevent(this.parent);
    };
    Sort2.prototype.removeSortColumn = function(field) {
      var gObj = this.parent;
      var cols = this.sortSettings.columns;
      if (cols.length === 0 && this.sortedColumns.indexOf(field) < 0) {
        return;
      }
      if (this.isActionPrevent()) {
        this.parent.notify(preventBatch, {
          instance: this,
          handler: this.removeSortColumn,
          arg1: field
        });
        return;
      }
      this.backupSettings();
      this.removeSortIcons();
      var args = {
        requestType: "sorting",
        type: actionBegin,
        target: this.currentTarget
      };
      for (var i = 0, len = cols.length; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].field === field) {
          if (gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1) {
            continue;
          }
          this.sortedColumns.splice(this.sortedColumns.indexOf(cols[parseInt(i.toString(), 10)].field), 1);
          cols.splice(i, 1);
          this.isRemove = true;
          if (this.isModelChanged) {
            this.parent.notify(modelChanged, args);
          }
          break;
        }
      }
      if (!args.cancel) {
        this.addSortIcons();
      }
    };
    Sort2.prototype.getSortedColsIndexByField = function(field, sortedColumns) {
      var cols = sortedColumns ? sortedColumns : this.sortSettings.columns;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].field === field) {
          return i;
        }
      }
      return -1;
    };
    Sort2.prototype.getModuleName = function() {
      return "sort";
    };
    Sort2.prototype.initialEnd = function() {
      this.parent.off(contentReady, this.initialEnd);
      if (this.parent.getColumns().length && this.sortSettings.columns.length) {
        var gObj = this.parent;
        this.contentRefresh = false;
        this.isMultiSort = this.sortSettings.columns.length > 1;
        for (var _i = 0, _a = gObj.sortSettings.columns.slice(); _i < _a.length; _i++) {
          var col = _a[_i];
          if (this.sortedColumns.indexOf(col.field) > -1) {
            this.sortColumn(col.field, col.direction, true);
          }
        }
        this.isMultiSort = false;
        this.contentRefresh = true;
      }
    };
    Sort2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: setFullScreenDialog,
        handler: this.setFullScreenDialog
      }, {
        event: renderResponsiveChangeAction,
        handler: this.renderResponsiveChangeAction
      }, {
        event: contentReady,
        handler: this.initialEnd
      }, {
        event: sortComplete,
        handler: this.onActionComplete
      }, {
        event: inBoundModelChanged,
        handler: this.onPropertyChanged
      }, {
        event: click,
        handler: this.clickHandler
      }, {
        event: headerRefreshed,
        handler: this.refreshSortIcons
      }, {
        event: keyPressed,
        handler: this.keyPressed
      }, {
        event: cancelBegin,
        handler: this.cancelBeginEvent
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    Sort2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    Sort2.prototype.destroy = function() {
      this.isModelChanged = false;
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.parent.element.querySelector(".e-gridpopup").getElementsByClassName("e-sortdirect").length) {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
      if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowSorting)) {
        this.clearSorting();
      }
      this.isModelChanged = true;
      this.removeEventListener();
    };
    Sort2.prototype.cancelBeginEvent = function(e) {
      if (e.requestType === "sorting") {
        this.restoreSettings();
        this.refreshSortIcons();
        this.isMultiSort = true;
      }
    };
    Sort2.prototype.clickHandler = function(e) {
      var gObj = this.parent;
      this.currentTarget = null;
      this.popUpClickHandler(e);
      var target = closest(e.target, ".e-headercell");
      if (target && !e.target.classList.contains("e-grptogglebtn") && !target.classList.contains("e-resized") && !e.target.classList.contains("e-rhandler") && !e.target.classList.contains("e-columnmenu") && !e.target.classList.contains("e-filtermenudiv") && !parentsUntil(e.target, "e-stackedheadercell") && !(gObj.allowSelection && gObj.selectionSettings.allowColumnSelection && e.target.classList.contains("e-headercell"))) {
        var gObj_1 = this.parent;
        var colObj = gObj_1.getColumnByUid(target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
        if (colObj.type !== "checkbox") {
          this.initiateSort(target, e, colObj);
          if (Browser.isDevice) {
            this.showPopUp(e);
          }
        }
      }
      if (target) {
        target.classList.remove("e-resized");
      }
      if (parentsUntil(e.target, "e-excel-ascending") || parentsUntil(e.target, "e-excel-descending")) {
        var colUid = closest(e.target, ".e-filter-popup").getAttribute("uid");
        var direction = isNullOrUndefined(parentsUntil(e.target, "e-excel-descending")) ? "Ascending" : "Descending";
        this.sortColumn(gObj.getColumnByUid(colUid).field, direction, false);
      }
    };
    Sort2.prototype.keyPressed = function(e) {
      var ele = e.target;
      if (!this.parent.isEdit && (e.action === "enter" || e.action === "ctrlEnter" || e.action === "shiftEnter") && closest(ele, ".e-headercell")) {
        var target = this.focus.getFocusedElement();
        if (isNullOrUndefined(target) || !target.classList.contains("e-headercell") || !target.querySelector(".e-headercelldiv")) {
          return;
        }
        var col = this.parent.getColumnByUid(target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
        this.initiateSort(target, e, col);
      }
    };
    Sort2.prototype.initiateSort = function(target, e, column) {
      var gObj = this.parent;
      var field = column.field;
      this.currentTarget = e.target;
      var direction = !target.getElementsByClassName("e-ascending").length ? "Ascending" : "Descending";
      this.isMultiSort = e.ctrlKey || this.enableSortMultiTouch || navigator.userAgent.indexOf("Mac OS") !== -1 && e.metaKey;
      if (e.shiftKey || this.sortSettings.allowUnsort && target.getElementsByClassName("e-descending").length && !(gObj.groupSettings.columns.indexOf(field) > -1)) {
        this.removeSortColumn(field);
      } else {
        this.sortColumn(field, direction, this.isMultiSort);
      }
    };
    Sort2.prototype.showPopUp = function(e) {
      var target = closest(e.target, ".e-headercell");
      if (this.parent.allowMultiSorting && (!isNullOrUndefined(target) || this.parent.isContextMenuOpen())) {
        setCssInGridPopUp(this.parent.element.querySelector(".e-gridpopup"), e, "e-sortdirect e-icons e-icon-sortdirect" + (this.sortedColumns.length > 1 ? " e-spanclicked" : ""));
      }
    };
    Sort2.prototype.popUpClickHandler = function(e) {
      var target = e.target;
      if (closest(target, ".e-headercell") || e.target.classList.contains(rowCell) || closest(target, ".e-gridpopup")) {
        if (target.classList.contains("e-sortdirect")) {
          if (!target.classList.contains("e-spanclicked")) {
            target.classList.add("e-spanclicked");
            this.enableSortMultiTouch = true;
          } else {
            target.classList.remove("e-spanclicked");
            this.enableSortMultiTouch = false;
            this.parent.element.querySelector(".e-gridpopup").style.display = "none";
          }
        }
      } else {
        this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      }
    };
    Sort2.prototype.addSortIcons = function() {
      var gObj = this.parent;
      var header;
      var filterElement;
      var cols = this.sortSettings.columns;
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      for (var i = 0, len = cols.length; i < len; i++) {
        header = gObj.getColumnHeaderByField(cols[parseInt(i.toString(), 10)].field);
        if (fieldNames.indexOf(cols[parseInt(i.toString(), 10)].field) === -1 || isNullOrUndefined(header)) {
          continue;
        }
        this.aria.setSort(header, cols[parseInt(i.toString(), 10)].direction.toLowerCase());
        if (cols.length > 1) {
          header.querySelector(".e-headercelldiv").insertBefore(this.parent.createElement("span", {
            className: "e-sortnumber",
            innerHTML: (i + 1).toString()
          }), header.querySelector(".e-headertext"));
        }
        filterElement = header.querySelector(".e-sortfilterdiv");
        if (cols[parseInt(i.toString(), 10)].direction === "Ascending") {
          classList(filterElement, ["e-ascending", "e-icon-ascending"], []);
        } else {
          classList(filterElement, ["e-descending", "e-icon-descending"], []);
        }
      }
    };
    Sort2.prototype.removeSortIcons = function(position) {
      var gObj = this.parent;
      var header;
      var cols = this.sortSettings.columns;
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      for (var i = position ? position : 0, len = !isNullOrUndefined(position) ? position + 1 : cols.length; i < len; i++) {
        header = gObj.getColumnHeaderByField(cols[parseInt(i.toString(), 10)].field);
        if (isNullOrUndefined(header) || gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1 && !header.querySelector(".e-sortfilterdiv")) {
          continue;
        }
        if (fieldNames.indexOf(cols[parseInt(i.toString(), 10)].field) === -1) {
          continue;
        }
        this.aria.setSort(header, "none");
        classList(header.querySelector(".e-sortfilterdiv"), [], ["e-descending", "e-icon-descending", "e-ascending", "e-icon-ascending"]);
        if (header.querySelector(".e-sortnumber")) {
          header.querySelector(".e-headercelldiv").removeChild(header.querySelector(".e-sortnumber"));
        }
      }
    };
    Sort2.prototype.getSortColumnFromField = function(field) {
      for (var i = 0, len = this.sortSettings.columns.length; i < len; i++) {
        if (this.sortSettings.columns[parseInt(i.toString(), 10)].field === field) {
          return this.sortSettings.columns[parseInt(i.toString(), 10)];
        }
      }
      return false;
    };
    Sort2.prototype.updateAriaAttr = function() {
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      for (var _i = 0, _a = this.sortedColumns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (fieldNames.indexOf(col) === -1) {
          continue;
        }
        var header = this.parent.getColumnHeaderByField(col);
        this.aria.setSort(header, this.getSortColumnFromField(col).direction);
      }
    };
    Sort2.prototype.refreshSortIcons = function() {
      this.removeSortIcons();
      this.isMultiSort = true;
      this.removeSortIcons();
      this.addSortIcons();
      this.isMultiSort = false;
      this.updateAriaAttr();
    };
    Sort2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    Sort2.prototype.showCustomSort = function(enable) {
      this.responsiveDialogRenderer.isCustomDialog = enable;
      this.responsiveDialogRenderer.showResponsiveDialog();
    };
    return Sort2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/numeric-container.js
var NumericContainer = (
  /** @class */
  function() {
    function NumericContainer2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    NumericContainer2.prototype.render = function() {
      this.pagerElement = this.pagerModule.element;
      this.renderNumericContainer();
      this.refreshNumericLinks();
      this.wireEvents();
    };
    NumericContainer2.prototype.refresh = function() {
      this.pagerModule.updateTotalPages();
      if (this.links.length) {
        this.updateLinksHtml();
      }
      this.refreshAriaAttrLabel();
      this.updateStyles();
    };
    NumericContainer2.prototype.refreshNumericLinks = function() {
      var link;
      var pagerObj = this.pagerModule;
      var div = pagerObj.element.querySelector(".e-numericcontainer");
      var frag = document.createDocumentFragment();
      div.innerHTML = "";
      for (var i = 1; i <= pagerObj.pageCount; i++) {
        link = createElement("a", {
          className: "e-link e-numericitem e-spacing e-pager-default",
          attrs: {
            tabindex: "-1",
            "aria-label": pagerObj.getLocalizedLabel("Page") + i + pagerObj.getLocalizedLabel("Of") + pagerObj.totalPages + pagerObj.getLocalizedLabel("Pages"),
            href: "#"
          }
        });
        if (pagerObj.currentPage === i) {
          classList(link, ["e-currentitem", "e-active"], ["e-pager-default"]);
          link.setAttribute("aria-current", "page");
        }
        frag.appendChild(link);
      }
      div.appendChild(frag);
      this.links = [].slice.call(div.childNodes);
    };
    NumericContainer2.prototype.wireEvents = function() {
      EventHandler.add(this.pagerElement, "click", this.clickHandler, this);
      EventHandler.add(this.pagerElement, "auxclick", this.auxiliaryClickHandler, this);
    };
    NumericContainer2.prototype.unwireEvents = function() {
      EventHandler.remove(this.pagerModule.element, "click", this.clickHandler);
      EventHandler.remove(this.pagerModule.element, "auxclick", this.auxiliaryClickHandler);
    };
    NumericContainer2.prototype.destroy = function() {
      this.unwireEvents();
    };
    NumericContainer2.prototype.refreshAriaAttrLabel = function() {
      var pagerObj = this.pagerModule;
      var numericContainer = pagerObj.element.querySelector(".e-numericcontainer");
      var links = numericContainer.querySelectorAll("a");
      for (var i = 0; i < links.length; i++) {
        if (links[parseInt(i.toString(), 10)].hasAttribute("aria-label") && links[parseInt(i.toString(), 10)].hasAttribute("index")) {
          links[parseInt(i.toString(), 10)].setAttribute("aria-label", pagerObj.getLocalizedLabel("Page") + links[parseInt(i.toString(), 10)].getAttribute("index") + pagerObj.getLocalizedLabel("Of") + pagerObj.totalPages + pagerObj.getLocalizedLabel("Pages"));
        }
      }
    };
    NumericContainer2.prototype.renderNumericContainer = function() {
      this.element = createElement("div", {
        className: "e-pagercontainer",
        attrs: {
          "role": "navigation"
        }
      });
      this.renderFirstNPrev(this.element);
      this.renderPrevPagerSet(this.element);
      this.element.appendChild(createElement("div", {
        className: "e-numericcontainer"
      }));
      this.renderNextPagerSet(this.element);
      this.renderNextNLast(this.element);
      this.pagerModule.element.appendChild(this.element);
    };
    NumericContainer2.prototype.renderFirstNPrev = function(pagerContainer) {
      this.first = createElement("div", {
        className: "e-first e-icons e-icon-first",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("firstPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      this.prev = createElement("div", {
        className: "e-prev e-icons e-icon-prev",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("previousPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      append([this.first, this.prev], pagerContainer);
    };
    NumericContainer2.prototype.renderPrevPagerSet = function(pagerContainer) {
      var prevPager = createElement("div");
      this.PP = createElement("a", {
        className: "e-link e-pp e-spacing",
        innerHTML: "...",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
          "aria-label": this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
          tabindex: "-1",
          href: "#"
        }
      });
      prevPager.appendChild(this.PP);
      pagerContainer.appendChild(prevPager);
    };
    NumericContainer2.prototype.renderNextPagerSet = function(pagerContainer) {
      var nextPager = createElement("div");
      this.NP = createElement("a", {
        className: "e-link e-np e-spacing",
        innerHTML: "...",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
          "aria-label": this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
          tabindex: "-1",
          href: "#"
        }
      });
      nextPager.appendChild(this.NP);
      pagerContainer.appendChild(nextPager);
    };
    NumericContainer2.prototype.renderNextNLast = function(pagerContainer) {
      this.next = createElement("div", {
        className: "e-next e-icons e-icon-next",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("nextPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      this.last = createElement("div", {
        className: "e-last e-icons e-icon-last",
        attrs: {
          title: this.pagerModule.getLocalizedLabel("lastPageTooltip"),
          tabindex: "-1",
          role: "button"
        }
      });
      append([this.next, this.last], pagerContainer);
    };
    NumericContainer2.prototype.clickHandler = function(e) {
      var pagerObj = this.pagerModule;
      this.target = e.target;
      if (this.target.classList.contains("e-numericitem")) {
        e.preventDefault();
      }
      pagerObj.previousPageNo = pagerObj.currentPage;
      if (!this.target.classList.contains("e-disable") && !isNullOrUndefined(this.target.getAttribute("index"))) {
        pagerObj.currentPage = parseInt(this.target.getAttribute("index"), 10);
        this.pagerModule.isInteracted = true;
        pagerObj.dataBind();
      }
      return false;
    };
    NumericContainer2.prototype.auxiliaryClickHandler = function(e) {
      this.target = e.target;
      if (this.target.classList.contains("e-numericitem") && e.button === 1) {
        e.preventDefault();
      }
    };
    NumericContainer2.prototype.updateLinksHtml = function() {
      var pagerObj = this.pagerModule;
      var currentPageSet;
      var isLastSet;
      var pageNo;
      var numItems = this.pagerElement.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
      pagerObj.currentPage = pagerObj.totalPages === 1 ? 1 : pagerObj.currentPage;
      if (pagerObj.currentPage > pagerObj.totalPages && pagerObj.totalPages) {
        pagerObj.currentPage = pagerObj.totalPages;
      }
      currentPageSet = parseInt((pagerObj.currentPage / pagerObj.pageCount).toString(), 10);
      if (pagerObj.currentPage % pagerObj.pageCount === 0 && currentPageSet > 0) {
        currentPageSet = currentPageSet - 1;
      }
      for (var i = 0; i < pagerObj.pageCount; i++) {
        if (pagerObj.isPagerResized) {
          var focusedItem = this.pagerElement.querySelector(".e-focus");
          var focusedorTarget = this.target ? this.target : focusedItem ? focusedItem : null;
          var prevFocused = false;
          var nextFocused = false;
          var firstFocused = false;
          var lastFocused = false;
          var numItemFocused = false;
          var npFocused = false;
          var ppFocused = false;
          if (focusedorTarget) {
            var classList_1 = focusedorTarget.classList;
            if (classList_1.contains("e-icons")) {
              switch (true) {
                case classList_1.contains("e-prev"):
                  prevFocused = true;
                  break;
                case classList_1.contains("e-next"):
                  nextFocused = true;
                  break;
                case classList_1.contains("e-first"):
                  firstFocused = true;
                  break;
                case classList_1.contains("e-last"):
                  lastFocused = true;
                  break;
              }
            } else if (classList_1.contains("e-numericitem")) {
              switch (true) {
                case classList_1.contains("e-np"):
                  npFocused = true;
                  break;
                case classList_1.contains("e-pp"):
                  ppFocused = true;
                  break;
                default:
                  numItemFocused = classList_1.contains("e-numericitem");
                  break;
              }
            }
          }
          isLastSet = lastFocused || this.pagerModule.keyAction === "End";
          numItems = this.pagerElement.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
          var isPageAvailable = Array.from(numItems).some(function(item) {
            return parseInt(item.getAttribute("index"), 10) === pagerObj.currentPage;
          });
          if (firstFocused || this.pagerModule.keyAction === "Home") {
            pageNo = 1 + i;
          } else if (lastFocused || this.pagerModule.keyAction === "End") {
            pageNo = currentPageSet * pagerObj.pageCount + 1 + i;
          } else if (nextFocused || this.pagerModule.keyAction === "ArrowRight" || prevFocused || this.pagerModule.keyAction === "ArrowLeft") {
            if (isPageAvailable) {
              pageNo = parseInt(numItems[0].getAttribute("index"), 10) + i;
            } else if (prevFocused || this.pagerModule.keyAction === "ArrowLeft") {
              pageNo = parseInt(this.PP.getAttribute("index"), 10) + i;
            } else {
              pageNo = pagerObj.currentPage + i;
            }
          } else if (npFocused || ppFocused) {
            pageNo = pagerObj.currentPage + i;
          } else if (numItemFocused) {
            pageNo = parseInt(numItems[0].getAttribute("index"), 10) + i;
          } else {
            pageNo = currentPageSet * pagerObj.pageCount + 1 + i;
          }
        } else {
          pageNo = currentPageSet * pagerObj.pageCount + 1 + i;
        }
        if (pageNo <= pagerObj.totalPages) {
          this.links[parseInt(i.toString(), 10)].classList.remove("e-hide");
          this.links[parseInt(i.toString(), 10)].style.display = "";
          this.links[parseInt(i.toString(), 10)].setAttribute("index", pageNo.toString());
          this.links[parseInt(i.toString(), 10)].innerHTML = !pagerObj.customText ? pageNo.toString() : pagerObj.customText + pageNo;
          if (pagerObj.currentPage !== pageNo) {
            this.links[parseInt(i.toString(), 10)].classList.add("e-pager-default");
          } else {
            this.links[parseInt(i.toString(), 10)].classList.remove("e-pager-default");
          }
        } else {
          this.links[parseInt(i.toString(), 10)].innerHTML = !pagerObj.customText ? pageNo.toString() : pagerObj.customText + pageNo;
          this.links[parseInt(i.toString(), 10)].style.display = "none";
        }
        classList(this.links[parseInt(i.toString(), 10)], [], ["e-currentitem", "e-active"]);
        this.links[parseInt(i.toString(), 10)].removeAttribute("aria-current");
      }
      attributes(this.first, {
        "index": "1",
        "title": this.pagerModule.getLocalizedLabel("firstPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mfirst"), {
        "index": "1",
        "title": this.pagerModule.getLocalizedLabel("firstPageTooltip")
      });
      attributes(this.last, {
        "index": pagerObj.totalPages.toString(),
        "title": this.pagerModule.getLocalizedLabel("lastPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mlast"), {
        "index": pagerObj.totalPages.toString(),
        "title": this.pagerModule.getLocalizedLabel("lastPageTooltip")
      });
      attributes(this.prev, {
        "index": (pagerObj.currentPage - 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("previousPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mprev"), {
        "index": (pagerObj.currentPage - 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("previousPageTooltip")
      });
      attributes(this.next, {
        "index": (pagerObj.currentPage + 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("nextPageTooltip")
      });
      attributes(this.pagerElement.querySelector(".e-mnext"), {
        "index": (pagerObj.currentPage + 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("nextPageTooltip")
      });
      var ppIndex = this.pagerModule.isPagerResized && numItems.length ? isLastSet ? parseInt(numItems[0].getAttribute("index"), 10) - pagerObj.avgNumItems : parseInt(numItems[0].getAttribute("index"), 10) - numItems.length : parseInt(this.links[0].getAttribute("index"), 10) - pagerObj.pageCount;
      attributes(this.PP, {
        "index": ppIndex < 1 ? "1" : ppIndex.toString(),
        "title": this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
        "aria-label": this.pagerModule.getLocalizedLabel("previousPagerTooltip")
      });
      var NPIndex = this.pagerModule.isPagerResized && numItems.length ? parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) : parseInt(this.links[this.links.length - 1].getAttribute("index"), 10);
      attributes(this.NP, {
        "index": (NPIndex + 1).toString(),
        "title": this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
        "aria-label": this.pagerModule.getLocalizedLabel("nextPagerTooltip")
      });
      this.target = void 0;
    };
    NumericContainer2.prototype.updateStyles = function() {
      var _this = this;
      this.updateFirstNPrevStyles();
      this.updatePrevPagerSetStyles();
      this.updateNextPagerSetStyles();
      this.updateNextNLastStyles();
      if (this.links.length) {
        var currentPageIndex = this.links.findIndex(function(link) {
          return link.getAttribute("index") === _this.pagerModule.currentPage.toString();
        });
        var currentPage = this.pagerModule.isPagerResized && currentPageIndex !== -1 ? currentPageIndex : (this.pagerModule.currentPage - 1) % this.pagerModule.pageCount;
        classList(this.links[parseInt(currentPage.toString(), 10)], ["e-currentitem", "e-active"], []);
        this.links[parseInt(currentPage.toString(), 10)].setAttribute("aria-current", "page");
      }
    };
    NumericContainer2.prototype.updateFirstNPrevStyles = function() {
      var firstPage = ["e-firstpage", "e-pager-default"];
      var firstPageDisabled = ["e-firstpagedisabled", "e-disable"];
      var prevPage = ["e-prevpage", "e-pager-default"];
      var prevPageDisabled = ["e-prevpagedisabled", "e-disable"];
      if (this.pagerModule.totalPages > 0 && this.pagerModule.currentPage > 1) {
        classList(this.prev, prevPage, prevPageDisabled);
        classList(this.first, firstPage, firstPageDisabled);
        classList(this.pagerElement.querySelector(".e-mfirst"), firstPage, firstPageDisabled);
        classList(this.pagerElement.querySelector(".e-mprev"), prevPage, prevPageDisabled);
      } else {
        classList(this.prev, prevPageDisabled, prevPage);
        classList(this.first, firstPageDisabled, firstPage);
        classList(this.pagerElement.querySelector(".e-mprev"), prevPageDisabled, prevPage);
        classList(this.pagerElement.querySelector(".e-mfirst"), firstPageDisabled, firstPage);
      }
    };
    NumericContainer2.prototype.updatePrevPagerSetStyles = function() {
      if (this.pagerModule.currentPage > this.pagerModule.pageCount || this.pagerModule.isPagerResized && this.links.findIndex(function(link) {
        return parseInt(link.getAttribute("index"), 10) === 1;
      })) {
        classList(this.PP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
      } else {
        classList(this.PP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
      }
    };
    NumericContainer2.prototype.updateNextPagerSetStyles = function() {
      var pagerObj = this.pagerModule;
      var firstPage = this.links[0].innerHTML.replace(pagerObj.customText, "");
      var numItems = this.pagerElement.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
      if (!firstPage.length || !this.links.length || parseInt(firstPage, 10) + pagerObj.pageCount > pagerObj.totalPages || pagerObj.isPagerResized && Array.from(numItems).some(function(item) {
        return parseInt(item.getAttribute("index"), 10) === pagerObj.totalPages;
      })) {
        classList(this.NP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
      } else {
        classList(this.NP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
      }
    };
    NumericContainer2.prototype.updateNextNLastStyles = function() {
      var lastPage = ["e-lastpage", "e-pager-default"];
      var lastPageDisabled = ["e-lastpagedisabled", "e-disable"];
      var nextPage = ["e-nextpage", "e-pager-default"];
      var nextPageDisabled = ["e-nextpagedisabled", "e-disable"];
      var pagerObj = this.pagerModule;
      if (pagerObj.currentPage === pagerObj.totalPages || pagerObj.totalRecordsCount === 0) {
        classList(this.last, lastPageDisabled, lastPage);
        classList(this.next, nextPageDisabled, nextPage);
        classList(this.pagerElement.querySelector(".e-mlast"), lastPageDisabled, lastPage);
        classList(this.pagerElement.querySelector(".e-mnext"), nextPageDisabled, nextPage);
      } else {
        classList(this.last, lastPage, lastPageDisabled);
        classList(this.next, nextPage, nextPageDisabled);
        classList(this.pagerElement.querySelector(".e-mlast"), lastPage, lastPageDisabled);
        classList(this.pagerElement.querySelector(".e-mnext"), nextPage, nextPageDisabled);
      }
    };
    return NumericContainer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/pager-message.js
var PagerMessage = (
  /** @class */
  function() {
    function PagerMessage2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    PagerMessage2.prototype.render = function() {
      var div = createElement("div", {
        className: "e-parentmsgbar"
      });
      this.pageNoMsgElem = createElement("span", {
        className: "e-pagenomsg",
        styles: "textalign:right"
      });
      this.pageCountMsgElem = createElement("span", {
        className: "e-pagecountmsg",
        styles: "textalign:right"
      });
      append([this.pageNoMsgElem, this.pageCountMsgElem], div);
      this.pagerModule.element.appendChild(div);
      this.refresh();
    };
    PagerMessage2.prototype.refresh = function() {
      var pagerObj = this.pagerModule;
      this.pageNoMsgElem.textContent = this.format(pagerObj.getLocalizedLabel("currentPageInfo"), [pagerObj.totalRecordsCount === 0 ? 0 : pagerObj.currentPage, pagerObj.totalPages || 0, pagerObj.totalRecordsCount || 0]) + " ";
      this.pageCountMsgElem.textContent = this.format(pagerObj.getLocalizedLabel(pagerObj.totalRecordsCount <= 1 ? "totalItemInfo" : "totalItemsInfo"), [pagerObj.totalRecordsCount || 0, pagerObj.totalRecordsCount ? pagerObj.pageSize * (pagerObj.currentPage - 1) + 1 : 0, pagerObj.pageSize * pagerObj.currentPage > pagerObj.totalRecordsCount ? pagerObj.totalRecordsCount : pagerObj.pageSize * pagerObj.currentPage]);
      this.pageNoMsgElem.parentElement.classList.remove("e-hide");
    };
    PagerMessage2.prototype.hideMessage = function() {
      if (this.pageNoMsgElem) {
        this.pageNoMsgElem.style.display = "none";
      }
      if (this.pageCountMsgElem) {
        this.pageCountMsgElem.style.display = "none";
      }
    };
    PagerMessage2.prototype.showMessage = function() {
      if (!this.pageNoMsgElem) {
        this.render();
      }
      this.pageNoMsgElem.style.display = "";
      this.pageCountMsgElem.style.display = "";
    };
    PagerMessage2.prototype.destroy = function() {
    };
    PagerMessage2.prototype.format = function(str, args) {
      var regx;
      var regExp = RegExp;
      for (var i = 0; i < args.length; i++) {
        regx = new regExp("\\{" + i + "\\}", "gm");
        str = str.replace(regx, args[parseInt(i.toString(), 10)].toString());
      }
      return str;
    };
    return PagerMessage2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/pager.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Pager = (
  /** @class */
  function(_super) {
    __extends25(Pager2, _super);
    function Pager2(options, element, parent) {
      var _this = _super.call(this, options, element) || this;
      _this.hasParent = false;
      _this.checkAll = true;
      _this.pageRefresh = "pager-refresh";
      _this.firstPagerFocus = false;
      _this.isCancel = false;
      _this.isInteracted = false;
      _this.parent = parent;
      return _this;
    }
    Pager2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableExternalMessage) {
        modules.push({
          member: "externalMessage",
          args: [this],
          name: "ExternalMessage"
        });
      }
      if (this.checkpagesizes()) {
        modules.push({
          member: "pagerdropdown",
          args: [this],
          name: "PagerDropDown"
        });
      }
      return modules;
    };
    Pager2.prototype.preRender = function() {
      this.defaultConstants = {
        currentPageInfo: "{0} of {1} pages",
        totalItemsInfo: "({0} items)",
        totalItemInfo: "({0} item)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next pager items",
        previousPagerTooltip: "Go to previous pager items",
        pagerDropDown: "Items per page",
        pagerAllDropDown: "Items",
        CurrentPageInfo: "{0} of {1} pages",
        TotalItemsInfo: "({0} items)",
        FirstPageTooltip: "Go to first page",
        LastPageTooltip: "Go to last page",
        NextPageTooltip: "Go to next page",
        PreviousPageTooltip: "Go to previous page",
        NextPagerTooltip: "Go to next pager items",
        PreviousPagerTooltip: "Go to previous pager items",
        PagerDropDown: "Items per page",
        PagerAllDropDown: "Items",
        All: "All",
        Container: "Pager Container",
        Information: "Pager Information",
        ExternalMsg: "Pager external message",
        Page: "Page ",
        Of: " of ",
        Pages: " Pages"
      };
      this.containerModule = new NumericContainer(this);
      this.pagerMessageModule = new PagerMessage(this);
    };
    Pager2.prototype.render = function() {
      this.element.setAttribute("data-role", "pager");
      this.element.setAttribute("tabindex", "-1");
      this.initLocalization();
      if (this.cssClass) {
        if (this.cssClass.indexOf(" ") !== -1) {
          addClass([this.element], this.cssClass.split(" "));
        } else {
          addClass([this.element], [this.cssClass]);
        }
      }
      if (!this.hasParent) {
        this.element.setAttribute("tabindex", "0");
      }
      if (this.enableQueryString) {
        var pageValue = new URL(window.location.href).searchParams.get("page");
        if (!isNullOrUndefined(pageValue) && window.location.href.indexOf("?page=") > 0) {
          var currentPageValue = parseInt(pageValue, 10);
          if (this.hasParent) {
            this.parent.setProperties({
              pageSettings: {
                currentPage: currentPageValue
              }
            }, true);
          }
          this.currentPage = currentPageValue;
        }
      }
      if (this.template) {
        if (this.isReactTemplate()) {
          this.on(this.pageRefresh, this.pagerTemplate, this);
          this.notify(this.pageRefresh, {});
        } else {
          this.pagerTemplate();
        }
      } else {
        this.updateRTL();
        this.totalRecordsCount = this.totalRecordsCount || 0;
        this.renderFirstPrevDivForDevice();
        this.containerModule.render();
        if (this.enablePagerMessage) {
          this.pagerMessageModule.render();
        }
        this.renderNextLastDivForDevice();
        if (this.checkpagesizes() && this.pagerdropdownModule) {
          this.pagerdropdownModule.render();
        }
        this.addAriaLabel();
        if (this.enableExternalMessage && this.externalMessageModule) {
          this.externalMessageModule.render();
        }
        this.refresh();
        this.trigger("created", {
          "currentPage": this.currentPage,
          "totalRecordsCount": this.totalRecordsCount
        });
      }
      this.wireEvents();
      this.addListener();
    };
    Pager2.prototype.getPersistData = function() {
      var keyEntity = ["currentPage", "pageSize"];
      return this.addOnPersist(keyEntity);
    };
    Pager2.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      if (this.isReactTemplate()) {
        this.off(this.pageRefresh, this.pagerTemplate);
        if (!this.hasParent) {
          this.destroyTemplate(["template"]);
        }
      }
      this.removeListener();
      this.unwireEvents();
      _super.prototype.destroy.call(this);
      this.containerModule.destroy();
      this.pagerMessageModule.destroy();
      if (!this.isReactTemplate()) {
        this.element.innerHTML = "";
      }
    };
    Pager2.prototype.destroyTemplate = function(propertyNames, index) {
      this.clearTemplate(propertyNames, index);
    };
    Pager2.prototype.getModuleName = function() {
      return "pager";
    };
    Pager2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.isDestroyed) {
        return;
      }
      if (newProp.pageSize === this.getLocalizedLabel("All") && oldProp.pageSize === this.totalRecordsCount) {
        this.pageSize = this.totalRecordsCount;
        return;
      }
      if (newProp.pageCount !== oldProp.pageCount) {
        this.containerModule.refreshNumericLinks();
        this.containerModule.refresh();
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "currentPage":
            if (this.checkGoToPage(newProp.currentPage, oldProp.currentPage)) {
              this.currentPageChanged(newProp, oldProp);
            }
            break;
          case "pageSize":
          case "totalRecordsCount":
          case "customText":
            if (this.checkpagesizes() && this.pagerdropdownModule) {
              if (oldProp.pageSize !== newProp.pageSize) {
                this.currentPage = 1;
              }
              this.pagerdropdownModule.setDropDownValue("value", this.pageSize);
            }
            if (newProp.pageSize !== oldProp.pageSize) {
              this.pageSize = newProp.pageSize;
              this.currentPageChanged(newProp, oldProp);
              if (this.isCancel && this.hasParent) {
                this.parent.setProperties({
                  pageSettings: {
                    pageSize: oldProp.pageSize
                  }
                }, true);
              }
            } else {
              this.refresh();
            }
            break;
          case "pageSizes":
            if (this.checkpagesizes() && this.pagerdropdownModule) {
              this.pagerdropdownModule.destroy();
              this.pagerdropdownModule.render();
            }
            this.refresh();
            break;
          case "template":
            this.templateFn = this.compile(this.template);
            this.refresh();
            break;
          case "locale":
            this.initLocalization();
            this.refresh();
            break;
          case "enableExternalMessage":
            if (this.enableExternalMessage && this.externalMessageModule) {
              this.externalMessageModule.render();
            }
            break;
          case "externalMessage":
            if (this.externalMessageModule) {
              this.externalMessageModule.refresh();
            }
            break;
          case "enableRtl":
            this.updateRTL();
            break;
          case "enablePagerMessage":
            if (this.enablePagerMessage) {
              this.pagerMessageModule.showMessage();
            } else {
              this.pagerMessageModule.hideMessage();
            }
            break;
        }
      }
      this.resizePager();
    };
    Pager2.prototype.wireEvents = function() {
      if (!this.hasParent) {
        EventHandler.add(this.element, "keydown", this.keyPressHandler, this);
        EventHandler.add(document.body, "keydown", this.keyDownHandler, this);
      }
      EventHandler.add(this.element, "focusin", this.onFocusIn, this);
      EventHandler.add(this.element, "focusout", this.onFocusOut, this);
      EventHandler.add(window, "resize", this.resizePager, this);
      EventHandler.add(window, "load", this.resizePager, this);
    };
    Pager2.prototype.unwireEvents = function() {
      if (!this.hasParent) {
        EventHandler.remove(this.element, "keydown", this.keyPressHandler);
        EventHandler.remove(document.body, "keydown", this.keyDownHandler);
      }
      EventHandler.remove(this.element, "focusin", this.onFocusIn);
      EventHandler.remove(this.element, "focusout", this.onFocusOut);
      EventHandler.remove(window, "resize", this.resizePager);
      EventHandler.remove(window, "load", this.resizePager);
    };
    Pager2.prototype.onFocusIn = function(e) {
      var focusedTabIndexElement = this.getFocusedTabindexElement();
      if (isNullOrUndefined(focusedTabIndexElement)) {
        var target = e.target;
        var dropDownPage = this.getDropDownPage();
        if (!this.hasParent) {
          this.element.tabIndex = -1;
        }
        if (target === this.element && !this.hasParent) {
          var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
          this.addFocus(focusablePagerElements[0], true);
          return;
        }
        if (target === this.element) {
          this.element.tabIndex = 0;
          return;
        }
        if (target !== dropDownPage && !target.classList.contains("e-disable")) {
          this.addFocus(target, true);
        }
      }
    };
    Pager2.prototype.onFocusOut = function(e) {
      var focusedElement = this.getFocusedElement();
      var dropDownPage = this.getDropDownPage();
      if (!isNullOrUndefined(focusedElement)) {
        this.removeFocus(focusedElement, true);
      }
      if (this.pageSizes && dropDownPage && dropDownPage.classList.contains("e-input-focus")) {
        this.removeFocus(dropDownPage, true);
      }
      this.setTabIndexForFocusLastElement();
      if (!this.hasParent) {
        this.element.tabIndex = 0;
      }
      if (this.hasParent) {
        this.element.tabIndex = -1;
      }
    };
    Pager2.prototype.keyDownHandler = function(e) {
      if (e.altKey) {
        if (e.keyCode === 74) {
          var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
          if (focusablePagerElements.length > 0) {
            focusablePagerElements[0].focus();
          }
        }
      }
    };
    Pager2.prototype.keyPressHandler = function(e) {
      var presskey = extend(e, {
        cancel: false
      });
      this.notify(keyPressed, presskey);
      if (presskey.cancel === true) {
        e.stopImmediatePropagation();
      }
    };
    Pager2.prototype.addListener = function() {
      if (this.isDestroyed) {
        return;
      }
      if (!this.hasParent) {
        this.on(keyPressed, this.onKeyPress, this);
      }
    };
    Pager2.prototype.removeListener = function() {
      if (this.isDestroyed) {
        return;
      }
      if (!this.hasParent) {
        this.off(keyPressed, this.onKeyPress);
      }
    };
    Pager2.prototype.onKeyPress = function(e) {
      if (!this.hasParent) {
        if (this.checkPagerHasFocus()) {
          this.changePagerFocus(e);
        } else {
          e.preventDefault();
          this.setPagerFocus();
        }
      }
    };
    Pager2.prototype.checkPagerHasFocus = function() {
      return this.getFocusedTabindexElement() ? true : false;
    };
    Pager2.prototype.setPagerContainerFocus = function() {
      this.element.focus();
    };
    Pager2.prototype.setPagerFocus = function() {
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      if (focusablePagerElements.length > 0) {
        focusablePagerElements[0].focus();
      }
    };
    Pager2.prototype.setPagerFocusForActiveElement = function() {
      var currentActivePage = this.getActiveElement();
      if (currentActivePage) {
        currentActivePage.focus();
      }
    };
    Pager2.prototype.setTabIndexForFocusLastElement = function() {
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      var dropDownPage = this.getDropDownPage();
      if (this.pageSizes && dropDownPage && !isNullOrUndefined(dropDownPage.offsetParent)) {
        dropDownPage.tabIndex = 0;
      } else if (focusablePagerElements.length > 0) {
        focusablePagerElements[focusablePagerElements.length - 1].tabIndex = 0;
      }
    };
    Pager2.prototype.changePagerFocus = function(e) {
      this.keyAction = e.key;
      if (e.shiftKey && e.keyCode === 9) {
        this.changeFocusByShiftTab(e);
      } else if (e.keyCode === 9) {
        this.changeFocusByTab(e);
      } else if (e.keyCode === 13 || e.keyCode === 32) {
        this.navigateToPageByEnterOrSpace(e);
      } else if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 35 || e.keyCode === 36) {
        this.navigateToPageByKey(e);
      }
      this.keyAction = "";
    };
    Pager2.prototype.getFocusedTabindexElement = function() {
      var focusedTabIndexElement;
      var tabindexElements = this.element.querySelectorAll('[tabindex]:not([tabindex="-1"])');
      for (var i = 0; i < tabindexElements.length; i++) {
        var element = tabindexElements[parseInt(i.toString(), 10)];
        if (element && (element.classList.contains("e-focused") || element.classList.contains("e-input-focus"))) {
          focusedTabIndexElement = element;
          break;
        }
      }
      return focusedTabIndexElement;
    };
    Pager2.prototype.changeFocusByTab = function(e) {
      var currentItemPagerFocus = this.getFocusedTabindexElement();
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      var dropDownPage = this.getDropDownPage();
      if (focusablePagerElements.length > 0) {
        if (this.pageSizes && dropDownPage && currentItemPagerFocus === focusablePagerElements[focusablePagerElements.length - 1]) {
          dropDownPage.tabIndex = 0;
        } else {
          for (var i = 0; i < focusablePagerElements.length; i++) {
            if (currentItemPagerFocus === focusablePagerElements[parseInt(i.toString(), 10)]) {
              var incrementNumber = i + 1;
              if (incrementNumber < focusablePagerElements.length) {
                e.preventDefault();
                focusablePagerElements[parseInt(incrementNumber.toString(), 10)].focus();
              }
              break;
            }
          }
        }
      }
    };
    Pager2.prototype.changeFocusByShiftTab = function(e) {
      var currentItemPagerFocus = this.getFocusedTabindexElement();
      var focusablePagerElements = this.getFocusablePagerElements(this.element, []);
      var dropDownPage = this.getDropDownPage();
      if (this.pageSizes && dropDownPage && dropDownPage.classList.contains("e-input-focus")) {
        dropDownPage.tabIndex = -1;
        this.addFocus(focusablePagerElements[focusablePagerElements.length - 1], true);
      } else if (focusablePagerElements.length > 0) {
        for (var i = 0; i < focusablePagerElements.length; i++) {
          if (currentItemPagerFocus === focusablePagerElements[parseInt(i.toString(), 10)]) {
            var decrementNumber = i - 1;
            if (decrementNumber >= 0) {
              e.preventDefault();
              focusablePagerElements[parseInt(decrementNumber.toString(), 10)].focus();
            } else if (this.hasParent) {
              var rows = this.parent.getRows();
              var lastRow = rows[rows.length - 1];
              var lastCell = lastRow.lastChild;
              e.preventDefault();
              lastCell.focus();
              this.firstPagerFocus = true;
            }
            break;
          }
        }
      }
    };
    Pager2.prototype.checkFirstPagerFocus = function() {
      if (this.firstPagerFocus) {
        this.firstPagerFocus = false;
        return true;
      }
      return false;
    };
    Pager2.prototype.navigateToPageByEnterOrSpace = function(e) {
      var currentItemPagerFocus = this.getFocusedElement();
      if (currentItemPagerFocus) {
        this.goToPage(parseInt(currentItemPagerFocus.getAttribute("index"), 10));
        var currentActivePage = this.getActiveElement();
        var selectedClass = this.getClass(currentItemPagerFocus);
        var classElement = this.getElementByClass(selectedClass);
        if ((selectedClass === "e-first" || selectedClass === "e-prev" || selectedClass === "e-next" || selectedClass === "e-last" || selectedClass === "e-pp" || selectedClass === "e-np") && classElement && !classElement.classList.contains("e-disable")) {
          classElement.focus();
        } else if (this.checkFocusInAdaptiveMode(currentItemPagerFocus)) {
          this.changeFocusInAdaptiveMode(currentItemPagerFocus);
        } else {
          if (currentActivePage) {
            currentActivePage.focus();
          }
        }
      }
    };
    Pager2.prototype.navigateToPageByKey = function(e) {
      var actionClass = e.keyCode === 37 ? ".e-prev" : e.keyCode === 39 ? ".e-next" : e.keyCode === 35 ? ".e-last" : e.keyCode === 36 ? ".e-first" : "";
      var pagingItem = this.element.querySelector(actionClass);
      var currentItemPagerFocus = this.getFocusedElement();
      if (!isNullOrUndefined(pagingItem) && pagingItem.hasAttribute("index") && !isNaN(parseInt(pagingItem.getAttribute("index"), 10))) {
        this.goToPage(parseInt(pagingItem.getAttribute("index"), 10));
        var currentActivePage = this.getActiveElement();
        if (this.checkFocusInAdaptiveMode(currentItemPagerFocus)) {
          this.changeFocusInAdaptiveMode(currentItemPagerFocus);
        } else {
          if (currentActivePage) {
            currentActivePage.focus();
          }
        }
      }
    };
    Pager2.prototype.checkFocusInAdaptiveMode = function(element) {
      var selectedClass = this.getClass(element);
      return selectedClass === "e-mfirst" || selectedClass === "e-mprev" || selectedClass === "e-mnext" || selectedClass === "e-mlast" ? true : false;
    };
    Pager2.prototype.changeFocusInAdaptiveMode = function(element) {
      var selectedClass = this.getClass(element);
      var classElement = this.getElementByClass(selectedClass);
      if (classElement && classElement.classList.contains("e-disable")) {
        if (selectedClass === "e-mnext" || selectedClass === "e-mlast") {
          var mPrev = this.element.querySelector(".e-mprev");
          mPrev.focus();
        } else {
          this.setPagerFocus();
        }
      }
    };
    Pager2.prototype.removeTabindexLastElements = function() {
      var tabIndexElements = this.element.querySelectorAll('[tabindex]:not([tabindex="-1"])');
      if (tabIndexElements.length > 1) {
        for (var i = 1; i < tabIndexElements.length; i++) {
          var element = tabIndexElements[parseInt(i.toString(), 10)];
          if (element) {
            element.tabIndex = -1;
          }
        }
      }
    };
    Pager2.prototype.getActiveElement = function() {
      return this.element.querySelector(".e-active");
    };
    Pager2.prototype.getDropDownPage = function() {
      var dropDownPageHolder = this.element.querySelector(".e-pagerdropdown");
      var dropDownPage;
      if (dropDownPageHolder) {
        dropDownPage = dropDownPageHolder.children[0];
      }
      return dropDownPage;
    };
    Pager2.prototype.getFocusedElement = function() {
      return this.element.querySelector(".e-focused");
    };
    Pager2.prototype.getClass = function(element) {
      var currentClass;
      var classList2 = ["e-mfirst", "e-mprev", "e-first", "e-prev", "e-pp", "e-np", "e-next", "e-last", "e-mnext", "e-mlast"];
      for (var i = 0; i < classList2.length; i++) {
        if (element && element.classList.contains(classList2[parseInt(i.toString(), 10)])) {
          currentClass = classList2[parseInt(i.toString(), 10)];
          return currentClass;
        }
      }
      return currentClass;
    };
    Pager2.prototype.getElementByClass = function(className) {
      return this.element.querySelector("." + className);
    };
    Pager2.prototype.getFocusablePagerElements = function(element, previousElements) {
      var target = element;
      var targetChildrens = target.children;
      var pagerElements = previousElements;
      for (var i = 0; i < targetChildrens.length; i++) {
        var element_1 = targetChildrens[parseInt(i.toString(), 10)];
        if (element_1.children.length > 0 && !element_1.classList.contains("e-pagesizes")) {
          pagerElements = this.getFocusablePagerElements(element_1, pagerElements);
        } else {
          var tabindexElement = targetChildrens[parseInt(i.toString(), 10)];
          if (tabindexElement.hasAttribute("tabindex") && !element_1.classList.contains("e-disable") && element_1.style.display !== "none" && !isNullOrUndefined(element_1.offsetParent)) {
            pagerElements.push(tabindexElement);
          }
        }
      }
      return pagerElements;
    };
    Pager2.prototype.addFocus = function(element, addFocusClass) {
      if (!isNullOrUndefined(element)) {
        if (addFocusClass) {
          addClass([element], ["e-focused", "e-focus"]);
        }
        element.tabIndex = 0;
      }
    };
    Pager2.prototype.removeFocus = function(element, removeFocusClass) {
      if (removeFocusClass) {
        removeClass([element], ["e-focused", "e-focus"]);
      }
      element.tabIndex = -1;
    };
    Pager2.prototype.getLocalizedLabel = function(key) {
      return this.localeObj.getConstant(key);
    };
    Pager2.prototype.goToPage = function(pageNo) {
      if (this.checkGoToPage(pageNo)) {
        this.currentPage = pageNo;
        this.isInteracted = false;
        this.dataBind();
      }
    };
    Pager2.prototype.setPageSize = function(pageSize) {
      this.pageSize = pageSize;
      this.dataBind();
    };
    Pager2.prototype.checkpagesizes = function() {
      if (this.pageSizes === true || this.pageSizes.length) {
        return true;
      }
      return false;
    };
    Pager2.prototype.checkGoToPage = function(newPageNo, oldPageNo) {
      if (newPageNo !== this.currentPage) {
        this.previousPageNo = this.currentPage;
      }
      if (!isNullOrUndefined(oldPageNo)) {
        this.previousPageNo = oldPageNo;
      }
      if (this.previousPageNo !== newPageNo && newPageNo >= 1 && newPageNo <= this.totalPages) {
        return true;
      }
      return false;
    };
    Pager2.prototype.currentPageChanged = function(newProp, oldProp) {
      if (this.enableQueryString) {
        this.updateQueryString(this.currentPage);
      }
      if (newProp.currentPage !== oldProp.currentPage || newProp.pageSize !== oldProp.pageSize) {
        var args = {
          currentPage: this.currentPage,
          newProp,
          oldProp,
          cancel: false,
          isInteracted: this.isInteracted
        };
        this.trigger("click", args);
        if (!args.cancel) {
          this.isCancel = false;
          this.refresh();
        } else {
          this.isCancel = true;
          if (oldProp && oldProp.pageSize) {
            this.setProperties({
              pageSize: oldProp.pageSize
            }, true);
            if (this.pagerdropdownModule) {
              this.pagerdropdownModule.setDropDownValue("value", oldProp.pageSize);
              this.pagerdropdownModule["dropDownListObject"].text = oldProp.pageSize + "";
            }
          }
        }
      }
    };
    Pager2.prototype.pagerTemplate = function() {
      if (this.isReactTemplate() && this.hasParent) {
        return;
      }
      var result;
      this.element.classList.add("e-pagertemplate");
      this.compile(this.template);
      var data = {
        currentPage: this.currentPage,
        pageSize: this.pageSize,
        pageCount: this.pageCount,
        totalRecordsCount: this.totalRecordsCount,
        totalPages: this.totalPages
      };
      var tempId = this.element.parentElement.id + "_template";
      if (this.isReactTemplate() && !this.isVue) {
        this.getPagerTemplate()(data, this, "template", tempId, null, null, this.element);
        this.renderReactTemplates();
      } else {
        result = this.isVue ? this.getPagerTemplate()(data, this, "template") : this.getPagerTemplate()(data);
        appendChildren(this.element, result);
      }
    };
    Pager2.prototype.updateTotalPages = function() {
      this.totalPages = this.isAllPage ? 1 : this.totalRecordsCount % this.pageSize === 0 ? this.totalRecordsCount / this.pageSize : parseInt((this.totalRecordsCount / this.pageSize).toString(), 10) + 1;
    };
    Pager2.prototype.getPagerTemplate = function() {
      return this.templateFn;
    };
    Pager2.prototype.compile = function(template) {
      if (template) {
        try {
          if (typeof template === "function") {
            this.templateFn = compile(template);
          } else {
            if (document.querySelectorAll(template).length) {
              this.templateFn = compile(document.querySelector(template).innerHTML.trim());
            }
          }
        } catch (e) {
          this.templateFn = compile(template);
        }
      }
      return void 0;
    };
    Pager2.prototype.refresh = function() {
      if (this.template) {
        if (this.isReactTemplate()) {
          this.updateTotalPages();
          this.notify(this.pageRefresh, {});
        } else {
          this.element.innerHTML = "";
          this.updateTotalPages();
          this.pagerTemplate();
        }
      } else {
        this.updateRTL();
        var focusedTabIndexElement = this.getFocusedTabindexElement();
        this.containerModule.refresh();
        this.removeTabindexLastElements();
        if (focusedTabIndexElement && focusedTabIndexElement.classList.contains("e-disable")) {
          if (this.checkFocusInAdaptiveMode(focusedTabIndexElement)) {
            this.changeFocusInAdaptiveMode(focusedTabIndexElement);
          } else {
            this.setPagerFocusForActiveElement();
          }
        }
        if (this.enablePagerMessage) {
          this.pagerMessageModule.refresh();
        }
        if (this.pagerdropdownModule) {
          this.pagerdropdownModule.refresh();
        }
        if (this.enableExternalMessage && this.externalMessageModule) {
          this.externalMessageModule.refresh();
        }
        this.setTabIndexForFocusLastElement();
        this.resizePager();
      }
    };
    Pager2.prototype.updateRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    Pager2.prototype.initLocalization = function() {
      this.localeObj = new L10n(this.getModuleName(), this.defaultConstants, this.locale);
    };
    Pager2.prototype.updateQueryString = function(value) {
      var updatedUrl = this.getUpdatedURL(window.location.href, "page", value.toString());
      window.history.pushState({
        path: updatedUrl
      }, "", updatedUrl);
    };
    Pager2.prototype.getUpdatedURL = function(uri, key, value) {
      var regExp = RegExp;
      var regx = new regExp("([?|&])" + key + "=.*?(&|#|$)", "i");
      if (uri.match(regx)) {
        return uri.replace(regx, "$1" + key + "=" + value + "$2");
      } else {
        var hash = "";
        if (uri.indexOf("#") !== -1) {
          hash = uri.replace(/.*#/, "#");
          uri = uri.replace(/#.*/, "");
        }
        return uri + (uri.indexOf("?") !== -1 ? "&" : "?") + key + "=" + value + hash;
      }
    };
    Pager2.prototype.renderFirstPrevDivForDevice = function() {
      this.element.appendChild(createElement("div", {
        className: "e-mfirst e-icons e-icon-first",
        attrs: {
          title: this.getLocalizedLabel("firstPageTooltip"),
          tabindex: "-1"
        }
      }));
      this.element.appendChild(createElement("div", {
        className: "e-mprev e-icons e-icon-prev",
        attrs: {
          title: this.getLocalizedLabel("previousPageTooltip"),
          tabindex: "-1"
        }
      }));
    };
    Pager2.prototype.renderNextLastDivForDevice = function() {
      this.element.appendChild(createElement("div", {
        className: "e-mnext e-icons e-icon-next",
        attrs: {
          title: this.getLocalizedLabel("nextPageTooltip"),
          tabindex: "-1"
        }
      }));
      this.element.appendChild(createElement("div", {
        className: "e-mlast e-icons e-icon-last",
        attrs: {
          title: this.getLocalizedLabel("lastPageTooltip"),
          tabindex: "-1"
        }
      }));
    };
    Pager2.prototype.addAriaLabel = function() {
      var classList2 = [".e-mfirst", ".e-mprev", ".e-mnext", ".e-mlast"];
      if (!Browser.isDevice) {
        for (var i = 0; i < classList2.length; i++) {
          var element = this.element.querySelector(classList2[parseInt(i.toString(), 10)]);
          element.setAttribute("aria-label", element.getAttribute("title"));
        }
      }
    };
    Pager2.prototype.isReactTemplate = function() {
      return (this.isReact || this.isVue) && this.template && typeof this.template !== "string";
    };
    Pager2.prototype.calculateActualWidth = function() {
      var pagerElements = this.element.querySelectorAll(
        /* tslint:disable-next-line:max-line-length */
        ".e-mfirst, .e-mprev, .e-icon-first, .e-icon-prev, .e-pp:not(.e-disable), .e-numericitem:not(.e-hide), .e-numericitem.e-active.e-hide, .e-np:not(.e-disable), .e-icon-next, .e-icon-last, .e-parentmsgbar, .e-mnext, .e-mlast, .e-pagerdropdown, .e-pagerconstant"
      );
      var actualWidth = 0;
      for (var i = 0; i < pagerElements.length; i++) {
        if (getComputedStyle(pagerElements[parseInt(i.toString(), 10)]).display !== "none") {
          actualWidth += pagerElements[parseInt(i.toString(), 10)].offsetWidth + parseFloat(getComputedStyle(pagerElements[parseInt(i.toString(), 10)]).marginLeft) + parseFloat(getComputedStyle(pagerElements[parseInt(i.toString(), 10)]).marginRight);
        }
      }
      var pagerContainer = this.element.querySelector(".e-pagercontainer");
      actualWidth += parseFloat(getComputedStyle(pagerContainer).marginLeft) + parseFloat(getComputedStyle(pagerContainer).marginRight);
      return actualWidth;
    };
    Pager2.prototype.resizePager = function() {
      var _this = this;
      var isStyleApplied = this.element.classList.contains("e-pager") ? getComputedStyle(this.element).getPropertyValue("border-style").includes("solid") : null;
      if (!this.template && isStyleApplied) {
        var pagerContainer = this.element.querySelector(".e-pagercontainer");
        var actualWidth = this.calculateActualWidth();
        var pagerWidth = this.element.clientWidth - parseFloat(getComputedStyle(this.element).paddingLeft) - parseFloat(getComputedStyle(this.element).paddingRight) - parseFloat(getComputedStyle(this.element).marginLeft) - parseFloat(getComputedStyle(this.element).marginRight);
        var numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
        var hiddenNumItems = pagerContainer.querySelectorAll('.e-numericitem.e-hide:not([style*="display: none"])');
        var hideFrom = numItems.length;
        var showFrom = 1;
        var bufferWidth = !isNullOrUndefined(parentsUntil(this.element, "e-bigger")) ? 10 : 5;
        var NP = pagerContainer.querySelector(".e-np");
        var PP = pagerContainer.querySelector(".e-pp");
        var detailItems = this.element.querySelectorAll('.e-parentmsgbar:not(.e-hide):not([style*="display: none"]), .e-pagesizes:not(.e-hide):not([style*="display: none"])');
        var totDetailWidth_1 = 0;
        if (detailItems.length) {
          detailItems.forEach(function(item) {
            totDetailWidth_1 += item.offsetWidth;
          });
          this.averageDetailWidth = totDetailWidth_1 / detailItems.length;
        }
        var totalWidth = 0;
        for (var i = 0; i < numItems.length; i++) {
          totalWidth += numItems[parseInt(i.toString(), 10)].offsetWidth + parseFloat(getComputedStyle(numItems[parseInt(i.toString(), 10)]).marginLeft) + parseFloat(getComputedStyle(numItems[parseInt(i.toString(), 10)]).marginRight);
        }
        var numericItemWidth = totalWidth / numItems.length;
        if (pagerWidth > 0 && actualWidth >= pagerWidth - (numericItemWidth ? numericItemWidth : 0)) {
          this.isPagerResized = true;
          if (this.currentPage !== this.totalPages) {
            classList(NP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
          }
          actualWidth = this.calculateActualWidth();
          var diff = Math.abs(actualWidth - pagerWidth);
          var numToHide = Math.ceil(diff / numericItemWidth);
          numToHide = numToHide === 0 ? 1 : numToHide > numItems.length ? numItems.length - 1 : numToHide;
          for (var i = 1; i <= numToHide; i++) {
            var hideIndex = hideFrom - parseInt(i.toString(), 10);
            numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
            if (this.currentPage !== 1 && (parseInt(numItems[Math.abs(hideIndex)].getAttribute("index"), 10) === this.currentPage || parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) === this.currentPage)) {
              hideIndex = 0;
              classList(PP, ["e-numericitem", "e-pager-default"], ["e-nextprevitemdisabled", "e-disable"]);
            }
            if (numItems[Math.abs(hideIndex)] && !numItems[Math.abs(hideIndex)].classList.contains("e-currentitem")) {
              numItems[Math.abs(hideIndex)].classList.add("e-hide");
            }
          }
          numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
          if (numItems.length <= 1 && detailItems.length && window.innerWidth >= 768) {
            var pagerDetailItemsWidth = this.calculateActualWidth();
            if (pagerDetailItemsWidth > pagerWidth - bufferWidth) {
              var detailtoHide = Math.floor((pagerWidth - (pagerDetailItemsWidth - totDetailWidth_1)) / this.averageDetailWidth);
              detailtoHide = detailItems.length - detailtoHide;
              for (var i = 0; i < (detailtoHide > detailItems.length ? detailItems.length : detailtoHide); i++) {
                detailItems[parseInt(i.toString(), 10)].classList.add("e-hide");
              }
            }
          }
        } else if (actualWidth < pagerWidth && hiddenNumItems.length) {
          var diff = Math.abs(pagerWidth - actualWidth);
          var hiddenDetailItems = this.element.querySelectorAll(".e-parentmsgbar.e-hide, .e-pagesizes.e-hide");
          if (hiddenDetailItems.length && diff > this.averageDetailWidth + this.averageDetailWidth / 4) {
            hiddenDetailItems[hiddenDetailItems.length - 1].classList.remove("e-hide");
          }
          if (diff > numericItemWidth * 2 && !hiddenDetailItems.length && window.innerWidth >= 768) {
            var numToShow = Math.floor(diff / (numericItemWidth + bufferWidth));
            numToShow = numToShow > hiddenNumItems.length ? hiddenNumItems.length : numToShow - 1;
            var lesserIndexItems = Array.from(hiddenNumItems).filter(function(item) {
              return parseInt(item.getAttribute("index"), 10) < _this.currentPage;
            }).sort(function(a, b) {
              return parseInt(b.getAttribute("index"), 10) - parseInt(a.getAttribute("index"), 10);
            });
            var greaterIndexItems = Array.from(hiddenNumItems).filter(function(item) {
              return parseInt(item.getAttribute("index"), 10) > _this.currentPage;
            });
            var showItems = lesserIndexItems.length && lesserIndexItems || greaterIndexItems.length && greaterIndexItems;
            for (var i = 1; i <= numToShow; i++) {
              var showItem = showItems && showItems[Math.abs(showFrom - i)];
              if (showItem) {
                showItem.classList.remove("e-hide");
                if (showItem === showItems[showItems.length - 1]) {
                  showItems = null;
                }
              }
            }
          }
        }
        numItems = pagerContainer.querySelectorAll('.e-numericitem:not(.e-hide):not([style*="display: none"]):not(.e-np):not(.e-pp)');
        if (numItems.length) {
          if (parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) === this.totalPages) {
            classList(NP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
          }
          if (parseInt(numItems[0].getAttribute("index"), 10) === 1) {
            classList(PP, ["e-nextprevitemdisabled", "e-disable"], ["e-numericitem", "e-pager-default"]);
          }
          var isLastSet = Array.from(numItems).some(function(item) {
            return parseInt(item.getAttribute("index"), 10) === _this.totalPages;
          });
          var ppIndex = parseInt(numItems[0].getAttribute("index"), 10) - (isLastSet ? this.avgNumItems : numItems.length);
          PP.setAttribute("index", ppIndex < 1 ? "1" : ppIndex.toString());
          NP.setAttribute("index", (parseInt(numItems[numItems.length - 1].getAttribute("index"), 10) + 1).toString());
          this.avgNumItems = isLastSet ? this.avgNumItems : numItems.length;
        }
        if (this.element.offsetWidth < 769 && window.getComputedStyle(this.element.querySelector(".e-mfirst")).getPropertyValue("display") !== "none" && this.pageSizes) {
          this.element.querySelector(".e-pagesizes").classList.remove("e-hide");
          this.element.querySelector(".e-parentmsgbar").classList.remove("e-hide");
          this.element.classList.add("e-adaptive");
          this.element.querySelector(".e-pagenomsg").innerHTML = this.element.offsetWidth < 481 ? this.currentPage + " / " + this.totalPages : this.pagerMessageModule.format(this.getLocalizedLabel("currentPageInfo"), [this.totalRecordsCount === 0 ? 0 : this.currentPage, this.totalPages || 0, this.totalRecordsCount || 0]) + " ";
        } else {
          this.element.classList.remove("e-adaptive");
          this.element.querySelector(".e-pagenomsg").innerHTML = this.pagerMessageModule.format(this.getLocalizedLabel("currentPageInfo"), [this.totalRecordsCount === 0 ? 0 : this.currentPage, this.totalPages || 0, this.totalRecordsCount || 0]) + " ";
        }
      }
    };
    __decorate12([Property(false)], Pager2.prototype, "enableQueryString", void 0);
    __decorate12([Property(false)], Pager2.prototype, "enableExternalMessage", void 0);
    __decorate12([Property(true)], Pager2.prototype, "enablePagerMessage", void 0);
    __decorate12([Property(12)], Pager2.prototype, "pageSize", void 0);
    __decorate12([Property(10)], Pager2.prototype, "pageCount", void 0);
    __decorate12([Property(1)], Pager2.prototype, "currentPage", void 0);
    __decorate12([Property()], Pager2.prototype, "totalRecordsCount", void 0);
    __decorate12([Property()], Pager2.prototype, "externalMessage", void 0);
    __decorate12([Property(false)], Pager2.prototype, "pageSizes", void 0);
    __decorate12([Property()], Pager2.prototype, "template", void 0);
    __decorate12([Property("")], Pager2.prototype, "customText", void 0);
    __decorate12([Event2()], Pager2.prototype, "click", void 0);
    __decorate12([Property("")], Pager2.prototype, "cssClass", void 0);
    __decorate12([Event2()], Pager2.prototype, "dropDownChanged", void 0);
    __decorate12([Event2()], Pager2.prototype, "created", void 0);
    Pager2 = __decorate12([NotifyPropertyChanges], Pager2);
    return Pager2;
  }(Component2)
);

// node_modules/@syncfusion/ej2-grids/src/pager/pager-dropdown.js
var PagerDropDown = (
  /** @class */
  function() {
    function PagerDropDown2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    PagerDropDown2.prototype.getModuleName = function() {
      return "pagerdropdown";
    };
    PagerDropDown2.prototype.render = function() {
      var pagerObj = this.pagerModule;
      this.pagerDropDownDiv = createElement("div", {
        className: "e-pagesizes"
      });
      var dropDownDiv = createElement("div", {
        className: "e-pagerdropdown"
      });
      var defaultTextDiv = createElement("div", {
        className: "e-pagerconstant"
      });
      var input2 = createElement("input", {
        attrs: {
          type: "text",
          tabindex: "-1"
        }
      });
      this.pagerCons = createElement("span", {
        className: "e-constant",
        innerHTML: this.pagerModule.getLocalizedLabel("pagerDropDown")
      });
      dropDownDiv.appendChild(input2);
      defaultTextDiv.appendChild(this.pagerCons);
      this.pagerDropDownDiv.appendChild(dropDownDiv);
      this.pagerDropDownDiv.appendChild(defaultTextDiv);
      this.pagerModule.element.appendChild(this.pagerDropDownDiv);
      var pageSizesModule = this.pagerModule.pageSizes;
      var pageSizesArray = pageSizesModule.length ? this.convertValue(pageSizesModule) : [this.pagerModule.getLocalizedLabel("All"), "5", "10", "12", "20"];
      var defaultValue = this.pagerModule.pageSize;
      this.dropDownListObject = new DropDownList({
        dataSource: pageSizesArray,
        value: defaultValue.toString(),
        change: this.onChange.bind(this),
        placeholder: this.pagerModule.getLocalizedLabel("pagerDropDown"),
        cssClass: this.pagerModule.cssClass ? "e-alldrop " + this.pagerModule.cssClass : "e-alldrop"
      });
      this.dropDownListObject.appendTo(input2);
      if (pageSizesModule.length) {
        this.dropDownListObject.element.value = this.pagerModule.pageSize.toString();
      }
      pagerObj.pageSize = defaultValue;
      pagerObj.dataBind();
      pagerObj.trigger("dropDownChanged", {
        pageSize: defaultValue
      });
      this.addEventListener();
    };
    PagerDropDown2.prototype.onChange = function(e) {
      if (this.dropDownListObject.value === this.pagerModule.getLocalizedLabel("All")) {
        this.pagerModule.pageSize = this.pagerModule.totalRecordsCount;
        this.pagerModule.isAllPage = true;
        this.refresh();
        e.value = this.pagerModule.pageSize;
        if (document.getElementsByClassName("e-popup-open e-alldrop").length) {
          document.getElementsByClassName("e-popup-open e-alldrop")[0].style.display = "none";
        }
      } else {
        this.pagerModule.pageSize = parseInt(this.dropDownListObject.value, 10);
        this.pagerModule.isAllPage = false;
        if (this.pagerCons.innerHTML !== this.pagerModule.getLocalizedLabel("pagerDropDown")) {
          this.refresh();
        }
      }
      this.pagerModule.dataBind();
      if (!this.pagerModule.isCancel) {
        this.pagerModule.trigger("dropDownChanged", {
          pageSize: this.pagerModule.isAllPage || this.pagerModule.isAllPage === void 0 && this.dropDownListObject.value === this.pagerModule.getLocalizedLabel("All") ? this.pagerModule.totalRecordsCount : parseInt(this.dropDownListObject.value, 10)
        });
      }
    };
    PagerDropDown2.prototype.refresh = function() {
      if (this.pagerCons) {
        if (this.isPageSizeAll(this.pagerModule.pageSize)) {
          this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel("pagerAllDropDown");
          this.pagerCons.parentElement.classList.add("e-page-all");
        } else {
          this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel("pagerDropDown");
          this.pagerCons.parentElement.classList.remove("e-page-all");
        }
        this.pagerDropDownDiv.classList.remove("e-hide");
      }
    };
    PagerDropDown2.prototype.beforeValueChange = function(prop) {
      if (typeof prop.newProp.value === "number") {
        var val = prop.newProp.value.toString();
        prop.newProp.value = val;
      }
    };
    PagerDropDown2.prototype.convertValue = function(pageSizeValue) {
      var item = pageSizeValue;
      for (var i = 0; i < item.length; i++) {
        item[parseInt(i.toString(), 10)] = parseInt(item[parseInt(i.toString(), 10)], 10) ? item[parseInt(i.toString(), 10)].toString() : this.pagerModule.getLocalizedLabel(item[parseInt(i.toString(), 10)]) !== "" ? this.pagerModule.getLocalizedLabel(item[parseInt(i.toString(), 10)]) : item[parseInt(i.toString(), 10)];
      }
      return item;
    };
    PagerDropDown2.prototype.isPageSizeAll = function(value) {
      var pageSizeNum = typeof value === "string" && value !== this.pagerModule.getLocalizedLabel("All") ? parseInt(value, 10) : value;
      if (pageSizeNum === this.pagerModule.totalRecordsCount || value === this.pagerModule.getLocalizedLabel("All")) {
        return true;
      } else {
        return false;
      }
    };
    PagerDropDown2.prototype.setDropDownValue = function(prop, value) {
      if (this.dropDownListObject) {
        var isbeforeAll = this.pagerModule.isAllPage;
        this.pagerModule.isAllPage = this.isPageSizeAll(value);
        this.pagerModule.checkAll = isbeforeAll && this.pagerModule.isAllPage ? true : false;
        this.dropDownListObject["" + prop] = this.pagerModule.isAllPage ? this.pagerModule.getLocalizedLabel("All") : value;
      }
    };
    PagerDropDown2.prototype.addEventListener = function() {
      this.dropDownListObject.on("beforeValueChange", this.beforeValueChange, this);
    };
    PagerDropDown2.prototype.removeEventListener = function() {
      this.dropDownListObject.off("beforeValueChange", this.beforeValueChange);
    };
    PagerDropDown2.prototype.destroy = function(args) {
      if (this.dropDownListObject && !this.dropDownListObject.isDestroyed) {
        this.removeEventListener();
        this.dropDownListObject.destroy();
        remove(this.pagerDropDownDiv);
      }
    };
    return PagerDropDown2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/pager/external-message.js
var ExternalMessage = (
  /** @class */
  function() {
    function ExternalMessage2(pagerModule) {
      this.pagerModule = pagerModule;
    }
    ExternalMessage2.prototype.getModuleName = function() {
      return "externalMessage";
    };
    ExternalMessage2.prototype.render = function() {
      this.element = createElement("div", {
        className: "e-pagerexternalmsg",
        attrs: {
          "aria-label": this.pagerModule.getLocalizedLabel("ExternalMsg")
        }
      });
      this.pagerModule.element.appendChild(this.element);
      this.refresh();
    };
    ExternalMessage2.prototype.refresh = function() {
      if (this.pagerModule.externalMessage && this.pagerModule.externalMessage.toString().length) {
        this.showMessage();
        this.element.innerHTML = this.pagerModule.externalMessage;
      } else {
        this.hideMessage();
      }
    };
    ExternalMessage2.prototype.hideMessage = function() {
      if (!isNullOrUndefined(this.element)) {
        this.element.style.display = "none";
      }
    };
    ExternalMessage2.prototype.showMessage = function() {
      this.element.style.display = "";
    };
    ExternalMessage2.prototype.destroy = function() {
      if (this.element && this.element.parentElement) {
        remove(this.element);
      }
    };
    return ExternalMessage2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/page.js
var Page = (
  /** @class */
  function() {
    function Page2(parent, pageSettings) {
      this.isInitialRender = true;
      this.isCancel = false;
      Pager.Inject(ExternalMessage, PagerDropDown);
      this.parent = parent;
      this.pageSettings = pageSettings;
      this.addEventListener();
    }
    Page2.prototype.getModuleName = function() {
      return "pager";
    };
    Page2.prototype.render = function() {
      var gObj = this.parent;
      this.pagerDestroy();
      if (!isNullOrUndefined(this.parent.pagerTemplate)) {
        this.pageSettings.template = this.parent.pagerTemplate;
        this.parent.pageTemplateChange = true;
      }
      this.element = this.parent.createElement("div", {
        className: "e-gridpager"
      });
      var pagerObj = extend2({}, extend({}, getActualProperties(this.pageSettings)), {
        click: this.clickHandler.bind(this),
        dropDownChanged: this.onSelect.bind(this),
        enableRtl: gObj.enableRtl,
        locale: gObj.locale,
        created: this.addAriaAttr.bind(this)
      }, ["parentObj", "propName"]);
      pagerObj.cssClass = this.parent.cssClass ? this.parent.cssClass : "";
      this.pagerObj = new Pager(pagerObj, void 0, this.parent);
      this.pagerObj.hasParent = true;
      this.pagerObj.on(pagerRefresh, this.renderReactPagerTemplate, this);
      this.pagerObj.allowServerDataBinding = false;
    };
    Page2.prototype.onSelect = function(e) {
      this.pageSettings.pageSize = e.pageSize;
      if (!this.isInitialLoad) {
        this.pageSettings.currentPage = 1;
      }
    };
    Page2.prototype.addAriaAttr = function() {
      if (!this.pageSettings.template) {
        var numericContainerNew = this.parent.createElement("div", {
          className: "e-numericcontainer"
        });
        var pagerContainer = this.element.querySelector(".e-pagercontainer");
        var frag = document.createDocumentFragment();
        var numericContainer = this.element.querySelector(".e-numericcontainer");
        var links = numericContainer.querySelectorAll("a");
        for (var i = 0; i < links.length; i++) {
          if (this.parent.getContentTable()) {
            links[parseInt(i.toString(), 10)].setAttribute("aria-owns", this.parent.getContentTable().id + " " + (i + 1));
          } else {
            links[parseInt(i.toString(), 10)].setAttribute("aria-owns", this.parent.element.getAttribute("id") + "_content_table " + (i + 1));
          }
          var numericContainerDiv = this.parent.createElement("div");
          numericContainerDiv.appendChild(links[parseInt(i.toString(), 10)]);
          frag.appendChild(numericContainerDiv);
        }
        numericContainerNew.appendChild(frag);
        pagerContainer.replaceChild(numericContainerNew, numericContainer);
        var classList2 = [".e-mfirst", ".e-mprev", ".e-first", ".e-prev", ".e-next", ".e-last", ".e-mnext", ".e-mlast"];
        for (var j = 0; j < classList2.length; j++) {
          var element = this.element.querySelector(classList2[parseInt(j.toString(), 10)]);
          if (this.parent.getContentTable()) {
            element.setAttribute("aria-owns", this.parent.getContentTable().id + classList2[parseInt(j.toString(), 10)].replace(".e-", " "));
          }
        }
      }
    };
    Page2.prototype.dataReady = function(e) {
      this.updateModel(e);
    };
    Page2.prototype.refresh = function() {
      this.pagerObj.refresh();
    };
    Page2.prototype.goToPage = function(pageNo) {
      this.pagerObj.goToPage(pageNo);
    };
    Page2.prototype.setPageSize = function(pageSize) {
      this.pagerObj.setPageSize(pageSize);
    };
    Page2.prototype.updateModel = function(e) {
      this.parent.pageSettings.totalRecordsCount = e.count;
      var isAddAction = e.action === "add" && e.requestType === "save" || e.requestType === "batchsave";
      if (this.pagerObj.isAllPage && !isAddAction) {
        this.parent.pageSettings.pageSize = this.parent.pageSettings.totalRecordsCount;
      }
      if (isAddAction) {
        if (this.pagerObj.isAllPage && e.count === this.pageSettings.pageSize) {
          this.pagerObj.setProperties({
            pageSize: e.count
          }, true);
        }
      }
      this.parent.dataBind();
    };
    Page2.prototype.onActionComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        currentPage: this.parent.pageSettings.currentPage,
        requestType: "paging",
        type: actionComplete
      }));
    };
    Page2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      var newProp = e.properties;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        this.pagerObj["" + prop] = newProp["" + prop];
      }
      this.pagerObj.dataBind();
    };
    Page2.prototype.clickHandler = function(e) {
      var gObj = this.parent;
      if (this.isForceCancel || isActionPrevent(gObj) && !gObj.prevPageMoving && !this.isCancel) {
        if (!this.isForceCancel) {
          if (!isNullOrUndefined(e.newProp) && !isNullOrUndefined(e.newProp.pageSize)) {
            gObj.notify(preventBatch, {
              instance: this,
              handler: this.setPageSize,
              arg1: e.newProp.pageSize
            });
            this.pagerObj.setProperties({
              pageSize: e.oldProp.pageSize
            }, true);
            this.parent.setProperties({
              pageSettings: {
                pageSize: e.oldProp.pageSize
              }
            }, true);
            this.pagerObj.setProperties({
              currentPage: gObj.pageSettings.currentPage === this.pagerObj.currentPage ? this.pagerObj.previousPageNo : gObj.pageSettings.currentPage
            }, true);
          } else if (e.currentPage) {
            gObj.notify(preventBatch, {
              instance: this,
              handler: this.goToPage,
              arg1: e.currentPage
            });
            this.pagerObj.currentPage = gObj.pageSettings.currentPage === this.pagerObj.currentPage ? this.pagerObj.previousPageNo : gObj.pageSettings.currentPage;
          }
          this.isForceCancel = true;
          this.pagerObj.dataBind();
        } else {
          this.isForceCancel = false;
        }
        e.cancel = true;
        return;
      }
      gObj.pageSettings.pageSize = this.pagerObj.pageSize;
      gObj.prevPageMoving = false;
      var prevPage = this.pageSettings.currentPage;
      var args = {
        cancel: false,
        requestType: "paging",
        previousPage: prevPage,
        currentPage: e.currentPage,
        pageSize: gObj.pageSettings.pageSize,
        type: actionBegin
      };
      if (!this.isCancel) {
        this.pageSettings.currentPage = e.currentPage;
        this.parent.notify(modelChanged, args);
      }
      if (args.cancel) {
        e.cancel = true;
        this.parent.setProperties({
          pageSettings: {
            currentPage: prevPage
          }
        }, true);
        this.pagerObj.setProperties({
          currentPage: prevPage
        }, true);
        this.isCancel = true;
        return;
      }
      this.isCancel = false;
      this.parent.requestTypeAction = "paging";
    };
    Page2.prototype.keyPressHandler = function(e) {
      if (e.action in keyActions) {
        e.preventDefault();
        this.element.querySelector(keyActions[e.action]).click();
      }
    };
    Page2.prototype.updateExternalMessage = function(message) {
      if (!this.pagerObj.enableExternalMessage) {
        this.pagerObj.enableExternalMessage = true;
        this.pagerObj.dataBind();
      }
      this.pagerObj.externalMessage = message;
      this.pagerObj.dataBind();
    };
    Page2.prototype.appendToElement = function() {
      this.isInitialLoad = true;
      this.parent.element.appendChild(this.element);
      this.parent.setGridPager(this.element);
      this.pagerObj.isReact = this.parent.isReact;
      this.pagerObj.isVue = this.parent.isVue;
      this.pagerObj.appendTo(this.element);
      this.isInitialLoad = false;
    };
    Page2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
        this.appendToElement();
        if (this.isReactTemplate()) {
          this.pagerObj.updateTotalPages();
          this.created();
        }
      }
    };
    Page2.prototype.addEventListener = function() {
      this.handlers = {
        load: this.render,
        end: this.appendToElement,
        ready: this.dataReady,
        complete: this.onActionComplete,
        updateLayout: this.enableAfterRender,
        inboundChange: this.onPropertyChanged,
        keyPress: this.keyPressHandler,
        created: this.created
      };
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.parent.isReact || this.parent.isVue) {
        this.parent.addEventListener(create, this.handlers.created.bind(this));
      }
      this.evtHandlers = [{
        event: initialLoad,
        handler: this.handlers.load
      }, {
        event: initialEnd,
        handler: this.handlers.end
      }, {
        event: dataReady,
        handler: this.handlers.ready
      }, {
        event: pageComplete,
        handler: this.handlers.complete
      }, {
        event: uiUpdate,
        handler: this.handlers.updateLayout
      }, {
        event: inBoundModelChanged,
        handler: this.handlers.inboundChange
      }, {
        event: keyPressed,
        handler: this.handlers.keyPress
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    Page2.prototype.created = function() {
      if (this.isInitialRender && this.isReactTemplate()) {
        this.isInitialRender = false;
        this.renderReactPagerTemplate();
      }
    };
    Page2.prototype.isReactTemplate = function() {
      return (this.parent.isReact || this.parent.isVue) && this.pagerObj.template && typeof this.pagerObj.template !== "string";
    };
    Page2.prototype.renderReactPagerTemplate = function() {
      if (!this.isInitialRender && this.isReactTemplate()) {
        var result = void 0;
        this.parent.destroyTemplate(["pagerTemplate"]);
        this.element.classList.add("e-pagertemplate");
        this.pagerObj.compile(this.pagerObj.template);
        var page = this.parent.pageSettings;
        var data = {
          currentPage: page.currentPage,
          pageSize: page.pageSize,
          pageCount: page.pageCount,
          totalRecordsCount: page.totalRecordsCount,
          totalPages: this.pagerObj.totalPages
        };
        var tempId = this.parent.id + "_pagertemplate";
        if (this.parent.isReact) {
          this.pagerObj.templateFn(data, this.parent, "pagerTemplate", tempId, null, null, this.pagerObj.element);
          this.parent.renderTemplates();
        } else {
          result = this.pagerObj.templateFn(data, this.parent, "pagerTemplate");
          appendChildren(this.pagerObj.element, result);
        }
      }
    };
    Page2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.parent.isReact || this.parent.isVue) {
        this.parent.removeEventListener(create, this.handlers.created);
      }
      this.parent.off(pagerRefresh, this.renderReactPagerTemplate);
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    Page2.prototype.destroy = function() {
      this.removeEventListener();
      if (this.isReactTemplate()) {
        this.parent.destroyTemplate(["pagerTemplate"]);
      }
      this.pagerObj.destroy();
    };
    Page2.prototype.pagerDestroy = function() {
      if (this.pagerObj && !this.pagerObj.isDestroyed) {
        this.pagerObj.destroy();
        remove(this.element);
      }
    };
    return Page2;
  }()
);
var keyActions = {
  pageUp: ".e-prev",
  pageDown: ".e-next",
  ctrlAltPageDown: ".e-last",
  ctrlAltPageUp: ".e-first",
  altPageUp: ".e-pp",
  altPageDown: ".e-np"
};

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-cell-renderer.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FilterCellRenderer = (
  /** @class */
  function(_super) {
    __extends26(FilterCellRenderer2, _super);
    function FilterCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TH", {
        className: "e-filterbarcell",
        attrs: {
          role: "columnheader"
        }
      });
      return _this;
    }
    FilterCellRenderer2.prototype.getGui = function() {
      return this.parent.createElement("div");
    };
    FilterCellRenderer2.prototype.render = function(cell, data) {
      var tr = this.parent.element.querySelector(".e-filterbar");
      var node = this.element.cloneNode();
      var innerDIV = this.getGui();
      var input2;
      var column = cell.column;
      tr.appendChild(node);
      node.setAttribute("e-mappinguid", column.uid);
      if (column.filterTemplate) {
        var fltrData = {};
        if (data) {
          fltrData[column.field] = data[column.field];
        }
        var col = "column";
        fltrData["" + col] = column;
        if (column.visible) {
          var isReactCompiler = this.parent.isReact && typeof column.filterTemplate !== "string";
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          var tempID = this.parent.element.id + column.uid + "filterTemplate";
          if (isReactCompiler || isReactChild) {
            column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID, null, null, node);
            this.parent.renderTemplates();
          } else {
            var element = column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID);
            appendChildren(node, element);
          }
        } else {
          node.classList.add("e-hide");
        }
      } else {
        if (column.type !== "checkbox") {
          if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
            node.classList.add("e-fltrtemp");
            attributes(innerDIV, {
              "class": "e-fltrtempdiv"
            });
            if (isNullOrUndefined(column.filterBarTemplate.create)) {
              input2 = this.parent.createElement("input", {
                id: column.field + "_filterBarcell",
                className: "e-filterUi_input e-filtertext e-fltrTemp",
                attrs: {
                  type: "search",
                  title: column.headerText
                }
              });
              innerDIV.appendChild(input2);
            } else {
              var args = {
                column,
                node: Element
              };
              var temp = column.filterBarTemplate.create;
              if (typeof temp === "string") {
                temp = getValue(temp, window);
              }
              input2 = temp(args);
              if (typeof input2 === "string") {
                var div = this.parent.createElement("div");
                div.innerHTML = input2;
                input2 = div.firstChild;
              }
              attributes(innerDIV, {
                class: "e-filterUi_input e-filtertext e-fltrTemp",
                title: column.headerText,
                id: column.field + "_filterBarcell"
              });
              innerDIV.appendChild(input2);
            }
          } else {
            attributes(innerDIV, {
              "class": "e-filterdiv e-fltrinputdiv"
            });
            input2 = this.parent.createElement("input", {
              id: column.field + "_filterBarcell",
              className: "e-filtertext",
              attrs: {
                type: "search",
                title: column.headerText + cell.attributes.title,
                value: data[cell.column.field] ? data[cell.column.field] : ""
              }
            });
            innerDIV.appendChild(input2);
            var args = {
              element: input2,
              floatLabelType: "Never",
              properties: {
                enableRtl: this.parent.enableRtl,
                showClearButton: true,
                cssClass: this.parent.cssClass
              }
            };
            Input.createInput(args, this.parent.createElement);
          }
          if (column.allowFiltering === false || column.field === "" || isNullOrUndefined(column.field)) {
            input2.setAttribute("disabled", "true");
            input2.classList.add("e-disable");
          }
          var clearIconElem = innerDIV.querySelector(".e-clear-icon");
          if (clearIconElem) {
            clearIconElem.setAttribute("title", this.parent.localeObj.getConstant("ClearButton"));
          }
          if (!column.visible) {
            node.classList.add("e-hide");
          }
          this.appendHtml(node, innerDIV);
          if (this.parent.filterSettings.showFilterBarOperator && this.parent.filterSettings.type === "FilterBar" && !this.parent.isPrinting && isNullOrUndefined(column.filterTemplate) && isNullOrUndefined(column.filterBarTemplate)) {
            this.operatorIconRender(innerDIV, column, cell);
          }
          if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
            var templateWrite = column.filterBarTemplate.write;
            var args = {
              element: input2,
              column
            };
            if (typeof templateWrite === "string") {
              templateWrite = getValue(templateWrite, window);
            }
            templateWrite.call(this, args);
          }
        } else {
          if (!column.visible) {
            node.classList.add("e-hide");
          }
        }
      }
      if (this.parent.isFrozenGrid()) {
        addStickyColumnPosition(this.parent, column, node);
      }
      return node;
    };
    FilterCellRenderer2.prototype.appendHtml = function(node, innerHtml) {
      node.appendChild(innerHtml);
      return node;
    };
    FilterCellRenderer2.prototype.operatorIconRender = function(innerDIV, column, cell) {
      var gObj = this.parent;
      var operators;
      var fbicon = this.parent.createElement("input", {
        className: " e-filterbaroperator e-icons e-icon-filter",
        id: cell.column.uid
      });
      innerDIV.querySelector("span").appendChild(fbicon);
      if (column.filter && column.filter.operator) {
        operators = column.filter.operator;
      } else if (gObj.filterSettings.columns.length) {
        for (var i = 0, a = gObj.filterSettings.columns; i < a.length; i++) {
          var col = a[parseInt(i.toString(), 10)];
          if (col.field === column.field) {
            operators = col.operator;
            break;
          } else {
            operators = "equal";
          }
        }
      } else {
        operators = "equal";
      }
      if (!isNullOrUndefined(gObj.filterModule.operators[column.field])) {
        operators = gObj.filterModule.operators[column.field];
      }
      this.dropOptr = new DropDownList({
        fields: {
          text: "text",
          value: "value"
        },
        popupHeight: "auto",
        value: operators,
        width: "0px",
        enabled: column.allowFiltering,
        popupWidth: "auto",
        enableRtl: this.parent.enableRtl,
        change: this.internalEvent.bind(this),
        beforeOpen: function() {
          var operator = gObj.filterModule.customOperators;
          this.dataSource = operator[gObj.getColumnByUid(this.element.id).type + "Operator"];
          for (var i2 = 0; i2 < this.dataSource.length; i2++) {
            if (column.filter && column.filter.operator && isNullOrUndefined(gObj.filterModule.operators[column.field]) && this.dataSource[parseInt(i2.toString(), 10)].value === column.filter.operator) {
              this.value = column.filter.operator;
            }
          }
        },
        cssClass: this.parent.cssClass ? "e-popup-flbar " + this.parent.cssClass : "e-popup-flbar"
      });
      this.dropOptr.appendTo(fbicon);
      var spanElmt = closest(this.dropOptr.element, "span");
      spanElmt.classList.add("e-filterbardropdown");
      spanElmt.removeAttribute("tabindex");
    };
    FilterCellRenderer2.prototype.internalEvent = function(e) {
      var gObj = this.parent;
      var col = gObj.getColumnByUid(e.element.getAttribute("id"));
      e.column = col;
      gObj.filterModule.operators[col.field] = e.value;
      gObj.notify(getFilterBarOperator, e);
    };
    return FilterCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-menu-operator.js
var FlMenuOptrUI = (
  /** @class */
  function() {
    function FlMenuOptrUI2(parent, customFltrOperators, serviceLocator, filterSettings) {
      this.ddOpen = this.dropDownOpen.bind(this);
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.filterSettings = filterSettings;
      this.customFilterOperators = customFltrOperators;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroyDropDownList, this);
        this.parent.on(destroy, this.destroyDropDownList, this);
      }
    }
    FlMenuOptrUI2.prototype.renderOperatorUI = function(dlgConetntEle, target, column, dlgObj, operator) {
      this.dialogObj = dlgObj;
      var optr = column.type + "Operator";
      this.optrData = this.customOptr = !isNullOrUndefined(operator) ? operator : !isNullOrUndefined(this.parent.filterSettings.operators) && !isNullOrUndefined(this.parent.filterSettings.operators["" + optr]) ? this.parent.filterSettings.operators["" + optr] : this.customFilterOperators["" + optr];
      var dropDatasource = this.customOptr;
      var selectedValue = this.dropSelectedVal(column, optr);
      var optrDiv = this.parent.createElement("div", {
        className: "e-flm_optrdiv"
      });
      dlgConetntEle.appendChild(optrDiv);
      var optrInput = this.parent.createElement("input", {
        id: column.uid + "-floptr"
      });
      optrDiv.appendChild(optrInput);
      this.dropOptr = new DropDownList({
        dataSource: dropDatasource,
        fields: {
          text: "text",
          value: "value"
        },
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        enableRtl: this.parent.enableRtl,
        text: selectedValue,
        // eslint-disable-next-line @typescript-eslint/tslint/config
        change: function() {
          var valInput = document.querySelector(".e-flmenu-valuediv").querySelector("input");
          if (this.value === "isempty" || this.value === "isnotempty" || this.value === "isnull" || this.value === "isnotnull") {
            valInput["ej2_instances"][0]["enabled"] = false;
          } else if (!isNullOrUndefined(valInput.getAttribute("disabled"))) {
            valInput["ej2_instances"][0]["enabled"] = true;
          }
        }
      });
      this.dropOptr.addEventListener(open, this.ddOpen);
      this.dropOptr.appendTo("#" + column.uid + "-floptr");
    };
    FlMenuOptrUI2.prototype.renderResponsiveDropDownList = function(args) {
      args.popup.element.style.width = "100%";
    };
    FlMenuOptrUI2.prototype.dropDownOpen = function(args) {
      args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
      if (this.parent.enableAdaptiveUI) {
        this.renderResponsiveDropDownList(args);
      }
    };
    FlMenuOptrUI2.prototype.dropSelectedVal = function(col, optr) {
      var selValue = "";
      var columns = this.parent.filterSettings.columns;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (col.field === column.field || col.isForeignColumn() && col.foreignKeyValue === column.field) {
          var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("value", "equal", column.operator));
          selValue = !isNullOrUndefined(selectedField[0]) ? selectedField[0].text : "";
        }
      }
      if (selValue === "") {
        if (col.filter.operator) {
          var optrLen = Object.keys(this.optrData).length;
          for (var i = 0; i < optrLen; i++) {
            if (this.optrData[parseInt(i.toString(), 10)].value === col.filter.operator) {
              selValue = this.optrData[parseInt(i.toString(), 10)].text;
            }
          }
        } else {
          selValue = this.optrData[0].text;
        }
      }
      return selValue;
    };
    FlMenuOptrUI2.prototype.getFlOperator = function() {
      return this.dropOptr.value;
    };
    FlMenuOptrUI2.prototype.destroyDropDownList = function() {
      if (this.dropOptr.isDestroyed) {
        return;
      }
      this.dropOptr.removeEventListener(open, this.ddOpen);
      this.dropOptr.destroy();
      this.parent.off(filterMenuClose, this.destroyDropDownList);
      this.parent.off(destroy, this.destroyDropDownList);
    };
    return FlMenuOptrUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/string-filter-ui.js
var StringFilterUI = (
  /** @class */
  function() {
    function StringFilterUI2(parent, serviceLocator, filterSettings) {
      this.parent = parent;
      this.serLocator = serviceLocator;
      this.filterSettings = filterSettings;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    StringFilterUI2.prototype.create = function(args) {
      this.instance = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "strui-" + args.column.uid
      });
      args.target.appendChild(this.instance);
      this.dialogObj = args.dialogObj;
      this.processDataOperation(args);
    };
    StringFilterUI2.prototype.processDataOperation = function(args) {
      var _this = this;
      if (args.column.isForeignColumn()) {
        this.parent.getDataModule().dataManager.executeQuery(this.parent.getDataModule().generateQuery(true)).then(function(result) {
          _this.getAutoCompleteOptions(args, result);
        });
        return;
      }
      this.getAutoCompleteOptions(args);
    };
    StringFilterUI2.prototype.getAutoCompleteOptions = function(args, result) {
      var isForeignColumn = args.column.isForeignColumn();
      var foreignColumnQuery;
      if (isForeignColumn) {
        var filteredData = CheckBoxFilterBase.getDistinct(result.result, args.column.field).records || [];
        var filterQuery = void 0;
        for (var i = 0; i < filteredData.length; i++) {
          if (filterQuery) {
            filterQuery = filterQuery.or(args.column.field, "contains", filteredData[parseInt(i.toString(), 10)][args.column.field], this.parent.filterSettings.enableCaseSensitivity, this.parent.filterSettings.ignoreAccent);
          } else {
            filterQuery = new Predicate(args.column.field, "contains", filteredData[parseInt(i.toString(), 10)][args.column.field], this.parent.filterSettings.enableCaseSensitivity, this.parent.filterSettings.ignoreAccent);
          }
        }
        foreignColumnQuery = new Query().where(filterQuery);
        foreignColumnQuery.params = this.parent.query.params;
      }
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = {
        value: isForeignColumn ? args.column.foreignKeyValue : args.column.field
      };
      var autoComplete = new AutoComplete(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        fields,
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        query: isForeignColumn ? foreignColumnQuery : this.parent.getDataModule().generateQuery(true, true),
        sortOrder: "Ascending",
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        autofill: true,
        placeholder: args.localizeText.getConstant("EnterValue"),
        actionBegin: function() {
          if (this.query.queries.length && this.query.queries[0].fn === "onWhere" && this.query.queries[0].e && this.query.queries[0].e.predicates) {
            for (var i2 = 0; i2 < this.query.queries[0].e.predicates.length; i2++) {
              if (this.properties.fields.value === this.query.queries[0].e.predicates["" + i2].field) {
                this.query.queries[0].e.predicates.splice(i2, 1);
                i2 = i2 - 1;
              }
            }
            if (!this.query.queries[0].e.predicates.length) {
              this.query.queries.splice(0, 1);
            }
          }
        }
      }, args.column.filter.params));
      this.acFocus = this.focus(autoComplete, args);
      this.acComplete = this.actionComplete(autoComplete);
      this.acOpen = this.openPopup.bind(this);
      autoComplete.addEventListener(focus, this.acFocus);
      autoComplete.addEventListener(open, this.acOpen);
      autoComplete.addEventListener(actionComplete, this.acComplete);
      if (dataSource && "result" in dataSource) {
        var query = this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
        var defObj = eventPromise({
          requestType: "stringfilterrequest"
        }, query);
        this.parent.trigger(dataStateChange, defObj.state);
        var def = defObj.deffered;
        def.promise.then(function(e) {
          autoComplete.dataSource = new DataManager(e);
        });
      }
      this.actObj = autoComplete;
      this.actObj.appendTo(this.instance);
      if (isForeignColumn) {
        this.parent.filterModule.filterModule.afterRenderFilterUI();
      }
    };
    StringFilterUI2.prototype.write = function(args) {
      if (args.filteredValue !== "" && !isNullOrUndefined(args.filteredValue)) {
        var struiObj = document.querySelector("#strui-" + args.column.uid).ej2_instances[0];
        struiObj.value = args.filteredValue;
      }
    };
    StringFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      var actuiObj = document.querySelector("#strui-" + column.uid).ej2_instances[0];
      if (Browser.isDevice) {
        actuiObj.hidePopup();
        actuiObj.focusOut();
      }
      var filterValue = actuiObj.value;
      if (isNullOrUndefined(filterValue) || filterValue === "") {
        filterValue = null;
      }
      filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", this.parent.filterSettings.enableCaseSensitivity);
    };
    StringFilterUI2.prototype.openPopup = function(args) {
      getZIndexCalcualtion(args, this.dialogObj);
    };
    StringFilterUI2.prototype.focus = function(actObj, args) {
      return function() {
        actObj.filterType = args.getOptrInstance.getFlOperator();
      };
    };
    StringFilterUI2.prototype.actionComplete = function(actObj) {
      return function(e) {
        e.result = e.result.filter(function(obj, index, arr) {
          return arr.map(function(mapObj) {
            return getValue(actObj.fields.value, mapObj);
          }).indexOf(getValue(actObj.fields.value, obj)) === index;
        });
      };
    };
    StringFilterUI2.prototype.destroy = function() {
      if (!this.actObj || this.actObj.isDestroyed) {
        return;
      }
      this.actObj.removeEventListener(focus, this.acFocus);
      this.actObj.removeEventListener(open, this.acOpen);
      this.actObj.removeEventListener(actionComplete, this.acComplete);
      this.actObj.destroy();
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
    };
    return StringFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/number-filter-ui.js
var NumberFilterUI = (
  /** @class */
  function() {
    function NumberFilterUI2(parent, serviceLocator, filterSettings) {
      this.filterSettings = filterSettings;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    NumberFilterUI2.prototype.keyEventHandler = function(args) {
      if (args.keyCode === 13 || args.keyCode === 9) {
        var evt = document.createEvent("HTMLEvents");
        evt.initEvent("change", false, true);
        this.dispatchEvent(evt);
      }
    };
    NumberFilterUI2.prototype.create = function(args) {
      this.instance = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "numberui-" + args.column.uid
      });
      args.target.appendChild(this.instance);
      this.numericTxtObj = new NumericTextBox(extend({
        format: typeof args.column.format === "string" || isUndefined(args.column.format) ? args.column.format : args.column.format.format,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        placeholder: args.localizeText.getConstant("EnterValue"),
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.numericTxtObj.appendTo(this.instance);
    };
    NumberFilterUI2.prototype.write = function(args) {
      var numberuiObj = document.querySelector("#numberui-" + args.column.uid).ej2_instances[0];
      numberuiObj.element.addEventListener("keydown", this.keyEventHandler);
      numberuiObj.value = args.filteredValue;
    };
    NumberFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      var numberuiObj = document.querySelector("#numberui-" + column.uid).ej2_instances[0];
      var filterValue = numberuiObj.value;
      filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", true);
    };
    NumberFilterUI2.prototype.destroy = function() {
      if (!this.numericTxtObj || this.numericTxtObj.isDestroyed) {
        return;
      }
      this.numericTxtObj.destroy();
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
    };
    return NumberFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/boolean-filter-ui.js
var BooleanFilterUI = (
  /** @class */
  function() {
    function BooleanFilterUI2(parent, serviceLocator, filterSettings) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.filterSettings = filterSettings;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    BooleanFilterUI2.prototype.create = function(args) {
      var isForeignColumn = args.column.isForeignColumn();
      var dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
      var fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
      this.elem = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "bool-ui-" + args.column.uid
      });
      args.target.appendChild(this.elem);
      this.dialogObj = args.dialogObj;
      this.dropInstance = new DropDownList(extend({
        dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
        query: new Query().select(fields),
        fields: {
          text: fields,
          value: fields
        },
        placeholder: args.localizeText.getConstant("SelectValue"),
        cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl
      }, args.column.filter.params));
      this.ddOpen = this.openPopup.bind(this);
      this.ddComplete = this.actionComplete(fields);
      this.dropInstance.addEventListener(open, this.ddOpen);
      this.dropInstance.addEventListener(actionComplete, this.ddComplete);
      this.dropInstance.appendTo(this.elem);
    };
    BooleanFilterUI2.prototype.write = function(args) {
      var drpuiObj = document.querySelector("#bool-ui-" + args.column.uid).ej2_instances[0];
      if (!isNullOrUndefined(args.filteredValue)) {
        drpuiObj.value = args.filteredValue;
      }
    };
    BooleanFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      var drpuiObj = document.querySelector("#bool-ui-" + column.uid).ej2_instances[0];
      var filterValue = drpuiObj.value;
      filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", false);
    };
    BooleanFilterUI2.prototype.openPopup = function(args) {
      getZIndexCalcualtion(args, this.dialogObj);
    };
    BooleanFilterUI2.prototype.actionComplete = function(fields) {
      return function(e) {
        e.result = DataUtil.distinct(e.result, fields, true);
      };
    };
    BooleanFilterUI2.prototype.destroy = function() {
      if (!this.dropInstance || this.dropInstance.isDestroyed) {
        return;
      }
      this.dropInstance.removeEventListener(open, this.ddOpen);
      this.dropInstance.removeEventListener(actionComplete, this.ddComplete);
      this.dropInstance.destroy();
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
    };
    return BooleanFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/date-filter-ui.js
var DateFilterUI = (
  /** @class */
  function() {
    function DateFilterUI2(parent, serviceLocator, filterSettings) {
      this.dpOpen = this.openPopup.bind(this);
      this.parent = parent;
      this.locator = serviceLocator;
      this.fltrSettings = filterSettings;
      if (this.parent) {
        this.parent.on(filterMenuClose, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
      }
    }
    DateFilterUI2.prototype.create = function(args) {
      var format = getCustomDateFormat(args.column.format, args.column.type);
      this.dialogObj = args.dialogObj;
      this.inputElem = this.parent.createElement("input", {
        className: "e-flmenu-input",
        id: "dateui-" + args.column.uid
      });
      args.target.appendChild(this.inputElem);
      if (args.column.type === "date" || args.column.type === "dateonly") {
        this.datePickerObj = new DatePicker(extend({
          format,
          cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
          placeholder: args.localizeText.getConstant("ChooseDate"),
          width: "100%",
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl
        }, args.column.filter.params));
      } else if (args.column.type === "datetime") {
        this.datePickerObj = new DateTimePicker(extend({
          format,
          cssClass: this.parent.cssClass ? "e-popup-flmenu " + this.parent.cssClass : "e-popup-flmenu",
          placeholder: args.localizeText.getConstant("ChooseDate"),
          width: "100%",
          locale: this.parent.locale,
          enableRtl: this.parent.enableRtl
        }, args.column.filter.params));
      }
      this.datePickerObj.addEventListener(open, this.dpOpen);
      this.datePickerObj.appendTo(this.inputElem);
    };
    DateFilterUI2.prototype.write = function(args) {
      var dateuiObj = document.querySelector("#dateui-" + args.column.uid).ej2_instances[0];
      dateuiObj.value = !isNullOrUndefined(args.filteredValue) ? new Date(args.filteredValue) : null;
    };
    DateFilterUI2.prototype.read = function(element, column, filterOptr, filterObj) {
      var dateuiObj = document.querySelector("#dateui-" + column.uid).ej2_instances[0];
      var filterValue = dateuiObj.value;
      filterValue = isNullOrUndefined(filterValue) ? null : filterValue;
      filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", true);
    };
    DateFilterUI2.prototype.openPopup = function(args) {
      args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
    };
    DateFilterUI2.prototype.destroy = function() {
      this.parent.off(filterMenuClose, this.destroy);
      this.parent.off(destroy, this.destroy);
      if (isNullOrUndefined(this.datePickerObj) || this.datePickerObj.isDestroyed) {
        return;
      }
      this.datePickerObj.removeEventListener(open, this.dpOpen);
      this.datePickerObj.destroy();
    };
    return DateFilterUI2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/filter-menu-renderer.js
var FilterMenuRenderer = (
  /** @class */
  function() {
    function FilterMenuRenderer2(parent, filterSettings, serviceLocator, customFltrOperators, fltrObj) {
      this.isDialogOpen = false;
      this.maxHeight = "350px";
      this.isMenuCheck = false;
      this.colTypes = {
        "string": StringFilterUI,
        "number": NumberFilterUI,
        "date": DateFilterUI,
        "dateonly": DateFilterUI,
        "boolean": BooleanFilterUI,
        "datetime": DateFilterUI
      };
      this.parent = parent;
      this.filterSettings = filterSettings;
      this.serviceLocator = serviceLocator;
      this.customFilterOperators = customFltrOperators;
      this.filterObj = fltrObj;
      this.flMuiObj = new FlMenuOptrUI(this.parent, this.customFilterOperators, this.serviceLocator);
      this.l10n = this.serviceLocator.getService("localization");
      this.menuFilterBase = new CheckBoxFilterBase(parent);
    }
    FilterMenuRenderer2.prototype.clearCustomFilter = function(col) {
      this.clearBtnClick(col);
    };
    FilterMenuRenderer2.prototype.applyCustomFilter = function(args) {
      this.filterBtnClick(args.col);
    };
    FilterMenuRenderer2.prototype.openDialog = function(args) {
      this.options = args;
      this.col = this.parent.getColumnByField(args.field);
      if (isNullOrUndefined(this.col.filter) || isNullOrUndefined(this.col.filter.type) || this.col.filter.type === "Menu") {
        this.renderDlgContent(args.target, this.col);
      }
    };
    FilterMenuRenderer2.prototype.closeDialog = function(target) {
      if (!this.dlgObj) {
        return;
      }
      if (this.parent.isReact || this.parent.isVue) {
        clearReactVueTemplates(this.parent, ["filterTemplate"]);
      }
      var elem = document.getElementById(this.dlgObj.element.id);
      if (this.dlgObj && !this.dlgObj.isDestroyed && elem) {
        var argument = {
          cancel: false,
          column: this.col,
          target,
          element: elem
        };
        this.parent.notify(filterMenuClose, argument);
        if (argument.cancel) {
          return;
        }
        this.isDialogOpen = false;
        if (this.isMenuCheck) {
          this.menuFilterBase.unWireEvents();
          this.parent.off(cBoxFltrComplete, this.actionComplete);
          this.isMenuCheck = false;
        }
        this.dlgObj.destroy();
        remove(elem);
      }
      this.parent.notify(filterDialogClose, {});
    };
    FilterMenuRenderer2.prototype.renderDlgContent = function(target, column) {
      var args = {
        requestType: filterBeforeOpen,
        columnName: column.field,
        columnType: column.type
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.parent.trigger(actionBegin, args);
      var mainDiv = this.parent.createElement("div", {
        className: "e-flmenu-maindiv",
        id: column.uid + "-flmenu"
      });
      this.dlgDiv = this.parent.createElement("div", {
        className: "e-flmenu",
        id: column.uid + "-flmdlg"
      });
      this.dlgDiv.setAttribute("aria-label", this.l10n.getConstant("FilterMenuDialogARIA"));
      if (this.parent.enableAdaptiveUI) {
        var responsiveCnt = document.querySelector(".e-resfilter > .e-dlg-content > .e-mainfilterdiv");
        responsiveCnt.appendChild(this.dlgDiv);
      } else {
        this.parent.element.appendChild(this.dlgDiv);
      }
      this.dlgObj = new Dialog({
        showCloseIcon: false,
        closeOnEscape: false,
        locale: this.parent.locale,
        visible: false,
        enableRtl: this.parent.enableRtl,
        created: this.dialogCreated.bind(this, target, column),
        position: this.parent.element.classList.contains("e-device") ? {
          X: "center",
          Y: "center"
        } : {
          X: "",
          Y: ""
        },
        target: this.parent.element.classList.contains("e-device") ? document.body : this.parent.element,
        buttons: [{
          click: this.filterBtnClick.bind(this, column),
          buttonModel: {
            content: this.l10n.getConstant("FilterButton"),
            isPrimary: true,
            cssClass: this.parent.cssClass ? "e-flmenu-okbtn " + this.parent.cssClass : "e-flmenu-okbtn"
          }
        }, {
          click: this.clearBtnClick.bind(this, column),
          buttonModel: {
            content: this.l10n.getConstant("ClearButton"),
            cssClass: this.parent.cssClass ? "e-flmenu-cancelbtn " + this.parent.cssClass : "e-flmenu-cancelbtn"
          }
        }],
        content: mainDiv,
        width: !isNullOrUndefined(parentsUntil(target, "e-bigger")) || this.parent.element.classList.contains("e-device") ? 260 : 250,
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? "e-filter-popup " + this.parent.cssClass : "e-filter-popup"
      });
      var isStringTemplate = "isStringTemplate";
      this.dlgObj["" + isStringTemplate] = true;
      this.renderResponsiveDialog();
      this.dlgObj.appendTo(this.dlgDiv);
    };
    FilterMenuRenderer2.prototype.renderResponsiveDialog = function() {
      var gObj = this.parent;
      if (gObj.enableAdaptiveUI) {
        this.dlgObj.position = {
          X: "",
          Y: ""
        };
        this.dlgObj.target = document.querySelector(".e-resfilter > .e-dlg-content > .e-mainfilterdiv");
        this.dlgObj.width = "100%";
        this.dlgObj.isModal = false;
        this.dlgObj.buttons = [{}];
      }
    };
    FilterMenuRenderer2.prototype.dialogCreated = function(target, column) {
      if (!Browser.isDevice && target) {
        getFilterMenuPostion(target, this.dlgObj);
      }
      this.currentDialogCreatedColumn = column;
      this.renderFilterUI(target, column);
      if (!(column.isForeignColumn() && !(!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui) && !isNullOrUndefined(column.filter.ui.create)))) {
        this.afterRenderFilterUI();
      }
      if (!isNullOrUndefined(column.filterTemplate)) {
        this.dlgDiv.querySelector(".e-flmenu-valuediv").firstElementChild.focus();
        this.dlgDiv.querySelector(".e-flmenu-valuediv").firstElementChild.classList.add("e-input-focus");
      } else if (!isNullOrUndefined(this.dlgDiv.querySelector(".e-flmenu-input"))) {
        this.dlgDiv.querySelector(".e-flmenu-input").focus();
        this.dlgDiv.querySelector(".e-flmenu-input").parentElement.classList.add("e-input-focus");
      }
    };
    FilterMenuRenderer2.prototype.afterRenderFilterUI = function() {
      var column = this.currentDialogCreatedColumn;
      if (column.showColumnMenu) {
        this.parent.notify(filterDialogCreated, {});
      }
      if (this.parent.enableAdaptiveUI) {
        this.dlgObj.element.style.left = "0px";
        this.dlgObj.element.style.maxHeight = "none";
      } else {
        this.dlgObj.element.style.maxHeight = this.maxHeight;
      }
      this.dlgObj.show();
      var optrInput = this.dlgObj.element.querySelector(".e-flm_optrdiv").querySelector("input");
      var valInput = this.dlgObj.element.querySelector(".e-flmenu-valuediv").querySelector("input");
      if (optrInput.value === "Empty" || optrInput.value === "Not Empty" || optrInput.value === "Null" || optrInput.value === "Not Null") {
        valInput["ej2_instances"][0]["enabled"] = false;
      } else if (!isNullOrUndefined(valInput && valInput.getAttribute("disabled"))) {
        valInput["ej2_instances"][0]["enabled"] = true;
      }
      if (!column.filterTemplate) {
        this.writeMethod(column, this.dlgObj.element.querySelector("#" + column.uid + "-flmenu"));
      }
      var args = {
        requestType: filterAfterOpen,
        columnName: column.field,
        columnType: column.type
      };
      var filterModel = "filterModel";
      args["" + filterModel] = this;
      this.isDialogOpen = true;
      if (!this.isMenuCheck) {
        this.parent.trigger(actionComplete, args);
      }
    };
    FilterMenuRenderer2.prototype.renderFilterUI = function(target, col) {
      var dlgConetntEle = this.dlgObj.element.querySelector(".e-flmenu-maindiv");
      this.parent.log("column_type_missing", {
        column: col
      });
      this.renderOperatorUI(dlgConetntEle, target, col);
      this.renderFlValueUI(dlgConetntEle, target, col);
    };
    FilterMenuRenderer2.prototype.renderOperatorUI = function(dlgConetntEle, target, column) {
      this.flMuiObj.renderOperatorUI(dlgConetntEle, target, column, this.dlgObj, this.filterObj.menuOperator);
    };
    FilterMenuRenderer2.prototype.renderFlValueUI = function(dlgConetntEle, target, column) {
      var valueDiv = this.parent.createElement("div", {
        className: "e-flmenu-valuediv"
      });
      var fObj = this.filterObj;
      dlgConetntEle.appendChild(valueDiv);
      var instanceofFilterUI = new this.colTypes[column.type](this.parent, this.serviceLocator, this.parent.filterSettings);
      if (column.filterTemplate) {
        var fltrData = {};
        var valueInString = "value";
        fltrData[column.field] = fltrData["" + valueInString] = fObj.values[column.field];
        if (column.foreignKeyValue) {
          fltrData[column.foreignKeyValue] = fObj.values[column.field];
          fltrData[column.field] = void 0;
        }
        var col = "column";
        fltrData["" + col] = column;
        var isReactCompiler = this.parent.isReact && typeof column.filterTemplate !== "string";
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        var tempID = this.parent.element.id + column.uid + "filterTemplate";
        if (isReactCompiler || isReactChild) {
          column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID, null, null, valueDiv);
          this.parent.renderTemplates();
        } else {
          var compElement = column.getFilterTemplate()(fltrData, this.parent, "filterTemplate", tempID);
          appendChildren(valueDiv, compElement);
        }
        if (this.isMenuCheck) {
          this.menuFilterBase.cBox = this.dlgObj.element.querySelector(".e-checkboxlist.e-fields");
          this.menuFilterBase.wireEvents();
          this.parent.on(cBoxFltrComplete, this.actionComplete, this);
          this.menuFilterBase.getAllData();
        }
      } else {
        if (!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui) && !isNullOrUndefined(column.filter.ui.create)) {
          var temp = column.filter.ui.create;
          if (typeof temp === "string") {
            temp = getValue(temp, window);
          }
          temp({
            column,
            target: valueDiv,
            getOptrInstance: this.flMuiObj,
            dialogObj: this.dlgObj
          });
        } else {
          instanceofFilterUI.create({
            column,
            target: valueDiv,
            getOptrInstance: this.flMuiObj,
            localizeText: this.l10n,
            dialogObj: this.dlgObj
          });
        }
      }
    };
    FilterMenuRenderer2.prototype.writeMethod = function(col, dlgContentEle) {
      var flValue;
      var target = dlgContentEle.querySelector(".e-flmenu-valinput");
      var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
      var columns = this.filterSettings.columns;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (col.uid === column.uid) {
          flValue = column.value;
        }
      }
      if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.write)) {
        var temp = col.filter.ui.write;
        if (typeof temp === "string") {
          temp = getValue(temp, window);
        }
        temp({
          column: col,
          target,
          parent: this.parent,
          filteredValue: flValue
        });
      } else {
        instanceofFilterUI.write({
          column: col,
          target,
          parent: this.parent,
          filteredValue: flValue
        });
      }
    };
    FilterMenuRenderer2.prototype.filterBtnClick = function(col) {
      var flValue;
      var targ = this.dlgObj.element.querySelector(".e-flmenu-valuediv input");
      var flOptrValue = this.flMuiObj.getFlOperator();
      var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
      if (col.filterTemplate) {
        var element = this.dlgDiv.querySelector(".e-flmenu-valuediv");
        var fltrValue = void 0;
        if (element.children[0].value) {
          fltrValue = element.children[0].value;
        } else {
          if (!isNullOrUndefined(element.children[0].ej2_instances)) {
            fltrValue = (this.parent.isAngular ? element.children[0] : element.querySelector("input")).ej2_instances[0].value;
          } else {
            var eControl = element.querySelector(".e-control");
            if (!isNullOrUndefined(eControl)) {
              fltrValue = col.type === "boolean" ? eControl.checked : !isNullOrUndefined(eControl.ej2_instances) ? eControl.ej2_instances[0].value : eControl.value;
            }
          }
        }
        this.filterObj.filterByColumn(col.field, flOptrValue, fltrValue);
      } else {
        if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.read)) {
          var temp = col.filter.ui.read;
          if (typeof temp === "string") {
            temp = getValue(temp, window);
          }
          flValue = temp({
            element: targ,
            column: col,
            operator: flOptrValue,
            fltrObj: this.filterObj
          });
        } else {
          instanceofFilterUI.read(targ, col, flOptrValue, this.filterObj);
        }
      }
      this.closeDialog();
      if (this.parent.showColumnMenu) {
        this.parent.notify(afterFilterColumnMenuClose, {});
      }
    };
    FilterMenuRenderer2.prototype.closeResponsiveDialog = function() {
      this.closeDialog();
    };
    FilterMenuRenderer2.prototype.clearBtnClick = function(column) {
      this.filterObj.removeFilteredColsByField(column.field);
      this.closeDialog();
    };
    FilterMenuRenderer2.prototype.destroy = function() {
      this.closeDialog();
    };
    FilterMenuRenderer2.prototype.getFilterUIInfo = function() {
      return {
        field: this.col.field,
        operator: this.flMuiObj.getFlOperator()
      };
    };
    FilterMenuRenderer2.prototype.renderCheckBoxMenu = function() {
      this.isMenuCheck = true;
      this.menuFilterBase.updateModel(this.options);
      this.menuFilterBase.getAndSetChkElem(this.options);
      this.dlgObj.buttons = [{
        click: this.menuFilterBase.btnClick.bind(this.menuFilterBase),
        buttonModel: {
          content: this.menuFilterBase.getLocalizedLabel("FilterButton"),
          cssClass: "e-primary",
          isPrimary: true
        }
      }, {
        click: this.menuFilterBase.btnClick.bind(this.menuFilterBase),
        buttonModel: {
          cssClass: "e-flat",
          content: this.menuFilterBase.getLocalizedLabel("ClearButton")
        }
      }];
      this.menuFilterBase.dialogObj = this.dlgObj;
      this.menuFilterBase.dlg = this.dlgObj.element;
      this.menuFilterBase.dlg.classList.add("e-menucheckbox");
      this.menuFilterBase.dlg.classList.remove("e-checkboxfilter");
      this.maxHeight = "800px";
      return this.menuFilterBase.sBox.innerHTML;
    };
    FilterMenuRenderer2.prototype.actionComplete = function(args) {
      if (this.isMenuCheck) {
        this.parent.trigger(actionComplete, args);
      }
    };
    return FilterMenuRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/checkbox-filter.js
var CheckBoxFilter = (
  /** @class */
  function() {
    function CheckBoxFilter2(parent, filterSettings, serviceLocator) {
      this.parent = parent;
      this.isresetFocus = true;
      this.checkBoxBase = new CheckBoxFilterBase(parent);
      this.addEventListener();
    }
    CheckBoxFilter2.prototype.destroy = function() {
      this.removeEventListener();
      this.checkBoxBase.closeDialog();
    };
    CheckBoxFilter2.prototype.openDialog = function(options) {
      this.checkBoxBase.openDialog(options);
      this.parent.log("column_type_missing", {
        column: options.column
      });
    };
    CheckBoxFilter2.prototype.closeDialog = function() {
      this.destroy();
      if (this.isresetFocus) {
        this.parent.notify(restoreFocus, {});
      }
    };
    CheckBoxFilter2.prototype.closeResponsiveDialog = function() {
      this.checkBoxBase.closeDialog();
    };
    CheckBoxFilter2.prototype.getModuleName = function() {
      return "checkboxFilter";
    };
    CheckBoxFilter2.prototype.actionBegin = function(args) {
      this.parent.trigger(actionBegin, args);
    };
    CheckBoxFilter2.prototype.actionComplete = function(args) {
      this.parent.trigger(actionComplete, args);
    };
    CheckBoxFilter2.prototype.actionPrevent = function(args) {
      if (isActionPrevent(this.parent)) {
        this.parent.notify(preventBatch, args);
        args.cancel = true;
      }
    };
    CheckBoxFilter2.prototype.clearCustomFilter = function(col) {
      this.checkBoxBase.clearFilter(col);
    };
    CheckBoxFilter2.prototype.applyCustomFilter = function() {
      this.checkBoxBase.fltrBtnHandler();
      this.checkBoxBase.closeDialog();
    };
    CheckBoxFilter2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(cBoxFltrBegin, this.actionBegin, this);
      this.parent.on(cBoxFltrComplete, this.actionComplete, this);
      this.parent.on(fltrPrevent, this.actionPrevent, this);
    };
    CheckBoxFilter2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(cBoxFltrBegin, this.actionBegin);
      this.parent.off(cBoxFltrComplete, this.actionComplete);
      this.parent.off(fltrPrevent, this.actionPrevent);
    };
    return CheckBoxFilter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-filter.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ExcelFilter = (
  /** @class */
  function(_super) {
    __extends27(ExcelFilter2, _super);
    function ExcelFilter2(parent, filterSettings, serviceLocator, customFltrOperators) {
      var _this = _super.call(this, parent, filterSettings, serviceLocator) || this;
      _this.parent = parent;
      _this.isresetFocus = true;
      _this.excelFilterBase = new ExcelFilterBase(parent, customFltrOperators);
      return _this;
    }
    ExcelFilter2.prototype.destroy = function() {
      this.excelFilterBase.closeDialog();
    };
    ExcelFilter2.prototype.openDialog = function(options) {
      this.excelFilterBase.openDialog(options);
    };
    ExcelFilter2.prototype.closeDialog = function() {
      this.excelFilterBase.closeDialog();
      if (this.isresetFocus) {
        this.parent.notify(restoreFocus, {});
      }
    };
    ExcelFilter2.prototype.clearCustomFilter = function(col) {
      this.excelFilterBase.clearFilter(col);
    };
    ExcelFilter2.prototype.closeResponsiveDialog = function(isCustomFilter) {
      if (isCustomFilter) {
        this.excelFilterBase.removeDialog();
      } else {
        this.closeDialog();
      }
    };
    ExcelFilter2.prototype.applyCustomFilter = function(args) {
      if (!args.isCustomFilter) {
        this.excelFilterBase.fltrBtnHandler();
        this.excelFilterBase.closeDialog();
      } else {
        this.excelFilterBase.filterBtnClick(args.col.field);
      }
    };
    ExcelFilter2.prototype.filterByColumn = function(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
      this.excelFilterBase.filterByColumn(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue);
    };
    ExcelFilter2.prototype.getFilterUIInfo = function() {
      return this.excelFilterBase.getFilterUIInfo();
    };
    ExcelFilter2.prototype.getModuleName = function() {
      return "excelFilter";
    };
    return ExcelFilter2;
  }(CheckBoxFilter)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/filter.js
var Filter = (
  /** @class */
  function() {
    function Filter2(parent, filterSettings, serviceLocator) {
      this.predicate = "and";
      this.contentRefresh = true;
      this.filterByMethod = true;
      this.refresh = true;
      this.values = {};
      this.operators = {};
      this.cellText = {};
      this.nextFlMenuOpen = "";
      this.type = {
        "Menu": FilterMenuRenderer,
        "CheckBox": CheckBoxFilter,
        "Excel": ExcelFilter
      };
      this.filterOperators = {
        contains: "contains",
        endsWith: "endswith",
        equal: "equal",
        greaterThan: "greaterthan",
        greaterThanOrEqual: "greaterthanorequal",
        lessThan: "lessthan",
        lessThanOrEqual: "lessthanorequal",
        notEqual: "notequal",
        startsWith: "startswith",
        wildCard: "wildcard",
        isNull: "isnull",
        notNull: "notnull",
        like: "like"
      };
      this.fltrDlgDetails = {
        field: "",
        isOpen: false
      };
      this.skipNumberInput = ["=", " ", "!"];
      this.skipStringInput = [">", "<", "="];
      this.actualPredicate = {};
      this.parent = parent;
      this.filterSettings = filterSettings;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
      this.setFullScreenDialog();
    }
    Filter2.prototype.render = function(e) {
      if (DataUtil.getObject("args.isFrozen", e)) {
        return;
      }
      var gObj = this.parent;
      this.l10n = this.serviceLocator.getService("localization");
      this.getLocalizedCustomOperators();
      if (this.parent.filterSettings.type === "FilterBar") {
        if (gObj.columns.length) {
          var fltrElem = this.parent.element.querySelector(".e-filterbar");
          if (fltrElem) {
            remove(fltrElem);
          }
          var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Filter, gObj);
          var cellrender = this.serviceLocator.getService("cellRendererFactory");
          cellrender.addCellRenderer(CellType.Filter, new FilterCellRenderer(this.parent, this.serviceLocator));
          this.valueFormatter = this.serviceLocator.getService("valueFormatter");
          rowRenderer.element = this.parent.createElement("tr", {
            className: "e-filterbar",
            attrs: {
              role: "row"
            }
          });
          var row2 = this.generateRow();
          row2.data = this.values;
          this.parent.getHeaderContent().querySelector("thead:not(.e-masked-thead)").appendChild(rowRenderer.element);
          var rowdrag = this.parent.element.querySelector(".e-rowdragheader");
          this.element = rowRenderer.render(row2, gObj.getColumns(), null, null, rowRenderer.element);
          if (this.element.querySelectorAll(".e-leftfreeze").length && (this.element.querySelectorAll(".e-indentcell").length || this.element.querySelectorAll(".e-grouptopleftcell").length)) {
            var td = this.element.querySelectorAll(".e-indentcell, .e-grouptopleftcell");
            for (var i = 0; i < td.length; i++) {
              td[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
              applyStickyLeftRightPosition(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, "Left");
            }
          }
          addFixedColumnBorder(this.element);
          var detail = this.element.querySelector(".e-detailheadercell");
          if (detail) {
            detail.className = "e-filterbarcell e-mastercell";
          }
          if (rowdrag) {
            if (rowdrag.classList.contains("e-leftfreeze")) {
              rowdrag.className = "e-dragheadercell e-mastercell e-leftfreeze";
            } else {
              rowdrag.className = "e-filterbarcell e-mastercell";
            }
          }
          var gCells = [].slice.call(this.element.getElementsByClassName("e-grouptopleftcell"));
          if (gCells.length) {
            gCells[gCells.length - 1].classList.add("e-lastgrouptopleftcell");
          }
          this.wireEvents();
          this.parent.notify(freezeRender, {
            case: "filter"
          });
        }
      }
    };
    Filter2.prototype.showCustomFilter = function(enable) {
      this.responsiveDialogRenderer.isCustomDialog = enable;
      this.responsiveDialogRenderer.showResponsiveDialog(this.column);
    };
    Filter2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    Filter2.prototype.setFilterModel = function(col) {
      var type = col.filter.type || this.parent.filterSettings.type;
      this.filterModule = new this.type["" + type](this.parent, this.parent.filterSettings, this.serviceLocator, this.customOperators, this);
    };
    Filter2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.filterModule) {
        this.filterModule.destroy();
      }
      if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowFiltering)) {
        this.filterSettings.columns = [];
      }
      this.updateFilterMsg();
      this.removeEventListener();
      this.unWireEvents();
      if (this.filterSettings.type === "FilterBar" && !this.parent.isDestroyed) {
        if (this.filterSettings.showFilterBarOperator) {
          var dropdownlist = [].slice.call(this.element.getElementsByClassName("e-filterbaroperator"));
          for (var i = 0; i < dropdownlist.length; i++) {
            if (dropdownlist[parseInt(i.toString(), 10)].ej2_instances[0]) {
              dropdownlist[parseInt(i.toString(), 10)].ej2_instances[0].destroy();
            }
          }
        }
        this.parent.getColumns().map(function(column) {
          if (column.filterBarTemplate && !isNullOrUndefined(column.filterBarTemplate.destroy)) {
            var destroyFn = column.filterBarTemplate.destroy;
            if (typeof destroyFn === "string") {
              destroyFn = getValue(destroyFn, window);
            }
            destroyFn();
          }
        });
      }
      if (this.element) {
        if (this.element.parentElement) {
          remove(this.element);
        }
        var filterBarElement = this.parent.getHeaderContent().querySelector(".e-filterbar");
        if (filterBarElement) {
          remove(filterBarElement);
        }
      }
    };
    Filter2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isFilter);
      }
    };
    Filter2.prototype.generateRow = function() {
      var options = {};
      var row2 = new Row(options);
      row2.cells = this.generateCells();
      return row2;
    };
    Filter2.prototype.generateCells = function() {
      var cells = [];
      if (this.parent.allowGrouping) {
        for (var c = 0, len = this.parent.groupSettings.columns.length; c < len; c++) {
          cells.push(this.generateCell({}, CellType.HeaderIndent));
        }
      }
      if (this.parent.detailTemplate || this.parent.childGrid) {
        cells.push(this.generateCell({}, CellType.DetailHeader));
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== "Right") {
        cells.push(this.generateCell({}, CellType.RowDragHIcon));
      }
      for (var _i = 0, _a = this.parent.getColumns(); _i < _a.length; _i++) {
        var dummy = _a[_i];
        cells.push(this.generateCell(dummy));
      }
      if (this.parent.isRowDragable() && this.parent.getFrozenMode() === "Right") {
        cells.push(this.generateCell({}, CellType.RowDragHIcon));
      }
      return cells;
    };
    Filter2.prototype.generateCell = function(column, cellType) {
      var opt = {
        "visible": column.visible,
        "isDataCell": false,
        "rowId": "",
        "column": column,
        "cellType": cellType ? cellType : CellType.Filter,
        "attributes": {
          title: this.l10n.getConstant("FilterbarTitle")
        }
      };
      return new Cell(opt);
    };
    Filter2.prototype.updateModel = function() {
      var col = this.column.isForeignColumn() ? this.parent.getColumnByUid(this.column.uid) : this.parent.getColumnByField(this.fieldName);
      this.filterObjIndex = this.getFilteredColsIndexByField(col);
      this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];
      var arrayVal = Array.isArray(this.value) ? this.value : [this.value];
      var moduleName = this.parent.dataSource.adaptor && this.parent.dataSource.adaptor.getModuleName ? this.parent.dataSource.adaptor.getModuleName() : void 0;
      for (var i = 0, len = arrayVal.length; i < len; i++) {
        var field = col.isForeignColumn() ? col.foreignKeyValue : this.fieldName;
        var isMenuNotEqual = this.operator === "notequal";
        this.currentFilterObject = {
          field,
          uid: col.uid,
          isForeignKey: col.isForeignColumn(),
          operator: this.operator,
          value: arrayVal[parseInt(i.toString(), 10)],
          predicate: this.predicate,
          matchCase: this.matchCase,
          ignoreAccent: this.ignoreAccent,
          actualFilterValue: {},
          actualOperator: {}
        };
        var index = this.getFilteredColsIndexByField(col);
        if (index > -1 && !Array.isArray(this.value)) {
          this.filterSettings.columns[parseInt(index.toString(), 10)] = this.currentFilterObject;
        } else {
          this.filterSettings.columns.push(this.currentFilterObject);
        }
        if (!this.column.isForeignColumn() && isNullOrUndefined(this.value) && (this.operator === "equal" || this.operator === "notequal") && moduleName !== "ODataAdaptor" && moduleName !== "ODataV4Adaptor") {
          for (var i_1 = 0; i_1 < this.filterSettings.columns.length; i_1++) {
            if (this.filterSettings.columns["" + i_1].field === field && (this.filterSettings.columns["" + i_1].operator === "equal" || this.filterSettings.columns["" + i_1].operator === "notequal") && isNullOrUndefined(this.filterSettings.columns["" + i_1].value)) {
              this.filterSettings.columns.splice(i_1, 1);
              i_1 = i_1 - 1;
            }
          }
          if (col.type === "string") {
            this.filterSettings.columns.push({
              field,
              ignoreAccent: this.ignoreAccent,
              matchCase: this.matchCase,
              operator: this.operator,
              predicate: isMenuNotEqual ? "and" : "or",
              value: ""
            });
          }
          this.filterSettings.columns.push({
            field,
            ignoreAccent: this.ignoreAccent,
            matchCase: this.matchCase,
            operator: this.operator,
            predicate: isMenuNotEqual ? "and" : "or",
            value: void 0
          });
          this.filterSettings.columns.push({
            field,
            ignoreAccent: this.ignoreAccent,
            matchCase: this.matchCase,
            operator: this.operator,
            predicate: isMenuNotEqual ? "and" : "or",
            value: null
          });
        }
      }
      this.filterSettings.columns = this.filterSettings.columns;
      this.parent.dataBind();
    };
    Filter2.prototype.getFilteredColsIndexByField = function(col) {
      var cols = this.filterSettings.columns;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (cols[parseInt(i.toString(), 10)].uid === col.uid || col.isForeignColumn() && this.parent.getColumnByUid(col.uid).field === col.foreignKeyValue) {
          return i;
        }
      }
      return -1;
    };
    Filter2.prototype.onActionComplete = function(e) {
      var args = !this.isRemove ? {
        currentFilterObject: this.currentFilterObject,
        /* tslint:disable:no-string-literal */
        currentFilteringColumn: !isNullOrUndefined(this.column) ? this.column.field : void 0,
        /* tslint:enable:no-string-literal */
        columns: this.filterSettings.columns,
        requestType: "filtering",
        type: actionComplete
      } : {
        requestType: "filtering",
        type: actionComplete
      };
      this.parent.trigger(actionComplete, extend(e, args));
      this.isRemove = false;
    };
    Filter2.prototype.wireEvents = function() {
      EventHandler.add(this.parent.getHeaderContent(), "keyup", this.keyUpHandlerImmediate, this);
    };
    Filter2.prototype.unWireEvents = function() {
      EventHandler.remove(this.parent.getHeaderContent(), "keyup", this.keyUpHandlerImmediate);
    };
    Filter2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.parent.getHeaderTable().classList.add("e-sortfilter");
        this.render();
      }
    };
    Filter2.prototype.refreshFilterValue = function() {
      if (!isNullOrUndefined(this.parent.modelObserver.boundedEvents)) {
        this.parent.removeEventListener(beforeDataBound, this.refreshFilterValueFn);
      }
      if (this.filterSettings.type === "FilterBar" && this.filterSettings.columns.length && !this.parent.getCurrentViewRecords().length) {
        this.initialEnd();
      }
    };
    Filter2.prototype.initialEnd = function() {
      this.parent.off(contentReady, this.initialEnd);
      if (this.parent.getColumns().length && this.filterSettings.columns.length) {
        var gObj = this.parent;
        this.contentRefresh = false;
        this.initialLoad = true;
        for (var _i = 0, _a = gObj.filterSettings.columns; _i < _a.length; _i++) {
          var col = _a[_i];
          this.filterByColumn(col.field, col.operator, col.value, col.predicate, col.matchCase, col.ignoreAccent, col.actualFilterValue, col.actualOperator, col.isForeignKey);
        }
        this.initialLoad = false;
        this.updateFilterMsg();
        this.contentRefresh = true;
      }
    };
    Filter2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(filterComplete, this.onActionComplete, this);
      this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
      this.parent.on(keyPressed, this.keyUpHandler, this);
      this.parent.on(columnPositionChanged, this.columnPositionChanged, this);
      this.parent.on(headerRefreshed, this.render, this);
      this.parent.on(contentReady, this.initialEnd, this);
      this.parent.on(filterMenuClose, this.filterMenuClose, this);
      this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      this.docClickHandler = this.clickHandler.bind(this);
      EventHandler.add(document, "click", this.docClickHandler, this);
      EventHandler.add(this.parent.element, "mousedown", this.refreshClearIcon, this);
      this.parent.on(filterOpen, this.columnMenuFilter, this);
      this.parent.on(click, this.filterIconClickHandler, this);
      this.parent.on("persist-data-changed", this.initialEnd, this);
      this.parent.on(closeFilterDialog, this.clickHandler, this);
      this.parent.on(destroy, this.destroy, this);
      this.refreshFilterValueFn = this.refreshFilterValue.bind(this);
      this.parent.addEventListener(beforeDataBound, this.refreshFilterValueFn);
    };
    Filter2.prototype.removeEventListener = function() {
      EventHandler.remove(document, "click", this.docClickHandler);
      EventHandler.remove(this.parent.element, "mousedown", this.refreshClearIcon);
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(filterComplete, this.onActionComplete);
      this.parent.off(inBoundModelChanged, this.onPropertyChanged);
      this.parent.off(keyPressed, this.keyUpHandler);
      this.parent.off(columnPositionChanged, this.columnPositionChanged);
      this.parent.off(headerRefreshed, this.render);
      this.parent.off(filterOpen, this.columnMenuFilter);
      this.parent.off(filterMenuClose, this.filterMenuClose);
      this.parent.off(renderResponsiveChangeAction, this.renderResponsiveChangeAction);
      this.parent.off(click, this.filterIconClickHandler);
      this.parent.off(closeFilterDialog, this.clickHandler);
      this.parent.off(destroy, this.destroy);
    };
    Filter2.prototype.refreshClearIcon = function(e) {
      if (this.parent.allowFiltering && this.parent.filterSettings.type === "FilterBar" && e.target.closest("th") && e.target.closest("th").classList.contains("e-filterbarcell") && e.target.classList.contains("e-clear-icon")) {
        var targetText = e.target.previousElementSibling;
        Input.setValue(null, targetText, "Never", true);
        if (this.filterSettings.mode === "Immediate") {
          this.removeFilteredColsByField(targetText.id.slice(0, -14));
        }
      }
    };
    Filter2.prototype.filterMenuClose = function() {
      this.fltrDlgDetails.isOpen = false;
    };
    Filter2.prototype.filterByColumn = function(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator, isForeignColumn) {
      var _this = this;
      var gObj = this.parent;
      var filterCell;
      this.column = gObj.grabColumnByFieldFromAllCols(fieldName, isForeignColumn);
      if (this.filterSettings.type === "FilterBar" && this.filterSettings.showFilterBarOperator && isNullOrUndefined(this.column.filterBarTemplate) && isNullOrUndefined(this.column.filterTemplate)) {
        filterOperator = this.getOperatorName(fieldName);
      }
      if (filterOperator === "like" && filterValue && filterValue.indexOf("%") === -1) {
        filterValue = "%" + filterValue + "%";
      }
      if (!this.column) {
        return;
      }
      if (this.filterSettings.type === "FilterBar") {
        filterCell = gObj.getHeaderContent().querySelector("[id='" + this.column.field + "_filterBarcell']");
      }
      if (!isNullOrUndefined(this.column.allowFiltering) && !this.column.allowFiltering) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          columnName: this.column.headerText
        });
        return;
      }
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.filterByColumn,
          arg1: fieldName,
          arg2: filterOperator,
          arg3: filterValue,
          arg4: predicate,
          arg5: matchCase,
          arg6: ignoreAccent,
          arg7: actualFilterValue,
          arg8: actualOperator
        });
        return;
      }
      this.predicate = predicate ? predicate : Array.isArray(filterValue) ? "or" : "and";
      this.value = filterValue;
      this.matchCase = matchCase || false;
      this.ignoreAccent = this.ignoreAccent = !isNullOrUndefined(ignoreAccent) ? ignoreAccent : this.parent.filterSettings.ignoreAccent;
      this.fieldName = fieldName;
      this.operator = filterOperator;
      filterValue = !isNullOrUndefined(filterValue) ? filterValue.toString() : filterValue;
      if (filterValue === "") {
        filterValue = null;
      }
      if (this.column.type === "number" || this.column.type === "date") {
        this.matchCase = true;
      }
      if (filterCell && this.filterSettings.type === "FilterBar") {
        if (filterValue && filterValue.length < 1 || !this.filterByMethod && this.checkForSkipInput(this.column, filterValue)) {
          this.filterStatusMsg = filterValue && filterValue.length < 1 ? "" : this.l10n.getConstant("InvalidFilterMessage");
          this.updateFilterMsg();
          return;
        }
        if (filterCell.value !== filterValue) {
          filterCell.value = filterValue;
        }
      }
      if (!isNullOrUndefined(this.column.format)) {
        this.applyColumnFormat(filterValue);
        if (this.initialLoad && this.filterSettings.type === "FilterBar") {
          filterCell.value = this.values[this.column.field];
        }
      } else {
        this.values[this.column.field] = filterValue;
      }
      var predObj = {
        field: this.fieldName,
        predicate,
        matchCase,
        ignoreAccent,
        operator: this.operator,
        value: this.value,
        type: this.column.type
      };
      var filterColumn = this.parent.filterSettings.columns.filter(function(fColumn) {
        return fColumn.field === _this.fieldName;
      });
      if (filterColumn.length > 1 && !isNullOrUndefined(this.actualPredicate[this.fieldName])) {
        this.actualPredicate[this.fieldName].push(predObj);
      } else {
        this.actualPredicate[this.fieldName] = [predObj];
      }
      if (this.checkAlreadyColFiltered(this.column.field)) {
        return;
      }
      this.updateModel();
    };
    Filter2.prototype.applyColumnFormat = function(filterValue) {
      var _this = this;
      var getFlvalue = this.column.type === "date" || this.column.type === "datetime" || this.column.type === "dateonly" ? new Date(filterValue) : parseFloat(filterValue);
      if ((this.column.type === "date" || this.column.type === "datetime" || this.column.type === "dateonly") && filterValue && Array.isArray(this.value) && filterValue.split(",").length > 1) {
        this.values[this.column.field] = filterValue.split(",").map(function(val) {
          if (val === "") {
            val = null;
          }
          return _this.setFormatForFlColumn(new Date(val), _this.column);
        });
      } else {
        this.values[this.column.field] = this.setFormatForFlColumn(getFlvalue, this.column);
      }
    };
    Filter2.prototype.skipUid = function(col) {
      var flag = true;
      var colLen = Object.keys(col);
      for (var i = 0; i < colLen.length; i++) {
        var key = Object.keys(col[colLen[parseInt(i.toString(), 10)]]);
        if (key.length === 1 && key[0] === "uid") {
          flag = false;
        }
      }
      return flag;
    };
    Filter2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "columns":
            var col = "columns";
            var args = {
              currentFilterObject: this.currentFilterObject,
              currentFilteringColumn: this.column ? this.column.field : void 0,
              action: "filter",
              columns: this.filterSettings.columns,
              requestType: "filtering",
              type: actionBegin,
              cancel: false
            };
            if (this.contentRefresh && this.skipUid(e.properties["" + col])) {
              this.parent.notify(modelChanged, args);
              if (args.cancel) {
                if (this.filterSettings.type === "CheckBox" || this.filterSettings.type === "Excel") {
                  this.filterSettings.columns = this.actualData.length <= 1 ? this.checkboxPrevFilterObject : this.checkboxFilterObject;
                  this.actualPredicate[this.column.field] = this.filterSettings.columns;
                  var col_1 = this.parent.getColumnByField(this.column.field);
                  var iconClass = this.parent.showColumnMenu && col_1.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
                  var filterIconElement = this.parent.getColumnHeaderByField(this.column.field).querySelector(iconClass);
                  if (this.checkboxPrevFilterObject.length === 0) {
                    filterIconElement.classList.remove("e-filtered");
                  } else {
                    filterIconElement.classList.add("e-filtered");
                  }
                } else {
                  if (isNullOrUndefined(this.prevFilterObject)) {
                    this.filterSettings.columns.splice(this.filterSettings.columns.length - 1, 1);
                  } else {
                    this.filterSettings.columns[this.filterObjIndex] = this.prevFilterObject;
                  }
                }
                return;
              }
              this.updateFilterIcon();
              this.refreshFilterSettings();
              this.updateFilterMsg();
              this.updateFilter();
            }
            break;
          case "showFilterBarStatus":
            if (e.properties["" + prop]) {
              this.updateFilterMsg();
            } else if (this.parent.allowPaging) {
              this.parent.updateExternalMessage("");
            }
            break;
          case "showFilterBarOperator":
          case "type":
            this.parent.refreshHeader();
            this.refreshFilterSettings();
            if (this.parent.height === "100%") {
              this.parent.scrollModule.refresh();
            }
            break;
        }
      }
    };
    Filter2.prototype.refreshFilterSettings = function() {
      if (this.filterSettings.type === "FilterBar") {
        for (var i = 0; i < this.filterSettings.columns.length; i++) {
          this.column = this.parent.grabColumnByUidFromAllCols(this.filterSettings.columns[parseInt(i.toString(), 10)].uid);
          var filterValue = this.filterSettings.columns[parseInt(i.toString(), 10)].value;
          filterValue = !isNullOrUndefined(filterValue) && filterValue.toString();
          if (!isNullOrUndefined(this.column.format)) {
            this.applyColumnFormat(filterValue);
          } else {
            var key = this.filterSettings.columns[parseInt(i.toString(), 10)].field;
            this.values["" + key] = this.filterSettings.columns[parseInt(i.toString(), 10)].value;
          }
          var filterElement = this.getFilterBarElement(this.column.field);
          if (filterElement) {
            if (this.cellText[this.filterSettings.columns[parseInt(i.toString(), 10)].field] !== "" && !isNullOrUndefined(this.cellText[this.filterSettings.columns[parseInt(i.toString(), 10)].field])) {
              filterElement.value = this.cellText[this.column.field];
            } else {
              filterElement.value = this.filterSettings.columns[parseInt(i.toString(), 10)].value;
            }
          }
        }
        if (this.filterSettings.columns.length === 0) {
          var col = this.parent.getColumns();
          for (var i = 0; i < col.length; i++) {
            var filterElement = this.getFilterBarElement(col[parseInt(i.toString(), 10)].field);
            if (filterElement && filterElement.value !== "") {
              filterElement.value = "";
              delete this.values[col[parseInt(i.toString(), 10)].field];
            }
          }
        }
      }
    };
    Filter2.prototype.updateFilterIcon = function() {
      if (this.filterSettings.columns.length === 0 && this.parent.element.querySelector(".e-filtered")) {
        var fltrIconElement = [].slice.call(this.parent.element.getElementsByClassName("e-filtered"));
        for (var i = 0, len = fltrIconElement.length; i < len; i++) {
          fltrIconElement[parseInt(i.toString(), 10)].classList.remove("e-filtered");
        }
      }
    };
    Filter2.prototype.getFilterBarElement = function(col) {
      var selector = "[id='" + col + "_filterBarcell']";
      var filterElement;
      if (selector && !isNullOrUndefined(this.element)) {
        filterElement = this.element.querySelector(selector);
      }
      return filterElement;
    };
    Filter2.prototype.refreshFilter = function() {
      this.refreshFilterSettings();
      this.updateFilterMsg();
    };
    Filter2.prototype.clearFiltering = function(fields) {
      var _this = this;
      var cols = getActualPropFromColl(this.filterSettings.columns);
      if (!isNullOrUndefined(fields)) {
        this.refresh = false;
        fields.forEach(function(field) {
          _this.removeFilteredColsByField(field, false);
        });
        this.parent.setProperties({
          filterSettings: {
            columns: this.filterSettings.columns
          }
        }, true);
        this.parent.renderModule.refresh();
        this.refresh = true;
        return;
      }
      if (isActionPrevent(this.parent)) {
        this.parent.notify(preventBatch, {
          instance: this,
          handler: this.clearFiltering
        });
        return;
      }
      for (var i = 0; i < cols.length; i++) {
        cols[parseInt(i.toString(), 10)].uid = cols[parseInt(i.toString(), 10)].uid || this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field).uid;
      }
      var colUid = cols.map(function(f) {
        return f.uid;
      });
      var filteredcols = colUid.filter(function(item, pos) {
        return colUid.indexOf(item) === pos;
      });
      this.refresh = false;
      for (var i = 0, len = filteredcols.length; i < len; i++) {
        this.removeFilteredColsByField(this.parent.getColumnByUid(filteredcols[parseInt(i.toString(), 10)]).field, false);
      }
      this.refresh = true;
      if (filteredcols.length) {
        this.parent.renderModule.refresh();
      }
      if (this.parent.filterSettings.columns.length === 0 && this.parent.element.querySelector(".e-filtered")) {
        var fltrElement = [].slice.call(this.parent.element.getElementsByClassName("e-filtered"));
        for (var i = 0, len = fltrElement.length; i < len; i++) {
          fltrElement[0].classList.remove("e-filtered");
        }
      }
      this.isRemove = true;
      this.filterStatusMsg = "";
      this.updateFilterMsg();
    };
    Filter2.prototype.checkAlreadyColFiltered = function(field) {
      var columns = this.filterSettings.columns;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        if (col.field === field && col.value === this.value && col.operator === this.operator && col.predicate === this.predicate) {
          return true;
        }
      }
      return false;
    };
    Filter2.prototype.columnMenuFilter = function(args) {
      this.column = args.col;
      var ele = closest(args.target, "#" + args.id);
      if (args.isClose && !ele) {
        this.filterModule.closeDialog();
      } else if (ele) {
        this.filterDialogOpen(this.column, args.target);
      }
    };
    Filter2.prototype.filterDialogOpen = function(col, target, left, top) {
      if (this.filterModule) {
        this.filterModule.isresetFocus = false;
        this.filterModule.closeDialog();
      }
      this.setFilterModel(col);
      this.filterModule.openDialog(this.createOptions(col, target, left, top));
    };
    Filter2.prototype.createOptions = function(col, target, left, top) {
      var gObj = this.parent;
      var dataSource = col.filter.dataSource || gObj.dataSource && "result" in gObj.dataSource ? gObj.dataSource : gObj.getDataModule().dataManager;
      var type = col.filter.type || this.parent.filterSettings.type;
      var options = {
        type: col.type,
        field: col.field,
        displayName: col.headerText,
        dataSource,
        format: col.format,
        height: 800,
        columns: gObj.getColumns(),
        filteredColumns: gObj.filterSettings.columns,
        target,
        dataManager: gObj.getDataModule().dataManager,
        formatFn: col.getFormatter(),
        ignoreAccent: gObj.filterSettings.ignoreAccent,
        parserFn: col.getParser(),
        query: gObj.query,
        template: col.getFilterItemTemplate(),
        hideSearchbox: isNullOrUndefined(col.filter.hideSearchbox) ? false : col.filter.hideSearchbox,
        handler: this.filterHandler.bind(this),
        localizedStrings: gObj.getLocaleConstants(),
        position: {
          X: left,
          Y: top
        },
        column: col,
        foreignKeyValue: col.foreignKeyValue,
        actualPredicate: this.actualPredicate,
        localeObj: gObj.localeObj,
        isRemote: gObj.getDataModule().isRemote(),
        allowCaseSensitive: this.filterSettings.enableCaseSensitivity,
        isResponsiveFilter: this.parent.enableAdaptiveUI,
        operator: this.actualPredicate[col.field] && type === "Menu" ? this.actualPredicate[col.field][0].operator : "equal",
        parentTotalDataCount: gObj.getDataModule().isRemote() && gObj.allowPaging ? gObj.pagerModule.pagerObj.totalRecordsCount : gObj.getDataModule().isRemote() ? gObj.totalDataRecordsCount : gObj.getFilteredRecords().length,
        parentCurrentViewDataCount: gObj.currentViewData.length,
        parentFilteredLocalRecords: !gObj.getDataModule().isRemote() ? gObj.getFilteredRecords() : []
      };
      return options;
    };
    Filter2.prototype.removeFilteredColsByField = function(field, isClearFilterBar) {
      var fCell;
      var cols = this.filterSettings.columns;
      if (isActionPrevent(this.parent)) {
        var args = {
          instance: this,
          handler: this.removeFilteredColsByField,
          arg1: field,
          arg2: isClearFilterBar
        };
        this.parent.notify(preventBatch, args);
        return;
      }
      var colUid = cols.map(function(f) {
        return f.uid;
      });
      var filteredColsUid = colUid.filter(function(item, pos) {
        return colUid.indexOf(item) === pos;
      });
      if (!isNullOrUndefined(this.column)) {
        var col = this.column.isForeignColumn() ? this.parent.getColumnByUid(this.column.uid) : this.parent.getColumnByField(field);
        this.filterObjIndex = this.getFilteredColsIndexByField(col);
        this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];
      }
      var _loop_1 = function(i2, len2) {
        cols[parseInt(i2.toString(), 10)].uid = cols[parseInt(i2.toString(), 10)].uid || this_1.parent.getColumnByField(cols[parseInt(i2.toString(), 10)].field).uid;
        var len_1 = cols.length;
        var column = this_1.parent.grabColumnByUidFromAllCols(filteredColsUid[parseInt(i2.toString(), 10)]);
        if (column.field === field || column.field === column.foreignKeyValue && column.isForeignColumn()) {
          var currentPred = this_1.filterSettings.columns.filter(function(e) {
            return e.uid === column.uid;
          })[0];
          if (this_1.filterSettings.type === "FilterBar" && !isClearFilterBar) {
            var selector = "[id='" + column.field + "_filterBarcell']";
            fCell = this_1.parent.getHeaderContent().querySelector(selector);
            if (fCell) {
              fCell.value = "";
              delete this_1.values["" + field];
            }
          }
          while (len_1--) {
            if (cols[parseInt(len_1.toString(), 10)].uid === column.uid) {
              cols.splice(len_1, 1);
            }
          }
          var fltrElement = this_1.parent.getColumnHeaderByField(column.field);
          if (this_1.filterSettings.type !== "FilterBar" || this_1.parent.showColumnMenu) {
            var iconClass = this_1.parent.showColumnMenu && column.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
            fltrElement.querySelector(iconClass).classList.remove("e-filtered");
          }
          this_1.isRemove = true;
          if (this_1.actualPredicate["" + field]) {
            delete this_1.actualPredicate["" + field];
          }
          if (this_1.values["" + field]) {
            delete this_1.values["" + field];
          }
          if (this_1.refresh) {
            this_1.parent.notify(modelChanged, {
              requestType: "filtering",
              type: actionBegin,
              currentFilterObject: currentPred,
              currentFilterColumn: column,
              action: "clearFilter"
            });
          }
          return "break";
        }
      };
      var this_1 = this;
      for (var i = 0, len = filteredColsUid.length; i < len; i++) {
        var state_1 = _loop_1(i, len);
        if (state_1 === "break") break;
      }
      this.updateFilterMsg();
    };
    Filter2.prototype.getModuleName = function() {
      return "filter";
    };
    Filter2.prototype.keyUpHandlerImmediate = function(e) {
      if (e.keyCode !== 13) {
        this.keyUpHandler(e);
      }
    };
    Filter2.prototype.keyUpHandler = function(e) {
      var gObj = this.parent;
      var target = e.target;
      if (target && matches(target, ".e-filterbar input")) {
        var closeHeaderEle = closest(target, "th.e-filterbarcell");
        this.column = gObj.getColumnByUid(closeHeaderEle.getAttribute("e-mappinguid"));
        if (!this.column) {
          return;
        }
        if (e.action === "altDownArrow" && this.parent.filterSettings.showFilterBarOperator) {
          var dropDownListInput = closest(target, "span").querySelector(".e-filterbaroperator");
          dropDownListInput.ej2_instances[0].showPopup();
          dropDownListInput.focus();
        }
        if ((this.filterSettings.mode === "Immediate" || e.keyCode === 13 && !e.target.classList.contains("e-filterbaroperator")) && e.keyCode !== 9 && !this.column.filterTemplate) {
          this.value = target.value.trim();
          this.processFilter(e);
        }
      }
      if (e.action === "altDownArrow" && this.filterSettings.type !== "FilterBar" && !parentsUntil(e.target, "e-toolbar") && isNullOrUndefined(this.parent.element.querySelector(".e-filter-popup"))) {
        var element = gObj.focusModule.currentInfo.element;
        if (element && element.classList.contains("e-headercell")) {
          var column = gObj.getColumnByUid(element.firstElementChild.getAttribute("e-mappinguid"));
          this.openMenuByField(column.field);
          this.parent.focusModule.clearIndicator();
        }
      }
      if (e.action === "escape" && this.filterSettings.type === "Menu" && this.filterModule) {
        this.filterModule.closeDialog();
        gObj.notify(restoreFocus, {});
      }
    };
    Filter2.prototype.updateCrossIcon = function(element) {
      if (element.value.length) {
        element.nextElementSibling.classList.remove("e-hide");
      }
    };
    Filter2.prototype.updateFilterMsg = function() {
      if (this.filterSettings.type === "FilterBar") {
        var gObj = this.parent;
        var getFormatFlValue = void 0;
        var columns = this.filterSettings.columns;
        var column = void 0;
        if (!this.filterSettings.showFilterBarStatus) {
          return;
        }
        if (columns.length > 0 && this.filterStatusMsg !== this.l10n.getConstant("InvalidFilterMessage")) {
          this.filterStatusMsg = "";
          for (var index = 0; index < columns.length; index++) {
            column = gObj.grabColumnByUidFromAllCols(columns[parseInt(index.toString(), 10)].uid) || gObj.grabColumnByFieldFromAllCols(columns[parseInt(index.toString(), 10)].field, columns[parseInt(index.toString(), 10)].isForeignKey);
            if (index) {
              this.filterStatusMsg += " && ";
            }
            if (!isNullOrUndefined(column.format)) {
              var flValue = column.type === "date" || column.type === "datetime" || column.type === "dateonly" ? this.valueFormatter.fromView(this.values[column.field], column.getParser(), column.type === "dateonly" ? "date" : column.type) : this.values[column.field];
              if (!(column.type === "date" || column.type === "datetime" || column.type === "dateonly")) {
                var formater = this.serviceLocator.getService("valueFormatter");
                getFormatFlValue = formater.toView(flValue, column.getParser()).toString();
              } else {
                getFormatFlValue = this.setFormatForFlColumn(flValue, column);
              }
              this.filterStatusMsg += column.headerText + ": " + getFormatFlValue;
            } else {
              this.filterStatusMsg += column.headerText + ": " + this.values[column.field];
            }
          }
        }
        if (gObj.allowPaging) {
          gObj.updateExternalMessage(this.filterStatusMsg);
          if (this.parent.height === "100%") {
            this.parent.scrollModule.refresh();
          }
        }
        this.filterStatusMsg = "";
      }
    };
    Filter2.prototype.setFormatForFlColumn = function(value, column) {
      var formater = this.serviceLocator.getService("valueFormatter");
      return formater.toView(value, column.getFormatter()).toString();
    };
    Filter2.prototype.checkForSkipInput = function(column, value) {
      var isSkip;
      if (column.type === "number") {
        if (DataUtil.operatorSymbols["" + value] || this.skipNumberInput.indexOf(value) > -1) {
          isSkip = true;
        }
      } else if (column.type === "string") {
        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
          var val = value_1[_i];
          if (this.skipStringInput.indexOf(val) > -1) {
            isSkip = true;
          }
        }
      }
      return isSkip;
    };
    Filter2.prototype.processFilter = function(e) {
      this.stopTimer();
      this.startTimer(e);
    };
    Filter2.prototype.startTimer = function(e) {
      var _this = this;
      this.timer = window.setInterval(function() {
        _this.onTimerTick();
      }, e.keyCode === 13 ? 0 : this.filterSettings.immediateModeDelay);
    };
    Filter2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    Filter2.prototype.onTimerTick = function() {
      var selector = "[id='" + this.column.field + "_filterBarcell']";
      var filterElement = this.element.querySelector(selector);
      if (!filterElement) {
        filterElement = this.parent.getHeaderContent().querySelector(selector);
      }
      var filterValue;
      this.cellText[this.column.field] = filterElement.value;
      this.stopTimer();
      if (!isNullOrUndefined(this.column.filterBarTemplate)) {
        var templateRead = this.column.filterBarTemplate.read;
        if (typeof templateRead === "string") {
          templateRead = getValue(templateRead, window);
        }
        if (!isNullOrUndefined(templateRead)) {
          this.value = templateRead.call(this, filterElement);
        }
      } else {
        filterValue = JSON.parse(JSON.stringify(filterElement.value));
      }
      if (isNullOrUndefined(this.value) || this.value === "") {
        this.removeFilteredColsByField(this.column.field);
        return;
      }
      this.validateFilterValue(this.value);
      this.filterByMethod = false;
      this.filterByColumn(this.column.field, this.operator, this.value, this.predicate, this.filterSettings.enableCaseSensitivity, this.ignoreAccent, this.column.isForeignColumn());
      this.filterByMethod = true;
      filterElement.value = filterValue;
      this.updateFilterMsg();
    };
    Filter2.prototype.validateFilterValue = function(value) {
      var skipInput;
      var index;
      this.matchCase = this.filterSettings.enableCaseSensitivity;
      switch (this.column.type) {
        case "number":
          if (this.column.filter.operator) {
            this.operator = this.column.filter.operator;
          } else {
            this.operator = this.filterOperators.equal;
          }
          skipInput = [">", "<", "=", "!"];
          for (var i = 0; i < value.length; i++) {
            if (skipInput.indexOf(value[parseInt(i.toString(), 10)]) > -1) {
              index = i;
              break;
            }
          }
          this.getOperator(value.substring(index));
          if (index !== 0) {
            this.value = value.substring(0, index);
          }
          if (this.value !== "" && value.length >= 1) {
            this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);
          }
          if (isNaN(this.value)) {
            this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage");
          }
          break;
        case "date":
        case "datetime":
          this.operator = this.filterOperators.equal;
          if (this.value !== "" && !(this.value instanceof Date)) {
            this.getOperator(value);
            this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);
            if (isNullOrUndefined(this.value)) {
              this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage");
            }
          }
          break;
        case "string":
          this.matchCase = false;
          if (this.column.filter.operator) {
            this.operator = this.column.filter.operator;
          } else {
            if (value.indexOf("*") !== -1 || value.indexOf("?") !== -1 || value.indexOf("%3f") !== -1) {
              this.operator = this.filterOperators.wildCard;
            } else if (value.indexOf("%") !== -1) {
              this.operator = this.filterOperators.like;
            } else {
              this.operator = this.filterOperators.startsWith;
            }
          }
          break;
        case "boolean":
          if (value.toLowerCase() === "true" || value === "1") {
            this.value = true;
          } else if (value.toLowerCase() === "false" || value === "0") {
            this.value = false;
          } else if (value.length) {
            this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage");
          }
          this.operator = this.filterOperators.equal;
          break;
        default:
          if (this.column.filter.operator) {
            this.operator = this.column.filter.operator;
          } else {
            this.operator = this.filterOperators.equal;
          }
      }
    };
    Filter2.prototype.getOperator = function(value) {
      var singleOp = value.charAt(0);
      var multipleOp = value.slice(0, 2);
      var operators = extend({
        "=": this.filterOperators.equal,
        "!": this.filterOperators.notEqual
      }, DataUtil.operatorSymbols);
      if (operators.hasOwnProperty(singleOp) || operators.hasOwnProperty(multipleOp)) {
        this.operator = operators["" + singleOp];
        this.value = value.substring(1);
        if (!this.operator) {
          this.operator = operators["" + multipleOp];
          this.value = value.substring(2);
        }
      }
      if (this.operator === this.filterOperators.lessThan || this.operator === this.filterOperators.greaterThan) {
        if (this.value.charAt(0) === "=") {
          this.operator = this.operator + "orequal";
          this.value = this.value.substring(1);
        }
      }
    };
    Filter2.prototype.columnPositionChanged = function() {
      if (this.parent.filterSettings.type !== "FilterBar") {
        return;
      }
    };
    Filter2.prototype.getLocalizedCustomOperators = function() {
      var numOptr = [{
        value: "equal",
        text: this.l10n.getConstant("Equal")
      }, {
        value: "greaterthan",
        text: this.l10n.getConstant("GreaterThan")
      }, {
        value: "greaterthanorequal",
        text: this.l10n.getConstant("GreaterThanOrEqual")
      }, {
        value: "lessthan",
        text: this.l10n.getConstant("LessThan")
      }, {
        value: "lessthanorequal",
        text: this.l10n.getConstant("LessThanOrEqual")
      }, {
        value: "notequal",
        text: this.l10n.getConstant("NotEqual")
      }, {
        value: "isnull",
        text: this.l10n.getConstant("IsNull")
      }, {
        value: "isnotnull",
        text: this.l10n.getConstant("NotNull")
      }];
      this.customOperators = {
        stringOperator: [{
          value: "startswith",
          text: this.l10n.getConstant("StartsWith")
        }, {
          value: "endswith",
          text: this.l10n.getConstant("EndsWith")
        }, {
          value: "contains",
          text: this.l10n.getConstant("Contains")
        }, {
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "isempty",
          text: this.l10n.getConstant("IsEmpty")
        }, {
          value: "doesnotstartwith",
          text: this.l10n.getConstant("NotStartsWith")
        }, {
          value: "doesnotendwith",
          text: this.l10n.getConstant("NotEndsWith")
        }, {
          value: "doesnotcontain",
          text: this.l10n.getConstant("NotContains")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }, {
          value: "isnotempty",
          text: this.l10n.getConstant("IsNotEmpty")
        }, {
          value: "like",
          text: this.l10n.getConstant("Like")
        }],
        numberOperator: numOptr,
        dateOperator: numOptr,
        datetimeOperator: numOptr,
        dateonlyOperator: numOptr,
        booleanOperator: [{
          value: "equal",
          text: this.l10n.getConstant("Equal")
        }, {
          value: "notequal",
          text: this.l10n.getConstant("NotEqual")
        }]
      };
    };
    Filter2.prototype.openMenuByField = function(field) {
      var gObj = this.parent;
      if (gObj.enableAdaptiveUI) {
        this.showCustomFilter(false);
        return;
      }
      var column = gObj.getColumnByField(field);
      var header = gObj.getColumnHeaderByField(field);
      var target = header.querySelector(".e-filtermenudiv");
      if (!target) {
        return;
      }
      var gClient = gObj.element.getBoundingClientRect();
      var fClient = target.getBoundingClientRect();
      this.filterDialogOpen(column, target, fClient.right - gClient.left, fClient.bottom - gClient.top);
    };
    Filter2.prototype.filterIconClickHandler = function(e) {
      var target = e.target;
      if (target.classList.contains("e-filtermenudiv") && (this.parent.filterSettings.type === "Menu" || this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel")) {
        var gObj = this.parent;
        var col = gObj.getColumnByUid(parentsUntil(target, "e-headercell").firstElementChild.getAttribute("e-mappinguid"));
        this.column = col;
        if (this.fltrDlgDetails.field === col.field && this.fltrDlgDetails.isOpen) {
          return;
        }
        if (this.filterModule) {
          this.filterModule.closeDialog();
        }
        this.fltrDlgDetails = {
          field: col.field,
          isOpen: true
        };
        this.openMenuByField(col.field);
      }
    };
    Filter2.prototype.clickHandler = function(e) {
      if (this.filterSettings.type === "FilterBar" && this.filterSettings.showFilterBarOperator) {
        if (parentsUntil(e.target, "e-filterbarcell") && e.target.classList.contains("e-input-group-icon")) {
          var filterOperatorElement = closest(e.target, "div").querySelector(".e-filterbaroperator");
          if (filterOperatorElement) {
            filterOperatorElement.focus();
          } else {
            e.target.focus();
          }
        }
        if (e.target.classList.contains("e-list-item")) {
          var inputId = document.querySelector(".e-popup-open").getAttribute("id").replace("_popup", "");
          if (inputId.indexOf("grid-column") !== -1) {
            closest(document.getElementById(inputId), "div").querySelector(".e-filtertext").focus();
          }
        }
      }
      if (this.filterSettings.mode === "Immediate" || this.parent.filterSettings.type === "Menu" || this.parent.filterSettings.type === "CheckBox" || this.parent.filterSettings.type === "Excel") {
        var target = e.target;
        var datepickerEle = target.classList.contains("e-day");
        var dialog = parentsUntil(this.parent.element, "e-dialog");
        var hasDialog = false;
        var popupEle = parentsUntil(target, "e-popup");
        var hasDialogClosed = this.parent.element.classList.contains("e-device") ? document.querySelector(".e-filter-popup") : this.parent.element.querySelector(".e-filter-popup");
        if (dialog && popupEle) {
          hasDialog = dialog.id === popupEle.id;
        }
        if (this.filterModule && hasDialogClosed && (parentsUntil(target, "e-excel-ascending") || parentsUntil(target, "e-excel-descending"))) {
          this.filterModule.closeDialog(target);
        }
        if (parentsUntil(target, "e-filter-popup") || target.classList.contains("e-filtermenudiv")) {
          return;
        } else if (this.filterModule && !parentsUntil(target, "e-date-overflow") && !parentsUntil(target, "e-popup-wrapper") && !closest(target, ".e-filter-item.e-menu-item") && !datepickerEle && !(parentsUntil(target, "e-search-wrapper") && !hasDialogClosed)) {
          if (hasDialog && !parentsUntil(target, "e-filter-popup") && !parentsUntil(target, "e-popup-flmenu") || !popupEle && hasDialogClosed) {
            this.filterModule.isresetFocus = parentsUntil(target, "e-grid") && parentsUntil(target, "e-grid").id === this.parent.element.id && !(parentsUntil(target, "e-search-wrapper") && hasDialogClosed);
            this.filterModule.closeDialog(target);
          }
        }
      }
    };
    Filter2.prototype.filterHandler = function(args) {
      this.actualPredicate[args.field] = args.actualPredicate;
      this.actualData = Object.keys(this.actualPredicate);
      var dataManager = new DataManager(this.filterSettings.columns);
      var query = new Query().where("field", this.filterOperators.equal, args.field);
      this.checkboxFilterObject = dataManager.dataSource.json;
      this.checkboxPrevFilterObject = dataManager.executeLocal(query);
      for (var i = 0; i < this.checkboxPrevFilterObject.length; i++) {
        var index = -1;
        for (var j = 0; j < this.filterSettings.columns.length; j++) {
          if (this.checkboxPrevFilterObject[parseInt(i.toString(), 10)].field === this.filterSettings.columns[parseInt(j.toString(), 10)].field) {
            index = j;
            break;
          }
        }
        if (index !== -1) {
          this.filterSettings.columns.splice(index, 1);
        }
      }
      if (this.values[args.field]) {
        delete this.values[args.field];
      }
      var col = this.parent.getColumnByField(args.field);
      var iconClass = this.parent.showColumnMenu && col.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
      var filterIconElement = this.parent.getColumnHeaderByField(args.field).querySelector(iconClass);
      if (args.action === "filtering") {
        this.filterSettings.columns = this.filterSettings.columns.concat(args.filterCollection);
        if (this.filterSettings.columns.length && filterIconElement) {
          filterIconElement.classList.add("e-filtered");
        }
      } else {
        if (filterIconElement) {
          filterIconElement.classList.remove("e-filtered");
        }
        args.requestType = "filtering";
        this.parent.renderModule.refresh(args);
      }
      this.parent.dataBind();
    };
    Filter2.prototype.updateFilter = function() {
      var cols = this.filterSettings.columns;
      this.actualPredicate = {};
      for (var i = 0; i < cols.length; i++) {
        this.column = this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field) || getColumnByForeignKeyValue(cols[parseInt(i.toString(), 10)].field, this.parent.getForeignKeyColumns());
        var fieldName = cols[parseInt(i.toString(), 10)].field;
        if (!this.parent.getColumnByField(cols[parseInt(i.toString(), 10)].field)) {
          fieldName = getColumnByForeignKeyValue(cols[parseInt(i.toString(), 10)].field, this.parent.getForeignKeyColumns()).field;
        }
        this.refreshFilterIcon(fieldName, cols[parseInt(i.toString(), 10)].operator, cols[parseInt(i.toString(), 10)].value, cols[parseInt(i.toString(), 10)].type, cols[parseInt(i.toString(), 10)].predicate, cols[parseInt(i.toString(), 10)].matchCase, cols[parseInt(i.toString(), 10)].ignoreAccent, cols[parseInt(i.toString(), 10)].uid);
      }
    };
    Filter2.prototype.refreshFilterIcon = function(fieldName, operator, value, type, predicate, matchCase, ignoreAccent, uid2) {
      var obj = {
        field: fieldName,
        predicate,
        matchCase,
        ignoreAccent,
        operator,
        value,
        type
      };
      if (this.actualPredicate["" + fieldName]) {
        this.actualPredicate["" + fieldName].push(obj);
      } else {
        this.actualPredicate["" + fieldName] = [obj];
      }
      var field = uid2 ? this.parent.grabColumnByUidFromAllCols(uid2).field : fieldName;
      this.addFilteredClass(field);
    };
    Filter2.prototype.addFilteredClass = function(fieldName) {
      var filterIconElement;
      var col = this.parent.getColumnByField(fieldName);
      if (this.parent.showColumnMenu && col.showColumnMenu) {
        filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector(".e-columnmenu");
      } else if (col) {
        filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector(".e-icon-filter");
      }
      if (filterIconElement) {
        filterIconElement.classList.add("e-filtered");
      }
    };
    Filter2.prototype.getFilterUIInfo = function() {
      return this.filterModule ? this.filterModule.getFilterUIInfo() : {};
    };
    Filter2.prototype.getOperatorName = function(field) {
      return document.getElementById(this.parent.getColumnByField(field).uid).ej2_instances[0].value;
    };
    Filter2.prototype.renderCheckboxOnFilterMenu = function() {
      return this.filterModule.renderCheckBoxMenu();
    };
    return Filter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/resize.js
var resizeClassList = {
  root: "e-rhandler",
  suppress: "e-rsuppress",
  icon: "e-ricon",
  helper: "e-rhelper",
  header: "th.e-headercell",
  cursor: "e-rcursor"
};
var Resize = (
  /** @class */
  function() {
    function Resize2(parent) {
      this.tapped = false;
      this.isDblClk = true;
      this.resizeProcess = false;
      this.isCancelAutoFit = false;
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.widthService = new ColumnWidthService(parent);
      this.addEventListener();
    }
    Resize2.prototype.autoFitColumns = function(fName, startRowIndex, endRowIndex) {
      var columnName = fName === void 0 || fName === null || fName.length <= 0 ? this.parent.getColumns().map(function(x) {
        return x.field;
      }) : typeof fName === "string" ? [fName] : fName;
      this.parent.isAutoFitColumns = true;
      if (this.parent.enableAdaptiveUI) {
        this.parent.element.classList.add("e-grid-autofit");
      }
      this.findColumn(columnName, startRowIndex, endRowIndex);
    };
    Resize2.prototype.autoFit = function() {
      var newarray = this.parent.getColumns().filter(function(c) {
        return c.autoFit === true;
      }).map(function(c) {
        return c.field || c.headerText;
      });
      if (newarray.length > 0) {
        this.autoFitColumns(newarray);
      }
      if (this.parent.resizeSettings.mode === "Auto") {
        this.widthService.setWidthToTable();
      }
    };
    Resize2.prototype.getCellElementsByColumnIndex = function(columnIndex) {
      if (this.parent.frozenRows) {
        return [].slice.call(this.parent.getHeaderTable().querySelectorAll("td.e-rowcell:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption):not(.e-detailcell)")).concat([].slice.call(this.parent.getContentTable().querySelectorAll("td.e-rowcell:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption):not(.e-detailcell)")));
      } else {
        return [].slice.call(this.parent.getContentTable().querySelectorAll("td.e-rowcell:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption):not(.e-detailcell)"));
      }
    };
    Resize2.prototype.resizeColumn = function(fName, index, id, startRowIndex, endRowIndex) {
      var gObj = this.parent;
      var tWidth = 0;
      var headerTable = gObj.getHeaderTable();
      var contentTable = gObj.getContentTable();
      var footerTable;
      var headerDivTag = "e-gridheader";
      var contentDivTag = gridContent;
      var footerDivTag = gridFooter;
      var indentWidth = 0;
      var uid2 = id ? id : this.parent.getUidByColumnField(fName);
      var columnIndex = this.parent.getNormalizedColumnIndex(uid2);
      var headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid2 + '"]').parentElement.cloneNode(true);
      var contentTextClone = this.getCellElementsByColumnIndex(columnIndex);
      var footerTextClone;
      var columnIndexByField = this.parent.getColumnIndexByField(fName);
      if (!isNullOrUndefined(gObj.getFooterContent())) {
        footerTable = gObj.getFooterContentTable();
      }
      if (footerTable) {
        footerTextClone = footerTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption)");
      }
      var indentWidthClone = [].slice.call(headerTable.querySelector("tr").getElementsByClassName("e-grouptopleftcell"));
      if (indentWidthClone.length > 0) {
        for (var i = 0; i < indentWidthClone.length; i++) {
          indentWidth += indentWidthClone[parseInt(i.toString(), 10)].offsetWidth;
        }
      }
      var detailsElement = contentTable.querySelector(".e-detailrowcollapse") || contentTable.querySelector(".e-detailrowexpand");
      if ((this.parent.detailTemplate || this.parent.childGrid) && detailsElement) {
        indentWidth += detailsElement.offsetWidth;
      }
      var headerText = [headerTextClone];
      var contentText = [];
      var footerText = [];
      if (footerTable) {
        for (var i = 0; i < footerTextClone.length; i++) {
          footerText[parseInt(i.toString(), 10)] = footerTextClone[parseInt(i.toString(), 10)].cloneNode(true);
        }
      }
      for (var i = 0; i < contentTextClone.length; i++) {
        contentText[parseInt(i.toString(), 10)] = contentTextClone[parseInt(i.toString(), 10)].cloneNode(true);
      }
      var wHeader = this.createTable(headerTable, headerText, headerDivTag);
      var wFooter = null;
      var wContent = null;
      if (gObj.getCurrentViewRecords().length) {
        wContent = this.createTable(contentTable, contentText, contentDivTag, startRowIndex, endRowIndex);
      }
      if (footerText.length) {
        wFooter = this.createTable(footerTable, footerText, footerDivTag);
      }
      var columnbyindex = gObj.getColumns()[parseInt(columnIndexByField.toString(), 10)];
      var width = columnbyindex.width = formatUnit(Math.max(wHeader, wContent, wFooter));
      var colMaxWidth = columnbyindex.maxWidth && parseFloat(columnbyindex.maxWidth.toString());
      if (parseInt(width, 10) > colMaxWidth) {
        columnbyindex.width = colMaxWidth;
      }
      this.widthService.setColumnWidth(gObj.getColumns()[parseInt(columnIndexByField.toString(), 10)]);
      var result = gObj.getColumns().some(function(x) {
        return (x.visible || gObj.groupSettings.columns.length) && (x.width === null || x.width === void 0 || x.width.length <= 0);
      });
      if (result === false) {
        var element = gObj.getColumns();
        for (var i = 0; i < element.length; i++) {
          if (element[parseInt(i.toString(), 10)].visible) {
            tWidth = tWidth + parseFloat(element[parseInt(i.toString(), 10)].width);
          }
        }
      }
      var calcTableWidth = tWidth + indentWidth;
      if (tWidth > 0) {
        if (this.parent.detailTemplate || this.parent.childGrid) {
          this.widthService.setColumnWidth(new Column({
            width: "30px"
          }));
        }
        if (this.parent.resizeSettings.mode === "Auto") {
          calcTableWidth = "100%";
        }
        headerTable.style.width = formatUnit(calcTableWidth);
        contentTable.style.width = formatUnit(calcTableWidth);
        if (!isNullOrUndefined(footerTable)) {
          footerTable.style.width = formatUnit(calcTableWidth);
        }
      }
      if (gObj.isFrozenGrid() && gObj.enableColumnVirtualization) {
        this.widthService.refreshFrozenScrollbar();
      }
      var tableWidth = headerTable.offsetWidth;
      var contentwidth = gObj.getContent().scrollWidth;
      if (contentwidth > tableWidth) {
        if (!isNullOrUndefined(contentTable.querySelector(".e-emptyrow"))) {
          addClass([headerTable], ["e-tableborder"]);
          removeClass([contentTable], ["e-tableborder"]);
        } else {
          addClass([headerTable, contentTable], ["e-tableborder"]);
        }
      } else {
        removeClass([headerTable, contentTable], ["e-tableborder"]);
      }
      if (!isNullOrUndefined(footerTable)) {
        footerTable.classList.add("e-tableborder");
      }
    };
    Resize2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.widthService = null;
      this.unwireEvents();
      this.removeEventListener();
    };
    Resize2.prototype.getModuleName = function() {
      return "resize";
    };
    Resize2.prototype.findColumn = function(fName, startRowIndex, endRowIndex) {
      for (var i = 0; i < fName.length; i++) {
        var fieldName = fName[parseInt(i.toString(), 10)];
        var columnIndex = this.parent.getColumnIndexByField(fieldName);
        var column = this.parent.getColumns()[parseInt(columnIndex.toString(), 10)];
        if (columnIndex > -1 && !isNullOrUndefined(column) && column.visible === true) {
          this.resizeColumn(fieldName, columnIndex, null, startRowIndex, endRowIndex);
        }
      }
      if (this.parent.allowTextWrap) {
        this.parent.notify(freezeRender, {
          case: "refreshHeight",
          isModeChg: true
        });
      }
      if (this.parent.isFrozenGrid()) {
        this.refreshResizefrzCols(true, true);
      }
    };
    Resize2.prototype.createTable = function(table2, text, tag, startRowIndex, endRowIndex) {
      if (startRowIndex === void 0) {
        startRowIndex = 1;
      }
      if (endRowIndex === void 0) {
        endRowIndex = text.length;
      }
      if (startRowIndex > endRowIndex) {
        startRowIndex ^= endRowIndex;
        endRowIndex ^= startRowIndex;
        startRowIndex ^= endRowIndex;
      }
      var myTableDiv = this.parent.createElement("div");
      var adaptiveClass = this.parent.enableAdaptiveUI ? " e-bigger" : "";
      myTableDiv.className = this.parent.element.className + adaptiveClass;
      myTableDiv.style.cssText = "display: inline-block;visibility:hidden;position:absolute";
      var mySubDiv = this.parent.createElement("div");
      mySubDiv.className = tag;
      var myTable = this.parent.createElement("table", {
        attrs: {
          role: "grid"
        }
      });
      myTable.className = table2.className;
      myTable.classList.add("e-resizetable");
      myTable.style.cssText = "table-layout: auto;width: auto";
      var myTr = this.parent.createElement("tr");
      for (var i = startRowIndex <= 0 ? 1 : startRowIndex; i <= (endRowIndex > text.length ? text.length : endRowIndex); i++) {
        var tr = myTr.cloneNode();
        tr.className = table2.querySelector("tr").className;
        tr.appendChild(text[parseInt((i - 1).toString(), 10)]);
        myTable.appendChild(tr);
      }
      mySubDiv.appendChild(myTable);
      myTableDiv.appendChild(mySubDiv);
      document.body.appendChild(myTableDiv);
      var offsetWidthValue = myTable.getBoundingClientRect().width;
      document.body.removeChild(myTableDiv);
      return Math.ceil(offsetWidthValue);
    };
    Resize2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(headerRefreshed, this.refreshHeight, this);
      this.parent.on(refreshResizePosition, this.refreshResizePosition, this);
      this.parent.on(initialEnd, this.wireEvents, this);
      this.parent.on(contentReady, this.autoFit, this);
      this.parent.on(refreshHandlers, this.refreshHeight, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Resize2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(headerRefreshed, this.refreshHeight);
      this.parent.off(refreshResizePosition, this.refreshResizePosition);
      this.parent.off(initialEnd, this.wireEvents);
      this.parent.off(refreshHandlers, this.refreshHeight);
      this.parent.off(destroy, this.destroy);
    };
    Resize2.prototype.render = function() {
      this.unwireEvents();
      this.wireEvents();
      this.setHandlerHeight();
    };
    Resize2.prototype.refreshHeight = function() {
      if (this.parent.getHeaderTable()) {
        var element = this.getResizeHandlers();
        for (var i = 0; i < element.length; i++) {
          if (element[parseInt(i.toString(), 10)].parentElement.offsetHeight > 0) {
            element[parseInt(i.toString(), 10)].style.height = element[parseInt(i.toString(), 10)].parentElement.offsetHeight + "px";
          }
        }
        this.setHandlerHeight();
      }
    };
    Resize2.prototype.wireEvents = function() {
      EventHandler.add(this.parent.getHeaderContent(), Browser.touchStartEvent, this.touchResizeStart, this);
      EventHandler.add(this.parent.getHeaderContent(), dblclick, this.callAutoFit, this);
    };
    Resize2.prototype.unwireEvents = function() {
      EventHandler.remove(this.parent.getHeaderContent(), Browser.touchStartEvent, this.touchResizeStart);
      EventHandler.remove(this.parent.getHeaderContent(), dblclick, this.callAutoFit);
    };
    Resize2.prototype.getResizeHandlers = function() {
      return [].slice.call(this.parent.getHeaderTable().getElementsByClassName(resizeClassList.root));
    };
    Resize2.prototype.setHandlerHeight = function() {
      var element = [].slice.call(this.parent.getHeaderTable().getElementsByClassName(resizeClassList.suppress));
      for (var i = 0; i < element.length; i++) {
        element[parseInt(i.toString(), 10)].style.height = element[parseInt(i.toString(), 10)].parentElement.offsetHeight + "px";
      }
    };
    Resize2.prototype.callAutoFit = function(e) {
      if (e.target.classList.contains("e-rhandler") && !this.isCancelAutoFit) {
        var col = this.getTargetColumn(e);
        if (col.columns) {
          return;
        }
        this.resizeColumn(col.field, this.parent.getNormalizedColumnIndex(col.uid), col.uid);
        if (this.parent.isFrozenGrid()) {
          this.refreshResizefrzCols(true, true);
        }
        var header = closest(e.target, resizeClassList.header);
        header.classList.add("e-resized");
      }
    };
    Resize2.prototype.touchResizeStart = function(e) {
      if (!Global.timer) {
        Global.timer = setTimeout(function() {
          Global.timer = null;
        }, 300);
        return this.resizeStart(e);
      } else {
        clearTimeout(Global.timer);
        Global.timer = null;
        this.callAutoFit(e);
      }
    };
    Resize2.prototype.resizeStart = function(e) {
      var _this = this;
      if (e.target.classList.contains("e-rhandler")) {
        this.isCancelAutoFit = false;
        var args = {
          e,
          column: this.getTargetColumn(e)
        };
        this.parent.trigger(resizeStart, args, function(args2) {
          if (args2.cancel || _this.parent.isEdit) {
            _this.cancelResizeAction();
            _this.isCancelAutoFit = true;
            return;
          }
        });
        if (!this.isCancelAutoFit) {
          if (!this.helper) {
            if (this.getScrollBarWidth() === 0) {
              this.resizeProcess = true;
              if (this.parent.allowGrouping) {
                for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
                  this.widthService.setColumnWidth(new Column({
                    width: "30px"
                  }), i);
                }
              }
              for (var _i = 0, _a = this.refreshColumnWidth(); _i < _a.length; _i++) {
                var col = _a[_i];
                this.widthService.setColumnWidth(col);
              }
              this.widthService.setWidthToTable();
              this.resizeProcess = false;
            }
            this.refreshStackedColumnWidth();
            this.element = e.target;
            this.parentElementWidth = this.parent.element.getBoundingClientRect().width;
            this.appendHelper();
            this.column = this.getTargetColumn(e);
            this.pageX = this.getPointX(e);
            if (this.column.getFreezeTableName() === frozenRight) {
              if (this.parent.enableRtl) {
                this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(isNullOrUndefined(this.column.width) ? "" : this.column.width.toString());
              } else {
                this.minMove = parseFloat(isNullOrUndefined(this.column.width) ? "" : this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
              }
            } else if (this.parent.enableRtl) {
              this.minMove = parseFloat(this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
            } else {
              this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(isNullOrUndefined(this.column.width) ? "" : this.column.width.toString());
            }
            this.minMove += this.pageX;
          }
          if (Browser.isDevice && !this.helper.classList.contains(resizeClassList.icon)) {
            this.helper.classList.add(resizeClassList.icon);
            EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);
            EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);
          } else {
            EventHandler.add(document, Browser.touchEndEvent, this.resizeEnd, this);
            EventHandler.add(this.parent.element, Browser.touchMoveEvent, this.resizing, this);
            this.updateCursor("add");
          }
        }
      }
    };
    Resize2.prototype.cancelResizeAction = function(removeEvents) {
      if (removeEvents) {
        EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);
        this.updateCursor("remove");
      }
      if (Browser.isDevice && !isNullOrUndefined(this.helper)) {
        EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
        EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
      }
      if (!isNullOrUndefined(this.helper)) {
        detach(this.helper);
      }
      this.refresh();
    };
    Resize2.prototype.getWidth = function(width, minWidth, maxWidth) {
      if (minWidth && width < minWidth) {
        return minWidth;
      } else if (maxWidth && width > maxWidth) {
        return maxWidth;
      } else {
        return width;
      }
    };
    Resize2.prototype.updateResizeEleHeight = function() {
      var elements = [].slice.call(this.parent.getHeaderContent().getElementsByClassName("e-rhandler"));
      for (var i = 0; i < elements.length; i++) {
        elements[parseInt(i.toString(), 10)].style.height = this.element.parentElement.offsetHeight + "px";
      }
    };
    Resize2.prototype.getColData = function(column, mousemove) {
      return {
        width: parseFloat(isNullOrUndefined(this.widthService.getWidth(column)) || this.widthService.getWidth(column) === "auto" ? "0" : this.widthService.getWidth(column).toString()) + mousemove,
        minWidth: column.minWidth ? parseFloat(column.minWidth.toString()) : null,
        maxWidth: column.maxWidth ? parseFloat(column.maxWidth.toString()) : null
      };
    };
    Resize2.prototype.refreshResizeFixedCols = function(pos) {
      var cols = this.parent.getColumns();
      var translateX = this.parent.enableColumnVirtualization ? this.parent.translateX : 0;
      var th = [].slice.call(this.parent.getHeaderContent().querySelector("tbody").querySelectorAll(".e-fixedfreeze")).concat([].slice.call(this.parent.getContent().querySelectorAll(".e-fixedfreeze")));
      for (var i = 0; i < th.length; i++) {
        var node = th[parseInt(i.toString(), 10)];
        var column = void 0;
        if (node.classList.contains("e-summarycell")) {
          var uid2 = node.getAttribute("e-mappinguid");
          column = this.parent.getColumnByUid(uid2);
        } else {
          var index = parseInt(node.getAttribute("data-colindex"), 10);
          column = cols[parseInt(index.toString(), 10)];
        }
        var width = 0;
        if (pos === "Left") {
          if (this.parent.getVisibleFrozenLeftCount()) {
            width = this.parent.getIndentCount() * 30;
          } else if (this.parent.getFrozenMode() === "Right") {
            width = this.parent.groupSettings.columns.length * 30;
          }
          for (var j = 0; j < cols.length; j++) {
            if (column.index > cols[parseInt(j.toString(), 10)].index) {
              if (column.uid === cols[parseInt(j.toString(), 10)].uid) {
                break;
              }
              if (cols[parseInt(j.toString(), 10)].freeze === "Left" || cols[parseInt(j.toString(), 10)].isFrozen || cols[parseInt(j.toString(), 10)].freeze === "Fixed") {
                if (cols[parseInt(j.toString(), 10)].visible) {
                  width += parseFloat(cols[parseInt(j.toString(), 10)].width.toString());
                }
              }
            }
          }
          applyStickyLeftRightPosition(node, (width === 0 ? width : width - 1) - translateX, this.parent.enableRtl, "Left");
        }
        if (pos === "Right") {
          width = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
          for (var j = cols.length - 1; j >= 0; j--) {
            if (column.uid === cols[parseInt(j.toString(), 10)].uid) {
              break;
            }
            if (cols[parseInt(j.toString(), 10)].freeze === "Right" || cols[parseInt(j.toString(), 10)].freeze === "Fixed") {
              if (cols[parseInt(j.toString(), 10)].visible) {
                width += parseFloat(cols[parseInt(j.toString(), 10)].width.toString());
              }
            }
          }
          var colSpanwidth = 0;
          if (node.colSpan > 1) {
            colSpanwidth = this.calculateColspanWidth(cols, node, column.index);
          }
          applyStickyLeftRightPosition(node, width - colSpanwidth + translateX, this.parent.enableRtl, "Right");
        }
      }
    };
    Resize2.prototype.calculateColspanWidth = function(cols, node, index) {
      var width = 0;
      for (var j = index + 1; j < index + node.colSpan; j++) {
        width += parseInt(cols[parseInt(j.toString(), 10)].width.toString(), 10);
      }
      return width;
    };
    Resize2.prototype.refreshResizePosition = function() {
      this.refreshResizefrzCols(true);
    };
    Resize2.prototype.refreshResizefrzCols = function(freezeRefresh2, isAutoFitCol) {
      var _this = this;
      var translateX = this.parent.enableColumnVirtualization ? this.parent.translateX : 0;
      if (freezeRefresh2 || this.column.freeze === "Left" || this.column.isFrozen || this.column.columns && frozenDirection(this.column) === "Left") {
        var width_1 = this.parent.getIndentCount() * 30;
        var columns = this.parent.getColumns().filter(function(col) {
          return col.freeze === "Left" || col.isFrozen;
        });
        if (!freezeRefresh2 || isAutoFitCol) {
          this.frzHdrRefresh("Left");
        }
        for (var i = 0; i < columns.length; i++) {
          if (freezeRefresh2 || columns[parseInt(i.toString(), 10)].index > this.column.index) {
            var elements = [];
            if (this.parent.frozenRows) {
              elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('td[data-colindex="' + i + '"]')).concat([].slice.call(this.parent.getContent().querySelectorAll('td[data-colindex="' + i + '"]')));
            } else {
              elements = [].slice.call(this.parent.getContent().querySelectorAll('td[data-colindex="' + i + '"]'));
            }
            elements.filter(function(cell) {
              applyStickyLeftRightPosition(cell, width_1 - translateX, _this.parent.enableRtl, "Left");
            });
            if (this.parent.enableColumnVirtualization) {
              columns[parseInt(i.toString(), 10)].valueX = width_1;
            }
          }
          if (columns[parseInt(i.toString(), 10)].visible) {
            width_1 += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());
          }
        }
        this.refreshResizeFixedCols("Left");
      }
      if (freezeRefresh2 || this.column.freeze === "Right" || this.column.columns && frozenDirection(this.column) === "Right") {
        var width_2 = this.parent.getFrozenMode() === "Right" && this.parent.isRowDragable() ? 30 : 0;
        var columns_1 = this.parent.getColumns();
        if (!freezeRefresh2 || isAutoFitCol) {
          this.frzHdrRefresh("Right");
        }
        var columnsRight = columns_1.filter(function(col) {
          return col.freeze === "Right";
        });
        var _loop_1 = function(i2) {
          var elements2 = [];
          if (this_1.parent.frozenRows) {
            elements2 = [].slice.call(this_1.parent.getHeaderContent().querySelectorAll('td[data-colindex="' + i2 + '"]')).concat([].slice.call(this_1.parent.getContent().querySelectorAll('td[data-colindex="' + i2 + '"]')));
          } else {
            elements2 = [].slice.call(this_1.parent.getContent().querySelectorAll('td[data-colindex="' + i2 + '"]'));
          }
          elements2.filter(function(cell) {
            var colSpanwidth = 0;
            if (cell.colSpan > 1) {
              colSpanwidth = _this.calculateColspanWidth(columns_1, cell, columns_1[parseInt(i2.toString(), 10)].index);
            }
            applyStickyLeftRightPosition(cell, width_2 - colSpanwidth + translateX, _this.parent.enableRtl, "Right");
          });
          if (this_1.parent.enableColumnVirtualization) {
            columns_1[parseInt(i2.toString(), 10)].valueX = width_2;
          }
          if (columns_1[parseInt(i2.toString(), 10)].visible) {
            width_2 = width_2 + parseFloat(columns_1[parseInt(i2.toString(), 10)].width.toString());
          }
        };
        var this_1 = this;
        for (var i = columns_1.length - 1; i >= columns_1.length - columnsRight.length; i--) {
          _loop_1(i);
        }
        this.refreshResizeFixedCols("Right");
      }
      if (this.column && (this.column.freeze === "Fixed" || this.column.columns && frozenDirection(this.column) === "Fixed")) {
        this.refreshResizeFixedCols("Left");
        this.refreshResizeFixedCols("Right");
        this.frzHdrRefresh("Left");
        this.frzHdrRefresh("Right");
      }
      if (this.parent.groupSettings.columns.length && this.parent.aggregates.length && this.parent.getContent().querySelector(".e-groupcaptionrow")) {
        this.refreshGroupCaptionRow();
      }
    };
    Resize2.prototype.refreshGroupCaptionRow = function() {
      var capRow = [].slice.call(this.parent.getContent().querySelectorAll(".e-groupcaptionrow"));
      for (var i = 0; i < capRow.length; i++) {
        var tr = capRow[parseInt(i.toString(), 10)];
        if (tr.querySelector(".e-summarycell")) {
          groupCaptionRowLeftRightPos(tr, this.parent);
        }
      }
    };
    Resize2.prototype.frzHdrRefresh = function(pos) {
      var _this = this;
      var translateX = this.parent.enableColumnVirtualization ? this.parent.translateX : 0;
      if (pos === "Left") {
        var tr = [].slice.call(this.parent.getHeaderContent().querySelector("thead").querySelectorAll("tr"));
        for (var i = 0; i < tr.length; i++) {
          var th = [].slice.call(tr[parseInt(i.toString(), 10)].querySelectorAll(".e-leftfreeze,.e-fixedfreeze"));
          var _loop_2 = function(j2) {
            var node = th[parseInt(j2.toString(), 10)];
            if (node.classList.contains("e-rowdragheader") || node.classList.contains("e-dragheadercell") || node.classList.contains("e-grouptopleftcell")) {
              return "continue";
            }
            var column = this_2.getParticularCol(node);
            var cols = this_2.parent.getColumns();
            var width = 0;
            var summarycell = [];
            if (this_2.parent.aggregates.length && this_2.parent.getFooterContent()) {
              if (this_2.parent.getContent().querySelectorAll(".e-summaryrow").length) {
                var summaryRows = [].slice.call(this_2.parent.getContent().querySelectorAll(".e-summaryrow"));
                summaryRows.filter(function(row2) {
                  summarycell.push(row2.querySelector('[e-mappinguid="' + column.uid + '"]'));
                });
              }
              summarycell = summarycell.concat([].slice.call(this_2.parent.getFooterContent().querySelectorAll('[e-mappinguid="' + column.uid + '"]')));
            }
            if (node.classList.contains("e-fixedfreeze")) {
              if (this_2.parent.getVisibleFrozenLeftCount()) {
                width = this_2.parent.getIndentCount() * 30;
              } else if (this_2.parent.getFrozenMode() === "Right") {
                width = this_2.parent.groupSettings.columns.length * 30;
              }
              for (var w = 0; w < cols.length; w++) {
                if (column.index > cols[parseInt(w.toString(), 10)].index) {
                  if (column.uid === cols[parseInt(w.toString(), 10)].uid) {
                    break;
                  }
                  if (cols[parseInt(w.toString(), 10)].freeze === "Left" || cols[parseInt(w.toString(), 10)].isFrozen || cols[parseInt(w.toString(), 10)].freeze === "Fixed") {
                    if (cols[parseInt(w.toString(), 10)].visible) {
                      width += parseInt(cols[parseInt(w.toString(), 10)].width.toString(), 10);
                    }
                  }
                }
              }
              if (summarycell && summarycell.length) {
                summarycell.filter(function(cell) {
                  applyStickyLeftRightPosition(cell, width - translateX, _this.parent.enableRtl, "Left");
                });
              }
              applyStickyLeftRightPosition(node, (width === 0 ? width : width - 1) - translateX, this_2.parent.enableRtl, "Left");
            } else {
              width = this_2.parent.getIndentCount() * 30;
              if (column.index === 0) {
                if (summarycell && summarycell.length) {
                  summarycell.filter(function(cell) {
                    applyStickyLeftRightPosition(cell, width - translateX, _this.parent.enableRtl, "Left");
                  });
                }
                applyStickyLeftRightPosition(node, width - translateX, this_2.parent.enableRtl, "Left");
                if (this_2.parent.enableColumnVirtualization) {
                  column.valueX = width;
                }
              } else {
                for (var k = 0; k < cols.length; k++) {
                  if (column.index < cols[parseInt(k.toString(), 10)].index || column.uid === cols[parseInt(k.toString(), 10)].uid) {
                    break;
                  }
                  if (cols[parseInt(k.toString(), 10)].visible) {
                    width += parseInt(cols[parseInt(k.toString(), 10)].width.toString(), 10);
                  }
                }
                if (summarycell && summarycell.length) {
                  summarycell.filter(function(cell) {
                    applyStickyLeftRightPosition(cell, width - translateX, _this.parent.enableRtl, "Left");
                  });
                }
                applyStickyLeftRightPosition(node, width - translateX, this_2.parent.enableRtl, "Left");
                if (this_2.parent.enableColumnVirtualization) {
                  column.valueX = width;
                }
              }
            }
          };
          var this_2 = this;
          for (var j = 0; j < th.length; j++) {
            _loop_2(j);
          }
        }
      }
      if (pos === "Right") {
        var tr = [].slice.call(this.parent.getHeaderContent().querySelector("thead").querySelectorAll("tr"));
        for (var i = 0; i < tr.length; i++) {
          var th = [].slice.call(tr[parseInt(i.toString(), 10)].querySelectorAll(".e-rightfreeze, .e-fixedfreeze"));
          var _loop_3 = function(j2) {
            var node = th[parseInt(j2.toString(), 10)];
            var column = this_3.getParticularCol(node);
            var cols = this_3.parent.getColumns();
            var width = 0;
            var summarycell = [];
            if (this_3.parent.aggregates.length && this_3.parent.getFooterContent()) {
              if (this_3.parent.getContent().querySelectorAll(".e-summaryrow").length) {
                var summaryRows = [].slice.call(this_3.parent.getContent().querySelectorAll(".e-summaryrow"));
                summaryRows.filter(function(row2) {
                  summarycell.push(row2.querySelector('[e-mappinguid="' + column.uid + '"]'));
                });
              }
              summarycell = summarycell.concat([].slice.call(this_3.parent.getFooterContent().querySelectorAll('[e-mappinguid="' + column.uid + '"]')));
            }
            if (node.classList.contains("e-fixedfreeze")) {
              width = this_3.parent.getFrozenMode() === "Right" && this_3.parent.isRowDragable() ? 30 : 0;
              for (var w = cols.length - 1; w >= 0; w--) {
                if (column.index < cols[parseInt(w.toString(), 10)].index) {
                  if (column.columns && isChildColumn(column, cols[parseInt(w.toString(), 10)].uid) || column.index > cols[parseInt(w.toString(), 10)].index) {
                    break;
                  }
                  if (cols[parseInt(w.toString(), 10)].freeze === "Right" || cols[parseInt(w.toString(), 10)].freeze === "Fixed") {
                    if (cols[parseInt(w.toString(), 10)].visible) {
                      width += parseFloat(cols[parseInt(w.toString(), 10)].width.toString());
                    }
                  }
                }
              }
              if (summarycell.length) {
                summarycell.filter(function(cell) {
                  applyStickyLeftRightPosition(cell, width + translateX, _this.parent.enableRtl, "Right");
                });
              }
              applyStickyLeftRightPosition(node, width + translateX, this_3.parent.enableRtl, "Right");
            } else {
              width = this_3.parent.getFrozenMode() === "Right" && this_3.parent.isRowDragable() ? 30 : 0;
              for (var k = cols.length - 1; k >= 0; k--) {
                if (column.columns && isChildColumn(column, cols[parseInt(k.toString(), 10)].uid) || column.index > cols[parseInt(k.toString(), 10)].index || column.uid === cols[parseInt(k.toString(), 10)].uid) {
                  break;
                }
                if (cols[parseInt(k.toString(), 10)].visible) {
                  width += parseInt(cols[parseInt(k.toString(), 10)].width.toString(), 10);
                }
              }
              if (summarycell.length) {
                summarycell.filter(function(cell) {
                  applyStickyLeftRightPosition(cell, width + translateX, _this.parent.enableRtl, "Right");
                });
              }
              applyStickyLeftRightPosition(node, width + translateX, this_3.parent.enableRtl, "Right");
              if (this_3.parent.enableColumnVirtualization) {
                column.valueX = width;
              }
            }
          };
          var this_3 = this;
          for (var j = th.length - 1; j >= 0; j--) {
            _loop_3(j);
          }
        }
      }
    };
    Resize2.prototype.getParticularCol = function(node) {
      var uid2 = node.classList.contains("e-filterbarcell") ? node.getAttribute("e-mappinguid") : node.querySelector("[e-mappinguid]").getAttribute("e-mappinguid");
      return this.parent.getColumnByUid(uid2);
    };
    Resize2.prototype.resizing = function(e) {
      if (isNullOrUndefined(this.column)) {
        return;
      }
      if (this.parent.isFrozenGrid()) {
        this.refreshResizefrzCols();
      }
      var offsetWidth = 0;
      if (isNullOrUndefined(this.column)) {
        offsetWidth = parentsUntil(this.element, "th").offsetWidth;
      }
      if (this.parent.allowTextWrap) {
        this.updateResizeEleHeight();
        this.setHelperHeight();
      }
      var pageX = this.getPointX(e);
      var mousemove = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX;
      var colData = this.getColData(this.column, mousemove);
      if (!colData.width) {
        colData.width = closest(this.element, "th").offsetWidth;
      }
      var width = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
      this.parent.log("resize_min_max", {
        column: this.column,
        width
      });
      if (!this.parent.enableRtl && this.minMove >= pageX || this.parent.enableRtl && this.minMove <= pageX) {
        width = this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 10;
        this.pageX = pageX = this.minMove;
      }
      if (width !== parseFloat(isNullOrUndefined(this.column.width) || this.column.width === "auto" ? offsetWidth.toString() : this.column.width.toString())) {
        this.pageX = pageX;
        this.column.width = formatUnit(width);
        var args = {
          e,
          column: this.column
        };
        this.parent.trigger(onResize, args);
        if (args.cancel) {
          this.cancelResizeAction(true);
          return;
        }
        var columns = [this.column];
        var finalColumns = [this.column];
        if (this.column.columns) {
          columns = this.getSubColumns(this.column, []);
          columns = this.calulateColumnsWidth(columns, false, mousemove);
          finalColumns = this.calulateColumnsWidth(columns, true, mousemove);
        }
        this.resizeProcess = true;
        for (var _i = 0, finalColumns_1 = finalColumns; _i < finalColumns_1.length; _i++) {
          var col = finalColumns_1[_i];
          this.widthService.setColumnWidth(col, null, "resize");
        }
        this.resizeProcess = false;
        this.updateHelper();
      }
      this.isDblClk = false;
    };
    Resize2.prototype.calulateColumnsWidth = function(columns, isUpdate, mousemove) {
      var finalColumns = [];
      for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var col = columns_2[_i];
        var totalWidth = 0;
        for (var i = 0; i < columns.length; i++) {
          totalWidth += parseFloat(columns[parseInt(i.toString(), 10)].width.toString());
        }
        var colData = this.getColData(col, parseFloat(col.width) * mousemove / totalWidth);
        var colWidth = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
        if (colWidth !== parseFloat(col.width.toString())) {
          if (isUpdate) {
            col.width = formatUnit(colWidth < 1 ? 1 : colWidth);
          }
          finalColumns.push(col);
        }
      }
      return finalColumns;
    };
    Resize2.prototype.getSubColumns = function(column, subColumns) {
      for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible !== false && col.allowResizing) {
          if (col.columns) {
            this.getSubColumns(col, subColumns);
          } else {
            subColumns.push(col);
          }
        }
      }
      return subColumns;
    };
    Resize2.prototype.resizeEnd = function(e) {
      if (!this.helper || this.parent.isDestroyed) {
        return;
      }
      var gObj = this.parent;
      EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);
      this.updateCursor("remove");
      detach(this.helper);
      var args = {
        e,
        column: this.column
      };
      var content2 = this.parent.getContent().querySelector("." + content);
      var cTable = content2;
      if (cTable.scrollHeight > cTable.clientHeight) {
        this.parent.scrollModule.setPadding();
        cTable.style.overflowY = "scroll";
      }
      this.parent.trigger(resizeStop, args);
      closest(this.element, ".e-headercell").classList.add("e-resized");
      this.isFrozenColResized = false;
      if (this.parent.allowTextWrap) {
        this.updateResizeEleHeight();
        this.parent.notify(textWrapRefresh, {
          case: "textwrap"
        });
      }
      var headerTable = gObj.getHeaderTable();
      var contentTable = gObj.getContentTable();
      var footerTable;
      if (!isNullOrUndefined(gObj.getFooterContent())) {
        footerTable = gObj.getFooterContentTable();
      }
      var tableWidth = headerTable.offsetWidth;
      var contentwidth = gObj.getContent().scrollWidth;
      if (contentwidth > tableWidth) {
        if (!isNullOrUndefined(contentTable.querySelector(".e-emptyrow"))) {
          addClass([headerTable], ["e-tableborder"]);
          removeClass([contentTable], ["e-tableborder"]);
        } else {
          addClass([headerTable, contentTable], ["e-tableborder"]);
        }
      } else {
        removeClass([headerTable, contentTable], ["e-tableborder"]);
      }
      if (!isNullOrUndefined(footerTable)) {
        footerTable.classList.add("e-tableborder");
      }
      this.refresh();
      this.doubleTapEvent(e);
      this.isDblClk = true;
    };
    Resize2.prototype.getPointX = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageX;
      } else {
        return e.pageX;
      }
    };
    Resize2.prototype.refreshColumnWidth = function() {
      var columns = this.parent.getColumns();
      for (var _i = 0, _a = [].slice.apply(this.parent.getHeaderContent().querySelectorAll("th.e-headercell")); _i < _a.length; _i++) {
        var ele = _a[_i];
        for (var _b = 0, columns_3 = columns; _b < columns_3.length; _b++) {
          var column = columns_3[_b];
          if (ele.querySelector("[e-mappinguid]") && ele.querySelector("[e-mappinguid]").getAttribute("e-mappinguid") === column.uid && column.visible) {
            column.width = ele.getBoundingClientRect().width;
            break;
          }
        }
      }
      return columns;
    };
    Resize2.prototype.refreshStackedColumnWidth = function() {
      for (var _i = 0, _a = this.parent.getStackedColumns(this.parent.columns); _i < _a.length; _i++) {
        var stackedColumn = _a[_i];
        stackedColumn.width = this.getStackedWidth(stackedColumn, 0);
      }
    };
    Resize2.prototype.getStackedWidth = function(column, width) {
      for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible !== false) {
          if (col.columns) {
            width = this.getStackedWidth(col, width);
          } else {
            width += parseFloat(col.width.toString());
          }
        }
      }
      return width;
    };
    Resize2.prototype.getTargetColumn = function(e) {
      var cell = closest(e.target, resizeClassList.header);
      cell = cell.querySelector(".e-headercelldiv") || cell.querySelector(".e-stackedheadercelldiv");
      var uid2 = cell.getAttribute("e-mappinguid");
      return this.parent.getColumnByUid(uid2);
    };
    Resize2.prototype.updateCursor = function(action) {
      var headerRows = [].slice.call(this.parent.getHeaderContent().querySelectorAll("th"));
      headerRows.push(this.parent.element);
      for (var _i = 0, headerRows_1 = headerRows; _i < headerRows_1.length; _i++) {
        var row2 = headerRows_1[_i];
        row2.classList["" + action](resizeClassList.cursor);
      }
    };
    Resize2.prototype.refresh = function() {
      this.column = null;
      this.pageX = null;
      this.element = null;
      this.helper = null;
    };
    Resize2.prototype.appendHelper = function() {
      this.helper = this.parent.createElement("div", {
        className: resizeClassList.helper
      });
      this.parent.element.appendChild(this.helper);
      this.setHelperHeight();
    };
    Resize2.prototype.setHelperHeight = function() {
      var height = this.parent.getContent().offsetHeight - this.getScrollBarWidth();
      var rect = closest(this.element, resizeClassList.header);
      var tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll("tr"));
      for (var i = tr.indexOf(rect.parentElement); i < tr.length && i > -1; i++) {
        height += tr[parseInt(i.toString(), 10)].offsetHeight;
      }
      var pos = this.calcPos(rect);
      pos.left += this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2;
      this.helper.style.cssText = "height: " + height + "px; top: " + pos.top + "px; left:" + Math.floor(pos.left) + "px;";
      if (this.parent.enableVirtualization) {
        this.helper.classList.add("e-virtual-rhandler");
      }
    };
    Resize2.prototype.getScrollBarWidth = function(height) {
      var ele = this.parent.getContent().firstChild;
      return ele.scrollHeight > ele.clientHeight && height || ele.scrollWidth > ele.clientWidth ? getScrollBarWidth() : 0;
    };
    Resize2.prototype.removeHelper = function(e) {
      var cls = e.target.classList;
      if (!(cls.contains(resizeClassList.root) || cls.contains(resizeClassList.icon)) && this.helper) {
        EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
        EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
        detach(this.helper);
        this.refresh();
      }
    };
    Resize2.prototype.updateHelper = function() {
      var rect = closest(this.element, resizeClassList.header);
      var left;
      left = Math.floor(this.calcPos(rect).left + (this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2));
      var borderWidth = 2;
      if (left > this.parentElementWidth) {
        left = this.parentElementWidth - borderWidth;
      }
      this.helper.style.left = left + "px";
    };
    Resize2.prototype.calcPos = function(elem) {
      var parentOffset = {
        top: 0,
        left: 0
      };
      var offset = elem.getBoundingClientRect();
      var doc = elem.ownerDocument;
      var offsetParent = parentsUntil(elem, "e-grid") || doc.documentElement;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === "static") {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      return {
        top: offset.top - parentOffset.top,
        left: offset.left - parentOffset.left
      };
    };
    Resize2.prototype.doubleTapEvent = function(e) {
      var _this = this;
      if (this.getUserAgent() && this.isDblClk) {
        if (!this.tapped) {
          this.tapped = setTimeout(function() {
            _this.tapped = null;
          }, 300);
        } else {
          clearTimeout(this.tapped);
          this.callAutoFit(e);
          this.tapped = null;
        }
      }
    };
    Resize2.prototype.getUserAgent = function() {
      var userAgent = Browser.userAgent.toLowerCase();
      return /iphone|ipod|ipad/.test(userAgent);
    };
    Resize2.prototype.timeoutHandler = function() {
      this.tapped = null;
    };
    return Resize2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/reorder.js
var Reorder = (
  /** @class */
  function() {
    function Reorder2(parent) {
      this.idx = 0;
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(headerDrop, this.headerDrop, this);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(reorderComplete, this.onActionComplete, this);
      this.parent.on(columnDrag, this.drag, this);
      this.parent.on(columnDragStart, this.dragStart, this);
      this.parent.on(columnDragStop, this.dragStop, this);
      this.parent.on(headerDrop, this.headerDrop, this);
      this.parent.on(headerRefreshed, this.createReorderElement, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(destroy, this.destroy, this);
    }
    Reorder2.prototype.chkDropPosition = function(srcElem, destElem) {
      var col = this.parent.getColumnByUid(destElem.firstElementChild.getAttribute("e-mappinguid"));
      var bool = col ? !col.lockColumn : true;
      return (srcElem.parentElement.isEqualNode(destElem.parentElement) || this.parent.enableColumnVirtualization || this.parent.isFrozenGrid() && Array.prototype.indexOf.call(closest(srcElem, "thead").children, srcElem.parentElement) === Array.prototype.indexOf.call(closest(destElem, "thead").children, destElem.parentElement)) && this.targetParentContainerIndex(srcElem, destElem) > -1 && bool;
    };
    Reorder2.prototype.chkDropAllCols = function(srcElem, destElem) {
      var isFound;
      var headers = this.getHeaderCells();
      var header;
      while (!isFound && headers.length > 0) {
        header = headers.pop();
        isFound = srcElem !== header && this.targetParentContainerIndex(srcElem, destElem) > -1;
      }
      return isFound;
    };
    Reorder2.prototype.findColParent = function(col, cols, parent) {
      parent = parent;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (col === cols[parseInt(i.toString(), 10)]) {
          return true;
        } else if (cols[parseInt(i.toString(), 10)].columns) {
          var cnt = parent.length;
          parent.push(cols[parseInt(i.toString(), 10)]);
          if (!this.findColParent(col, cols[parseInt(i.toString(), 10)].columns, parent)) {
            parent.splice(cnt, parent.length - cnt);
          } else {
            return true;
          }
        }
      }
      return false;
    };
    Reorder2.prototype.getColumnsModel = function(cols, isNotStackedHeader) {
      var columnModel = [];
      var subCols = [];
      for (var i = 0, len = cols.length; i < len; i++) {
        if (!isNullOrUndefined(cols[parseInt(i.toString(), 10)])) {
          if (cols[parseInt(i.toString(), 10)].visible) {
            columnModel.push(cols[parseInt(i.toString(), 10)]);
          } else if (isNotStackedHeader) {
            columnModel.push(cols[parseInt(i.toString(), 10)]);
          }
          if (cols[parseInt(i.toString(), 10)].columns) {
            subCols = subCols.concat(cols[parseInt(i.toString(), 10)].columns);
          }
        }
      }
      if (subCols.length) {
        columnModel = columnModel.concat(this.getColumnsModel(subCols));
      }
      return columnModel;
    };
    Reorder2.prototype.headerDrop = function(e) {
      var gObj = this.parent;
      var dropElement = this.element.querySelector(".e-headercelldiv") || this.element.querySelector(".e-stackedheadercelldiv");
      var uId = dropElement.getAttribute("e-mappinguid");
      var column = gObj.getColumnByUid(uId);
      if (!closest(e.target, "th") || !isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          column
        });
        return;
      }
      var destElem = closest(e.target, ".e-headercell");
      var destElemDiv = destElem.querySelector(".e-headercelldiv") || destElem.querySelector(".e-stackedheadercelldiv");
      var destElemUid = destElemDiv.getAttribute("e-mappinguid");
      if (!isNullOrUndefined(destElemUid)) {
        var destColumn = gObj.getColumnByUid(destElemUid);
        if (isNullOrUndefined(destColumn) || !destColumn.allowReordering || destColumn.lockColumn) {
          this.parent.log("action_disabled_column", {
            moduleName: this.getModuleName(),
            column,
            destColumn
          });
          return;
        }
      }
      if (destElem && !(!this.chkDropPosition(this.element, destElem) || !this.chkDropAllCols(this.element, destElem))) {
        if (this.parent.enableColumnVirtualization) {
          var columns = this.parent.columns;
          var sourceUid_1 = this.element.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
          var col = this.parent.columns.filter(function(col2) {
            return col2.uid === sourceUid_1;
          });
          var colMatchIndex_1 = null;
          var column_1 = col[0];
          var destUid_1 = destElem.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
          columns.some(function(col2, index) {
            if (col2.uid === destUid_1) {
              colMatchIndex_1 = index;
              return col2.uid === destUid_1;
            }
            return false;
          });
          if (!isNullOrUndefined(colMatchIndex_1)) {
            this.moveColumns(colMatchIndex_1, column_1);
          }
        } else {
          var newIndex = this.targetParentContainerIndex(this.element, destElem);
          var uid2 = this.element.firstElementChild.getAttribute("e-mappinguid");
          this.destElement = destElem;
          this.parent.notify(setReorderDestinationElement, {
            ele: destElem
          });
          if (uid2) {
            this.moveColumns(newIndex, this.parent.getColumnByUid(uid2));
          } else {
            var headers = this.getHeaderCells();
            var oldIdx = getElementIndex(this.element, headers);
            var columns = this.getColumnsModel(this.parent.columns);
            this.moveColumns(newIndex, columns[parseInt(oldIdx.toString(), 10)]);
          }
        }
      }
    };
    Reorder2.prototype.isActionPrevent = function(gObj) {
      return isActionPrevent(gObj);
    };
    Reorder2.prototype.moveColumns = function(destIndex, column, reorderByColumn, preventRefresh) {
      var gObj = this.parent;
      if (this.isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.moveColumns,
          arg1: destIndex,
          arg2: column
        });
        return;
      }
      var parent = this.getColParent(column, this.parent.columns);
      var cols = parent ? parent.columns : this.parent.columns;
      var srcIdx = inArray(column, cols);
      if ((parent || this.parent.lockcolPositionCount) && !reorderByColumn && !this.parent.enableColumnVirtualization) {
        for (var i = 0; i < cols.length; i++) {
          if (cols[parseInt(i.toString(), 10)].field === column.field) {
            srcIdx = i;
            break;
          }
        }
        var col = this.parent.getColumnByUid(this.destElement.firstElementChild.getAttribute("e-mappinguid"));
        if (col) {
          for (var i = 0; i < cols.length; i++) {
            if (cols[parseInt(i.toString(), 10)].field === col.field) {
              destIndex = i;
              break;
            }
          }
        } else {
          for (var i = 0; i < cols.length; i++) {
            if (cols[parseInt(i.toString(), 10)].headerText === this.destElement.innerText.trim()) {
              destIndex = i;
            }
          }
        }
      }
      if (!gObj.allowReordering || srcIdx === destIndex || srcIdx === -1 || destIndex === -1) {
        return;
      }
      cols.splice(destIndex, 0, cols.splice(srcIdx, 1)[0]);
      var args = {
        column,
        destIndex,
        columns: cols,
        parent,
        cancel: false
      };
      gObj.notify(refreshFrozenColumns, args);
      if (args.cancel) {
        return;
      }
      if (this.parent.isFrozenGrid()) {
        if (this.parent.frozenColumns) {
          for (var i = 0; i < cols.length; i++) {
            if (cols[parseInt(i.toString(), 10)].freeze === "Left") {
              cols[parseInt(i.toString(), 10)].freeze = void 0;
            }
          }
        } else {
          if (this.parent.getFrozenLeftCount() > destIndex) {
            column.freeze = "Left";
          } else if (cols.length - this.parent.getFrozenRightColumnsCount() <= destIndex) {
            column.freeze = "Right";
          } else {
            column.freeze = column.freeze === "Fixed" ? "Fixed" : void 0;
          }
        }
      }
      gObj.getColumns(true);
      gObj.notify(columnPositionChanged, {
        fromIndex: destIndex,
        toIndex: srcIdx
      });
      if (preventRefresh !== false) {
        gObj.notify(modelChanged, {
          type: actionBegin,
          requestType: "reorder",
          fromIndex: destIndex,
          toIndex: srcIdx,
          toColumnUid: column.uid
        });
      }
      if (this.parent.isFrozenGrid()) {
        var cols_1 = this.parent.columns;
        this.idx = 0;
        this.refreshColumnIndex(cols_1);
        this.parent.notify(refreshFrozenPosition, {});
      }
    };
    Reorder2.prototype.refreshColumnIndex = function(cols) {
      for (var i = 0; i < cols.length; i++) {
        cols[parseInt(i.toString(), 10)].index = this.idx;
        this.idx++;
        if (cols[parseInt(i.toString(), 10)].columns && cols[parseInt(i.toString(), 10)].columns.length) {
          this.refreshColumnIndex(cols[parseInt(i.toString(), 10)].columns);
        }
      }
    };
    Reorder2.prototype.targetParentContainerIndex = function(srcElem, destElem) {
      var cols = this.parent.columns;
      var headers = this.getHeaderCells();
      var stackedHdrColumn = this.parent.getStackedColumns(cols);
      var stackedCols = [];
      if (stackedHdrColumn.length) {
        stackedCols = this.getAllStackedheaderParentColumns(headers);
      }
      var flatColumns = stackedHdrColumn.length && stackedCols.length ? this.getColumnsModel(stackedCols) : this.getColumnsModel(cols, true);
      var parent = this.getColParent(flatColumns[getElementIndex(srcElem, headers)], cols);
      cols = parent ? parent.columns : cols;
      return inArray(flatColumns[getElementIndex(destElem, headers)], cols);
    };
    Reorder2.prototype.getAllStackedheaderParentColumns = function(headers) {
      var stackedCols = [];
      for (var i = 0; i < headers.length; i++) {
        if (headers[parseInt(i.toString(), 10)].classList.contains("e-hide")) {
          headers.splice(i, 1);
          i--;
        } else if (headers[parseInt(i.toString(), 10)].closest("thead").firstChild === headers[parseInt(i.toString(), 10)].parentElement) {
          stackedCols.push(this.parent.getColumnByUid(headers[parseInt(i.toString(), 10)].firstElementChild.getAttribute("e-mappinguid")));
        }
      }
      return stackedCols;
    };
    Reorder2.prototype.getHeaderCells = function() {
      return [].slice.call(this.parent.element.getElementsByClassName("e-headercell"));
    };
    Reorder2.prototype.getColParent = function(column, columns) {
      var parents2 = [];
      this.findColParent(column, columns, parents2);
      return parents2[parents2.length - 1];
    };
    Reorder2.prototype.reorderSingleColumn = function(fromFName, toFName) {
      var fColumn = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(col) {
        return col.field === fromFName;
      })[0] : this.parent.getColumnByField(fromFName);
      var toColumn = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(col) {
        return col.field === toFName;
      })[0] : this.parent.getColumnByField(toFName);
      if (!isNullOrUndefined(fColumn) && (!fColumn.allowReordering || fColumn.lockColumn) || !isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn)) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          column: fColumn,
          destColumn: toColumn
        });
        return;
      }
      var column = toColumn;
      var parent = this.getColParent(column, this.parent.columns);
      var columns = parent ? parent.columns : this.parent.columns;
      var destIndex = inArray(column, columns);
      if (destIndex > -1) {
        this.moveColumns(destIndex, fColumn, true);
      }
    };
    Reorder2.prototype.reorderMultipleColumns = function(fromFNames, toFName) {
      var toIndex = this.parent.getColumnIndexByField(toFName);
      var toColumn = this.parent.getColumnByField(toFName);
      if (toIndex < 0 || !isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn)) {
        return;
      }
      for (var i = 0; i < fromFNames.length; i++) {
        var column = this.parent.getColumnByField(fromFNames[parseInt(i.toString(), 10)]);
        if (!isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
          return;
        }
      }
      for (var i = 0; i < fromFNames.length; i++) {
        var column = this.parent.getColumnByIndex(toIndex);
        var parent_1 = this.getColParent(column, this.parent.columns);
        var columns = parent_1 ? parent_1.columns : this.parent.columns;
        var destIndex = inArray(column, columns);
        if (destIndex > -1) {
          this.moveColumns(destIndex, this.parent.getColumnByField(fromFNames[parseInt(i.toString(), 10)]), true, true);
        }
        if (this.parent.getColumnIndexByField(fromFNames[i + 1]) >= destIndex) {
          toIndex++;
        }
      }
    };
    Reorder2.prototype.moveTargetColumn = function(column, toIndex) {
      if (toIndex > -1) {
        this.moveColumns(toIndex, column, true);
      }
    };
    Reorder2.prototype.reorderSingleColumnByTarget = function(fieldName, toIndex) {
      this.moveTargetColumn(this.parent.getColumnByField(fieldName), toIndex);
    };
    Reorder2.prototype.reorderMultipleColumnByTarget = function(fieldName, toIndex) {
      for (var i = 0; i < fieldName.length; i++) {
        this.reorderSingleColumnByTarget(fieldName[parseInt(i.toString(), 10)], toIndex);
      }
    };
    Reorder2.prototype.reorderColumns = function(fromFName, toFName) {
      if (typeof fromFName === "string") {
        this.reorderSingleColumn(fromFName, toFName);
        this.fromCol = fromFName;
      } else {
        this.reorderMultipleColumns(fromFName, toFName);
        this.fromCol = fromFName[0];
      }
    };
    Reorder2.prototype.reorderColumnByIndex = function(fromIndex, toIndex) {
      this.moveTargetColumn(this.parent.getColumnByIndex(fromIndex), toIndex);
    };
    Reorder2.prototype.reorderColumnByTargetIndex = function(fieldName, toIndex) {
      if (typeof fieldName === "string") {
        this.reorderSingleColumnByTarget(fieldName, toIndex);
      } else {
        this.reorderMultipleColumnByTarget(fieldName, toIndex);
      }
    };
    Reorder2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.createReorderElement();
      }
    };
    Reorder2.prototype.createReorderElement = function(e) {
      if (e && e.args && e.args.isXaxis) {
        this.setDisplay("none");
      }
      var header = this.parent.element.querySelector("." + headerContent);
      this.upArrow = header.appendChild(this.parent.createElement("div", {
        className: "e-icons e-icon-reorderuparrow e-reorderuparrow",
        attrs: {
          style: "display:none"
        }
      }));
      this.downArrow = header.appendChild(this.parent.createElement("div", {
        className: "e-icons e-icon-reorderdownarrow e-reorderdownarrow",
        attrs: {
          style: "display:none"
        }
      }));
    };
    Reorder2.prototype.onActionComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        type: actionComplete
      }));
      var target = this.fromCol && this.parent.getColumnHeaderByField(this.fromCol);
      if (target) {
        this.parent.focusModule.onClick({
          target
        }, true);
      }
    };
    Reorder2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if (this.upArrow.parentNode) {
        remove(this.upArrow);
      }
      if (this.downArrow.parentNode) {
        remove(this.downArrow);
      }
      this.parent.off(headerDrop, this.headerDrop);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(reorderComplete, this.onActionComplete);
      this.parent.off(columnDrag, this.drag);
      this.parent.off(columnDragStart, this.dragStart);
      this.parent.off(columnDragStop, this.dragStop);
      this.parent.off(headerRefreshed, this.createReorderElement);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(destroy, this.destroy);
    };
    Reorder2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "leftArrow") {
          e.action = "ctrlLeftArrow";
        } else if (e.action === "rightArrow") {
          e.action = "ctrlRightArrow";
        }
      }
      switch (e.action) {
        case "ctrlLeftArrow":
        case "ctrlRightArrow":
          var element = gObj.focusModule.currentInfo.element;
          if (element && element.classList.contains("e-headercell")) {
            var column = gObj.getColumnByUid(element.firstElementChild.getAttribute("e-mappinguid"));
            var visibleCols = gObj.getVisibleColumns();
            var index = visibleCols.indexOf(column);
            var toCol = e.action === "ctrlLeftArrow" ? visibleCols[index - 1] : visibleCols[index + 1];
            if (toCol && toCol.field && column.field) {
              this.reorderColumns(column.field, toCol.field);
            }
          }
          break;
      }
    };
    Reorder2.prototype.drag = function(e) {
      var gObj = this.parent;
      var target = e.target;
      var closest2 = closest(target, ".e-headercell:not(.e-stackedHeaderCell)");
      var cloneElement = gObj.element.querySelector(".e-cloneproperties");
      var content2 = gObj.getContent().firstElementChild;
      var isLeft = this.x > getPosition(e.event).x + content2.scrollLeft;
      removeClass([].slice.call(gObj.getHeaderTable().getElementsByClassName("e-reorderindicate")), ["e-reorderindicate"]);
      this.setDisplay("none");
      this.stopTimer();
      classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur"]);
      this.updateScrollPostion(e.event);
      if (closest2 && !closest2.isEqualNode(this.element)) {
        target = closest2;
        var uid2 = target.querySelector(".e-headercelldiv, .e-stackedheadercelldiv").getAttribute("e-mappinguid");
        if (!(!this.chkDropPosition(this.element, target) || !this.chkDropAllCols(this.element, target)) && gObj.getColumnByUid(uid2).allowReordering && e.column.allowReordering) {
          this.updateArrowPosition(target, isLeft);
          classList(target, ["e-allowDrop", "e-reorderindicate"], []);
        } else if (!(gObj.allowGrouping && parentsUntil(e.target, "e-groupdroparea"))) {
          classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
        }
      } else {
        if (closest2 && closest2.isEqualNode(this.element) && !(gObj.allowGrouping && e.column.allowGrouping || e.column.allowReordering)) {
          classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
        } else if (!closest2 && !(gObj.allowGrouping && parentsUntil(e.target, "e-groupdroparea"))) {
          classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
        }
      }
      if (!e.column.allowReordering || e.column.lockColumn) {
        return;
      }
      gObj.trigger(columnDrag, {
        target,
        draggableType: "headercell",
        column: e.column
      });
    };
    Reorder2.prototype.updateScrollPostion = function(e) {
      var _this = this;
      var x = getPosition(e).x;
      var cliRect = this.parent.element.getBoundingClientRect();
      var cliRectBaseRight = cliRect.right;
      var cliRectBaseLeft = cliRect.left;
      var scrollElem = this.parent.getContent().firstElementChild;
      if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {
        this.timer = window.setInterval(function() {
          _this.setScrollLeft(scrollElem, true);
        }, 50);
      } else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {
        this.timer = window.setInterval(function() {
          _this.setScrollLeft(scrollElem, false);
        }, 50);
      }
    };
    Reorder2.prototype.setScrollLeft = function(scrollElem, isLeft) {
      var scrollLeft = scrollElem.scrollLeft;
      scrollElem.scrollLeft = scrollElem.scrollLeft + (isLeft ? -5 : 5);
      if (scrollLeft !== scrollElem.scrollLeft) {
        this.setDisplay("none");
      }
    };
    Reorder2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    Reorder2.prototype.updateArrowPosition = function(target, isLeft) {
      var cliRect = target.getBoundingClientRect();
      var cliRectBase = this.parent.element.getBoundingClientRect();
      if (isLeft && cliRect.left < cliRectBase.left || !isLeft && cliRect.right > cliRectBase.right) {
        return;
      }
      var isSticky = this.parent.getHeaderContent().classList.contains("e-sticky");
      this.upArrow.style.top = isSticky ? cliRect.top + cliRect.height + "px" : cliRect.top + cliRect.height - cliRectBase.top + "px";
      this.downArrow.style.top = isSticky ? cliRect.top - 7 + "px" : cliRect.top - cliRectBase.top - 7 + "px";
      this.upArrow.style.left = this.downArrow.style.left = isSticky ? (isLeft ? cliRect.left : cliRect.right) - 4 + "px" : (isLeft ? cliRect.left : cliRect.right) - cliRectBase.left - 4 + "px";
      this.setDisplay("");
    };
    Reorder2.prototype.dragStart = function(e) {
      var gObj = this.parent;
      var target = e.target;
      this.element = target.classList.contains("e-headercell") ? target : parentsUntil(target, "e-headercell");
      if (!e.column.allowReordering || e.column.lockColumn) {
        return;
      }
      var content2 = gObj.getContent().firstElementChild;
      this.x = getPosition(e.event).x + content2.scrollLeft;
      gObj.trigger(columnDragStart, {
        target,
        draggableType: "headercell",
        column: e.column
      });
    };
    Reorder2.prototype.dragStop = function(e) {
      var gObj = this.parent;
      this.setDisplay("none");
      this.stopTimer();
      if (!e.cancel) {
        gObj.trigger(columnDrop, {
          target: e.target,
          draggableType: "headercell",
          column: e.column
        });
      }
      removeClass([].slice.call(gObj.getHeaderTable().getElementsByClassName("e-reorderindicate")), ["e-reorderindicate"]);
    };
    Reorder2.prototype.setDisplay = function(display) {
      this.upArrow.style.display = display;
      this.downArrow.style.display = display;
    };
    Reorder2.prototype.getModuleName = function() {
      return "reorder";
    };
    return Reorder2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/row-reorder.js
var RowDD = (
  /** @class */
  function() {
    function RowDD2(parent) {
      var _this = this;
      this.selectedRows = [];
      this.isOverflowBorder = true;
      this.selectedRowColls = [];
      this.isRefresh = true;
      this.isReplaceDragEle = true;
      this.istargetGrid = false;
      this.helper = function(e) {
        var gObj = _this.parent;
        var target = _this.draggable.currentStateTarget;
        if (!isNullOrUndefined(target) && gObj.rowDropSettings.targetID && !isNullOrUndefined(target.classList) && !target.classList.contains("e-rowcell")) {
          target = parentsUntil(target, "e-rowcell");
        }
        var visualElement = _this.parent.createElement("div", {
          className: "e-cloneproperties e-draganddrop e-grid e-dragclone",
          styles: 'height:"auto", z-index:2, width:' + gObj.element.offsetWidth
        });
        var table2 = _this.parent.createElement("table", {
          styles: "width:" + gObj.element.offsetWidth,
          attrs: {
            role: "grid"
          }
        });
        var tbody2 = _this.parent.createElement(tbody, {
          attrs: {
            role: "rowgroup"
          }
        });
        if (document.getElementsByClassName("e-griddragarea").length || gObj.rowDropSettings.targetID && (!isNullOrUndefined(target) && !target.classList.contains("e-selectionbackground") && gObj.selectionSettings.type !== "Single" || !parentsUntil(target, "e-rowcell")) || !gObj.rowDropSettings.targetID && !parentsUntil(target, "e-rowdragdrop")) {
          return false;
        }
        if (gObj.rowDropSettings.targetID && gObj.selectionSettings.mode === "Row" && gObj.selectionSettings.type === "Single") {
          gObj.selectRow(parseInt(_this.draggable.currentStateTarget.parentElement.getAttribute(dataRowIndex), 10));
        }
        _this.startedRow = closest(target, "tr").cloneNode(true);
        if (_this.parent.isFrozenGrid()) {
          var nodes = [].slice.call(_this.startedRow.querySelectorAll(".e-rowcell"));
          for (var i = 0; i < nodes.length; i++) {
            removeClass([nodes[parseInt(i.toString(), 10)]], ["e-leftfreeze", "e-freezeleftborder", "e-fixedfreeze", "e-freezerightborder", "e-rightfreeze", "e-unfreeze"]);
            nodes[parseInt(i.toString(), 10)].removeAttribute("style");
          }
        }
        _this.processArgs(target);
        var args = {
          selectedRow: _this.rows,
          dragelement: target,
          cloneElement: visualElement,
          cancel: false,
          data: _this.rowData
        };
        var selectedRows = gObj.getSelectedRows();
        gObj.trigger(rowDragStartHelper, args);
        var cancel = "cancel";
        if (args["" + cancel]) {
          return false;
        }
        removeElement(_this.startedRow, ".e-indentcell");
        removeElement(_this.startedRow, ".e-detailrowcollapse");
        removeElement(_this.startedRow, ".e-detailrowexpand");
        if (!(gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache)) {
          _this.removeCell(_this.startedRow, gridChkBox);
        }
        var exp = new RegExp("e-active", "g");
        _this.startedRow.innerHTML = _this.startedRow.innerHTML.replace(exp, "");
        tbody2.appendChild(_this.startedRow);
        if (gObj.getSelectedRowIndexes().length > 1 && _this.startedRow.hasAttribute("aria-selected")) {
          var dropCountEle = _this.parent.createElement("span", {
            className: "e-dropitemscount",
            innerHTML: "" + selectedRows.length
          });
          visualElement.appendChild(dropCountEle);
        }
        var ele = closest(target, "tr").querySelector(".e-icon-rowdragicon");
        if (ele) {
          ele.classList.add("e-dragstartrow");
        }
        table2.appendChild(tbody2);
        visualElement.appendChild(table2);
        gObj.element.appendChild(visualElement);
        return visualElement;
      };
      this.dragStart = function(e) {
        var gObj = _this.parent;
        if ((gObj.enableVirtualization || gObj.infiniteScrollSettings.enableCache) && gObj.allowGrouping && gObj.groupSettings.columns.length && !isNullOrUndefined(e.target.closest("tr"))) {
          var dragTrs = e.dragElement.querySelectorAll("tr");
          var indentCells = e.target.closest("tr").querySelectorAll(".e-indentcell");
          for (var i = 0; i < dragTrs.length; i++) {
            for (var j = 0; j < indentCells.length; j++) {
              var cloneIndentCell = indentCells[parseInt(j.toString(), 10)].cloneNode(true);
              dragTrs[parseInt(i.toString(), 10)].insertBefore(cloneIndentCell, dragTrs[parseInt(i.toString(), 10)].firstElementChild);
            }
          }
        }
        if (gObj.element.classList.contains("e-childgrid")) {
          var parentGrid = _this.getParentGrid(gObj.element);
          parentGrid.appendChild(e.dragElement);
          gObj.element.appendChild(gObj.createElement("div", {
            className: "e-drag-ref"
          }));
        }
        document.body.classList.add("e-prevent-select");
        if (document.getElementsByClassName("e-griddragarea").length) {
          return;
        }
        var target = e.target;
        var spanCssEle = _this.parent.element.querySelector(".e-dropitemscount");
        if (_this.parent.getSelectedRecords().length > 1 && spanCssEle) {
          spanCssEle.style.left = _this.parent.element.querySelector(".e-cloneproperties table").offsetWidth - 5 + "px";
        }
        _this.processArgs(target);
        gObj.trigger(rowDragStart, {
          rows: _this.rows,
          target: e.target,
          draggableType: "rows",
          fromIndex: parseInt(_this.rows[0].getAttribute(dataRowIndex), 10),
          data: _this.rowData[0] && Object.keys(_this.rowData[0]).length > 0 ? _this.rowData : _this.currentViewData()
        });
        _this.dragStartData = _this.rowData;
        var dropElem = document.getElementById(gObj.rowDropSettings.targetID);
        if (gObj.rowDropSettings.targetID && dropElem && dropElem.ej2_instances && dropElem.ej2_instances[0].getModuleName() === "grid") {
          dropElem.ej2_instances[0].getContent().classList.add("e-allowRowDrop");
        }
      };
      this.drag = function(e) {
        var gObj = _this.parent;
        _this.isDropGrid = _this.parent;
        _this.istargetGrid = false;
        if (_this.parent.rowDropSettings.targetID) {
          var dropElement = document.getElementById(gObj.rowDropSettings.targetID);
          _this.isDropGrid = dropElement.ej2_instances[0];
          if (parentsUntil(e.target, "e-grid")) {
            _this.istargetGrid = _this.parent.rowDropSettings.targetID === parentsUntil(e.target, "e-grid").id;
          }
        }
        var cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
        if (gObj.element.classList.contains("e-childgrid")) {
          var parentGrid = _this.getParentGrid(gObj.element);
          cloneElement = parentGrid.querySelector(".e-cloneproperties");
        }
        var target = _this.getElementFromPosition(cloneElement, e.event);
        classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur", "e-movecur", "e-grabcur"]);
        _this.isOverflowBorder = true;
        _this.hoverState = gObj.enableHover;
        var trElement = parentsUntil(target, "e-grid") ? closest(e.target, "tr") : null;
        if (!e.target) {
          return;
        }
        _this.processArgs(target);
        var args = {
          rows: _this.rows,
          target,
          draggableType: "rows",
          data: _this.rowData,
          originalEvent: e,
          cancel: false
        };
        gObj.trigger(rowDrag, args);
        _this.stopTimer();
        if (args.cancel) {
          return;
        }
        gObj.element.classList.add("e-rowdrag");
        if (trElement && (parentsUntil(target, "e-grid").id === cloneElement.parentElement.id || parentsUntil(target, "e-grid").id)) {
          if (_this.isDropGrid.element.querySelector(".e-emptyrow")) {
            _this.dragTarget = 0;
          } else {
            _this.dragTarget = parseInt(trElement.getAttribute("data-rowindex"), 10);
          }
        } else {
          _this.dragTarget = parseInt(_this.startedRow.getAttribute("data-rowindex"), 10);
        }
        if (gObj.rowDropSettings.targetID) {
          var dragParentElement = document.querySelector(".e-drag-ref");
          if (!parentsUntil(target, "e-grid") || dragParentElement && parentsUntil(dragParentElement.parentElement, "e-grid").id === parentsUntil(target, "e-grid").id || parentsUntil(cloneElement.parentElement, "e-grid").id === parentsUntil(target, "e-grid").id) {
            classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
          } else {
            classList(cloneElement, ["e-grabcur"], ["e-notallowedcur"]);
          }
        } else {
          var element = parentsUntil(target, "e-grid");
          if (element && element.id === cloneElement.parentElement.id && parentsUntil(target, "e-row") && !parentsUntil(target, "e-addedrow")) {
            classList(cloneElement, ["e-movecur"], ["e-defaultcur"]);
          } else {
            classList(cloneElement, ["e-notallowedcur"], ["e-movecur"]);
          }
        }
        if (parentsUntil(_this.isDropGrid.element, "e-grid")) {
          if ((!_this.isDropGrid.groupSettings.columns.length || _this.isDropGrid.groupSettings.columns.length) && !_this.isDropGrid.element.querySelector(".e-emptyrow")) {
            if (parentsUntil(target, "e-grid") && parentsUntil(target, "e-grid").id === _this.isDropGrid.element.id) {
              _this.updateScrollPostion(e.event);
            }
            if ((_this.isOverflowBorder || _this.parent.frozenRows > _this.dragTarget) && (parseInt(_this.startedRow.getAttribute(dataRowIndex), 10) !== _this.dragTarget || _this.istargetGrid) || _this.istargetGrid && trElement && _this.isDropGrid.getRowByIndex(_this.isDropGrid.getCurrentViewRecords().length - 1).getAttribute("data-uid") === trElement.getAttribute("data-uid")) {
              _this.moveDragRows(e, _this.startedRow, trElement);
            } else {
              var islastRowIndex = void 0;
              if (_this.parent.enableVirtualization) {
                islastRowIndex = trElement && parseInt(trElement.getAttribute(dataRowIndex), 10) === _this.parent.renderModule.data.dataManager.dataSource.json.length - 1;
              } else {
                var rowIndex = _this.parent.enableInfiniteScrolling && _this.parent.infiniteScrollSettings.enableCache && !_this.parent.groupSettings.enableLazyLoading ? _this.parent.pageSettings.currentPage * _this.parent.pageSettings.pageSize - 1 : _this.parent.getCurrentViewRecords().length - 1;
                var lastRow = _this.parent.getRowByIndex(rowIndex);
                islastRowIndex = trElement && lastRow && lastRow.getAttribute("data-uid") === trElement.getAttribute("data-uid") && lastRow.getAttribute("data-uid") !== _this.startedRow.getAttribute("data-uid");
                if (_this.isNewRowAdded() && _this.parent.editSettings.newRowPosition === "Bottom") {
                  islastRowIndex = false;
                }
              }
              if (islastRowIndex && !_this.parent.rowDropSettings.targetID) {
                var bottomborder = _this.parent.createElement("div", {
                  className: "e-lastrow-dragborder"
                });
                var gridcontentEle = _this.parent.getContent();
                bottomborder.style.width = _this.parent.element.offsetWidth - _this.getScrollWidth() + "px";
                if (_this.parent.enableVirtualization) {
                  bottomborder.style.zIndex = "1";
                }
                if (!gridcontentEle.getElementsByClassName("e-lastrow-dragborder").length && (!(gObj.allowGrouping && gObj.groupSettings.columns.length) || isNullOrUndefined(trElement.nextSibling))) {
                  gridcontentEle.classList.add("e-grid-relative");
                  gridcontentEle.appendChild(bottomborder);
                  bottomborder.style.bottom = _this.getScrollWidth() + "px";
                }
              }
              _this.removeBorder(trElement);
            }
          }
          if (target && target.classList.contains(content) && !_this.isDropGrid.element.querySelector(".e-emptyrow") && _this.istargetGrid) {
            _this.removeBorder(trElement);
            var rowIndex = _this.isDropGrid.getCurrentViewRecords().length - 1;
            var selector = ".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse";
            var groupSelector = ".e-rowcell:not(.e-hide),.e-rowdragdrop:not(.e-hide),.e-detailrowcollapse:not(.e-hide)";
            var rowElement = [];
            if (_this.parent.allowGrouping && _this.parent.groupSettings.columns && _this.parent.groupSettings.columns.length) {
              rowElement = [].slice.call(_this.isDropGrid.getRowByIndex(rowIndex).querySelectorAll(groupSelector));
            } else {
              rowElement = [].slice.call(_this.isDropGrid.getRowByIndex(rowIndex).querySelectorAll(selector));
            }
            if (rowElement.length > 0) {
              if (_this.parent.allowGrouping && _this.parent.groupSettings.columns && _this.parent.groupSettings.columns.length) {
                _this.groupRowDDIndicator(rowElement, true);
              } else {
                addRemoveActiveClasses(rowElement, true, "e-dragborder");
              }
            }
          }
        }
      };
      this.dragStop = function(e) {
        if (_this.parent.isCheckBoxSelection && _this.parent.enableInfiniteScrolling) {
          window.getSelection().removeAllRanges();
        }
        document.body.classList.remove("e-prevent-select");
        if (isActionPrevent(_this.parent)) {
          _this.parent.notify(preventBatch, {
            instance: _this,
            handler: _this.processDragStop,
            arg1: e
          });
        } else {
          _this.processDragStop(e);
        }
      };
      this.processDragStop = function(e) {
        var gObj = _this.parent;
        if (_this.parent.isDestroyed) {
          return;
        }
        var targetEle = _this.getElementFromPosition(e.helper, e.event);
        var target = targetEle && !targetEle.classList.contains("e-dlg-overlay") ? targetEle : e.target;
        gObj.element.classList.remove("e-rowdrag");
        var dropElement = document.getElementById(gObj.rowDropSettings.targetID);
        if (gObj.rowDropSettings.targetID && dropElement && dropElement.ej2_instances && dropElement.ej2_instances[0].getModuleName() === "grid") {
          dropElement.ej2_instances[0].getContent().classList.remove("e-allowRowDrop");
        }
        if (parentsUntil(_this.isDropGrid.element, "e-grid")) {
          _this.stopTimer();
          _this.isDropGrid.enableHover = _this.hoverState;
          _this.isDropGrid.getContent().classList.remove("e-grid-relative");
          _this.removeBorder(targetEle);
          var stRow = _this.isDropGrid.element.querySelector(".e-dragstartrow");
          if (stRow) {
            stRow.classList.remove("e-dragstartrow");
          }
        }
        _this.processArgs(target);
        var args = {
          target,
          draggableType: "rows",
          cancel: false,
          fromIndex: parseInt(_this.rows[0].getAttribute(dataRowIndex), 10),
          dropIndex: _this.dragTarget,
          rows: _this.rows,
          data: Object.keys(_this.dragStartData[0]).length > 0 ? _this.dragStartData : _this.currentViewData()
        };
        gObj.trigger(rowDrop, args, function() {
          if (!(parentsUntil(target, row) || parentsUntil(target, "e-emptyrow") || parentsUntil(target, gridContent)) || args.cancel) {
            _this.dragTarget = null;
            remove(e.helper);
            return;
          }
          _this.isRefresh = false;
          var selectedIndexes = _this.parent.getSelectedRowIndexes();
          if (gObj.isRowDragable()) {
            if (!_this.parent.rowDropSettings.targetID && _this.startedRow.querySelector("td.e-selectionbackground") && selectedIndexes.length > 1 && selectedIndexes.length !== _this.parent.getCurrentViewRecords().length) {
              _this.reorderRows(selectedIndexes, args.dropIndex);
            } else {
              _this.reorderRows([parseInt(_this.startedRow.getAttribute(dataRowIndex), 10)], _this.dragTarget);
            }
            _this.dragTarget = null;
            if (!gObj.rowDropSettings.targetID) {
              if (e.helper.classList.contains("e-cloneproperties") && document.querySelector("." + e.helper.classList[0])) {
                remove(e.helper);
              }
              if (gObj.enableVirtualization && (!_this.parent.allowGrouping || !gObj.groupSettings.columns.length)) {
                gObj.refresh();
              } else {
                _this.rowOrder(args);
              }
            }
            if (_this.parent.getContentTable().scrollHeight < _this.parent.getContent().clientHeight) {
              _this.parent.scrollModule.setLastRowCell();
            }
          }
          _this.isRefresh = true;
        });
      };
      this.removeCell = function(targetRow, className) {
        return [].slice.call(targetRow.querySelectorAll("td")).filter(function(cell) {
          if (cell.classList.contains(className)) {
            targetRow.deleteCell(cell.cellIndex);
          }
        });
      };
      this.parent = parent;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.initializeDrag, this);
      this.parent.on(columnDrop, this.columnDrop, this);
      this.parent.on(rowDragAndDropComplete, this.onActionComplete, this);
      this.onDataBoundFn = this.onDataBound.bind(this);
      this.parent.addEventListener(dataBound, this.onDataBoundFn);
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(destroy, this.destroy, this);
    }
    RowDD2.prototype.getParentGrid = function(childGrid) {
      var parentGrid = childGrid;
      var parentGridObtained = false;
      while (!parentGridObtained) {
        if (parentGrid.ej2_instances[0].parentDetails) {
          parentGrid = document.getElementById(parentGrid.ej2_instances[0].parentDetails.parentID);
        }
        if (!parentGrid.classList.contains("e-childgrid")) {
          parentGridObtained = true;
        }
      }
      return parentGrid;
    };
    RowDD2.prototype.isNewRowAdded = function() {
      return this.parent.editSettings && this.parent.editSettings.showAddNewRow && !(this.parent.enableInfiniteScrolling || this.parent.enableVirtualization);
    };
    RowDD2.prototype.groupRowDDIndicator = function(rowElement, isAdd) {
      addRemoveActiveClasses([rowElement[0]], isAdd, "e-dragleft");
      addRemoveActiveClasses(rowElement, isAdd, "e-dragtop", "e-dragbottom");
      addRemoveActiveClasses([rowElement[rowElement.length - 1]], isAdd, "e-dragright");
    };
    RowDD2.prototype.refreshRow = function(args, tbody2, target) {
      var gObj = this.parent;
      var tbodyContent = gObj.getContentTable().querySelector(tbody);
      var tbodyHeader = gObj.getHeaderTable().querySelector(tbody);
      for (var i = 0, len = args.rows.length; i < len; i++) {
        var row2 = args.rows[parseInt(i.toString(), 10)];
        if ((gObj.enableVirtualization && gObj.allowGrouping && gObj.groupSettings.columns.length || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) && args.rows.length === 1) {
          var removeElem = gObj.getRowElementByUID(row2.getAttribute("data-uid"));
          if (!isNullOrUndefined(removeElem)) {
            remove(removeElem);
          }
        }
        var dragstartrow = row2.querySelector(".e-dragstartrow");
        if (dragstartrow) {
          dragstartrow.classList.remove("e-dragstartrow");
        }
        tbody2.insertBefore(row2, target);
        if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
          var dragRowUid = row2.getAttribute("data-uid");
          var dropRowUid = args.target.parentElement.getAttribute("data-uid");
          var dragRowObject = gObj.getRowObjectFromUID(dragRowUid);
          var dropRowObject = gObj.getRowObjectFromUID(dropRowUid);
          if (dragRowObject.parentUid !== dropRowObject.parentUid) {
            gObj["groupModule"].groupReorderHandler(dragRowObject, dropRowObject);
          }
        }
      }
      var tr = [].slice.call(gObj.editSettings.showAddNewRow ? tbody2.querySelectorAll(".e-row:not(.e-addedrow)") : tbody2.getElementsByClassName(row));
      if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
        if (gObj.groupSettings.enableLazyLoading || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache && tr.length > gObj.pageSettings.pageSize * 3) {
          gObj.refresh();
        } else {
          groupReorderRowObject(this.parent, args, tr);
          if (gObj.enableVirtualization || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
            resetCachedRowIndex(gObj);
          } else {
            resetRowIndex(this.parent, gObj.getRowsObject().filter(function(data) {
              return data.isDataRow;
            }), tr);
          }
          this.parent.notify(refreshExpandandCollapse, {
            rows: gObj.enableVirtualization ? this.parent.vRows : this.parent.getRowsObject()
          });
        }
      } else if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache && !gObj.groupSettings.columns.length) {
        if (tr.length > gObj.pageSettings.pageSize * 3) {
          gObj.refresh();
        } else {
          groupReorderRowObject(this.parent, args, tr);
          resetCachedRowIndex(gObj);
        }
      } else {
        this.refreshData(tr);
      }
      if (this.parent.frozenRows) {
        for (var i = 0, len = tr.length; i < len; i++) {
          if (i < this.parent.frozenRows) {
            tbodyHeader.appendChild(tr[parseInt(i.toString(), 10)]);
          } else {
            tbodyContent.appendChild(tr[parseInt(i.toString(), 10)]);
          }
        }
      }
    };
    RowDD2.prototype.updateFrozenRowreOrder = function(args) {
      var gObj = this.parent;
      var tbodyC = gObj.getContentTable().querySelector(tbody);
      var tbodyH = gObj.getHeaderTable().querySelector(tbody);
      var tr = [].slice.call(tbodyH.getElementsByClassName(row)).concat([].slice.call(tbodyC.getElementsByClassName(row)));
      var tbody2 = gObj.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      this.parent.clearSelection();
      var targetRow = this.refreshRowTarget(args);
      for (var i = 0, len = tr.length; i < len; i++) {
        tbody2.appendChild(tr[parseInt(i.toString(), 10)]);
      }
      this.refreshRow(args, tbody2, targetRow);
    };
    RowDD2.prototype.refreshRowTarget = function(args) {
      var gObj = this.parent;
      var targetIdx = parseInt(args.target.parentElement.getAttribute(dataRowIndex), 10);
      if (gObj.enableVirtualization && gObj.allowGrouping && gObj.groupSettings.columns.length) {
        targetIdx = this.parent.getDataRows().indexOf(args.target.parentElement);
      }
      if ((args.fromIndex < args.dropIndex || args.fromIndex === args.dropIndex) && (!gObj.allowGrouping || !gObj.groupSettings.columns.length)) {
        targetIdx = targetIdx + 1;
      }
      var targetTR = gObj.getRowByIndex(targetIdx);
      if (targetIdx === gObj.getRows().length && this.isNewRowAdded() && this.parent.editSettings.newRowPosition === "Bottom") {
        targetTR = this.parent.element.querySelector(".e-row.e-addedrow");
      }
      var tr = gObj.allowGrouping && gObj.groupSettings.columns.length && targetIdx !== -1 && args.fromIndex < args.dropIndex && targetTR ? targetTR.nextSibling : targetTR;
      return tr;
    };
    RowDD2.prototype.updateFrozenColumnreOrder = function(args) {
      var gObj = this.parent;
      var tbody2 = gObj.getContentTable().querySelector(tbody);
      this.parent.clearSelection();
      var targetRow = this.refreshRowTarget(args);
      this.refreshRow(args, tbody2, targetRow);
    };
    RowDD2.prototype.refreshData = function(tr) {
      var rowObj = {};
      var recordobj = {};
      var rowObjects = this.parent.getRowsObject();
      var currentViewData = this.parent.getCurrentViewRecords();
      for (var i = 0, len = tr.length; i < len; i++) {
        var index = parseInt(tr[parseInt(i.toString(), 10)].getAttribute(dataRowIndex), 10);
        rowObj[parseInt(i.toString(), 10)] = rowObjects[parseInt(index.toString(), 10)];
        recordobj[parseInt(i.toString(), 10)] = currentViewData[parseInt(index.toString(), 10)];
      }
      var rows = this.parent.getRows();
      for (var i = 0, len = tr.length; i < len; i++) {
        rows[parseInt(i.toString(), 10)] = tr[parseInt(i.toString(), 10)];
        rowObjects[parseInt(i.toString(), 10)] = rowObj[parseInt(i.toString(), 10)];
        currentViewData[parseInt(i.toString(), 10)] = recordobj[parseInt(i.toString(), 10)];
      }
      resetRowIndex(this.parent, rowObjects, tr);
    };
    RowDD2.prototype.rowOrder = function(args) {
      if (args.dropIndex === args.fromIndex || isNaN(args.dropIndex)) {
        return;
      }
      if (this.parent.isDetail()) {
        this.parent.detailCollapseAll();
        var rows = [].slice.call(this.parent.getContentTable().querySelector(tbody).children);
        var rowObjects = this.parent.getRowsObject();
        rows.filter(function(row2) {
          if (row2.classList.contains("e-detailrow")) {
            row2.remove();
          }
        });
        for (var i = 0, len = rowObjects.length; i < len; i++) {
          if (!rowObjects[parseInt(i.toString(), 10)]) {
            break;
          }
          if (rowObjects[parseInt(i.toString(), 10)].isDetailRow) {
            this.parent.getRowsObject().splice(i, 1);
            i--;
          }
        }
      }
      if (args.target.classList.contains("e-rowcelldrag") || args.target.classList.contains("e-dtdiagonalright") || args.target.classList.contains("e-dtdiagonaldown")) {
        args.target = args.target.parentElement;
      }
      if (!args.target.classList.contains("e-rowcell") && parentsUntil(args.target, "e-rowcell")) {
        args.target = parentsUntil(args.target, "e-rowcell");
      }
      if (this.parent.frozenRows) {
        this.updateFrozenRowreOrder(args);
      } else {
        this.updateFrozenColumnreOrder(args);
      }
      if ((!this.parent.allowGrouping || !this.parent.groupSettings.columns.length) && this.selectedRowColls.length > 0) {
        this.parent.selectRows(this.selectedRowColls);
        var indexes = [];
        if (this.parent.filterSettings.columns.length || this.parent.sortSettings.columns.length) {
          for (var i = 0, len = args.rows.length; i < len; i++) {
            indexes.push(parseInt(args.rows[parseInt(i.toString(), 10)].getAttribute(dataRowIndex), 10));
          }
          this.selectedRowColls = indexes;
        }
        this.selectedRowColls = [];
      } else {
        this.selectedRowColls = [];
      }
    };
    RowDD2.prototype.currentViewData = function() {
      var selectedIndexes = this.parent.getSelectedRowIndexes();
      var currentVdata = [];
      var fromIdx = parseInt(this.startedRow.getAttribute(dataRowIndex), 10);
      for (var i = 0, n = selectedIndexes.length; i < n; i++) {
        var currentV = "currentViewData";
        currentVdata[parseInt(i.toString(), 10)] = this.parent["" + currentV][selectedIndexes[parseInt(i.toString(), 10)]];
      }
      if (!this.parent.rowDropSettings.targetID && selectedIndexes.length === 0) {
        currentVdata[0] = this.parent.currentViewData[parseInt(fromIdx.toString(), 10)];
      }
      return currentVdata;
    };
    RowDD2.prototype.saveChange = function(changeRecords, query) {
      var _this = this;
      this.parent.getDataModule().saveChanges(changeRecords, this.parent.getPrimaryKeyFieldNames()[0], {}, query).then(function() {
        _this.parent.notify(modelChanged, {
          type: actionBegin,
          requestType: "rowdraganddrop"
        });
      }).catch(function(e) {
        var error = "error";
        var message = "message";
        if (!isNullOrUndefined(e["" + error]) && !isNullOrUndefined(e["" + error]["" + message])) {
          e["" + error] = e["" + error]["" + message];
        }
        _this.parent.trigger(actionFailure, e);
      });
    };
    RowDD2.prototype.reorderRows = function(fromIndexes, toIndex) {
      var selectedIndexes = this.parent.getSelectedRowIndexes();
      var selectedRecords = [];
      var draggedRecords = [];
      var currentViewData = this.parent.getDataModule().isRemote() ? this.parent.getCurrentViewRecords() : this.parent.renderModule.data.dataManager.dataSource.json;
      var skip = this.parent.allowPaging ? this.parent.pageSettings.currentPage * this.parent.pageSettings.pageSize - this.parent.pageSettings.pageSize : 0;
      var dropIdx = toIndex + skip;
      var actualIdx = fromIndexes[0] + skip;
      for (var i = 0, len = fromIndexes.length; i < len; i++) {
        draggedRecords[parseInt(i.toString(), 10)] = currentViewData[fromIndexes[parseInt(i.toString(), 10)] + skip];
      }
      for (var i = 0, len = selectedIndexes.length; i < len; i++) {
        selectedRecords[parseInt(i.toString(), 10)] = currentViewData[selectedIndexes[parseInt(i.toString(), 10)] + skip];
      }
      for (var i = 0, len = draggedRecords.length; i < len; i++) {
        if (i !== 0) {
          for (var j = 0, len1 = currentViewData.length; j < len1; j++) {
            if (JSON.stringify(currentViewData[parseInt(j.toString(), 10)]) === JSON.stringify(draggedRecords[parseInt(i.toString(), 10)])) {
              actualIdx = j;
              break;
            }
          }
          for (var j = 0, len1 = currentViewData.length; j < len1; j++) {
            if (JSON.stringify(currentViewData[parseInt(j.toString(), 10)]) === JSON.stringify(draggedRecords[i - 1])) {
              if (actualIdx > j) {
                dropIdx = j + 1;
              }
              break;
            }
          }
        }
        this.reorderRow(actualIdx - skip, dropIdx - skip);
      }
      if (this.isRefresh) {
        this.parent.notify(modelChanged, {
          type: actionBegin,
          requestType: "rowdraganddrop"
        });
      }
      for (var i = 0, len = selectedRecords.length; i < len; i++) {
        for (var j = 0, len1 = currentViewData.length; j < len1; j++) {
          if (JSON.stringify(currentViewData[parseInt(j.toString(), 10)]) === JSON.stringify(selectedRecords[parseInt(i.toString(), 10)])) {
            selectedIndexes[parseInt(i.toString(), 10)] = j - skip;
            break;
          }
        }
      }
      this.selectedRowColls = selectedIndexes;
    };
    RowDD2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    RowDD2.prototype.onActionComplete = function(e) {
      this.parent.trigger(actionComplete, extend(e, {
        type: actionComplete,
        requestType: "rowdraganddrop"
      }));
    };
    RowDD2.prototype.initializeDrag = function() {
      var gObj = this.parent;
      this.draggable = new Draggable(gObj.element, {
        dragTarget: ".e-rowcelldrag, .e-rowdragdrop, .e-rowcell",
        distance: 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop,
        isReplaceDragEle: this.isReplaceDragEle,
        isPreventSelect: false
      });
    };
    RowDD2.prototype.updateScrollPostion = function(e) {
      var _this = this;
      var y = getPosition(e).y;
      var cliRect = this.isDropGrid.getContent().getBoundingClientRect();
      var rowHeight2 = this.isDropGrid.getRowHeight() - 15;
      var scrollElem = this.isDropGrid.getContent().firstElementChild;
      var virtualScrollbtm = this.parent.enableVirtualization ? 20 : 0;
      if (cliRect.top >= y) {
        var scrollPixel_1 = -this.isDropGrid.getRowHeight();
        this.isOverflowBorder = false;
        this.timer = window.setInterval(function() {
          _this.setScrollDown(scrollElem, scrollPixel_1);
        }, 200);
      } else if (cliRect.top + this.isDropGrid.getContent().clientHeight - rowHeight2 - 33 - virtualScrollbtm <= y) {
        var scrollPixel_2 = this.isDropGrid.getRowHeight();
        this.isOverflowBorder = false;
        this.timer = window.setInterval(function() {
          _this.setScrollDown(scrollElem, scrollPixel_2);
        }, 200);
      }
    };
    RowDD2.prototype.setScrollDown = function(scrollElem, scrollPixel) {
      scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
    };
    RowDD2.prototype.moveDragRows = function(e, startedRow, targetRow) {
      var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
      if (this.parent.element.classList.contains("e-childgrid")) {
        var parentGrid = this.getParentGrid(this.parent.element);
        cloneElement = parentGrid.querySelector(".e-cloneproperties");
      }
      var element = closest(e.target, "tr");
      if (parentsUntil(element, "e-grid") && (!this.parent.rowDropSettings.targetID && parentsUntil(cloneElement.parentElement, "e-grid").id === parentsUntil(element, "e-grid").id || this.istargetGrid)) {
        var targetElement = element;
        if (!element) {
          targetElement = startedRow;
        }
        this.setBorder(targetElement, e.event, startedRow, targetRow);
      }
    };
    RowDD2.prototype.setBorder = function(element, event2, startedRow, targetRow) {
      var node = this.parent.element;
      if (this.istargetGrid) {
        node = this.isDropGrid.element;
      }
      var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        this.removeBorder(element);
      } else {
        this.removeFirstRowBorder(element);
        this.removeLastRowBorder(element);
      }
      if (parentsUntil(element, "e-grid") && element.classList.contains(row) && (!this.parent.rowDropSettings.targetID && parentsUntil(cloneElement.parentElement, "e-grid").id === parentsUntil(element, "e-grid").id || this.istargetGrid)) {
        if (this.parent.allowGrouping && this.parent.groupSettings.columns && this.parent.groupSettings.columns.length) {
          removeClass(node.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"), ["e-dragtop", "e-dragright", "e-dragbottom", "e-dragleft"]);
        } else {
          removeClass(node.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"), ["e-dragborder"]);
        }
        var rowElement = [];
        var targetRowIndex = parseInt(targetRow.getAttribute(dataRowIndex), 10);
        if (targetRow && targetRowIndex === 0 && !(this.isNewRowAdded() && this.parent.editSettings.newRowPosition === "Top")) {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            element = targetRow;
            rowElement = [].slice.call(element.querySelectorAll(".e-groupcaption,.e-summarycell,.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"));
          } else {
            var div = this.parent.createElement("div", {
              className: "e-firstrow-dragborder"
            });
            var gridheaderEle = this.isDropGrid.getHeaderContent();
            gridheaderEle.classList.add("e-grid-relative");
            div.style.width = node.offsetWidth - this.getScrollWidth() + "px";
            if (!gridheaderEle.getElementsByClassName("e-firstrow-dragborder").length) {
              if (this.parent.frozenRows) {
                if (this.parent.isFrozenGrid()) {
                  div.style.width = this.parent.getContent().firstElementChild.scrollWidth + "px";
                }
                gridheaderEle.querySelector("thead").appendChild(div);
                div.style.position = "relative";
              } else {
                gridheaderEle.appendChild(div);
              }
            }
          }
        } else if (this.parent.rowDropSettings.targetID && targetRow) {
          element = this.isDropGrid.getRowByIndex(targetRowIndex - 1);
          rowElement = [].slice.call(element.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"));
        } else if (targetRow && parseInt(startedRow.getAttribute(dataRowIndex), 10) > targetRowIndex) {
          if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            targetRowIndex = this.parent.getDataRows().indexOf(targetRow);
          }
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            element = targetRow;
            rowElement = [].slice.call(element.querySelectorAll(".e-groupcaption,.e-summarycell,.e-rowcell:not(.e-hide),.e-rowdragdrop:not(.e-hide),\n                        .e-detailrowcollapse:not(.e-hide)"));
          } else {
            if (targetRowIndex === 0 && this.isNewRowAdded() && this.parent.editSettings.newRowPosition === "Top") {
              element = this.parent.element.querySelector(".e-row.e-addedrow tr");
            } else {
              element = this.parent.getRowByIndex(targetRowIndex - 1);
            }
            rowElement = [].slice.call(element.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse,.e-dragindentcell"));
          }
        } else {
          rowElement = [].slice.call(element.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse"));
        }
        if (rowElement.length > 0) {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns && this.parent.groupSettings.columns.length) {
            this.groupRowDDIndicator(rowElement, true);
          } else {
            addRemoveActiveClasses(rowElement, true, "e-dragborder");
          }
        }
      }
    };
    RowDD2.prototype.getScrollWidth = function() {
      var scrollElem = this.parent.getContent().firstElementChild;
      return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;
    };
    RowDD2.prototype.removeFirstRowBorder = function(element) {
      if (this.isDropGrid.element.getElementsByClassName("e-firstrow-dragborder").length > 0 && element && (element.rowIndex !== 0 || element.classList.contains("e-columnheader"))) {
        remove(this.isDropGrid.element.getElementsByClassName("e-firstrow-dragborder")[0]);
      } else {
        var addNewRow = this.parent.element.querySelector(".e-row.e-addedrow tr");
        if (addNewRow && addNewRow.querySelector(".e-dragborder")) {
          var rowElement = [].slice.call(addNewRow.querySelectorAll(".e-rowcell,.e-rowdragdrop,.e-detailrowcollapse,.e-dragindentcell"));
          addRemoveActiveClasses(rowElement, false, "e-dragborder");
        }
      }
    };
    RowDD2.prototype.removeLastRowBorder = function(element) {
      var islastRowIndex;
      if (this.parent.enableVirtualization) {
        islastRowIndex = element && parseInt(element.getAttribute(dataRowIndex), 10) !== this.parent.renderModule.data.dataManager.dataSource.json.length - 1;
      } else {
        var rowIndex = this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache && !this.parent.groupSettings.enableLazyLoading ? this.parent.pageSettings.currentPage * this.parent.pageSettings.pageSize - 1 : this.parent.getCurrentViewRecords().length - 1;
        var lastRow = this.parent.getRowByIndex(rowIndex);
        islastRowIndex = element && lastRow && lastRow.getAttribute("data-uid") !== element.getAttribute("data-uid");
      }
      if (this.parent.element.getElementsByClassName("e-lastrow-dragborder").length > 0 && element && islastRowIndex) {
        remove(this.parent.element.getElementsByClassName("e-lastrow-dragborder")[0]);
      }
    };
    RowDD2.prototype.removeBorder = function(element) {
      this.removeFirstRowBorder(element);
      if (!this.parent.rowDropSettings.targetID) {
        this.removeLastRowBorder(element);
      }
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        element = [].slice.call(this.isDropGrid.getContentTable().querySelectorAll("tr")).filter(function(row2) {
          return row2.querySelector("td.e-dragtop.e-dragbottom");
        })[0];
      } else {
        element = this.isDropGrid.getRows().filter(function(row2) {
          return row2.querySelector("td.e-dragborder");
        })[0];
      }
      if (element) {
        var rowElement = this.parent.allowGrouping && this.parent.groupSettings.columns.length ? [].slice.call(element.querySelectorAll(".e-dragtop.e-dragbottom")) : [].slice.call(element.getElementsByClassName("e-dragborder"));
        if (this.parent.allowGrouping && this.parent.groupSettings.columns && this.parent.groupSettings.columns.length) {
          this.groupRowDDIndicator(rowElement, false);
        } else {
          addRemoveActiveClasses(rowElement, false, "e-dragborder");
        }
      }
    };
    RowDD2.prototype.getElementFromPosition = function(element, event2) {
      var position = getPosition(event2);
      element.style.display = "none";
      var target = document.elementFromPoint(position.x, position.y);
      element.style.display = "";
      return target;
    };
    RowDD2.prototype.onDataBound = function() {
      if (this.selectedRowColls.length > 0 && (this.parent.enableVirtualization || this.parent.allowRowDragAndDrop)) {
        this.parent.selectRows(this.selectedRowColls);
        this.selectedRowColls = [];
      }
    };
    RowDD2.prototype.getTargetIdx = function(targetRow) {
      return targetRow ? parseInt(targetRow.getAttribute(dataRowIndex), 10) : 0;
    };
    RowDD2.prototype.singleRowDrop = function(e) {
      var targetRow = closest(e.target, "tr");
      var srcControl = e.droppedElement.parentElement.ej2_instances[0];
      var currentIndex = targetRow ? targetRow.rowIndex : srcControl.currentViewData.length - 1;
      this.reorderRow(this.startedRowIndex, currentIndex);
    };
    RowDD2.prototype.columnDrop = function(e) {
      var gObj = this.parent;
      if (e.droppedElement.getAttribute("action") !== "grouping" && (parentsUntil(e.target, row) || parentsUntil(e.target, "e-emptyrow") || parentsUntil(e.target, gridContent))) {
        var targetRow = closest(e.target, "tr");
        var srcControl = void 0;
        var currentIndex = void 0;
        var dragParentElement = document.querySelector(".e-drag-ref");
        if (e.droppedElement.querySelector("tr").getAttribute("single-dragrow") !== "true" && (e.droppedElement.parentElement.id === gObj.element.id || dragParentElement && dragParentElement.parentElement.id === gObj.element.id) || e.droppedElement.querySelector("tr").getAttribute("single-dragrow") === "true" && e.droppedElement.parentElement.id !== gObj.element.id) {
          return;
        }
        if (e.droppedElement.parentElement.id !== gObj.element.id) {
          if (dragParentElement) {
            srcControl = dragParentElement.parentElement.ej2_instances[0];
            remove(dragParentElement);
          } else {
            srcControl = e.droppedElement.parentElement.ej2_instances[0];
          }
        } else if (this.isSingleRowDragDrop || e.droppedElement.querySelector("tr").getAttribute("single-dragrow") === "true") {
          this.singleRowDrop(e);
          return;
        }
        if (srcControl.element.id !== gObj.element.id && srcControl.rowDropSettings.targetID !== gObj.element.id) {
          return;
        }
        var records = srcControl.getSelectedRecords();
        var targetIndex = currentIndex = this.getTargetIdx(targetRow);
        if (e.target && e.target.classList.contains("e-content") && gObj.getCurrentViewRecords().length) {
          var lastrow = gObj.getContentTable().querySelector("tr:last-child");
          if (lastrow) {
            targetIndex = currentIndex = parseInt(lastrow.getAttribute(ariaRowIndex), 10);
          }
        }
        if (isNaN(targetIndex)) {
          targetIndex = currentIndex = 0;
        }
        if (gObj.allowPaging) {
          targetIndex = targetIndex + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize;
        }
        gObj.notify(rowsAdded, {
          toIndex: targetIndex,
          records
        });
        gObj.notify(modelChanged, {
          type: actionBegin,
          requestType: "rowdraganddrop"
        });
        var selectedRows = srcControl.getSelectedRowIndexes();
        var skip = srcControl.allowPaging ? srcControl.pageSettings.currentPage * srcControl.pageSettings.pageSize - srcControl.pageSettings.pageSize : 0;
        this.selectedRows = [];
        for (var i = 0, len = records.length; i < len; i++) {
          this.selectedRows.push(skip + selectedRows[parseInt(i.toString(), 10)]);
        }
        srcControl.notify(rowsRemoved, {
          indexes: this.selectedRows,
          records
        });
        if (srcControl.dataSource instanceof DataManager && srcControl.dataSource.dataSource.offline) {
          srcControl.notify(modelChanged, {
            type: actionBegin,
            requestType: "rowdraganddrop"
          });
        }
      }
    };
    RowDD2.prototype.reorderRow = function(fromIndexes, toIndex) {
      var gObj = this.parent;
      if (!gObj.sortSettings.columns.length && !gObj.groupSettings.columns.length && !gObj.filterSettings.columns.length) {
        var skip = gObj.allowPaging ? gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize : 0;
        var fromIndex = fromIndexes;
        toIndex = toIndex + skip;
        this.selectedRows = gObj.getSelectedRowIndexes();
        gObj.notify(rowPositionChanged, {
          fromIndex: fromIndexes + skip,
          toIndex
        });
      }
    };
    RowDD2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.initializeDrag();
      }
    };
    RowDD2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.draggable.destroy();
      this.parent.off(initialEnd, this.initializeDrag);
      this.parent.off(columnDrop, this.columnDrop);
      this.parent.off(rowDragAndDropComplete, this.onActionComplete);
      this.parent.removeEventListener(dataBound, this.onDataBoundFn);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(destroy, this.destroy);
    };
    RowDD2.prototype.getModuleName = function() {
      return "rowDragAndDrop";
    };
    RowDD2.prototype.processArgs = function(target) {
      var gObj = this.parent;
      var dragIdx = parseInt(this.startedRow.getAttribute(dataRowIndex), 10);
      if (gObj.getSelectedRecords().length > 0 && this.startedRow.cells[0].classList.contains("e-selectionbackground") === false || gObj.getSelectedRecords().length === 0) {
        if (gObj.enableVirtualization || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
          this.rows = [this.startedRow];
        } else {
          this.rows = [gObj.getRowByIndex(dragIdx)];
        }
        this.rowData = [gObj.getRowInfo(this.startedRow.querySelector("." + rowCell)).rowData];
        if ((gObj.enableVirtualization || gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) && gObj.allowGrouping && gObj.groupSettings.columns.length && gObj.getSelectedRows().length) {
          this.rows = gObj.getSelectedRows();
          this.rowData = gObj.getSelectedRecords();
        }
      } else {
        this.rows = gObj.getSelectedRows();
        this.rowData = gObj.getSelectedRecords();
      }
    };
    return RowDD2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/group.js
var Group = (
  /** @class */
  function() {
    function Group2(parent, groupSettings, sortedColumns, serviceLocator) {
      var _this = this;
      this.sortRequired = true;
      this.groupSortFocus = false;
      this.groupTextFocus = false;
      this.groupCancelFocus = false;
      this.isAppliedGroup = false;
      this.isAppliedUnGroup = false;
      this.isAppliedCaptionRowBorder = false;
      this.reorderingColumns = [];
      this.visualElement = createElement("div", {
        className: "e-cloneproperties e-dragclone e-gdclone",
        styles: "line-height:23px",
        attrs: {
          action: "grouping"
        }
      });
      this.helper = function(e) {
        var gObj = _this.parent;
        var target = e.sender.target;
        var element = target.classList.contains("e-groupheadercell") ? target : parentsUntil(target, "e-groupheadercell");
        if (!element || !target.classList.contains("e-drag") && _this.groupSettings.allowReordering) {
          return false;
        }
        _this.column = gObj.getColumnByField(element.firstElementChild.getAttribute("ej-mappingname"));
        _this.visualElement.textContent = element.textContent;
        _this.visualElement.style.width = element.offsetWidth + 2 + "px";
        _this.visualElement.style.height = element.offsetHeight + 2 + "px";
        _this.visualElement.setAttribute("e-mappinguid", _this.column.uid);
        gObj.element.appendChild(_this.visualElement);
        return _this.visualElement;
      };
      this.dragStart = function(e) {
        _this.parent.element.classList.add("e-ungroupdrag");
      };
      this.drag = function(e) {
        if (_this.groupSettings.allowReordering) {
          _this.animateDropper(e);
        }
        var target = e.target;
        var cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
        _this.parent.trigger(columnDrag, {
          target,
          draggableType: "headercell",
          column: _this.column
        });
        if (!_this.groupSettings.allowReordering) {
          classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur"]);
          if (!(parentsUntil(target, gridContent) || parentsUntil(target, "e-headercell"))) {
            classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
          }
        }
      };
      this.dragStop = function(e) {
        _this.parent.element.classList.remove("e-ungroupdrag");
        var preventDrop = !(parentsUntil(e.target, gridContent) || parentsUntil(e.target, "e-gridheader"));
        if (_this.groupSettings.allowReordering && preventDrop) {
          remove(e.helper);
          if (parentsUntil(e.target, "e-groupdroparea")) {
            _this.rearrangeGroup();
          } else if (!parentsUntil(e.target, "e-grid")) {
            var field = _this.parent.getColumnByUid(e.helper.getAttribute("e-mappinguid")).field;
            if (_this.groupSettings.columns.indexOf(field) !== -1) {
              _this.ungroupColumn(field);
            }
          }
          return;
        } else if (preventDrop) {
          remove(e.helper);
          return;
        }
      };
      this.animateDropper = function(e) {
        var uid2 = _this.parent.element.querySelector(".e-cloneproperties").getAttribute("e-mappinguid");
        var dragField = _this.parent.getColumnByUid(uid2).field;
        var parent2 = parentsUntil(e.target, "e-groupdroparea");
        var dropTarget = parentsUntil(e.target, "e-group-animator");
        var grouped = [].slice.call(_this.element.getElementsByClassName("e-groupheadercell")).map(function(e2) {
          return e2.querySelector("div").getAttribute("ej-mappingname");
        });
        var cols = JSON.parse(JSON.stringify(grouped));
        if (dropTarget || parent2) {
          if (dropTarget) {
            var dropField = dropTarget.querySelector("div[ej-mappingname]").getAttribute("ej-mappingname");
            var dropIndex = +dropTarget.getAttribute("index");
            if (dropField !== dragField) {
              var dragIndex = cols.indexOf(dragField);
              if (dragIndex !== -1) {
                cols.splice(dragIndex, 1);
              }
              var flag = dropIndex !== -1 && dragIndex === dropIndex;
              cols.splice(dropIndex + (flag ? 1 : 0), 0, dragField);
            }
          } else if (parent2 && cols.indexOf(dragField) === -1) {
            cols.push(dragField);
          }
          _this.element.innerHTML = "";
          if (cols.length && !_this.element.classList.contains("e-grouped")) {
            _this.element.classList.add("e-grouped");
          }
          _this.reorderingColumns = cols;
          for (var c = 0; c < cols.length; c++) {
            _this.addColToGroupDrop(cols[parseInt(c.toString(), 10)]);
          }
        } else {
          _this.addLabel();
          _this.removeColFromGroupDrop(dragField);
        }
      };
      this.drop = function(e) {
        var gObj = _this.parent;
        var column = gObj.getColumnByUid(e.droppedElement.getAttribute("e-mappinguid"));
        _this.element.classList.remove("e-hover");
        remove(e.droppedElement);
        _this.aria.setDropTarget(_this.parent.element.querySelector(".e-groupdroparea"), false);
        _this.aria.setGrabbed(_this.parent.getHeaderTable().querySelector("[aria-grabbed=true]"), false);
        if (isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), "e-grid").getAttribute("id") !== gObj.element.getAttribute("id")) {
          _this.parent.log("action_disabled_column", {
            moduleName: _this.getModuleName(),
            columnName: column ? column.headerText : void 0
          });
          return;
        }
        _this.groupColumn(column.field);
      };
      this.contentRefresh = true;
      this.aria = new AriaService();
      this.parent = parent;
      this.groupSettings = groupSettings;
      this.serviceLocator = serviceLocator;
      this.sortedColumns = sortedColumns;
      this.focus = serviceLocator.getService("focus");
      this.addEventListener();
      this.groupGenerator = new GroupModelGenerator(this.parent);
    }
    Group2.prototype.addLabel = function() {
      if (!this.element.getElementsByClassName("e-group-animator").length) {
        var dragLabel = this.l10n.getConstant("GroupDropArea");
        this.element.innerHTML = dragLabel;
        this.element.classList.remove("e-grouped");
      }
    };
    Group2.prototype.rearrangeGroup = function() {
      this.sortRequired = false;
      this.updateModel();
    };
    Group2.prototype.columnDrag = function(e) {
      if (this.groupSettings.allowReordering && e.column.allowGrouping) {
        this.animateDropper(e);
      }
      var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
      if (!this.parent.allowReordering) {
        classList(cloneElement, ["e-defaultcur"], ["e-notallowedcur"]);
      }
      if (!(e.column.allowGrouping && (parentsUntil(e.target, "e-groupdroparea") || parentsUntil(e.target, "e-headercell") && parentsUntil(e.target, "e-headercell").isEqualNode(this.parent.getColumnHeaderByField(e.column.field)))) && !(this.parent.allowReordering && parentsUntil(e.target, "e-headercell"))) {
        classList(cloneElement, ["e-notallowedcur"], ["e-defaultcur"]);
      }
      if (e.target.classList.contains("e-groupdroparea")) {
        this.element.classList.add("e-hover");
      } else {
        this.element.classList.remove("e-hover");
      }
    };
    Group2.prototype.columnDragStart = function(e) {
      if (e.target.classList.contains("e-stackedheadercell")) {
        return;
      }
      var dropArea = this.parent.element.querySelector(".e-groupdroparea");
      this.aria.setDropTarget(dropArea, e.column.allowGrouping);
      var element = e.target.classList.contains("e-headercell") ? e.target : parentsUntil(e.target, "e-headercell");
      this.aria.setGrabbed(element, true, !e.column.allowGrouping);
    };
    Group2.prototype.columnDrop = function(e) {
      var gObj = this.parent;
      if (e.droppedElement.getAttribute("action") === "grouping") {
        var column = gObj.getColumnByUid(e.droppedElement.getAttribute("e-mappinguid"));
        if (isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), "e-grid").getAttribute("id") !== gObj.element.getAttribute("id")) {
          return;
        }
        this.ungroupColumn(column.field);
      }
    };
    Group2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(uiUpdate, this.enableAfterRender, this);
      this.parent.on(groupComplete, this.onActionComplete, this);
      this.parent.on(ungroupComplete, this.onActionComplete, this);
      this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
      this.parent.on(click, this.clickHandler, this);
      this.parent.on(columnDrag, this.columnDrag, this);
      this.parent.on(columnDragStart, this.columnDragStart, this);
      this.parent.on(headerDrop, this.columnDrop, this);
      this.parent.on(columnDrop, this.columnDrop, this);
      this.parent.on(headerRefreshed, this.refreshSortIcons, this);
      this.parent.on(sortComplete, this.refreshSortIcons, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(contentReady, this.initialEnd, this);
      this.parent.on(onEmpty, this.initialEnd, this);
      this.parent.on(initialEnd, this.render, this);
      this.parent.on(groupAggregates, this.onGroupAggregates, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on("group-expand-collapse", this.updateExpand, this);
      this.parent.on("persist-data-changed", this.initialEnd, this);
    };
    Group2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.render);
      this.parent.off(uiUpdate, this.enableAfterRender);
      this.parent.off(groupComplete, this.onActionComplete);
      this.parent.off(ungroupComplete, this.onActionComplete);
      this.parent.off(inBoundModelChanged, this.onPropertyChanged);
      this.parent.off(click, this.clickHandler);
      this.parent.off(columnDrag, this.columnDrag);
      this.parent.off(columnDragStart, this.columnDragStart);
      this.parent.off(columnDrop, this.columnDrop);
      this.parent.off(headerDrop, this.columnDrop);
      this.parent.off(headerRefreshed, this.refreshSortIcons);
      this.parent.off(sortComplete, this.refreshSortIcons);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(groupAggregates, this.onGroupAggregates);
      this.parent.off(destroy, this.destroy);
      this.parent.off("group-expand-collapse", this.updateExpand);
    };
    Group2.prototype.initialEnd = function() {
      var gObj = this.parent;
      this.parent.off(contentReady, this.initialEnd);
      this.parent.off(onEmpty, this.initialEnd);
      if (this.parent.getColumns().length && this.groupSettings.columns.length) {
        this.contentRefresh = false;
        for (var _i = 0, _a = gObj.groupSettings.columns; _i < _a.length; _i++) {
          var col = _a[_i];
          this.groupColumn(col);
        }
        this.contentRefresh = true;
      }
    };
    Group2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      if (e.target && parentsUntil(e.target, "e-groupheadercell") && (e.action === "tab" || e.action === "shiftTab")) {
        var focusableGroupedItems = this.getFocusableGroupedItems();
        if (e.action === "tab" && e.target === focusableGroupedItems[focusableGroupedItems.length - 1] || e.action === "shiftTab" && e.target === focusableGroupedItems[0]) {
          return;
        }
        for (var i = 0; i < focusableGroupedItems.length; i++) {
          if (e.target === focusableGroupedItems[parseInt(i.toString(), 10)]) {
            e.preventDefault();
            var index = e.action === "tab" ? i + 1 : i - 1;
            focusableGroupedItems[parseInt(index.toString(), 10)].focus();
            return;
          }
        }
      }
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "downArrow") {
          e.action = "ctrlDownArrow";
        } else if (e.action === "upArrow") {
          e.action = "ctrlUpArrow";
        }
      }
      if (e.action !== "ctrlSpace" && (!this.groupSettings.columns.length || ["altDownArrow", "altUpArrow", "ctrlDownArrow", "ctrlUpArrow", "enter"].indexOf(e.action) === -1)) {
        return;
      }
      switch (e.action) {
        case "altDownArrow":
        case "altUpArrow":
          var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
          if (selected.length) {
            e.preventDefault();
            var rows = gObj.getContentTable().querySelector(tbody).children;
            var dataRow = gObj.getDataRows()[selected[selected.length - 1]];
            var grpRow = void 0;
            for (var i = dataRow.rowIndex; i >= 0; i--) {
              if (!rows[parseInt(i.toString(), 10)].classList.contains(row) && !rows[parseInt(i.toString(), 10)].classList.contains("e-detailrow")) {
                grpRow = rows[parseInt(i.toString(), 10)];
                break;
              }
            }
            this.expandCollapseRows(grpRow.querySelector(e.action === "altUpArrow" ? ".e-recordplusexpand" : ".e-recordpluscollapse"));
          }
          break;
        case "ctrlDownArrow":
          e.preventDefault();
          this.expandAll();
          break;
        case "ctrlUpArrow":
          e.preventDefault();
          this.collapseAll();
          break;
        case "enter":
          if (e.target.classList.contains("e-groupsort")) {
            this.groupSortFocus = true;
            e.preventDefault();
            this.applySortFromTarget(e.target);
            break;
          } else if (e.target.classList.contains("e-ungroupbutton")) {
            this.groupCancelFocus = true;
            e.preventDefault();
            this.unGroupFromTarget(e.target);
            break;
          }
          if (this.parent.isEdit || closest(e.target, "#" + this.parent.element.id + "_searchbar") !== null || parentsUntil(e.target, "e-pager") || parentsUntil(e.target, "e-toolbar")) {
            return;
          }
          var element = this.focus.getFocusedElement();
          if (element && (element.classList.contains("e-icon-grightarrow") || element.classList.contains("e-icon-gdownarrow"))) {
            element = element.parentElement;
          }
          var row2 = element ? element.parentElement.querySelector('[class^="e-record"]') : null;
          if (!row2) {
            break;
          }
          if (element.children.length && (element.children[0].classList.contains("e-icon-grightarrow") || element.children[0].classList.contains("e-icon-gdownarrow"))) {
            e.preventDefault();
            this.expandCollapseRows(row2);
          }
          break;
        case "ctrlSpace":
          var elem = gObj.focusModule.currentInfo.element;
          if (elem && elem.classList.contains("e-headercell")) {
            e.preventDefault();
            var column = gObj.getColumnByUid(elem.firstElementChild.getAttribute("e-mappinguid"));
            if (column.field && gObj.groupSettings.columns.indexOf(column.field) < 0) {
              this.groupColumn(column.field);
            } else {
              this.ungroupColumn(column.field);
            }
          }
          break;
      }
    };
    Group2.prototype.getFocusableGroupedItems = function() {
      var focusableGroupedItems = [];
      if (this.groupSettings.columns.length) {
        var focusableGroupedHeaderItems = this.element.querySelectorAll(".e-groupheadercell");
        for (var i = 0; i < focusableGroupedHeaderItems.length; i++) {
          focusableGroupedItems.push(focusableGroupedHeaderItems[parseInt(i.toString(), 10)].querySelector(".e-grouptext"));
          focusableGroupedItems.push(focusableGroupedHeaderItems[parseInt(i.toString(), 10)].querySelector(".e-groupsort"));
          focusableGroupedItems.push(focusableGroupedHeaderItems[parseInt(i.toString(), 10)].querySelector(".e-ungroupbutton"));
        }
      }
      return focusableGroupedItems;
    };
    Group2.prototype.wireEvent = function() {
      EventHandler.add(this.element, "focusin", this.onFocusIn, this);
      EventHandler.add(this.element, "focusout", this.onFocusOut, this);
      EventHandler.add(this.parent.element, "auxclick", this.auxilaryclickHandler, this);
    };
    Group2.prototype.unWireEvent = function() {
      EventHandler.remove(this.element, "focusin", this.onFocusIn);
      EventHandler.remove(this.element, "focusout", this.onFocusOut);
      EventHandler.remove(this.parent.element, "auxclick", this.auxilaryclickHandler);
    };
    Group2.prototype.onFocusIn = function(e) {
      if (this.parent.focusModule.currentInfo && this.parent.focusModule.currentInfo.element) {
        removeClass([this.parent.focusModule.currentInfo.element, this.parent.focusModule.currentInfo.elementToFocus], ["e-focused", "e-focus"]);
        this.parent.focusModule.currentInfo.element.tabIndex = -1;
      }
      this.addOrRemoveFocus(e);
    };
    Group2.prototype.onFocusOut = function(e) {
      this.addOrRemoveFocus(e);
    };
    Group2.prototype.addOrRemoveFocus = function(e) {
      if (e.target.classList.contains("e-groupdroparea") || e.target.classList.contains("e-grouptext") || e.target.classList.contains("e-groupsort") || e.target.classList.contains("e-ungroupbutton")) {
        var target = e.target.classList.contains("e-grouptext") ? e.target.parentElement.parentElement : e.target;
        if (e.type === "focusin") {
          this.parent.focusModule.currentInfo.element = e.target;
          this.parent.focusModule.currentInfo.elementToFocus = e.target;
          addClass([target], ["e-focused", "e-focus"]);
          e.target.tabIndex = 0;
        } else {
          removeClass([target], ["e-focused", "e-focus"]);
          e.target.tabIndex = -1;
        }
      }
    };
    Group2.prototype.clickHandler = function(e) {
      if (e.target.classList.contains("e-grouptext")) {
        this.groupTextFocus = true;
      }
      if (e.target.classList.contains("e-groupsort")) {
        this.groupSortFocus = true;
      }
      if (e.target.classList.contains("e-ungroupbutton")) {
        this.groupCancelFocus = true;
      }
      if (e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow")) {
        e.preventDefault();
      }
      var trgtEle = parentsUntil(e.target, "e-recordplusexpand") || parentsUntil(e.target, "e-recordpluscollapse");
      if (trgtEle && (trgtEle.children[0].classList.contains("e-icon-gdownarrow") || trgtEle.children[0].classList.contains("e-icon-grightarrow"))) {
        this.expandCollapseRows(e.target);
      }
      this.applySortFromTarget(e.target);
      this.unGroupFromTarget(e.target);
      this.toogleGroupFromHeader(e.target);
    };
    Group2.prototype.auxilaryclickHandler = function(e) {
      if (e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow") && e.button === 1) {
        e.preventDefault();
      }
    };
    Group2.prototype.unGroupFromTarget = function(target) {
      if (target.classList.contains("e-ungroupbutton")) {
        this.ungroupColumn(target.parentElement.getAttribute("ej-mappingname"));
      }
    };
    Group2.prototype.toogleGroupFromHeader = function(target) {
      if (this.groupSettings.showToggleButton) {
        if (target.classList.contains("e-grptogglebtn")) {
          if (target.classList.contains("e-toggleungroup")) {
            this.ungroupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute("e-mappinguid")).field);
          } else {
            this.groupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute("e-mappinguid")).field);
          }
        } else {
          if (target.classList.contains("e-toggleungroup")) {
            this.ungroupColumn(target.parentElement.getAttribute("ej-mappingname"));
          }
        }
      }
    };
    Group2.prototype.applySortFromTarget = function(target) {
      var gObj = this.parent;
      var gHeader = closest(target, ".e-groupheadercell");
      if (gObj.allowSorting && gHeader && !target.classList.contains("e-ungroupbutton") && !target.classList.contains("e-toggleungroup")) {
        var field = gHeader.firstElementChild.getAttribute("ej-mappingname");
        if (gObj.getColumnHeaderByField(field).getElementsByClassName("e-ascending").length) {
          gObj.sortColumn(field, "Descending", true);
        } else {
          gObj.sortColumn(field, "Ascending", true);
        }
      }
    };
    Group2.prototype.expandCollapseRows = function(target) {
      var trgt = parentsUntil(target, "e-recordplusexpand") || parentsUntil(target, "e-recordpluscollapse");
      if (trgt) {
        var rowNodes = [].slice.call(this.parent.getContentTable().querySelector(tbody).children);
        if (this.parent.editSettings.showAddNewRow) {
          if (rowNodes[0].classList.contains("e-addedrow")) {
            rowNodes.shift();
          } else if (rowNodes[rowNodes.length - 1].classList.contains("e-addedrow")) {
            rowNodes.pop();
          }
        }
        var isHide = void 0;
        var dataManager = void 0;
        var query = void 0;
        var gObj = this.parent;
        var indent = trgt.parentElement.getElementsByClassName("e-indentcell").length;
        var uid2 = trgt.parentElement.getAttribute("data-uid");
        var captionRow = gObj.getRowObjectFromUID(uid2);
        var expand = false;
        if (trgt.classList.contains("e-recordpluscollapse")) {
          addClass([trgt], "e-recordplusexpand");
          removeClass([trgt], "e-recordpluscollapse");
          trgt.firstElementChild.className = "e-icons e-gdiagonaldown e-icon-gdownarrow";
          trgt.firstElementChild.setAttribute("title", this.l10n.getConstant("Expanded"));
          expand = true;
          captionRow.isExpand = true;
          if (isGroupAdaptive(gObj)) {
            this.updateVirtualRows(gObj, target, expand, query, dataManager);
          }
          if (this.parent.groupSettings.enableLazyLoading) {
            if ((this.parent.filterSettings.columns.length || this.parent.sortSettings.columns.length || this.parent.searchSettings.key.length) && this.parent.getContent().firstElementChild.scrollTop === 0) {
              this.parent.contentModule.isTop = true;
            }
            (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).captionExpand(trgt.parentElement);
          }
        } else {
          isHide = true;
          captionRow.isExpand = false;
          removeClass([trgt], "e-recordplusexpand");
          addClass([trgt], "e-recordpluscollapse");
          trgt.firstElementChild.className = "e-icons e-gnextforward e-icon-grightarrow";
          trgt.firstElementChild.setAttribute("title", this.l10n.getConstant("Collapsed"));
          if (isGroupAdaptive(gObj)) {
            this.updateVirtualRows(gObj, target, !isHide, query, dataManager);
          }
          if (this.parent.groupSettings.enableLazyLoading) {
            (this.parent.enableVirtualization ? this.parent.lazyLoadRender : this.parent.contentModule).captionCollapse(trgt.parentElement);
          }
        }
        this.aria.setExpand(trgt, expand);
        if (!isGroupAdaptive(gObj) && !this.parent.groupSettings.enableLazyLoading) {
          var rowObjs = gObj.getRowsObject();
          var startIdx = rowObjs.indexOf(captionRow);
          var rowsState = {};
          var cacheStartIdx = gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings && gObj.infiniteScrollSettings.enableCache && rowObjs.length !== rowNodes.length ? Array.from(rowNodes).indexOf(trgt.parentElement) : void 0;
          for (var i = startIdx; i < rowObjs.length; i++) {
            if (i > startIdx && rowObjs[parseInt(i.toString(), 10)].indent === indent) {
              break;
            }
            if (rowObjs[parseInt(i.toString(), 10)].isDetailRow) {
              var visible = rowObjs[i - 1].isExpand && rowObjs[i - 1].visible;
              if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].style.display = visible ? "" : "none";
              } else if (isNullOrUndefined(cacheStartIdx)) {
                rowNodes[parseInt(i.toString(), 10)].style.display = visible ? "" : "none";
              }
            } else if (rowsState[rowObjs[parseInt(i.toString(), 10)].parentUid] === false) {
              rowObjs[parseInt(i.toString(), 10)].visible = false;
              if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].style.display = "none";
              } else if (isNullOrUndefined(cacheStartIdx)) {
                rowNodes[parseInt(i.toString(), 10)].style.display = "none";
              }
            } else {
              if (!(rowObjs[parseInt(i.toString(), 10)].isDataRow || rowObjs[parseInt(i.toString(), 10)].isCaptionRow || rowObjs[parseInt(i.toString(), 10)].isDetailRow || rowObjs[parseInt(i.toString(), 10)].isAggregateRow)) {
                var visible = rowObjs[parseInt(i.toString(), 10)].cells.some(function(cell) {
                  return cell.isDataCell && cell.visible;
                });
                if (visible === rowObjs[parseInt(i.toString(), 10)].visible) {
                  continue;
                }
              }
              rowObjs[parseInt(i.toString(), 10)].visible = true;
              if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].style.display = "";
                rowNodes[parseInt(cacheStartIdx.toString(), 10)].classList.remove("e-hide");
              } else if (isNullOrUndefined(cacheStartIdx)) {
                rowNodes[parseInt(i.toString(), 10)].style.display = "";
                rowNodes[parseInt(i.toString(), 10)].classList.remove("e-hide");
              }
            }
            if (rowObjs[parseInt(i.toString(), 10)].isCaptionRow) {
              rowsState[rowObjs[parseInt(i.toString(), 10)].uid] = rowObjs[parseInt(i.toString(), 10)].isExpand && rowObjs[parseInt(i.toString(), 10)].visible;
            }
            if (!isNullOrUndefined(cacheStartIdx)) {
              cacheStartIdx++;
            }
          }
          this.lastCaptionRowBorder();
          this.parent.notify(refreshExpandandCollapse, {
            rows: this.parent.getRowsObject()
          });
        }
        if (!this.parent.enableInfiniteScrolling || !this.parent.groupSettings.enableLazyLoading) {
          this.parent.notify(captionActionComplete, {
            isCollapse: isHide,
            parentUid: uid2
          });
        }
      }
    };
    Group2.prototype.lastCaptionRowBorder = function() {
      var table2 = this.parent.getContentTable();
      var clientHeight = this.parent.getContent().clientHeight;
      if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling || this.parent.groupSettings.enableLazyLoading) {
        if (table2.scrollHeight < clientHeight || this.isAppliedCaptionRowBorder) {
          if (this.isAppliedCaptionRowBorder || table2.querySelector(".e-lastrowcell")) {
            var borderCells = table2.querySelectorAll(".e-lastrowcell");
            for (var i = 0, len = borderCells.length; i < len; i++) {
              removeClass([borderCells[parseInt(i.toString(), 10)]], "e-lastrowcell");
            }
            this.isAppliedCaptionRowBorder = false;
          }
          var rowNodes = this.parent.getContentTable().querySelector(tbody).children;
          var lastRow = rowNodes[rowNodes.length - 1];
          if (lastRow.style.display !== "none" && !lastRow.classList.contains("e-groupcaptionrow")) {
            if (table2.scrollHeight < clientHeight) {
              addClass(table2.querySelectorAll("tr:last-child td"), "e-lastrowcell");
              this.isAppliedCaptionRowBorder = true;
            }
          } else {
            for (var i = rowNodes.length - 1, len = 0; i > len; i--) {
              if (rowNodes[parseInt(i.toString(), 10)].style.display !== "none" && rowNodes[parseInt(i.toString(), 10)].classList.contains("e-groupcaptionrow")) {
                if (rowNodes[parseInt(i.toString(), 10)].querySelector(".e-recordpluscollapse")) {
                  addClass(rowNodes[parseInt(i.toString(), 10)].childNodes, "e-lastrowcell");
                  this.isAppliedCaptionRowBorder = true;
                  break;
                }
              }
            }
          }
        }
      }
    };
    Group2.prototype.updateVirtualRows = function(gObj, target, isExpand, query, dataManager) {
      var rObj = gObj.getRowObjectFromUID(target.closest("tr").getAttribute("data-uid"));
      rObj.isExpand = isExpand;
      updatecloneRow(gObj);
      this.parent.notify(refreshVirtualMaxPage, {});
      query = gObj.getDataModule().generateQuery(false);
      query.queries = gObj.getDataModule().aggregateQuery(gObj.getQuery().clone()).queries;
      var args = {
        requestType: "virtualscroll",
        rowObject: rObj
      };
      if (gObj.contentModule) {
        args.virtualInfo = gObj.contentModule.prevInfo;
      }
      dataManager = gObj.getDataModule().getData(args, query.requiresCount());
      dataManager.then(function(e) {
        return gObj.renderModule.dataManagerSuccess(e, args);
      });
    };
    Group2.prototype.expandCollapse = function(isExpand) {
      if (!this.parent.groupSettings.columns.length) {
        return;
      }
      if (!isExpand) {
        this.parent.notify(initialCollapse, isExpand);
      }
      var rowNodes = this.parent.getContentTable().querySelector(tbody).children;
      var rowObjs = this.parent.getRowsObject();
      var row2;
      for (var i = 0, len = rowNodes.length; i < len; i++) {
        if (rowNodes[parseInt(i.toString(), 10)].querySelectorAll(".e-recordplusexpand, .e-recordpluscollapse").length) {
          row2 = rowNodes[parseInt(i.toString(), 10)].querySelector(isExpand ? ".e-recordpluscollapse" : ".e-recordplusexpand");
          if (row2) {
            if (isExpand) {
              row2.className = "e-recordplusexpand";
              row2.firstElementChild.className = "e-icons e-gdiagonaldown e-icon-gdownarrow";
              row2.setAttribute("aria-expanded", "true");
              row2.firstElementChild.setAttribute("title", this.l10n.getConstant("Expanded"));
            } else {
              row2.className = "e-recordpluscollapse";
              row2.firstElementChild.className = "e-icons e-gnextforward e-icon-grightarrow";
              row2.setAttribute("aria-expanded", "false");
              row2.firstElementChild.setAttribute("title", this.l10n.getConstant("Collapsed"));
            }
          }
          if (!(rowNodes[parseInt(i.toString(), 10)].firstElementChild.classList.contains("e-recordplusexpand") || rowNodes[parseInt(i.toString(), 10)].firstElementChild.classList.contains("e-recordpluscollapse"))) {
            rowNodes[parseInt(i.toString(), 10)].style.display = isExpand ? "" : "none";
          }
        } else {
          rowNodes[parseInt(i.toString(), 10)].style.display = isExpand ? "" : "none";
        }
        if (rowObjs[parseInt(i.toString(), 10)].isCaptionRow) {
          rowObjs[parseInt(i.toString(), 10)].isExpand = isExpand ? true : false;
        }
      }
      this.parent.updateVisibleExpandCollapseRows();
      this.lastCaptionRowBorder();
      this.parent.notify(refreshExpandandCollapse, {
        rows: this.parent.getRowsObject()
      });
    };
    Group2.prototype.expandAll = function() {
      this.expandCollapse(true);
    };
    Group2.prototype.collapseAll = function() {
      this.expandCollapse(false);
    };
    Group2.prototype.render = function() {
      this.l10n = this.serviceLocator.getService("localization");
      this.renderGroupDropArea();
      this.initDragAndDrop();
      this.refreshToggleBtn();
      this.wireEvent();
    };
    Group2.prototype.renderGroupDropArea = function() {
      var groupElem = this.parent.element.querySelector(".e-groupdroparea");
      if (groupElem) {
        remove(groupElem);
      }
      this.element = this.parent.createElement("div", {
        className: "e-groupdroparea",
        attrs: {
          "tabindex": "-1"
        }
      });
      if (this.groupSettings.allowReordering) {
        this.element.classList.add("e-group-animate");
      }
      this.updateGroupDropArea();
      this.parent.element.insertBefore(this.element, this.parent.element.firstChild);
      if (!this.groupSettings.showDropArea || this.parent.rowRenderingMode === "Vertical") {
        this.element.style.display = "none";
      }
    };
    Group2.prototype.updateGroupDropArea = function(clear) {
      if (this.groupSettings.showDropArea && !this.groupSettings.columns.length) {
        var dragLabel = this.l10n.getConstant("GroupDropArea");
        this.element.innerHTML = dragLabel;
        this.element.classList.remove("e-grouped");
      } else {
        if (this.element.innerHTML === this.l10n.getConstant("GroupDropArea") && (this.groupSettings.columns.length === 1 || !this.isAppliedGroup && !this.isAppliedUnGroup) || clear) {
          this.element.innerHTML = "";
        }
        this.element.classList.add("e-grouped");
      }
    };
    Group2.prototype.initDragAndDrop = function() {
      this.initializeGHeaderDrop();
      this.initializeGHeaderDrag();
    };
    Group2.prototype.initializeGHeaderDrag = function() {
      var drag = new Draggable(this.element, {
        dragTarget: this.groupSettings.allowReordering ? ".e-drag" : ".e-groupheadercell",
        distance: this.groupSettings.allowReordering ? -10 : 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop
      });
    };
    Group2.prototype.initializeGHeaderDrop = function() {
      var drop = new Droppable(this.element, {
        accept: ".e-dragclone",
        drop: this.drop
      });
    };
    Group2.prototype.groupColumn = function(columnName) {
      var gObj = this.parent;
      var column = gObj.getColumnByField(columnName);
      if (isNullOrUndefined(column) || column.allowGrouping === false || this.contentRefresh && this.groupSettings.columns.indexOf(columnName) > -1) {
        this.parent.log("action_disabled_column", {
          moduleName: this.getModuleName(),
          columnName: column.headerText
        });
        return;
      }
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.groupColumn,
          arg1: columnName
        });
        return;
      }
      column.visible = gObj.groupSettings.showGroupedColumn;
      this.colName = columnName;
      this.isAppliedGroup = true;
      if (this.contentRefresh) {
        this.updateModel();
      } else {
        this.addColToGroupDrop(columnName);
      }
      this.updateGroupDropArea();
      this.isAppliedGroup = false;
    };
    Group2.prototype.ungroupColumn = function(columnName) {
      var gObj = this.parent;
      var column = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(c) {
        return c.field === columnName;
      })[0] : gObj.getColumnByField(columnName);
      if (isNullOrUndefined(column) || column.allowGrouping === false || this.groupSettings.columns.indexOf(columnName) < 0) {
        return;
      }
      if (isActionPrevent(gObj)) {
        gObj.notify(preventBatch, {
          instance: this,
          handler: this.ungroupColumn,
          arg1: columnName
        });
        return;
      }
      column.visible = true;
      this.colName = column.field;
      var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
      columns.splice(columns.indexOf(this.colName), 1);
      if (this.sortedColumns.indexOf(columnName) < 0) {
        for (var i = 0, len = gObj.sortSettings.columns.length; i < len; i++) {
          if (columnName === gObj.sortSettings.columns[parseInt(i.toString(), 10)].field) {
            gObj.sortSettings.columns.splice(i, 1);
            break;
          }
        }
      }
      if (this.groupSettings.allowReordering) {
        this.reorderingColumns = columns;
      }
      this.groupSettings.columns = columns;
      if (gObj.allowGrouping) {
        this.isAppliedUnGroup = true;
        this.parent.dataBind();
      }
    };
    Group2.prototype.updateModel = function() {
      var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
      columns = this.reorderingColumns.length ? JSON.parse(JSON.stringify(this.reorderingColumns)) : columns;
      if (this.sortRequired) {
        if (columns.indexOf(this.colName) === -1) {
          columns.push(this.colName);
        }
        this.groupAddSortingQuery(this.colName);
      }
      this.sortRequired = true;
      this.parent.groupSettings.columns = columns;
      this.parent.dataBind();
    };
    Group2.prototype.onActionComplete = function(e) {
      if (e.requestType === "grouping") {
        this.addColToGroupDrop(this.colName);
      } else {
        this.removeColFromGroupDrop(this.colName);
      }
      var args = this.groupSettings.columns.indexOf(this.colName) > -1 ? {
        columnName: this.colName,
        requestType: "grouping",
        type: actionComplete
      } : {
        requestType: "ungrouping",
        type: actionComplete
      };
      this.parent.trigger(actionComplete, extend(e, args));
      this.colName = null;
    };
    Group2.prototype.groupAddSortingQuery = function(colName) {
      var i = 0;
      while (i < this.parent.sortSettings.columns.length) {
        if (this.parent.sortSettings.columns[parseInt(i.toString(), 10)].field === colName) {
          break;
        }
        i++;
      }
      if (this.parent.sortSettings.columns.length === i) {
        this.parent.sortSettings.columns.push({
          field: colName,
          direction: "Ascending",
          isFromGroup: true
        });
      } else if (!this.parent.allowSorting) {
        this.parent.sortSettings.columns[parseInt(i.toString(), 10)].direction = "Ascending";
      }
    };
    Group2.prototype.createElement = function(field) {
      var gObj = this.parent;
      var direction = "Ascending";
      var animator = this.parent.createElement("div", {
        className: "e-grid-icon e-group-animator"
      });
      var groupedColumn = this.parent.createElement("div", {
        className: "e-grid-icon e-groupheadercell"
      });
      var childDiv = this.parent.createElement("div", {
        attrs: {
          "ej-mappingname": field
        }
      });
      if (isComplexField(field)) {
        childDiv.setAttribute("ej-complexname", getComplexFieldID(field));
      }
      var column = this.parent.getColumnByField(field);
      var headerCell = gObj.getColumnHeaderByUid(column.uid);
      if (this.groupSettings.allowReordering) {
        childDiv.appendChild(this.parent.createElement("span", {
          className: "e-drag e-icons e-icon-drag",
          innerHTML: "&nbsp;",
          attrs: {
            title: "Drag",
            tabindex: "-1",
            "aria-label": this.l10n.getConstant("GroupedDrag")
          }
        }));
      }
      childDiv.appendChild(this.parent.createElement("span", {
        className: "e-grouptext",
        innerHTML: column.headerText,
        attrs: {
          tabindex: "-1"
        }
      }));
      if (this.groupSettings.showToggleButton) {
        childDiv.appendChild(this.parent.createElement("span", {
          className: "e-togglegroupbutton e-icons e-icon-ungroup e-toggleungroup",
          innerHTML: "&nbsp;",
          attrs: {
            tabindex: "-1",
            "aria-label": this.l10n.getConstant("UnGroupAria")
          }
        }));
      }
      if (headerCell.querySelectorAll(".e-ascending,.e-descending").length) {
        direction = headerCell.querySelector(".e-ascending") ? "Ascending" : "Descending";
      }
      childDiv.appendChild(this.parent.createElement("span", {
        className: "e-groupsort e-icons " + ("e-" + direction.toLowerCase() + " e-icon-" + direction.toLowerCase()),
        innerHTML: "&nbsp;",
        attrs: {
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("GroupedSortIcon") + column.headerText,
          role: "button"
        }
      }));
      childDiv.appendChild(this.parent.createElement("span", {
        className: "e-ungroupbutton e-icons e-icon-hide",
        innerHTML: "&nbsp;",
        attrs: {
          title: this.l10n.getConstant("UnGroup"),
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("UnGroupIcon") + column.headerText,
          role: "button"
        },
        styles: this.groupSettings.showUngroupButton ? "" : "display:none"
      }));
      groupedColumn.appendChild(childDiv);
      if (this.groupSettings.allowReordering) {
        animator.appendChild(groupedColumn);
        animator.appendChild(this.createSeparator());
        groupedColumn = animator;
      }
      return groupedColumn;
    };
    Group2.prototype.addColToGroupDrop = function(field) {
      var groupElem = isComplexField(field) ? this.parent.element.querySelector(".e-groupdroparea div[ej-complexname=" + getParsedFieldID(getComplexFieldID(field)) + "]") : this.parent.element.querySelector(".e-groupdroparea div[ej-mappingname=" + getParsedFieldID(field) + "]");
      if (this.groupSettings.allowReordering && groupElem) {
        return;
      }
      var column = this.parent.getColumnByField(field);
      if (isNullOrUndefined(column)) {
        return;
      }
      var groupedColumn = this.createElement(field);
      if (this.groupSettings.allowReordering) {
        var index = this.element.getElementsByClassName("e-group-animator").length;
        groupedColumn.setAttribute("index", index.toString());
      }
      this.element.appendChild(groupedColumn);
      var focusModule = this.parent.focusModule;
      focusModule.setActive(true);
      var firstContentCellIndex = [0, 0];
      if (focusModule.active.matrix.matrix[firstContentCellIndex[0]][firstContentCellIndex[1]] === 0) {
        firstContentCellIndex = findCellIndex(focusModule.active.matrix.matrix, firstContentCellIndex, true);
      }
      focusModule.active.matrix.current = firstContentCellIndex;
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.notify(showAddNewRowFocus, {});
      } else {
        focusModule.focus();
      }
    };
    Group2.prototype.createSeparator = function() {
      return this.parent.createElement("span", {
        className: "e-nextgroup e-icons e-icon-next",
        innerHTML: "&nbsp;",
        attrs: {
          tabindex: "-1",
          "aria-label": this.l10n.getConstant("GroupSeperator")
        },
        styles: this.groupSettings.showUngroupButton ? "" : "display:none"
      });
    };
    Group2.prototype.refreshToggleBtn = function(isRemove) {
      if (this.groupSettings.showToggleButton) {
        var headers = [].slice.call(this.parent.getHeaderTable().getElementsByClassName("e-headercelldiv"));
        for (var i = 0, len = headers.length; i < len; i++) {
          if (!(headers[parseInt(i.toString(), 10)].classList.contains("e-emptycell") || headers[parseInt(i.toString(), 10)].classList.contains("e-headerchkcelldiv"))) {
            var column = this.parent.getColumnByUid(headers[parseInt(i.toString(), 10)].getAttribute("e-mappinguid"));
            if (!this.parent.showColumnMenu || this.parent.showColumnMenu && !column.showColumnMenu) {
              if (headers[parseInt(i.toString(), 10)].getElementsByClassName("e-grptogglebtn").length) {
                remove(headers[parseInt(i.toString(), 10)].querySelectorAll(".e-grptogglebtn")[0]);
              }
              if (!isRemove) {
                headers[parseInt(i.toString(), 10)].appendChild(this.parent.createElement("span", {
                  className: "e-grptogglebtn e-icons " + (this.groupSettings.columns.indexOf(column.field) > -1 ? "e-toggleungroup e-icon-ungroup" : "e-togglegroup e-icon-group"),
                  attrs: {
                    tabindex: "-1",
                    "aria-label": isNullOrUndefined(this.l10n) ? this.parent.localeObj.getConstant("GroupButton") : this.l10n.getConstant("GroupButton")
                  }
                }));
              }
            }
          }
        }
      }
    };
    Group2.prototype.removeColFromGroupDrop = function(field) {
      if (!isNullOrUndefined(this.getGHeaderCell(field))) {
        var elem = this.getGHeaderCell(field);
        if (this.groupSettings.allowReordering) {
          var parent_1 = parentsUntil(elem, "e-group-animator");
          remove(parent_1);
        } else {
          remove(elem);
        }
        this.updateGroupDropArea();
        if (this.parent.editSettings.showAddNewRow) {
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
      this.isAppliedUnGroup = false;
    };
    Group2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "columns":
            var args = void 0;
            if (this.contentRefresh) {
              if (!this.isAppliedUnGroup) {
                if (!this.isAppliedGroup) {
                  this.updateGroupDropArea(true);
                  for (var j = 0; j < this.parent.sortSettings.columns.length; j++) {
                    if (this.parent.sortSettings.columns[parseInt(j.toString(), 10)].isFromGroup) {
                      this.parent.sortSettings.columns.splice(j, 1);
                      j--;
                    }
                  }
                  for (var i = 0; i < this.groupSettings.columns.length; i++) {
                    this.colName = this.groupSettings.columns[parseInt(i.toString(), 10)];
                    var col = this.parent.getColumnByField(this.colName);
                    col.visible = this.parent.groupSettings.showGroupedColumn;
                    this.groupAddSortingQuery(this.colName);
                    if (i < this.groupSettings.columns.length - 1) {
                      this.addColToGroupDrop(this.groupSettings.columns[parseInt(i.toString(), 10)]);
                    }
                  }
                }
                args = {
                  columnName: this.colName,
                  requestType: e.properties["" + prop].length ? "grouping" : "ungrouping",
                  type: actionBegin
                };
              } else {
                args = {
                  columnName: this.colName,
                  requestType: "ungrouping",
                  type: actionBegin
                };
              }
              if (!this.groupSettings.showGroupedColumn) {
                var columns = e.oldProperties["" + prop];
                for (var i = 0; i < columns.length; i++) {
                  if (e.properties["" + prop].indexOf(columns[parseInt(i.toString(), 10)]) === -1) {
                    this.parent.getColumnByField(columns[parseInt(i.toString(), 10)]).visible = true;
                  }
                }
              }
              this.parent.notify(modelChanged, args);
            }
            break;
          case "showDropArea":
            this.updateGroupDropArea();
            if (this.groupSettings.showDropArea) {
              this.element.style.display = "";
              this.parent.headerModule.refreshUI();
            } else {
              this.element.style.display = "none";
            }
            if (this.parent.height === "100%") {
              this.parent.scrollModule.refresh();
            }
            break;
          case "showGroupedColumn":
            this.updateGroupedColumn(this.groupSettings.showGroupedColumn);
            this.parent.notify(modelChanged, {
              requestType: "refresh"
            });
            break;
          case "showUngroupButton":
            this.updateButtonVisibility(this.groupSettings.showUngroupButton, "e-ungroupbutton");
            break;
          case "showToggleButton":
            this.updateButtonVisibility(this.groupSettings.showToggleButton, "e-togglegroupbutton ");
            this.parent.refreshHeader();
            break;
          case "enableLazyLoading":
            this.parent.freezeRefresh();
            break;
        }
      }
    };
    Group2.prototype.updateGroupedColumn = function(isVisible) {
      for (var i = 0; i < this.groupSettings.columns.length; i++) {
        this.parent.getColumnByField(this.groupSettings.columns[parseInt(i.toString(), 10)]).visible = isVisible;
      }
    };
    Group2.prototype.updateButtonVisibility = function(isVisible, className) {
      var gHeader = [].slice.call(this.element.getElementsByClassName(className));
      for (var i = 0; i < gHeader.length; i++) {
        gHeader[parseInt(i.toString(), 10)].style.display = isVisible ? "" : "none";
      }
    };
    Group2.prototype.enableAfterRender = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
      }
    };
    Group2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      if ((this.parent.isDestroyed || !this.parent.allowGrouping) && !this.parent.refreshing) {
        this.clearGrouping();
      }
      this.unWireEvent();
      this.removeEventListener();
      this.refreshToggleBtn(true);
      if (this.element.parentNode) {
        remove(this.element);
      }
    };
    Group2.prototype.clearGrouping = function() {
      var cols = JSON.parse(JSON.stringify(this.groupSettings.columns));
      this.contentRefresh = false;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (i === len - 1) {
          this.contentRefresh = true;
        }
        this.ungroupColumn(cols[parseInt(i.toString(), 10)]);
      }
      this.contentRefresh = true;
    };
    Group2.prototype.getModuleName = function() {
      return "group";
    };
    Group2.prototype.refreshSortIcons = function() {
      var gObj = this.parent;
      var header;
      var cols = gObj.sortSettings.columns;
      var gCols = gObj.groupSettings.columns;
      var fieldNames = this.parent.getColumns().map(function(c) {
        return c.field;
      });
      this.refreshToggleBtn();
      for (var i = 0, len = cols.length; i < len; i++) {
        if (fieldNames.indexOf(cols[parseInt(i.toString(), 10)].field) === -1) {
          continue;
        }
        header = gObj.getColumnHeaderByField(cols[parseInt(i.toString(), 10)].field);
        if (!gObj.allowSorting && (this.sortedColumns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1 || this.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) > -1)) {
          classList(header.querySelector(".e-sortfilterdiv"), ["e-ascending", "e-icon-ascending"], []);
          if (cols.length > 1) {
            header.querySelector(".e-headercelldiv").appendChild(this.parent.createElement("span", {
              className: "e-sortnumber",
              innerHTML: (i + 1).toString()
            }));
          }
        } else if (this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field) && this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field).getElementsByClassName("e-groupsort").length) {
          if (cols[parseInt(i.toString(), 10)].direction === "Ascending") {
            classList(this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field).querySelector(".e-groupsort"), ["e-ascending", "e-icon-ascending"], ["e-descending", "e-icon-descending"]);
          } else {
            classList(this.getGHeaderCell(cols[parseInt(i.toString(), 10)].field).querySelector(".e-groupsort"), ["e-descending", "e-icon-descending"], ["e-ascending", "e-icon-ascending"]);
          }
        }
      }
      for (var i = 0, len = gCols.length; i < len; i++) {
        if (fieldNames.indexOf(gCols[parseInt(i.toString(), 10)]) === -1) {
          continue;
        }
        gObj.getColumnHeaderByField(gCols[parseInt(i.toString(), 10)]).setAttribute("aria-grouped", "true");
      }
    };
    Group2.prototype.getGHeaderCell = function(field) {
      if (this.element && this.element.querySelector('[ej-mappingname="' + field + '"]')) {
        return this.element.querySelector('[ej-mappingname="' + field + '"]').parentElement;
      }
      return null;
    };
    Group2.prototype.onGroupAggregates = function(editedData) {
      if (this.parent.groupSettings.enableLazyLoading) {
        if (this.parent.editSettings.mode !== "Batch") {
          this.updateLazyLoadGroupAggregates(editedData);
        }
        return;
      }
      var aggregates = this.iterateGroupAggregates(editedData);
      var rowData = this.groupGenerator.generateRows(aggregates, {});
      var summaryRows = this.parent.getRowsObject().filter(function(row3) {
        return !row3.isDataRow;
      });
      var updateSummaryRows = rowData.filter(function(data) {
        return !data.isDataRow;
      });
      if (this.parent.isReact || this.parent.isVue) {
        this.parent.destroyTemplate(["groupFooterTemplate", "groupCaptionTemplate", "footerTemplate"]);
      }
      for (var i = 0; i < updateSummaryRows.length; i++) {
        var row2 = updateSummaryRows[parseInt(i.toString(), 10)];
        var cells = row2.cells.filter(function(cell) {
          return cell.isDataCell;
        });
        var args = {
          cells,
          data: row2.data,
          dataUid: summaryRows[parseInt(i.toString(), 10)] ? summaryRows[parseInt(i.toString(), 10)].uid : ""
        };
        this.parent.notify(refreshAggregateCell, args);
      }
    };
    Group2.prototype.updateLazyLoadGroupAggregates = function(data, remoteResult) {
      var _this = this;
      var groupCaptionTemplates = this.getGroupAggregateTemplates(true);
      var groupFooterTemplates = this.getGroupAggregateTemplates(false);
      if (!groupCaptionTemplates.length && !groupFooterTemplates.length) {
        return;
      }
      var gObj = this.parent;
      var isRemote = gObj.getDataModule().isRemote();
      var updatedData = data[0];
      var editedRow2 = data.row;
      var groupedCols = gObj.groupSettings.columns;
      var groupLazyLoadRenderer = gObj.contentModule;
      var groupCache = groupLazyLoadRenderer.getGroupCache();
      var currentPageGroupCache = groupCache[gObj.pageSettings.currentPage];
      var result = remoteResult ? remoteResult : [];
      var _loop_1 = function(i2) {
        var groupField = groupedCols[parseInt(i2.toString(), 10)];
        var groupKey = updatedData["" + groupField];
        var groupCaptionRowObject = this_1.getGroupCaptionRowObject(editedRow2, groupedCols.length - i2);
        if (isRemote && result.length) {
          if (i2 !== 0) {
            var prevGroupField = groupedCols[i2 - 1];
            var prevGroupKey_1 = updatedData["" + prevGroupField];
            result = result.find(function(data2) {
              return data2.key === prevGroupKey_1;
            }).items;
          }
          this_1.updateLazyLoadGroupAggregatesRow(result, groupKey, groupCaptionRowObject, currentPageGroupCache, groupCaptionTemplates, groupFooterTemplates);
        } else {
          var query = gObj.renderModule.data.generateQuery();
          if (i2 !== 0) {
            var currentLevelCaptionRowObjects = currentPageGroupCache.filter(function(data2) {
              return data2.isCaptionRow && data2.parentUid === groupCaptionRowObject.parentUid;
            });
            var index = currentLevelCaptionRowObjects.indexOf(groupCaptionRowObject);
            var fields = gObj.groupSettings.columns.slice(0, i2).reverse();
            var keys = fields.map(function(data2) {
              return updatedData["" + data2];
            });
            var pred = generateExpandPredicates(fields, keys, groupLazyLoadRenderer);
            var predicateList = getPredicates(pred);
            var lazyLoad = {
              level: i2,
              skip: index,
              take: 1,
              where: predicateList
            };
            query.lazyLoad.push({
              key: "onDemandGroupInfo",
              value: lazyLoad
            });
          }
          gObj.renderModule.data.getData({}, query).then(function(e) {
            if (isRemote) {
              _this.updateLazyLoadGroupAggregates(data, e.result);
            } else {
              _this.updateLazyLoadGroupAggregatesRow(e.result, groupKey, groupCaptionRowObject, currentPageGroupCache, groupCaptionTemplates, groupFooterTemplates);
            }
            if (i2 === groupedCols.length - 1 || isRemote) {
              _this.destroyRefreshGroupCaptionFooterTemplate();
            }
          }).catch(function(e) {
            return gObj.renderModule.dataManagerFailure(e, {
              requestType: "grouping"
            });
          });
          if (isRemote) {
            return "break";
          }
        }
      };
      var this_1 = this;
      for (var i = 0; i < groupedCols.length; i++) {
        var state_1 = _loop_1(i);
        if (state_1 === "break") break;
      }
    };
    Group2.prototype.destroyRefreshGroupCaptionFooterTemplate = function() {
      var gObj = this.parent;
      if (gObj.isAngular || gObj.isReact || gObj.isVue) {
        gObj.destroyTemplate(["groupCaptionTemplate", "groupFooterTemplate"]);
      }
      gObj.refreshGroupCaptionFooterTemplate();
      gObj.removeMaskRow();
      gObj.hideSpinner();
    };
    Group2.prototype.updateLazyLoadGroupAggregatesRow = function(result, groupKey, groupCaptionRowObject, currentPageGroupCache, groupCaptionTemplates, groupFooterTemplates) {
      var updatedGroupCaptionData = result.find(function(data) {
        return data.key === groupKey;
      });
      if (groupCaptionTemplates.length) {
        this.updateLazyLoadGroupAggregatesCell(updatedGroupCaptionData, groupCaptionRowObject, groupCaptionTemplates);
      }
      if (groupFooterTemplates.length) {
        var groupFooterRowObject = currentPageGroupCache.find(function(data) {
          return data.isAggregateRow && data.parentUid === groupCaptionRowObject.uid;
        });
        this.updateLazyLoadGroupAggregatesCell(updatedGroupCaptionData, groupFooterRowObject, groupFooterTemplates);
      }
    };
    Group2.prototype.updateLazyLoadGroupAggregatesCell = function(updatedGroupCaptionData, captionFooterRowObject, captionFooterTemplates) {
      var prevCaptionFooterData = captionFooterRowObject.data;
      var updatedGroupCaptionDataAggregates = updatedGroupCaptionData.aggregates;
      if (captionFooterRowObject.isCaptionRow) {
        prevCaptionFooterData.aggregates = updatedGroupCaptionDataAggregates;
      }
      for (var i = 0; i < captionFooterTemplates.length; i++) {
        var template = captionFooterTemplates[parseInt(i.toString(), 10)];
        var key = template.field + " - " + template.type;
        var fieldData = prevCaptionFooterData[template.field];
        fieldData["" + key] = updatedGroupCaptionDataAggregates["" + key];
        fieldData[capitalizeFirstLetter(template.type)] = updatedGroupCaptionDataAggregates["" + key];
        if (fieldData[template.type]) {
          fieldData[template.type] = updatedGroupCaptionDataAggregates["" + key];
        }
      }
    };
    Group2.prototype.getGroupCaptionRowObject = function(element, groupCaptionIndex) {
      var gObj = this.parent;
      var uid2 = element.getAttribute("data-uid");
      var parentCaptionRowObject = gObj.getRowObjectFromUID(uid2);
      for (var i = 0; i < groupCaptionIndex; i++) {
        parentCaptionRowObject = gObj.getRowObjectFromUID(parentCaptionRowObject.parentUid);
      }
      return parentCaptionRowObject;
    };
    Group2.prototype.getGroupAggregateTemplates = function(groupCaptionTemplate) {
      var aggregates = [];
      var aggregateRows = this.parent.aggregates;
      for (var j = 0; j < aggregateRows.length; j++) {
        var row2 = aggregateRows[parseInt(j.toString(), 10)];
        for (var k = 0; k < row2.columns.length; k++) {
          if (groupCaptionTemplate && row2.columns[parseInt(k.toString(), 10)].groupCaptionTemplate || !groupCaptionTemplate && row2.columns[parseInt(k.toString(), 10)].groupFooterTemplate) {
            var aggr = {};
            var type = row2.columns[parseInt(k.toString(), 10)].type.toString();
            aggr = {
              type: type.toLowerCase(),
              field: row2.columns[parseInt(k.toString(), 10)].field
            };
            aggregates.push(aggr);
          }
        }
      }
      return aggregates;
    };
    Group2.prototype.groupedRowReorder = function(fromRowObj, toRowObj) {
      var dragRow = this.parent.getRowElementByUID(fromRowObj.uid);
      var dropRow = this.parent.getRowElementByUID(toRowObj.uid);
      var dropArgs = {
        rows: [dragRow],
        target: dropRow,
        fromIndex: fromRowObj.index,
        dropIndex: toRowObj.index
      };
      if (!isNullOrUndefined(fromRowObj) && !isNullOrUndefined(toRowObj) && fromRowObj.parentUid !== toRowObj.parentUid) {
        if (dropRow) {
          if (dropRow["style"].display === "none") {
            dragRow["style"].display = "none";
          }
          if (dropArgs.fromIndex > dropArgs.dropIndex) {
            this.parent.getContentTable().querySelector(tbody).insertBefore(dragRow, dropRow);
          } else {
            this.parent.getContentTable().querySelector(tbody).insertBefore(dragRow, dropRow.nextSibling);
          }
        } else {
          remove(dragRow);
        }
        this.groupReorderHandler(fromRowObj, toRowObj);
        var tr = [].slice.call(this.parent.getContentTable().getElementsByClassName(row));
        groupReorderRowObject(this.parent, dropArgs, tr, toRowObj);
        if (this.parent.enableVirtualization) {
          resetCachedRowIndex(this.parent);
        } else {
          resetRowIndex(this.parent, this.parent.getRowsObject().filter(function(data) {
            return data.isDataRow;
          }), tr);
        }
        this.parent.notify(refreshExpandandCollapse, {
          rows: this.parent.getRowsObject()
        });
      }
    };
    Group2.prototype.groupReorderHandler = function(dragRowObject, dropRowObject) {
      var gObj = this.parent;
      var dragRowObjectData = dragRowObject.data;
      var dropRowObjectData = dropRowObject.data;
      var groupAggregateTemplate = gObj["groupModule"].getGroupAggregateTemplates(false);
      var dropParentRowObject = gObj.getRowObjectFromUID(dropRowObject.parentUid);
      var dragParentRowObject = gObj.getRowObjectFromUID(dragRowObject.parentUid);
      var dropRootParentRowObjects = [dropParentRowObject];
      var dragRootParentRowObjects = [dragParentRowObject];
      var groupColumns = gObj.groupSettings.columns;
      for (var j = 0; j < groupColumns.length; j++) {
        dragRowObjectData[groupColumns[parseInt(j.toString(), 10)]] = dropRowObjectData[groupColumns[parseInt(j.toString(), 10)]];
        if (j > 0) {
          dropRootParentRowObjects.push(gObj.getRowObjectFromUID(dropRootParentRowObjects[j - 1].parentUid));
          dragRootParentRowObjects.push(gObj.getRowObjectFromUID(dragRootParentRowObjects[j - 1].parentUid));
        }
      }
      dragRowObject.parentUid = dropRowObject.parentUid;
      dragRowObject.visible = dropRowObject.visible;
      dragRowObject["parentGid"] = dropRowObject["parentGid"];
      if (dragRowObject.changes !== dragRowObjectData) {
        dragRowObject.changes = dragRowObjectData;
      }
      var updatedCurrentViewData = this.iterateGroupAggregates([{
        dragRowObjects: dragRootParentRowObjects,
        dropRowObjects: dropRootParentRowObjects
      }]);
      var updatedDragCurrentViewData = updatedCurrentViewData.filter(function(object) {
        return object["key"] === dragRootParentRowObjects[dragRootParentRowObjects.length - 1].data["key"] || object["key"] instanceof Date && object["key"].toString() === dragRootParentRowObjects[dragRootParentRowObjects.length - 1].data["key"].toString();
      });
      var updatedDropCurrentViewData = updatedCurrentViewData.filter(function(object) {
        return object["key"] === dropRootParentRowObjects[dropRootParentRowObjects.length - 1].data["key"] || object["key"] instanceof Date && object["key"].toString() === dropRootParentRowObjects[dropRootParentRowObjects.length - 1].data["key"].toString();
      });
      updatedCurrentViewData = [];
      if (!isNullOrUndefined(updatedDragCurrentViewData[0])) {
        updatedCurrentViewData.push(updatedDragCurrentViewData[0]);
      }
      if (!isNullOrUndefined(updatedDropCurrentViewData[0])) {
        updatedCurrentViewData.push(updatedDropCurrentViewData[0]);
      }
      var currentViewData = gObj.currentViewData;
      for (var i = 0; i < currentViewData.length; i++) {
        if (isNullOrUndefined(updatedDragCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === dragRootParentRowObjects[dragRootParentRowObjects.length - 1].data["key"]) {
          currentViewData.splice(i, 1);
          i--;
        } else if (isNullOrUndefined(updatedDropCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === dropRootParentRowObjects[dropRootParentRowObjects.length - 1].data["key"]) {
          currentViewData.splice(i, 1);
          i--;
        } else if (!isNullOrUndefined(updatedDragCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === updatedDragCurrentViewData[0]["key"]) {
          currentViewData[parseInt(i.toString(), 10)] = updatedDragCurrentViewData[0];
        } else if (!isNullOrUndefined(updatedDropCurrentViewData[0]) && currentViewData[parseInt(i.toString(), 10)]["key"] === updatedDropCurrentViewData[0]["key"]) {
          currentViewData[parseInt(i.toString(), 10)] = updatedDropCurrentViewData[0];
        }
      }
      var updatedRowObject = this.groupGenerator.generateRows(updatedCurrentViewData, {});
      var dragRootParentAggregateRowObject = [];
      var dropRootParentAggregateRowObject = [];
      for (var i = 0; i < dragRootParentRowObjects.length; i++) {
        dragRootParentAggregateRowObject.push.apply(dragRootParentAggregateRowObject, this.getGroupParentFooterAggregateRowObject(dragRootParentRowObjects[parseInt(i.toString(), 10)].uid));
      }
      for (var i = 0; i < dropRootParentRowObjects.length; i++) {
        dropRootParentAggregateRowObject.push.apply(dropRootParentAggregateRowObject, this.getGroupParentFooterAggregateRowObject(dropRootParentRowObjects[parseInt(i.toString(), 10)].uid));
      }
      dragRootParentRowObjects.push.apply(dragRootParentRowObjects, dragRootParentAggregateRowObject);
      dropRootParentRowObjects.push.apply(dropRootParentRowObjects, dropRootParentAggregateRowObject);
      this.updatedRowObjChange(dragRootParentRowObjects, updatedRowObject, groupAggregateTemplate, true);
      this.updatedRowObjChange(dropRootParentRowObjects, updatedRowObject, groupAggregateTemplate);
      this.groupReorderRefreshHandler(dragRootParentRowObjects);
      this.groupReorderRefreshHandler(dropRootParentRowObjects);
    };
    Group2.prototype.updatedRowObjChange = function(rootParentRowObjects, updatedRowObjects, groupAggregateTemplate, isDraggedRow) {
      var gObj = this.parent;
      var rowObjects = gObj.getRowsObject();
      var cache = {};
      var virtualCacheRowObjects = [];
      if (gObj.enableVirtualization) {
        cache = gObj.contentModule["vgenerator"].cache;
        virtualCacheRowObjects = gObj.vcRows;
      }
      for (var i = 0; i < rootParentRowObjects.length; i++) {
        var keyPresent = false;
        var parentRowObject = rootParentRowObjects[parseInt(i.toString(), 10)];
        for (var j = 0; j < updatedRowObjects.length; j++) {
          var updatedRowObject = updatedRowObjects[parseInt(j.toString(), 10)];
          if (!isNullOrUndefined(updatedRowObject) && !isNullOrUndefined(parentRowObject.data["key"]) && !isNullOrUndefined(updatedRowObject.data["key"]) && (parentRowObject.data["key"] === updatedRowObject.data["key"] || parentRowObject.data["key"] instanceof Date && parentRowObject.data["key"].toString() === updatedRowObject.data["key"].toString())) {
            var isParentKeyPresent = true;
            var nextParentObject = rootParentRowObjects[parseInt((i + 1).toString(), 10)];
            if (isDraggedRow && nextParentObject && !nextParentObject.isAggregateRow) {
              var key = nextParentObject.data["key"].toString();
              var field = nextParentObject.data["field"];
              var groupedData = updatedRowObject.data["items"].records ? updatedRowObject.data["items"].records : updatedRowObject.data["items"];
              if (groupedData && groupedData.length && groupedData[0]["" + field] && groupedData[0]["" + field].toString() !== key) {
                isParentKeyPresent = false;
              }
            }
            if (!isParentKeyPresent && isDraggedRow) {
              continue;
            }
            var index = rowObjects.indexOf(parentRowObject);
            if (index !== -1) {
              rowObjects[parseInt(index.toString(), 10)].data = updatedRowObject.data;
              rowObjects[parseInt(index.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
            }
            if (gObj.enableVirtualization) {
              var vIndex = virtualCacheRowObjects.indexOf(parentRowObject);
              if (vIndex !== -1) {
                virtualCacheRowObjects[parseInt(vIndex.toString(), 10)].data = updatedRowObject.data;
                virtualCacheRowObjects[parseInt(vIndex.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
              }
            }
            parentRowObject.data = updatedRowObject.data;
            parentRowObject["gSummary"] = ["gSummary"];
            updatedRowObjects.splice(j, 1);
            j--;
            keyPresent = true;
            break;
          } else if (parentRowObject.isAggregateRow && updatedRowObject.isAggregateRow) {
            for (var l = 0; l < groupAggregateTemplate.length; l++) {
              if (this.evaluateGroupAggregateValueChange(parentRowObject, updatedRowObject, groupAggregateTemplate[parseInt(l.toString(), 10)])) {
                var index = rowObjects.indexOf(parentRowObject);
                if (index !== -1) {
                  rowObjects[parseInt(index.toString(), 10)].data = updatedRowObject.data;
                  rowObjects[parseInt(index.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
                }
                if (gObj.enableVirtualization) {
                  var vIndex = virtualCacheRowObjects.indexOf(parentRowObject);
                  if (vIndex !== -1) {
                    virtualCacheRowObjects[parseInt(vIndex.toString(), 10)].data = updatedRowObject.data;
                    virtualCacheRowObjects[parseInt(vIndex.toString(), 10)]["gSummary"] = updatedRowObject["gSummary"];
                  }
                }
                parentRowObject.data = updatedRowObject.data;
                parentRowObject["gSummary"] = updatedRowObject["gSummary"];
                keyPresent = true;
                break;
              }
            }
            if (keyPresent) {
              break;
            }
          }
        }
        if (!keyPresent) {
          var removeElem = gObj.getRowElementByUID(parentRowObject.uid);
          if (!isNullOrUndefined(removeElem)) {
            remove(removeElem);
          }
          rowObjects.splice(rowObjects.indexOf(parentRowObject), 1);
          if (gObj.enableVirtualization) {
            virtualCacheRowObjects.splice(virtualCacheRowObjects.indexOf(parentRowObject), 1);
            for (var k = 1; k <= Object.keys(cache).length; k++) {
              var vcIndex = cache[parseInt(k.toString(), 10)].indexOf(parentRowObject);
              if (vcIndex !== -1) {
                cache[parseInt(k.toString(), 10)].splice([parseInt(vcIndex.toString(), 10)], 1);
              }
            }
          }
          if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {
            gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);
          }
        }
      }
    };
    Group2.prototype.groupReorderRefreshHandler = function(parentRowObjects) {
      var gObj = this.parent;
      var row2 = new RowRenderer(gObj["serviceLocator"], null, gObj);
      var columns = gObj.getColumns();
      for (var j = 0; j < parentRowObjects.length; j++) {
        var rowObject = parentRowObjects[parseInt(j.toString(), 10)];
        if (!isNullOrUndefined(rowObject.uid) && !isNullOrUndefined(gObj.getRowElementByUID(rowObject.uid))) {
          row2.refresh(rowObject, columns, false);
        }
      }
    };
    Group2.prototype.getGroupParentFooterAggregateRowObject = function(parentUid) {
      var rowObjects = this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache && this.parent.groupSettings.columns.length ? this.parent.contentModule["rows"] : this.parent.getRowsObject();
      var parentFooterAggregates = [];
      for (var i = 0; i < rowObjects.length; i++) {
        var rowObject = rowObjects[parseInt(i.toString(), 10)];
        if (rowObject.parentUid === parentUid && rowObject.isAggregateRow) {
          parentFooterAggregates.push(rowObject);
        }
      }
      return parentFooterAggregates;
    };
    Group2.prototype.evaluateGroupAggregateValueChange = function(rowObjects, updatedRowObject, groupAggregateTemplate) {
      var change2 = false;
      if (rowObjects.data[groupAggregateTemplate["field"]]["field"] === updatedRowObject.data[groupAggregateTemplate["field"]]["field"] && rowObjects.data[groupAggregateTemplate["field"]]["key"] === updatedRowObject.data[groupAggregateTemplate["field"]]["key"] && rowObjects.data[groupAggregateTemplate["field"]].hasOwnProperty(groupAggregateTemplate["field"] + " - " + groupAggregateTemplate["type"]) && updatedRowObject.data[groupAggregateTemplate["field"]].hasOwnProperty(groupAggregateTemplate["field"] + " - " + groupAggregateTemplate["type"])) {
        change2 = true;
      }
      return change2;
    };
    Group2.prototype.gettingVirtualData = function(parentRowObjs, curViewRec, pK) {
      var datas = [];
      var _loop_2 = function(i2) {
        if (curViewRec.indexOf(parentRowObjs[parseInt(i2.toString(), 10)].data) === -1) {
          datas.push(parentRowObjs[parseInt(i2.toString(), 10)].data);
        }
        if (parentRowObjs[parseInt(i2.toString(), 10)].data["field"] === this_2.parent.groupSettings.columns[0]) {
          var draggedData_1 = parentRowObjs[parseInt(i2.toString(), 10)].data["items"];
          if (!isNullOrUndefined(draggedData_1["records"])) {
            draggedData_1 = draggedData_1["records"];
          }
          var _loop_3 = function(j2) {
            if (pK && curViewRec.findIndex(function(data) {
              return data[pK.toString()] === draggedData_1[parseInt(j2.toString(), 10)][pK.toString()];
            }) === -1) {
              datas.push(draggedData_1[parseInt(j2.toString(), 10)]);
            }
          };
          for (var j = 0; j < draggedData_1.length; j++) {
            _loop_3(j);
          }
        }
      };
      var this_2 = this;
      for (var i = 0; i < parentRowObjs.length; i++) {
        _loop_2(i);
      }
      return datas;
    };
    Group2.prototype.iterateGroupAggregates = function(editedData) {
      var _this = this;
      var updatedData = editedData instanceof Array ? editedData : [];
      var rows = this.parent.getRowsObject();
      var initData = this.parent.getCurrentViewRecords().slice();
      var field = this.parent.getPrimaryKeyFieldNames()[0];
      var dragParentRowObjects = editedData && editedData.length ? editedData[0] && editedData[0]["dragRowObjects"] : null;
      var dropParentRowObjects = editedData && editedData.length ? editedData[0] && editedData[0]["dropRowObjects"] : null;
      var dropRootKey = null;
      var dragRootKey = null;
      if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length && (!isNullOrUndefined(dragParentRowObjects) || !isNullOrUndefined(dropParentRowObjects))) {
        if (dragParentRowObjects) {
          initData.push.apply(initData, this.gettingVirtualData(dragParentRowObjects, initData, field));
        }
        if (dropParentRowObjects) {
          initData.push.apply(initData, this.gettingVirtualData(dropParentRowObjects, initData, field));
        }
      }
      var isInfiniteGroup = this.parent.enableInfiniteScrolling && this.parent.allowGrouping && editedData.length && this.parent.groupSettings.columns.length && !isNullOrUndefined(dragParentRowObjects) && !isNullOrUndefined(dropParentRowObjects);
      if (isInfiniteGroup) {
        initData = [];
        dropRootKey = dropParentRowObjects[dropParentRowObjects.length - 1].data["key"];
        dragRootKey = dragParentRowObjects[dragParentRowObjects.length - 1].data["key"];
        this.parent.getRowsObject().map(function(row3) {
          var groupKey = row3.data[_this.parent.groupSettings.columns[0]];
          if (row3.isDataRow && (groupKey === dropRootKey || groupKey === dragRootKey || groupKey instanceof Date && (groupKey.toString() === dropRootKey.toString() || groupKey.toString() === dragRootKey.toString()))) {
            initData.push(row3.data);
          }
        });
      }
      var deletedCols = [];
      var changeds = rows.map(function(row3) {
        if (row3.edit === "delete") {
          deletedCols.push(row3.data);
        }
        return row3.changes instanceof Object ? row3.changes : row3.data;
      });
      changeds = updatedData.length === 0 ? changeds : updatedData;
      var mergeData = initData.map(function(item) {
        var pKeyVal = DataUtil.getObject(field, item);
        var value;
        var hasVal = changeds.some(function(cItem) {
          value = cItem;
          return pKeyVal === DataUtil.getObject(field, cItem);
        });
        return hasVal ? value : item;
      });
      var eData = editedData;
      if (!(eData.type && eData.type === "cancel") && deletedCols.length > 0) {
        for (var i = 0; i < deletedCols.length; i++) {
          var index = mergeData.indexOf(deletedCols[parseInt(i.toString(), 10)]);
          mergeData.splice(index, 1);
        }
      }
      var aggregates = [];
      var aggregateRows = this.parent.aggregates;
      for (var j = 0; j < aggregateRows.length; j++) {
        var row2 = aggregateRows[parseInt(j.toString(), 10)];
        for (var k = 0; k < row2.columns.length; k++) {
          var aggr = {};
          var type = row2.columns[parseInt(k.toString(), 10)].type.toString();
          aggr = {
            type: type.toLowerCase(),
            field: row2.columns[parseInt(k.toString(), 10)].field
          };
          aggregates.push(aggr);
        }
      }
      var result;
      var aggrds;
      var groupedCols = this.parent.groupSettings.columns;
      for (var l = 0; l < groupedCols.length; l++) {
        aggrds = result ? result : mergeData;
        result = DataUtil.group(aggrds, groupedCols[parseInt(l.toString(), 10)], aggregates, null, null);
      }
      if (isInfiniteGroup) {
        var lastGroupKey = this.parent.currentViewData[this.parent.currentViewData.length - 1]["key"];
        if (lastGroupKey instanceof Date && (lastGroupKey.toString() === dropRootKey.toString() || lastGroupKey.toString() === dragRootKey.toString()) || lastGroupKey === dropRootKey || lastGroupKey === dragRootKey) {
          var groups_1 = [];
          for (var i = 0; i < result.length; i++) {
            groups_1.push(result[parseInt(i.toString(), 10)]);
          }
          var predicate_1 = [];
          var addWhere = function(input2) {
            for (var i2 = 0; i2 < groups_1.length; i2++) {
              predicate_1.push(new Predicate("field", "==", groups_1[parseInt(i2.toString(), 10)].field).and(_this.parent.renderModule.getPredicate("key", "equal", groups_1[parseInt(i2.toString(), 10)].key)));
            }
            input2.where(Predicate.or(predicate_1));
          };
          var newQuery = this.parent.getDataModule().generateQuery(true);
          addWhere(newQuery);
          var updatedGroupData = this.parent.getDataModule().dataManager.executeLocal(newQuery);
          this.parent.renderModule.updateGroupInfo(result, updatedGroupData);
        }
      }
      return result;
    };
    Group2.prototype.updateExpand = function(args) {
      var uid2 = args.uid;
      var isExpand = args.isExpand;
      var rows = this.parent.getRowsObject();
      for (var i = 0; i < rows.length; i++) {
        var row2 = rows[parseInt(i.toString(), 10)];
        if (row2.uid === uid2 || isNullOrUndefined(uid2)) {
          row2.isExpand = isExpand;
          var _loop_4 = function(j2) {
            var childRow = rows[parseInt(j2.toString(), 10)];
            var closestParent = void 0;
            if (childRow.parentUid !== row2.uid) {
              closestParent = rows.filter(function(x) {
                return x.uid === childRow.parentUid;
              })[0];
            }
            if (childRow.parentUid === row2.uid) {
              childRow.visible = row2.isExpand;
            } else if (!isNullOrUndefined(closestParent) && childRow.parentUid === closestParent.uid) {
              if (closestParent.isExpand && closestParent.visible === true) {
                childRow.visible = true;
              } else if (closestParent.isExpand && closestParent.visible === false) {
                childRow.visible = false;
              }
            }
            if (isNullOrUndefined(uid2)) {
              return "break";
            }
          };
          for (var j = i + 1; j < rows.length; j++) {
            var state_2 = _loop_4(j);
            if (state_2 === "break") break;
          }
        }
      }
      this.parent.notify(contentReady, {
        rows,
        args: {
          isFrozen: false,
          rows
        }
      });
    };
    return Group2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/detail-row.js
var DetailRow = (
  /** @class */
  function() {
    function DetailRow2(parent, locator) {
      this.aria = new AriaService();
      this.childRefs = [];
      this.parent = parent;
      this.serviceLocator = locator;
      this.focus = locator.getService("focus");
      this.addEventListener();
    }
    DetailRow2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.add(this.parent.element, "auxclick", this.auxilaryclickHandler, this);
      this.parent.on(click, this.clickHandler, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(expandChildGrid, this.expand, this);
      this.parent.on(columnVisibilityChanged, this.refreshColSpan, this);
      this.parent.on(destroy, this.destroyChildGrids, this);
      this.parent.on(destroyChildGrid, this.destroyChildGrids, this);
    };
    DetailRow2.prototype.clickHandler = function(e) {
      if (e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow") && !this.parent.allowGrouping) {
        e.preventDefault();
      }
      this.toogleExpandcollapse(closest(e.target, "td"));
    };
    DetailRow2.prototype.auxilaryclickHandler = function(e) {
      if (e.target.classList.contains("e-icon-grightarrow") || e.target.classList.contains("e-icon-gdownarrow") && !this.parent.allowGrouping && e.button === 1) {
        e.preventDefault();
      }
    };
    DetailRow2.prototype.toogleExpandcollapse = function(target) {
      this.l10n = this.serviceLocator.getService("localization");
      var gObj = this.parent;
      var table2 = this.parent.getContentTable();
      var lastrowIdx = this.parent.getCurrentViewRecords().length - 1;
      var parent = "parentDetails";
      var childGrid;
      var isExpanded = target && target.classList.contains("e-detailrowcollapse");
      if (!(target && (target.classList.contains("e-detailrowcollapse") || target.classList.contains("e-detailrowexpand"))) || target && target.classList.contains("e-masked-cell")) {
        return;
      }
      var tr = target.parentElement;
      var uid2 = tr.getAttribute("data-uid");
      var rowObj = gObj.getRowObjectFromUID(uid2);
      var needToRefresh = false;
      var nextRow = this.parent.getContentTable().querySelector(tbody).children[tr.rowIndex + 1];
      if (target.classList.contains("e-detailrowcollapse")) {
        var data_1 = rowObj.data;
        if (this.isDetailRow(nextRow)) {
          nextRow.style.display = "";
          gObj.notify(detailStateChange, {
            data: data_1,
            childGrid: gObj.childGrid,
            detailElement: target,
            isExpanded
          });
          needToRefresh = true;
        } else if (gObj.getDetailTemplate() || gObj.childGrid) {
          var rowId = getUid("grid-row");
          var detailRow = this.parent.createElement("tr", {
            className: "e-detailrow",
            attrs: {
              "data-uid": rowId,
              role: "row"
            }
          });
          var detailCell_1 = this.parent.createElement("th", {
            className: "e-detailcell",
            attrs: {
              "scope": "col",
              role: "columnheader"
            }
          });
          var colSpan = this.parent.getVisibleColumns().length;
          if (this.parent.allowRowDragAndDrop) {
            colSpan++;
          }
          detailCell_1.setAttribute("colspan", colSpan.toString());
          var row2 = new Row({
            isDataRow: true,
            isExpand: true,
            uid: rowId,
            isDetailRow: true,
            cells: [new Cell({
              cellType: CellType.Indent
            }), new Cell({
              isDataCell: true,
              visible: true
            })]
          });
          row2.parentUid = rowObj.uid;
          for (var i = 0, len = gObj.groupSettings.columns.length; i < len; i++) {
            detailRow.appendChild(this.parent.createElement("td", {
              className: "e-indentcell"
            }));
            row2.cells.unshift(new Cell({
              cellType: CellType.Indent
            }));
          }
          detailRow.appendChild(this.parent.createElement("th", {
            className: "e-detailindentcell",
            attrs: {
              "scope": "col"
            }
          }));
          detailRow.appendChild(detailCell_1);
          tr.parentNode.insertBefore(detailRow, tr.nextSibling);
          var isReactCompiler = void 0;
          var isReactChild = void 0;
          if (gObj.detailTemplate) {
            isReactCompiler = this.parent.isReact && typeof gObj.detailTemplate !== "string";
            isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
            var detailTemplateID = gObj.element.id + "detailTemplate";
            if (isReactCompiler || isReactChild) {
              gObj.getDetailTemplate()(data_1, gObj, "detailTemplate", detailTemplateID, null, null, detailCell_1);
              this.parent.renderTemplates(function() {
                gObj.trigger(detailDataBound, {
                  detailElement: detailCell_1,
                  data: data_1,
                  childGrid
                });
              });
            } else {
              appendChildren(detailCell_1, gObj.getDetailTemplate()(data_1, gObj, "detailTemplate", detailTemplateID, void 0, void 0, void 0, this.parent["root"]));
            }
          } else {
            childGrid = new Grid(this.getGridModel(gObj, rowObj, gObj.printMode));
            this.childRefs.push(childGrid);
            if (childGrid.query) {
              childGrid.query = childGrid.query.clone();
            }
            childGrid["" + parent] = {
              parentID: gObj.element.id,
              parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
              parentKeyField: gObj.childGrid.queryString,
              parentKeyFieldValue: gObj.childGrid.queryString && isComplexField(gObj.childGrid.queryString) ? getObject(gObj.childGrid.queryString, data_1) : data_1[gObj.childGrid.queryString],
              parentRowData: data_1
            };
            if (gObj.isReact) {
              childGrid.parentDetails.parentInstObj = gObj;
            } else if (gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact) {
              childGrid.parentDetails.parentInstObj = gObj.parentDetails.parentInstObj;
            }
            childGrid.isLegacyTemplate = gObj.isReact || gObj.isLegacyTemplate;
            if (gObj.isPrinting) {
              childGrid.isPrinting = true;
              childGrid.on(contentReady, this.promiseResolve(childGrid), this);
              childGrid.on(onEmpty, this.promiseResolve(childGrid), this);
            }
            rowObj.childGrid = childGrid;
            var modules = childGrid.getInjectedModules();
            var injectedModues = gObj.getInjectedModules();
            if (!modules || modules.length !== injectedModues.length) {
              childGrid.setInjectedModules(injectedModues);
            }
            var gridElem = this.parent.createElement("div", {
              id: "child" + parents(tr, "e-grid").length + "_grid" + tr.rowIndex + getUid(""),
              className: "e-childgrid"
            });
            detailCell_1.appendChild(gridElem);
            childGrid.appendTo(gridElem);
          }
          detailRow.appendChild(detailCell_1);
          if (tr.nextSibling) {
            tr.parentNode.insertBefore(detailRow, tr.nextSibling);
          } else {
            tr.parentNode.appendChild(detailRow);
          }
          var rowElems = gObj.getRows();
          var rowObjs = gObj.getRowsObject();
          rowElems.splice(rowElems.indexOf(tr) + 1, 0, detailRow);
          rowObjs.splice(rowObjs.indexOf(rowObj) + 1, 0, row2);
          if (!isReactCompiler || !isReactChild) {
            gObj.trigger(detailDataBound, {
              detailElement: detailCell_1,
              data: data_1,
              childGrid
            });
          }
          gObj.notify(detailDataBound, {
            rows: rowObjs
          });
        }
        classList(target, ["e-detailrowexpand"], ["e-detailrowcollapse"]);
        classList(target.firstElementChild, ["e-dtdiagonaldown", "e-icon-gdownarrow"], ["e-dtdiagonalright", "e-icon-grightarrow"]);
        rowObj.isExpand = true;
        if (target.classList.contains("e-lastrowcell") && this.parent.getContent().clientHeight > table2.scrollHeight) {
          removeClass(target.parentElement.querySelectorAll("td"), "e-lastrowcell");
          var detailrowIdx = table2.querySelector(tbody).getElementsByClassName("e-detailrow").length - 1;
          addClass(table2.querySelector(tbody).getElementsByClassName("e-detailrow")[parseInt(detailrowIdx.toString(), 10)].childNodes, ["e-lastrowcell"]);
          this.lastrowcell = true;
        }
        this.aria.setExpand(target, true);
        target.firstElementChild.setAttribute("title", this.l10n.getConstant("Expanded"));
      } else {
        if (this.isDetailRow(nextRow)) {
          nextRow.style.display = "none";
          gObj.notify(detailStateChange, {
            data: rowObj.data,
            childGrid: gObj.childGrid,
            detailElement: target,
            isExpanded
          });
        }
        classList(target, ["e-detailrowcollapse"], ["e-detailrowexpand"]);
        classList(target.firstElementChild, ["e-dtdiagonalright", "e-icon-grightarrow"], ["e-dtdiagonaldown", "e-icon-gdownarrow"]);
        if (parseInt(tr.getAttribute(dataRowIndex), 10) === lastrowIdx && this.lastrowcell) {
          addClass(target.parentElement.querySelectorAll("td"), "e-lastrowcell");
          this.lastrowcell = false;
        }
        rowObj.isExpand = false;
        needToRefresh = true;
        this.aria.setExpand(target, false);
        target.firstElementChild.setAttribute("title", this.l10n.getConstant("Collapsed"));
      }
      if (!isNullOrUndefined(gObj.detailTemplate) || gObj.childGrid && needToRefresh) {
        gObj.updateVisibleExpandCollapseRows();
        gObj.notify(refreshExpandandCollapse, {
          rows: gObj.getRowsObject()
        });
      }
      if (this.parent.allowTextWrap && this.parent.height === "auto") {
        if (this.parent.getContentTable().scrollHeight > this.parent.getContent().clientHeight) {
          this.parent.scrollModule.setPadding();
        } else {
          this.parent.scrollModule.removePadding();
        }
      }
    };
    DetailRow2.prototype.getGridModel = function(gObj, rowObj, printMode) {
      var gridModel;
      if (gObj.isPrinting && rowObj.isExpand && gObj.expandedRows && gObj.expandedRows[rowObj.index] && gObj.expandedRows[rowObj.index].gridModel) {
        gObj.expandedRows[rowObj.index].gridModel.hierarchyPrintMode = gObj.childGrid.hierarchyPrintMode;
        gridModel = extend({}, gObj.expandedRows[rowObj.index].gridModel, gObj.childGrid, true);
      } else {
        if (gObj.isPrinting && gObj.childGrid.allowPaging) {
          gObj.childGrid.allowPaging = printMode === "CurrentPage";
        }
        gridModel = extend({}, {}, gObj.childGrid, true);
      }
      return gridModel;
    };
    DetailRow2.prototype.promiseResolve = function(grid) {
      var _this = this;
      return function() {
        grid.off(contentReady, _this.promiseResolve);
        grid.off(onEmpty, _this.promiseResolve);
        grid.notify(hierarchyPrint, {});
      };
    };
    DetailRow2.prototype.isDetailRow = function(row2) {
      return row2 && row2.classList.contains("e-detailrow");
    };
    DetailRow2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (this.parent.isDestroyed || !gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      EventHandler.remove(this.parent.element, "auxclick", this.auxilaryclickHandler);
      this.parent.off(click, this.clickHandler);
      this.parent.off(destroy, this.destroy);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(expandChildGrid, this.expand);
      this.parent.off(columnVisibilityChanged, this.refreshColSpan);
      this.parent.off(destroy, this.destroyChildGrids);
      this.parent.off(destroyChildGrid, this.destroyChildGrids);
    };
    DetailRow2.prototype.getTDfromIndex = function(index, className) {
      var tr = !isNullOrUndefined(index) ? this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
      if (tr && tr.querySelector(className)) {
        return tr.querySelector(className);
      }
      return null;
    };
    DetailRow2.prototype.expand = function(target) {
      if (!isNaN(target)) {
        target = this.getTDfromIndex(target, ".e-detailrowcollapse");
      }
      if (target && target.classList.contains("e-detailrowcollapse")) {
        this.toogleExpandcollapse(target);
      }
    };
    DetailRow2.prototype.collapse = function(target) {
      if (!isNaN(target)) {
        target = this.getTDfromIndex(target, ".e-detailrowexpand");
      }
      if (target && target.classList.contains("e-detailrowexpand")) {
        this.toogleExpandcollapse(target);
      }
    };
    DetailRow2.prototype.expandAll = function() {
      this.expandCollapse(true);
      this.parent.trigger(actionComplete, {
        requestType: "expandAllComplete",
        type: actionComplete,
        moduleObj: this
      });
    };
    DetailRow2.prototype.collapseAll = function() {
      this.expandCollapse(false);
      this.parent.trigger(actionComplete, {
        requestType: "collapseAllComplete",
        type: actionComplete,
        moduleObj: this
      });
    };
    DetailRow2.prototype.expandCollapse = function(isExpand) {
      var td;
      var rows = this.parent.getDataRows();
      for (var i = 0, len = rows.length; i < len; i++) {
        td = rows[parseInt(i.toString(), 10)].querySelector(".e-detailrowcollapse, .e-detailrowexpand");
        if (isExpand) {
          this.expand(td);
        } else {
          this.collapse(td);
        }
      }
    };
    DetailRow2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey) {
        if (e.action === "downArrow") {
          e.action = "ctrlDownArrow";
        } else if (e.action === "upArrow") {
          e.action = "ctrlUpArrow";
        }
      }
      switch (e.action) {
        case "ctrlDownArrow":
          this.expandAll();
          break;
        case "ctrlUpArrow":
          this.collapseAll();
          break;
        case "altUpArrow":
        case "altDownArrow":
          var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
          if (selected.length) {
            var dataRow = gObj.getDataRows()[selected[selected.length - 1]];
            var td = dataRow.querySelector(".e-detailrowcollapse, .e-detailrowexpand");
            if (e.action === "altDownArrow") {
              this.expand(td);
            } else {
              this.collapse(td);
            }
          }
          break;
        case "enter":
          if (this.parent.isEdit) {
            return;
          }
          var element = this.focus.getFocusedElement();
          if (element && (element.classList.contains("e-icon-grightarrow") || element.classList.contains("e-icon-gdownarrow"))) {
            element = element.parentElement;
          }
          if (element && !element.classList.contains("e-detailrowcollapse") && !element.classList.contains("e-detailrowexpand")) {
            break;
          }
          this.toogleExpandcollapse(element);
          break;
      }
    };
    DetailRow2.prototype.refreshColSpan = function() {
      var detailrows = this.parent.contentModule.getTable().querySelectorAll("tr.e-detailrow");
      var colSpan = this.parent.getVisibleColumns().length;
      for (var i = 0; i < detailrows.length; i++) {
        detailrows[parseInt(i.toString(), 10)].querySelector(".e-detailcell").setAttribute("colspan", colSpan + "");
      }
    };
    DetailRow2.prototype.destroyChildGrids = function() {
      var rows = this.parent.getRowsObject();
      for (var i = 0; i < rows.length; i++) {
        rows[parseInt(i.toString(), 10)].childGrid = null;
      }
      for (var i = 0; i < this.childRefs.length; i++) {
        if (!this.childRefs[parseInt(i.toString(), 10)].isDestroyed) {
          this.childRefs[parseInt(i.toString(), 10)].destroy();
        }
      }
      this.childRefs = [];
    };
    DetailRow2.prototype.getModuleName = function() {
      return "detailRow";
    };
    return DetailRow2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/toolbar.js
var Toolbar2 = (
  /** @class */
  function() {
    function Toolbar3(parent, serviceLocator) {
      this.predefinedItems = {};
      this.isSearched = false;
      this.items = ["Add", "Edit", "Update", "Delete", "Cancel", "Print", "Search", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport", "WordExport"];
      this.isRightToolbarMenu = false;
      this.parent = parent;
      this.gridID = parent.element.id;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    Toolbar3.prototype.render = function() {
      this.l10n = this.serviceLocator.getService("localization");
      var preItems = ["Add", "Edit", "Update", "Delete", "Cancel", "Print", "PdfExport", "ExcelExport", "WordExport", "CsvExport"];
      var isAdaptive = this.parent.enableAdaptiveUI;
      var excludingItems = ["Edit", "Delete", "Update", "Cancel"];
      for (var _i = 0, preItems_1 = preItems; _i < preItems_1.length; _i++) {
        var item = preItems_1[_i];
        var itemStr = item.toLowerCase();
        var localeName = itemStr[0].toUpperCase() + itemStr.slice(1);
        this.predefinedItems["" + item] = {
          id: this.gridID + "_" + itemStr,
          prefixIcon: "e-" + itemStr,
          text: this.l10n.getConstant(localeName),
          tooltipText: this.l10n.getConstant(localeName)
        };
        if (isAdaptive) {
          this.predefinedItems["" + item].text = "";
          this.predefinedItems["" + item].visible = excludingItems.indexOf(item) === -1;
        }
      }
      this.predefinedItems.Search = {
        id: this.gridID + "_search",
        tooltipText: this.l10n.getConstant("Search"),
        align: "Right",
        cssClass: "e-search-wrapper",
        type: "Input"
      };
      this.isRightToolbarMenu = false;
      if (this.parent.enableAdaptiveUI && this.isResponsiveToolbarMenuItems(true) && (this.parent.rowRenderingMode === "Horizontal" || this.parent.rowRenderingMode === "Vertical" && !this.parent.allowFiltering && !this.parent.allowSorting)) {
        this.isRightToolbarMenu = true;
      }
      if (isAdaptive && this.isResponsiveToolbarMenuItems(false)) {
        this.predefinedItems.responsiveToolbarItems = {
          id: this.gridID + "_responsivetoolbaritems",
          cssClass: "e-responsive-toolbar-items e-menu-toolbar",
          suffixIcon: "e-responsivetoolbaritems-btn",
          align: this.isRightToolbarMenu ? "Left" : "Right"
        };
      } else {
        this.predefinedItems.ColumnChooser = {
          id: this.gridID + "_columnchooser",
          cssClass: "e-cc e-ccdiv e-cc-toolbar",
          suffixIcon: "e-columnchooser-btn",
          text: isAdaptive ? "" : this.l10n.getConstant("Columnchooser"),
          tooltipText: this.l10n.getConstant("Columnchooser"),
          align: "Right"
        };
      }
      if (this.parent.rowRenderingMode === "Vertical") {
        if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar") {
          this.predefinedItems.responsiveFilter = {
            id: this.gridID + "_responsivefilter",
            cssClass: "e-gridresponsiveicons e-icons",
            suffixIcon: "e-resfilter-icon",
            tooltipText: this.l10n.getConstant("FilterButton")
          };
        }
        if (this.parent.allowSorting) {
          this.predefinedItems.responsiveSort = {
            id: this.gridID + "_responsivesort",
            cssClass: "e-gridresponsiveicons e-icons",
            suffixIcon: "e-ressort-icon",
            tooltipText: this.l10n.getConstant("Sort")
          };
        }
      }
      if (this.parent.enableAdaptiveUI && this.parent.toolbar && this.parent.toolbar.indexOf("Search") > -1) {
        this.predefinedItems.responsiveBack = {
          id: this.gridID + "_responsiveback",
          cssClass: "e-gridresponsiveicons e-icons",
          suffixIcon: "e-resback-icon",
          visible: false
        };
      }
      this.createToolbar();
      if (this.parent.enableAdaptiveUI) {
        if (isNullOrUndefined(this.responsiveToolbarMenu)) {
          this.renderResponsiveToolbarpopup();
        }
        if (this.toolbar.element) {
          this.toolbar.refreshOverflow();
        }
      }
    };
    Toolbar3.prototype.isResponsiveToolbarMenuItems = function(isRight) {
      var items = isRight ? ["Add", "Edit", "Delete", "Search"] : ["Print", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport"];
      var toolbarItems = this.parent.toolbar || [];
      for (var i = 0; i < items.length; i++) {
        if (toolbarItems.indexOf(items[parseInt(i.toString(), 10)]) >= 0) {
          return isRight ? false : true;
        }
      }
      return isRight ? true : false;
    };
    Toolbar3.prototype.getToolbar = function() {
      return this.toolbar.element;
    };
    Toolbar3.prototype.destroy = function() {
      if (this.toolbar && !this.toolbar.isDestroyed) {
        if (this.responsiveToolbarMenu) {
          this.responsiveToolbarMenu.destroy();
        }
        if (!this.toolbar.element) {
          this.parent.destroyTemplate(["toolbarTemplate"]);
          if (this.parent.isReact) {
            this.parent.renderTemplates();
          }
        } else {
          this.toolbar.off("render-react-toolbar-template", this.addReactToolbarPortals);
          this.toolbar.destroy();
        }
        this.unWireEvent();
        this.removeEventListener();
        if (this.element.parentNode) {
          remove(this.element);
        }
      }
    };
    Toolbar3.prototype.bindSearchEvents = function() {
      this.searchElement = select("#" + this.gridID + "_searchbar", this.element);
      this.wireEvent();
      this.refreshToolbarItems();
      if (this.parent.searchSettings) {
        this.updateSearchBox();
      }
    };
    Toolbar3.prototype.toolbarCreated = function(isNormal) {
      if (this.element.querySelector(".e-search-wrapper")) {
        if (!this.parent.enableAdaptiveUI || isNormal) {
          var classList2 = this.parent.cssClass ? "e-input-group e-search " + this.parent.cssClass : "e-input-group e-search";
          this.element.querySelector(".e-search-wrapper").innerHTML = '<div class="' + classList2 + '" role="search">                    <input id="' + this.gridID + '_searchbar" class="e-input e-search" name="input" type="search"                     placeholder= "' + this.l10n.getConstant("Search") + '"/>                    <span id="' + this.gridID + '_clearbutton" class="e-input-group-icon e-icons e-sicon"                     tabindex="-1" aria-label= "clear" role= "button" style="cursor: default"></span>                    <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons"                     tabindex="-1" title="' + this.l10n.getConstant("Search") + '" role= "search"></span>                     </div>';
        } else {
          this.element.querySelector(".e-search-wrapper").innerHTML = '<span id="' + this.gridID + '_clearbutton" class="e-input-group-icon e-icons e-sicon"                     tabindex="-1" role= "button" aria-label= "clear" style="cursor: default"></span>                    <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons"                     tabindex="-1" role= "button" title="' + this.l10n.getConstant("Search") + '"></span>                     </div>';
        }
      }
      if (this.element.querySelector(".e-responsive-toolbar-items")) {
        this.element.querySelector(".e-responsive-toolbar-items").innerHTML = '<button id="' + this.gridID + '_responsivetoolbaritems" class="e-tbar-btn e-control e-btn e-lib e-icon-btn"                     type="button" data-ripple="true" tabindex="-1" data-tabindex="-1" aria-label="responsivetoolbaritems"                      aria-disabled="false" style="width: auto;"><span class="e-btn-icon e-responsivetoolbaritems-btn e-icons"></span>';
      }
      this.bindSearchEvents();
    };
    Toolbar3.prototype.createToolbar = function() {
      var items = this.getItems();
      this.toolbar = new Toolbar({
        items,
        clicked: this.toolbarClickHandler.bind(this),
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        created: this.toolbarCreated.bind(this),
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      });
      this.toolbar.isReact = this.parent.isReact;
      this.toolbar.on("render-react-toolbar-template", this.addReactToolbarPortals, this);
      var isStringTemplate = "isStringTemplate";
      this.toolbar["" + isStringTemplate] = true;
      var viewStr = "viewContainerRef";
      var registerTemp = "registeredTemplate";
      if (this.parent["" + viewStr]) {
        this.toolbar["" + registerTemp] = {};
        this.toolbar["" + viewStr] = this.parent["" + viewStr];
      }
      this.element = this.parent.createElement("div", {
        id: this.gridID + "_toolbarItems"
      });
      if (this.parent.enableAdaptiveUI) {
        this.element.classList.add("e-res-toolbar");
      }
      if (this.parent.toolbarTemplate) {
        if (typeof this.parent.toolbarTemplate === "string") {
          this.toolbar.appendTo(this.parent.toolbarTemplate);
          this.element = this.toolbar.element;
        } else {
          var isReactCompiler = this.parent.isReact && typeof this.parent.toolbarTemplate !== "string";
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          var ID = this.parent.element.id + "toolbarTemplate";
          if (isReactCompiler || isReactChild) {
            templateCompiler(this.parent.toolbarTemplate)({}, this.parent, "toolbarTemplate", ID, null, null, this.element);
            this.parent.renderTemplates();
          } else {
            appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, "toolbarTemplate"));
          }
        }
        this.element.classList.add("e-temp-toolbar");
      } else {
        this.toolbar.appendTo(this.element);
      }
      this.parent.element.insertBefore(this.element, this.parent.getHeaderContent());
      var tlbrLeftElement = this.element.querySelector(".e-toolbar-left");
      var tlbrCenterElement = this.element.querySelector(".e-toolbar-center");
      var tlbrRightElement = this.element.querySelector(".e-toolbar-right");
      var tlbrItems = this.element.querySelector(".e-toolbar-items");
      var tlbrElement = this.element;
      var tlbrLeftWidth = tlbrLeftElement ? tlbrLeftElement.clientWidth : 0;
      var tlbrCenterWidth = tlbrCenterElement ? tlbrCenterElement.clientWidth : 0;
      var tlbrRightWidth = tlbrRightElement ? tlbrRightElement.clientWidth : 0;
      var tlbrItemsWidth = tlbrItems ? tlbrItems.clientWidth : 0;
      var tlbrWidth = tlbrElement ? tlbrElement.clientWidth : 0;
      if (tlbrLeftWidth > tlbrWidth || tlbrCenterWidth > tlbrWidth || tlbrRightWidth > tlbrWidth || tlbrItemsWidth > tlbrWidth) {
        this.toolbar.refreshOverflow();
      }
    };
    Toolbar3.prototype.addReactToolbarPortals = function(args) {
      if (this.parent.isReact && args) {
        this.parent.portals = this.parent.portals.concat(args);
        this.parent.renderTemplates();
      }
    };
    Toolbar3.prototype.renderResponsiveSearch = function(isRender) {
      if (isRender) {
        this.toolbarCreated(true);
        this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isSearch);
        this.searchElement = select("#" + this.gridID + "_searchbar", this.element);
        var right = parentsUntil(this.searchElement, "e-toolbar-right");
        if (right) {
          right.classList.add("e-responsive-right");
        }
        if (this.parent.searchSettings) {
          this.updateSearchBox();
        }
        this.searchBoxObj.searchFocus({
          target: this.searchElement
        });
        this.searchElement.focus();
      } else {
        this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isInitial);
      }
    };
    Toolbar3.prototype.refreshResponsiveToolbarItems = function(action) {
      if (action === ResponsiveToolbarAction.isInitial) {
        var id = this.parent.element.id;
        var items = [id + "_edit", id + "_delete"];
        var selectedRecords = this.parent.getSelectedRowIndexes();
        var excludingItems = [id + "_responsiveback", id + "_update", id + "_cancel"];
        for (var _i = 0, _a = this.toolbar.items; _i < _a.length; _i++) {
          var item = _a[_i];
          var toolbarEle = item.template && item.template.length ? this.toolbar.element.querySelector(item.template) : this.toolbar.element.querySelector("#" + item.id);
          if (toolbarEle) {
            if (items.indexOf(item.id) > -1) {
              if (selectedRecords.length) {
                toolbarEle.parentElement.classList.remove("e-hidden");
              } else {
                toolbarEle.parentElement.classList.add("e-hidden");
              }
            } else {
              if (excludingItems.indexOf(item.id) === -1) {
                toolbarEle.parentElement.classList.remove("e-hidden");
              } else {
                toolbarEle.parentElement.classList.add("e-hidden");
              }
            }
          }
        }
        if (this.searchElement) {
          var right = parentsUntil(this.searchElement, "e-toolbar-right");
          if (right) {
            right.classList.remove("e-responsive-right");
          }
          this.toolbarCreated(false);
          this.unWireEvent();
          this.searchElement = void 0;
        }
      }
      if (action === ResponsiveToolbarAction.isSearch) {
        var items = [this.parent.element.id + "_responsiveback", this.parent.element.id + "_search"];
        for (var _b = 0, _c = this.toolbar.items; _b < _c.length; _b++) {
          var item = _c[_b];
          var toolbarEle = this.toolbar.element.querySelector("#" + item.id);
          if (toolbarEle) {
            if (items.indexOf(item.id) > -1) {
              toolbarEle.parentElement.classList.remove("e-hidden");
            } else {
              toolbarEle.parentElement.classList.add("e-hidden");
            }
          }
        }
      }
    };
    Toolbar3.prototype.refreshToolbarItems = function(args) {
      var gObj = this.parent;
      var enableItems = [];
      var disableItems = [];
      var edit = gObj.editSettings;
      var hasData = gObj.currentViewData && gObj.currentViewData.length;
      var addRow = edit.showAddNewRow && !gObj.element.querySelector(".e-editedrow");
      if (edit.allowAdding) {
        enableItems.push(this.gridID + "_add");
      } else {
        disableItems.push(this.gridID + "_add");
      }
      if (edit.allowEditing && hasData) {
        enableItems.push(this.gridID + "_edit");
      } else {
        disableItems.push(this.gridID + "_edit");
      }
      if (edit.allowDeleting && hasData) {
        enableItems.push(this.gridID + "_delete");
      } else {
        disableItems.push(this.gridID + "_delete");
      }
      if (gObj.editSettings.mode === "Batch") {
        if (gObj.element.getElementsByClassName("e-updatedtd").length && (edit.allowAdding || edit.allowEditing)) {
          enableItems.push(this.gridID + "_update");
          enableItems.push(this.gridID + "_cancel");
        } else {
          disableItems.push(this.gridID + "_update");
          disableItems.push(this.gridID + "_cancel");
        }
      } else {
        if ((gObj.isEdit || edit.showAddNewRow) && (edit.allowAdding || edit.allowEditing)) {
          enableItems = addRow ? [this.gridID + "_update", this.gridID + "_cancel", this.gridID + "_edit", this.gridID + "_delete"] : [this.gridID + "_update", this.gridID + "_cancel"];
          disableItems = addRow ? [this.gridID + "_add"] : [this.gridID + "_add", this.gridID + "_edit", this.gridID + "_delete"];
        } else {
          disableItems.push(this.gridID + "_update");
          disableItems.push(this.gridID + "_cancel");
        }
      }
      this.enableItems(enableItems, true);
      this.enableItems(disableItems, false);
    };
    Toolbar3.prototype.getItems = function() {
      var items = [];
      var toolbarItems = this.parent.toolbar || [];
      if (typeof this.parent.toolbar === "string") {
        return [];
      }
      if (this.parent.rowRenderingMode === "Vertical") {
        if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar") {
          items.push(this.getItemObject("responsiveFilter"));
        }
        if (this.parent.allowSorting) {
          items.push(this.getItemObject("responsiveSort"));
        }
      }
      for (var _i = 0, toolbarItems_1 = toolbarItems; _i < toolbarItems_1.length; _i++) {
        var item = toolbarItems_1[_i];
        if (this.parent.enableAdaptiveUI && ["Print", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport"].indexOf(item) !== -1) {
          continue;
        }
        switch (typeof item) {
          case "number":
            items.push(this.getItemObject(this.items[item]));
            break;
          case "string":
            items.push(this.getItemObject(item));
            break;
          default:
            items.push(this.getItem(item));
        }
      }
      if (this.parent.enableAdaptiveUI && this.parent.toolbar && this.parent.toolbar.indexOf("Search") > -1) {
        items.push(this.getItemObject("responsiveBack"));
      }
      if (this.parent.enableAdaptiveUI && this.isResponsiveToolbarMenuItems(false)) {
        items.push(this.getItemObject("responsiveToolbarItems"));
      }
      return items;
    };
    Toolbar3.prototype.getItem = function(itemObject) {
      var item = this.predefinedItems[itemObject.text];
      return item ? extend(item, item, itemObject) : itemObject;
    };
    Toolbar3.prototype.getItemObject = function(itemName) {
      return this.predefinedItems["" + itemName] || {
        text: itemName,
        id: this.gridID + "_" + itemName
      };
    };
    Toolbar3.prototype.enableItems = function(items, isEnable) {
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        var element = select("#" + item, this.element);
        if (element) {
          this.toolbar.enableItems(element.closest(".e-toolbar-item"), isEnable);
        }
      }
    };
    Toolbar3.prototype.toolbarClickHandler = function(args) {
      var _this = this;
      var gObj = this.parent;
      var gID = this.gridID;
      var originalEvent = args.originalEvent;
      if (this.parent.enableAdaptiveUI && args.item.id === gID + "_responsivetoolbaritems") {
        this.openResponsiveToolbarMenuPopup(originalEvent, args.item.id);
      } else {
        extend(args, {
          cancel: false
        });
        var newArgs = args;
        gObj.trigger(toolbarClick, newArgs, function(toolbarargs) {
          toolbarargs.originalEvent = toolbarargs.originalEvent ? toolbarargs.originalEvent : originalEvent;
          if (!toolbarargs.cancel) {
            switch (!isNullOrUndefined(toolbarargs.item) && toolbarargs.item.id) {
              case gID + "_print":
                gObj.print();
                break;
              case gID + "_edit":
                gObj.startEdit();
                break;
              case gID + "_update":
                gObj.endEdit();
                break;
              case gID + "_cancel":
                gObj.closeEdit();
                break;
              case gID + "_add":
                gObj.addRecord();
                break;
              case gID + "_delete":
                gObj.deleteRecord();
                break;
              case gID + "_search":
                if (toolbarargs.originalEvent.target.id === gID + "_searchbutton" && _this.searchElement) {
                  _this.search();
                } else if (gObj.enableAdaptiveUI && !_this.searchElement && (toolbarargs.originalEvent.target.classList.contains("e-search-wrapper") || toolbarargs.originalEvent.target.id === gID + "_searchbutton")) {
                  _this.renderResponsiveSearch(true);
                } else if (toolbarargs.originalEvent.target.classList.contains("e-clear-icon") && toolbarargs.originalEvent.target.id === gID + "_clearbutton" && _this.searchElement) {
                  _this.searchElement.value = "";
                  if (_this.searchElement) {
                    _this.sIcon = _this.searchElement.parentElement.querySelector(".e-sicon");
                    _this.sIcon.classList.remove("e-clear-icon");
                    _this.sIcon.removeAttribute("title");
                    _this.sIcon.style.cursor = "default";
                  }
                  if (_this.isSearched || _this.parent.searchSettings.key.length) {
                    _this.parent.search(_this.searchElement.value);
                    _this.isSearched = false;
                  }
                }
                break;
              case gID + "_columnchooser":
                if (_this.parent.enableAdaptiveUI) {
                  gObj.showResponsiveCustomColumnChooser();
                } else {
                  var tarElement = _this.parent.element.querySelector(".e-ccdiv");
                  var y = tarElement.getBoundingClientRect().top;
                  var x = tarElement.getBoundingClientRect().left;
                  var targetEle = toolbarargs.originalEvent.target;
                  y = tarElement.getBoundingClientRect().top + tarElement.offsetTop;
                  gObj.createColumnchooser(x, y, targetEle);
                }
                break;
              case gID + "_responsivefilter":
                gObj.notify(renderResponsiveChangeAction, {
                  action: 3
                });
                gObj.showResponsiveCustomFilter();
                break;
              case gID + "_responsivesort":
                gObj.notify(renderResponsiveChangeAction, {
                  action: 2
                });
                gObj.showResponsiveCustomSort();
                break;
              case gID + "_responsiveback":
                _this.renderResponsiveSearch(false);
                break;
            }
          }
        });
      }
    };
    Toolbar3.prototype.openResponsiveToolbarMenuPopup = function(e, id) {
      var pos = {
        top: 0,
        left: 0
      };
      this.toolbarMenuElement.style.cssText = "display:block;visibility:hidden";
      var elePos = this.toolbarMenuElement.getBoundingClientRect();
      var gClient = this.parent.element.getBoundingClientRect();
      this.toolbarMenuElement.style.cssText = "display:none;visibility:visible";
      var target;
      if (isNullOrUndefined(e)) {
        target = this.parent.element.querySelector("#" + id);
      } else {
        target = e.target;
      }
      if (this.parent.enableRtl) {
        pos = calculatePosition(target, "left", "bottom");
        if (this.isRightToolbarMenu) {
          pos.left -= elePos.width;
        }
      } else {
        pos = calculatePosition(target, "right", "bottom");
        if (!this.isRightToolbarMenu) {
          pos.left -= elePos.width;
        }
        if (pos.left + elePos.width + 1 >= gClient.right) {
          pos.left -= 35;
        }
      }
      this.responsiveToolbarMenu["open"](pos.top, pos.left);
      if (e && e.preventDefault) {
        e.preventDefault();
      }
      applyBiggerTheme(this.parent.element, this.responsiveToolbarMenu.element.parentElement);
    };
    Toolbar3.prototype.getMenuItems = function() {
      var items = [];
      var toolbarItems = this.parent.toolbar || [];
      for (var _i = 0, toolbarItems_2 = toolbarItems; _i < toolbarItems_2.length; _i++) {
        var item = toolbarItems_2[_i];
        if (typeof item === "string" && (item === "ColumnChooser" || item === "PdfExport" || item === "ExcelExport" || item === "CsvExport" || item === "Print")) {
          items.push({
            text: this.getLocaleText(item),
            id: this.gridID + "_" + item.toLowerCase(),
            iconCss: "e-btn-icon e-" + item.toLowerCase() + " e-icons"
          });
        }
      }
      return items;
    };
    Toolbar3.prototype.getLocaleText = function(item) {
      var title;
      if (item === "ColumnChooser") {
        title = this.l10n.getConstant("Columnchooser");
      } else if (item === "PdfExport") {
        title = this.l10n.getConstant("Pdfexport");
      } else if (item === "ExcelExport") {
        title = this.l10n.getConstant("Excelexport");
      } else if (item === "CsvExport") {
        title = this.l10n.getConstant("Csvexport");
      } else if (item === "Print") {
        title = this.l10n.getConstant("Print");
      }
      return title;
    };
    Toolbar3.prototype.renderResponsiveToolbarpopup = function() {
      this.l10n = this.serviceLocator.getService("localization");
      this.toolbarMenuElement = this.parent.createElement("ul", {
        id: this.gridID + "__toolbaritemsmenu",
        className: "e-responsivetoolbar-menu"
      });
      this.element.setAttribute("aria-label", this.l10n.getConstant("ToolbarMenuDialogARIA"));
      this.parent.element.appendChild(this.toolbarMenuElement);
      this.responsiveToolbarMenu = new ContextMenu({
        cssClass: this.parent.cssClass ? "e-grid-toolbarmenu " + this.parent.cssClass : "e-grid-toolbarmenu",
        enableRtl: this.parent.enableRtl,
        enablePersistence: this.parent.enablePersistence,
        locale: this.parent.locale,
        items: this.getMenuItems(),
        select: this.ResponsiveToolbarMenuItemClick.bind(this)
      });
      this.responsiveToolbarMenu.appendTo(this.toolbarMenuElement);
    };
    Toolbar3.prototype.ResponsiveToolbarMenuItemClick = function(args) {
      var _this = this;
      var gObj = this.parent;
      var element = args.element;
      args.item.id = element.id;
      var newArgs = {
        cancel: false,
        name: "clicked",
        item: args.item,
        originalEvent: args.event
      };
      gObj.trigger(toolbarClick, newArgs, function(toolbarargs) {
        if (!toolbarargs.cancel) {
          switch (!isNullOrUndefined(toolbarargs.item) && toolbarargs.item.id) {
            case _this.gridID + "_columnchooser":
              gObj.notify(renderResponsiveChangeAction, {
                action: 5
              });
              gObj.showResponsiveCustomColumnChooser();
              break;
            case _this.gridID + "_print":
              gObj.print();
              break;
          }
        }
      });
    };
    Toolbar3.prototype.modelChanged = function(e) {
      if (e.module === "edit") {
        this.refreshToolbarItems();
      }
    };
    Toolbar3.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() || !this.parent.toolbar) {
        return;
      }
      if (this.element) {
        remove(this.element);
      }
      this.render();
    };
    Toolbar3.prototype.keyUpHandler = function(e) {
      if (e.keyCode === 13) {
        this.search();
      }
      if (this.searchElement) {
        this.sIcon = this.searchElement.parentElement.querySelector(".e-sicon");
        if (this.searchElement.value.length && !isNullOrUndefined(this.sIcon)) {
          this.sIcon.classList.add("e-clear-icon");
          this.sIcon.setAttribute("title", this.l10n.getConstant("Clear"));
          this.sIcon.style.cursor = "pointer";
        } else {
          this.sIcon.classList.remove("e-clear-icon");
          this.sIcon.removeAttribute("title");
          this.sIcon.style.cursor = "default";
        }
      }
    };
    Toolbar3.prototype.search = function() {
      this.isSearched = true;
      this.parent.search(this.searchElement.value);
    };
    Toolbar3.prototype.updateSearchBox = function() {
      if (this.searchElement) {
        this.searchElement.value = this.parent.searchSettings.key;
      }
    };
    Toolbar3.prototype.wireEvent = function() {
      if (this.searchElement) {
        this.searchBoxObj = new SearchBox(this.searchElement, this.serviceLocator);
        EventHandler.add(this.searchElement, "keyup", this.keyUpHandler, this);
        this.searchBoxObj.wireEvent();
      }
      EventHandler.add(this.element, "focusin", this.onFocusIn, this);
      EventHandler.add(this.element, "focusout", this.onFocusOut, this);
    };
    Toolbar3.prototype.unWireEvent = function() {
      if (this.searchElement) {
        EventHandler.remove(this.searchElement, "keyup", this.keyUpHandler);
        this.searchBoxObj.unWireEvent();
      }
      EventHandler.remove(this.element, "focusin", this.onFocusIn);
      EventHandler.remove(this.element, "focusout", this.onFocusOut);
    };
    Toolbar3.prototype.onFocusIn = function(e) {
      var currentInfo = this.parent.focusModule.currentInfo;
      if (currentInfo && currentInfo.element) {
        removeClass([currentInfo.element, currentInfo.elementToFocus], ["e-focused", "e-focus"]);
        currentInfo.element.tabIndex = -1;
      }
      e.target.tabIndex = 0;
    };
    Toolbar3.prototype.onFocusOut = function(e) {
      e.target.tabIndex = -1;
      if (e.target && e.target.id === this.parent.element.id + "_searchbar" && !(e.relatedTarget && (e.relatedTarget.id === this.parent.element.id + "_clearbutton" || e.relatedTarget.id === this.parent.element.id + "_searchbutton"))) {
        this.search();
      }
    };
    Toolbar3.prototype.setFocusToolbarItem = function(element) {
      var elementToFocus = element.querySelector(".e-btn,.e-input,.e-toolbar-item-focus");
      if (!elementToFocus && this.parent.enableAdaptiveUI && !this.searchElement && element.classList.contains("e-search-wrapper")) {
        elementToFocus = element.querySelector("#" + this.gridID + "_searchbutton");
      }
      elementToFocus.focus();
    };
    Toolbar3.prototype.getFocusableToolbarItems = function() {
      var getFocusToolbarElements = [].slice.call(this.element.querySelectorAll(".e-toolbar-item:not(.e-overlay):not(.e-hidden)"));
      var getFocusToolbarItems = [];
      for (var i = 0; i < getFocusToolbarElements.length; i++) {
        if (!isNullOrUndefined(getFocusToolbarElements[parseInt(i.toString(), 10)].querySelector(".e-btn,.e-input,.e-toolbar-item-focus"))) {
          getFocusToolbarItems.push(getFocusToolbarElements[parseInt(i.toString(), 10)]);
        }
      }
      return getFocusToolbarItems;
    };
    Toolbar3.prototype.keyPressedHandler = function(e) {
      if (e.target && parentsUntil(e.target, "e-toolbar-item")) {
        var targetParent = parentsUntil(e.target, "e-toolbar-item");
        var focusableToolbarItems = this.getFocusableToolbarItems();
        if (e.action === "tab" || e.action === "shiftTab") {
          if (e.action === "tab" && targetParent === focusableToolbarItems[focusableToolbarItems.length - 1] || e.action === "shiftTab" && targetParent === focusableToolbarItems[0]) {
            return;
          }
          for (var i = 0; i < focusableToolbarItems.length; i++) {
            if (targetParent === focusableToolbarItems[parseInt(i.toString(), 10)]) {
              e.preventDefault();
              var index = e.action === "tab" ? i + 1 : i - 1;
              this.setFocusToolbarItem(focusableToolbarItems[parseInt(index.toString(), 10)]);
              return;
            }
          }
        }
        if (e.action === "enter") {
          if (this.parent.enableAdaptiveUI && !this.searchElement && e.target.id === this.gridID + "_searchbutton") {
            this.renderResponsiveSearch(true);
          }
        }
      }
    };
    Toolbar3.prototype.reRenderToolbar = function() {
      if (this.element) {
        remove(this.element);
      }
      this.render();
    };
    Toolbar3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: setFullScreenDialog,
        handler: this.reRenderToolbar
      }, {
        event: initialEnd,
        handler: this.render
      }, {
        event: uiUpdate,
        handler: this.onPropertyChanged
      }, {
        event: inBoundModelChanged,
        handler: this.updateSearchBox.bind(this)
      }, {
        event: modelChanged,
        handler: this.refreshToolbarItems
      }, {
        event: toolbarRefresh,
        handler: this.refreshToolbarItems
      }, {
        event: inBoundModelChanged,
        handler: this.modelChanged
      }, {
        event: dataBound,
        handler: this.refreshToolbarItems
      }, {
        event: click,
        handler: this.removeResponsiveSearch
      }, {
        event: rowModeChange,
        handler: this.reRenderToolbar
      }, {
        event: destroy,
        handler: this.destroy
      }, {
        event: keyPressed,
        handler: this.keyPressedHandler
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      this.rowSelectedFunction = this.rowSelected.bind(this);
      this.rowDeSelectedFunction = this.rowSelected.bind(this);
      this.parent.addEventListener(rowSelected, this.rowSelectedFunction);
      this.parent.addEventListener(rowDeselected, this.rowDeSelectedFunction);
    };
    Toolbar3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      this.parent.removeEventListener(rowSelected, this.rowSelectedFunction);
      this.parent.removeEventListener(rowDeselected, this.rowDeSelectedFunction);
    };
    Toolbar3.prototype.removeResponsiveSearch = function(e) {
      var target = e.target;
      var isSearch = target.classList.contains("e-search-icon") || target.classList.contains("e-search-wrapper");
      if (this.parent.enableAdaptiveUI && !isSearch && this.searchElement && !parentsUntil(e.target, "e-res-toolbar")) {
        this.renderResponsiveSearch(false);
      }
    };
    Toolbar3.prototype.rowSelected = function() {
      if (this.parent.enableAdaptiveUI && this.toolbar.element) {
        this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isInitial);
        this.toolbar.refreshOverflow();
      }
    };
    Toolbar3.prototype.getModuleName = function() {
      return "toolbar";
    };
    return Toolbar3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/footer-renderer.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FooterRenderer = (
  /** @class */
  function(_super) {
    __extends28(FooterRenderer2, _super);
    function FooterRenderer2(gridModule, serviceLocator) {
      var _this = _super.call(this, gridModule, serviceLocator) || this;
      _this.aggregates = {};
      _this.parent = gridModule;
      _this.locator = serviceLocator;
      _this.modelGenerator = new SummaryModelGenerator(_this.parent);
      _this.addEventListener();
      return _this;
    }
    FooterRenderer2.prototype.renderPanel = function() {
      var div = this.parent.createElement("div", {
        className: gridFooter
      });
      var innerDiv = this.parent.createElement("div", {
        className: "e-summarycontent"
      });
      div.appendChild(innerDiv);
      this.setPanel(div);
      if (this.parent.getPager() != null) {
        this.parent.element.insertBefore(div, this.parent.getPager());
      } else {
        this.parent.element.appendChild(div);
      }
    };
    FooterRenderer2.prototype.renderTable = function() {
      var innerDiv = this.createContentTable("_footer_table");
      var table2 = innerDiv.querySelector("." + table);
      var tFoot = this.parent.createElement("tfoot");
      table2.appendChild(tFoot);
      this.setTable(table2);
    };
    FooterRenderer2.prototype.renderSummaryContent = function(e, table2, cStart, cEnd) {
      var input2 = this.parent.dataSource instanceof Array ? !this.parent.getDataModule().isRemote() && this.parent.parentDetails ? this.getData() : this.parent.dataSource : this.parent.currentViewData;
      var summaries = this.modelGenerator.getData();
      var dummies = isNullOrUndefined(cStart) ? this.modelGenerator.getColumns() : this.modelGenerator.getColumns(cStart);
      var rows = isNullOrUndefined(cStart) ? this.modelGenerator.generateRows(input2, e || this.aggregates) : this.modelGenerator.generateRows(input2, e || this.aggregates, cStart, cEnd);
      var fragment = document.createDocumentFragment();
      var rowrenderer = new RowRenderer(this.locator, null, this.parent);
      rowrenderer.element = this.parent.createElement("TR", {
        className: "e-summaryrow",
        attrs: {
          role: "row"
        }
      });
      for (var srow = 0, len = summaries.length; srow < len; srow++) {
        var row2 = rows[parseInt(srow.toString(), 10)];
        if (!row2) {
          continue;
        }
        var tr = rowrenderer.render(row2, dummies);
        if (tr.querySelectorAll(".e-leftfreeze").length && tr.querySelectorAll(".e-indentcell").length) {
          var td = tr.querySelectorAll(".e-indentcell");
          for (var i = 0; i < td.length; i++) {
            td[parseInt(i.toString(), 10)].classList.add("e-leftfreeze");
            applyStickyLeftRightPosition(td[parseInt(i.toString(), 10)], i * 30, this.parent.enableRtl, "Left");
          }
        }
        if (this.parent.isFrozenGrid() && tr.querySelectorAll(".e-summarycell").length) {
          removeClass([].slice.call(tr.querySelectorAll(".e-summarycell")), ["e-freezeleftborder", "e-freezerightborder"]);
        }
        fragment.appendChild(tr);
      }
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if ((this.parent.isReact || isReactChild) && summaries.length && this.parent.isInitialLoad) {
        this.parent.renderTemplates(function() {
          table2.tFoot.innerHTML = "";
          table2.tFoot.appendChild(fragment);
        });
      } else {
        table2.tFoot.appendChild(fragment);
      }
      this.aggregates = !isNullOrUndefined(e) ? e : this.aggregates;
    };
    FooterRenderer2.prototype.refresh = function(e) {
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if (!(this.parent.isReact || isReactChild) || !this.parent.isInitialLoad) {
        this.getTable().tFoot.innerHTML = "";
      }
      this.renderSummaryContent(e, this.getTable(), void 0, void 0);
      if (isNullOrUndefined(e) && this.parent.isAutoFitColumns) {
        this.parent.autoFitColumns();
      }
      this.onScroll();
    };
    FooterRenderer2.prototype.refreshCol = function() {
      var mheaderCol = this.parent.element.querySelector("." + gridHeader).querySelector(colGroup).cloneNode(true);
      this.getTable().replaceChild(mheaderCol, this.getColGroup());
      this.setColGroup(mheaderCol);
    };
    FooterRenderer2.prototype.onWidthChange = function(args) {
      this.getColFromIndex(args.index).style.width = formatUnit(args.width);
      if (this.parent.allowResizing && args.module === "resize") {
        this.updateFooterTableWidth(this.getTable());
      }
    };
    FooterRenderer2.prototype.onScroll = function(e) {
      if (e === void 0) {
        e = {
          left: this.parent.getContent().firstChild.scrollLeft
        };
      }
      this.getTable().parentElement.scrollLeft = e.left;
    };
    FooterRenderer2.prototype.getColFromIndex = function(index) {
      return this.getColGroup().children[parseInt(index.toString(), 10)];
    };
    FooterRenderer2.prototype.columnVisibilityChanged = function() {
      this.refresh();
    };
    FooterRenderer2.prototype.addEventListener = function() {
      this.evtHandlers = [{
        event: colGroupRefresh,
        handler: this.refreshCol
      }, {
        event: columnWidthChanged,
        handler: this.onWidthChange
      }, {
        event: scroll,
        handler: this.onScroll
      }, {
        event: columnVisibilityChanged,
        handler: this.columnVisibilityChanged
      }, {
        event: refreshFooterRenderer,
        handler: this.refreshFooterRenderer
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    FooterRenderer2.prototype.removeEventListener = function() {
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    FooterRenderer2.prototype.updateFooterTableWidth = function(tFoot) {
      var tHead = this.parent.getHeaderTable();
      if (tHead && tFoot) {
        tFoot.style.width = tHead.style.width;
      }
    };
    FooterRenderer2.prototype.refreshFooterRenderer = function(editedData) {
      var aggregates = this.onAggregates(editedData);
      this.refresh(aggregates);
    };
    FooterRenderer2.prototype.getIndexByKey = function(data, ds) {
      var key = this.parent.getPrimaryKeyFieldNames()[0];
      for (var i = 0; i < ds.length; i++) {
        if (ds[parseInt(i.toString(), 10)]["" + key] === data["" + key]) {
          return i;
        }
      }
      return -1;
    };
    FooterRenderer2.prototype.getData = function() {
      return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));
    };
    FooterRenderer2.prototype.onAggregates = function(editedData) {
      editedData = editedData instanceof Array ? editedData : [];
      var field = this.parent.getPrimaryKeyFieldNames()[0];
      var dataSource = [];
      var isModified = false;
      var batchChanges = {};
      var gridData = "dataSource";
      var isFiltered = false;
      if (!(this.parent.renderModule.data.isRemote() || !isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) && (this.parent.allowFiltering && this.parent.filterSettings.columns.length || this.parent.searchSettings.key.length)) {
        isFiltered = true;
      }
      var currentViewData;
      if (!isNullOrUndefined(this.parent.dataSource) && this.parent.dataSource.result) {
        currentViewData = this.parent.getCurrentViewRecords();
      } else {
        currentViewData = this.parent.dataSource instanceof Array ? isFiltered ? this.parent.getFilteredRecords() : this.parent.dataSource : this.parent.dataSource["" + gridData].json.length ? isFiltered ? this.parent.getFilteredRecords() : this.parent.dataSource["" + gridData].json : this.parent.getCurrentViewRecords();
      }
      if (this.parent.parentDetails && !this.parent.getDataModule().isRemote()) {
        currentViewData = this.getData();
      }
      if (this.parent.editModule) {
        batchChanges = this.parent.editModule.getBatchChanges();
      }
      if (Object.keys(batchChanges).length) {
        for (var i = 0; i < currentViewData.length; i++) {
          isModified = false;
          if (batchChanges[changedRecords].length && this.getIndexByKey(currentViewData[parseInt(i.toString(), 10)], batchChanges[changedRecords]) > -1) {
            isModified = true;
            dataSource.push(batchChanges[changedRecords][this.getIndexByKey(currentViewData[parseInt(i.toString(), 10)], batchChanges[changedRecords])]);
          }
          if (batchChanges[deletedRecords].length && this.getIndexByKey(currentViewData[parseInt(i.toString(), 10)], batchChanges[deletedRecords]) > -1) {
            isModified = true;
          } else if (!isModified) {
            dataSource.push(currentViewData[parseInt(i.toString(), 10)]);
          }
        }
        if (batchChanges[addedRecords].length) {
          for (var i = 0; i < batchChanges[addedRecords].length; i++) {
            dataSource.push(batchChanges[addedRecords][parseInt(i.toString(), 10)]);
          }
        }
      } else {
        if (editedData.length) {
          var data = iterateExtend(currentViewData);
          dataSource = data.map(function(item) {
            var idVal = DataUtil.getObject(field, item);
            var value;
            var hasVal = editedData.some(function(cItem) {
              value = cItem;
              return idVal === DataUtil.getObject(field, cItem);
            });
            return hasVal ? value : item;
          });
        } else {
          dataSource = currentViewData;
        }
      }
      var eData = editedData;
      if (eData.type && eData.type === "cancel") {
        dataSource = currentViewData;
      }
      var aggregate = {};
      var agrVal;
      var aggregateRows = this.parent.aggregates;
      for (var i = 0; i < aggregateRows.length; i++) {
        for (var j = 0; j < aggregateRows[parseInt(i.toString(), 10)].columns.length; j++) {
          var data = [];
          var type = aggregateRows[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type.toString();
          data = dataSource;
          agrVal = calculateAggregate(type, data, aggregateRows[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)], this.parent);
          aggregate[aggregateRows[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].field + " - " + type.toLowerCase()] = agrVal;
        }
      }
      var result = {
        result: dataSource,
        count: dataSource.length,
        aggregates: aggregate
      };
      return result;
    };
    return FooterRenderer2;
  }(ContentRender)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/summary-cell-renderer.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SummaryCellRenderer = (
  /** @class */
  function(_super) {
    __extends29(SummaryCellRenderer2, _super);
    function SummaryCellRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.element = _this.parent.createElement("TD", {
        className: "e-summarycell",
        attrs: {
          tabindex: "-1",
          role: "gridcell"
        }
      });
      return _this;
    }
    SummaryCellRenderer2.prototype.getValue = function(field, data, column) {
      var key = !isNullOrUndefined(column.type) ? column.field + " - " + (typeof column.type === "string" ? column.type.toLowerCase() : "") : column.columnName;
      return data[column.columnName] ? data[column.columnName]["" + key] : "";
    };
    SummaryCellRenderer2.prototype.evaluate = function(node, cell, data, attributes2) {
      var column = cell.column;
      this.parent.on(refreshAggregateCell, this.refreshWithAggregate(node, cell), this);
      if (!(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate)) {
        if (this.parent.rowRenderingMode === "Vertical") {
          node.style.display = "none";
        }
        return true;
      } else {
        if (this.parent.rowRenderingMode === "Vertical") {
          node.classList.add("e-lastsummarycell");
        }
      }
      var tempObj = column.getTemplate(cell.cellType);
      var tempID = "";
      var gColumn = this.parent.getColumnByField(data[column.columnName].field);
      if (!isNullOrUndefined(gColumn)) {
        data[column.columnName].headerText = gColumn.headerText;
        if (gColumn.isForeignColumn()) {
          var fData = gColumn.columnData.filter(function(e) {
            return e[gColumn.foreignKeyField] === data[column.columnName].key;
          })[0];
          if (fData) {
            data[column.columnName].foreignKey = fData[gColumn.foreignKeyValue];
          }
        }
      }
      var isReactCompiler = this.parent.isReact && (column.footerTemplate ? typeof column.footerTemplate !== "string" : column.groupFooterTemplate ? typeof column.groupFooterTemplate !== "string" : column.groupCaptionTemplate ? typeof column.groupCaptionTemplate !== "string" : false);
      var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
      if (isReactCompiler || isReactChild) {
        var prop = data[column.columnName];
        if (tempObj.property === "groupCaptionTemplate" || tempObj.property === "groupFooterTemplate") {
          var groupKey = "groupKey";
          var key = "key";
          prop["" + groupKey] = prop["" + key];
        }
        tempObj.fn(prop, this.parent, tempObj.property, tempID, null, null, node);
        if (!this.parent.isInitialLoad) {
          this.parent.renderTemplates();
        }
      } else {
        appendChildren(node, tempObj.fn(data[column.columnName], this.parent, tempObj.property, tempID));
      }
      return false;
    };
    SummaryCellRenderer2.prototype.refreshWithAggregate = function(node, cell) {
      var _this = this;
      var cellNode = cell;
      return function(args) {
        var cell2 = cellNode;
        var field = cell2.column.columnName ? cell2.column.columnName : null;
        var curCell = !isNullOrUndefined(field) ? args.cells.filter(function(cell3) {
          return cell3.column.columnName === field;
        })[0] : null;
        if (node.parentElement && node.parentElement.getAttribute("data-uid") === args.dataUid && field && curCell && field === curCell.column.columnName) {
          _this.refreshTD(node, curCell, args.data);
        }
      };
    };
    return SummaryCellRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/aggregate.js
var Aggregate = (
  /** @class */
  function() {
    function Aggregate2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.addEventListener();
    }
    Aggregate2.prototype.getModuleName = function() {
      return "aggregate";
    };
    Aggregate2.prototype.initiateRender = function() {
      var _this = this;
      var cellFac = this.locator.getService("cellRendererFactory");
      var instance = new SummaryCellRenderer(this.parent, this.locator);
      var type = [CellType.Summary, CellType.CaptionSummary, CellType.GroupSummary];
      for (var i = 0; i < type.length; i++) {
        cellFac.addCellRenderer(type[parseInt(i.toString(), 10)], instance);
      }
      this.footerRenderer = new FooterRenderer(this.parent, this.locator);
      this.footerRenderer.renderPanel();
      this.footerRenderer.renderTable();
      var footerContent = this.footerRenderer.getPanel();
      if (this.parent.element.scrollHeight >= this.parent.getHeight(this.parent.height) && footerContent) {
        addClass([footerContent], ["e-footerpadding"]);
      }
      this.locator.register("footerRenderer", this.footerRenderer);
      var fn = function() {
        _this.prepareSummaryInfo();
        _this.parent.off(dataReady, fn);
      };
      this.parent.on(dataReady, fn, this);
      this.parent.on(dataReady, this.footerRenderer.refresh, this.footerRenderer);
    };
    Aggregate2.prototype.prepareSummaryInfo = function() {
      var _this = this;
      summaryIterator(this.parent.aggregates, function(column) {
        var cFormat = getValue("customFormat", column);
        if (!isNullOrUndefined(cFormat)) {
          column.setPropertiesSilent({
            format: cFormat
          });
        }
        if (typeof column.format === "object") {
          var valueFormatter = new ValueFormatter();
          column.setFormatter(valueFormatter.getFormatFunction(extend({}, column.format)));
        } else if (typeof column.format === "string") {
          var fmtr = _this.locator.getService("valueFormatter");
          column.setFormatter(fmtr.getFormatFunction({
            format: column.format
          }));
        }
        column.setPropertiesSilent({
          columnName: column.columnName || column.field
        });
      });
    };
    Aggregate2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (isNullOrUndefined(this.footerRenderer)) {
        this.initiateRender();
      }
      this.prepareSummaryInfo();
      this.footerRenderer.refresh();
      var cModel = new CaptionSummaryModelGenerator(this.parent);
      var gModel = new GroupSummaryModelGenerator(this.parent);
      if (gModel.getData().length !== 0 || !cModel.isEmpty()) {
        this.parent.notify(modelChanged, {});
      }
    };
    Aggregate2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.initiateRender, this);
      this.parent.on(uiUpdate, this.onPropertyChanged, this);
      this.parent.on(refreshAggregates, this.refresh, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Aggregate2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.footerRenderer.removeEventListener();
      this.parent.off(initialEnd, this.initiateRender);
      this.parent.off(dataReady, this.footerRenderer.refresh);
      this.parent.off(uiUpdate, this.onPropertyChanged);
      this.parent.off(refreshAggregates, this.refresh);
      this.parent.off(destroy, this.destroy);
      if (this.parent.element.querySelector("." + gridFooter)) {
        remove(this.parent.element.querySelector("." + gridFooter));
      }
    };
    Aggregate2.prototype.destroy = function() {
      this.removeEventListener();
    };
    Aggregate2.prototype.refresh = function(data, element) {
      var editedData = data instanceof Array ? data : [data];
      this.parent.notify(refreshFooterRenderer, editedData);
      if (element) {
        editedData.row = element;
      }
      if (this.parent.groupSettings.columns.length > 0) {
        this.parent.notify(groupAggregates, editedData);
      }
    };
    return Aggregate2;
  }()
);
function summaryIterator(aggregates, callback) {
  for (var i = 0; i < aggregates.length; i++) {
    for (var j = 0; j < aggregates[parseInt(i.toString(), 10)].columns.length; j++) {
      callback(aggregates[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)], aggregates[parseInt(i.toString(), 10)]);
    }
  }
}

// node_modules/@syncfusion/ej2-grids/src/grid/services/intersection-observer.js
var InterSectionObserver = (
  /** @class */
  function() {
    function InterSectionObserver2(element, options, movableEle) {
      var _this = this;
      this.fromWheel = false;
      this.touchMove = false;
      this.options = {};
      this.sentinelInfo = {
        "up": {
          check: function(rect, info) {
            var top = rect.top - _this.containerRect.top;
            var bottom = _this.containerRect.bottom > rect.bottom ? _this.containerRect.bottom - rect.bottom : 0;
            info.entered = top >= 0;
            return top + _this.options.pageHeight / 2 >= 0 || bottom > 0 && rect.bottom > 0;
          },
          axis: "Y"
        },
        "down": {
          check: function(rect, info) {
            var bottom = rect.bottom;
            info.entered = rect.bottom <= _this.containerRect.bottom;
            return bottom - _this.containerRect.top - _this.options.pageHeight / 2 <= _this.options.pageHeight / 2;
          },
          axis: "Y"
        },
        "right": {
          check: function(rect, info) {
            var right = rect.right;
            info.entered = right < _this.containerRect.right;
            return right - _this.containerRect.width <= _this.containerRect.right;
          },
          axis: "X"
        },
        "left": {
          check: function(rect, info) {
            var left = rect.left;
            info.entered = left > 0;
            return left + _this.containerRect.width >= _this.containerRect.left;
          },
          axis: "X"
        }
      };
      this.element = element;
      this.options = options;
      this.movableEle = movableEle;
    }
    InterSectionObserver2.prototype.observe = function(callback, onEnterCallback) {
      var _this = this;
      this.containerRect = this.options.container.getBoundingClientRect();
      EventHandler.add(this.options.container, "wheel", function() {
        return _this.fromWheel = true;
      }, this);
      EventHandler.add(this.options.container, "scroll", this.virtualScrollHandler(callback, onEnterCallback), this);
    };
    InterSectionObserver2.prototype.check = function(direction) {
      var info = this.sentinelInfo["" + direction];
      return info.check(this.element.getBoundingClientRect(), info);
    };
    InterSectionObserver2.prototype.virtualScrollHandler = function(callback, onEnterCallback) {
      var _this = this;
      var delay = Browser.info.name === "chrome" ? 200 : 100;
      var debounced100 = debounce(callback, delay);
      var debounced50 = debounce(callback, 50);
      this.options.prevTop = this.options.prevLeft = 0;
      return function(e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = _this.options.prevTop < top ? "down" : "up";
        direction = _this.options.prevLeft === left ? direction : _this.options.prevLeft < left ? "right" : "left";
        _this.options.prevTop = top;
        _this.options.prevLeft = left;
        var current = _this.sentinelInfo["" + direction];
        if (_this.options.axes.indexOf(current.axis) === -1) {
          return;
        }
        _this.containerRect = _this.options.container.getBoundingClientRect();
        var check = _this.check(direction);
        if (current.entered) {
          onEnterCallback(_this.element, current, direction, {
            top,
            left
          }, _this.fromWheel, check);
        }
        if (check) {
          var fn = debounced100;
          if (current.axis === "X") {
            fn = debounced50;
          }
          fn({
            direction,
            sentinel: current,
            offset: {
              top,
              left
            },
            focusElement: document.activeElement
          });
        }
        _this.fromWheel = false;
      };
    };
    InterSectionObserver2.prototype.setPageHeight = function(value) {
      this.options.pageHeight = value;
    };
    return InterSectionObserver2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/services/virtual-row-model-generator.js
var VirtualRowModelGenerator = (
  /** @class */
  function() {
    function VirtualRowModelGenerator2(parent) {
      this.cOffsets = {};
      this.cache = {};
      this.rowCache = {};
      this.data = {};
      this.groups = {};
      this.currentInfo = {};
      this.prevInfo = {};
      this.parent = parent;
      this.model = this.parent.pageSettings;
      this.rowModelGenerator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
    }
    VirtualRowModelGenerator2.prototype.columnInfiniteRows = function(data, e) {
      var result = [];
      if (e.requestType === "virtualscroll") {
        var rows = this.parent.getRowsObject();
        result.push.apply(result, this.rowModelGenerator.refreshRows(rows));
        if (this.parent.infiniteScrollSettings.enableCache) {
          var currentRowStartIndex = this.parent.frozenRows && this.parent.pageSettings.currentPage === 1 ? 0 : getRowIndexFromElement(this.parent.getContentTable().querySelector(".e-row:not(.e-addedrow)"));
          var newResult = result.slice(currentRowStartIndex, currentRowStartIndex + this.parent.pageSettings.pageSize * 3);
          if (this.parent.frozenRows && this.parent.pageSettings.currentPage !== 1) {
            newResult = result.slice(0, this.parent.frozenRows).concat(newResult);
          }
          result = newResult;
        }
      } else {
        result.push.apply(result, this.rowModelGenerator.generateRows(data, e));
      }
      return result;
    };
    VirtualRowModelGenerator2.prototype.generateRows = function(data, e) {
      var _this = this;
      if (this.parent.enableColumnVirtualization && this.parent.enableInfiniteScrolling) {
        return this.columnInfiniteRows(data, e);
      }
      var isManualRefresh = false;
      var info = e.virtualInfo = e.virtualInfo || e.requestType === "sorting" && checkVirtualSort(this.parent) && this.prevInfo || this.getData();
      this.prevInfo = info;
      var xAxis = info.sentinelInfo && info.sentinelInfo.axis === "X";
      var page = !xAxis && info.loadNext && !info.loadSelf ? info.nextInfo.page : info.page;
      var result = [];
      var indexes = this.getBlockIndexes(page);
      var loadedBlocks = [];
      if (this.currentInfo.blockIndexes) {
        indexes = info.blockIndexes = e.virtualInfo.blockIndexes = this.includePrevPage ? this.currentInfo.blockIndexes.slice(1) : this.currentInfo.blockIndexes.slice(0, this.currentInfo.blockIndexes.length - 1);
        isManualRefresh = true;
      }
      this.checkAndResetCache(e.requestType);
      if (isGroupAdaptive(this.parent) && this.parent.vcRows.length) {
        var dataRows = this.parent.vcRows.filter(function(row2) {
          return row2.isDataRow;
        });
        if (this.parent.isManualRefresh && dataRows.length === data["records"].length || !this.parent.isManualRefresh) {
          return result = this.parent.vcRows;
        }
      }
      if (this.parent.enableColumnVirtualization) {
        for (var i = 0; i < info.blockIndexes.length; i++) {
          if (this.isBlockAvailable(info.blockIndexes[parseInt(i.toString(), 10)])) {
            this.cache[info.blockIndexes[parseInt(i.toString(), 10)]] = this.rowModelGenerator.refreshRows(this.cache[info.blockIndexes[parseInt(i.toString(), 10)]]);
          }
        }
      }
      var values = info.blockIndexes;
      var _loop_1 = function(i2) {
        if (!this_1.isBlockAvailable(values[parseInt(i2.toString(), 10)])) {
          var startIdx = !isNullOrUndefined(this_1.startIndex) ? this_1.startIndex : this_1.getStartIndex(values[parseInt(i2.toString(), 10)], data);
          startIdx = isGroupAdaptive(this_1.parent) && !this_1.parent.vcRows.length && e.requestType === "sorting" ? 0 : startIdx;
          var rows = this_1.rowModelGenerator.generateRows(data, {
            virtualInfo: info,
            startIndex: startIdx
          });
          if (isGroupAdaptive(this_1.parent) && !this_1.parent.vcRows.length) {
            this_1.recordsCount = data.records.length;
            this_1.parent.vRows = rows;
            this_1.parent.vcRows = rows;
            this_1.parent.notify(refreshVirtualMaxPage, {});
          }
          var median = void 0;
          if (isGroupAdaptive(this_1.parent)) {
            this_1.getGroupVirtualRecordsByIndex(rows);
          } else {
            if (isManualRefresh) {
              this_1.setBlockForManualRefresh(this_1.cache, indexes, rows);
            } else if (e.requestType === "sorting" && checkVirtualSort(this_1.parent)) {
              var visiblePage = getVisiblePage(info.blockIndexes);
              var prevEndIndex = 0;
              for (var i_1 = 0; i_1 < visiblePage.length; i_1++) {
                var indexes_1 = this_1.getBlockIndexes(visiblePage[parseInt(i_1.toString(), 10)]);
                var startIndex = this_1.model.pageSize * i_1;
                var endIndex = startIndex + this_1.model.pageSize;
                if (this_1.parent.allowGrouping && this_1.parent.groupSettings.columns.length) {
                  var dataRowObject = rows.filter(function(row2) {
                    return row2.isDataRow;
                  }).slice(startIndex, endIndex);
                  startIndex = prevEndIndex;
                  endIndex = rows.indexOf(dataRowObject[dataRowObject.length - 1]) + 1;
                }
                var pageRecord = rows.slice(startIndex, endIndex);
                var median_1 = ~~Math.max(pageRecord.length, this_1.model.pageSize) / 2;
                if (!this_1.isBlockAvailable(indexes_1[0])) {
                  this_1.cache[indexes_1[0]] = pageRecord.slice(0, median_1);
                }
                if (!this_1.isBlockAvailable(indexes_1[1])) {
                  this_1.cache[indexes_1[1]] = pageRecord.slice(median_1);
                }
                prevEndIndex = endIndex;
              }
            } else {
              median = ~~Math.max(rows.length, this_1.model.pageSize) / 2;
              if (!this_1.isBlockAvailable(indexes[0])) {
                this_1.cache[indexes[0]] = rows.slice(0, median);
              }
              if (!this_1.isBlockAvailable(indexes[1])) {
                this_1.cache[indexes[1]] = rows.slice(median);
              }
            }
          }
        }
        if (this_1.parent.groupSettings.columns.length && !xAxis && this_1.cache[values[parseInt(i2.toString(), 10)]] && !this_1.parent.groupSettings.enableLazyLoading) {
          this_1.cache[values[parseInt(i2.toString(), 10)]] = this_1.updateGroupRow(this_1.cache[values[parseInt(i2.toString(), 10)]], values[parseInt(i2.toString(), 10)]);
        }
        if (!e.renderMovableContent && !e.renderFrozenRightContent && this_1.cache[values[parseInt(i2.toString(), 10)]]) {
          result.push.apply(result, this_1.cache[values[parseInt(i2.toString(), 10)]]);
          var DataRecord_1 = [];
          if (this_1.parent.enableVirtualization && this_1.parent.groupSettings.columns.length) {
            result.forEach(function(data2) {
              if (!DataRecord_1.includes(data2)) {
                DataRecord_1.push(data2);
              }
            });
          }
          result = DataRecord_1.length ? DataRecord_1 : result;
        }
        if (this_1.isBlockAvailable(values[parseInt(i2.toString(), 10)])) {
          loadedBlocks.push(values[parseInt(i2.toString(), 10)]);
        }
      };
      var this_1 = this;
      for (var i = 0; i < values.length; i++) {
        _loop_1(i);
      }
      if (isGroupAdaptive(this.parent) && this.parent.vcRows.length && e.requestType === "sorting" && e.scrollTop.top !== 0) {
        return result = this.parent.vcRows;
      }
      info.blockIndexes = loadedBlocks;
      var grouping = "records";
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        this.parent.currentViewData["" + grouping] = result.map(function(m) {
          return m.data;
        });
      } else {
        this.parent.currentViewData = result.map(function(m) {
          return m.data;
        });
      }
      if (e.requestType === "grouping") {
        this.parent.currentViewData["" + grouping] = this.parent.currentViewData["" + grouping].filter(function(item, index) {
          return _this.parent.currentViewData["" + grouping].indexOf(item) === index;
        });
      }
      if (isGroupAdaptive(this.parent) && this.parent.vcRows.length) {
        if (["save", "delete"].some(function(value) {
          return e.requestType === value;
        })) {
          return result = this.parent.vcRows;
        }
      }
      return result;
    };
    VirtualRowModelGenerator2.prototype.setBlockForManualRefresh = function(cache, blocks, rows) {
      var size = this.model.pageSize / 2;
      if (this.includePrevPage) {
        cache[blocks[0] - 1] = rows.slice(0, size);
        cache[blocks[0]] = rows.slice(size, size * 2);
        cache[blocks[1]] = rows.slice(size * 2, size * 3);
        cache[blocks[2]] = rows.slice(size * 3, size * 4);
      } else {
        cache[blocks[0]] = rows.slice(0, size);
        cache[blocks[1]] = rows.slice(size, size * 2);
        cache[blocks[2]] = rows.slice(size * 2, size * 3);
        cache[blocks[2] + 1] = rows.slice(size * 3, size * 4);
      }
    };
    VirtualRowModelGenerator2.prototype.getBlockIndexes = function(page) {
      return [page + (page - 1), page * 2];
    };
    VirtualRowModelGenerator2.prototype.getPage = function(block) {
      return block % 2 === 0 ? block / 2 : (block + 1) / 2;
    };
    VirtualRowModelGenerator2.prototype.isBlockAvailable = function(value) {
      return value in this.cache;
    };
    VirtualRowModelGenerator2.prototype.getData = function() {
      return {
        page: this.model.currentPage,
        blockIndexes: this.getBlockIndexes(this.model.currentPage),
        direction: "down",
        columnIndexes: this.parent.getColumnIndexesInView()
      };
    };
    VirtualRowModelGenerator2.prototype.getStartIndex = function(blk, data, full) {
      if (full === void 0) {
        full = true;
      }
      var page = this.getPage(blk);
      var even = blk % 2 === 0;
      var index = (page - 1) * this.model.pageSize;
      return full || !even ? index : index + ~~(this.model.pageSize / 2);
    };
    VirtualRowModelGenerator2.prototype.getColumnIndexes = function(content2) {
      var _this = this;
      if (content2 === void 0) {
        content2 = this.parent.getHeaderContent().querySelector("." + headerContent);
      }
      var indexes = [];
      var sLeft = content2.scrollLeft | 0;
      var keys = Object.keys(this.cOffsets);
      var cWidth = content2.getBoundingClientRect().width;
      sLeft = Math.min(this.cOffsets[keys.length - 1] - cWidth, sLeft);
      var calWidth = Browser.isDevice ? 2 * cWidth : cWidth / 2;
      var left = sLeft + cWidth + (sLeft === 0 ? calWidth : 0);
      var frzLeftWidth = 0;
      if (this.parent.isFrozenGrid()) {
        frzLeftWidth = this.parent.leftrightColumnWidth("left");
        if (this.parent.getFrozenMode() === leftRight) {
          var rightCol = this.parent.getVisibleFrozenRightCount();
          keys.splice(keys.length - 1 - rightCol, rightCol);
        }
      }
      keys.some(function(offset) {
        var iOffset = Number(offset);
        var offsetVal = _this.cOffsets["" + offset];
        var border = sLeft - calWidth + frzLeftWidth <= offsetVal && left + calWidth >= offsetVal;
        if (border) {
          indexes.push(iOffset);
        }
        return left + calWidth < offsetVal;
      });
      return indexes;
    };
    VirtualRowModelGenerator2.prototype.checkAndResetCache = function(action) {
      var actions = ["paging", "refresh", "sorting", "filtering", "searching", "grouping", "ungrouping", "reorder", "save", "delete"];
      var clear = actions.some(function(value) {
        return action === value;
      });
      if (clear) {
        this.cache = {};
        this.data = {};
        this.groups = {};
      }
      return clear;
    };
    VirtualRowModelGenerator2.prototype.refreshColOffsets = function() {
      var _this = this;
      var col = 0;
      this.cOffsets = {};
      var gLen = this.parent.groupSettings.columns.length;
      var cols = this.parent.columns;
      var cLen = cols.length;
      var isVisible = function(column) {
        return column.visible && (!_this.parent.groupSettings.showGroupedColumn ? _this.parent.groupSettings.columns.indexOf(column.field) < 0 : column.visible);
      };
      var c = this.parent.groupSettings.columns;
      for (var i = 0; i < c.length; i++) {
        this.cOffsets[parseInt(i.toString(), 10)] = (this.cOffsets[i - 1] | 0) + 30;
      }
      var blocks = Array.apply(null, Array(cLen)).map(function() {
        return col++;
      });
      for (var j = 0; j < blocks.length; j++) {
        blocks[parseInt(j.toString(), 10)] = blocks[parseInt(j.toString(), 10)] + gLen;
        this.cOffsets[blocks[parseInt(j.toString(), 10)]] = (this.cOffsets[blocks[parseInt(j.toString(), 10)] - 1] | 0) + (isVisible(cols[parseInt(j.toString(), 10)]) ? parseInt(cols[parseInt(j.toString(), 10)].width, 10) : 0);
      }
    };
    VirtualRowModelGenerator2.prototype.updateGroupRow = function(current, block) {
      var currentFirst = current[0];
      var rows = [];
      var keys = Object.keys(this.cache);
      for (var i = 0; i < keys.length; i++) {
        if (Number(keys[parseInt(i.toString(), 10)]) < block) {
          rows = rows.concat(this.cache[keys[parseInt(i.toString(), 10)]]);
        }
      }
      if (currentFirst && currentFirst.isDataRow || block % 2 === 0) {
        return current;
      }
      return this.iterateGroup(current, rows);
    };
    VirtualRowModelGenerator2.prototype.iterateGroup = function(current, rows) {
      var currentFirst = current[0];
      var offset = 0;
      if (currentFirst && currentFirst.isDataRow) {
        return current;
      }
      var isPresent = current.some(function(row2) {
        return rows.some(function(oRow, index) {
          var res = oRow && oRow.data.field !== void 0 && oRow.data.field === row2.data.field && oRow.data.key === row2.data.key;
          if (res) {
            offset = index;
          }
          return res;
        });
      });
      if (isPresent) {
        current.shift();
        current = this.iterateGroup(current, rows.slice(offset));
      }
      return current;
    };
    VirtualRowModelGenerator2.prototype.getRows = function() {
      var rows = [];
      var keys = Object.keys(this.cache);
      for (var i = 0; i < keys.length; i++) {
        rows = rows.concat(this.cache[keys[parseInt(i.toString(), 10)]]);
      }
      return rows;
    };
    VirtualRowModelGenerator2.prototype.generateCells = function(foreignKeyData2) {
      var cells = [];
      var cols = this.parent.columnModel;
      for (var i = 0; i < cols.length; i++) {
        cells.push(this.rowModelGenerator.generateCell(cols[parseInt(i.toString(), 10)], null, null, null, null, foreignKeyData2));
      }
      return cells;
    };
    VirtualRowModelGenerator2.prototype.getGroupVirtualRecordsByIndex = function(rows) {
      var blocks = this.parent.contentModule.getGroupedTotalBlocks();
      var blockSize = this.parent.contentModule.getBlockSize();
      for (var i = 1; i <= blocks; i++) {
        var count2 = 0;
        this.cache[parseInt(i.toString(), 10)] = [];
        for (var j = (i - 1) * blockSize; j < rows.length; j++) {
          if (count2 === blockSize) {
            break;
          }
          this.cache[parseInt(i.toString(), 10)].push(rows[parseInt(j.toString(), 10)]);
          if (rows[parseInt(j.toString(), 10)].isDataRow) {
            count2++;
          }
        }
      }
    };
    return VirtualRowModelGenerator2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/virtual-content-renderer.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VirtualContentRenderer = (
  /** @class */
  function(_super) {
    __extends30(VirtualContentRenderer2, _super);
    function VirtualContentRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.prevHeight = 0;
      _this.startIndex = 0;
      _this.preStartIndex = 0;
      _this.preventEvent = false;
      _this.actions = ["filtering", "searching", "grouping", "ungrouping"];
      _this.offsets = {};
      _this.tmpOffsets = {};
      _this.virtualEle = new VirtualElementHandler();
      _this.offsetKeys = [];
      _this.isFocused = false;
      _this.isSelection = false;
      _this.isBottom = false;
      _this.diff = 0;
      _this.heightChange = false;
      _this.isTop = false;
      _this.empty = void 0;
      _this.isCancel = false;
      _this.requestTypes = ["beginEdit", "cancel", "delete", "add", "save", "sorting"];
      _this.isNormaledit = _this.parent.editSettings.mode === "Normal";
      _this.virtualData = {};
      _this.virtualInfiniteData = {};
      _this.emptyRowData = {};
      _this.isContextMenuOpen = false;
      _this.isSelectionScroll = false;
      _this.validationCheck = false;
      _this.locator = locator;
      _this.eventListener("on");
      _this.widthServices = locator.getService("widthService");
      _this.parent.on(columnVisibilityChanged, _this.setVisible, _this);
      _this.vgenerator = _this.generator;
      return _this;
    }
    VirtualContentRenderer2.prototype.renderTable = function() {
      this.header = this.locator.getService("rendererFactory").getRenderer(RenderType.Header);
      _super.prototype.renderTable.call(this);
      this.virtualEle.table = this.getTable();
      this.virtualEle.content = this.content = this.getPanel().querySelector("." + content);
      this.virtualEle.renderWrapper(this.parent.height);
      this.virtualEle.renderPlaceHolder();
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        this.virtualEle.wrapper.style.position = "absolute";
      }
      var debounceEvent = this.parent.dataSource instanceof DataManager && !this.parent.dataSource.dataSource.offline;
      var opt = {
        container: this.content,
        pageHeight: this.getBlockHeight() * 2,
        debounceEvent,
        axes: this.parent.enableColumnVirtualization ? ["X", "Y"] : ["Y"]
      };
      this.observer = new InterSectionObserver(this.virtualEle.wrapper, opt);
    };
    VirtualContentRenderer2.prototype.renderEmpty = function(tbody2) {
      this.getTable().appendChild(tbody2);
      if (this.parent.frozenRows) {
        this.parent.getHeaderContent().querySelector(tbody).innerHTML = "";
      }
      this.virtualEle.adjustTable(0, 0);
    };
    VirtualContentRenderer2.prototype.getReorderedFrozenRows = function(args) {
      var blockIndex = args.virtualInfo.blockIndexes;
      var colsIndex = args.virtualInfo.columnIndexes;
      var page = args.virtualInfo.page;
      args.virtualInfo.blockIndexes = [1, 2];
      args.virtualInfo.page = 1;
      if (!args.renderMovableContent) {
        args.virtualInfo.columnIndexes = [];
      }
      var recordslength = this.parent.getCurrentViewRecords().length;
      var firstRecords = this.parent.renderModule.data.dataManager.dataSource.json.slice(0, recordslength);
      var virtualRows = this.vgenerator.generateRows(firstRecords, args);
      args.virtualInfo.blockIndexes = blockIndex;
      args.virtualInfo.columnIndexes = colsIndex;
      args.virtualInfo.page = page;
      return virtualRows.splice(0, this.parent.frozenRows);
    };
    VirtualContentRenderer2.prototype.scrollListener = function(scrollArgs) {
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization && (scrollArgs.direction === "up" || scrollArgs.direction === "down")) {
        return;
      }
      this.scrollAfterEdit();
      if (this.parent.enablePersistence) {
        this.parent.scrollPosition = scrollArgs.offset;
      }
      if (this.preventEvent || this.parent.isDestroyed) {
        this.preventEvent = false;
        return;
      }
      if (isNullOrUndefined(document.activeElement)) {
        this.isFocused = false;
      } else {
        this.isFocused = this.content === closest(document.activeElement, "." + content) || this.content === document.activeElement;
      }
      if (this.parent.islazyloadRequest && scrollArgs.direction === "down") {
        this.parent.removeMaskRow();
        this.parent.islazyloadRequest = false;
        return;
      }
      var info = scrollArgs.sentinel;
      var viewInfo = this.currentInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset);
      if (isGroupAdaptive(this.parent)) {
        if (viewInfo.blockIndexes && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString()) {
          this.parent.removeMaskRow();
          return;
        } else {
          viewInfo.event = "refresh-virtual-block";
          if (!isNullOrUndefined(viewInfo.offsets)) {
            viewInfo.offsets.top = this.content.scrollTop;
          }
          this.parent.pageSettings.currentPage = viewInfo.page;
          if (this.parent.enableVirtualMaskRow) {
            this.parent.showMaskRow(info.axis);
            this.parent.addShimmerEffect();
          }
          if (this.parent.editSettings.showAddNewRow) {
            this.parent.closeEdit();
          }
          this.parent.notify(viewInfo.event, {
            requestType: "virtualscroll",
            virtualInfo: viewInfo,
            focusElement: scrollArgs.focusElement
          });
          return;
        }
      }
      if (this.prevInfo && (info.axis === "Y" && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString() || info.axis === "X" && this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString())) {
        this.parent.removeMaskRow();
        if (Browser.isIE) {
          this.parent.hideSpinner();
        }
        this.requestType = this.requestType === "virtualscroll" ? this.empty : this.requestType;
        if (info.axis === "Y") {
          this.restoreEdit();
        }
        if (this.parent.groupSettings.enableLazyLoading && this.prevInfo.blockIndexes[0] === 1 && viewInfo.blockIndexes[0] === 1 && scrollArgs.direction === "up") {
          this.virtualEle.adjustTable(0, viewInfo.offsets.top < this.offsets[1] ? 0 : this.getBlockHeight());
        }
        return;
      }
      this.parent.setColumnIndexesInView(this.parent.enableColumnVirtualization ? viewInfo.columnIndexes : []);
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        this.parent.pageSettings.currentPage = viewInfo.loadNext && !viewInfo.loadSelf ? viewInfo.nextInfo.page : viewInfo.page;
      }
      this.requestType = "virtualscroll";
      if (this.parent.enableVirtualMaskRow) {
        this.parent.showMaskRow(info.axis);
        this.parent.addShimmerEffect();
      }
      this.parent.islazyloadRequest = false;
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.closeEdit();
      }
      this.parent.notify(viewInfo.event, {
        requestType: "virtualscroll",
        virtualInfo: viewInfo,
        focusElement: scrollArgs.focusElement
      });
      if (this.parent.enableColumnVirtualization && !this.parent.getContentTable().querySelector("tr.e-row")) {
        this.parent.removeMaskRow();
        this.appendContent(void 0, void 0, {
          requestType: "virtualscroll",
          virtualInfo: viewInfo,
          focusElement: scrollArgs.focusElement
        });
        this.prevInfo = viewInfo;
      }
    };
    VirtualContentRenderer2.prototype.block = function(blk) {
      return this.vgenerator.isBlockAvailable(blk);
    };
    VirtualContentRenderer2.prototype.getInfoFromView = function(direction, info, e) {
      var isBlockAdded = false;
      var tempBlocks = [];
      var infoType = {
        direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.preStartIndex,
        endIndex: this.preEndIndex
      };
      infoType.page = this.getPageFromTop(e.top, infoType);
      infoType.blockIndexes = tempBlocks = this.vgenerator.getBlockIndexes(infoType.page);
      infoType.loadSelf = !this.vgenerator.isBlockAvailable(tempBlocks[infoType.block]);
      var blocks = this.ensureBlocks(infoType);
      if (this.activeKey === "upArrow" && infoType.blockIndexes.toString() !== blocks.toString()) {
        var newBlock = blocks[blocks.length - 1];
        if (infoType.blockIndexes.indexOf(newBlock) === -1) {
          isBlockAdded = true;
        }
      }
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        infoType.blockIndexes = blocks;
      }
      infoType.loadNext = !blocks.filter(function(val) {
        return tempBlocks.indexOf(val) === -1;
      }).every(this.block.bind(this));
      infoType.event = infoType.loadNext || infoType.loadSelf ? modelChanged : refreshVirtualBlock;
      infoType.nextInfo = infoType.loadNext ? {
        page: Math.max(1, infoType.page + (direction === "down" ? 1 : -1))
      } : {};
      if (isBlockAdded) {
        infoType.blockIndexes = [infoType.blockIndexes[0] - 1, infoType.blockIndexes[0], infoType.blockIndexes[0] + 1];
      }
      if (this.activeKey === "downArrow" && !isNaN(this.rowIndex)) {
        var firstBlock = Math.ceil(this.rowIndex / this.getBlockSize());
        if (firstBlock !== 1 && (infoType.blockIndexes[1] !== firstBlock || infoType.blockIndexes.length < 3)) {
          infoType.blockIndexes = [firstBlock - 1, firstBlock, firstBlock + 1];
        }
      }
      infoType.columnIndexes = info.axis === "X" ? this.vgenerator.getColumnIndexes() : this.parent.getColumnIndexesInView();
      if (this.parent.enableColumnVirtualization && info.axis === "X") {
        infoType.event = refreshVirtualBlock;
      }
      return infoType;
    };
    VirtualContentRenderer2.prototype.ensureBlocks = function(info) {
      var _this = this;
      var index = info.blockIndexes[info.block];
      var mIdx;
      var old = index;
      var max = Math.max;
      var indexes = info.direction === "down" ? [max(index, 1), ++index, ++index] : [max(index - 1, 1), index, index + 1];
      this.prevInfo = this.prevInfo || this.vgenerator.getData();
      indexes = indexes.filter(function(val, ind) {
        return indexes.indexOf(val) === ind;
      });
      if (this.prevInfo.blockIndexes.toString() === indexes.toString()) {
        return indexes;
      }
      if (info.loadSelf || info.direction === "down" && this.isEndBlock(old)) {
        indexes = this.vgenerator.getBlockIndexes(info.page);
      }
      indexes.some(function(val, ind) {
        var result = val === (isGroupAdaptive(_this.parent) ? _this.getGroupedTotalBlocks() : _this.getTotalBlocks());
        if (result) {
          mIdx = ind;
        }
        return result;
      });
      if (mIdx !== void 0) {
        indexes = indexes.slice(0, mIdx + 1);
        if (info.block === 0 && indexes.length === 1 && this.vgenerator.isBlockAvailable(indexes[0] - 1)) {
          indexes = [indexes[0] - 1, indexes[0]];
        }
      }
      return indexes;
    };
    VirtualContentRenderer2.prototype.appendContent = function(target, newChild, e) {
      var _this = this;
      var info = e.virtualInfo.sentinelInfo && e.virtualInfo.sentinelInfo.axis === "Y" && this.currentInfo.page && this.currentInfo.page !== e.virtualInfo.page ? this.currentInfo : e.virtualInfo;
      this.prevInfo = this.prevInfo || e.virtualInfo;
      var cBlock = info.columnIndexes[0] - 1;
      var cOffset = this.getColumnOffset(cBlock);
      var width;
      var blocks = info.blockIndexes;
      if (this.parent.groupSettings.columns.length) {
        this.refreshOffsets();
      }
      if (this.parent.height === "100%") {
        this.parent.element.style.height = "100%";
      }
      var vHeight = this.parent.height.toString().indexOf("%") < 0 ? this.content.getBoundingClientRect().height : this.parent.element.getBoundingClientRect().height;
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        vHeight = 0;
      }
      var reduceWidth = 0;
      if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid()) {
        var frzLeftWidth_1 = 0;
        this.parent.getColumns().filter(function(col) {
          if (col.visible) {
            reduceWidth += parseInt(col.width.toString(), 10);
            if (col.freeze === "Left") {
              frzLeftWidth_1 += parseInt(col.width.toString(), 10);
            }
          }
        });
        var cIndex = info.columnIndexes;
        width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + "";
        if (cBlock > this.parent.getVisibleFrozenLeftCount()) {
          cOffset = cOffset - frzLeftWidth_1;
        }
        this.resetStickyLeftPos(cOffset, newChild);
      }
      if (!this.requestTypes.some(function(value) {
        return value === _this.requestType;
      })) {
        var translate = this.getTranslateY(this.content.scrollTop, vHeight, info);
        if (this.parent.groupSettings.enableLazyLoading && info && this.prevInfo && this.prevInfo.blockIndexes[0] === 1 && info.blockIndexes[0] === 1 && info.direction === "up") {
          this.virtualEle.adjustTable(0, this.content.scrollTop < this.offsets[1] ? 0 : this.getBlockHeight());
        } else {
          this.virtualEle.adjustTable(cOffset, translate);
        }
      }
      if (this.parent.enableColumnVirtualization) {
        this.header.virtualEle.adjustTable(cOffset, 0);
      }
      if (this.parent.enableColumnVirtualization) {
        var cIndex = info.columnIndexes;
        width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + "";
        if (this.parent.isFrozenGrid()) {
          width = reduceWidth.toString();
          if (this.parent.allowResizing) {
            this.parent.getHeaderTable().style.width = reduceWidth + "px";
            this.parent.getContentTable().style.width = reduceWidth + "Px";
          }
        }
        this.header.virtualEle.setWrapperWidth(width);
      }
      this.virtualEle.setWrapperWidth(width, Browser.isIE || Browser.info.name === "edge");
      if (this.parent.enableColumnVirtualization && isNullOrUndefined(target) && isNullOrUndefined(newChild)) {
        return;
      }
      if (!isNullOrUndefined(target) && !isNullOrUndefined(target.parentNode)) {
        remove(target);
      }
      var tbody2 = this.parent.element.querySelector("." + content).querySelector(tbody);
      if (tbody2) {
        remove(tbody2);
        target = null;
      }
      var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);
      if (!isReact) {
        target = this.parent.createElement(tbody, {
          attrs: {
            role: "rowgroup"
          }
        });
        target.appendChild(newChild);
      } else {
        target = newChild;
      }
      if (this.parent.frozenRows && e.requestType === "virtualscroll" && (this.parent.pageSettings.currentPage === 1 || this.isInfiniteColumnvirtualization())) {
        for (var i = 0; i < this.parent.frozenRows; i++) {
          target.children[0].remove();
        }
      }
      this.getTable().appendChild(target);
      this.requestType = this.requestType === "virtualscroll" ? this.empty : this.requestType;
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization && (info.direction === "right" || info.direction === "left")) {
        this.content.scrollTop = this.currentInfo.offsets.top;
        this.content.scrollLeft = this.currentInfo.offsets.left;
      }
      if (this.parent.groupSettings.columns.length) {
        if (!isGroupAdaptive(this.parent) && info.direction === "up") {
          var blk = this.offsets[this.getTotalBlocks()] - this.prevHeight;
          var sTop = this.content.scrollTop;
          this.content.scrollTop = sTop + blk;
        }
        this.setVirtualHeight();
        if (!this.parent.groupSettings.enableLazyLoading) {
          this.observer.setPageHeight(this.getOffset(blocks[blocks.length - 1]) - this.getOffset(blocks[0] - 1));
        }
      }
      if (e.requestType === "ungrouping" && !this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length === 0) {
        this.observer.setPageHeight(this.getBlockHeight() * 2);
      }
      this.prevInfo = info;
      if (this.isFocused && this.activeKey !== "downArrow" && this.activeKey !== "upArrow") {
        this.content.focus();
      }
      var lastPage = Math.ceil(this.getTotalBlocks() / 2);
      if (this.isBottom) {
        this.isBottom = false;
        this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 1];
      }
      if ((this.parent.pageSettings.currentPage + 1 === lastPage || this.parent.pageSettings.currentPage === lastPage) && blocks.length === 2 && e.requestType === "delete") {
        this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 1];
      }
      if (this.parent.pageSettings.currentPage === lastPage && blocks.length === 1) {
        this.isBottom = true;
        this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 2];
      }
      if (this.isTop) {
        this.parent.getContent().firstElementChild.scrollTop = 0;
        this.isTop = false;
      }
      if (e.requestType === "virtualscroll" && e.virtualInfo.sentinelInfo.axis === "X") {
        this.parent.notify(autoCol, {});
      }
      this.focusCell(e);
      this.restoreEdit(e);
      this.restoreAdd();
      this.ensureSelectedRowPosition();
      this.validationScrollLeft();
      if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization) {
        this.widthServices.refreshFrozenScrollbar();
      }
      if (!this.initialRowTop) {
        var gridTop = this.parent.element.getBoundingClientRect().top;
        if (this.parent.getRowByIndex(0)) {
          this.initialRowTop = this.parent.getRowByIndex(0).getBoundingClientRect().top - gridTop;
        }
      }
    };
    VirtualContentRenderer2.prototype.validationScrollLeft = function() {
      if (this.validationCheck) {
        if (this.validationCol) {
          var offset = this.vgenerator.cOffsets[this.validationCol.index - this.parent.getVisibleFrozenColumns() - 1];
          this.validationCol = null;
          this.content.scrollLeft = offset;
        } else {
          this.validationCheck = false;
          this.parent.editModule.editFormValidate();
        }
      }
    };
    VirtualContentRenderer2.prototype.ensureSelectedRowPosition = function() {
      if (!this.isSelection && this.isSelectionScroll && !isNullOrUndefined(this.selectRowIndex)) {
        this.isSelectionScroll = false;
        var row2 = this.parent.getRowByIndex(this.selectRowIndex);
        if (row2 && !this.isRowInView(row2)) {
          this.rowSelected({
            rowIndex: this.selectRowIndex,
            row: row2
          }, true);
        }
      }
    };
    VirtualContentRenderer2.prototype.focusCell = function(e) {
      if (this.activeKey !== "upArrow" && this.activeKey !== "downArrow") {
        return;
      }
      var row2 = this.parent.getRowByIndex(this.rowIndex);
      var cell = row2.cells[this.cellIndex];
      cell.focus({
        preventScroll: true
      });
      if (!this.parent.selectionSettings.checkboxOnly) {
        this.parent.selectRow(parseInt(row2.getAttribute(dataRowIndex), 10));
      }
      this.activeKey = this.empty;
    };
    VirtualContentRenderer2.prototype.restoreEdit = function(e) {
      if (this.isNormaledit) {
        if (this.parent.editSettings.allowEditing && this.parent.editModule && !isNullOrUndefined(this.editedRowIndex)) {
          var row2 = this.getRowByIndex(this.editedRowIndex);
          var content2 = this.content;
          var keys = Object.keys(this.virtualData);
          var isXaxis = e && e.virtualInfo && e.virtualInfo.sentinelInfo.axis === "X";
          if (keys.length && row2 && !content2.querySelector("." + editedRow) && ["sorting", "filtering", "grouping", "refresh", "searching", "ungrouping", "reorder"].indexOf(e.requestType) === -1) {
            var top_1 = row2.getBoundingClientRect().top;
            if (isXaxis || top_1 < this.content.offsetHeight && top_1 > this.parent.getRowHeight()) {
              this.parent.isEdit = false;
              this.parent.editModule.startEdit(row2);
            }
          }
          if (row2 && this.content.querySelector("." + editedRow) && !keys.length) {
            var rowData = !this.parent.enableVirtualization && this.parent.enableColumnVirtualization ? this.enableCacheOnInfiniteColumnVirtual() ? this.virtualInfiniteData : extend({}, this.parent.getCurrentViewRecords()[this.editedRowIndex]) : extend({}, this.getRowObjectByIndex(this.editedRowIndex));
            this.virtualData = this.getVirtualEditedData(rowData);
          }
        }
        this.restoreAdd();
      }
    };
    VirtualContentRenderer2.prototype.getVirtualEditedData = function(rowData) {
      var editForms = [].slice.call(this.parent.element.getElementsByClassName("e-gridform"));
      var isFormDestroyed = this.parent.editModule && this.parent.editModule.formObj && this.parent.editModule.formObj.isDestroyed;
      if (!isFormDestroyed) {
        for (var i = 0; i < editForms.length; i++) {
          rowData = this.parent.editModule.getCurrentEditedData(editForms[parseInt(i.toString(), 10)], rowData);
        }
      }
      return rowData;
    };
    VirtualContentRenderer2.prototype.restoreAdd = function() {
      var startAdd = !this.parent.element.querySelector("." + addedRow);
      if (this.isNormaledit && this.isAdd && startAdd) {
        var isTop = this.parent.editSettings.newRowPosition === "Top" && this.content.scrollTop < this.parent.getRowHeight();
        var isBottom = this.parent.editSettings.newRowPosition === "Bottom" && this.parent.pageSettings.currentPage === this.maxPage;
        if (isTop || isBottom) {
          this.parent.isEdit = false;
          this.parent.addRecord();
        }
      }
    };
    VirtualContentRenderer2.prototype.onDataReady = function(e) {
      if (!isNullOrUndefined(e.count)) {
        this.count = e.count;
        this.maxPage = Math.ceil((this.parent.groupSettings.columns.length && this.parent.vcRows.length ? this.parent.vcRows.length : e.count) / this.parent.pageSettings.pageSize);
      }
      this.vgenerator.checkAndResetCache(e.requestType);
      if (["refresh", "filtering", "searching", "grouping", "ungrouping", "reorder", void 0].some(function(value) {
        return e.requestType === value;
      })) {
        this.refreshOffsets();
      }
      this.setVirtualHeight();
      this.resetScrollPosition(e.requestType);
    };
    VirtualContentRenderer2.prototype.setVirtualHeight = function(height) {
      var width = this.parent.enableColumnVirtualization ? this.getColumnOffset(this.parent.columns.length + this.parent.groupSettings.columns.length - 1) + "px" : "100%";
      var virtualHeight = this.offsets[isGroupAdaptive(this.parent) && this.count !== 0 ? this.getGroupedTotalBlocks() : this.getTotalBlocks()];
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        virtualHeight = 0;
      }
      var totalBlocks = isGroupAdaptive(this.parent) && this.count !== 0 ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      var lastPage = Math.ceil(totalBlocks / 2);
      var placeHolderBottom = Math.round(this.virtualEle.placeholder.getBoundingClientRect().bottom);
      var wrapperBottom = Math.round(this.virtualEle.wrapper.getBoundingClientRect().bottom);
      if ((this.currentInfo.page === lastPage || this.currentInfo.page + 1 === lastPage) && this.currentInfo.direction === "down" && placeHolderBottom > wrapperBottom && !this.diff) {
        this.diff = placeHolderBottom - wrapperBottom;
      }
      if (this.diff && this.currentInfo.page === lastPage && placeHolderBottom > wrapperBottom) {
        virtualHeight -= this.diff;
        this.heightChange = true;
      } else if (this.diff && this.heightChange && this.requestType === "virtualscroll") {
        virtualHeight -= this.diff;
        this.heightChange = false;
      }
      this.virtualEle.setVirtualHeight(virtualHeight, width);
      if (this.virtualEle && this.virtualEle.wrapper) {
        if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
          this.virtualEle.wrapper.style.minHeight = "";
        } else {
          this.virtualEle.wrapper.style.minHeight = !isNullOrUndefined(virtualHeight) ? formatUnit(this.parent.height) : "0px";
        }
      }
      if (this.parent.enableColumnVirtualization) {
        this.header.virtualEle.setVirtualHeight(1, width);
      }
    };
    VirtualContentRenderer2.prototype.getPageFromTop = function(sTop, info) {
      var _this = this;
      var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      var page = 0;
      this.offsetKeys.some(function(offset) {
        var iOffset = Number(offset);
        var border = sTop <= _this.offsets["" + offset] || iOffset === total && sTop > _this.offsets["" + offset];
        if (border) {
          if (_this.offsetKeys.length % 2 !== 0 && iOffset.toString() === _this.offsetKeys[_this.offsetKeys.length - 2] && sTop <= _this.offsets[_this.offsetKeys.length - 1]) {
            iOffset = iOffset + 1;
          }
          info.block = iOffset % 2 === 0 ? 1 : 0;
          page = Math.max(1, Math.min(_this.vgenerator.getPage(iOffset), _this.maxPage));
        }
        return border;
      });
      return page;
    };
    VirtualContentRenderer2.prototype.getTranslateY = function(sTop, cHeight, info, isOnenter) {
      if (info === void 0) {
        info = {
          page: this.getPageFromTop(sTop, {})
        };
        info.blockIndexes = this.vgenerator.getBlockIndexes(info.page);
      }
      var block = (info.blockIndexes[0] || 1) - 1;
      var translate = this.getOffset(block);
      var endTranslate = this.getOffset(info.blockIndexes[info.blockIndexes.length - 1]);
      if (isOnenter) {
        info = this.prevInfo;
      }
      var result = translate > sTop ? this.getOffset(block - 1) : endTranslate < sTop + cHeight ? this.getOffset(block + 1) : translate;
      var blockHeight = this.offsets[info.blockIndexes[info.blockIndexes.length - 1]] - this.tmpOffsets[info.blockIndexes[0]];
      var totalBlocks = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      if (result + blockHeight > this.offsets[parseInt(totalBlocks.toString(), 10)]) {
        result -= result + blockHeight - this.offsets[parseInt(totalBlocks.toString(), 10)];
      }
      if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        result = 0;
      }
      return result;
    };
    VirtualContentRenderer2.prototype.getOffset = function(block) {
      return Math.min(this.offsets[parseInt(block.toString(), 10)] | 0, this.offsets[this.maxBlock] | 0);
    };
    VirtualContentRenderer2.prototype.onEntered = function() {
      var _this = this;
      return function(element, current, direction, e, isWheel, check) {
        if ((direction === "down" || direction === "up") && !_this.parent.enableVirtualization && _this.parent.enableColumnVirtualization) {
          return;
        }
        if (Browser.isIE && !isWheel && check && !_this.preventEvent && !_this.parent.enableVirtualMaskRow) {
          _this.parent.showSpinner();
        }
        _this.prevInfo = _this.prevInfo || _this.vgenerator.getData();
        if (_this.parent.enableVirtualMaskRow && !_this.preventEvent) {
          var firstOffSetKey = parseInt(_this.offsetKeys[0], 10);
          var lastOffSetKey = parseInt(_this.offsetKeys[_this.offsetKeys.length - 1], 10);
          var blockIndex = _this.currentInfo.blockIndexes;
          var viewInfo = _this.getInfoFromView(direction, current, e);
          var disableShowMaskRow = _this.prevInfo && current.axis === "X" && _this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString();
          if (!(blockIndex && blockIndex[0] === firstOffSetKey && direction === "up" || blockIndex && blockIndex[blockIndex.length - 1] === lastOffSetKey && direction === "down" || disableShowMaskRow)) {
            setTimeout(function() {
              _this.parent.showMaskRow(current.axis);
            }, 0);
          }
        }
        var xAxis = current.axis === "X";
        var top = _this.prevInfo.offsets ? _this.prevInfo.offsets.top : null;
        var height = _this.content.getBoundingClientRect().height;
        var x = _this.getColumnOffset(xAxis ? _this.vgenerator.getColumnIndexes()[0] - 1 : _this.prevInfo.columnIndexes[0] - 1);
        if (xAxis) {
          var idx = Object.keys(_this.vgenerator.cOffsets).length - _this.prevInfo.columnIndexes.length;
          var maxLeft = _this.vgenerator.cOffsets[idx - 1];
          x = x > maxLeft ? maxLeft : x;
        }
        if (!_this.parent.enableVirtualization && _this.parent.enableColumnVirtualization) {
          _this.virtualEle.adjustTable(x, 0);
        } else {
          var y = _this.getTranslateY(e.top, height, xAxis && top === e.top ? _this.prevInfo : void 0, true);
          _this.virtualEle.adjustTable(x, Math.min(y, _this.offsets[_this.maxBlock]));
        }
        if (_this.parent.enableColumnVirtualization) {
          _this.header.virtualEle.adjustTable(x, 0);
          if (_this.parent.isFrozenGrid()) {
            _this.resetStickyLeftPos(x);
          }
        }
      };
    };
    VirtualContentRenderer2.prototype.dataBound = function() {
      this.parent.notify(refreshVirtualFrozenHeight, {});
      if (this.isSelection && this.activeKey !== "upArrow" && this.activeKey !== "downArrow") {
        this.parent.selectRow(this.selectedRowIndex);
      } else {
        this.activeKey = this.empty;
        this.requestType = this.empty;
      }
    };
    VirtualContentRenderer2.prototype.resetStickyLeftPos = function(valueX, newChild) {
      var cells = [].slice.call(this.parent.getHeaderContent().querySelectorAll(".e-leftfreeze,.e-rightfreeze,.e-fixedfreeze")).concat([].slice.call((newChild ? newChild : this.parent.getContent()).querySelectorAll(".e-leftfreeze,.e-rightfreeze,.e-fixedfreeze")));
      var frzLeftWidth = 0;
      var frzRightWidth = 0;
      if (this.parent.getHeaderContent().querySelectorAll(".e-fixedfreeze").length) {
        frzLeftWidth = this.parent.leftrightColumnWidth("left");
        frzRightWidth = this.parent.leftrightColumnWidth("right");
      }
      if (cells.length) {
        for (var i = 0; i < cells.length; i++) {
          var cell = cells[parseInt(i.toString(), 10)];
          var col = void 0;
          if (cell.classList.contains("e-rowcell")) {
            if (isNullOrUndefined(cell.getAttribute("data-colindex")) && cell.querySelector("[e-mappinguid]")) {
              var uid2 = cell.querySelector("[e-mappinguid]").getAttribute("e-mappinguid");
              col = this.parent.getColumnByUid(uid2);
            } else {
              var idx = parseInt(cell.getAttribute("data-colindex"), 10);
              col = this.parent.getColumnByIndex(parseInt(idx.toString(), 10));
            }
          } else {
            if (cell.classList.contains("e-headercell") || cell.classList.contains("e-filterbarcell")) {
              var uid2 = cell.classList.contains("e-filterbarcell") ? cell.getAttribute("e-mappinguid") : cell.querySelector("[e-mappinguid]").getAttribute("e-mappinguid");
              col = this.parent.getColumnByUid(uid2);
            }
          }
          if (col.freeze === "Left") {
            cell.style.left = col.valueX - valueX + "px";
          } else if (col.freeze === "Right") {
            cell.style.right = col.valueX + valueX + "px";
          } else if (col.freeze === "Fixed") {
            cell.style.left = frzLeftWidth - valueX + "px";
            cell.style.right = frzRightWidth + valueX + "px";
          }
        }
      }
      this.parent.translateX = valueX;
    };
    VirtualContentRenderer2.prototype.rowSelected = function(args, isSelection) {
      if ((this.isSelection || isSelection) && !this.isLastBlockRow(args.rowIndex)) {
        var transform = getTransformValues(this.content.firstElementChild);
        var gridTop = this.parent.element.getBoundingClientRect().top;
        var rowTop = args.row.getBoundingClientRect().top - gridTop;
        var height = this.content.getBoundingClientRect().height;
        var isBottom = height < rowTop;
        var remainHeight = isBottom ? rowTop - height : this.initialRowTop - rowTop;
        var translateY = isBottom ? transform.height - remainHeight : transform.height + remainHeight;
        this.virtualEle.adjustTable(transform.width, translateY);
        var wrapperInfo = this.virtualEle.wrapper.getBoundingClientRect();
        var contentInfo = this.content.getBoundingClientRect();
        if (wrapperInfo.top > contentInfo.top) {
          this.virtualEle.adjustTable(transform.width, translateY - (wrapperInfo.top - contentInfo.top));
        }
        var lastRowTop = this.content.querySelector("tbody").lastElementChild.getBoundingClientRect().top - gridTop;
        if (lastRowTop < height) {
          translateY = translateY + (height - (args.row.getBoundingClientRect().top - gridTop));
          this.virtualEle.adjustTable(transform.width, translateY - this.parent.getRowHeight() / 2);
        } else if (contentInfo.bottom > wrapperInfo.bottom) {
          this.virtualEle.adjustTable(transform.width, translateY + (contentInfo.bottom - wrapperInfo.bottom));
        }
        if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid()) {
          this.resetStickyLeftPos(transform.width);
        }
      }
      this.isSelection = false;
    };
    VirtualContentRenderer2.prototype.isLastBlockRow = function(index) {
      var scrollEle = this.parent.getContent().firstElementChild;
      var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
      var startIdx = this.maxPage * this.parent.pageSettings.pageSize - visibleRowCount;
      return index >= startIdx;
    };
    VirtualContentRenderer2.prototype.refreshMaxPage = function() {
      if (this.parent.groupSettings.columns.length && this.parent.vcRows.length) {
        this.maxPage = Math.ceil(this.parent.vcRows.length / this.parent.pageSettings.pageSize);
      }
    };
    VirtualContentRenderer2.prototype.setVirtualPageQuery = function(args) {
      var visiblePage = [];
      if (this.prevInfo && this.prevInfo.blockIndexes) {
        visiblePage = getVisiblePage(this.prevInfo.blockIndexes);
      }
      if (this.requestType === "sorting" && visiblePage.length && checkVirtualSort(this.parent)) {
        args.query.skip(this.parent.pageSettings.pageSize * (visiblePage[0] - 1));
        args.query.take(this.parent.pageSettings.pageSize * visiblePage.length);
        args.skipPage = true;
        return;
      }
      var row2 = this.parent.getContent().querySelector(".e-row");
      if (this.requestType === "virtualscroll" && this.vgenerator.currentInfo.blockIndexes) {
        this.vgenerator.currentInfo = {};
      }
      if (row2 && this.parent.isManualRefresh && this.currentInfo.blockIndexes && (this.currentInfo.blockIndexes.length === 3 || visiblePage.length > 1)) {
        this.vgenerator.startIndex = parseInt(row2.getAttribute("data-rowindex"), 10);
        this.vgenerator.currentInfo = extend({}, this.currentInfo);
        this.vgenerator.currentInfo.blockIndexes = this.currentInfo.blockIndexes.slice();
        var includePrevPage = this.vgenerator.includePrevPage = this.currentInfo.blockIndexes[0] % 2 === 0;
        if (includePrevPage) {
          this.vgenerator.startIndex = this.vgenerator.startIndex - this.getBlockSize();
          this.vgenerator.currentInfo.blockIndexes.unshift(this.currentInfo.blockIndexes[0] - 1);
        } else {
          this.vgenerator.currentInfo.blockIndexes.push(this.currentInfo.blockIndexes[this.currentInfo.blockIndexes.length - 1] + 1);
        }
        var skip = (this.vgenerator.currentInfo.blockIndexes[0] - 1) * this.getBlockSize();
        var take = this.vgenerator.currentInfo.blockIndexes.length * this.getBlockSize();
        args.query.skip(skip);
        args.query.take(take);
        args.skipPage = true;
      }
    };
    VirtualContentRenderer2.prototype.eventListener = function(action) {
      var _this = this;
      this.parent["" + action](dataReady, this.onDataReady, this);
      this.parent.addEventListener(dataBound, this.dataBound.bind(this));
      this.parent.addEventListener(actionBegin, this.actionBegin.bind(this));
      this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
      this.parent.addEventListener(rowSelected, this.rowSelected.bind(this));
      this.parent["" + action](refreshVirtualBlock, this.refreshContentRows, this);
      this.parent["" + action](refreshVirtualLazyLoadCache, this.refreshVirtualLazyLoadCache, this);
      this.parent["" + action](selectVirtualRow, this.selectVirtualRow, this);
      this.parent["" + action](virtaulCellFocus, this.virtualCellFocus, this);
      this.parent["" + action](virtualScrollEditActionBegin, this.editActionBegin, this);
      this.parent["" + action](virtualScrollAddActionBegin, this.addActionBegin, this);
      this.parent["" + action](virtualScrollEdit, this.restoreEdit, this);
      this.parent["" + action](virtualScrollEditSuccess, this.editSuccess, this);
      this.parent["" + action](refreshVirtualCache, this.refreshCache, this);
      this.parent["" + action](editReset, this.resetIsedit, this);
      this.parent["" + action](getVirtualData, this.getVirtualData, this);
      this.parent["" + action](virtualScrollEditCancel, this.editCancel, this);
      this.parent["" + action](refreshVirtualMaxPage, this.refreshMaxPage, this);
      this.parent["" + action](setVirtualPageQuery, this.setVirtualPageQuery, this);
      this.parent["" + action](selectRowOnContextOpen, this.selectRowOnContextOpen, this);
      this.parent["" + action](resetVirtualFocus, this.resetVirtualFocus, this);
      this.parent["" + action](refreshVirtualEditFormCells, this.refreshCells, this);
      this.parent["" + action](scrollToEdit, this.scrollToEdit, this);
      var event2 = this.actions;
      for (var i = 0; i < event2.length; i++) {
        this.parent["" + action](event2[parseInt(i.toString(), 10)] + "-begin", this.onActionBegin, this);
      }
      var fn = function() {
        _this.observer.observe(function(scrollArgs) {
          return _this.scrollListener(scrollArgs);
        }, _this.onEntered());
        var gObj = _this.parent;
        if (gObj.enablePersistence && gObj.scrollPosition) {
          _this.content.scrollTop = gObj.scrollPosition.top;
          var scrollValues = {
            direction: "down",
            sentinel: _this.observer.sentinelInfo.down,
            offset: gObj.scrollPosition,
            focusElement: gObj.element
          };
          _this.scrollListener(scrollValues);
          if (gObj.enableColumnVirtualization) {
            _this.content.scrollLeft = gObj.scrollPosition.left;
          }
        }
        _this.parent.off(contentReady, fn);
      };
      this.parent.on(contentReady, fn, this);
    };
    VirtualContentRenderer2.prototype.refreshVirtualLazyLoadCache = function(e) {
      var blockIndex = this.currentInfo.blockIndexes;
      if (isNullOrUndefined(this.currentInfo.blockIndexes)) {
        blockIndex = [1, 2];
      }
      var block;
      var index;
      var cache;
      for (var i = 0; i < blockIndex.length; i++) {
        var rows = this.vgenerator.cache[blockIndex[parseInt(i.toString(), 10)]];
        for (var j = 0; j < rows.length; j++) {
          if (rows[parseInt(j.toString(), 10)].uid === e.uid) {
            block = blockIndex[parseInt(i.toString(), 10)];
            index = j;
            cache = rows;
            break;
          }
        }
      }
      if (e.count) {
        this.vgenerator.cache[parseInt(block.toString(), 10)].splice(index + 1, e.count);
      } else if (e.rows && e.rows.length) {
        this.vgenerator.cache[parseInt(block.toString(), 10)] = [].slice.call(cache.slice(0, index + 1)).concat([].slice.call(e.rows)).concat([].slice.call(cache.slice(index + 1, cache.length)));
      }
      this.refreshOffsets();
    };
    VirtualContentRenderer2.prototype.scrollToEdit = function(col) {
      var allowScroll = true;
      this.validationCheck = true;
      if (this.isAdd && this.content.scrollTop > 0) {
        allowScroll = false;
        var keys = Object.keys(this.offsets);
        this.content.scrollTop = this.parent.editSettings.newRowPosition === "Top" ? 0 : this.offsets[keys.length - 1];
      }
      var row2 = this.parent.getRowByIndex(this.editedRowIndex);
      if (!row2 && !isNullOrUndefined(this.editedRowIndex)) {
        if (!row2 || !this.isRowInView(row2)) {
          var rowIndex = this.parent.getRowHeight();
          var scrollTop = this.editedRowIndex * rowIndex;
          if (!isNullOrUndefined(scrollTop)) {
            allowScroll = false;
            this.content.scrollTop = scrollTop;
          }
        }
      }
      if (col && allowScroll) {
        var offset = this.vgenerator.cOffsets[col.index - this.parent.getVisibleFrozenColumns() - 1];
        if (!this.parent.enableColumnVirtualization) {
          var header = this.parent.getHeaderContent().querySelector('.e-headercelldiv[e-mappinguid="' + col.uid + '"]');
          offset = header.parentElement.offsetLeft;
        }
        if (this.parent.enableColumnVirtualization && this.parent.getVisibleFrozenLeftCount()) {
          offset -= this.parent.leftrightColumnWidth("left");
        }
        this.content.scrollLeft = this.parent.enableRtl ? -Math.abs(offset) : offset;
      }
      if (col && !allowScroll) {
        this.validationCol = col;
      }
    };
    VirtualContentRenderer2.prototype.refreshCells = function(rowObj) {
      rowObj.cells = this.vgenerator.generateCells(rowObj.foreignKeyData);
    };
    VirtualContentRenderer2.prototype.resetVirtualFocus = function(e) {
      this.isCancel = e.isCancel;
    };
    VirtualContentRenderer2.prototype.getVirtualData = function(data) {
      if (this.isNormaledit) {
        var error = this.parent.element.querySelector('.e-griderror:not([style*="display: none"])');
        var keys = Object.keys(this.virtualData);
        data.isScroll = keys.length !== 0 && this.currentInfo.sentinelInfo && this.currentInfo.sentinelInfo.axis === "X";
        if (error) {
          return;
        }
        this.virtualData = keys.length ? this.virtualData : data.virtualData;
        this.getVirtualEditedData(this.virtualData);
        data.virtualData = this.virtualData;
        data.isAdd = this.isAdd || this.parent.editSettings.showAddNewRow;
        data.isCancel = this.isCancel;
      }
    };
    VirtualContentRenderer2.prototype.selectRowOnContextOpen = function(args) {
      this.isContextMenuOpen = args.isOpen;
    };
    VirtualContentRenderer2.prototype.editCancel = function(args) {
      var dataIndex = getEditedDataIndex(this.parent, args.data);
      if (!isNullOrUndefined(dataIndex)) {
        args.data = this.parent.getCurrentViewRecords()[parseInt(dataIndex.toString(), 10)];
      }
    };
    VirtualContentRenderer2.prototype.editSuccess = function(args) {
      if (this.isNormaledit) {
        if (!this.isAdd && args.data) {
          this.updateCurrentViewData(args.data);
        }
        this.isAdd = false;
      }
    };
    VirtualContentRenderer2.prototype.updateCurrentViewData = function(data) {
      var dataIndex = getEditedDataIndex(this.parent, data);
      if (!isNullOrUndefined(dataIndex)) {
        this.parent.getCurrentViewRecords()[parseInt(dataIndex.toString(), 10)] = data;
      }
    };
    VirtualContentRenderer2.prototype.actionBegin = function(args) {
      if (args.requestType !== "virtualscroll") {
        this.requestType = args.requestType;
      }
      if (!args.cancel) {
        this.parent.notify(refreshVirtualFrozenRows, args);
      }
    };
    VirtualContentRenderer2.prototype.virtualCellFocus = function(e) {
      var ele = document.activeElement;
      if (!ele.classList.contains(rowCell) && (ele instanceof HTMLInputElement || !isNullOrUndefined(ele.closest(".e-templatecell")))) {
        ele = ele.closest(".e-rowcell");
      }
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && ele && (ele.classList.contains(rowCell) || !isNullOrUndefined(parentsUntil(ele, groupCaptionRow))) && e && (e.action === "upArrow" || e.action === "downArrow")) {
        var scrollEle = this.parent.getContent().firstElementChild;
        var scrollEleInfo = scrollEle.getBoundingClientRect();
        var row2 = closest(ele, "tr");
        var nextFocusRow = e.action === "downArrow" ? row2.nextElementSibling : row2.previousElementSibling;
        var nextFocusRowInfo = !isNullOrUndefined(nextFocusRow) ? nextFocusRow.getBoundingClientRect() : void 0;
        if (isNullOrUndefined(nextFocusRow) || e.action === "downArrow" && nextFocusRowInfo.bottom > scrollEleInfo.bottom || e.action === "upArrow" && nextFocusRowInfo.top < scrollEleInfo.top) {
          this.activeKey = e.action;
          this.parent.focusModule.virtualSelectionInfo = {
            isPending: isNullOrUndefined(nextFocusRow),
            direction: e.action,
            event: e
          };
          var viewDifference = isNullOrUndefined(nextFocusRow) ? this.parent.getRowHeight() : e.action === "downArrow" ? nextFocusRowInfo.bottom - scrollEleInfo.bottom : scrollEleInfo.top - nextFocusRowInfo.top;
          scrollEle.scrollTop = e.action === "downArrow" ? scrollEle.scrollTop + viewDifference : scrollEle.scrollTop - viewDifference;
        } else {
          this.activeKey = this.empty;
        }
        return;
      }
      if (ele && ele.classList.contains(rowCell) && e && (e.action === "upArrow" || e.action === "downArrow")) {
        var rowIndex = parseInt(ele.parentElement.getAttribute(dataRowIndex), 10);
        if (e && (e.action === "downArrow" || e.action === "upArrow")) {
          var scrollEle = this.parent.getContent().firstElementChild;
          if (e.action === "downArrow") {
            rowIndex += 1;
          } else {
            rowIndex -= 1;
          }
          this.rowIndex = rowIndex;
          this.cellIndex = parseInt(ele.getAttribute(dataColIndex), 10);
          var row2 = this.parent.getRowByIndex(rowIndex);
          var page = this.parent.pageSettings.currentPage;
          var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
          var emptyRow = false;
          if (isNullOrUndefined(row2)) {
            emptyRow = true;
            if (e.action === "downArrow" && page === this.maxPage - 1 || e.action === "upArrow" && page === 1) {
              emptyRow = false;
            }
          }
          if (emptyRow || ensureLastRow(row2, this.parent) && e.action === "downArrow" || ensureFirstRow(row2, this.parent.getRowHeight() * 2) && e.action === "upArrow") {
            this.activeKey = e.action;
            scrollEle.scrollTop = e.action === "downArrow" ? (rowIndex - visibleRowCount) * this.parent.getRowHeight() : rowIndex * this.parent.getRowHeight();
          } else {
            this.activeKey = this.empty;
          }
          if (!this.parent.selectionSettings.checkboxOnly) {
            this.parent.selectRow(rowIndex);
          }
        }
      }
    };
    VirtualContentRenderer2.prototype.editActionBegin = function(e) {
      this.editedRowIndex = e.index;
      var rowData = !this.parent.enableVirtualization && this.parent.enableColumnVirtualization ? extend({}, this.parent.getCurrentViewRecords()[e.index]) : extend({}, this.getRowObjectByIndex(e.index));
      var keys = Object.keys(this.virtualData);
      e.data = keys.length && !this.parent.editSettings.showAddNewRow ? this.virtualData : this.isInfiniteColumnvirtualization() ? e.data : rowData;
      if (this.enableCacheOnInfiniteColumnVirtual()) {
        this.virtualInfiniteData = e.data;
      }
      e.isScroll = keys.length !== 0 && this.currentInfo.sentinelInfo && this.currentInfo.sentinelInfo.axis === "X";
    };
    VirtualContentRenderer2.prototype.getEditedRowObject = function() {
      var rowObjects = this.parent.vcRows;
      var editedrow;
      for (var i = 0; i < rowObjects.length; i++) {
        if (rowObjects[parseInt(i.toString(), 10)].index === this.editedRowIndex) {
          editedrow = rowObjects[parseInt(i.toString(), 10)];
        }
      }
      return editedrow;
    };
    VirtualContentRenderer2.prototype.refreshCache = function(args) {
      if (this.isInfiniteColumnvirtualization()) {
        return;
      }
      var block = Math.ceil((this.editedRowIndex + 1) / this.getBlockSize());
      if (this.parent.allowPaging && this.parent.enableColumnVirtualization) {
        block = Math.ceil((this.editedRowIndex + 1 + (this.parent.pageSettings.currentPage - 1) * this.parent.pageSettings.pageSize) / this.getBlockSize());
      }
      var index = this.parent.allowPaging && this.parent.enableColumnVirtualization ? this.editedRowIndex % this.getBlockSize() : this.editedRowIndex - (block - 1) * this.getBlockSize();
      if (this.parent.groupSettings.columns.length) {
        var editRowObject = this.getEditedRowObject();
        if (editRowObject) {
          editRowObject.data = args.data;
        }
      } else {
        this.vgenerator.cache[parseInt(block.toString(), 10)][parseInt(index.toString(), 10)].data = args.data;
      }
    };
    VirtualContentRenderer2.prototype.actionComplete = function(args) {
      if (!(this.parent.enableVirtualization || this.parent.enableColumnVirtualization)) {
        return;
      }
      var editRequestTypes = ["delete", "save", "cancel"];
      var dataActionRequestTypes = ["sorting", "filtering", "grouping", "refresh", "searching", "ungrouping", "reorder"];
      if (editRequestTypes.some(function(value) {
        return value === args.requestType;
      })) {
        this.refreshOffsets();
        this.refreshVirtualElement();
      }
      if (this.isNormaledit && (dataActionRequestTypes.some(function(value) {
        return value === args.requestType;
      }) || editRequestTypes.some(function(value) {
        return value === args.requestType;
      }))) {
        this.isCancel = true;
        this.isAdd = this.parent.editSettings.showAddNewRow;
        this.editedRowIndex = this.empty;
        this.virtualData = {};
        this.virtualInfiniteData = {};
        if (this.parent.editModule) {
          this.parent.editModule.editModule.previousData = void 0;
        }
      }
      if (this.parent.enableColumnVirtualization && args.requestType === "filterAfterOpen" && this.currentInfo.columnIndexes && this.currentInfo.columnIndexes[0] > 0) {
        this.parent.resetFilterDlgPosition(args.columnName);
      }
    };
    VirtualContentRenderer2.prototype.resetIsedit = function() {
      if (this.parent.enableVirtualization && this.isNormaledit) {
        if (this.parent.editSettings.allowEditing && Object.keys(this.virtualData).length || this.parent.editSettings.allowAdding && this.isAdd) {
          this.parent.isEdit = true;
        }
      }
    };
    VirtualContentRenderer2.prototype.scrollAfterEdit = function() {
      if (this.parent.editModule && this.parent.editSettings.allowEditing && this.isNormaledit) {
        if (this.parent.element.querySelector(".e-gridform")) {
          var editForm = this.parent.element.querySelector("." + editedRow);
          var addForm = this.parent.element.querySelector("." + addedRow);
          if (editForm || addForm) {
            var rowData = editForm ? extend({}, this.getRowObjectByIndex(this.editedRowIndex)) : extend({}, this.emptyRowData);
            var keys = Object.keys(this.virtualData);
            this.virtualData = keys.length ? this.getVirtualEditedData(this.virtualData) : this.getVirtualEditedData(rowData);
          }
        }
      }
    };
    VirtualContentRenderer2.prototype.createEmptyRowdata = function() {
      var _this = this;
      this.parent.columnModel.filter(function(e) {
        _this.emptyRowData[e.field] = _this.empty;
      });
    };
    VirtualContentRenderer2.prototype.addActionBegin = function(args) {
      if (this.isNormaledit) {
        if (!Object.keys(this.emptyRowData).length) {
          this.createEmptyRowdata();
        }
        this.isAdd = true;
        var page = this.parent.pageSettings.currentPage;
        if (!this.parent.frozenRows && this.content.scrollTop > 0 && this.parent.editSettings.newRowPosition === "Top") {
          this.isAdd = true;
          this.onActionBegin();
          args.startEdit = false;
          this.content.scrollTop = 0;
        }
        if (page < this.maxPage - 1 && this.parent.editSettings.newRowPosition === "Bottom") {
          this.isAdd = true;
          this.parent.setProperties({
            pageSettings: {
              currentPage: this.maxPage - 1
            }
          }, true);
          args.startEdit = false;
          this.content.scrollTop = this.offsets[this.offsetKeys.length];
        }
      }
    };
    VirtualContentRenderer2.prototype.getRowObjectByIndex = function(index) {
      var data = this.getRowCollection(index, true);
      return data;
    };
    VirtualContentRenderer2.prototype.getBlockSize = function() {
      return this.parent.pageSettings.pageSize >> 1;
    };
    VirtualContentRenderer2.prototype.getBlockHeight = function() {
      return this.getBlockSize() * this.parent.getRowHeight();
    };
    VirtualContentRenderer2.prototype.isEndBlock = function(index) {
      var totalBlocks = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      return index >= totalBlocks || index === totalBlocks - 1;
    };
    VirtualContentRenderer2.prototype.getGroupedTotalBlocks = function() {
      var rows = this.parent.vcRows;
      return Math.floor(rows.length / this.getBlockSize() < 1 ? 1 : rows.length / this.getBlockSize());
    };
    VirtualContentRenderer2.prototype.getTotalBlocks = function() {
      return Math.ceil(this.count / this.getBlockSize());
    };
    VirtualContentRenderer2.prototype.getColumnOffset = function(block) {
      return this.vgenerator.cOffsets[parseInt(block.toString(), 10)] | 0;
    };
    VirtualContentRenderer2.prototype.getModelGenerator = function() {
      return new VirtualRowModelGenerator(this.parent);
    };
    VirtualContentRenderer2.prototype.resetScrollPosition = function(action) {
      if (this.actions.some(function(value) {
        return value === action;
      })) {
        this.preventEvent = this.content.scrollTop !== 0;
        this.content.scrollTop = 0;
      }
      if (action !== "virtualscroll") {
        this.isAdd = false;
      }
    };
    VirtualContentRenderer2.prototype.onActionBegin = function(e) {
      this.parent.setProperties({
        pageSettings: {
          currentPage: 1
        }
      }, true);
    };
    VirtualContentRenderer2.prototype.getRows = function() {
      return this.isInfiniteColumnvirtualization() ? this.getInfiniteRows() : this.vgenerator.getRows();
    };
    VirtualContentRenderer2.prototype.getRowByIndex = function(index) {
      var row2;
      if (isGroupAdaptive(this.parent)) {
        if (!isNullOrUndefined(index) && this.parent.enableVirtualization && this.parent.groupSettings.columns.length) {
          for (var i = 0; i < this.parent.getDataRows().length; i++) {
            if (this.parent.getDataRows()[parseInt(i.toString(), 10)].getAttribute(dataRowIndex) === index.toString()) {
              row2 = this.parent.getDataRows()[parseInt(i.toString(), 10)];
            }
          }
        } else {
          row2 = !isNullOrUndefined(index) ? this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
        }
      } else if (!this.parent.enableVirtualization && this.parent.enableColumnVirtualization) {
        row2 = !isNullOrUndefined(index) ? this.enableCacheOnInfiniteColumnVirtual() ? this.parent.getDataRows().find(function(element) {
          return parseInt(element.getAttribute(dataRowIndex), 10) === index;
        }) : this.parent.getDataRows()[parseInt(index.toString(), 10)] : void 0;
      } else if (this.prevInfo) {
        row2 = this.getRowCollection(index, false);
      }
      return row2;
    };
    VirtualContentRenderer2.prototype.getMovableVirtualRowByIndex = function(index) {
      return this.getRowCollection(index, false);
    };
    VirtualContentRenderer2.prototype.getFrozenRightVirtualRowByIndex = function(index) {
      return this.getRowCollection(index, false);
    };
    VirtualContentRenderer2.prototype.getRowCollection = function(index, isRowObject) {
      var prev = this.prevInfo.blockIndexes;
      var startIdx = (prev[0] - 1) * this.getBlockSize();
      if (this.parent.pageSettings.pageSize % 2 !== 0) {
        startIdx += Math.floor(startIdx / this.getBlockSize() / 2);
      }
      var rowCollection = this.parent.getDataRows();
      var collection = isRowObject ? this.parent.getCurrentViewRecords() : rowCollection;
      if (isRowObject && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        startIdx = parseInt(this.parent.getRows()[0].getAttribute(dataRowIndex), 10);
        collection = collection.filter(function(m) {
          return isNullOrUndefined(m.items);
        });
      }
      if (!isRowObject && this.parent.allowGrouping && this.parent.groupSettings.columns.length && rowCollection.length) {
        startIdx = parseInt(rowCollection[0].getAttribute(dataRowIndex), 10);
      }
      var selectedRow = collection[index - startIdx];
      if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
        if (!isRowObject) {
          selectedRow = index <= this.parent.frozenRows ? rowCollection[parseInt(index.toString(), 10)] : rowCollection[index - startIdx + this.parent.frozenRows];
        } else {
          selectedRow = index <= this.parent.frozenRows ? this.parent.getRowsObject()[parseInt(index.toString(), 10)].data : selectedRow;
        }
      }
      return selectedRow;
    };
    VirtualContentRenderer2.prototype.getVirtualRowIndex = function(index) {
      var prev = this.prevInfo.blockIndexes;
      var startIdx = (prev[0] - 1) * this.getBlockSize();
      if (this.parent.enableVirtualization && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
        var vGroupedRows = this.vgenerator.cache[prev[0]];
        for (var i = 0; i < vGroupedRows.length; i++) {
          if (vGroupedRows["" + i].isDataRow) {
            startIdx = vGroupedRows["" + i].index;
            break;
          }
        }
      }
      return startIdx + index;
    };
    VirtualContentRenderer2.prototype.refreshOffsets = function() {
      var gObj = this.parent;
      var row2 = 0;
      var bSize = this.getBlockSize();
      var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      this.prevHeight = this.offsets[parseInt(total.toString(), 10)];
      this.maxBlock = total % 2 === 0 ? total - 2 : total - 1;
      this.offsets = {};
      var blocks = Array.apply(null, Array(total)).map(function() {
        return ++row2;
      });
      for (var i = 0; i < blocks.length; i++) {
        var tmp = (this.vgenerator.cache[blocks[parseInt(i.toString(), 10)]] || []).length;
        var rem = !isGroupAdaptive(this.parent) ? this.count % bSize : gObj.vcRows.length % bSize;
        var size = !isGroupAdaptive(this.parent) && blocks[parseInt(i.toString(), 10)] in this.vgenerator.cache ? tmp * this.parent.getRowHeight() : rem && blocks[parseInt(i.toString(), 10)] === total ? rem * this.parent.getRowHeight() : this.getBlockHeight();
        this.offsets[blocks[parseInt(i.toString(), 10)]] = (this.offsets[blocks[parseInt(i.toString(), 10)] - 1] | 0) + size;
        this.tmpOffsets[blocks[parseInt(i.toString(), 10)]] = this.offsets[blocks[parseInt(i.toString(), 10)] - 1] | 0;
      }
      this.offsetKeys = Object.keys(this.offsets);
      if (isGroupAdaptive(this.parent)) {
        this.parent.vGroupOffsets = this.offsets;
      }
      if (this.parent.enableColumnVirtualization) {
        this.vgenerator.refreshColOffsets();
      }
    };
    VirtualContentRenderer2.prototype.refreshVirtualElement = function() {
      this.vgenerator.refreshColOffsets();
      this.setVirtualHeight();
    };
    VirtualContentRenderer2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var rows = [];
      rows = this.getRows();
      var testRow;
      rows.some(function(r) {
        if (r.isDataRow) {
          testRow = r;
        }
        return r.isDataRow;
      });
      var isRefresh = true;
      if (!gObj.groupSettings.columns.length && testRow) {
        isRefresh = false;
      }
      var tr = gObj.getDataRows();
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        var idx = gObj.getNormalizedColumnIndex(column.uid);
        var displayVal = column.visible === true ? "" : "none";
        var colGrp = this.getColGroup().children;
        if (idx !== -1 && testRow && idx < testRow.cells.length) {
          setStyleAttribute(colGrp[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        if (!isRefresh) {
          var width = void 0;
          if (column.width) {
            if (column.visible) {
              width = this.virtualEle.wrapper.offsetWidth + parseInt(column.width.toString(), 10);
            } else {
              width = this.virtualEle.wrapper.offsetWidth - parseInt(column.width.toString(), 10);
            }
          }
          if (width > gObj.width) {
            this.setDisplayNone(tr, idx, displayVal, rows);
            if (this.parent.enableColumnVirtualization) {
              this.virtualEle.setWrapperWidth(width + "");
            }
            this.refreshVirtualElement();
          } else {
            isRefresh = true;
          }
        }
        if (!this.parent.invokedFromMedia && column.hideAtMedia) {
          this.parent.updateMediaColumns(column);
        }
        this.parent.invokedFromMedia = false;
      }
      if (isRefresh) {
        this.refreshContentRows({
          requestType: "refresh"
        });
      } else {
        this.parent.notify(partialRefresh, {
          rows,
          args: {
            isFrozen: false,
            rows
          }
        });
      }
    };
    VirtualContentRenderer2.prototype.selectVirtualRow = function(args) {
      var _this = this;
      var count2 = isGroupAdaptive(this.parent) ? this.vgenerator.recordsCount : this.count;
      args.isAvailable = args.selectedIndex < count2;
      if (args.isAvailable && !this.isContextMenuOpen && this.activeKey !== "upArrow" && this.activeKey !== "downArrow" && !this.isSelection && !this.requestTypes.some(function(value) {
        return value === _this.requestType;
      }) && !this.parent.selectionModule.isInteracted) {
        var selectedRow = this.parent.getRowByIndex(args.selectedIndex);
        var rowHeight2 = this.parent.getRowHeight();
        if (!selectedRow || !this.isRowInView(selectedRow)) {
          this.isSelection = true;
          this.selectedRowIndex = args.selectedIndex;
          var scrollTop = (args.selectedIndex + 1) * rowHeight2;
          if (isGroupAdaptive(this.parent)) {
            var selectedRowObjectIndex = this.parent.vcRows.findIndex(function(row2) {
              return row2.index === args.selectedIndex;
            });
            scrollTop = selectedRowObjectIndex !== -1 ? selectedRowObjectIndex * rowHeight2 : void 0;
            this.isSelection = selectedRowObjectIndex !== -1 ? this.isSelection : false;
          } else if (this.parent.getDataModule().isRemote() && this.parent.groupSettings.columns.length) {
            var page = Math.ceil((args.selectedIndex + 1) / this.parent.pageSettings.pageSize);
            var blockIndexes = this.vgenerator.getBlockIndexes(page);
            scrollTop = this.offsets[blockIndexes[0]];
          }
          if (!isNullOrUndefined(scrollTop)) {
            var direction = this.content.scrollTop < scrollTop ? "down" : "up";
            this.selectRowIndex = args.selectedIndex;
            this.content.scrollTop = scrollTop;
            this.isSelectionScroll = this.observer.check(direction);
          }
        }
      }
      this.requestType = this.empty;
    };
    VirtualContentRenderer2.prototype.isRowInView = function(row2) {
      var top = row2.getBoundingClientRect().top;
      var bottom = row2.getBoundingClientRect().bottom;
      return top >= this.content.getBoundingClientRect().top && bottom <= this.content.getBoundingClientRect().bottom;
    };
    return VirtualContentRenderer2;
  }(ContentRender)
);
var VirtualHeaderRenderer = (
  /** @class */
  function(_super) {
    __extends30(VirtualHeaderRenderer2, _super);
    function VirtualHeaderRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.virtualEle = new VirtualElementHandler();
      _this.isMovable = false;
      _this.gen = new VirtualRowModelGenerator(_this.parent);
      _this.parent.on(columnVisibilityChanged, _this.setVisible, _this);
      _this.parent.on(refreshVirtualBlock, function(e) {
        return e.virtualInfo.sentinelInfo.axis === "X" ? _this.refreshUI() : null;
      }, _this);
      return _this;
    }
    VirtualHeaderRenderer2.prototype.renderTable = function() {
      this.gen.refreshColOffsets();
      this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().querySelector("." + headerContent)));
      _super.prototype.renderTable.call(this);
      this.virtualEle.table = this.getTable();
      this.virtualEle.content = this.getPanel().querySelector("." + headerContent);
      this.virtualEle.content.style.position = "relative";
      this.virtualEle.renderWrapper();
      !(this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.enableColumnVirtualization ? this.virtualEle.renderPlaceHolder() : this.virtualEle.renderPlaceHolder("absolute");
    };
    VirtualHeaderRenderer2.prototype.appendContent = function(table2) {
      this.virtualEle.wrapper.appendChild(table2);
    };
    VirtualHeaderRenderer2.prototype.refreshUI = function() {
      this.gen.refreshColOffsets();
      this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().querySelector("." + headerContent)));
      _super.prototype.refreshUI.call(this);
    };
    VirtualHeaderRenderer2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var displayVal;
      var idx;
      var needFullRefresh;
      for (var c = 0, clen = columns.length; c < clen; c++) {
        var column = columns[parseInt(c.toString(), 10)];
        idx = gObj.getNormalizedColumnIndex(column.uid);
        displayVal = column.visible ? "" : "none";
        var colGrp = this.getColGroup().children;
        setStyleAttribute(colGrp[parseInt(idx.toString(), 10)], {
          "display": displayVal
        });
        if (gObj.enableColumnVirtualization && !gObj.groupSettings.columns.length) {
          var tablewidth = void 0;
          if (column.visible) {
            tablewidth = this.virtualEle.wrapper.offsetWidth + parseInt(column.width.toString(), 10);
          } else {
            tablewidth = this.virtualEle.wrapper.offsetWidth - parseInt(column.width.toString(), 10);
          }
          if (tablewidth > gObj.width) {
            this.setDisplayNone(column, displayVal);
            this.virtualEle.setWrapperWidth(tablewidth + "");
            this.gen.refreshColOffsets();
          } else {
            needFullRefresh = true;
          }
        } else {
          needFullRefresh = true;
        }
        if (needFullRefresh) {
          this.refreshUI();
        }
      }
    };
    VirtualHeaderRenderer2.prototype.setDisplayNone = function(col, displayVal) {
      var table2 = this.getTable();
      for (var _i = 0, _a = [].slice.apply(table2.querySelectorAll("th.e-headercell")); _i < _a.length; _i++) {
        var ele = _a[_i];
        if (ele.querySelector("[e-mappinguid]") && ele.querySelector("[e-mappinguid]").getAttribute("e-mappinguid") === col.uid) {
          setStyleAttribute(ele, {
            "display": displayVal
          });
          if (displayVal === "") {
            removeClass([ele], "e-hide");
          }
          break;
        }
      }
    };
    return VirtualHeaderRenderer2;
  }(HeaderRender)
);
var VirtualElementHandler = (
  /** @class */
  function() {
    function VirtualElementHandler2() {
    }
    VirtualElementHandler2.prototype.renderWrapper = function(height) {
      this.wrapper = createElement("div", {
        className: "e-virtualtable",
        styles: "min-height:" + formatUnit(height)
      });
      this.wrapper.appendChild(this.table);
      this.content.appendChild(this.wrapper);
    };
    VirtualElementHandler2.prototype.renderPlaceHolder = function(position) {
      if (position === void 0) {
        position = "relative";
      }
      this.placeholder = createElement("div", {
        className: "e-virtualtrack",
        styles: "position:" + position
      });
      this.content.appendChild(this.placeholder);
    };
    VirtualElementHandler2.prototype.renderFrozenWrapper = function(height) {
      this.wrapper = createElement("div", {
        className: "e-virtualtable",
        styles: "min-height:" + formatUnit(height) + "; display: flex"
      });
      this.content.appendChild(this.wrapper);
    };
    VirtualElementHandler2.prototype.renderFrozenPlaceHolder = function() {
      this.placeholder = createElement("div", {
        className: "e-virtualtrack"
      });
      this.content.appendChild(this.placeholder);
    };
    VirtualElementHandler2.prototype.adjustTable = function(xValue, yValue) {
      this.wrapper.style.transform = "translate(" + xValue + "px, " + yValue + "px)";
    };
    VirtualElementHandler2.prototype.setWrapperWidth = function(width, full) {
      if (width && width.indexOf("%") === -1 && !(this.content.getBoundingClientRect().width < parseInt(width, 10))) {
        width = void 0;
        full = true;
      }
      this.wrapper.style.width = width ? width + "px" : full ? "100%" : "";
    };
    VirtualElementHandler2.prototype.setVirtualHeight = function(height, width) {
      this.placeholder.style.height = !isNullOrUndefined(height) ? height + "px" : "0px";
      if (width && width.indexOf("%") === -1 && !(this.content.getBoundingClientRect().width < parseInt(width, 10))) {
        width = "100%";
      }
      this.placeholder.style.width = width;
    };
    VirtualElementHandler2.prototype.setFreezeWrapperWidth = function(wrapper, width, full) {
      wrapper.style.width = width ? width + "px" : full ? "100%" : "";
    };
    return VirtualElementHandler2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/virtual-scroll.js
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.addEventListener();
    }
    VirtualScroll2.prototype.getModuleName = function() {
      return "virtualscroll";
    };
    VirtualScroll2.prototype.instantiateRenderer = function() {
      this.parent.log(["limitation", "virtual_height"], "virtualization");
      var renderer = this.locator.getService("rendererFactory");
      if (this.parent.enableColumnVirtualization) {
        renderer.addRenderer(RenderType.Header, new VirtualHeaderRenderer(this.parent, this.locator));
      }
      renderer.addRenderer(RenderType.Content, new VirtualContentRenderer(this.parent, this.locator));
      if (!(!this.parent.enableVirtualization && this.parent.enableColumnVirtualization)) {
        this.ensurePageSize();
      }
    };
    VirtualScroll2.prototype.ensurePageSize = function() {
      var rowHeight2 = this.parent.getRowHeight();
      var vHeight = this.parent.height.toString().indexOf("%") < 0 ? this.parent.height : this.parent.element.getBoundingClientRect().height;
      this.blockSize = ~~(parseFloat(vHeight.toString()) / rowHeight2);
      var height = this.blockSize * 2;
      var size = this.parent.pageSettings.pageSize;
      this.parent.setProperties({
        pageSettings: {
          pageSize: size < height ? height : size
        }
      }, true);
    };
    VirtualScroll2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(columnWidthChanged, this.refreshVirtualElement, this);
      this.parent.on(createVirtualValidationForm, this.createVirtualValidationForm, this);
      this.parent.on(validateVirtualForm, this.virtualEditFormValidation, this);
      this.parent.on(destroy, this.destroy, this);
    };
    VirtualScroll2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(columnWidthChanged, this.refreshVirtualElement);
      this.parent.off(createVirtualValidationForm, this.createVirtualValidationForm);
      this.parent.off(validateVirtualForm, this.virtualEditFormValidation);
      this.parent.off(destroy, this.destroy);
    };
    VirtualScroll2.prototype.getCurrentEditedData = function(prevData) {
      var data = {
        virtualData: extend({}, {}, prevData, true),
        isAdd: false,
        isScroll: false,
        endEdit: true
      };
      this.parent.notify(getVirtualData, data);
      return data.virtualData;
    };
    VirtualScroll2.prototype.createVirtualValidationForm = function(e) {
      var gObj = this.parent;
      if (gObj.enableVirtualization && gObj.editSettings.mode === "Normal") {
        var cols = gObj.columns;
        var rowRenderer = new RowRenderer(this.locator, null, this.parent);
        var rowObj = extend({}, {}, gObj.getRowObjectFromUID(e.uid), true);
        gObj.notify(refreshVirtualEditFormCells, rowObj);
        var args = e.argsCreator(this.getCurrentEditedData(e.prevData), {}, false);
        args.isCustomFormValidation = true;
        args.row = rowRenderer.render(rowObj, cols);
        e.renderer.update(args);
        var rules = {};
        for (var i = 0; i < cols.length; i++) {
          if (!cols[parseInt(i.toString(), 10)].visible) {
            continue;
          }
          if (cols[parseInt(i.toString(), 10)].validationRules) {
            setValidationRuels(cols[parseInt(i.toString(), 10)], 0, rules, {}, {}, cols.length, true);
          }
        }
        args.form.classList.add("e-virtual-validation");
        gObj.editModule.virtualFormObj = gObj.editModule.createFormObj(args.form, rules);
      }
    };
    VirtualScroll2.prototype.virtualEditFormValidation = function(args) {
      var gObj = this.parent;
      var error = gObj.element.querySelector('.e-griderror:not([style*="display: none"])');
      if (gObj.editModule.virtualFormObj) {
        if (error && error.style.display !== "none") {
          var errorDomRect = error.getBoundingClientRect();
          var forms = gObj.element.querySelectorAll(".e-gridform");
          var form = forms[0];
          var contentLeft = gObj.getContent().getBoundingClientRect().left;
          if (forms.length > 1) {
            form = forms[1];
          }
          if (errorDomRect.left < contentLeft || errorDomRect.right > gObj.element.offsetWidth) {
            var tooltip = form.querySelector('.e-tooltip-wrap:not([style*="display: none"])');
            this.scrollToEdit(tooltip, {
              editIdx: args.editIdx,
              addIdx: args.addIdx
            }, true);
          }
        } else if (gObj.editModule.virtualFormObj && (!error || error.style.display === "none")) {
          var existingErrors = gObj.editModule.virtualFormObj.element.querySelectorAll('.e-tooltip-wrap:not([style*="display: none"])');
          for (var i = 0; i < existingErrors.length; i++) {
            remove(existingErrors[parseInt(i.toString(), 10)]);
          }
          this.setEditedDataToValidationForm(gObj.editModule.virtualFormObj.element, this.getCurrentEditedData(args.prevData));
          args.isValid = gObj.editModule.virtualFormObj.validate();
          if (!args.isValid) {
            var tooltip = gObj.editModule.virtualFormObj.element.querySelector('.e-tooltip-wrap:not([style*="display: none"])');
            this.scrollToEdit(tooltip, {
              editIdx: args.editIdx,
              addIdx: args.addIdx
            });
          }
        }
      }
    };
    VirtualScroll2.prototype.scrollToEdit = function(tooltip, args, isRenderer) {
      var gObj = this.parent;
      if (tooltip) {
        var cols = gObj.columnModel;
        var field = setComplexFieldID(tooltip.id).split("_")[0];
        var col = gObj.getColumnByField(field);
        var scrollTop = this.parent.getContent().firstElementChild.scrollTop;
        var row2 = gObj.getRowByIndex(args.editIdx);
        if (isRenderer || !col || !isNullOrUndefined(args.addIdx) && scrollTop > 0 || !isNullOrUndefined(args.editIdx) && !row2) {
          var validationCol = void 0;
          for (var i = 0; i < cols.length && !col; i++) {
            if (cols[parseInt(i.toString(), 10)].field === field) {
              validationCol = cols[parseInt(i.toString(), 10)];
              break;
            }
          }
          if (isRenderer) {
            validationCol = col;
          }
          this.parent.notify(scrollToEdit, validationCol);
        }
      }
    };
    VirtualScroll2.prototype.setEditedDataToValidationForm = function(form, editedData) {
      var inputs2 = [].slice.call(form.getElementsByClassName("e-field"));
      for (var i = 0, len = inputs2.length; i < len; i++) {
        var col = getColumnModelByUid(this.parent, inputs2[parseInt(i.toString(), 10)].getAttribute("e-mappinguid"));
        if (col.field) {
          var value = getValue(col.field, editedData);
          value = isNullOrUndefined(value) ? "" : value;
          inputs2[parseInt(i.toString(), 10)].value = value;
        }
      }
    };
    VirtualScroll2.prototype.refreshVirtualElement = function(args) {
      if (this.parent.enableColumnVirtualization && args.module === "resize") {
        var renderer = this.locator.getService("rendererFactory");
        renderer.getRenderer(RenderType.Content).refreshVirtualElement();
      }
    };
    VirtualScroll2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return VirtualScroll2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/inline-edit-renderer.js
var InlineEditRender = (
  /** @class */
  function() {
    function InlineEditRender2(parent) {
      this.parent = parent;
    }
    InlineEditRender2.prototype.addNew = function(elements, args) {
      this.isEdit = false;
      var tbody2;
      if ((this.parent.frozenRows || (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.showAddNewRow) && this.parent.editSettings.newRowPosition === "Top") {
        tbody2 = this.parent.getHeaderTable().querySelector(tbody);
      } else {
        tbody2 = this.parent.getContentTable().querySelector(tbody);
      }
      args.row = this.parent.createElement("tr", {
        className: "e-row e-addedrow"
      });
      if (this.parent.getContentTable().querySelector(".e-emptyrow") && !this.parent.editSettings.showAddNewRow) {
        var emptyRow = this.parent.getContentTable().querySelector(".e-emptyrow");
        emptyRow.parentNode.removeChild(emptyRow);
        if (this.parent.frozenRows && this.parent.element.querySelector(".e-frozenrow-empty")) {
          this.parent.element.querySelector(".e-frozenrow-empty").classList.remove("e-frozenrow-empty");
        }
      }
      if (this.parent.editSettings.newRowPosition === "Top") {
        tbody2.insertBefore(args.row, tbody2.firstChild);
      } else {
        tbody2.appendChild(args.row);
      }
      args.row.appendChild(this.getEditElement(elements, false, void 0, args, true));
      this.parent.editModule.checkLastRow(args.row, args);
    };
    InlineEditRender2.prototype.update = function(elements, args) {
      this.isEdit = true;
      var tdElement = [].slice.call(args.row.querySelectorAll("td.e-rowcell"));
      args.row.innerHTML = "";
      args.row.appendChild(this.getEditElement(elements, true, tdElement, args, true));
      args.row.classList.add(editedRow);
      this.parent.editModule.checkLastRow(args.row, args);
    };
    InlineEditRender2.prototype.getEditElement = function(elements, isEdit, tdElement, args, isFrozen) {
      var gObj = this.parent;
      var gLen = 0;
      var isDetail = !isNullOrUndefined(gObj.detailTemplate) || !isNullOrUndefined(gObj.childGrid) ? 1 : 0;
      if (gObj.allowGrouping) {
        gLen = gObj.groupSettings.columns.length;
      }
      var td = this.parent.createElement("td", {
        className: "e-editcell e-normaledit",
        attrs: {
          colspan: (gObj.getCurrentVisibleColumns(this.parent.enableColumnVirtualization).length + this.parent.getIndentCount()).toString()
        }
      });
      var form = args.form = this.parent.createElement("form", {
        id: gObj.element.id + "EditForm",
        className: "e-gridform"
      });
      if (this.parent.editSettings.template) {
        this.appendChildren(form, args.rowData, isFrozen);
        td.appendChild(form);
        return td;
      }
      var table2 = this.parent.createElement("table", {
        className: "e-table e-inline-edit",
        attrs: {
          cellspacing: "0.25",
          role: "grid"
        }
      });
      table2.appendChild(gObj.getContentTable().querySelector(colGroup).cloneNode(true));
      var tbody2 = this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      var tr = this.parent.createElement("tr");
      var i = 0;
      if (isDetail) {
        tr.insertBefore(this.parent.createElement("td", {
          className: "e-detailrowcollapse"
        }), tr.firstChild);
      }
      if (gObj.isRowDragable()) {
        tr.appendChild(this.parent.createElement("td", {
          className: "e-dragindentcell"
        }));
      }
      while (i < gLen) {
        tr.appendChild(this.parent.createElement("td", {
          className: "e-indentcell"
        }));
        i++;
      }
      var m = 0;
      i = 0;
      var inputValue;
      var cols = args.isCustomFormValidation ? this.parent.columnModel : gObj.getColumns();
      while (isEdit && m < tdElement.length && i < cols.length || i < cols.length) {
        var span = isEdit && tdElement[parseInt(m.toString(), 10)] ? tdElement[parseInt(m.toString(), 10)].getAttribute("colspan") : null;
        var col = cols[parseInt(i.toString(), 10)];
        inputValue = elements[col.uid].value;
        var td_1 = this.parent.createElement("td", {
          className: rowCell,
          attrs: {
            style: "text-align:" + (col.textAlign ? col.textAlign : ""),
            "colspan": span ? span : ""
          }
        });
        if (col.visible) {
          td_1.appendChild(elements[col.uid]);
          if (this.parent.rowRenderingMode === "Vertical") {
            setStyleAndAttributes(td_1, {
              "data-cell": col.headerText
            });
            if (i === 0) {
              td_1.classList.add("e-responsive-editcell");
            }
          }
          if (col.editType === "booleanedit") {
            td_1.classList.add("e-boolcell");
          } else if (col.commands || col.commandsTemplate) {
            addClass([td_1], "e-unboundcell");
          }
        } else {
          td_1.classList.add("e-hide");
        }
        if (this.parent.isFrozenGrid()) {
          addStickyColumnPosition(this.parent, col, td_1);
          if (this.parent.isSpan) {
            var colSpan = td_1.getAttribute("colspan") ? parseInt(td_1.getAttribute("colspan"), 10) : 1;
            resetColandRowSpanStickyPosition(this.parent, col, td_1, colSpan);
          }
          if (this.parent.enableColumnVirtualization) {
            if (col.freeze === "Left" && !isNullOrUndefined(col.valueX)) {
              td_1.style.left = col.valueX - this.parent.translateX + "px";
            } else if (col.freeze === "Right" && !isNullOrUndefined(col.valueX)) {
              td_1.style.right = col.valueX + this.parent.translateX + "px";
            } else if (col.freeze === "Fixed") {
              td_1.style.left = this.parent.leftrightColumnWidth("left") - this.parent.translateX + "px";
              td_1.style.right = this.parent.leftrightColumnWidth("right") + this.parent.translateX + "px";
            }
          }
        }
        td_1.setAttribute("aria-label", inputValue + this.parent.localeObj.getConstant("ColumnHeader") + col.headerText);
        tr.appendChild(td_1);
        i = span ? i + parseInt(span, 10) : i + 1;
        m++;
      }
      addFixedColumnBorder(tr);
      tbody2.appendChild(tr);
      table2.appendChild(tbody2);
      form.appendChild(table2);
      td.appendChild(form);
      return td;
    };
    InlineEditRender2.prototype.removeEventListener = function() {
    };
    InlineEditRender2.prototype.appendChildren = function(form, data, isFrozen) {
      var _this = this;
      var dummyData = extend({}, data, {
        isAdd: !this.isEdit,
        isFrozen
      }, true);
      var editTemplateID = this.parent.element.id + "editSettingsTemplate";
      if (this.parent.isReact && typeof this.parent.editSettings.template !== "string") {
        this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID, null, null, form);
        this.parent.renderTemplates();
      } else {
        appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID));
      }
      var setRules = function() {
        var cols = _this.parent.getColumns();
        for (var i = 0; i < cols.length; i++) {
          if (cols[parseInt(i.toString(), 10)].validationRules) {
            _this.parent.editModule.formObj.rules[cols[parseInt(i.toString(), 10)].field] = cols[parseInt(i.toString(), 10)].validationRules;
          }
        }
      };
    };
    return InlineEditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/batch-edit-renderer.js
var BatchEditRender = (
  /** @class */
  function() {
    function BatchEditRender2(parent) {
      this.parent = parent;
    }
    BatchEditRender2.prototype.update = function(elements, args) {
      if (this.parent.isReact && args.columnObject && args.columnObject.template) {
        var parentRow = args.cell.parentElement;
        var newTd = args.cell.cloneNode(true);
        parentRow.insertBefore(newTd, args.cell);
        newTd.focus();
        args.cell.remove();
        args.cell = newTd;
      }
      args.cell.setAttribute("aria-label", args.cell.innerHTML + this.parent.localeObj.getConstant("ColumnHeader") + args.columnObject.field);
      args.cell.innerHTML = "";
      args.cell.appendChild(this.getEditElement(elements, args));
      args.cell.classList.add("e-editedbatchcell");
      classList(args.row, [editedRow, "e-batchrow"], []);
    };
    BatchEditRender2.prototype.getEditElement = function(elements, args) {
      var gObj = this.parent;
      var form = this.parent.createElement("form", {
        id: gObj.element.id + "EditForm",
        className: "e-gridform"
      });
      form.appendChild(elements[args.columnObject.uid]);
      if (args.columnObject.editType === "booleanedit") {
        args.cell.classList.add("e-boolcell");
      }
      if (!args.columnObject.editType) {
        args.cell.classList.add("e-inputbox");
      }
      return form;
    };
    return BatchEditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/dialog-edit-renderer.js
var DialogEditRender = (
  /** @class */
  function() {
    function DialogEditRender2(parent, serviceLocator) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(dialogDestroy, this.destroy, this);
      this.parent.on(destroy, this.destroy, this);
    }
    DialogEditRender2.prototype.setLocaleObj = function() {
      this.l10n = this.serviceLocator.getService("localization");
    };
    DialogEditRender2.prototype.addNew = function(elements, args) {
      this.isEdit = false;
      this.createDialog(elements, args);
    };
    DialogEditRender2.prototype.update = function(elements, args) {
      this.isEdit = true;
      this.createDialog(elements, args);
    };
    DialogEditRender2.prototype.createDialogHeader = function(args) {
      var _this = this;
      var gObj = this.parent;
      var header;
      if (this.parent.enableAdaptiveUI) {
        var responsiveDlgRenderer = new ResponsiveDialogRenderer(this.parent, this.serviceLocator);
        responsiveDlgRenderer.action = this.isEdit ? ResponsiveDialogAction.isEdit : ResponsiveDialogAction.isAdd;
        return responsiveDlgRenderer.renderResponsiveHeader(void 0, args);
      } else {
        if (gObj.editSettings.headerTemplate) {
          header = initializeCSPTemplate(function() {
            return _this.getDialogEditTemplateElement("HeaderTemplate", args).outerHTML;
          });
        } else if (this.isEdit) {
          header = this.l10n.getConstant("EditFormTitle") + args.primaryKeyValue[0];
        } else {
          header = this.l10n.getConstant("AddFormTitle");
        }
      }
      return header;
    };
    DialogEditRender2.prototype.createDialog = function(elements, args) {
      var _this = this;
      var gObj = this.parent;
      this.dialog = this.parent.createElement("div", {
        id: gObj.element.id + "_dialogEdit_wrapper",
        styles: "width: auto"
      });
      if (gObj.enableAdaptiveUI) {
        this.dialog.classList.add("e-responsive-dialog");
      }
      gObj.element.appendChild(this.dialog);
      this.setLocaleObj();
      this.dialog.setAttribute("aria-label", this.l10n.getConstant("DialogEdit"));
      this.dialogObj = new Dialog(extend({
        header: this.createDialogHeader(args),
        isModal: true,
        visible: true,
        cssClass: this.parent.cssClass ? "e-edit-dialog " + this.parent.cssClass : "e-edit-dialog",
        content: this.getEditElement(elements, args),
        showCloseIcon: true,
        allowDragging: true,
        // position: position,
        close: this.dialogClose.bind(this),
        created: this.dialogCreated.bind(this),
        closeOnEscape: true,
        width: gObj.editSettings.template ? "auto" : "330px",
        target: args.target ? args.target : document.body,
        animationSettings: {
          effect: "None"
        },
        footerTemplate: gObj.editSettings.footerTemplate ? initializeCSPTemplate(function() {
          return _this.getDialogEditTemplateElement("FooterTemplate", args).outerHTML;
        }) : null,
        buttons: [{
          click: this.btnClick.bind(this),
          buttonModel: {
            content: this.l10n.getConstant("SaveButton"),
            cssClass: this.parent.cssClass ? "e-primary " + this.parent.cssClass : "e-primary",
            isPrimary: true
          }
        }, {
          click: this.btnClick.bind(this),
          buttonModel: {
            cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
            content: this.l10n.getConstant("CancelButton")
          }
        }]
      }, gObj.editSettings.dialog ? gObj.editSettings.dialog.params || {} : {}));
      args.dialog = this.dialogObj;
      var isStringTemplate = "isStringTemplate";
      this.dialogObj["" + isStringTemplate] = true;
      this.renderResponsiveDialog();
      this.dialogObj.appendTo(this.dialog);
      applyBiggerTheme(this.parent.element, this.dialogObj.element.parentElement);
      if (gObj.enableAdaptiveUI) {
        this.dialogObj.show(true);
      }
    };
    DialogEditRender2.prototype.dialogCreated = function() {
      addBiggerDialog(this.parent);
    };
    DialogEditRender2.prototype.renderResponsiveDialog = function() {
      var _this = this;
      if (this.parent.enableAdaptiveUI) {
        if (this.parent.adaptiveDlgTarget) {
          this.dialogObj.target = this.parent.adaptiveDlgTarget;
        }
        this.dialogObj.buttons = [{}];
        this.dialogObj.showCloseIcon = true;
        this.dialogObj.visible = false;
        this.dialogObj.width = "100%";
        this.dialogObj.open = function() {
          _this.dialogObj.element.style.maxHeight = "100%";
        };
      }
    };
    DialogEditRender2.prototype.btnClick = function(e) {
      if (this.l10n.getConstant("CancelButton").toLowerCase() === e.target.innerText.trim().toLowerCase()) {
        this.dialogClose();
      } else {
        this.parent.endEdit();
      }
    };
    DialogEditRender2.prototype.dialogClose = function() {
      this.parent.closeEdit();
    };
    DialogEditRender2.prototype.destroy = function(args) {
      var dialogEditTemplates = ["template", "headerTemplate", "footerTemplate"];
      for (var i = 0; i < dialogEditTemplates.length; i++) {
        if (this.parent.editSettings[dialogEditTemplates[parseInt(i.toString(), 10)]]) {
          var templateName = dialogEditTemplates[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + dialogEditTemplates[parseInt(i.toString(), 10)].slice(1);
          var editTemplateID = this.parent.element.id + "editSettings" + templateName;
          updateBlazorTemplate(editTemplateID, templateName, this.parent.editSettings);
        }
      }
      this.parent.notify(destroyForm, {});
      this.parent.isEdit = false;
      this.parent.notify(toolbarRefresh, {});
      if (this.dialog && !this.dialogObj.isDestroyed) {
        this.dialogObj.destroy();
        remove(this.dialog);
      }
    };
    DialogEditRender2.prototype.getDialogEditTemplateElement = function(dialogTemp, args) {
      var tempDiv = this.parent.createElement("div", {
        className: "e-dialog" + dialogTemp
      });
      var dummyData = extend({}, args.rowData, {
        isAdd: !this.isEdit
      }, true);
      var templateID = this.parent.element.id + "editSettings" + dialogTemp;
      appendChildren(tempDiv, (dialogTemp === "HeaderTemplate" ? this.parent.getEditHeaderTemplate() : this.parent.getEditFooterTemplate())(dummyData, this.parent, "editSettings" + dialogTemp, templateID));
      updateBlazorTemplate(templateID, dialogTemp, this.parent.editSettings);
      return tempDiv;
    };
    DialogEditRender2.prototype.getEditElement = function(elements, args) {
      var _this = this;
      var gObj = this.parent;
      var div = this.parent.createElement("div", {
        className: this.isEdit ? editedRow : "e-insertedrow"
      });
      var form = args.form = this.parent.createElement("form", {
        id: gObj.element.id + "EditForm",
        className: "e-gridform"
      });
      if (this.parent.editSettings.template) {
        var editTemplateID = this.parent.element.id + "editSettingsTemplate";
        var dummyData = extend({}, args.rowData, {
          isAdd: !this.isEdit
        }, true);
        var isReactCompiler = this.parent.isReact && typeof this.parent.editSettings.template !== "string";
        var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
        if (isReactCompiler || isReactChild) {
          this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID, null, null, form);
          this.parent.renderTemplates();
        } else {
          appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate", editTemplateID));
        }
        var setRules = function() {
          var columns = _this.parent.getColumns();
          for (var i2 = 0; i2 < columns.length; i2++) {
            if (columns[parseInt(i2.toString(), 10)].validationRules) {
              _this.parent.editModule.formObj.rules[columns[parseInt(i2.toString(), 10)].field] = columns[parseInt(i2.toString(), 10)].validationRules;
            }
          }
        };
        updateBlazorTemplate(editTemplateID, "Template", this.parent.editSettings, true, setRules);
        div.appendChild(form);
        return div;
      }
      var table2 = this.parent.createElement("table", {
        className: table,
        attrs: {
          cellspacing: "6px",
          role: "grid"
        }
      });
      var tbody2 = this.parent.createElement(tbody, {
        attrs: {
          role: "rowgroup"
        }
      });
      var cols = gObj.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (this.parent.editModule.checkColumnIsGrouped(cols[parseInt(i.toString(), 10)]) || cols[parseInt(i.toString(), 10)].commands || cols[parseInt(i.toString(), 10)].commandsTemplate || cols[parseInt(i.toString(), 10)].type === "checkbox") {
          continue;
        }
        var tr = this.parent.createElement("tr", {
          attrs: {
            role: "row"
          }
        });
        var dataCell = this.parent.createElement("td", {
          className: rowCell,
          attrs: {
            style: "text-align:" + (this.parent.enableRtl ? "right" : "left") + ";width:190px"
          }
        });
        elements[cols[parseInt(i.toString(), 10)].uid].classList.remove("e-input");
        dataCell.appendChild(elements[cols[parseInt(i.toString(), 10)].uid]);
        tr.appendChild(dataCell);
        tbody2.appendChild(tr);
      }
      table2.appendChild(tbody2);
      form.appendChild(table2);
      div.appendChild(form);
      return div;
    };
    DialogEditRender2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(dialogDestroy, this.destroy);
      this.parent.off(destroy, this.destroy);
    };
    return DialogEditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/edit-renderer.js
var EditRender = (
  /** @class */
  function() {
    function EditRender2(parent, serviceLocator) {
      this.editType = {
        "Inline": InlineEditRender,
        "Normal": InlineEditRender,
        "Batch": BatchEditRender,
        "Dialog": DialogEditRender
      };
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator);
      this.focus = serviceLocator.getService("focus");
    }
    EditRender2.prototype.addNew = function(args) {
      this.renderer.addNew(this.getEditElements(args), args);
      this.convertWidget(args);
    };
    EditRender2.prototype.update = function(args) {
      this.renderer.update(this.getEditElements(args), args);
      var isCustomFormValidation = args.isCustomFormValidation;
      if (!isCustomFormValidation) {
        this.parent.notify(beforeStartEdit, args);
        this.convertWidget(args);
      }
    };
    EditRender2.prototype.convertWidget = function(args) {
      var gObj = this.parent;
      var isFocused;
      var cell;
      var value;
      var form = gObj.editSettings.mode === "Dialog" ? select("#" + gObj.element.id + "_dialogEdit_wrapper .e-gridform", document) : gObj.editSettings.showAddNewRow && gObj.element.querySelector(".e-editedrow") ? gObj.element.querySelector(".e-editedrow").getElementsByClassName("e-gridform")[0] : gObj.element.getElementsByClassName("e-gridform")[0];
      var cols = gObj.editSettings.mode !== "Batch" ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
      for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
        var col = cols_1[_i];
        if (this.parent.editSettings.template && !isNullOrUndefined(col.field)) {
          var cellArgs = extend({}, args);
          cellArgs.element = form.querySelector("[name=" + getComplexFieldID(col.field) + "]");
          if (typeof col.edit.write === "string") {
            getObject(col.edit.write, window)(cellArgs);
          } else {
            col.edit.write(cellArgs);
          }
          continue;
        }
        if (this.parent.editModule.checkColumnIsGrouped(col) || col.commands) {
          continue;
        }
        value = col.valueAccessor(col.field, args.rowData, col);
        cell = form.querySelector("[e-mappinguid=" + col.uid + "]");
        var temp = col.edit.write;
        if (!isNullOrUndefined(cell)) {
          if (typeof temp === "string") {
            temp = getObject(temp, window);
            temp({
              rowData: args.rowData,
              element: cell,
              column: col,
              requestType: args.requestType,
              row: args.row,
              foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)
            });
          } else {
            col.edit.write({
              rowData: args.rowData,
              element: cell,
              column: col,
              requestType: args.requestType,
              row: args.row,
              foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)
            });
          }
          if (!isFocused && isNullOrUndefined(cell.getAttribute("disabled")) && !parentsUntil(cell, "e-checkbox-disabled")) {
            this.focusElement(cell, args.type);
            isFocused = true;
          }
        }
      }
    };
    EditRender2.prototype.focusElement = function(elem, type) {
      var chkBox = this.parent.element.querySelector(".e-edit-checkselect");
      if (!isNullOrUndefined(chkBox) && chkBox.nextElementSibling) {
        chkBox.nextElementSibling.classList.add("e-focus");
      }
      if (this.parent.editSettings.mode === "Batch") {
        this.focus.onClick({
          target: closest(elem, "td")
        }, true);
      } else {
        var isFocus = (this.parent.enableVirtualization || this.parent.enableColumnVirtualization) && this.parent.editSettings.mode === "Normal" ? false : true;
        var focusElement = elem.classList.contains("e-dropdownlist") ? elem.parentElement : elem;
        if ((isFocus || (this.parent.enableVirtualization || this.parent.enableColumnVirtualization) && this.parent.editSettings.newRowPosition === "Bottom" && parentsUntil(elem, addedRow)) && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !parentsUntil(elem, addedRow) || this.parent.addNewRowFocus)) {
          focusElement.focus();
        } else {
          focusElement.focus({
            preventScroll: true
          });
        }
      }
      if (elem.classList.contains("e-defaultcell")) {
        elem.setSelectionRange(elem.value.length, elem.value.length);
      }
    };
    EditRender2.prototype.getEditElements = function(args) {
      var gObj = this.parent;
      var elements = {};
      var cols = gObj.editSettings.mode !== "Batch" ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
      if (args.isCustomFormValidation) {
        cols = this.parent.columnModel;
      }
      if (this.parent.editSettings.template) {
        return {};
      }
      for (var i = 0, len = cols.length; i < len; i++) {
        var col = cols[parseInt(i.toString(), 10)];
        if (col.commands || col.commandsTemplate) {
          var cellRendererFact = this.serviceLocator.getService("cellRendererFactory");
          var model = new RowModelGenerator(this.parent);
          var cellRenderer = cellRendererFact.getCellRenderer(CellType.CommandColumn);
          var cells = model.generateRows(args.rowData)[0].cells;
          var cell = cells.filter(function(cell2) {
            return cell2.rowID;
          });
          var td = cellRenderer.render(cell[parseInt(i.toString(), 10)], args.rowData, {
            "index": args.row ? args.row.getAttribute(dataRowIndex) : 0
          }, this.parent.enableVirtualization);
          var div = td.firstElementChild;
          div.setAttribute("textAlign", td.getAttribute("textAlign"));
          elements[col.uid] = div;
          continue;
        }
        if (col.type === "dateonly" && args.rowData[col.field] instanceof Date) {
          var cellValue = args.rowData[col.field];
          args.rowData[col.field] = cellValue.getFullYear() + "-" + padZero(cellValue.getMonth() + 1) + "-" + padZero(cellValue.getDate());
        }
        var value = col.valueAccessor(col.field, args.rowData, col);
        var tArgs = {
          column: col,
          value,
          type: args.requestType,
          data: args.rowData
        };
        var temp = col.edit.create;
        var input2 = void 0;
        if (col.editTemplate) {
          input2 = this.parent.createElement("span", {
            attrs: {
              "e-mappinguid": col.uid
            }
          });
          var tempID = this.parent.element.id + col.uid + "editTemplate";
          var tempData = extendObjWithFn({}, args.rowData, {
            column: col
          });
          var isReactCompiler = this.parent.isReact && typeof col.editTemplate !== "string";
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          if (isReactCompiler || isReactChild) {
            col.getEditTemplate()(extend({
              "index": args.rowIndex
            }, tempData), this.parent, "editTemplate", tempID, null, null, input2);
            this.parent.renderTemplates();
          } else {
            var template = col.getEditTemplate()(extend({
              "index": args.rowIndex
            }, tempData), this.parent, "editTemplate", tempID);
            appendChildren(input2, template);
          }
        } else {
          if (typeof temp === "string") {
            temp = getObject(temp, window);
            input2 = temp(tArgs);
          } else {
            input2 = col.edit.create(tArgs);
          }
          if (typeof input2 === "string") {
            var div = this.parent.createElement("div");
            div.innerHTML = input2;
            input2 = div.firstChild;
          }
          var isInput = input2.tagName !== "input" && input2.querySelectorAll("input").length;
          var complexFieldName = getComplexFieldID(col.field);
          attributes(isInput ? input2.querySelector("input") : input2, {
            name: complexFieldName,
            "e-mappinguid": col.uid,
            id: gObj.element.id + complexFieldName
          });
          classList(input2, ["e-input", "e-field"], []);
          if (col.textAlign === "Right") {
            input2.classList.add("e-ralign");
          }
          if ((col.isPrimaryKey || col.isIdentity) && args.requestType === "beginEdit" || col.isIdentity && args.requestType === "add") {
            input2.setAttribute("disabled", "");
          }
        }
        elements[col.uid] = input2;
      }
      return elements;
    };
    EditRender2.prototype.destroy = function() {
      this.renderer.removeEventListener();
    };
    return EditRender2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/edit-cell-base.js
var EditCellBase = (
  /** @class */
  function() {
    function EditCellBase2(parent) {
      this.parent = parent;
    }
    EditCellBase2.prototype.create = function(args) {
      return createEditElement(this.parent, args.column, "e-field", {
        type: "text"
      });
    };
    EditCellBase2.prototype.read = function(element) {
      return element.ej2_instances[0].value;
    };
    EditCellBase2.prototype.destroy = function() {
      if (this.obj && !this.obj.isDestroyed) {
        if (this.removeEventHandler) {
          this.removeEventHandler();
        }
        this.obj.destroy();
      }
    };
    return EditCellBase2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/boolean-edit-cell.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BooleanEditCell = (
  /** @class */
  function(_super) {
    __extends31(BooleanEditCell2, _super);
    function BooleanEditCell2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.activeClasses = ["e-selectionbackground", "e-active"];
      return _this;
    }
    BooleanEditCell2.prototype.create = function(args) {
      var col = args.column;
      var classNames = "e-field e-boolcell";
      if (col.type === "checkbox") {
        classNames = "e-field e-boolcell e-edit-checkselect";
      }
      this.removeEventHandler = this.removeEventListener;
      return createEditElement(this.parent, args.column, classNames, {
        type: "checkbox",
        value: args.value
      });
    };
    BooleanEditCell2.prototype.read = function(element) {
      return element.checked;
    };
    BooleanEditCell2.prototype.write = function(args) {
      var selectChkBox;
      var chkState;
      if (!isNullOrUndefined(args.row)) {
        selectChkBox = args.row.querySelector(".e-edit-checkselect");
      }
      if (getObject(args.column.field, args.rowData)) {
        chkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());
      }
      if (!isNullOrUndefined(selectChkBox) && args.column.type === "checkbox") {
        this.editType = this.parent.editSettings.mode;
        this.editRow = args.row;
        if (args.requestType !== "add") {
          var row2 = this.parent.getRowObjectFromUID(args.row.getAttribute("data-uid"));
          chkState = row2 ? row2.isSelected : false;
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.getElementsByClassName(rowCell)), chkState].concat(this.activeClasses));
      }
      this.obj = new CheckBox(extend({
        label: this.parent.editSettings.mode !== "Dialog" ? " " : args.column.headerText,
        checked: chkState,
        disabled: !isEditable(args.column, args.requestType, args.element),
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      }, args.column.edit.params));
      this.addEventListener();
      this.obj.appendTo(args.element);
    };
    BooleanEditCell2.prototype.addEventListener = function() {
      this.cbChange = this.checkBoxChange.bind(this);
      this.obj.addEventListener(change, this.cbChange);
    };
    BooleanEditCell2.prototype.removeEventListener = function() {
      if (this.obj.isDestroyed) {
        return;
      }
      this.obj.removeEventListener(change, this.cbChange);
    };
    BooleanEditCell2.prototype.checkBoxChange = function(args) {
      if (this.editRow && this.editType !== "Dialog") {
        var add = false;
        if (!args.checked) {
          this.editRow.removeAttribute("aria-selected");
        } else {
          add = true;
          this.editRow.setAttribute("aria-selected", add.toString());
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.getElementsByClassName(rowCell)), add].concat(this.activeClasses));
      }
    };
    return BooleanEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/dropdown-edit-cell.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DropDownEditCell = (
  /** @class */
  function(_super) {
    __extends32(DropDownEditCell2, _super);
    function DropDownEditCell2(parent) {
      var _this = (
        //constructor
        _super.call(this) || this
      );
      _this.parent = parent;
      _this.flag = false;
      _this.removeEventHandler = _this.removeEventListener;
      return _this;
    }
    DropDownEditCell2.prototype.write = function(args) {
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.column = args.column;
      var pred = new Predicate(args.column.field, "notequal", null, true, false);
      var params = {};
      if (args.column.edit.params) {
        var keys = Object.keys(args.column.edit.params);
        for (var i = 0; i < keys.length; i++) {
          params[keys[parseInt(i.toString(), 10)]] = keys[parseInt(i.toString(), 10)] === "query" ? args.column.edit.params[keys[parseInt(i.toString(), 10)]].clone() : args.column.edit.params[keys[parseInt(i.toString(), 10)]];
        }
      }
      this.obj = new DropDownList(extend({
        dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
        query: new Query().where(pred).select(args.column.field),
        enabled: isEditable(args.column, args.requestType, args.element),
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        enableRtl: this.parent.enableRtl,
        placeholder: isInline ? "" : args.column.headerText,
        popupHeight: "200px",
        floatLabelType: isInline ? "Never" : "Always",
        sortOrder: "Ascending",
        cssClass: this.parent.cssClass ? this.parent.cssClass : null,
        close: this.dropDownClose.bind(this)
      }, params));
      if (this.parent.enableVirtualization) {
        if (params.dataSource) {
          this.obj.dataSource = params.dataSource;
        } else {
          this.obj.dataSource = args.column.isForeignColumn() ? [args.foreignKeyData[0]] : [args.rowData];
        }
      }
      this.addEventListener();
      this.obj.query.params = this.parent.query.params;
      this.obj.appendTo(args.element);
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
    };
    DropDownEditCell2.prototype.dropDownClose = function(args) {
      if (args.event && args.event.action === "escape") {
        this.parent.editModule.editCellDialogClose = true;
      }
    };
    DropDownEditCell2.prototype.addEventListener = function() {
      this.ddCreated = this.dropdownCreated.bind(this);
      this.ddOpen = this.dropDownOpen.bind(this);
      this.ddBeforeOpen = this.dropdownBeforeOpen.bind(this);
      this.ddComplete = this.ddActionComplete.bind(this);
      this.obj.addEventListener(create, this.ddCreated);
      this.obj.addEventListener(open, this.ddOpen);
      this.obj.addEventListener(beforeOpen, this.ddBeforeOpen);
      this.obj.addEventListener(actionComplete, this.ddComplete);
    };
    DropDownEditCell2.prototype.removeEventListener = function() {
      if (this.obj.isDestroyed) {
        return;
      }
      this.obj.removeEventListener(create, this.ddCreated);
      this.obj.removeEventListener(open, this.ddOpen);
      this.obj.removeEventListener(beforeOpen, this.ddBeforeOpen);
      this.obj.removeEventListener(actionComplete, this.ddComplete);
    };
    DropDownEditCell2.prototype.dropdownCreated = function(e) {
      this.flag = true;
    };
    DropDownEditCell2.prototype.dropdownBeforeOpen = function() {
      if (this.parent.enableVirtualization) {
        if (this.column.edit.params && this.column.edit.params.dataSource) {
          this.obj.dataSource = this.column.edit.params.dataSource;
        } else {
          this.obj.dataSource = !this.column.isForeignColumn() ? this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource) : this.column.dataSource instanceof DataManager ? this.column.dataSource : new DataManager(this.column.dataSource);
        }
      }
    };
    DropDownEditCell2.prototype.ddActionComplete = function(e) {
      e.result = DataUtil.distinct(e.result, this.obj.fields.value, true);
      if (this.flag && this.column.dataSource && !(this.column.edit.params && this.column.edit.params.ddEditedData)) {
        if ("result" in this.column.dataSource) {
          this.column.dataSource.result = e.result;
        } else if (this.column.dataSource instanceof DataManager) {
          this.column.dataSource.dataSource.json = e.result;
        }
      }
      this.flag = false;
    };
    DropDownEditCell2.prototype.dropDownOpen = function(args) {
      var dlgElement = parentsUntil(this.obj.element, "e-dialog");
      if (this.parent.editSettings.mode === "Dialog" && !isNullOrUndefined(dlgElement)) {
        var dlgObj = select("#" + dlgElement.id, document).ej2_instances[0];
        args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();
      }
    };
    return DropDownEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/numeric-edit-cell.js
var NumericEditCell = (
  /** @class */
  function() {
    function NumericEditCell2(parent) {
      this.parent = parent;
    }
    NumericEditCell2.prototype.keyEventHandler = function(args) {
      if (args.keyCode === 13 || args.keyCode === 9) {
        var evt = document.createEvent("HTMLEvents");
        evt.initEvent("change", false, true);
        this.dispatchEvent(evt);
      }
    };
    NumericEditCell2.prototype.create = function(args) {
      this.instances = new Internationalization(this.parent.locale);
      return createEditElement(this.parent, args.column, "e-field", {});
    };
    NumericEditCell2.prototype.read = function(element) {
      return this.obj.value;
    };
    NumericEditCell2.prototype.write = function(args) {
      var col = args.column;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.obj = new NumericTextBox(extend({
        value: parseFloat(getObject(args.column.field, args.rowData)),
        enableRtl: this.parent.enableRtl,
        placeholder: isInline ? "" : args.column.headerText,
        enabled: isEditable(args.column, args.requestType, args.element),
        floatLabelType: this.parent.editSettings.mode !== "Dialog" ? "Never" : "Always",
        locale: this.parent.locale,
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, col.edit.params));
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
      this.obj.appendTo(args.element);
      this.obj.element.addEventListener("keydown", this.keyEventHandler);
    };
    NumericEditCell2.prototype.destroy = function() {
      if (this.obj && !this.obj.isDestroyed) {
        this.obj.element.removeEventListener("keydown", this.keyEventHandler);
        this.obj.destroy();
      }
    };
    return NumericEditCell2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/default-edit-cell.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DefaultEditCell = (
  /** @class */
  function(_super) {
    __extends33(DefaultEditCell2, _super);
    function DefaultEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultEditCell2.prototype.create = function(args) {
      var attr = {
        type: "text",
        value: !isNullOrUndefined(args.value) ? args.value : "",
        style: "text-align:" + args.column.textAlign
      };
      return createEditElement(this.parent, args.column, "e-field e-input e-defaultcell", attr);
    };
    DefaultEditCell2.prototype.read = function(element) {
      return element.value;
    };
    DefaultEditCell2.prototype.write = function(args) {
      var col = args.column;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.obj = new TextBox(extend({
        element: args.element,
        floatLabelType: this.parent.editSettings.mode !== "Dialog" ? "Never" : "Always",
        enableRtl: this.parent.enableRtl,
        enabled: isEditable(args.column, args.requestType, args.element),
        placeholder: isInline ? "" : args.column.headerText,
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      }, col.edit.params));
      this.obj.appendTo(args.element);
      if (this.parent.editSettings.mode === "Batch") {
        this.obj.element.addEventListener("keydown", this.keyEventHandler);
      }
    };
    DefaultEditCell2.prototype.keyEventHandler = function(args) {
      if (args.key === "Enter" || args.key === "Tab") {
        var evt = new Event("change", {
          bubbles: false,
          cancelable: true
        });
        this.dispatchEvent(evt);
      }
    };
    DefaultEditCell2.prototype.destroy = function() {
      if (this.obj && !this.obj.isDestroyed) {
        this.obj.element.removeEventListener("keydown", this.keyEventHandler);
        this.obj.destroy();
      }
    };
    return DefaultEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/normal-edit.js
var NormalEdit = (
  /** @class */
  function() {
    function NormalEdit2(parent, serviceLocator, renderer) {
      this.args = {};
      this.currentVirtualData = {};
      this.parent = parent;
      this.renderer = renderer;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    NormalEdit2.prototype.clickHandler = function(e) {
      var target = e.target;
      var gObj = this.parent;
      if (gObj.editSettings.showAddNewRow && isNullOrUndefined(gObj.element.querySelector("." + editedRow))) {
        return;
      }
      if ((parentsUntil(target, gridContent) && parentsUntil(parentsUntil(target, gridContent), "e-grid").id === gObj.element.id || gObj.frozenRows && parentsUntil(target, headerContent) && !parentsUntil(target, "e-columnheader")) && !parentsUntil(target, "e-unboundcelldiv")) {
        this.rowIndex = parentsUntil(target, rowCell) ? parseInt(target.parentElement.getAttribute(dataRowIndex), 10) : -1;
        if (gObj.isEdit) {
          gObj.editModule.endEdit();
        }
      }
    };
    NormalEdit2.prototype.dblClickHandler = function(e) {
      if (parentsUntil(e.target, rowCell) && this.parent.editSettings.allowEditOnDblClick && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !parentsUntil(e.target, "e-addedrow"))) {
        this.parent.editModule.startEdit(parentsUntil(e.target, row));
      }
    };
    NormalEdit2.prototype.editComplete = function(e) {
      this.parent.isEdit = this.parent.editSettings.showAddNewRow ? true : false;
      var action = "action";
      switch (e.requestType) {
        case "save":
          if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === "Multiple") || !this.parent.isPersistSelection) {
            if (e["" + action] !== "edit" && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && e["" + action] !== "add")) {
              this.parent.selectRow(e["index"]);
            }
          }
          this.parent.trigger(actionComplete, extend(e, {
            requestType: "save",
            type: actionComplete
          }));
          break;
        case "delete":
          this.parent.trigger(actionComplete, extend(e, {
            requestType: "delete",
            type: actionComplete
          }));
          if (!this.parent.isCheckBoxSelection) {
            this.parent.selectRow(this.editRowIndex);
          }
          break;
      }
    };
    NormalEdit2.prototype.getEditArgs = function(editedData, rowObj, isScroll) {
      var primaryKeys = this.parent.getPrimaryKeyFieldNames();
      var primaryKeyValues = [];
      for (var i = 0; i < primaryKeys.length; i++) {
        primaryKeyValues.push(getObject(primaryKeys[parseInt(i.toString(), 10)], editedData));
      }
      var args = {
        primaryKey: primaryKeys,
        primaryKeyValue: primaryKeyValues,
        requestType: "beginEdit",
        rowData: editedData,
        rowIndex: this.rowIndex,
        type: "edit",
        cancel: false,
        foreignKeyData: rowObj && rowObj.foreignKeyData,
        target: void 0,
        isScroll
      };
      return args;
    };
    NormalEdit2.prototype.startEdit = function(tr) {
      var _this = this;
      var gObj = this.parent;
      this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute(dataRowIndex), 10);
      if (gObj.enableVirtualization || gObj.enableColumnVirtualization || gObj.enableInfiniteScrolling) {
        var selector = '.e-row[data-rowindex="' + this.rowIndex + '"]';
        var virtualRow = this.parent.element.querySelector(selector);
        if (!virtualRow) {
          return;
        }
      }
      var e = {
        data: void 0,
        index: this.rowIndex,
        isScroll: false
      };
      this.parent.notify(virtualScrollEditActionBegin, e);
      if (isGroupAdaptive(gObj)) {
        var rObj = gObj.getRowObjectFromUID(tr.getAttribute("data-uid"));
        this.previousData = rObj.data;
      } else if (this.parent.enableVirtualization || this.parent.enableColumnVirtualization || this.parent.enableInfiniteScrolling && !this.previousData) {
        this.previousData = e.data;
      } else if (!this.parent.enableVirtualization) {
        this.previousData = extend({}, {}, gObj.getCurrentViewRecords()[this.rowIndex], true);
      }
      var editedData = extend({}, {}, e.data || this.previousData, true);
      this.uid = tr.getAttribute("data-uid");
      var rowObj = gObj.getRowObjectFromUID(this.uid);
      var args = this.getEditArgs(editedData, rowObj, e.isScroll);
      args.row = tr;
      if (!args.isScroll) {
        this.parent.notify(createVirtualValidationForm, {
          uid: this.uid,
          prevData: this.previousData,
          argsCreator: this.getEditArgs.bind(this),
          renderer: this.renderer
        });
        gObj.trigger(beginEdit, args, function(begineditargs) {
          begineditargs.type = "actionBegin";
          gObj.trigger(actionBegin, begineditargs, function(editargs) {
            if (!editargs.cancel) {
              _this.inlineEditHandler(editargs, tr);
            }
          });
        });
      } else {
        this.inlineEditHandler(args, tr);
      }
    };
    NormalEdit2.prototype.disabledShowAddRow = function(disable, prevent) {
      var addRow = this.parent.element.querySelector(".e-addedrow");
      var inputs2 = [].slice.call(addRow ? addRow.querySelectorAll(".e-input") : []);
      if (addRow && addRow.querySelector(".e-unboundcell")) {
        var buttons = [].slice.call(addRow.querySelector(".e-unboundcell").querySelectorAll(".e-btn"));
        for (var i = 0; i < buttons.length; i++) {
          if (!disable) {
            buttons[parseInt(i.toString(), 10)].classList.add("e-disabled");
            buttons[parseInt(i.toString(), 10)].setAttribute("disabled", "disabled");
          } else {
            buttons[parseInt(i.toString(), 10)].classList.remove("e-disabled");
            buttons[parseInt(i.toString(), 10)].removeAttribute("disabled");
          }
        }
      }
      if (inputs2.length) {
        for (var i = 0; i < inputs2.length; i++) {
          var input2 = inputs2[parseInt(i.toString(), 10)];
          var uid2 = input2.getAttribute("e-mappinguid");
          var column = this.parent.getColumnByUid(uid2);
          var error = parentsUntil(input2, "e-rowcell").querySelector(".e-error");
          if (error) {
            error.classList.remove("e-error");
          }
          if (input2.ej2_instances) {
            if (prevent && isNullOrUndefined(column.defaultValue)) {
              input2.ej2_instances[0].value = null;
              input2.value = null;
            }
            if (!isNullOrUndefined(disable)) {
              input2.ej2_instances[0].enabled = disable && column.allowEditing ? true : false;
            }
          } else {
            if (prevent && input2.value && input2.value.length && isNullOrUndefined(column.defaultValue)) {
              input2.value = null;
            }
            if (!isNullOrUndefined(disable)) {
              if (!disable) {
                input2.classList.add("e-disabled");
                input2.setAttribute("disabled", "disabled");
              } else if (column.allowEditing) {
                input2.classList.remove("e-disabled");
                input2.removeAttribute("disabled");
              }
            }
          }
        }
      }
    };
    NormalEdit2.prototype.inlineEditHandler = function(editargs, tr) {
      var gObj = this.parent;
      gObj.isEdit = true;
      editargs.row = editargs.row ? editargs.row : tr;
      if (gObj.editSettings.mode !== "Dialog") {
        gObj.clearSelection();
      }
      if (gObj.editSettings.mode === "Dialog" && gObj.selectionModule) {
        gObj.selectionModule.preventFocus = true;
        editargs.row.classList.add("e-dlgeditrow");
      }
      this.renderer.update(editargs);
      this.uid = tr.getAttribute("data-uid");
      gObj.editModule.applyFormValidation();
      if (gObj.editSettings.showAddNewRow && !tr.classList.contains("e-addedrow")) {
        this.disabledShowAddRow(false, true);
      }
      editargs.type = "actionComplete";
      gObj.trigger(actionComplete, editargs);
      if (gObj.editSettings.template) {
        gObj.editModule.applyFormValidation(void 0, editargs.form.ej2_instances[0].rules);
      }
      this.args = editargs;
      if (this.parent.allowTextWrap) {
        this.parent.notify(freezeRender, {
          case: "textwrap"
        });
      }
    };
    NormalEdit2.prototype.updateRow = function(index, data) {
      var _this = this;
      var gObj = this.parent;
      this.editRowIndex = index;
      var args = {
        requestType: "save",
        action: "edit",
        type: actionBegin,
        data,
        cancel: false,
        previousData: gObj.getCurrentViewRecords()[parseInt(index.toString(), 10)],
        row: gObj.getRowByIndex(index)
      };
      gObj.showSpinner();
      if (gObj.enableInfiniteScrolling) {
        this.uid = args.row.getAttribute("data-uid");
        var index_1 = parseInt(args.row.getAttribute("data-rowindex"), 10);
        this.parent.notify(refreshInfiniteEditrowindex, {
          index: index_1
        });
      }
      gObj.notify(updateData, args);
      if (args.promise) {
        args.promise.then(function() {
          return gObj.refresh();
        }).catch(function(e) {
          return _this.edFail(e);
        });
      } else {
        if (!gObj.enableInfiniteScrolling) {
          gObj.refresh();
        }
      }
    };
    NormalEdit2.prototype.editFormValidate = function() {
      var gObj = this.parent;
      var isValid = gObj.editModule.editFormValidate();
      var validationArgs = {
        prevData: this.previousData,
        isValid: true,
        editIdx: this.editRowIndex,
        addIdx: this.addedRowIndex
      };
      gObj.notify(validateVirtualForm, validationArgs);
      return isValid && validationArgs.isValid;
    };
    NormalEdit2.prototype.endEdit = function() {
      var _this = this;
      var gObj = this.parent;
      if (!this.parent.isEdit || !this.editFormValidate()) {
        return;
      }
      var editedData = extend({}, {}, this.previousData, true);
      var args = extend(this.args, {
        requestType: "save",
        type: actionBegin,
        data: editedData,
        cancel: false,
        previousData: this.previousData,
        selectedRow: gObj.selectedRowIndex,
        foreignKeyData: {}
      });
      var isDlg = gObj.editSettings.mode === "Dialog";
      var dlgWrapper = select("#" + gObj.element.id + "_dialogEdit_wrapper", document);
      var dlgForm = isDlg ? dlgWrapper.querySelector(".e-gridform") : gObj.editSettings.showAddNewRow && gObj.element.querySelector("." + editedRow) ? gObj.element.querySelector("." + editedRow).getElementsByClassName("e-gridform")[0] : gObj.element.getElementsByClassName("e-gridform")[0];
      var data = {
        virtualData: extend({}, {}, this.previousData, true),
        isAdd: false,
        isScroll: false,
        endEdit: true
      };
      this.parent.notify(getVirtualData, data);
      if ((this.parent.enableVirtualization || this.parent.enableColumnVirtualization || this.parent.enableInfiniteScrolling) && this.parent.editSettings.mode === "Normal" && Object.keys(data.virtualData).length) {
        if (this.parent.isEdit) {
          this.currentVirtualData = editedData = args.data = data.virtualData;
        }
      } else {
        editedData = gObj.editModule.getCurrentEditedData(dlgForm, editedData);
      }
      var eleLength = [].slice.call(gObj.element.getElementsByClassName(editedRow)).length;
      if (!data.isAdd && Object.keys(this.currentVirtualData).length && !eleLength) {
        eleLength = 1;
      }
      if (isDlg ? dlgWrapper.getElementsByClassName(editedRow).length : eleLength) {
        args.action = "edit";
        gObj.trigger(actionBegin, args, function(endEditArgs) {
          if (endEditArgs.cancel) {
            return;
          }
          if (_this.parent.loadingIndicator.indicatorType === "Spinner") {
            gObj.showSpinner();
          }
          if (_this.parent.loadingIndicator.indicatorType === "Shimmer") {
            _this.parent.showMaskRow();
          }
          if (gObj.editSettings.showAddNewRow) {
            _this.disabledShowAddRow(true);
          }
          gObj.notify(updateData, endEditArgs);
        });
      } else {
        args.action = "add";
        args.selectedRow = 0;
        args.index = this.addedRowIndex;
        gObj.notify(virtualScrollEditSuccess, {});
        gObj.notify(modelChanged, args);
        this.addedRowIndex = null;
        if (args.cancel) {
          return;
        }
        if (this.parent.editSettings.showAddNewRow) {
          this.parent.notify(showAddNewRowFocus, {});
          if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {
            this.disabledShowAddRow(true, true);
          }
        }
      }
    };
    NormalEdit2.prototype.destroyElements = function() {
      var gObj = this.parent;
      if (!gObj.editSettings.showAddNewRow || gObj.editSettings.showAddNewRow && gObj.element.querySelector(".e-editedrow")) {
        gObj.editModule.destroyWidgets();
        gObj.editModule.destroyForm();
      }
      this.parent.notify(dialogDestroy, {});
    };
    NormalEdit2.prototype.editHandler = function(args) {
      var _this = this;
      if (args.promise) {
        args.promise.then(function(e) {
          return _this.edSucc(e, args);
        }).catch(function(e) {
          return _this.edFail(e);
        });
      } else {
        this.editSuccess(args.data, args);
      }
      if (this.parent.editSettings.showAddNewRow) {
        this.parent.editModule.applyFormValidation();
      }
    };
    NormalEdit2.prototype.edSucc = function(e, args) {
      this.editSuccess(e, args);
    };
    NormalEdit2.prototype.edFail = function(e) {
      this.editFailure(e);
    };
    NormalEdit2.prototype.updateCurrentViewData = function(data) {
      if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling) {
        this.parent.getCurrentViewRecords()[this.editRowIndex] = data;
      }
    };
    NormalEdit2.prototype.requestSuccess = function(args) {
      if (this.parent.editModule.formObj && !this.parent.editModule.formObj.isDestroyed) {
        this.destroyElements();
        this.stopEditStatus();
        if (this.parent.editSettings.mode === "Dialog" && args.action !== "add" && this.parent.selectionModule) {
          this.parent.element.querySelector(".e-dlgeditrow").classList.remove("e-dlgeditrow");
        }
      }
    };
    NormalEdit2.prototype.editSuccess = function(e, args) {
      if (!isNullOrUndefined(e) && !(e instanceof Array)) {
        var rowData = "rowData";
        args.data = extend({}, extend({}, args["" + rowData], args.data), e);
      }
      this.requestSuccess(args);
      this.parent.trigger(beforeDataBound, args);
      args.type = actionComplete;
      this.parent.isEdit = this.parent.editSettings.showAddNewRow ? true : false;
      this.refreshRow(args.data);
      this.parent.notify(virtualScrollEditSuccess, args);
      this.parent.editModule.checkLastRow(args.row);
      this.parent.editModule.isLastRow = false;
      this.updateCurrentViewData(args.data);
      this.blazorTemplate();
      this.editRowIndex = null;
      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && this.parent.groupSettings.showGroupedColumn) {
        var dragRow = args.row;
        var rows = this.parent.getRowsObject();
        var dragRowUid = dragRow.getAttribute("data-uid");
        var dragRowObject_1 = this.parent.getRowObjectFromUID(dragRowUid);
        var _loop_1 = function(i2) {
          var thisRef = this_1;
          rows = rows.filter(function(data) {
            var flag = data.isDataRow && data !== dragRowObject_1;
            if (flag) {
              var groupedColumn = thisRef.parent.groupSettings.columns[parseInt(i2.toString(), 10)].split(".");
              var comparer1 = data.data[groupedColumn[0]];
              var comparer2 = args.data[groupedColumn[0]];
              for (var j = 1; j < groupedColumn.length; j++) {
                comparer1 = comparer1[groupedColumn[j]];
                comparer2 = comparer2[groupedColumn[j]];
              }
              return flag && comparer1 === comparer2;
            } else {
              return flag;
            }
          });
        };
        var this_1 = this;
        for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {
          _loop_1(i);
        }
        var dropRowObject = rows[0];
        if (!isNullOrUndefined(dragRowObject_1) && !isNullOrUndefined(dropRowObject) && dragRowObject_1.parentUid !== dropRowObject.parentUid) {
          this.parent["groupModule"].groupedRowReorder(dragRowObject_1, dropRowObject);
        } else if (this.parent.aggregates.length) {
          this.parent.aggregateModule.refresh(args.data, this.parent.groupSettings.enableLazyLoading ? args.row : void 0);
        }
      } else if (this.parent.aggregates.length) {
        this.parent.aggregateModule.refresh(args.data, this.parent.groupSettings.enableLazyLoading ? args.row : void 0);
      }
      this.parent.trigger(actionComplete, args);
      if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === "Multiple") || !this.parent.isPersistSelection && !this.parent.selectionSettings.checkboxOnly) {
        if (this.parent.editSettings.mode !== "Dialog") {
          this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex);
        }
      }
      if (this.parent.aggregates.length && this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (this.parent.groupModule.getGroupAggregateTemplates(true).length || this.parent.groupModule.getGroupAggregateTemplates(false).length)) {
        return;
      }
      this.parent.removeMaskRow();
      this.parent.hideSpinner();
    };
    NormalEdit2.prototype.closeForm = function() {
      if (!this.cloneRow && this.parent.isEdit) {
        this.stopEditStatus();
      }
      if (this.cloneRow) {
        this.cloneRow.remove();
        this.cloneRow = null;
        this.originalRow.classList.remove("e-hiddenrow");
      }
      if (this.cloneFrozen) {
        this.cloneFrozen.remove();
        if (this.frozen) {
          this.frozen.classList.remove("e-hiddenrow");
        }
      }
    };
    NormalEdit2.prototype.blazorTemplate = function() {
      var cols = this.parent.getColumns();
      if (this.parent.editSettings.template && this.parent.editSettings.mode === "Normal") {
        updateBlazorTemplate(this.parent.element.id + "editSettingsTemplate", "Template", this.parent.editSettings);
      }
      for (var i = 0; i < cols.length; i++) {
        var col = cols[parseInt(i.toString(), 10)];
        if (col.template) {
          updateBlazorTemplate(this.parent.element.id + col.uid, "Template", col, false);
        }
        if (col.editTemplate) {
          updateBlazorTemplate(this.parent.element.id + col.uid + "editTemplate", "EditTemplate", col);
        }
      }
    };
    NormalEdit2.prototype.editFailure = function(e) {
      this.parent.removeMaskRow();
      this.parent.trigger(actionFailure, {
        error: e
      });
      this.parent.hideSpinner();
      this.parent.log("actionfailure", {
        error: e
      });
    };
    NormalEdit2.prototype.needRefresh = function() {
      var refresh = true;
      var editedRow2 = this.parent.element.querySelector(".e-gridform");
      if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache) && this.parent.editSettings.mode === "Normal" && !editedRow2) {
        refresh = false;
      }
      return refresh;
    };
    NormalEdit2.prototype.refreshRow = function(data) {
      var row2 = new RowRenderer(this.serviceLocator, null, this.parent);
      var rowObj = this.parent.getRowObjectFromUID(this.uid);
      if (rowObj) {
        rowObj.changes = data;
        this.parent.notify(refreshVirtualCache, {
          data
        });
        refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
        if (this.needRefresh()) {
          row2.refresh(rowObj, this.parent.getColumns(), true);
        }
        var tr = [].slice.call(this.parent.element.querySelectorAll('[data-rowindex="' + rowObj.index + '"]'));
        for (var i = 0; i < tr.length; i++) {
          addFixedColumnBorder(tr[parseInt(i.toString(), 10)]);
          if (this.parent.enableColumnVirtualization && tr[parseInt(i.toString(), 10)].querySelectorAll(".e-leftfreeze,.e-rightfreeze,.e-fixedfreeze").length) {
            var cols = this.parent.getColumns();
            var leftrightCells = [].slice.call(tr[parseInt(i.toString(), 10)].querySelectorAll(".e-leftfreeze,.e-rightfreeze.e-fixedfreeze"));
            for (var j = 0; j < leftrightCells.length; j++) {
              if (leftrightCells[parseInt(j.toString(), 10)].classList.contains("e-leftfreeze")) {
                leftrightCells[parseInt(j.toString(), 10)].style.left = cols[parseInt(j.toString(), 10)].valueX - this.parent.translateX + "px";
              } else if (leftrightCells[parseInt(j.toString(), 10)].classList.contains("e-rightfreeze")) {
                var idx = parseInt(leftrightCells[parseInt(j.toString(), 10)].getAttribute("data-colindex"), 10);
                leftrightCells[parseInt(j.toString(), 10)].style.right = cols[parseInt(idx.toString(), 10)].valueX + this.parent.translateX + "px";
              } else {
                leftrightCells[parseInt(j.toString(), 10)].style.left = this.parent.leftrightColumnWidth("left") - this.parent.translateX + "px";
                leftrightCells[parseInt(j.toString(), 10)].style.right = this.parent.leftrightColumnWidth("right") + this.parent.translateX + "px";
              }
            }
          }
        }
      }
    };
    NormalEdit2.prototype.closeEdit = function() {
      var _this = this;
      if (!this.parent.isEdit || this.parent.editSettings.showAddNewRow && this.parent.element.querySelector(".e-addedrow") && isNullOrUndefined(this.parent.element.querySelector("." + editedRow))) {
        if (this.parent.editSettings.showAddNewRow) {
          this.disabledShowAddRow(true, true);
          this.parent.notify(showAddNewRowFocus, {});
        }
        return;
      }
      var gObj = this.parent;
      var args = extend(this.args, {
        requestType: "cancel",
        type: actionBegin,
        cancel: false,
        data: this.previousData,
        selectedRow: gObj.selectedRowIndex
      });
      gObj.notify(virtualScrollEditCancel, args);
      this.blazorTemplate();
      gObj.trigger(actionBegin, args, function(closeEditArgs) {
        if (closeEditArgs.cancel) {
          return;
        }
        if (_this.parent.editSettings.mode === "Dialog") {
          _this.parent.notify(dialogDestroy, {});
        }
        closeEditArgs.type = actionComplete;
        if (!_this.parent.editSettings.showAddNewRow) {
          gObj.isEdit = false;
        }
        if (gObj.editSettings.mode !== "Dialog") {
          _this.refreshRow(closeEditArgs.data);
        }
        _this.stopEditStatus();
        gObj.isEdit = false;
        if (gObj.editSettings.showAddNewRow) {
          _this.disabledShowAddRow(true);
          gObj.editModule.applyFormValidation();
          gObj.isEdit = true;
        }
        var isLazyLoad = gObj.groupSettings.enableLazyLoading && gObj.groupSettings.columns.length && !gObj.getContentTable().querySelector("tr.e-emptyrow");
        if (!gObj.getContentTable().querySelector("tr.e-emptyrow") && !gObj.getContentTable().querySelector("tr.e-row") && !isLazyLoad) {
          gObj.renderModule.emptyRow();
        }
        if (gObj.editSettings.mode !== "Dialog") {
          gObj.selectRow(_this.rowIndex);
        }
        gObj.trigger(actionComplete, closeEditArgs);
      });
    };
    NormalEdit2.prototype.addRecord = function(data, index) {
      var _this = this;
      var gObj = this.parent;
      this.addedRowIndex = index = !isNullOrUndefined(index) ? index : 0;
      if (data) {
        gObj.notify(modelChanged, {
          requestType: "save",
          type: actionBegin,
          data,
          selectedRow: 0,
          action: "add",
          index
        });
        return;
      }
      if (gObj.isEdit) {
        return;
      }
      this.previousData = {};
      this.uid = "";
      var cols = gObj.getColumns();
      var rowData = {
        virtualData: {},
        isScroll: false
      };
      if (!gObj.editSettings.showAddNewRow) {
        this.parent.notify(getVirtualData, rowData);
      }
      for (var i = 0; i < cols.length; i++) {
        if (rowData.isScroll) {
          continue;
        }
        if (cols[parseInt(i.toString(), 10)].field) {
          if (cols[parseInt(i.toString(), 10)].type === "string") {
            cols[parseInt(i.toString(), 10)].defaultValue = this.parent.sanitize(cols[parseInt(i.toString(), 10)].defaultValue);
          }
          DataUtil.setValue(cols[parseInt(i.toString(), 10)].field, cols[parseInt(i.toString(), 10)].defaultValue, this.previousData);
        }
      }
      var args = {
        cancel: false,
        foreignKeyData: {},
        requestType: "add",
        data: this.previousData,
        type: actionBegin,
        index,
        rowData: this.previousData,
        target: void 0,
        isScroll: rowData.isScroll
      };
      if ((this.parent.enableVirtualization || this.parent.enableColumnVirtualization || this.parent.infiniteScrollSettings.enableCache) && Object.keys(rowData.virtualData).length) {
        args.data = args.rowData = rowData.virtualData;
      }
      if (!args.isScroll) {
        this.parent.notify(createVirtualValidationForm, {
          uid: this.uid,
          prevData: this.previousData,
          argsCreator: this.getEditArgs.bind(this),
          renderer: this.renderer
        });
        if (gObj.editSettings.showAddNewRow) {
          this.inlineAddHandler(args);
        } else {
          gObj.trigger(actionBegin, args, function(addArgs) {
            if (addArgs.cancel) {
              return;
            }
            _this.inlineAddHandler(addArgs);
          });
        }
      } else {
        this.inlineAddHandler(args);
      }
    };
    NormalEdit2.prototype.inlineAddHandler = function(addArgs) {
      var gObj = this.parent;
      gObj.isEdit = true;
      if (gObj.editSettings.mode !== "Dialog") {
        gObj.clearSelection();
      }
      this.renderer.addNew(addArgs);
      gObj.editModule.applyFormValidation();
      addArgs.type = actionComplete;
      addArgs.row = gObj.element.querySelector("." + addedRow);
      if (!gObj.editSettings.showAddNewRow) {
        gObj.trigger(actionComplete, addArgs);
      }
      if (gObj.editSettings.template) {
        gObj.editModule.applyFormValidation(void 0, addArgs.form.ej2_instances[0].rules);
      }
      this.args = addArgs;
    };
    NormalEdit2.prototype.deleteRecord = function(fieldname, data) {
      this.editRowIndex = this.parent.selectedRowIndex;
      if (data) {
        data = data instanceof Array ? data : [data];
        var gObj = this.parent;
        var dataLen = Object.keys(data).length;
        fieldname = fieldname || this.parent.getPrimaryKeyFieldNames()[0];
        var _loop_2 = function(i2) {
          var _a;
          var tmpRecord;
          var contained = gObj.currentViewData.some(function(record) {
            tmpRecord = record;
            return data[parseInt(i2.toString(), 10)] === getObject(fieldname, record) || data[parseInt(i2.toString(), 10)] === record;
          });
          data[parseInt(i2.toString(), 10)] = contained ? tmpRecord : data[parseInt(i2.toString(), 10)]["" + fieldname] ? data[parseInt(i2.toString(), 10)] : (_a = {}, _a[fieldname] = data[parseInt(i2.toString(), 10)], _a);
        };
        for (var i = 0; i < dataLen; i++) {
          _loop_2(i);
        }
      }
      var args = {
        requestType: "delete",
        type: actionBegin,
        foreignKeyData: {},
        data: data ? data : this.parent.getSelectedRecords(),
        tr: this.parent.getSelectedRows(),
        cancel: false
      };
      if (!isNullOrUndefined(this.parent.commandDelIndex)) {
        args.data[0] = this.parent.getRowObjectFromUID(this.parent.getRowByIndex(this.parent.commandDelIndex).getAttribute("data-uid")).data;
      }
      this.parent.notify(modelChanged, args);
    };
    NormalEdit2.prototype.stopEditStatus = function() {
      var gObj = this.parent;
      var addElements = [].slice.call(gObj.editSettings.showAddNewRow ? [] : gObj.element.getElementsByClassName(addedRow));
      var editElements = [].slice.call(gObj.element.getElementsByClassName(editedRow));
      for (var i = 0; i < addElements.length; i++) {
        remove(addElements[parseInt(i.toString(), 10)]);
      }
      for (var i = 0; i < editElements.length; i++) {
        editElements[parseInt(i.toString(), 10)].classList.remove(editedRow);
      }
    };
    NormalEdit2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: crudAction,
        handler: this.editHandler
      }, {
        event: doubleTap,
        handler: this.dblClickHandler
      }, {
        event: click,
        handler: this.clickHandler
      }, {
        event: recordAdded,
        handler: this.requestSuccess
      }, {
        event: dblclick,
        handler: this.dblClickHandler
      }, {
        event: deleteComplete,
        handler: this.editComplete
      }, {
        event: saveComplete,
        handler: this.editComplete
      }, {
        event: rowModeChange,
        handler: this.closeEdit
      }, {
        event: closeInline,
        handler: this.closeForm
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    };
    NormalEdit2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
    };
    NormalEdit2.prototype.destroy = function() {
      this.removeEventListener();
      this.renderer.destroy();
    };
    return NormalEdit2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/inline-edit.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var InlineEdit = (
  /** @class */
  function(_super) {
    __extends34(InlineEdit2, _super);
    function InlineEdit2(parent, serviceLocator, renderer) {
      var _this = _super.call(this, parent, serviceLocator) || this;
      _this.parent = parent;
      _this.serviceLocator = serviceLocator;
      _this.renderer = renderer;
      return _this;
    }
    InlineEdit2.prototype.closeEdit = function() {
      _super.prototype.closeEdit.call(this);
    };
    InlineEdit2.prototype.addRecord = function(data, index) {
      _super.prototype.addRecord.call(this, data, index);
    };
    InlineEdit2.prototype.endEdit = function() {
      _super.prototype.endEdit.call(this);
    };
    InlineEdit2.prototype.updateRow = function(index, data) {
      _super.prototype.updateRow.call(this, index, data);
    };
    InlineEdit2.prototype.deleteRecord = function(fieldname, data) {
      _super.prototype.deleteRecord.call(this, fieldname, data);
    };
    InlineEdit2.prototype.startEdit = function(tr) {
      _super.prototype.startEdit.call(this, tr);
    };
    return InlineEdit2;
  }(NormalEdit)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/batch-edit.js
var BatchEdit = (
  /** @class */
  function() {
    function BatchEdit2(parent, serviceLocator, renderer) {
      this.cellDetails = {};
      this.originalCell = {};
      this.cloneCell = {};
      this.editNext = false;
      this.preventSaveCell = false;
      this.initialRender = true;
      this.validationColObj = [];
      this.addBatchRow = false;
      this.prevEditedBatchCell = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.renderer = renderer;
      this.focus = serviceLocator.getService("focus");
      this.addEventListener();
    }
    BatchEdit2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.evtHandlers = [{
        event: click,
        handler: this.clickHandler
      }, {
        event: dblclick,
        handler: this.dblClickHandler
      }, {
        event: beforeCellFocused,
        handler: this.onBeforeCellFocused
      }, {
        event: cellFocused,
        handler: this.onCellFocused
      }, {
        event: doubleTap,
        handler: this.dblClickHandler
      }, {
        event: keyPressed,
        handler: this.keyDownHandler
      }, {
        event: editNextValCell,
        handler: this.editNextValCell
      }, {
        event: destroy,
        handler: this.destroy
      }];
      addRemoveEventListener(this.parent, this.evtHandlers, true, this);
      EventHandler.add(this.parent.element, "mousedown", this.mouseDownHandler, this);
      this.dataBoundFunction = this.dataBound.bind(this);
      this.batchCancelFunction = this.batchCancel.bind(this);
      this.parent.addEventListener(dataBound, this.dataBoundFunction);
      this.parent.addEventListener(batchCancel, this.batchCancelFunction);
    };
    BatchEdit2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.evtHandlers, false);
      EventHandler.remove(this.parent.element, "mousedown", this.mouseDownHandler);
      this.parent.removeEventListener(dataBound, this.dataBoundFunction);
      this.parent.removeEventListener(batchCancel, this.batchCancelFunction);
    };
    BatchEdit2.prototype.batchCancel = function() {
      this.parent.focusModule.restoreFocus();
    };
    BatchEdit2.prototype.dataBound = function() {
      this.parent.notify(toolbarRefresh, {});
    };
    BatchEdit2.prototype.destroy = function() {
      this.removeEventListener();
    };
    BatchEdit2.prototype.mouseDownHandler = function(e) {
      if (!isNullOrUndefined(this.parent.element.querySelector(".e-gridform"))) {
        this.mouseDownElement = e.target;
      } else {
        this.mouseDownElement = void 0;
      }
    };
    BatchEdit2.prototype.clickHandler = function(e) {
      if (!parentsUntil(e.target, this.parent.element.id + "_add", true)) {
        if (this.parent.isEdit && closest(this.form, "td") !== closest(e.target, "td") && isNullOrUndefined(this.mouseDownElement) || this.mouseDownElement === e.target) {
          this.saveCell();
          this.editNextValCell();
        }
        if (parentsUntil(e.target, rowCell) && !this.parent.isEdit) {
          this.setCellIdx(e.target);
        }
      }
    };
    BatchEdit2.prototype.dblClickHandler = function(e) {
      var target = parentsUntil(e.target, rowCell);
      var tr = parentsUntil(e.target, row);
      var rowIndex = tr && parseInt(tr.getAttribute(dataRowIndex), 10);
      var colIndex = target && parseInt(target.getAttribute(dataColIndex), 10);
      if (!isNullOrUndefined(target) && !isNullOrUndefined(rowIndex) && !isNaN(colIndex) && !target.parentElement.classList.contains(editedRow) && this.parent.getColumns()[parseInt(colIndex.toString(), 10)].allowEditing) {
        this.editCell(rowIndex, this.parent.getColumns()[parseInt(colIndex.toString(), 10)].field, this.isAddRow(rowIndex));
      }
    };
    BatchEdit2.prototype.onBeforeCellFocused = function(e) {
      if (this.parent.isEdit && this.validateFormObj() && (e.byClick || ["tab", "shiftTab", "enter", "shiftEnter"].indexOf(e.keyArgs.action) > -1)) {
        e.cancel = true;
        if (e.byClick) {
          e.clickArgs.preventDefault();
        } else {
          e.keyArgs.preventDefault();
        }
      }
    };
    BatchEdit2.prototype.onCellFocused = function(e) {
      var clear = (!e.container.isContent || !e.container.isDataCell) && !(this.parent.frozenRows && e.container.isHeader);
      if (this.parent.focusModule.active) {
        this.prevEditedBatchCell = this.parent.focusModule.active.matrix.current.toString() === this.prevEditedBatchCellMatrix().toString();
        this.crtRowIndex = [].slice.call(this.parent.focusModule.active.getTable().rows).indexOf(closest(e.element, "tr"));
      }
      if (!e.byKey || clear) {
        if (this.parent.isEdit && clear) {
          this.saveCell();
        }
        return;
      }
      var _a = e.container.indexes, rowIndex = _a[0], cellIndex = _a[1];
      var actualIndex = e.element.getAttribute("data-colindex") ? parseInt(e.element.getAttribute("data-colindex"), 10) : cellIndex;
      if (actualIndex !== cellIndex) {
        cellIndex = actualIndex;
      }
      if (this.parent.frozenRows && e.container.isContent) {
        rowIndex += (this.parent.getContent().querySelector(".e-hiddenrow") ? 0 : this.parent.frozenRows) + this.parent.getHeaderContent().querySelectorAll(".e-insertedrow").length;
      }
      var isEdit = this.parent.isEdit;
      if (!this.parent.element.getElementsByClassName("e-popup-open").length) {
        isEdit = isEdit && !this.validateFormObj();
        switch (e.keyArgs.action) {
          case "tab":
          case "shiftTab":
            var indent = this.parent.isRowDragable() && this.parent.isDetail() ? 2 : this.parent.isRowDragable() || this.parent.isDetail() ? 1 : 0;
            var col = this.parent.getColumns()[cellIndex - indent];
            if (col && !this.parent.isEdit) {
              this.editCell(rowIndex, col.field);
            }
            if (isEdit || this.parent.isLastCellPrimaryKey) {
              this.editCellFromIndex(rowIndex, cellIndex);
            }
            break;
          case "enter":
          case "shiftEnter":
            e.keyArgs.preventDefault();
            var args = {
              cancel: false,
              keyArgs: e.keyArgs
            };
            this.parent.notify("beforeFocusCellEdit", args);
            if (!args.cancel && isEdit) {
              this.editCell(rowIndex, this.cellDetails.column.field);
            }
            break;
          case "f2":
            this.editCellFromIndex(rowIndex, cellIndex);
            this.focus.focus();
            break;
        }
      }
    };
    BatchEdit2.prototype.isAddRow = function(index) {
      return this.parent.getDataRows()[parseInt(index.toString(), 10)].classList.contains("e-insertedrow");
    };
    BatchEdit2.prototype.editCellFromIndex = function(rowIdx, cellIdx) {
      this.cellDetails.rowIndex = rowIdx;
      this.cellDetails.cellIndex = cellIdx;
      this.editCell(rowIdx, this.parent.getColumns()[parseInt(cellIdx.toString(), 10)].field, this.isAddRow(rowIdx));
    };
    BatchEdit2.prototype.closeEdit = function() {
      var gObj = this.parent;
      var rows = this.parent.getRowsObject();
      var argument = {
        cancel: false,
        batchChanges: this.getBatchChanges()
      };
      gObj.notify(beforeBatchCancel, argument);
      if (argument.cancel) {
        return;
      }
      if (gObj.isEdit) {
        this.saveCell(true);
      }
      this.isAdded = false;
      gObj.clearSelection();
      for (var i = 0; i < rows.length; i++) {
        var isInsert = false;
        var isDirty = rows[parseInt(i.toString(), 10)].isDirty;
        isInsert = this.removeBatchElementChanges(rows[parseInt(i.toString(), 10)], isDirty);
        if (isInsert) {
          rows.splice(i, 1);
        }
        if (isInsert) {
          i--;
        }
      }
      if (!gObj.getContentTable().querySelector("tr.e-row")) {
        gObj.renderModule.renderEmptyRow();
      }
      var args = {
        requestType: "batchCancel",
        rows: this.parent.getRowsObject()
      };
      gObj.notify(batchCancel, {
        rows: this.parent.getRowsObject().length ? this.parent.getRowsObject() : [new Row({
          isDataRow: true,
          cells: [new Cell({
            isDataCell: true,
            visible: true
          })]
        })]
      });
      gObj.selectRow(this.cellDetails.rowIndex);
      this.refreshRowIdx();
      gObj.notify(toolbarRefresh, {});
      this.parent.notify(tooltipDestroy, {});
      args = {
        requestType: "batchCancel",
        rows: this.parent.getRowsObject()
      };
      gObj.trigger(batchCancel, args);
    };
    BatchEdit2.prototype.removeBatchElementChanges = function(row2, isDirty) {
      var gObj = this.parent;
      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
      var isInstertedRemoved = false;
      if (isDirty) {
        row2.isDirty = isDirty;
        var tr = gObj.getRowElementByUID(row2.uid);
        if (tr) {
          if (tr.classList.contains("e-insertedrow")) {
            remove(tr);
            isInstertedRemoved = true;
          } else {
            refreshForeignData(row2, this.parent.getForeignKeyColumns(), row2.data);
            delete row2.changes;
            delete row2.edit;
            row2.isDirty = false;
            classList(tr, [], ["e-hiddenrow", "e-updatedtd"]);
            rowRenderer.refresh(row2, gObj.getColumns(), false);
          }
          if (this.parent.aggregates.length > 0) {
            var type = "type";
            var editType = [];
            editType["" + type] = "cancel";
            this.parent.notify(refreshFooterRenderer, editType);
            if (this.parent.groupSettings.columns.length > 0) {
              this.parent.notify(groupAggregates, editType);
            }
          }
        }
      }
      return isInstertedRemoved;
    };
    BatchEdit2.prototype.deleteRecord = function(fieldname, data) {
      this.saveCell();
      if (this.validateFormObj()) {
        this.saveCell(true);
      }
      this.isAdded = false;
      this.bulkDelete(fieldname, data);
      if (this.parent.aggregates.length > 0) {
        if (!(this.parent.isReact || this.parent.isVue)) {
          this.parent.notify(refreshFooterRenderer, {});
        }
        if (this.parent.groupSettings.columns.length > 0) {
          this.parent.notify(groupAggregates, {});
        }
        if (this.parent.isReact || this.parent.isVue) {
          this.parent.notify(refreshFooterRenderer, {});
        }
      }
    };
    BatchEdit2.prototype.addRecord = function(data) {
      this.bulkAddRow(data);
    };
    BatchEdit2.prototype.endEdit = function() {
      if (this.parent.isEdit && this.validateFormObj()) {
        return;
      }
      this.batchSave();
    };
    BatchEdit2.prototype.validateFormObj = function() {
      return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();
    };
    BatchEdit2.prototype.batchSave = function() {
      var gObj = this.parent;
      var deletedRecords2 = "deletedRecords";
      if (gObj.isCheckBoxSelection) {
        var checkAllBox = gObj.element.querySelector(".e-checkselectall").parentElement;
        if (checkAllBox.classList.contains("e-checkbox-disabled") && gObj.pageSettings.totalRecordsCount > gObj.currentViewData.length) {
          removeClass([checkAllBox], ["e-checkbox-disabled"]);
        }
      }
      this.saveCell();
      if (gObj.isEdit || this.editNextValCell() || gObj.isEdit) {
        return;
      }
      var changes = this.getBatchChanges();
      if (this.parent.selectionSettings.type === "Multiple" && changes["" + deletedRecords2].length && this.parent.selectionSettings.persistSelection) {
        changes["" + deletedRecords2] = this.removeSelectedData;
        this.removeSelectedData = [];
      }
      var original = {
        changedRecords: this.parent.getRowsObject().filter(function(row2) {
          return row2.isDirty && ["add", "delete"].indexOf(row2.edit) === -1;
        }).map(function(row2) {
          return row2.data;
        })
      };
      var args = {
        batchChanges: changes,
        cancel: false
      };
      gObj.trigger(beforeBatchSave, args, function(beforeBatchSaveArgs) {
        if (beforeBatchSaveArgs.cancel) {
          return;
        }
        gObj.showSpinner();
        gObj.notify(bulkSave, {
          changes,
          original
        });
      });
    };
    BatchEdit2.prototype.getBatchChanges = function() {
      var changes = {
        addedRecords: [],
        deletedRecords: [],
        changedRecords: []
      };
      var rows = this.parent.getRowsObject();
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        if (row2.isDirty) {
          switch (row2.edit) {
            case "add":
              changes.addedRecords.push(row2.changes);
              break;
            case "delete":
              changes.deletedRecords.push(row2.data);
              break;
            default:
              changes.changedRecords.push(row2.changes);
          }
        }
      }
      return changes;
    };
    BatchEdit2.prototype.removeRowObjectFromUID = function(uid2) {
      var rows = this.parent.getRowsObject();
      var i = 0;
      for (var len = rows.length; i < len; i++) {
        if (rows[parseInt(i.toString(), 10)].uid === uid2) {
          break;
        }
      }
      rows.splice(i, 1);
    };
    BatchEdit2.prototype.addRowObject = function(row2) {
      var gObj = this.parent;
      var isTop = gObj.editSettings.newRowPosition === "Top";
      var rowClone = row2.clone();
      if (isTop) {
        gObj.getRowsObject().unshift(rowClone);
      } else {
        gObj.getRowsObject().push(rowClone);
      }
    };
    BatchEdit2.prototype.bulkDelete = function(fieldname, data) {
      var _this = this;
      this.removeSelectedData = [];
      var gObj = this.parent;
      var index = gObj.selectedRowIndex;
      var selectedRows = gObj.getSelectedRows();
      var args = {
        primaryKey: this.parent.getPrimaryKeyFieldNames(),
        rowIndex: index,
        rowData: data ? data : gObj.getSelectedRecords()[0],
        cancel: false
      };
      if (data) {
        args.row = gObj.editModule.deleteRowUid ? gObj.getRowElementByUID(gObj.editModule.deleteRowUid) : gObj.getRows()[gObj.getCurrentViewRecords().indexOf(data)];
      } else {
        args.row = selectedRows[0];
      }
      if (!args.row) {
        return;
      }
      gObj.trigger(beforeBatchDelete, args, function(beforeBatchDeleteArgs) {
        if (beforeBatchDeleteArgs.cancel) {
          return;
        }
        _this.removeSelectedData = gObj.getSelectedRecords();
        gObj.clearSelection();
        beforeBatchDeleteArgs.row = beforeBatchDeleteArgs.row ? beforeBatchDeleteArgs.row : data ? gObj.getRows()[parseInt(index.toString(), 10)] : selectedRows[0];
        if (selectedRows.length === 1 || data) {
          var uid2 = beforeBatchDeleteArgs.row.getAttribute("data-uid");
          uid2 = data && _this.parent.editModule.deleteRowUid ? uid2 = _this.parent.editModule.deleteRowUid : uid2;
          if (beforeBatchDeleteArgs.row.classList.contains("e-insertedrow")) {
            _this.removeRowObjectFromUID(uid2);
            remove(beforeBatchDeleteArgs.row);
          } else {
            var rowObj = gObj.getRowObjectFromUID(uid2);
            rowObj.isDirty = true;
            rowObj.edit = "delete";
            classList(beforeBatchDeleteArgs.row, ["e-hiddenrow", "e-updatedtd"], []);
            if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {
              gObj.getHeaderTable().querySelector(tbody).appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
            }
          }
          delete beforeBatchDeleteArgs.row;
        } else {
          if (data) {
            index = parseInt(beforeBatchDeleteArgs.row.getAttribute(dataRowIndex), 10);
          }
          for (var i = 0; i < selectedRows.length; i++) {
            var uniqueid = selectedRows[parseInt(i.toString(), 10)].getAttribute("data-uid");
            if (selectedRows[parseInt(i.toString(), 10)].classList.contains("e-insertedrow")) {
              _this.removeRowObjectFromUID(uniqueid);
              remove(selectedRows[parseInt(i.toString(), 10)]);
            } else {
              classList(selectedRows[parseInt(i.toString(), 10)], ["e-hiddenrow", "e-updatedtd"], []);
              var selectedRow = gObj.getRowObjectFromUID(uniqueid);
              selectedRow.isDirty = true;
              selectedRow.edit = "delete";
              delete selectedRows[parseInt(i.toString(), 10)];
              if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {
                gObj.getHeaderTable().querySelector(tbody).appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
              }
            }
          }
        }
        _this.refreshRowIdx();
        if (data) {
          gObj.editModule.deleteRowUid = void 0;
        }
        if (!gObj.isCheckBoxSelection) {
          gObj.selectRow(index);
        }
        gObj.trigger(batchDelete, beforeBatchDeleteArgs);
        gObj.notify(batchDelete, {
          rows: _this.parent.getRowsObject()
        });
        gObj.notify(toolbarRefresh, {});
      });
    };
    BatchEdit2.prototype.refreshRowIdx = function() {
      var gObj = this.parent;
      var rows = gObj.getAllDataRows(true);
      var dataObjects = gObj.getRowsObject().filter(function(row2) {
        return !row2.isDetailRow;
      });
      for (var i = 0, j = 0, len = rows.length; i < len; i++) {
        if (rows[parseInt(i.toString(), 10)].classList.contains(row) && !rows[parseInt(i.toString(), 10)].classList.contains("e-hiddenrow")) {
          rows[parseInt(i.toString(), 10)].setAttribute(dataRowIndex, j.toString());
          rows[parseInt(i.toString(), 10)].setAttribute(ariaRowIndex, (j + 1).toString());
          dataObjects[parseInt(i.toString(), 10)].index = j;
          j++;
        } else {
          rows[parseInt(i.toString(), 10)].removeAttribute(dataRowIndex);
          rows[parseInt(i.toString(), 10)].removeAttribute(ariaRowIndex);
          dataObjects[parseInt(i.toString(), 10)].index = -1;
        }
      }
    };
    BatchEdit2.prototype.bulkAddRow = function(data) {
      var _this = this;
      var gObj = this.parent;
      if (!gObj.editSettings.allowAdding) {
        if (gObj.isEdit) {
          this.saveCell();
        }
        return;
      }
      if (gObj.isEdit) {
        this.saveCell();
        this.parent.notify(editNextValCell, {});
      }
      if (this.validateFormObj()) {
        return;
      }
      if (this.initialRender) {
        var visibleColumns = gObj.getVisibleColumns();
        for (var i = 0; i < visibleColumns.length; i++) {
          if (visibleColumns[parseInt(i.toString(), 10)].validationRules && visibleColumns[parseInt(i.toString(), 10)].validationRules["required"]) {
            var obj = {
              field: visibleColumns[parseInt(i.toString(), 10)]["field"].slice(),
              cellIdx: i
            };
            this.validationColObj.push(obj);
          }
        }
        this.initialRender = false;
      }
      this.parent.element.classList.add("e-editing");
      var defaultData = data ? data : this.getDefaultData();
      var args = {
        defaultData,
        primaryKey: gObj.getPrimaryKeyFieldNames(),
        cancel: false
      };
      gObj.trigger(beforeBatchAdd, args, function(beforeBatchAddArgs) {
        if (beforeBatchAddArgs.cancel) {
          return;
        }
        _this.isAdded = true;
        gObj.clearSelection();
        var row2 = new RowRenderer(_this.serviceLocator, null, _this.parent);
        var model = new RowModelGenerator(_this.parent);
        var modelData = model.generateRows([beforeBatchAddArgs.defaultData]);
        var tr = row2.render(modelData[0], gObj.getColumns());
        addFixedColumnBorder(tr);
        var col;
        var index;
        for (var i2 = 0; i2 < _this.parent.groupSettings.columns.length; i2++) {
          tr.insertBefore(_this.parent.createElement("td", {
            className: "e-indentcell"
          }), tr.firstChild);
          modelData[0].cells.unshift(new Cell({
            cellType: CellType.Indent
          }));
        }
        var tbody2 = gObj.getContentTable().querySelector(tbody);
        tr.classList.add("e-insertedrow");
        if (tbody2.querySelector(".e-emptyrow")) {
          var emptyRow = tbody2.querySelector(".e-emptyrow");
          emptyRow.parentNode.removeChild(emptyRow);
          if (gObj.frozenRows && gObj.element.querySelector(".e-frozenrow-empty")) {
            gObj.element.querySelector(".e-frozenrow-empty").classList.remove("e-frozenrow-empty");
          }
        }
        if (gObj.frozenRows && gObj.editSettings.newRowPosition === "Top") {
          tbody2 = gObj.getHeaderTable().querySelector(tbody);
        } else {
          tbody2 = gObj.getContentTable().querySelector(tbody);
        }
        if (_this.parent.editSettings.newRowPosition === "Top") {
          tbody2.insertBefore(tr, tbody2.firstChild);
        } else {
          tbody2.appendChild(tr);
        }
        addClass([].slice.call(tr.getElementsByClassName(rowCell)), ["e-updatedtd"]);
        modelData[0].isDirty = true;
        modelData[0].changes = extend({}, {}, modelData[0].data, true);
        modelData[0].edit = "add";
        _this.addRowObject(modelData[0]);
        _this.refreshRowIdx();
        _this.focus.forgetPrevious();
        gObj.notify(batchAdd, {
          rows: _this.parent.getRowsObject()
        });
        var changes = _this.getBatchChanges();
        var btmIdx = _this.getBottomIndex();
        if (_this.parent.editSettings.newRowPosition === "Top") {
          gObj.selectRow(0);
        } else {
          gObj.selectRow(btmIdx);
        }
        if (!data) {
          index = _this.findNextEditableCell(0, true);
          col = gObj.getColumns()[parseInt(index.toString(), 10)];
          if (_this.parent.editSettings.newRowPosition === "Top") {
            _this.editCell(0, col.field, true);
          } else {
            _this.editCell(btmIdx, col.field, true);
          }
        }
        if (_this.parent.aggregates.length > 0 && (data || changes[addedRecords].length)) {
          _this.parent.notify(refreshFooterRenderer, {});
        }
        var args1 = {
          defaultData: beforeBatchAddArgs.defaultData,
          row: tr,
          columnObject: col,
          columnIndex: index,
          primaryKey: beforeBatchAddArgs.primaryKey,
          cell: !isNullOrUndefined(index) ? tr.cells[parseInt(index.toString(), 10)] : void 0
        };
        gObj.trigger(batchAdd, args1);
      });
    };
    BatchEdit2.prototype.findNextEditableCell = function(columnIndex, isAdd, isValOnly) {
      var cols = this.parent.getColumns();
      var endIndex = cols.length;
      var validation;
      for (var i = columnIndex; i < endIndex; i++) {
        validation = isValOnly ? isNullOrUndefined(cols[parseInt(i.toString(), 10)].validationRules) : false;
        if (isAdd && (!cols[parseInt(i.toString(), 10)].template || cols[parseInt(i.toString(), 10)].field) && cols[parseInt(i.toString(), 10)].allowEditing && cols[parseInt(i.toString(), 10)].visible && !(cols[parseInt(i.toString(), 10)].isIdentity && cols[parseInt(i.toString(), 10)].isPrimaryKey) && !validation) {
          return i;
        }
      }
      return -1;
    };
    BatchEdit2.prototype.getDefaultData = function() {
      var gObj = this.parent;
      var data = {};
      var dValues = {
        "number": 0,
        "string": null,
        "boolean": false,
        "date": null,
        "datetime": null
      };
      for (var _i = 0, _a = gObj.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.field) {
          setValue(col.field, Object.keys(col).indexOf("defaultValue") >= 0 ? col.defaultValue : dValues[col.type], data);
        }
      }
      return data;
    };
    BatchEdit2.prototype.setCellIdx = function(target) {
      var gLen = 0;
      if (this.parent.allowGrouping) {
        gLen = this.parent.groupSettings.columns.length;
      }
      this.cellDetails.cellIndex = target.cellIndex - gLen;
      this.cellDetails.rowIndex = parseInt(target.getAttribute("index"), 10);
    };
    BatchEdit2.prototype.editCell = function(index, field, isAdd) {
      var gObj = this.parent;
      var col = gObj.getColumnByField(field);
      this.index = index;
      this.field = field;
      this.isAdd = isAdd;
      var checkEdit = gObj.isEdit && !(this.cellDetails.column.field === field && this.cellDetails.rowIndex === index && this.parent.getDataRows().length - 1 !== index && this.prevEditedBatchCell);
      if (gObj.editSettings.allowEditing) {
        if (!checkEdit && (col.allowEditing || !col.allowEditing && gObj.focusModule.active && gObj.focusModule.active.getTable().rows[this.crtRowIndex] && gObj.focusModule.active.getTable().rows[this.crtRowIndex].classList.contains("e-insertedrow"))) {
          this.editCellExtend(index, field, isAdd);
        } else if (checkEdit) {
          this.editNext = true;
          this.saveCell();
        }
      }
    };
    BatchEdit2.prototype.editCellExtend = function(index, field, isAdd) {
      var _this = this;
      var gObj = this.parent;
      var col = gObj.getColumnByField(field);
      var keys = gObj.getPrimaryKeyFieldNames();
      if (gObj.isEdit) {
        return;
      }
      var rowData = extend({}, {}, this.getDataByIndex(index), true);
      var row2 = gObj.getDataRows()[parseInt(index.toString(), 10)];
      rowData = extend({}, {}, this.getDataByIndex(index), true);
      if (keys[0] === col.field && !row2.classList.contains("e-insertedrow") || col.columns || col.isPrimaryKey && col.isIdentity || col.commands) {
        this.parent.isLastCellPrimaryKey = true;
        return;
      }
      this.parent.isLastCellPrimaryKey = false;
      this.parent.element.classList.add("e-editing");
      var rowObj = gObj.getRowObjectFromUID(row2.getAttribute("data-uid"));
      var cells = [].slice.apply(row2.cells);
      var args = {
        columnName: col.field,
        isForeignKey: !isNullOrUndefined(col.foreignKeyValue),
        primaryKey: keys,
        rowData,
        validationRules: extend({}, col.validationRules ? col.validationRules : {}),
        value: getObject(col.field, rowData),
        type: !isAdd ? "edit" : "add",
        cancel: false,
        foreignKeyData: rowObj && rowObj.foreignKeyData
      };
      args.cell = cells[this.getColIndex(cells, this.getCellIdx(col.uid))];
      args.row = row2;
      args.columnObject = col;
      if (!args.cell) {
        return;
      }
      gObj.trigger(cellEdit, args, function(cellEditArgs) {
        if (cellEditArgs.cancel) {
          return;
        }
        cellEditArgs.cell = cellEditArgs.cell ? cellEditArgs.cell : cells[_this.getColIndex(cells, _this.getCellIdx(col.uid))];
        cellEditArgs.row = cellEditArgs.row ? cellEditArgs.row : row2;
        cellEditArgs.columnObject = cellEditArgs.columnObject ? cellEditArgs.columnObject : col;
        _this.cellDetails = {
          rowData,
          column: col,
          value: cellEditArgs.value,
          isForeignKey: cellEditArgs.isForeignKey,
          rowIndex: index,
          cellIndex: parseInt(cellEditArgs.cell.getAttribute(dataColIndex), 10),
          foreignKeyData: cellEditArgs.foreignKeyData
        };
        if (cellEditArgs.cell.classList.contains("e-updatedtd")) {
          _this.isColored = true;
          cellEditArgs.cell.classList.remove("e-updatedtd");
        }
        gObj.isEdit = true;
        gObj.clearSelection();
        if (!gObj.isCheckBoxSelection || !gObj.isPersistSelection) {
          gObj.selectRow(_this.cellDetails.rowIndex, true);
        }
        _this.renderer.update(cellEditArgs);
        _this.parent.notify(batchEditFormRendered, cellEditArgs);
        _this.form = select("#" + gObj.element.id + "EditForm", gObj.element);
        gObj.editModule.applyFormValidation([col]);
        _this.parent.element.querySelector(".e-gridpopup").style.display = "none";
      });
    };
    BatchEdit2.prototype.updateCell = function(rowIndex, field, value) {
      var gObj = this.parent;
      var col = gObj.getColumnByField(field);
      var index = gObj.getColumnIndexByField(field);
      if (col && !col.isPrimaryKey && col.allowEditing) {
        var td_1 = this.parent.isSpan ? getCellFromRow(gObj, rowIndex, index) : getCellByColAndRowIndex(this.parent, col, rowIndex, index);
        if (this.parent.isSpan && !td_1) {
          return;
        }
        var rowObj_1 = gObj.getRowObjectFromUID(td_1.parentElement.getAttribute("data-uid"));
        if (gObj.isEdit || !rowObj_1.changes && (!(value instanceof Date) && rowObj_1.data["" + field] !== value || value instanceof Date && new Date(rowObj_1.data["" + field]).toString() !== new Date(value).toString()) || rowObj_1.changes && (!(value instanceof Date) && rowObj_1.changes["" + field] !== value || value instanceof Date && new Date(rowObj_1.changes["" + field]).toString() !== new Date(value).toString())) {
          this.refreshTD(td_1, col, rowObj_1, value);
          var isReactChild = this.parent.parentDetails && this.parent.parentDetails.parentInstObj && this.parent.parentDetails.parentInstObj.isReact;
          if ((this.parent.isReact && this.parent.requireTemplateRef || isReactChild && this.parent.parentDetails.parentInstObj.requireTemplateRef) && col.template) {
            var thisRef_1 = this;
            var newReactTd_1 = this.newReactTd;
            thisRef_1.parent.renderTemplates(function() {
              thisRef_1.parent.trigger(queryCellInfo, {
                cell: newReactTd_1 || td_1,
                column: col,
                data: rowObj_1.changes
              });
            });
          } else if ((this.parent.isReact || isReactChild) && col.template) {
            this.parent.renderTemplates();
            this.parent.trigger(queryCellInfo, {
              cell: this.newReactTd || td_1,
              column: col,
              data: rowObj_1.changes
            });
          } else {
            this.parent.trigger(queryCellInfo, {
              cell: this.newReactTd || td_1,
              column: col,
              data: rowObj_1.changes
            });
          }
        }
      }
    };
    BatchEdit2.prototype.setChanges = function(rowObj, field, value) {
      if (!rowObj.changes) {
        rowObj.changes = extend({}, {}, rowObj.data, true);
      }
      if (!isNullOrUndefined(field)) {
        if (typeof value === "string") {
          value = this.parent.sanitize(value);
        }
        DataUtil.setValue(field, value, rowObj.changes);
      }
      if (rowObj.data["" + field] !== value) {
        var type = this.parent.getColumnByField(field).type;
        if (type === "date" || type === "datetime") {
          if (new Date(rowObj.data["" + field]).toString() !== new Date(value).toString()) {
            rowObj.isDirty = true;
          }
        } else {
          rowObj.isDirty = true;
        }
      }
    };
    BatchEdit2.prototype.updateRow = function(index, data) {
      var keys = Object.keys(data);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var col = keys_1[_i];
        this.updateCell(index, col, data["" + col]);
      }
    };
    BatchEdit2.prototype.getCellIdx = function(uid2) {
      var cIdx = this.parent.getColumnIndexByUid(uid2) + this.parent.groupSettings.columns.length;
      if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {
        cIdx++;
      }
      if (this.parent.isRowDragable()) {
        cIdx++;
      }
      return cIdx;
    };
    BatchEdit2.prototype.refreshTD = function(td, column, rowObj, value) {
      var cell = new CellRenderer(this.parent, this.serviceLocator);
      value = column.type === "number" && !isNullOrUndefined(value) ? parseFloat(value) : value;
      if (rowObj) {
        this.setChanges(rowObj, column.field, value);
        refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
      }
      var rowcell = rowObj ? rowObj.cells : void 0;
      var parentElement;
      var cellIndex;
      if (this.parent.isReact) {
        parentElement = td.parentElement;
        cellIndex = td.cellIndex;
      }
      var index = 0;
      if (rowObj) {
        cell.refreshTD(td, rowcell[this.getCellIdx(column.uid) - index], rowObj.changes, {
          "index": this.getCellIdx(column.uid)
        });
      }
      if (this.parent.isReact) {
        this.newReactTd = parentElement.cells[parseInt(cellIndex.toString(), 10)];
        parentElement.cells[parseInt(cellIndex.toString(), 10)].classList.add("e-updatedtd");
      } else {
        td.classList.add("e-updatedtd");
      }
      td.classList.add("e-updatedtd");
      this.parent.notify(toolbarRefresh, {});
    };
    BatchEdit2.prototype.getColIndex = function(cells, index) {
      var cIdx = 0;
      if (this.parent.allowGrouping && this.parent.groupSettings.columns) {
        cIdx = this.parent.groupSettings.columns.length;
      }
      if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {
        cIdx++;
      }
      if (this.parent.isRowDragable()) {
        cIdx++;
      }
      for (var m = 0; m < cells.length; m++) {
        var colIndex = parseInt(cells[parseInt(m.toString(), 10)].getAttribute(dataColIndex), 10);
        if (colIndex === index - cIdx) {
          return m;
        }
      }
      return -1;
    };
    BatchEdit2.prototype.editNextValCell = function() {
      var gObj = this.parent;
      var insertedRows = gObj.element.querySelectorAll(".e-insertedrow");
      var isSingleInsert = insertedRows.length === 1 ? true : false;
      if (isSingleInsert && this.isAdded && !gObj.isEdit) {
        var btmIdx = this.getBottomIndex();
        for (var i = this.cellDetails.cellIndex; i < gObj.getColumns().length; i++) {
          if (gObj.isEdit) {
            return;
          }
          var index = this.findNextEditableCell(this.cellDetails.cellIndex + 1, true, true);
          var col = gObj.getColumns()[parseInt(index.toString(), 10)];
          if (col) {
            if (this.parent.editSettings.newRowPosition === "Bottom") {
              this.editCell(btmIdx, col.field, true);
            } else {
              var args = {
                index: 0,
                column: col
              };
              this.parent.notify(nextCellIndex, args);
              this.editCell(args.index, col.field, true);
            }
            this.saveCell();
          }
        }
        if (!gObj.isEdit) {
          this.isAdded = false;
        }
      } else if (!isSingleInsert && this.isAdded && !gObj.isEdit) {
        for (var i = 0; i < insertedRows.length; i++) {
          if (!gObj.isEdit) {
            for (var j = 0; j < this.validationColObj.length; j++) {
              if (gObj.isEdit) {
                break;
              } else if (insertedRows[parseInt(i.toString(), 10)].querySelectorAll("td:not(.e-hide)")[this.validationColObj[parseInt(j.toString(), 10)].cellIdx].innerHTML === "") {
                this.editCell(parseInt(insertedRows[parseInt(i.toString(), 10)].getAttribute("data-rowindex"), 10), this.validationColObj[parseInt(j.toString(), 10)].field);
                if (this.validateFormObj()) {
                  this.saveCell();
                }
              }
            }
          } else {
            break;
          }
        }
        if (!gObj.isEdit) {
          this.isAdded = false;
        }
      }
    };
    BatchEdit2.prototype.escapeCellEdit = function() {
      var args = this.generateCellArgs();
      args.value = args.previousValue;
      if (args.value || !this.cellDetails.column.validationRules) {
        this.successCallBack(args, args.cell.parentElement, args.column, true)(args);
      }
    };
    BatchEdit2.prototype.generateCellArgs = function() {
      var gObj = this.parent;
      this.parent.element.classList.remove("e-editing");
      var column = this.cellDetails.column;
      var obj = {};
      obj[column.field] = getObject(column.field, this.cellDetails.rowData);
      var editedData = gObj.editModule.getCurrentEditedData(this.form, obj);
      var cloneEditedData = extend({}, editedData);
      editedData = extend({}, editedData, this.cellDetails.rowData);
      var value = getObject(column.field, cloneEditedData);
      if (!isNullOrUndefined(column.field) && !isUndefined(value)) {
        setValue(column.field, value, editedData);
      }
      var args = {
        columnName: column.field,
        value: getObject(column.field, editedData),
        rowData: this.cellDetails.rowData,
        column,
        previousValue: this.cellDetails.value,
        isForeignKey: this.cellDetails.isForeignKey,
        cancel: false
      };
      args.cell = this.form.parentElement;
      args.columnObject = column;
      return args;
    };
    BatchEdit2.prototype.saveCell = function(isForceSave) {
      if (this.preventSaveCell || !this.form) {
        return;
      }
      var gObj = this.parent;
      if (!isForceSave && (!gObj.isEdit || this.validateFormObj())) {
        return;
      }
      this.preventSaveCell = true;
      var args = this.generateCellArgs();
      var tr = args.cell.parentElement;
      var col = args.column;
      args.cell.removeAttribute("aria-label");
      if (!isForceSave) {
        gObj.trigger(cellSave, args, this.successCallBack(args, tr, col));
        gObj.notify(batchForm, {
          formObj: this.form
        });
      } else {
        this.successCallBack(args, tr, col)(args);
      }
    };
    BatchEdit2.prototype.successCallBack = function(cellSaveArgs, tr, column, isEscapeCellEdit) {
      var _this = this;
      return function(cellSaveArgs2) {
        var gObj = _this.parent;
        cellSaveArgs2.cell = cellSaveArgs2.cell ? cellSaveArgs2.cell : _this.form.parentElement;
        cellSaveArgs2.columnObject = cellSaveArgs2.columnObject ? cellSaveArgs2.columnObject : column;
        if (cellSaveArgs2.cancel) {
          _this.preventSaveCell = false;
          if (_this.editNext) {
            _this.editNext = false;
            if (_this.cellDetails.rowIndex === _this.index && _this.cellDetails.column.field === _this.field) {
              return;
            }
            _this.editCellExtend(_this.index, _this.field, _this.isAdd);
          }
          return;
        }
        gObj.editModule.destroyWidgets([column]);
        gObj.isEdit = false;
        gObj.editModule.destroyForm();
        _this.parent.notify(tooltipDestroy, {});
        var rowObj = gObj.getRowObjectFromUID(tr.getAttribute("data-uid"));
        _this.refreshTD(cellSaveArgs2.cell, column, rowObj, cellSaveArgs2.value);
        if (_this.parent.isReact) {
          cellSaveArgs2.cell = _this.newReactTd;
        }
        removeClass([tr], [editedRow, "e-batchrow"]);
        removeClass([cellSaveArgs2.cell], ["e-editedbatchcell", "e-boolcell"]);
        if (!isNullOrUndefined(cellSaveArgs2.value) && cellSaveArgs2.value.toString() === (!isNullOrUndefined(_this.cellDetails.value) ? _this.cellDetails.value : "").toString() && !_this.isColored || isNullOrUndefined(cellSaveArgs2.value) && isNullOrUndefined(rowObj.data[column.field]) && isNullOrUndefined(_this.cellDetails.value) && !cellSaveArgs2.cell.parentElement.classList.contains("e-insertedrow")) {
          cellSaveArgs2.cell.classList.remove("e-updatedtd");
        }
        if (isNullOrUndefined(isEscapeCellEdit)) {
          var isReactCompiler = gObj.isReact && column.template && typeof column.template !== "string";
          var isReactChild = gObj.parentDetails && gObj.parentDetails.parentInstObj && gObj.parentDetails.parentInstObj.isReact;
          if (isReactCompiler || isReactChild) {
            if (gObj.requireTemplateRef) {
              gObj.renderTemplates(function() {
                gObj.trigger(cellSaved, cellSaveArgs2);
              });
            } else {
              gObj.renderTemplates();
              gObj.trigger(cellSaved, cellSaveArgs2);
            }
          } else {
            gObj.trigger(cellSaved, cellSaveArgs2);
          }
        }
        gObj.notify(toolbarRefresh, {});
        _this.isColored = false;
        if (_this.parent.aggregates.length > 0) {
          if (!(_this.parent.isReact || _this.parent.isVue)) {
            _this.parent.notify(refreshFooterRenderer, {});
          }
          if (_this.parent.groupSettings.columns.length > 0 && !_this.isAddRow(_this.cellDetails.rowIndex)) {
            _this.parent.notify(groupAggregates, {});
          }
          if (_this.parent.isReact || _this.parent.isVue) {
            _this.parent.notify(refreshFooterRenderer, {});
          }
        }
        _this.preventSaveCell = false;
        if (_this.editNext) {
          _this.editNext = false;
          if (_this.cellDetails.rowIndex === _this.index && _this.cellDetails.column.field === _this.field && _this.prevEditedBatchCell) {
            return;
          }
          var col = gObj.getColumnByField(_this.field);
          if (col && (col.allowEditing || !col.allowEditing && gObj.focusModule.active && gObj.focusModule.active.getTable().rows[_this.crtRowIndex] && gObj.focusModule.active.getTable().rows[_this.crtRowIndex].classList.contains("e-insertedrow"))) {
            _this.editCellExtend(_this.index, _this.field, _this.isAdd);
          }
        }
        if (isEscapeCellEdit) {
          gObj.notify(restoreFocus, {});
        }
      };
    };
    BatchEdit2.prototype.prevEditedBatchCellMatrix = function() {
      var editedBatchCellMatrix = [];
      var gObj = this.parent;
      var editedBatchCell = gObj.focusModule.active.getTable().querySelector(".e-editedbatchcell");
      if (editedBatchCell) {
        var tr = editedBatchCell.parentElement;
        var rowIndex = [].slice.call(this.parent.focusModule.active.getTable().rows).indexOf(tr);
        var cellIndex = [].slice.call(tr.cells).indexOf(editedBatchCell);
        editedBatchCellMatrix = [rowIndex, cellIndex];
      }
      return editedBatchCellMatrix;
    };
    BatchEdit2.prototype.getDataByIndex = function(index) {
      var row2 = this.parent.getRowObjectFromUID(this.parent.getDataRows()[parseInt(index.toString(), 10)].getAttribute("data-uid"));
      return row2.changes ? row2.changes : row2.data;
    };
    BatchEdit2.prototype.keyDownHandler = function(e) {
      if (this.addBatchRow || (e.action === "tab" || e.action === "shiftTab") && this.parent.isEdit) {
        var gObj = this.parent;
        var btmIdx = this.getBottomIndex();
        var rowcell = parentsUntil(e.target, rowCell);
        if (this.addBatchRow || rowcell && !this.parent.isReact) {
          var cell = void 0;
          if (rowcell) {
            cell = rowcell.querySelector(".e-field");
          }
          if (this.addBatchRow || cell) {
            var visibleColumns = this.parent.getVisibleColumns();
            var columnIndex = e.action === "tab" ? visibleColumns.length - 1 : 0;
            if (this.addBatchRow || visibleColumns[parseInt(columnIndex.toString(), 10)].field === cell.getAttribute("id").slice(this.parent.element.id.length)) {
              if (this.cellDetails.rowIndex === btmIdx && e.action === "tab") {
                if (gObj.editSettings.newRowPosition === "Top") {
                  gObj.editSettings.newRowPosition = "Bottom";
                  this.addRecord();
                  gObj.editSettings.newRowPosition = "Top";
                } else {
                  this.addRecord();
                }
                this.addBatchRow = false;
              } else {
                this.saveCell();
              }
            }
          }
        }
      }
    };
    BatchEdit2.prototype.addCancelWhilePaging = function() {
      if (this.validateFormObj()) {
        this.parent.notify(destroyForm, {});
        this.parent.isEdit = false;
        this.editNext = false;
        this.mouseDownElement = void 0;
        this.isColored = false;
      }
    };
    BatchEdit2.prototype.getBottomIndex = function() {
      var changes = this.getBatchChanges();
      return this.parent.getCurrentViewRecords().length + changes[addedRecords].length - changes[deletedRecords].length - 1;
    };
    return BatchEdit2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/dialog-edit.js
var __extends35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DialogEdit = (
  /** @class */
  function(_super) {
    __extends35(DialogEdit2, _super);
    function DialogEdit2(parent, serviceLocator, renderer) {
      var _this = (
        //constructor
        _super.call(this, parent, serviceLocator) || this
      );
      _this.parent = parent;
      _this.serviceLocator = serviceLocator;
      _this.renderer = renderer;
      return _this;
    }
    DialogEdit2.prototype.closeEdit = function() {
      _super.prototype.closeEdit.call(this);
    };
    DialogEdit2.prototype.addRecord = function(data, index) {
      _super.prototype.addRecord.call(this, data, index);
    };
    DialogEdit2.prototype.endEdit = function() {
      _super.prototype.endEdit.call(this);
    };
    DialogEdit2.prototype.updateRow = function(index, data) {
      _super.prototype.updateRow.call(this, index, data);
    };
    DialogEdit2.prototype.deleteRecord = function(fieldname, data) {
      _super.prototype.deleteRecord.call(this, fieldname, data);
    };
    DialogEdit2.prototype.startEdit = function(tr) {
      _super.prototype.startEdit.call(this, tr);
    };
    return DialogEdit2;
  }(NormalEdit)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/datepicker-edit-cell.js
var __extends36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
DatePicker.Inject(MaskedDateTime);
var DatePickerEditCell = (
  /** @class */
  function(_super) {
    __extends36(DatePickerEditCell2, _super);
    function DatePickerEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DatePickerEditCell2.prototype.write = function(args) {
      this.edit = this.parent.editModule;
      if (args.column.editType === "datepickeredit") {
        this.obj = new DatePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl, this.parent.cssClass, this), args.column.edit.params));
      } else if (args.column.editType === "datetimepickeredit") {
        this.obj = new DateTimePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl, this.parent.cssClass, this), args.column.edit.params));
      }
      this.obj.appendTo(args.element);
    };
    return DatePickerEditCell2;
  }(EditCellBase)
);
function dateanddatetimerender(args, mode, rtl, css, datePickerEditCell) {
  var isInline = mode !== "Dialog";
  var format = getCustomDateFormat(args.column.format, args.column.type);
  var value = getObject(args.column.field, args.rowData);
  value = value ? new Date(value) : null;
  return {
    floatLabelType: isInline ? "Never" : "Always",
    value,
    format,
    placeholder: isInline ? "" : args.column.headerText,
    enableRtl: rtl,
    enabled: isEditable(args.column, args.requestType, args.element),
    cssClass: css ? css : null,
    close: datePickerClose.bind(datePickerEditCell)
  };
}
function datePickerClose(args) {
  if (args.event && args.event.action === "escape") {
    this.edit.editCellDialogClose = true;
  }
}

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/template-edit-cell.js
var TemplateEditCell = (
  /** @class */
  function() {
    function TemplateEditCell2(parent) {
      this.parent = parent;
    }
    TemplateEditCell2.prototype.read = function(element, value) {
      return value;
    };
    TemplateEditCell2.prototype.write = function() {
    };
    TemplateEditCell2.prototype.destroy = function() {
    };
    return TemplateEditCell2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/edit.js
var Edit = (
  /** @class */
  function() {
    function Edit2(parent, serviceLocator) {
      this.isShowAddedRowValidate = false;
      this.editType = {
        "Inline": InlineEdit,
        "Normal": InlineEdit,
        "Batch": BatchEdit,
        "Dialog": DialogEdit
      };
      this.fieldname = "";
      this.data = {};
      this.editCellDialogClose = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.l10n = this.serviceLocator.getService("localization");
      this.addEventListener();
      this.updateEditObj();
      this.createAlertDlg();
      this.createConfirmDlg();
    }
    Edit2.prototype.updateColTypeObj = function() {
      var cols = this.parent.columnModel;
      for (var i = 0; i < cols.length; i++) {
        if (this.parent.editSettings.template || cols[parseInt(i.toString(), 10)].editTemplate) {
          var templteCell = "templateedit";
          cols[parseInt(i.toString(), 10)].edit = extend(new Edit2.editCellType["" + templteCell](this.parent), cols[parseInt(i.toString(), 10)].edit || {});
        } else {
          cols[parseInt(i.toString(), 10)].edit = extend(new Edit2.editCellType[cols[parseInt(i.toString(), 10)].editType && Edit2.editCellType[cols[parseInt(i.toString(), 10)].editType] ? cols[parseInt(i.toString(), 10)].editType : "defaultedit"](this.parent, this.serviceLocator), cols[parseInt(i.toString(), 10)].edit || {});
        }
      }
      this.parent.log("primary_column_missing");
    };
    Edit2.prototype.getModuleName = function() {
      return "edit";
    };
    Edit2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName()) {
        return;
      }
      var gObj = this.parent;
      for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowAdding":
          case "allowDeleting":
          case "allowEditing":
            if (gObj.editSettings.allowAdding || gObj.editSettings.allowEditing || gObj.editSettings.allowDeleting) {
              this.initialEnd();
            }
            break;
          case "mode":
            this.updateEditObj();
            gObj.isEdit = gObj.editSettings.showAddNewRow ? true : false;
            gObj.refresh();
            break;
        }
      }
    };
    Edit2.prototype.updateEditObj = function() {
      if (this.editModule) {
        this.editModule.destroy();
      }
      this.renderer = new EditRender(this.parent, this.serviceLocator);
      this.editModule = new this.editType[this.parent.editSettings.mode](this.parent, this.serviceLocator, this.renderer);
    };
    Edit2.prototype.initialEnd = function() {
      this.updateColTypeObj();
    };
    Edit2.prototype.startEdit = function(tr) {
      var gObj = this.parent;
      if (!gObj.editSettings.allowEditing || gObj.isEdit && (!gObj.editSettings.showAddNewRow || gObj.editSettings.showAddNewRow && !isNullOrUndefined(gObj.element.querySelector("." + editedRow))) || gObj.editSettings.mode === "Batch") {
        return;
      }
      this.parent.element.classList.add("e-editing");
      if (!gObj.getSelectedRows().length || isNullOrUndefined(this.parent.getRowByIndex(parseInt(this.parent.getSelectedRows()[0].getAttribute("data-rowindex"), 10)))) {
        if (!tr) {
          this.showDialog("EditOperationAlert", this.alertDObj);
          return;
        }
      } else if (!tr) {
        tr = gObj.getSelectedRows()[0];
      }
      if (this.parent.enableVirtualization && this.parent.editSettings.mode === "Normal") {
        var idx = parseInt(tr.getAttribute("data-rowindex"), 10);
        tr = this.parent.getRowByIndex(idx);
      }
      var lastTr = gObj.getContent().querySelector("tr:last-child");
      var hdrTbody = gObj.getHeaderContent().querySelector("tbody");
      if (gObj.frozenRows && isNullOrUndefined(lastTr) && hdrTbody && hdrTbody.querySelector("tr:last-child")) {
        this.isLastRow = tr.rowIndex === parseInt(gObj.getHeaderContent().querySelector("tbody").querySelector("tr:last-child").getAttribute("data-rowindex"), 10);
      } else if (lastTr) {
        this.isLastRow = tr.rowIndex === lastTr.rowIndex;
      }
      if (tr.style.display === "none") {
        return;
      }
      this.editModule.startEdit(tr);
      this.refreshToolbar();
      gObj.element.querySelector(".e-gridpopup").style.display = "none";
      this.parent.notify("start-edit", {});
      if (gObj.editSettings.showAddNewRow) {
        this.destroyToolTip();
      }
    };
    Edit2.prototype.checkLastRow = function(tr, args) {
      var checkLastRow = this.isLastRow;
      if (this.parent.height !== "auto" && this.parent.editSettings.newRowPosition === "Bottom" && args && args.requestType === "add" && this.parent.getContent().firstElementChild.offsetHeight > this.parent.getContentTable().scrollHeight) {
        addClass([].slice.call(tr.getElementsByClassName(rowCell)), "e-lastrowadded");
      } else if (checkLastRow && tr && tr.classList) {
        addClass([].slice.call(tr.getElementsByClassName(rowCell)), "e-lastrowcell");
      }
    };
    Edit2.prototype.closeEdit = function() {
      if (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.showConfirmDialog && this.parent.element.getElementsByClassName("e-updatedtd").length) {
        this.showDialog("CancelEdit", this.dialogObj);
        return;
      }
      this.parent.element.classList.remove("e-editing");
      this.editModule.closeEdit();
      this.refreshToolbar();
      this.parent.notify(closeEdit, {});
      if (this.parent.editSettings.showAddNewRow) {
        this.destroyToolTip();
      }
    };
    Edit2.prototype.refreshToolbar = function() {
      this.parent.notify(toolbarRefresh, {});
    };
    Edit2.prototype.addRecord = function(data, index) {
      if (!this.parent.editSettings.allowAdding) {
        return;
      }
      var args = {
        startEdit: true
      };
      if (!data) {
        this.parent.notify(virtualScrollAddActionBegin, args);
      }
      if (args.startEdit) {
        this.parent.element.classList.add("e-editing");
        this.editModule.addRecord(data, index);
        this.refreshToolbar();
        this.parent.notify("start-add", {});
      }
    };
    Edit2.prototype.deleteRecord = function(fieldname, data) {
      var gObj = this.parent;
      if (!gObj.editSettings.allowDeleting) {
        return;
      }
      if (!data) {
        if (!gObj.getSelectedRecords().length && isNullOrUndefined(gObj.commandDelIndex)) {
          this.showDialog("DeleteOperationAlert", this.alertDObj);
          return;
        }
      }
      if (gObj.editSettings.showDeleteConfirmDialog) {
        this.fieldname = fieldname;
        this.data = data;
        this.showDialog("ConfirmDelete", this.dialogObj);
        return;
      }
      this.editModule.deleteRecord(fieldname, data);
    };
    Edit2.prototype.deleteRow = function(tr) {
      this.deleteRowUid = tr.getAttribute("data-uid");
      var rowObj = this.parent.getRowObjectFromUID(this.deleteRowUid);
      if (!isNullOrUndefined(rowObj)) {
        this.deleteRecord(null, rowObj.data);
      }
    };
    Edit2.prototype.endEdit = function() {
      if (this.parent.editSettings.mode === "Batch" && this.parent.editSettings.showConfirmDialog && (isNullOrUndefined(this.formObj) || this.formObj.validate())) {
        this.parent.editModule.saveCell();
        this.parent.notify(editNextValCell, {});
        if (isNullOrUndefined(this.formObj) || this.formObj.validate()) {
          this.showDialog("BatchSaveConfirm", this.dialogObj);
          return;
        }
      }
      this.endEditing();
    };
    Edit2.prototype.updateCell = function(rowIndex, field, value) {
      this.editModule.updateCell(rowIndex, field, value);
    };
    Edit2.prototype.updateRow = function(index, data) {
      this.editModule.updateRow(index, data);
    };
    Edit2.prototype.batchCancel = function() {
      this.closeEdit();
    };
    Edit2.prototype.batchSave = function() {
      this.endEdit();
    };
    Edit2.prototype.editCell = function(index, field) {
      this.editModule.editCell(index, field);
    };
    Edit2.prototype.editFormValidate = function() {
      var form1 = this.formObj ? this.formObj.validate() : true;
      var form2 = this.mFormObj ? this.mFormObj.validate() : true;
      var form3 = this.frFormObj ? this.frFormObj.validate() : true;
      return form1 && form2 && form3;
    };
    Edit2.prototype.getBatchChanges = function() {
      return this.editModule.getBatchChanges ? this.editModule.getBatchChanges() : {};
    };
    Edit2.prototype.getCurrentEditCellData = function() {
      var obj = this.getCurrentEditedData(this.formObj.element, {});
      return obj[Object.keys(obj)[0]];
    };
    Edit2.prototype.saveCell = function() {
      this.editModule.saveCell();
    };
    Edit2.prototype.endEditing = function() {
      if (!this.parent.editSettings.showAddNewRow) {
        this.parent.element.classList.remove("e-editing");
      }
      this.editModule.endEdit();
      this.isShowAddedRowValidate = false;
      this.refreshToolbar();
    };
    Edit2.prototype.showDialog = function(content2, obj) {
      obj.content = "<div>" + this.l10n.getConstant(content2) + "</div>";
      obj.dataBind();
      obj.show();
      if (this.parent.enableRtl) {
        obj.refresh();
      }
    };
    Edit2.prototype.getValueFromType = function(col, value) {
      var val = value;
      switch (col.type) {
        case "number":
          val = !isNaN(parseFloat(value)) ? parseFloat(value) : null;
          break;
        case "boolean":
          if (col.editType !== "booleanedit") {
            val = value === this.l10n.getConstant("True") || value === true ? true : false;
          }
          break;
        case "date":
        case "datetime":
          if (col.editType !== "datepickeredit" && col.editType !== "datetimepickeredit" && value && value.length) {
            val = new Date(value);
          } else if (value === "") {
            val = null;
          }
          break;
        case "dateonly":
          val = value && (value = new Date(value)) ? value.getFullYear() + "-" + padZero(value.getMonth() + 1) + "-" + padZero(value.getDate()) : null;
          break;
      }
      return val;
    };
    Edit2.prototype.destroyToolTip = function() {
      var elements = [].slice.call(this.parent.element.getElementsByClassName("e-griderror"));
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var elem = elements_1[_i];
        remove(elem);
      }
      this.parent.getContent().firstElementChild.style.position = "relative";
      if (this.parent.isFrozenGrid()) {
        if (this.parent.element.querySelector(".e-gridheader")) {
          this.parent.element.querySelector(".e-gridheader").style.position = "";
        }
        this.parent.element.querySelector(".e-gridcontent").style.position = "";
      }
    };
    Edit2.prototype.createConfirmDlg = function() {
      this.dialogObj = this.dlgWidget([{
        click: this.dlgOk.bind(this),
        buttonModel: {
          content: this.l10n.getConstant("OKButton"),
          cssClass: this.parent.cssClass ? "e-primary " + this.parent.cssClass : "e-primary",
          isPrimary: true
        }
      }, {
        click: this.dlgCancel.bind(this),
        buttonModel: {
          cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
          content: this.l10n.getConstant("CancelButton")
        }
      }], "EditConfirm");
    };
    Edit2.prototype.createAlertDlg = function() {
      this.alertDObj = this.dlgWidget([{
        click: this.alertClick.bind(this),
        buttonModel: {
          content: this.l10n.getConstant("OKButton"),
          cssClass: this.parent.cssClass ? "e-flat " + this.parent.cssClass : "e-flat",
          isPrimary: true
        }
      }], "EditAlert");
    };
    Edit2.prototype.alertClick = function() {
      this.alertDObj.hide();
    };
    Edit2.prototype.dlgWidget = function(btnOptions, name) {
      var div = this.parent.createElement("div", {
        id: this.parent.element.id + name
      });
      this.parent.element.appendChild(div);
      var options = {
        showCloseIcon: false,
        isModal: true,
        visible: false,
        closeOnEscape: true,
        target: this.parent.element,
        width: "320px",
        animationSettings: {
          effect: "None"
        },
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      };
      options.buttons = btnOptions;
      var obj = new Dialog(options);
      var isStringTemplate = "isStringTemplate";
      obj["" + isStringTemplate] = true;
      obj.appendTo(div);
      return obj;
    };
    Edit2.prototype.dlgCancel = function() {
      if (this.parent.pagerModule) {
        this.parent.pagerModule.isForceCancel = false;
      }
      this.parent.focusModule.clearIndicator();
      this.parent.focusModule.restoreFocus();
      this.dialogObj.hide();
      this.parent.notify("cancelcnfrmDlg", {});
    };
    Edit2.prototype.dlgOk = function() {
      switch (this.dialogObj.element.querySelector(".e-dlg-content").firstElementChild.innerText) {
        case this.l10n.getConstant("ConfirmDelete"):
          this.editModule.deleteRecord(this.fieldname, this.data);
          break;
        case this.l10n.getConstant("CancelEdit"):
          this.editModule.closeEdit();
          break;
        case this.l10n.getConstant("BatchSaveConfirm"):
          this.endEditing();
          break;
        case this.l10n.getConstant("BatchSaveLostChanges"):
          if (this.parent.editSettings.mode === "Batch") {
            this.editModule.addCancelWhilePaging();
          }
          if (this.parent.pagerModule) {
            this.parent.pagerModule.isForceCancel = false;
          }
          this.executeAction();
          break;
      }
      this.dlgCancel();
    };
    Edit2.prototype.destroyEditComponents = function() {
      if (this.parent.isEdit) {
        this.destroyWidgets();
        this.destroyForm();
      }
      this.destroy();
    };
    Edit2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.eventDetails = [{
        event: inBoundModelChanged,
        handler: this.onPropertyChanged
      }, {
        event: initialEnd,
        handler: this.initialEnd
      }, {
        event: keyPressed,
        handler: this.keyPressHandler
      }, {
        event: autoCol,
        handler: this.updateColTypeObj
      }, {
        event: tooltipDestroy,
        handler: this.destroyToolTip
      }, {
        event: preventBatch,
        handler: this.preventBatch
      }, {
        event: destroyForm,
        handler: this.destroyForm
      }, {
        event: destroy,
        handler: this.destroyEditComponents
      }];
      addRemoveEventListener(this.parent, this.eventDetails, true, this);
      this.actionBeginFunction = this.onActionBegin.bind(this);
      this.actionCompleteFunction = this.actionComplete.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
    };
    Edit2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      addRemoveEventListener(this.parent, this.eventDetails, false);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
    };
    Edit2.prototype.actionComplete = function(e) {
      var actions = ["add", "beginEdit", "save", "delete", "cancel", "filterAfterOpen", "filterchoicerequest"];
      if (actions.indexOf(e.requestType) < 0) {
        this.parent.isEdit = this.parent.editSettings.showAddNewRow ? true : false;
      }
      if (e.requestType === "batchsave") {
        this.parent.focusModule.restoreFocus();
      }
      this.refreshToolbar();
    };
    Edit2.prototype.getCurrentEditedData = function(form, editedData) {
      var gObj = this.parent;
      if (gObj.editSettings.template) {
        var elements = [].slice.call(form.elements);
        for (var k = 0; k < elements.length; k++) {
          if ((elements[parseInt(k.toString(), 10)].hasAttribute("name") && elements[parseInt(k.toString(), 10)].className !== "e-multi-hidden" || elements[parseInt(k.toString(), 10)].classList.contains("e-multiselect")) && !(elements[parseInt(k.toString(), 10)].type === "hidden" && (parentsUntil(elements[parseInt(k.toString(), 10)], "e-switch-wrapper") || parentsUntil(elements[parseInt(k.toString(), 10)], "e-checkbox-wrapper")))) {
            var field = elements[parseInt(k.toString(), 10)].hasAttribute("name") ? setComplexFieldID(elements[parseInt(k.toString(), 10)].getAttribute("name")) : setComplexFieldID(elements[parseInt(k.toString(), 10)].getAttribute("id"));
            var column = gObj.getColumnByField(field) || {
              field,
              type: elements[parseInt(k.toString(), 10)].getAttribute("type")
            };
            var value = void 0;
            if (column.type === "checkbox" || column.type === "boolean") {
              value = elements[parseInt(k.toString(), 10)].checked;
            } else if (elements[parseInt(k.toString(), 10)].value) {
              value = elements[parseInt(k.toString(), 10)].value;
              if (elements[parseInt(k.toString(), 10)].ej2_instances && elements[parseInt(k.toString(), 10)].ej2_instances.length && !isNullOrUndefined(elements[parseInt(k.toString(), 10)].ej2_instances[0].value)) {
                elements[parseInt(k.toString(), 10)].blur();
                value = elements[parseInt(k.toString(), 10)].ej2_instances[0].value;
              }
            } else if (elements[parseInt(k.toString(), 10)].ej2_instances) {
              value = elements[parseInt(k.toString(), 10)].ej2_instances[0].value;
            }
            if (column.edit && typeof column.edit.read === "string") {
              value = getValue(column.edit.read, window)(elements[parseInt(k.toString(), 10)], value);
            } else if (column.edit && column.edit.read) {
              value = column.edit.read(elements[parseInt(k.toString(), 10)], value);
            }
            value = gObj.editModule.getValueFromType(column, value);
            if (elements[parseInt(k.toString(), 10)].type === "radio") {
              if (elements[parseInt(k.toString(), 10)].checked) {
                DataUtil.setValue(column.field, value, editedData);
              }
            } else {
              if (typeof value === "string") {
                this.parent.sanitize(value);
              }
              DataUtil.setValue(column.field, value, editedData);
            }
          }
        }
        return editedData;
      }
      var col = gObj.columnModel.filter(function(col2) {
        return col2.editTemplate;
      });
      for (var j = 0; j < col.length; j++) {
        if (form[getComplexFieldID(col[parseInt(j.toString(), 10)].field)]) {
          var inputElements = [].slice.call(form[getComplexFieldID(col[parseInt(j.toString(), 10)].field)]);
          inputElements = inputElements.length ? inputElements : [form[getComplexFieldID(col[parseInt(j.toString(), 10)].field)]];
          var temp = inputElements.filter(function(e) {
            return !isNullOrUndefined(e.ej2_instances);
          });
          if (temp.length === 0) {
            temp = inputElements.filter(function(e) {
              return e.hasAttribute("name");
            });
          }
          for (var k = 0; k < temp.length; k++) {
            var value = this.getValue(col[parseInt(j.toString(), 10)], temp[parseInt(k.toString(), 10)], editedData);
            if (col[parseInt(j.toString(), 10)].type === "string") {
              value = this.parent.sanitize(value);
            }
            DataUtil.setValue(col[parseInt(j.toString(), 10)].field, value, editedData);
          }
        }
      }
      var inputs2 = [].slice.call(form.getElementsByClassName("e-field"));
      for (var i = 0, len = inputs2.length; i < len; i++) {
        var col_1 = gObj.getColumnByUid(inputs2[parseInt(i.toString(), 10)].getAttribute("e-mappinguid"));
        if (col_1 && col_1.field) {
          var value = this.getValue(col_1, inputs2[parseInt(i.toString(), 10)], editedData);
          if (col_1.type === "string" && !(col_1.isForeignColumn() && typeof value !== "string")) {
            value = this.parent.sanitize(value);
          }
          DataUtil.setValue(col_1.field, value, editedData);
        }
      }
      return editedData;
    };
    Edit2.prototype.getValue = function(col, input2, editedData) {
      var value = input2.ej2_instances ? input2.ej2_instances[0].value : input2.value;
      var gObj = this.parent;
      var temp = col.edit.read;
      if (col.type === "checkbox" || col.type === "boolean") {
        value = input2.checked;
      }
      if (typeof temp === "string") {
        temp = getValue(temp, window);
        value = gObj.editModule.getValueFromType(col, temp(input2, value));
      } else {
        value = gObj.editModule.getValueFromType(col, col.edit.read(input2, value));
      }
      if (isNullOrUndefined(editedData[col.field]) && value === "") {
        value = editedData[col.field];
      }
      return value;
    };
    Edit2.prototype.onActionBegin = function(e) {
      if ((e.requestType === "columnstate" || this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache && e.requestType === "sorting") && this.parent.isEdit && this.parent.editSettings.mode !== "Batch") {
        this.closeEdit();
      } else {
        var editRow = this.parent.element.querySelector("." + editedRow);
        var addRow = this.parent.element.querySelector("." + addedRow);
        if (editRow && this.parent.frozenRows && e.requestType === "virtualscroll" && parseInt(parentsUntil(editRow, row).getAttribute(dataRowIndex), 10) < this.parent.frozenRows) {
          return;
        }
        var restrictedRequestTypes = ["filterAfterOpen", "filterBeforeOpen", "filterchoicerequest", "filterSearchBegin", "save", "infiniteScroll", "virtualscroll"];
        var isRestrict = restrictedRequestTypes.indexOf(e.requestType) === -1;
        var isAddRows = !this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !isNullOrUndefined(this.parent.element.querySelector(".e-editedrow"));
        var isDestroyVirtualForm = (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && this.formObj && isAddRows && !this.formObj.isDestroyed && (editRow || addRow || e.requestType === "cancel") && isRestrict;
        if (!this.parent.enableVirtualization && isAddRows && this.parent.editSettings.mode !== "Batch" && this.formObj && !this.formObj.isDestroyed && isRestrict && !e.cancel || isDestroyVirtualForm) {
          this.destroyWidgets();
          this.destroyForm();
        }
      }
    };
    Edit2.prototype.destroyWidgets = function(cols) {
      var gObj = this.parent;
      gObj.isWidgetsDestroyed = true;
      if (gObj.editSettings.template) {
        this.parent.destroyTemplate(["editSettingsTemplate"]);
        if (this.parent.isReact) {
          this.parent.renderTemplates();
        }
      }
      cols = cols ? cols : this.parent.getCurrentVisibleColumns(this.parent.enableColumnVirtualization);
      if (cols.some(function(column) {
        return !isNullOrUndefined(column.editTemplate);
      })) {
        this.parent.destroyTemplate(["editTemplate"]);
        if (this.parent.isReact) {
          this.parent.renderTemplates();
        }
      }
      for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
        var col = cols_1[_i];
        var temp = col.edit.destroy;
        if (col.edit.destroy) {
          if (typeof temp === "string") {
            temp = getValue(temp, window);
            temp();
          } else {
            col.edit.destroy();
          }
        }
      }
      var elements = [].slice.call(this.formObj.element.elements);
      for (var i = 0; i < elements.length; i++) {
        if (elements[parseInt(i.toString(), 10)].hasAttribute("name")) {
          var instanceElement = elements[parseInt(i.toString(), 10)].parentElement.classList.contains("e-ddl") ? elements[parseInt(i.toString(), 10)].parentElement.querySelector("input") : elements[parseInt(i.toString(), 10)];
          if (instanceElement.ej2_instances && instanceElement.ej2_instances.length && !instanceElement.ej2_instances[0].isDestroyed) {
            instanceElement.ej2_instances[0].destroy();
          }
        }
      }
    };
    Edit2.prototype.destroyForm = function() {
      this.destroyToolTip();
      var formObjects = [this.formObj, this.mFormObj, this.frFormObj, this.virtualFormObj];
      var col = this.parent.columnModel.filter(function(col2) {
        return col2.editTemplate;
      });
      for (var i = 0; i < formObjects.length; i++) {
        if (formObjects[parseInt(i.toString(), 10)] && formObjects[parseInt(i.toString(), 10)].element && !formObjects[parseInt(i.toString(), 10)].isDestroyed) {
          formObjects[parseInt(i.toString(), 10)].destroy();
          if (this.parent.isReact && this.parent.editSettings.mode === "Dialog" && (!isNullOrUndefined(this.parent.editSettings.template) || col.length)) {
            formObjects[parseInt(i.toString(), 10)].element.remove();
          }
        }
      }
      this.destroyToolTip();
    };
    Edit2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement) {
        return;
      }
      var hasGridChild = gridElement.querySelector("." + gridHeader) && gridElement.querySelector("." + gridContent) ? true : false;
      if (hasGridChild) {
        this.destroyForm();
      }
      this.removeEventListener();
      var elem = this.dialogObj.element;
      if (elem.childElementCount > 0) {
        this.dialogObj.destroy();
        remove(elem);
      }
      elem = this.alertDObj.element;
      if (elem.childElementCount > 0) {
        this.alertDObj.destroy();
        remove(elem);
      }
      if (!hasGridChild) {
        return;
      }
      if (this.editModule) {
        this.editModule.destroy();
      }
    };
    Edit2.prototype.keyPressHandler = function(e) {
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (isMacLike && e.metaKey && e.action === "ctrlEnter") {
        e.action = "insert";
      }
      switch (e.action) {
        case "insert":
          this.addRecord();
          break;
        case "delete":
          if ((e.target.tagName !== "INPUT" || e.target.classList.contains("e-checkselect")) && !document.querySelector(".e-popup-open.e-edit-dialog")) {
            this.deleteRecord();
          }
          break;
        case "f2":
          this.startEdit();
          break;
        case "enter":
          if (!parentsUntil(e.target, "e-unboundcelldiv") && this.parent.editSettings.mode !== "Batch" && (parentsUntil(e.target, gridContent) || (this.parent.frozenRows || this.parent.editSettings.showAddNewRow && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) && parentsUntil(e.target, headerContent)) && !document.getElementsByClassName("e-popup-open").length) {
            e.preventDefault();
            this.endEdit();
          }
          break;
        case "escape":
          if (this.parent.isEdit && !this.editCellDialogClose) {
            if (this.parent.editSettings.mode === "Batch") {
              this.editModule.escapeCellEdit();
            } else {
              this.curretRowFocus(e);
            }
          }
          if (this.editCellDialogClose) {
            this.editCellDialogClose = false;
          }
          break;
        case "tab":
        case "shiftTab":
          this.curretRowFocus(e);
          break;
      }
    };
    Edit2.prototype.curretRowFocus = function(e) {
      if (this.parent.isEdit && this.parent.editSettings.mode !== "Batch") {
        this.parent.isWidgetsDestroyed = false;
        var editedRow2 = parentsUntil(e.target, "e-editedrow") || parentsUntil(e.target, "e-addedrow");
        if (editedRow2) {
          var focusableEditCells = [].slice.call(editedRow2.querySelectorAll(".e-input:not(.e-disabled)"));
          var commandColCell = [].slice.call(editedRow2.querySelectorAll(".e-unboundcell"));
          if (commandColCell) {
            for (var i = 0; i < commandColCell.length; i++) {
              focusableEditCells = focusableEditCells.concat([].slice.call(commandColCell[parseInt(i.toString(), 10)].querySelectorAll(".e-btn:not(.e-hide)")));
            }
          }
          var rowCell2 = parentsUntil(e.target, "e-rowcell");
          rowCell2 = rowCell2 && rowCell2.classList.contains("e-unboundcell") ? e.target : rowCell2;
          var lastCell = parentsUntil(focusableEditCells[focusableEditCells.length - 1], "e-rowcell");
          lastCell = lastCell && lastCell.classList.contains("e-unboundcell") ? focusableEditCells[focusableEditCells.length - 1] : lastCell;
          if (rowCell2 === lastCell && e.action === "tab" || e.action === "escape" || rowCell2 === parentsUntil(focusableEditCells[0], "e-rowcell") && e.action === "shiftTab" && !this.parent.editSettings.showAddNewRow) {
            var uid2 = editedRow2.getAttribute("data-uid");
            var rows = this.parent.getRows();
            var rowIndex = rows.map(function(m) {
              return m.getAttribute("data-uid");
            }).indexOf(uid2);
            if (this.parent.frozenRows && parentsUntil(editedRow2, "e-content")) {
              rowIndex = rowIndex - this.parent.frozenRows;
            }
            if (editedRow2.classList.contains("e-addedrow")) {
              rowIndex = 0;
            }
            if (e.action === "escape") {
              this.closeEdit();
            } else {
              this.isShowAddedRowValidate = true;
              this.parent.selectionModule.preventFocus = false;
              this.endEdit();
              this.isShowAddedRowValidate = false;
            }
            if (this.parent.focusModule.active && (!this.parent.editSettings.showAddNewRow || editedRow2.classList.contains("e-editedrow") || this.parent.editSettings.showAddNewRow && editedRow2.classList.contains("e-addedrow") && isNullOrUndefined(this.parent.element.querySelector('.e-griderror:not([style*="display: none"])')))) {
              var firstCellIndex = 0;
              var matrix = this.parent.focusModule.active.matrix;
              if (matrix && matrix.matrix.length && matrix.matrix[parseInt(rowIndex.toString(), 10)]) {
                var rowMatrix = matrix.matrix[parseInt(rowIndex.toString(), 10)];
                for (var i = 0; i < rowMatrix.length; i++) {
                  if (matrix[parseInt(i.toString(), 10)] > 0) {
                    firstCellIndex = i;
                    break;
                  }
                }
              }
              this.parent.focusModule.active.matrix.current = [rowIndex, firstCellIndex];
            }
          }
          if (this.parent.editSettings.showAddNewRow && e.action === "tab" && parentsUntil(e.target, "e-addedrow")) {
            this.isShowAddedRowValidate = true;
          }
        }
      }
    };
    Edit2.prototype.preventBatch = function(args) {
      this.preventObj = args;
      this.showDialog("BatchSaveLostChanges", this.dialogObj);
    };
    Edit2.prototype.executeAction = function() {
      this.preventObj.handler.call(this.preventObj.instance, this.preventObj.arg1, this.preventObj.arg2, this.preventObj.arg3, this.preventObj.arg4, this.preventObj.arg5, this.preventObj.arg6, this.preventObj.arg7, this.preventObj.arg8);
    };
    Edit2.prototype.applyFormValidation = function(cols, newRule) {
      var gObj = this.parent;
      var idx = 0;
      var form = this.parent.editSettings.mode !== "Dialog" ? gObj.editSettings.showAddNewRow && gObj.element.querySelector("." + editedRow) ? gObj.element.querySelector("." + editedRow).getElementsByClassName("e-gridform")[parseInt(idx.toString(), 10)] : gObj.element.getElementsByClassName("e-gridform")[parseInt(idx.toString(), 10)] : select("#" + gObj.element.id + "_dialogEdit_wrapper .e-gridform", document);
      var index = 1;
      var rules = {};
      var mRules = {};
      var frRules = {};
      cols = cols ? cols : gObj.getColumns();
      for (var i = 0; i < cols.length; i++) {
        if (!cols[parseInt(i.toString(), 10)].visible && (gObj.editSettings.mode !== "Dialog" || gObj.groupSettings.columns.indexOf(cols[parseInt(i.toString(), 10)].field) === -1 && gObj.editSettings.mode === "Dialog")) {
          continue;
        }
        if (cols[parseInt(i.toString(), 10)].validationRules && isNullOrUndefined(newRule)) {
          setValidationRuels(cols[parseInt(i.toString(), 10)], index, rules, mRules, frRules, cols.length);
        }
      }
      rules = extend(rules, mRules, frRules);
      this.parent.editModule.formObj = this.createFormObj(form, newRule ? newRule : rules);
    };
    Edit2.prototype.createFormObj = function(form, rules) {
      var _this = this;
      return new FormValidator(form, {
        rules,
        locale: this.parent.locale,
        validationComplete: function(args) {
          _this.validationComplete(args);
        },
        customPlacement: function(inputElement, error) {
          var uid2 = inputElement.getAttribute("e-mappinguid");
          var args = {
            column: _this.parent.getColumnByUid(uid2),
            error,
            inputElement,
            value: inputElement.value
          };
          if (!(event && event["relatedTarget"] && event["relatedTarget"].classList.contains("e-cancelbutton")) && !_this.parent.editSettings.showAddNewRow || _this.parent.editSettings.showAddNewRow && event && event.target && (parentsUntil(event.target, _this.parent.element.id + "_update", true) || parentsUntil(event.target, "e-grid-menu") && (event.target.classList.contains("e-save") || event.target.querySelector(".e-save")) || _this.isShowAddedRowValidate || parentsUntil(event.target, "e-unboundcell") && parentsUntil(event.target, "e-update") || event["action"] === "enter" && (parentsUntil(event.target, "e-content") || parentsUntil(event.target, "e-addedrow"))) || _this.parent.editSettings.showAddNewRow && !isNullOrUndefined(_this.parent.element.querySelector("." + editedRow))) {
            _this.valErrorPlacement(inputElement, error);
          }
          _this.isShowAddedRowValidate = false;
          _this.parent.notify(valCustomPlacement, args);
        }
      });
    };
    Edit2.prototype.valErrorPlacement = function(inputElement, error) {
      if (this.parent.isEdit) {
        var id = error.getAttribute("for");
        var elem = this.getElemTable(inputElement).querySelector("#" + getParsedFieldID(id) + "_Error");
        if (!elem) {
          this.createTooltip(inputElement, error, id, "");
        } else {
          elem.querySelector(".e-tip-content").innerHTML = error.outerHTML;
        }
      }
    };
    Edit2.prototype.getElemTable = function(inputElement) {
      var isFrozenHdr;
      var gObj = this.parent;
      var table2;
      if (gObj.editSettings.mode !== "Dialog") {
        isFrozenHdr = gObj.frozenRows && closest(inputElement, "." + row) && gObj.frozenRows > (parseInt(closest(inputElement, "." + row).getAttribute(dataRowIndex), 10) || 0);
        table2 = this.parent.isFrozenGrid() ? gObj.element : isFrozenHdr || gObj.editSettings.showAddNewRow && (gObj.enableVirtualization || gObj.enableInfiniteScrolling) ? gObj.getHeaderTable() : gObj.getContentTable();
      } else {
        table2 = select("#" + gObj.element.id + "_dialogEdit_wrapper", document);
      }
      return table2;
    };
    Edit2.prototype.resetElemPosition = function(elem, args) {
      var td = parentsUntil(args.element, rowCell);
      if (td) {
        var tdRight = td.getBoundingClientRect().right;
        var elemRight = elem.getBoundingClientRect().right;
        if (elemRight > tdRight) {
          var offSet = elemRight - tdRight;
          elem.style.left = elem.offsetLeft - offSet + "px";
        }
      }
    };
    Edit2.prototype.validationComplete = function(args) {
      if (this.parent.isEdit) {
        var elem = this.getElemTable(args.element).querySelector("#" + getParsedFieldID(args.inputName) + "_Error");
        if (this.parent.editSettings.showAddNewRow && !elem && args.element) {
          var error = parentsUntil(args.element, "e-rowcell").querySelector(".e-error");
          if (error) {
            error.classList.remove("e-error");
          }
        }
        if (elem) {
          if (args.status === "failure") {
            elem.style.display = "";
            this.resetElemPosition(elem, args);
          } else {
            elem.style.display = "none";
          }
        }
      }
    };
    Edit2.prototype.createTooltip = function(element, error, name, display) {
      var formObj = this.formObj.element;
      var customForm = parentsUntil(element, "e-virtual-validation");
      if (customForm) {
        formObj = this.virtualFormObj.element;
      }
      var gcontent = this.parent.getContent().firstElementChild;
      var isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      var td = closest(element, "." + rowCell);
      var row2 = closest(element, "." + row);
      var isFHdr;
      var isFHdrLastRow = false;
      var validationForBottomRowPos;
      var isBatchModeLastRow = false;
      var isAddNewRow = this.parent.editSettings.showAddNewRow && !isNullOrUndefined(parentsUntil(element, addedRow)) && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling);
      var viewPortRowCount = Math.round(this.parent.getContent().clientHeight / this.parent.getRowHeight()) - 1;
      var rows = [].slice.call(this.parent.getContent().getElementsByClassName(row));
      if (this.parent.editSettings.mode === "Batch") {
        rows = [].slice.call(this.parent.getContent().querySelectorAll(".e-row:not(.e-hiddenrow)"));
        if (viewPortRowCount >= 1 && rows.length >= viewPortRowCount && rows[rows.length - 1].getAttribute(dataRowIndex) === row2.getAttribute(dataRowIndex)) {
          isBatchModeLastRow = true;
        }
      }
      if (isInline) {
        if (this.parent.frozenRows || isAddNewRow) {
          var headerRows = this.parent.editSettings.showAddNewRow ? ".e-row:not(.e-hiddenrow.e-addedrow)" : ".e-row:not(.e-hiddenrow)";
          var fHearderRows = [].slice.call(this.parent.getHeaderTable().querySelector(tbody).querySelectorAll(headerRows));
          isFHdr = fHearderRows.length > (parseInt(row2.getAttribute(dataRowIndex), 10) || 0);
          isFHdrLastRow = isFHdr && parseInt(row2.getAttribute(dataRowIndex), 10) === fHearderRows.length - 1;
          var insertRow = [].slice.call(this.parent.getHeaderTable().querySelector(tbody).querySelectorAll(".e-row:not(.e-hiddenrow)"));
          if (insertRow.length === 1 && (insertRow[0].classList.contains("e-addedrow") || insertRow[0].classList.contains("e-insertedrow"))) {
            isFHdrLastRow = true;
          }
        }
        if (isFHdrLastRow || viewPortRowCount >= 1 && rows.length >= viewPortRowCount && (this.parent.editSettings.newRowPosition === "Bottom" && this.editModule.args && this.editModule.args.requestType === "add" || td.classList.contains("e-lastrowcell") && !row2.classList.contains(addedRow)) || isBatchModeLastRow) {
          validationForBottomRowPos = true;
        }
      }
      var table2 = isInline ? isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable() : select("#" + this.parent.element.id + "_dialogEdit_wrapper .e-dlg-content", document);
      var client = table2.getBoundingClientRect();
      var left = isInline ? this.parent.element.getBoundingClientRect().left : client.left;
      var input2 = closest(element, "td");
      var inputClient = input2 ? input2.getBoundingClientRect() : element.parentElement.getBoundingClientRect();
      var div = this.parent.createElement("div", {
        className: "e-tooltip-wrap e-lib e-control e-popup e-griderror",
        id: name + "_Error",
        styles: "display:" + display + ";top:" + ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top) + table2.scrollTop + 9) + "px;left:" + (inputClient.left - left + table2.scrollLeft + inputClient.width / 2) + "px;max-width:" + inputClient.width + "px;text-align:center;"
      });
      if (this.parent.cssClass) {
        div.classList.add(this.parent.cssClass);
      }
      if (isInline && client.left < left) {
        div.style.left = parseInt(div.style.left, 10) - client.left + left + "px";
      }
      var content2 = this.parent.createElement("div", {
        className: "e-tip-content"
      });
      content2.appendChild(error);
      var arrow;
      if (validationForBottomRowPos) {
        arrow = this.parent.createElement("div", {
          className: "e-arrow-tip e-tip-bottom"
        });
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-outer e-tip-bottom"
        }));
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-inner e-tip-bottom"
        }));
      } else {
        arrow = this.parent.createElement("div", {
          className: "e-arrow-tip e-tip-top"
        });
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-outer e-tip-top"
        }));
        arrow.appendChild(this.parent.createElement("div", {
          className: "e-arrow-tip-inner e-tip-top"
        }));
      }
      div.appendChild(content2);
      div.appendChild(arrow);
      if (!customForm && (this.parent.frozenRows || isAddNewRow) && this.parent.editSettings.mode !== "Dialog") {
        var getEditCell = this.parent.editSettings.mode === "Normal" ? closest(element, ".e-editcell") : closest(element, "." + table);
        getEditCell.style.position = "relative";
        div.style.position = "absolute";
        if (this.parent.editSettings.mode === "Batch" || closest(element, "." + frozenContent) || closest(element, "." + frozenHeader) || this.parent.frozenRows || isAddNewRow) {
          if (this.parent.isFrozenGrid()) {
            if (td.classList.contains("e-unfreeze")) {
              addClass([div], "e-unfreeze");
              formObj.appendChild(div);
            } else {
              var elem = closest(td, ".e-gridheader") ? this.parent.element.querySelector(".e-gridheader") : rows.length === 1 ? this.parent.element.querySelector(".e-gridcontent").querySelector(".e-content") : this.parent.element.querySelector(".e-gridcontent");
              elem.appendChild(div);
              elem.style.position = "relative";
            }
          } else {
            formObj.appendChild(div);
          }
        } else {
          this.mFormObj.element.appendChild(div);
        }
      } else {
        if (customForm) {
          this.virtualFormObj.element.appendChild(div);
        } else {
          if (this.parent.editSettings.mode !== "Dialog" && this.parent.isFrozenGrid()) {
            if (td.classList.contains("e-unfreeze")) {
              addClass([div], "e-unfreeze");
              this.formObj.element.appendChild(div);
            } else {
              var elem = closest(td, ".e-gridheader") ? this.parent.element.querySelector(".e-gridheader") : rows.length === 1 ? this.parent.element.querySelector(".e-gridcontent").querySelector(".e-content") : this.parent.element.querySelector(".e-gridcontent");
              elem.appendChild(div);
              elem.style.position = "relative";
            }
          } else {
            this.formObj.element.appendChild(div);
          }
        }
      }
      if (!isNullOrUndefined(td)) {
        if (td.classList.contains("e-fixedfreeze")) {
          div.classList.add("e-fixederror");
        } else if (td.classList.contains("e-leftfreeze") || td.classList.contains("e-rightfreeze")) {
          div.classList.add("e-freezeerror");
        }
      }
      if (!validationForBottomRowPos && isInline && gcontent.getBoundingClientRect().bottom < inputClient.bottom + inputClient.height) {
        var contentDiv = this.parent.getContent().querySelector(".e-content");
        if (this.parent.currentViewData.length === 0 && contentDiv.scrollTop === 0) {
          contentDiv.scrollTop = div.offsetHeight + arrow.scrollHeight;
        } else {
          gcontent.scrollTop = gcontent.scrollTop + div.offsetHeight + arrow.scrollHeight;
        }
      }
      var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue("font-size"), 10);
      if (div.getBoundingClientRect().width < inputClient.width && div.querySelector("label").getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {
        div.style.width = div.style.maxWidth;
      }
      if ((this.parent.frozenRows || isAddNewRow) && this.parent.editSettings.mode !== "Dialog") {
        div.style.left = input2.offsetLeft + (input2.offsetWidth / 2 - div.offsetWidth / 2) + "px";
      } else {
        div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + "px";
      }
      if (isInline && !isScroll && !this.parent.allowPaging || this.parent.frozenRows || isAddNewRow) {
        var pos = calculateRelativeBasedPosition(input2, div);
        div.style.top = pos.top + inputClient.height + 9 + "px";
      }
      if (validationForBottomRowPos) {
        if (isScroll && this.parent.height !== "auto" && (!this.parent.frozenRows || !isAddNewRow) && !this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling && !(div.classList.contains("e-freezeerror") && div.classList.contains("e-fixederror"))) {
          var scrollWidth2 = gcontent.scrollWidth > gcontent.offsetWidth ? getScrollBarWidth() : 0;
          var gHeight = this.parent.height.toString().indexOf("%") === -1 ? parseInt(this.parent.height, 10) : gcontent.offsetHeight;
          div.style.bottom = gHeight - gcontent.querySelector("table").offsetHeight - scrollWidth2 + inputClient.height + 9 + "px";
        } else {
          div.style.bottom = inputClient.height + 9 + "px";
        }
        if (rows.length < viewPortRowCount && this.parent.editSettings.newRowPosition === "Bottom" && this.editModule.args && this.editModule.args.requestType === "add") {
          var rowsCount = this.parent.frozenRows ? (isAddNewRow ? this.parent.frozenRows + 1 : this.parent.frozenRows) + (rows.length - 1) : rows.length - 1;
          var rowsHeight = rowsCount * this.parent.getRowHeight();
          var position = this.parent.getContent().clientHeight - rowsHeight;
          div.style.bottom = position + 9 + "px";
        }
        div.style.top = null;
      }
    };
    Edit2.prototype.checkColumnIsGrouped = function(col) {
      return !col.visible && !(this.parent.groupSettings.columns.indexOf(col.field) > -1);
    };
    Edit2.AddEditors = function(editors) {
      Edit2.editCellType = extend(Edit2.editCellType, editors);
    };
    Edit2.editCellType = {
      "dropdownedit": DropDownEditCell,
      "numericedit": NumericEditCell,
      "datepickeredit": DatePickerEditCell,
      "datetimepickeredit": DatePickerEditCell,
      "booleanedit": BooleanEditCell,
      "defaultedit": DefaultEditCell,
      "templateedit": TemplateEditCell
    };
    return Edit2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/column-chooser.js
var ColumnChooser = (
  /** @class */
  function() {
    function ColumnChooser2(parent, serviceLocator) {
      this.filterColumns = [];
      this.showColumn = [];
      this.hideColumn = [];
      this.changedColumns = [];
      this.unchangedColumns = [];
      this.isDlgOpen = false;
      this.initialOpenDlg = true;
      this.stateChangeColumns = [];
      this.changedStateColumns = [];
      this.isInitialOpen = false;
      this.isCustomizeOpenCC = false;
      this.searchOperator = "startswith";
      this.prevShowedCols = [];
      this.hideDialogFunction = this.hideDialog.bind(this);
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
      this.cBoxTrue = createCheckBox(this.parent.createElement, false, {
        checked: true,
        label: " "
      });
      this.cBoxFalse = createCheckBox(this.parent.createElement, false, {
        checked: false,
        label: " "
      });
      this.cBoxTrue.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden e-cc e-cc-chbox",
        attrs: {
          type: "checkbox"
        }
      }), this.cBoxTrue.firstChild);
      this.cBoxFalse.insertBefore(this.parent.createElement("input", {
        className: "e-chk-hidden e-cc e-cc-chbox",
        attrs: {
          "type": "checkbox"
        }
      }), this.cBoxFalse.firstChild);
      this.cBoxFalse.querySelector(".e-frame").classList.add("e-uncheck");
      if (this.parent.enableRtl) {
        addClass([this.cBoxTrue, this.cBoxFalse], ["e-rtl"]);
      }
      if (this.parent.cssClass) {
        if (this.parent.cssClass.indexOf(" ") !== -1) {
          addClass([this.cBoxTrue, this.cBoxFalse], this.parent.cssClass.split(" "));
        } else {
          addClass([this.cBoxTrue, this.cBoxFalse], [this.parent.cssClass]);
        }
      }
      if (this.parent.enableAdaptiveUI) {
        this.setFullScreenDialog();
      }
    }
    ColumnChooser2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement.querySelector("." + gridContent) && !gridElement.querySelector("." + gridHeader) || !gridElement) {
        return;
      }
      this.removeEventListener();
      this.unWireEvents();
      if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.element && !this.dlgObj.isDestroyed) {
        this.dlgObj.destroy();
      }
    };
    ColumnChooser2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isColumnChooser);
      }
    };
    ColumnChooser2.prototype.rtlUpdate = function() {
      if (!isNullOrUndefined(this.innerDiv)) {
        if (this.parent.enableRtl) {
          addClass([].slice.call(this.innerDiv.getElementsByClassName("e-checkbox-wrapper")), ["e-rtl"]);
        } else {
          removeClass([].slice.call(this.innerDiv.getElementsByClassName("e-checkbox-wrapper")), ["e-rtl"]);
        }
      }
    };
    ColumnChooser2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.add(document, "click", this.clickHandler, this);
      this.parent.on(uiUpdate, this.enableAfterRenderEle, this);
      this.parent.on(initialEnd, this.render, this);
      this.parent.addEventListener(dataBound, this.hideDialogFunction);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(rtlUpdated, this.rtlUpdate, this);
      this.parent.on(resetColumns, this.onResetColumns, this);
      if (this.parent.enableAdaptiveUI) {
        this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
        this.parent.on(renderResponsiveColumnChooserDiv, this.renderResponsiveColumnChooserDiv, this);
        this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      }
    };
    ColumnChooser2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      EventHandler.remove(document, "click", this.clickHandler);
      this.parent.off(initialEnd, this.render);
      this.parent.off(destroy, this.destroy);
      this.parent.off(uiUpdate, this.enableAfterRenderEle);
      this.parent.off(rtlUpdated, this.rtlUpdate);
      this.parent.off(resetColumns, this.onResetColumns);
      this.parent.removeEventListener(dataBound, this.hideDialogFunction);
      this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
      if (this.parent.enableAdaptiveUI) {
        this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
        this.parent.off(renderResponsiveColumnChooserDiv, this.renderResponsiveColumnChooserDiv);
        this.parent.off(renderResponsiveChangeAction, this.renderResponsiveChangeAction);
      }
    };
    ColumnChooser2.prototype.render = function() {
      this.l10n = this.serviceLocator.getService("localization");
      if (!this.parent.enableAdaptiveUI) {
        this.renderDlgContent();
      }
      this.getShowHideService = this.serviceLocator.getService("showHideService");
    };
    ColumnChooser2.prototype.clickHandler = function(e) {
      var targetElement = e.target;
      if (!this.isCustomizeOpenCC) {
        if (!isNullOrUndefined(closest(targetElement, ".e-cc-toolbar")) || !isNullOrUndefined(closest(targetElement, ".e-cc"))) {
          if (targetElement.classList.contains("e-columnchooser-btn") || targetElement.classList.contains("e-cc-toolbar")) {
            if (this.initialOpenDlg && this.dlgObj.visible || !this.isDlgOpen) {
              this.isDlgOpen = true;
              return;
            }
          } else if (targetElement.classList.contains("e-cc-cancel")) {
            targetElement.parentElement.querySelector(".e-ccsearch").value = "";
            this.columnChooserSearch("");
            this.removeCancelIcon();
            this.refreshCheckboxButton();
          }
        } else {
          if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible && !targetElement.classList.contains("e-toolbar-items")) {
            this.dlgObj.hide();
            this.clearActions();
            this.refreshCheckboxState();
            this.isDlgOpen = false;
          }
        }
        if (this.parent.detailTemplate || this.parent.childGrid) {
          this.targetdlg = e.target;
        }
      }
      if (this.isCustomizeOpenCC && e.target.classList.contains("e-cc-cancel")) {
        this.refreshCheckboxState();
      }
      if (!this.parent.enableAdaptiveUI) {
        this.rtlUpdate();
      } else {
        if (this.parent.enableRtl) {
          addClass([this.cBoxTrue, this.cBoxFalse], ["e-rtl"]);
        }
      }
    };
    ColumnChooser2.prototype.hideDialog = function() {
      if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible) {
        this.dlgObj.hide();
        this.isDlgOpen = false;
      }
    };
    ColumnChooser2.prototype.renderColumnChooser = function(x, y, target) {
      if (!this.dlgObj.visible && (this.parent.detailTemplate || this.parent.childGrid)) {
        this.hideOpenedDialog();
      }
      if (!this.dlgObj.visible) {
        var args = this.beforeOpenColumnChooserEvent();
        if (args.cancel) {
          return;
        }
        if (target) {
          this.targetdlg = target;
        }
        this.refreshCheckboxState();
        this.dlgObj.dataBind();
        this.dlgObj.element.style.maxHeight = "430px";
        var elementVisible = this.dlgObj.element.style.display;
        this.dlgObj.element.style.display = "block";
        var isSticky = this.parent.getHeaderContent().classList.contains("e-sticky");
        var toolbarItem = closest(target, ".e-toolbar-item");
        var newpos = void 0;
        if (isSticky) {
          newpos = toolbarItem.getBoundingClientRect();
          this.dlgObj.element.classList.add("e-sticky");
        } else {
          this.dlgObj.element.classList.remove("e-sticky");
          newpos = calculateRelativeBasedPosition(toolbarItem, this.dlgObj.element);
        }
        this.dlgObj.element.style.display = elementVisible;
        this.dlgObj.element.style.top = newpos.top + closest(target, ".e-cc-toolbar").getBoundingClientRect().height + "px";
        var dlgWidth = 250;
        if (!isNullOrUndefined(closest(target, ".e-bigger"))) {
          this.dlgObj.width = 258;
        }
        if (Browser.isDevice) {
          this.dlgObj.target = document.body;
          this.dlgObj.position = {
            X: "center",
            Y: "center"
          };
          this.dlgObj.refreshPosition();
          this.dlgObj.open = this.mOpenDlg.bind(this);
        } else {
          if (this.parent.enableRtl) {
            this.dlgObj.element.style.left = target.offsetLeft + "px";
          } else {
            this.dlgObj.element.style.left = newpos.left - dlgWidth + closest(target, ".e-cc-toolbar").clientWidth + 2 + "px";
          }
        }
        this.removeCancelIcon();
        this.dlgObj.show();
        this.parent.notify(columnChooserOpened, {
          dialog: this.dlgObj
        });
      } else {
        this.hideDialog();
        this.addcancelIcon();
        this.clearActions();
        this.refreshCheckboxState();
      }
      this.rtlUpdate();
    };
    ColumnChooser2.prototype.openColumnChooser = function(X, Y) {
      this.isCustomizeOpenCC = true;
      if (this.parent.enableAdaptiveUI) {
        this.renderDlgContent();
      }
      if (this.dlgObj.visible) {
        this.hideDialog();
        return;
      }
      var args = this.beforeOpenColumnChooserEvent();
      if (args.cancel) {
        return;
      }
      if (!this.isInitialOpen) {
        this.dlgObj.content = this.renderChooserList();
        this.updateIntermediateBtn();
      } else {
        this.refreshCheckboxState();
      }
      this.dlgObj.dataBind();
      this.dlgObj.position = {
        X: "center",
        Y: "center"
      };
      if (isNullOrUndefined(X)) {
        if (this.parent.enableAdaptiveUI) {
          this.dlgObj.position = {
            X: "",
            Y: ""
          };
        }
        this.dlgObj.refreshPosition();
      } else {
        this.dlgObj.element.style.top = "";
        this.dlgObj.element.style.left = "";
        this.dlgObj.element.style.top = Y + "px";
        this.dlgObj.element.style.left = X + "px";
      }
      this.dlgObj.beforeOpen = this.customDialogOpen.bind(this);
      this.dlgObj.show();
      this.isInitialOpen = true;
      this.dlgObj.beforeClose = this.customDialogClose.bind(this);
    };
    ColumnChooser2.prototype.enableAfterRenderEle = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        this.render();
      }
    };
    ColumnChooser2.prototype.keyUpHandler = function(e) {
      if (e.key === "Escape") {
        this.hideDialog();
      }
      this.setFocus(parentsUntil(e.target, "e-cclist"));
    };
    ColumnChooser2.prototype.setFocus = function(elem) {
      var prevElem = this.dlgDiv.querySelector(".e-colfocus");
      if (prevElem) {
        prevElem.classList.remove("e-colfocus");
      }
      if (elem) {
        elem.classList.add("e-colfocus");
      }
    };
    ColumnChooser2.prototype.customDialogOpen = function() {
      var searchElement = this.dlgObj.content.querySelector("input.e-ccsearch");
      EventHandler.add(searchElement, "keyup", this.columnChooserManualSearch, this);
    };
    ColumnChooser2.prototype.customDialogClose = function() {
      var searchElement = this.dlgObj.content.querySelector("input.e-ccsearch");
      EventHandler.remove(searchElement, "keyup", this.columnChooserManualSearch);
    };
    ColumnChooser2.prototype.getColumns = function() {
      var columns = this.parent.getColumns().filter(function(column) {
        return column.type !== "checkbox" && column.showInColumnChooser === true || column.type === "checkbox" && column.field !== void 0;
      });
      return columns;
    };
    ColumnChooser2.prototype.renderDlgContent = function() {
      var isAdaptive = this.parent.enableAdaptiveUI;
      this.dlgDiv = this.parent.createElement("div", {
        className: "e-ccdlg e-cc",
        id: this.parent.element.id + "_ccdlg"
      });
      if (!isAdaptive) {
        this.parent.element.appendChild(this.dlgDiv);
      }
      this.dlgObj = new Dialog({
        header: this.parent.enableAdaptiveUI ? null : this.l10n.getConstant("ChooseColumns"),
        showCloseIcon: false,
        closeOnEscape: false,
        locale: this.parent.locale,
        visible: false,
        enableRtl: this.parent.enableRtl,
        target: document.getElementById(this.parent.element.id),
        content: this.renderChooserList(),
        width: 250,
        cssClass: this.parent.cssClass ? "e-cc " + this.parent.cssClass : "e-cc",
        animationSettings: {
          effect: "None"
        }
      });
      if (!isAdaptive) {
        this.dlgObj.buttons = [{
          click: this.confirmDlgBtnClick.bind(this),
          buttonModel: {
            content: this.l10n.getConstant("OKButton"),
            isPrimary: true,
            cssClass: this.parent.cssClass ? "e-cc e-cc_okbtn " + this.parent.cssClass : "e-cc e-cc_okbtn"
          }
        }, {
          click: this.clearBtnClick.bind(this),
          buttonModel: {
            cssClass: this.parent.cssClass ? "e-flat e-cc e-cc-cnbtn " + this.parent.cssClass : "e-flat e-cc e-cc-cnbtn",
            content: this.l10n.getConstant("CancelButton")
          }
        }];
      }
      var isStringTemplate = "isStringTemplate";
      this.dlgObj["" + isStringTemplate] = true;
      this.dlgObj.appendTo(this.dlgDiv);
      if (isAdaptive) {
        var responsiveCnt = document.querySelector(".e-responsive-dialog > .e-dlg-content > .e-mainfilterdiv");
        if (responsiveCnt) {
          responsiveCnt.appendChild(this.dlgDiv);
        }
        this.dlgObj.open = this.mOpenDlg.bind(this);
        this.dlgObj.target = document.querySelector(".e-rescolumnchooser > .e-dlg-content > .e-mainfilterdiv");
      }
      this.wireEvents();
    };
    ColumnChooser2.prototype.renderChooserList = function() {
      this.mainDiv = this.parent.createElement("div", {
        className: "e-main-div e-cc"
      });
      var searchDiv = this.parent.createElement("div", {
        className: "e-cc-searchdiv e-cc e-input-group"
      });
      var ccsearchele = this.parent.createElement("input", {
        className: "e-ccsearch e-cc e-input",
        attrs: {
          placeholder: this.l10n.getConstant("Search"),
          cssClass: this.parent.cssClass
        }
      });
      var ccsearchicon = this.parent.createElement("span", {
        className: "e-ccsearch-icon e-icons e-cc e-input-group-icon",
        attrs: {
          title: this.l10n.getConstant("Search")
        }
      });
      var conDiv = this.parent.createElement("div", {
        className: "e-cc-contentdiv"
      });
      this.innerDiv = this.parent.createElement("div", {
        className: "e-innerdiv e-cc"
      });
      searchDiv.appendChild(ccsearchele);
      searchDiv.appendChild(ccsearchicon);
      this.searchBoxObj = new SearchBox(ccsearchele, this.serviceLocator);
      var innerDivContent = this.refreshCheckboxList(this.parent.getColumns());
      this.innerDiv.appendChild(innerDivContent);
      conDiv.appendChild(this.innerDiv);
      if (this.parent.enableAdaptiveUI) {
        var searchBoxDiv = this.parent.createElement("div", {
          className: "e-cc-searchBox"
        });
        searchBoxDiv.appendChild(searchDiv);
        this.mainDiv.appendChild(searchBoxDiv);
      } else {
        this.mainDiv.appendChild(searchDiv);
      }
      this.mainDiv.appendChild(conDiv);
      return this.mainDiv;
    };
    ColumnChooser2.prototype.confirmDlgBtnClick = function(args) {
      this.stateChangeColumns = [];
      this.changedStateColumns = [];
      this.changedColumns = this.changedColumns.length > 0 ? this.changedColumns : this.unchangedColumns;
      this.changedColumnState(this.changedColumns);
      var uncheckedLength = this.ulElement.querySelector(".e-uncheck") && this.ulElement.querySelectorAll(".e-uncheck:not(.e-selectall)").length;
      if (!isNullOrUndefined(args)) {
        if (uncheckedLength < this.parent.getColumns().length) {
          if (this.hideColumn.length) {
            this.columnStateChange(this.hideColumn, false);
          }
          if (this.showColumn.length) {
            this.columnStateChange(this.showColumn, true);
          }
          this.getShowHideService.setVisible(this.stateChangeColumns, this.changedStateColumns);
          this.clearActions();
          this.parent.notify(tooltipDestroy, {
            module: "edit"
          });
          if (this.parent.getCurrentViewRecords().length === 0) {
            var emptyRowCell = this.parent.element.querySelector(".e-emptyrow").querySelector("td");
            emptyRowCell.setAttribute("colSpan", this.parent.getVisibleColumns().length.toString());
          }
        }
        if (this.parent.enableAdaptiveUI && this.parent.scrollModule) {
          this.parent.scrollModule.refresh();
        }
        if (this.parent.editSettings.showAddNewRow) {
          this.parent.notify(showAddNewRowFocus, {});
        }
      }
    };
    ColumnChooser2.prototype.onResetColumns = function(e) {
      if (e.requestType === "columnstate") {
        this.resetColumnState();
        return;
      }
    };
    ColumnChooser2.prototype.renderResponsiveColumnChooserDiv = function(args) {
      if (args.action === "open") {
        this.openColumnChooser();
      } else if (args.action === "clear") {
        this.clearBtnClick();
      } else if (args.action === "confirm") {
        this.confirmDlgBtnClick(true);
      }
    };
    ColumnChooser2.prototype.resetColumnState = function() {
      this.showColumn = [];
      this.hideColumn = [];
      this.changedColumns = [];
      this.filterColumns = [];
      this.searchValue = "";
      this.hideDialog();
    };
    ColumnChooser2.prototype.changedColumnState = function(changedColumns) {
      for (var index = 0; index < changedColumns.length; index++) {
        var colUid = changedColumns[parseInt(index.toString(), 10)];
        var currentCol = this.parent.getColumnByUid(colUid);
        this.changedStateColumns.push(currentCol);
      }
    };
    ColumnChooser2.prototype.columnStateChange = function(stateColumns, state) {
      for (var index = 0; index < stateColumns.length; index++) {
        var colUid = stateColumns[parseInt(index.toString(), 10)];
        var currentCol = this.parent.getColumnByUid(colUid);
        if (currentCol.type !== "checkbox") {
          currentCol.visible = state;
        }
        this.stateChangeColumns.push(currentCol);
      }
    };
    ColumnChooser2.prototype.clearActions = function() {
      this.resetColumnState();
      this.addcancelIcon();
    };
    ColumnChooser2.prototype.clearBtnClick = function() {
      this.clearActions();
      this.parent.notify(columnChooserCancelBtnClick, {
        dialog: this.dlgObj
      });
    };
    ColumnChooser2.prototype.checkstatecolumn = function(isChecked, coluid, selectAll2) {
      if (selectAll2 === void 0) {
        selectAll2 = false;
      }
      var currentCol = this.parent.getColumnByUid(coluid);
      if (isChecked) {
        if (this.hideColumn.indexOf(coluid) !== -1) {
          this.hideColumn.splice(this.hideColumn.indexOf(coluid), 1);
        }
        if (this.showColumn.indexOf(coluid) === -1 && !(currentCol && currentCol.visible)) {
          this.showColumn.push(coluid);
        }
      } else {
        if (this.showColumn.indexOf(coluid) !== -1) {
          this.showColumn.splice(this.showColumn.indexOf(coluid), 1);
        }
        if (this.hideColumn.indexOf(coluid) === -1 && currentCol && currentCol.visible) {
          this.hideColumn.push(coluid);
        }
      }
      if (selectAll2) {
        if (!isChecked) {
          this.changedColumns.push(coluid);
        } else {
          this.unchangedColumns.push(coluid);
        }
      } else if (this.changedColumns.indexOf(coluid) !== -1) {
        this.changedColumns.splice(this.changedColumns.indexOf(coluid), 1);
      } else {
        this.changedColumns.push(coluid);
      }
    };
    ColumnChooser2.prototype.columnChooserSearch = function(searchVal) {
      var clearSearch = false;
      var okButton;
      var buttonEle = this.dlgDiv.querySelector(".e-footer-content");
      var selectedCbox = this.ulElement.querySelector(".e-check") && this.ulElement.querySelectorAll(".e-check:not(.e-selectall)").length;
      this.isInitialOpen = true;
      if (buttonEle) {
        okButton = buttonEle.querySelector(".e-btn").ej2_instances[0];
      }
      if (searchVal === "") {
        this.removeCancelIcon();
        this.filterColumns = this.getColumns();
        clearSearch = true;
      } else {
        this.filterColumns = new DataManager(this.getColumns()).executeLocal(new Query().where("headerText", this.searchOperator, searchVal, true, this.parent.columnChooserSettings.ignoreAccent));
      }
      if (this.filterColumns.length) {
        this.innerDiv.innerHTML = " ";
        this.innerDiv.classList.remove("e-ccnmdiv");
        this.innerDiv.appendChild(this.refreshCheckboxList(this.filterColumns));
        if (!clearSearch) {
          this.addcancelIcon();
          this.refreshCheckboxButton();
        } else {
          if (okButton && selectedCbox) {
            okButton.disabled = false;
          }
          if (selectedCbox && this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
            this.parent.notify(refreshCustomFilterOkBtn, {
              disabled: false
            });
          }
        }
      } else {
        var nMatchele = this.parent.createElement("span", {
          className: "e-cc e-nmatch"
        });
        nMatchele.innerHTML = this.l10n.getConstant("Matchs");
        this.innerDiv.innerHTML = " ";
        this.innerDiv.appendChild(nMatchele);
        this.innerDiv.classList.add("e-ccnmdiv");
        if (okButton) {
          okButton.disabled = true;
        }
        if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
          this.parent.notify(refreshCustomFilterOkBtn, {
            disabled: true
          });
        }
      }
      this.flag = true;
      this.stopTimer();
    };
    ColumnChooser2.prototype.wireEvents = function() {
      EventHandler.add(this.dlgObj.element, "click", this.checkBoxClickHandler, this);
      EventHandler.add(this.searchBoxObj.searchBox, "keyup", this.columnChooserManualSearch, this);
      EventHandler.add(this.dlgObj.element, "keyup", this.keyUpHandler, this);
      this.searchBoxObj.wireEvent();
    };
    ColumnChooser2.prototype.unWireEvents = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      if (this.dlgObj && this.dlgObj.element) {
        EventHandler.remove(this.dlgObj.element, "click", this.checkBoxClickHandler);
        EventHandler.remove(this.dlgObj.element, "keyup", this.keyUpHandler);
      }
      if (this.searchBoxObj) {
        EventHandler.remove(this.searchBoxObj.searchBox, "keyup", this.columnChooserManualSearch);
        this.searchBoxObj.unWireEvent();
      }
    };
    ColumnChooser2.prototype.checkBoxClickHandler = function(e) {
      var checkstate;
      var elem = parentsUntil(e.target, "e-checkbox-wrapper");
      if (elem) {
        var selectAll2 = elem.querySelector(".e-selectall");
        if (selectAll2) {
          this.updateSelectAll(!elem.querySelector(".e-check"));
        } else {
          toogleCheckbox(elem.parentElement);
        }
        elem.querySelector(".e-chk-hidden").focus();
        if (elem.querySelector(".e-check")) {
          checkstate = true;
        } else if (elem.querySelector(".e-uncheck")) {
          checkstate = false;
        }
        this.updateIntermediateBtn();
        var columnUid = parentsUntil(elem, "e-ccheck").getAttribute("uid");
        var column = this.searchValue && this.searchValue.length ? this.filterColumns : this.parent.getColumns();
        if (columnUid === this.parent.element.id + "-selectAll") {
          this.changedColumns = [];
          this.unchangedColumns = [];
          for (var i = 0; i < column.length; i++) {
            if (column[parseInt(i.toString(), 10)].showInColumnChooser) {
              this.checkstatecolumn(checkstate, column[parseInt(i.toString(), 10)].uid, true);
            }
          }
        } else {
          this.checkstatecolumn(checkstate, columnUid);
        }
        this.refreshCheckboxButton();
        this.setFocus(parentsUntil(e.target, "e-cclist"));
      }
    };
    ColumnChooser2.prototype.updateIntermediateBtn = function() {
      var cnt = this.ulElement.children.length - 1;
      var className = [];
      var elem = this.ulElement.children[0].querySelector(".e-frame");
      var selected = this.ulElement.querySelectorAll(".e-check:not(.e-selectall)").length;
      var btn;
      if (!this.parent.enableAdaptiveUI) {
        btn = this.dlgObj.btnObj[0];
        btn.disabled = false;
      } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
        this.parent.notify(refreshCustomFilterOkBtn, {
          disabled: false
        });
      }
      var inputElem = elem.parentElement.querySelector("input");
      if (cnt === selected) {
        className = ["e-check"];
        setChecked(inputElem, true);
      } else if (selected) {
        className = ["e-stop"];
        inputElem.indeterminate = true;
      } else {
        className = ["e-uncheck"];
        setChecked(inputElem, false);
        if (!this.parent.enableAdaptiveUI) {
          btn.disabled = true;
        } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
          this.parent.notify(refreshCustomFilterOkBtn, {
            disabled: true
          });
        }
      }
      if (!this.parent.enableAdaptiveUI) {
        btn.dataBind();
      }
      removeClass([elem], ["e-check", "e-stop", "e-uncheck"]);
      addClass([elem], className);
    };
    ColumnChooser2.prototype.updateSelectAll = function(checked) {
      var cBoxes = [].slice.call(this.ulElement.getElementsByClassName("e-frame"));
      for (var _i = 0, cBoxes_1 = cBoxes; _i < cBoxes_1.length; _i++) {
        var cBox = cBoxes_1[_i];
        removeAddCboxClasses(cBox, checked);
        var cBoxInput = cBox.parentElement.querySelector("input");
        if (cBox.classList.contains("e-check")) {
          setChecked(cBoxInput, true);
        } else if (cBox.classList.contains("e-uncheck")) {
          setChecked(cBoxInput, false);
        }
      }
    };
    ColumnChooser2.prototype.refreshCheckboxButton = function() {
      var visibleCols = this.parent.getVisibleColumns();
      for (var i = 0; i < visibleCols.length; i++) {
        var columnUID = visibleCols[parseInt(i.toString(), 10)].uid;
        if (this.prevShowedCols.indexOf(columnUID) === -1 && visibleCols[parseInt(i.toString(), 10)].type !== "checkbox") {
          this.prevShowedCols.push(columnUID);
        }
      }
      for (var i = 0; i < this.hideColumn.length; i++) {
        var index = this.prevShowedCols.indexOf(this.hideColumn[parseInt(i.toString(), 10)]);
        if (index !== -1) {
          this.prevShowedCols.splice(index, 1);
        }
      }
      var selected = this.showColumn.length !== 0 ? 1 : this.prevShowedCols.length;
      var btn;
      if (!this.parent.enableAdaptiveUI) {
        btn = this.dlgDiv.querySelector(".e-footer-content").querySelector(".e-btn").ej2_instances[0];
        btn.disabled = false;
      } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
        this.parent.notify(refreshCustomFilterOkBtn, {
          disabled: false
        });
      }
      var srchShowCols = [];
      var searchData = [].slice.call(this.parent.element.getElementsByClassName("e-cc-chbox"));
      for (var i = 0, itemsLen = searchData.length; i < itemsLen; i++) {
        var element = searchData[parseInt(i.toString(), 10)];
        var columnUID = parentsUntil(element, "e-ccheck").getAttribute("uid");
        srchShowCols.push(columnUID);
      }
      var hideCols = this.showColumn.filter(function(column) {
        return srchShowCols.indexOf(column) !== -1;
      });
      if (selected === 0 && hideCols.length === 0) {
        if (!this.parent.enableAdaptiveUI) {
          btn.disabled = true;
        } else if (this.parent.enableAdaptiveUI && this.responsiveDialogRenderer) {
          this.parent.notify(refreshCustomFilterOkBtn, {
            disabled: true
          });
        }
      }
      if (!this.parent.enableAdaptiveUI) {
        btn.dataBind();
      }
    };
    ColumnChooser2.prototype.refreshCheckboxList = function(gdCol) {
      this.ulElement = this.parent.createElement("ul", {
        className: "e-ccul-ele e-cc"
      });
      var selectAllValue = this.l10n.getConstant("SelectAll");
      var cclist = this.parent.createElement("li", {
        className: "e-cclist e-cc e-cc-selectall"
      });
      var selectAll2 = this.createCheckBox(selectAllValue, false, this.parent.element.id + "-selectAll");
      if (gdCol.length) {
        selectAll2.querySelector(".e-checkbox-wrapper").firstElementChild.classList.add("e-selectall");
        selectAll2.querySelector(".e-frame").classList.add("e-selectall");
        this.checkState(selectAll2.querySelector(".e-icons"), true);
        cclist.appendChild(selectAll2);
        this.ulElement.appendChild(cclist);
      }
      if (this.parent.cssClass) {
        if (this.parent.cssClass.indexOf(" ") !== -1) {
          addClass([selectAll2], this.parent.cssClass.split(" "));
        } else {
          addClass([selectAll2], [this.parent.cssClass]);
        }
      }
      for (var i = 0; i < gdCol.length; i++) {
        var columns = gdCol[parseInt(i.toString(), 10)];
        this.renderCheckbox(columns);
      }
      return this.ulElement;
    };
    ColumnChooser2.prototype.refreshCheckboxState = function() {
      this.dlgObj.element.querySelector(".e-cc.e-input").value = "";
      this.columnChooserSearch("");
      var gridObject = this.parent;
      var currentCheckBoxColls = this.dlgObj.element.querySelectorAll(".e-cc-chbox:not(.e-selectall)");
      for (var i = 0, itemLen = currentCheckBoxColls.length; i < itemLen; i++) {
        var element = currentCheckBoxColls[parseInt(i.toString(), 10)];
        var columnUID = void 0;
        if (this.parent.childGrid || this.parent.detailTemplate) {
          columnUID = parentsUntil(this.dlgObj.element.querySelectorAll(".e-cc-chbox:not(.e-selectall)")[parseInt(i.toString(), 10)], "e-ccheck").getAttribute("uid");
        } else {
          columnUID = parentsUntil(element, "e-ccheck").getAttribute("uid");
        }
        var column = gridObject.getColumnByUid(columnUID);
        var uncheck = [].slice.call(element.parentElement.getElementsByClassName("e-uncheck"));
        if (column.visible && !uncheck.length) {
          element.checked = true;
          this.checkState(element.parentElement.querySelector(".e-icons"), true);
        } else {
          element.checked = false;
          this.checkState(element.parentElement.querySelector(".e-icons"), false);
        }
      }
    };
    ColumnChooser2.prototype.checkState = function(element, state) {
      if (state) {
        classList(element, ["e-check"], ["e-uncheck"]);
      } else {
        classList(element, ["e-uncheck"], ["e-check"]);
      }
    };
    ColumnChooser2.prototype.createCheckBox = function(label, checked, uid2) {
      var cbox = checked ? this.cBoxTrue.cloneNode(true) : this.cBoxFalse.cloneNode(true);
      if (!this.parent.enableAdaptiveUI && this.parent.enableRtl && !cbox.classList.contains("e-rtl")) {
        cbox.classList.add("e-rtl");
      }
      var cboxLabel = cbox.querySelector(".e-label");
      var inputcbox = cbox.querySelector("input");
      setChecked(inputcbox, checked);
      cboxLabel.setAttribute("id", uid2 + "label");
      cboxLabel.innerHTML = label;
      inputcbox.setAttribute("aria-labelledby", cboxLabel.id);
      return createCboxWithWrap(uid2, cbox, "e-ccheck");
    };
    ColumnChooser2.prototype.renderCheckbox = function(column) {
      var cclist;
      var hideColState;
      var showColState;
      if (column.showInColumnChooser) {
        cclist = this.parent.createElement("li", {
          className: "e-cclist e-cc",
          styles: "list-style:None",
          id: "e-ccli_" + column.uid
        });
        hideColState = this.hideColumn.indexOf(column.uid) === -1 ? false : true;
        showColState = this.showColumn.indexOf(column.uid) === -1 ? false : true;
        var cccheckboxlist = this.createCheckBox(column.headerText, column.visible && !hideColState || showColState, column.uid);
        cclist.appendChild(cccheckboxlist);
        if (this.parent.cssClass) {
          if (this.parent.cssClass.indexOf(" ") !== -1) {
            addClass([cccheckboxlist], this.parent.cssClass.split(" "));
          } else {
            addClass([cccheckboxlist], [this.parent.cssClass]);
          }
        }
        this.ulElement.appendChild(cclist);
      }
      if (this.isInitialOpen) {
        this.updateIntermediateBtn();
      }
    };
    ColumnChooser2.prototype.columnChooserManualSearch = function(e) {
      this.addcancelIcon();
      this.searchValue = e.target.value;
      this.stopTimer();
      this.startTimer(e);
    };
    ColumnChooser2.prototype.startTimer = function(e) {
      var proxy = this;
      var interval = !proxy.flag && e.keyCode !== 13 ? 500 : 0;
      this.timer = window.setInterval(function() {
        proxy.columnChooserSearch(proxy.searchValue);
      }, interval);
    };
    ColumnChooser2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    ColumnChooser2.prototype.addcancelIcon = function() {
      this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").classList.add("e-cc-cancel");
      this.dlgDiv.querySelector(".e-cc-cancel").setAttribute("title", this.l10n.getConstant("Clear"));
    };
    ColumnChooser2.prototype.removeCancelIcon = function() {
      this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").classList.remove("e-cc-cancel");
      this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").setAttribute("title", this.l10n.getConstant("Search"));
    };
    ColumnChooser2.prototype.mOpenDlg = function() {
      if (Browser.isDevice) {
        this.dlgObj.element.querySelector(".e-cc-searchdiv").classList.remove("e-input-focus");
        this.dlgObj.element.querySelectorAll(".e-cc-chbox")[0].focus();
      }
      if (this.parent.enableAdaptiveUI) {
        this.dlgObj.element.querySelector(".e-cc-searchdiv").classList.add("e-input-focus");
      }
    };
    ColumnChooser2.prototype.getModuleName = function() {
      return "columnChooser";
    };
    ColumnChooser2.prototype.hideOpenedDialog = function() {
      var openCC = [].slice.call(document.getElementsByClassName("e-ccdlg")).filter(function(dlgEle) {
        return dlgEle.classList.contains("e-popup-open");
      });
      for (var i = 0, dlgLen = openCC.length; i < dlgLen; i++) {
        if (this.parent.element.id + "_ccdlg" !== openCC[parseInt(i.toString(), 10)].id || openCC[parseInt(i.toString(), 10)].classList.contains("e-dialog")) {
          openCC[parseInt(i.toString(), 10)].ej2_instances[0].hide();
        }
      }
    };
    ColumnChooser2.prototype.beforeOpenColumnChooserEvent = function() {
      var args1 = {
        requestType: "beforeOpenColumnChooser",
        element: this.parent.element,
        columns: this.getColumns(),
        cancel: false,
        searchOperator: this.parent.columnChooserSettings.operator
      };
      this.parent.trigger(beforeOpenColumnChooser, args1);
      this.searchOperator = args1.searchOperator;
      return args1;
    };
    ColumnChooser2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    ColumnChooser2.prototype.showCustomColumnChooser = function(enable) {
      this.responsiveDialogRenderer.isCustomDialog = enable;
      this.responsiveDialogRenderer.showResponsiveDialog();
    };
    return ColumnChooser2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell-style.js
var CellStyle = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyle2() {
      this.numFmtId = 0;
      this.backColor = "none";
      this.fontName = "Calibri";
      this.fontSize = 10.5;
      this.fontColor = "#000000";
      this.italic = false;
      this.bold = false;
      this.underline = false;
      this.strikeThrough = false;
      this.wrapText = false;
      this.hAlign = "general";
      this.vAlign = "bottom";
      this.indent = 0;
      this.rotation = 0;
      this.numberFormat = "GENERAL";
      this.type = "datetime";
      this.borders = new Borders();
      this.isGlobalStyle = false;
    }
    return CellStyle2;
  }()
);
var Font = (
  /** @class */
  /* @__PURE__ */ function() {
    function Font2() {
      this.sz = 10.5;
      this.name = "Calibri";
      this.u = false;
      this.b = false;
      this.i = false;
      this.color = "FF000000";
      this.strike = false;
    }
    return Font2;
  }()
);
var CellXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellXfs2() {
    }
    return CellXfs2;
  }()
);
var Alignment = (
  /** @class */
  /* @__PURE__ */ function() {
    function Alignment2() {
    }
    return Alignment2;
  }()
);
var CellStyleXfs = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyleXfs2() {
    }
    return CellStyleXfs2;
  }()
);
var CellStyles = (
  /** @class */
  /* @__PURE__ */ function() {
    function CellStyles2() {
      this.name = "Normal";
      this.xfId = 0;
    }
    return CellStyles2;
  }()
);
var NumFmt = (
  /** @class */
  /* @__PURE__ */ function() {
    function NumFmt2(id, code) {
      this.numFmtId = id;
      this.formatCode = code;
    }
    return NumFmt2;
  }()
);
var Border = (
  /** @class */
  /* @__PURE__ */ function() {
    function Border2(mLine, mColor) {
      this.lineStyle = mLine;
      this.color = mColor;
    }
    return Border2;
  }()
);
var Borders = (
  /** @class */
  /* @__PURE__ */ function() {
    function Borders2() {
      this.left = new Border("none", "#FFFFFF");
      this.right = new Border("none", "#FFFFFF");
      this.top = new Border("none", "#FFFFFF");
      this.bottom = new Border("none", "#FFFFFF");
      this.all = new Border("none", "#FFFFFF");
    }
    return Borders2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/cell.js
var __extends37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Cell2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Cell3() {
    }
    return Cell3;
  }()
);
var Cells = (
  /** @class */
  function(_super) {
    __extends37(Cells2, _super);
    function Cells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(cell) {
        var inserted = false;
        var count2 = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var c = _a[_i];
          if (c.index === cell.index) {
            _this[count2] = cell;
            inserted = true;
          }
          count2++;
        }
        if (!inserted) {
          _this.push(cell);
        }
      };
      return _this;
    }
    return Cells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/column.js
var Column2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Column3() {
    }
    return Column3;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/row.js
var __extends38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Row2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Row3() {
    }
    return Row3;
  }()
);
var Rows = (
  /** @class */
  function(_super) {
    __extends38(Rows2, _super);
    function Rows2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(row2) {
        _this.push(row2);
      };
      return _this;
    }
    return Rows2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheets.js
var __extends39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheets = (
  /** @class */
  function(_super) {
    __extends39(Worksheets2, _super);
    function Worksheets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return Worksheets2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/worksheet.js
var __extends40 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Worksheet = (
  /** @class */
  /* @__PURE__ */ function() {
    function Worksheet2() {
      this.isSummaryRowBelow = true;
      this.showGridLines = true;
      this.enableRtl = false;
    }
    return Worksheet2;
  }()
);
var HyperLink = (
  /** @class */
  /* @__PURE__ */ function() {
    function HyperLink2() {
    }
    return HyperLink2;
  }()
);
var Grouping = (
  /** @class */
  /* @__PURE__ */ function() {
    function Grouping2() {
    }
    return Grouping2;
  }()
);
var FreezePane = (
  /** @class */
  /* @__PURE__ */ function() {
    function FreezePane2() {
    }
    return FreezePane2;
  }()
);
var MergeCell = (
  /** @class */
  /* @__PURE__ */ function() {
    function MergeCell2() {
    }
    return MergeCell2;
  }()
);
var MergeCells = (
  /** @class */
  function(_super) {
    __extends40(MergeCells2, _super);
    function MergeCells2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.add = function(mergeCell) {
        var inserted = false;
        var count2 = 0;
        for (var _i = 0, _a = _this; _i < _a.length; _i++) {
          var mCell = _a[_i];
          if (MergeCells2.isIntersecting(mCell, mergeCell)) {
            var intersectingCell = new MergeCell();
            intersectingCell.x = Math.min(mCell.x, mergeCell.x);
            intersectingCell.y = Math.min(mCell.Y, mergeCell.y);
            intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);
            intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);
            intersectingCell.ref = _this[count2].ref.split(":")[0] + ":" + mergeCell.ref.split(":")[1];
            _this[count2] = intersectingCell;
            mergeCell = intersectingCell;
            inserted = true;
          }
          count2++;
        }
        if (!inserted) {
          _this.push(mergeCell);
        }
        return mergeCell;
      };
      return _this;
    }
    MergeCells2.isIntersecting = function(base, compare) {
      return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;
    };
    return MergeCells2;
  }(Array)
);

// node_modules/@syncfusion/ej2-excel-export/src/image.js
var Image = (
  /** @class */
  /* @__PURE__ */ function() {
    function Image2() {
    }
    return Image2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/save.js
var Save = (
  /** @class */
  function() {
    function Save2() {
    }
    Save2.save = function(fileName, buffer) {
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("ArgumentException: fileName cannot be undefined, null or empty");
      }
      var extension = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length);
      var mimeType = this.getMimeType(extension);
      if (mimeType !== "") {
        buffer = new Blob([buffer], {
          type: mimeType
        });
      }
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(buffer, fileName);
      } else {
        var downloadLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        this.saveInternal(fileName, extension, buffer, downloadLink, "download" in downloadLink);
      }
    };
    Save2.saveInternal = function(fileName, extension, buffer, downloadLink, hasDownloadAttribute) {
      if (hasDownloadAttribute) {
        downloadLink.download = fileName;
        var dataUrl_1 = window.URL.createObjectURL(buffer);
        downloadLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        downloadLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
          dataUrl_1 = void 0;
        });
      } else {
        if (extension !== "docx" && extension !== "xlsx") {
          var url = window.URL.createObjectURL(buffer);
          var isPopupBlocked = window.open(url, "_blank");
          if (!isPopupBlocked) {
            window.location.href = url;
          }
        } else {
          var reader_1 = new FileReader();
          reader_1.onloadend = function() {
            var isPopupBlocked2 = window.open(reader_1.result, "_blank");
            if (!isPopupBlocked2) {
              window.location.href = reader_1.result;
            }
          };
          reader_1.readAsDataURL(buffer);
        }
      }
    };
    Save2.getMimeType = function(extension) {
      var mimeType = "";
      switch (extension) {
        case "html":
          mimeType = "text/html";
          break;
        case "pdf":
          mimeType = "application/pdf";
          break;
        case "docx":
          mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
          break;
        case "xlsx":
          mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
          break;
        case "txt":
          mimeType = "text/plain";
          break;
      }
      return mimeType;
    };
    return Save2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/xml-writer.js
var XmlWriter = (
  /** @class */
  function() {
    function XmlWriter2() {
      this.contentPos = 0;
      this.bufferText = "";
      this.bufferBlob = new Blob([""], {
        type: "text/plain"
      });
      this.currentState = "Initial";
      this.namespaceStack = [];
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[0].set("xmlns", "http://www.w3.org/2000/xmlns/", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[1].set("xml", "http://www.w3.org/XML/1998/namespace", "Special");
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[2].set("", "", "Implied");
      this.elementStack = [];
      this.elementStack.push(new XmlElement());
      this.elementStack[0].set("", "", "", this.namespaceStack.length - 1);
      this.attributeStack = [];
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(XmlWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the {XmlWriter} as Blob.
       * @returns {Blob}
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    XmlWriter2.prototype.writeProcessingInstruction = function(name, text) {
      if (name === void 0 || name === null || name.length === 0) {
        throw new Error("ArgumentException: name should not be undefined, null or empty");
      }
      this.checkName(name);
      if (text === void 0 || text === null) {
        text = "";
      }
      if (name.length === 3 && name === "xml") {
        if (this.currentState !== "Initial") {
          throw new Error("InvalidArgumentException: Cannot write XML declaration.WriteStartDocument method has already written it");
        }
      }
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      } else {
        this.writeStartDocument();
        this.writeProcessingInstructionInternal(name, text);
      }
    };
    XmlWriter2.prototype.writeStartDocument = function(standalone) {
      if (this.currentState !== "Initial" || this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.currentState = "StartDocument";
      this.rawText('<?xml version="1.0" encoding="utf-8');
      if (standalone !== null && standalone !== void 0) {
        this.rawText('" standalone="');
        this.rawText(standalone ? "yes" : "no");
      }
      this.rawText('"?>');
    };
    XmlWriter2.prototype.writeEndDocument = function() {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      this.currentState = "EndDocument";
      this.flush();
    };
    XmlWriter2.prototype.writeStartElement = function(prefix, localName, namespace) {
      if (this.bufferBlob === void 0) {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      if (localName === void 0 || localName === null || localName.length === 0) {
        throw new Error("ArgumentException: localName cannot be undefined, null or empty");
      }
      this.checkName(localName);
      if (this.currentState === "Initial") {
        this.writeStartDocument();
      }
      if (this.currentState === "StartElement") {
        this.startElementContent();
      }
      this.currentState = "StartElement";
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          prefix = this.lookupPrefix(namespace);
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      } else if (prefix.length > 0) {
        if (namespace === void 0 || namespace === null) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null || namespace !== void 0 && namespace.length === 0) {
          throw new Error("ArgumentException: Cannot use a prefix with an empty namespace");
        }
      }
      if (namespace === void 0 || namespace === null) {
        namespace = this.lookupNamespace(prefix);
      }
      this.writeStartElementInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndElement = function() {
      if (this.currentState === "StartElement") {
        this.startElementContent();
        this.currentState = "ElementContent";
      } else if (this.currentState === "ElementContent") {
        this.currentState = "ElementContent";
      }
      this.currentState = "EndElement";
      var top = this.elementStack.length - 1;
      this.writeEndElementInternal(this.elementStack[top].prefix, this.elementStack[top].localName);
      this.namespaceStack.splice(this.elementStack[top].previousTop + 1);
      this.elementStack.splice(top);
      if (this.bufferText.length > 10240) {
        this.flush();
      }
    };
    XmlWriter2.prototype.writeElementString = function(prefix, localName, namespace, value) {
      this.writeStartElement(prefix, localName, namespace);
      if (value !== void 0 && value !== null && value.length !== 0) {
        this.writeString(value);
      }
      this.writeEndElement();
    };
    XmlWriter2.prototype.writeAttributeString = function(prefix, localName, namespace, value) {
      this.writeStartAttribute(prefix, localName, namespace, value);
      this.writeStringInternal(value, true);
      this.writeEndAttribute();
    };
    XmlWriter2.prototype.writeString = function(text) {
      this.writeInternal(text, false);
    };
    XmlWriter2.prototype.writeRaw = function(text) {
      this.writeInternal(text, true);
    };
    XmlWriter2.prototype.writeInternal = function(text, isRawString) {
      if (text === void 0 || text === null) {
        return;
      } else {
        if (this.currentState !== "StartElement" && this.currentState !== "ElementContent") {
          throw new Error("InvalidOperationException: Wrong Token");
        }
        if (this.currentState === "StartElement") {
          this.startElementContent();
        }
        this.currentState = "ElementContent";
        if (isRawString) {
          this.rawText(text);
        } else {
          this.writeStringInternal(text, false);
        }
      }
    };
    XmlWriter2.prototype.save = function(fileName) {
      while (this.elementStack.length - 1 > 0) {
        this.writeEndElement();
      }
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    XmlWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      for (var i = 0; i < this.namespaceStack.length; i++) {
        this.namespaceStack[i].destroy();
      }
      this.namespaceStack = [];
      for (var i = 0; i < this.elementStack.length; i++) {
        this.elementStack[i].destroy();
      }
      this.elementStack = [];
      this.bufferText = "";
      this.contentPos = 0;
    };
    XmlWriter2.prototype.flush = function() {
      if (this.bufferBlob === void 0) {
        return;
      }
      this.bufferBlob = new Blob([this.bufferBlob, this.bufferText], {
        type: "text/plain"
      });
      this.bufferText = "";
    };
    XmlWriter2.prototype.writeProcessingInstructionInternal = function(name, text) {
      this.bufferText += "<?";
      this.rawText(name);
      if (text.length > 0) {
        this.bufferText += " ";
        text = text.replace(/\?\>/g, "? >");
        this.bufferText += text;
      }
      this.bufferText += "?";
      this.bufferText += ">";
    };
    XmlWriter2.prototype.writeStartAttribute = function(prefix, localName, namespace, value) {
      if (localName === void 0 || localName === null || localName.length === 0) {
        if (prefix === "xmlns") {
          localName = "xmlns";
          prefix = "";
        } else {
          throw new Error("ArgumentException: localName cannot be undefined, null or empty");
        }
      }
      if (this.currentState !== "StartElement") {
        throw new Error("InvalidOperationException: Wrong Token");
      }
      this.checkName(localName);
      this.writeStartAttributePrefixAndNameSpace(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributePrefixAndNameSpace = function(prefix, localName, namespace, value) {
      if (prefix === void 0 || prefix === null) {
        if (namespace !== void 0 && namespace !== null) {
          if (!(localName === "xmlns" && namespace === "http://www.w3.org/2000/xmlns/")) {
            prefix = this.lookupPrefix(namespace);
          }
        }
        if (prefix === void 0 || prefix === null) {
          prefix = "";
        }
      }
      if (namespace === void 0 || namespace === null) {
        if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
          namespace = this.lookupNamespace(prefix);
        }
        if (namespace === void 0 || namespace === null) {
          namespace = "";
        }
      }
      this.writeStartAttributeSpecialAttribute(prefix, localName, namespace, value);
    };
    XmlWriter2.prototype.writeStartAttributeSpecialAttribute = function(prefix, localName, namespace, value) {
      if (prefix.length === 0) {
        if (localName[0] === "x" && localName === "xmlns") {
          this.skipPushAndWrite(prefix, localName, namespace);
          this.pushNamespaceExplicit("", value);
          return;
        } else if (namespace.length > 0) {
          prefix = this.lookupPrefix(namespace);
        }
      } else {
        if (prefix[0] === "x") {
          if (prefix === "xmlns") {
            this.skipPushAndWrite(prefix, localName, namespace);
            this.pushNamespaceExplicit(localName, value);
            return;
          } else if (prefix === "xml") {
            if (localName === "space" || localName === "lang") {
              this.skipPushAndWrite(prefix, localName, namespace);
              return;
            }
          }
        }
        if (namespace.length === 0) {
          prefix = "";
        }
      }
      if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
        this.pushNamespaceImplicit(prefix, namespace);
      }
      this.skipPushAndWrite(prefix, localName, namespace);
    };
    XmlWriter2.prototype.writeEndAttribute = function() {
      this.currentState = "StartElement";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartElementInternal = function(prefix, localName, namespace) {
      this.bufferText += "<";
      if (prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      var top = this.elementStack.length;
      this.elementStack.push(new XmlElement());
      this.elementStack[top].set(prefix, localName, namespace, this.namespaceStack.length - 1);
      this.pushNamespaceImplicit(prefix, namespace);
      for (var i = 0; i < this.attributeStack.length; i++) {
        this.attributeStack[i].destroy();
      }
      this.attributeStack = [];
    };
    XmlWriter2.prototype.writeEndElementInternal = function(prefix, localName) {
      if (this.contentPos !== this.bufferText.length + 1) {
        this.bufferText += "</";
        if (prefix !== void 0 && prefix !== null && prefix.length !== 0) {
          this.rawText(prefix);
          this.bufferText += ":";
        }
        this.rawText(localName);
        this.bufferText += ">";
      } else {
        this.bufferText = this.bufferText.substring(0, this.bufferText.length - 1);
        this.bufferText += " />";
      }
    };
    XmlWriter2.prototype.writeStartAttributeInternal = function(prefix, localName, namespaceName) {
      this.bufferText += " ";
      if (prefix !== void 0 && prefix !== null && prefix.length > 0) {
        this.rawText(prefix);
        this.bufferText += ":";
      }
      this.rawText(localName);
      this.bufferText += "=";
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeNamespaceDeclaration = function(prefix, namespaceUri) {
      this.writeStartNamespaceDeclaration(prefix);
      this.writeStringInternal(namespaceUri, true);
      this.bufferText += '"';
    };
    XmlWriter2.prototype.writeStartNamespaceDeclaration = function(prefix) {
      if (prefix === void 0 || prefix === null || prefix.length === 0) {
        this.rawText(' xmlns="');
      } else {
        this.rawText(" xmlns:");
        this.rawText(prefix);
        this.bufferText += "=";
        this.bufferText += '"';
      }
    };
    XmlWriter2.prototype.writeStringInternal = function(text, inAttributeValue) {
      if (text === null || text === void 0) {
        text = "";
      }
      var tempText = "";
      text = text.replace(/\&/g, "&amp;");
      text = text.replace(/\</g, "&lt;");
      text = text.replace(/\>/g, "&gt;");
      if (inAttributeValue) {
        text = text.replace(/\"/g, "&quot;");
      }
      this.bufferText += text;
      if (!inAttributeValue) {
        this.contentPos = 0;
      }
    };
    XmlWriter2.prototype.startElementContent = function() {
      var start = this.elementStack[this.elementStack.length - 1].previousTop;
      for (var i = this.namespaceStack.length - 1; i > start; i--) {
        if (this.namespaceStack[i].kind === "NeedToWrite") {
          this.writeNamespaceDeclaration(this.namespaceStack[i].prefix, this.namespaceStack[i].namespaceUri);
        }
      }
      this.bufferText += ">";
      this.contentPos = this.bufferText.length + 1;
    };
    XmlWriter2.prototype.rawText = function(text) {
      this.bufferText += text;
    };
    XmlWriter2.prototype.addNamespace = function(prefix, ns, kind) {
      var top = this.namespaceStack.length;
      this.namespaceStack.push(new Namespace());
      this.namespaceStack[top].set(prefix, ns, kind);
    };
    XmlWriter2.prototype.lookupPrefix = function(namespace) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].namespaceUri === namespace) {
          return this.namespaceStack[i].prefix;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespace = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return this.namespaceStack[i].namespaceUri;
        }
      }
      return void 0;
    };
    XmlWriter2.prototype.lookupNamespaceIndex = function(prefix) {
      for (var i = this.namespaceStack.length - 1; i >= 0; i--) {
        if (this.namespaceStack[i].prefix === prefix) {
          return i;
        }
      }
      return -1;
    };
    XmlWriter2.prototype.pushNamespaceImplicit = function(prefix, ns) {
      var kind;
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          if (this.namespaceStack[existingNsIndex].namespaceUri !== ns) {
            throw new Error("XmlException namespace Uri needs to be the same as the one that is already declared");
          }
          return;
        } else {
          if (this.namespaceStack[existingNsIndex].kind === "Special") {
            if (prefix === "xml") {
              if (ns !== this.namespaceStack[existingNsIndex].namespaceUri) {
                throw new Error("InvalidArgumentException: Xml String");
              } else {
                kind = "Implied";
              }
            } else {
              throw new Error('InvalidArgumentException: Prefix "xmlns" is reserved for use by XML.');
            }
          } else {
            kind = this.namespaceStack[existingNsIndex].namespaceUri === ns ? "Implied" : "NeedToWrite";
          }
        }
      } else {
        if (ns === "http://www.w3.org/XML/1998/namespace" && prefix !== "xml" || ns === "http://www.w3.org/2000/xmlns/" && prefix !== "xmlns") {
          throw new Error("InvalidArgumentException");
        }
        kind = "NeedToWrite";
      }
      this.addNamespace(prefix, ns, kind);
    };
    XmlWriter2.prototype.pushNamespaceExplicit = function(prefix, ns) {
      var existingNsIndex = this.lookupNamespaceIndex(prefix);
      if (existingNsIndex !== -1) {
        if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
          this.namespaceStack[existingNsIndex].kind = "Written";
          return;
        }
      }
      this.addNamespace(prefix, ns, "Written");
      return;
    };
    XmlWriter2.prototype.addAttribute = function(prefix, localName, namespaceName) {
      var top = this.attributeStack.length;
      this.attributeStack.push(new XmlAttribute());
      this.attributeStack[top].set(prefix, localName, namespaceName);
      for (var i = 0; i < top; i++) {
        if (this.attributeStack[i].isDuplicate(prefix, localName, namespaceName)) {
          throw new Error("XmlException: duplicate attribute name");
        }
      }
    };
    XmlWriter2.prototype.skipPushAndWrite = function(prefix, localName, namespace) {
      this.addAttribute(prefix, localName, namespace);
      this.writeStartAttributeInternal(prefix, localName, namespace);
    };
    XmlWriter2.prototype.checkName = function(text) {
      var format = /[ !@#$%^&*()+\=\[\]{};':"\\|,<>\/?]/;
      if (format.test(text)) {
        throw new Error("InvalidArgumentException: invalid name character");
      }
    };
    return XmlWriter2;
  }()
);
var Namespace = (
  /** @class */
  function() {
    function Namespace2() {
    }
    Namespace2.prototype.set = function(prefix, namespaceUri, kind) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.kind = kind;
    };
    Namespace2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.kind = void 0;
    };
    return Namespace2;
  }()
);
var XmlElement = (
  /** @class */
  function() {
    function XmlElement2() {
    }
    XmlElement2.prototype.set = function(prefix, localName, namespaceUri, previousTop) {
      this.previousTop = previousTop;
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlElement2.prototype.destroy = function() {
      this.previousTop = void 0;
      this.prefix = void 0;
      this.localName = void 0;
      this.namespaceUri = void 0;
    };
    return XmlElement2;
  }()
);
var XmlAttribute = (
  /** @class */
  function() {
    function XmlAttribute2() {
    }
    XmlAttribute2.prototype.set = function(prefix, localName, namespaceUri) {
      this.prefix = prefix;
      this.namespaceUri = namespaceUri;
      this.localName = localName;
    };
    XmlAttribute2.prototype.isDuplicate = function(prefix, localName, namespaceUri) {
      return this.localName === localName && (this.prefix === prefix || this.namespaceUri === namespaceUri);
    };
    XmlAttribute2.prototype.destroy = function() {
      this.prefix = void 0;
      this.namespaceUri = void 0;
      this.localName = void 0;
    };
    return XmlAttribute2;
  }()
);

// node_modules/@syncfusion/ej2-file-utils/src/encoding.js
var Encoding = (
  /** @class */
  function() {
    function Encoding2(includeBom) {
      this.emitBOM = true;
      this.encodingType = "Ansi";
      this.initBOM(includeBom);
    }
    Object.defineProperty(Encoding2.prototype, "includeBom", {
      /**
       * Gets a value indicating whether to write a Unicode byte order mark
       * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false
       */
      get: function() {
        return this.emitBOM;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Encoding2.prototype, "type", {
      /**
       * Gets the encoding type.
       * @returns EncodingType
       */
      get: function() {
        return this.encodingType;
      },
      /**
       * Sets the encoding type.
       * @param  {EncodingType} value
       */
      set: function(value) {
        this.encodingType = value;
      },
      enumerable: true,
      configurable: true
    });
    Encoding2.prototype.initBOM = function(includeBom) {
      if (includeBom === void 0 || includeBom === null) {
        this.emitBOM = true;
      } else {
        this.emitBOM = includeBom;
      }
    };
    Encoding2.prototype.getByteCount = function(chars) {
      var byteCount = 0;
      validateNullOrUndefined(chars, "string");
      if (chars === "") {
        var byte = this.utf8Len(chars.charCodeAt(0));
        return byte;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      return this.getByteCountInternal(chars, 0, chars.length);
    };
    Encoding2.prototype.utf8Len = function(codePoint) {
      var bytes = codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : codePoint <= 2097151 ? 4 : 0;
      return bytes;
    };
    Encoding2.prototype.isHighSurrogate = function(codeUnit) {
      return codeUnit >= 55296 && codeUnit <= 56319;
    };
    Encoding2.prototype.toCodepoint = function(highCodeUnit, lowCodeUnit) {
      highCodeUnit = (1023 & highCodeUnit) << 10;
      var u = highCodeUnit | 1023 & lowCodeUnit;
      return u + 65536;
    };
    Encoding2.prototype.getByteCountInternal = function(chars, charIndex, charCount) {
      var byteCount = 0;
      if (this.encodingType === "Utf8" || this.encodingType === "Unicode") {
        var isUtf8 = this.encodingType === "Utf8";
        for (var i = 0; i < charCount; i++) {
          var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);
          if (this.isHighSurrogate(charCode)) {
            if (isUtf8) {
              var high = charCode;
              var low = chars.charCodeAt(++charIndex);
              byteCount += this.utf8Len(this.toCodepoint(high, low));
            } else {
              byteCount += 4;
              ++i;
            }
          } else {
            if (isUtf8) {
              byteCount += this.utf8Len(charCode);
            } else {
              byteCount += 2;
            }
          }
          if (isUtf8) {
            charIndex++;
          }
        }
        return byteCount;
      } else {
        byteCount = charCount;
        return byteCount;
      }
    };
    Encoding2.prototype.getBytes = function(s, charIndex, charCount) {
      validateNullOrUndefined(s, "string");
      validateNullOrUndefined(charIndex, "charIndex");
      validateNullOrUndefined(charCount, "charCount");
      if (charIndex < 0 || charCount < 0) {
        throw new RangeError("Argument Out Of Range Exception: charIndex or charCount is less than zero");
      }
      if (s.length - charIndex < charCount) {
        throw new RangeError("Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string");
      }
      var bytes;
      if (s === "") {
        bytes = new ArrayBuffer(0);
        return bytes;
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var byteCount = this.getByteCountInternal(s, charIndex, charCount);
      switch (this.type) {
        case "Utf8":
          bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);
          return bytes;
        case "Unicode":
          bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);
          return bytes;
        default:
          bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);
          return bytes;
      }
    };
    Encoding2.prototype.getString = function(bytes, index, count2) {
      validateNullOrUndefined(bytes, "bytes");
      validateNullOrUndefined(index, "index");
      validateNullOrUndefined(count2, "count");
      if (index < 0 || count2 < 0) {
        throw new RangeError("Argument Out Of Range Exception: index or count is less than zero");
      }
      if (bytes.byteLength - index < count2) {
        throw new RangeError("Argument Out Of Range Exception: index and count do not denote a valid range in bytes");
      }
      if (bytes.byteLength === 0 || count2 === 0) {
        return "";
      }
      if (this.type === null || this.type === void 0) {
        this.type = "Ansi";
      }
      var out = "";
      var byteCal = new Uint8Array(bytes);
      switch (this.type) {
        case "Utf8":
          var s = this.getStringOfUtf8Encoding(byteCal, index, count2);
          return s;
        case "Unicode":
          var byteUnicode = new Uint16Array(bytes);
          out = this.getStringofUnicodeEncoding(byteUnicode, index, count2);
          return out;
        default:
          var j = index;
          for (var i = 0; i < count2; i++) {
            var c = byteCal[j];
            out += String.fromCharCode(c);
            j++;
          }
          return out;
      }
    };
    Encoding2.prototype.getBytesOfAnsiEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var bufview = new Uint8Array(bytes);
      var k = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(charIndex++);
        if (charcode < 2048) {
          bufview[k] = charcode;
        } else {
          bufview[k] = 63;
        }
        k++;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUtf8Encoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint = new Uint8Array(bytes);
      var index = charIndex;
      var j = 0;
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(index);
        if (charcode <= 127) {
          uint[j] = charcode;
        } else if (charcode < 2048) {
          uint[j] = 192 | charcode >> 6;
          uint[++j] = 128 | charcode & 63;
        } else if (charcode < 55296 || charcode >= 57344) {
          uint[j] = 224 | charcode >> 12;
          uint[++j] = 128 | charcode >> 6 & 63;
          uint[++j] = 128 | charcode & 63;
        } else {
          uint[j] = 239;
          uint[++j] = 191;
          uint[++j] = 189;
        }
        ++j;
        ++index;
      }
      return bytes;
    };
    Encoding2.prototype.getBytesOfUnicodeEncoding = function(byteCount, s, charIndex, charCount) {
      var bytes = new ArrayBuffer(byteCount);
      var uint16 = new Uint16Array(bytes);
      for (var i = 0; i < charCount; i++) {
        var charcode = s.charCodeAt(i);
        uint16[i] = charcode;
      }
      return bytes;
    };
    Encoding2.prototype.getStringOfUtf8Encoding = function(byteCal, index, count2) {
      var j = 0;
      var i = index;
      var s = "";
      for (j; j < count2; j++) {
        var c = byteCal[i++];
        while (i > byteCal.length) {
          return s;
        }
        if (c > 127) {
          if (c > 191 && c < 224 && i < count2) {
            c = (c & 31) << 6 | byteCal[i] & 63;
          } else if (c > 223 && c < 240 && i < byteCal.byteLength) {
            c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;
          } else if (c > 239 && c < 248 && i < byteCal.byteLength) {
            c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;
          }
          ++i;
        }
        s += String.fromCharCode(c);
      }
      return s;
    };
    Encoding2.prototype.getStringofUnicodeEncoding = function(byteUni, index, count2) {
      if (count2 > byteUni.length) {
        throw new RangeError("ArgumentOutOfRange_Count");
      }
      var byte16 = new Uint16Array(count2);
      var out = "";
      for (var i = 0; i < count2 && i < byteUni.length; i++) {
        byte16[i] = byteUni[index++];
      }
      out = String.fromCharCode.apply(null, byte16);
      return out;
    };
    Encoding2.prototype.destroy = function() {
      this.emitBOM = void 0;
      this.encodingType = void 0;
    };
    return Encoding2;
  }()
);
function validateNullOrUndefined(value, message) {
  if (value === null || value === void 0) {
    throw new Error("ArgumentException: " + message + " cannot be null or undefined");
  }
}

// node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js
var StreamWriter = (
  /** @class */
  function() {
    function StreamWriter2(encoding) {
      this.bufferBlob = new Blob([""]);
      this.bufferText = "";
      this.init(encoding);
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(StreamWriter2.prototype, "buffer", {
      /**
       * Gets the content written to the StreamWriter as Blob.
       * @returns Blob
       */
      get: function() {
        this.flush();
        return this.bufferBlob;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StreamWriter2.prototype, "encoding", {
      /**
       * Gets the encoding.
       * @returns Encoding
       */
      get: function() {
        return this.enc;
      },
      enumerable: true,
      configurable: true
    });
    StreamWriter2.prototype.init = function(encoding) {
      if (encoding === null || encoding === void 0) {
        this.enc = new Encoding(false);
        this.enc.type = "Utf8";
      } else {
        this.enc = encoding;
        this.setBomByte();
      }
    };
    StreamWriter2.prototype.setBomByte = function() {
      if (this.encoding.includeBom) {
        switch (this.encoding.type) {
          case "Unicode":
            var arrayUnicode = new ArrayBuffer(2);
            var uint8 = new Uint8Array(arrayUnicode);
            uint8[0] = 255;
            uint8[1] = 254;
            this.bufferBlob = new Blob([arrayUnicode]);
            break;
          case "Utf8":
            var arrayUtf8 = new ArrayBuffer(3);
            var utf8 = new Uint8Array(arrayUtf8);
            utf8[0] = 239;
            utf8[1] = 187;
            utf8[2] = 191;
            this.bufferBlob = new Blob([arrayUtf8]);
            break;
          default:
            this.bufferBlob = new Blob([""]);
            break;
        }
      }
    };
    StreamWriter2.prototype.save = function(fileName) {
      if (this.bufferText !== "") {
        this.flush();
      }
      Save.save(fileName, this.buffer);
    };
    StreamWriter2.prototype.write = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText += value;
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.flush = function() {
      if (this.bufferText === void 0 || this.bufferText === null || this.bufferText.length === 0) {
        return;
      }
      var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);
      this.bufferText = "";
      this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);
    };
    StreamWriter2.prototype.writeLine = function(value) {
      if (this.encoding === void 0) {
        throw new Error("Object Disposed Exception: current writer is disposed");
      }
      validateNullOrUndefined(value, "string");
      this.bufferText = this.bufferText + value + "\r\n";
      if (this.bufferText.length >= 10240) {
        this.flush();
      }
    };
    StreamWriter2.prototype.destroy = function() {
      this.bufferBlob = void 0;
      this.bufferText = void 0;
      if (this.enc instanceof Encoding) {
        this.enc.destroy();
      }
      this.enc = void 0;
    };
    return StreamWriter2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/utils.js
var Utils = (
  /** @class */
  function() {
    function Utils2() {
    }
    Utils2.bitReverse = function(value) {
      return Utils2.reverseBits[value & 15] << 12 | Utils2.reverseBits[value >> 4 & 15] << 8 | Utils2.reverseBits[value >> 8 & 15] << 4 | Utils2.reverseBits[value >> 12];
    };
    Utils2.bitConverterToInt32 = function(value, index) {
      return value[index] | value[index + 1] << 8 | value[index + 2] << 16 | value[index + 3] << 24;
    };
    Utils2.bitConverterToInt16 = function(value, index) {
      return value[index] | value[index + 1] << 8;
    };
    Utils2.bitConverterToUInt32 = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterToUInt16 = function(value, index) {
      var uint = new Uint16Array(1);
      uint[0] = value[index] | value[index + 1] << 8;
      return uint[0];
    };
    Utils2.bitConverterUintToInt32 = function(value) {
      var uint = new Int32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToUint = function(value) {
      var uint = new Uint32Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.bitConverterInt32ToInt16 = function(value) {
      var uint = new Int16Array(1);
      uint[0] = value;
      return uint[0];
    };
    Utils2.byteToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.byteIntToString = function(value) {
      var str = "";
      for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
      }
      return str;
    };
    Utils2.arrayCopy = function(source, sourceIndex, destination, destinationIndex, dataToCopy) {
      var temp = new Uint8Array(source.buffer, sourceIndex);
      var data = temp.subarray(0, dataToCopy);
      destination.set(data, destinationIndex);
    };
    Utils2.mergeArray = function(arrayOne, arrayTwo) {
      var mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);
      mergedArray.set(arrayOne);
      mergedArray.set(arrayTwo, arrayOne.length);
      return mergedArray;
    };
    Utils2.encodedString = function(input2) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var chr1;
      var chr2;
      var chr3;
      var encode1;
      var encode2;
      var encode3;
      var encode4;
      var count2 = 0;
      var resultIndex = 0;
      input2 = input2.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var totalLength = input2.length * 3 / 4;
      if (input2.charAt(input2.length - 1) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (input2.charAt(input2.length - 2) === keyStr.charAt(64)) {
        totalLength--;
      }
      if (totalLength % 1 !== 0) {
        throw new Error("Invalid base64 input, bad content length.");
      }
      var output = new Uint8Array(totalLength | 0);
      while (count2 < input2.length) {
        encode1 = keyStr.indexOf(input2.charAt(count2++));
        encode2 = keyStr.indexOf(input2.charAt(count2++));
        encode3 = keyStr.indexOf(input2.charAt(count2++));
        encode4 = keyStr.indexOf(input2.charAt(count2++));
        chr1 = encode1 << 2 | encode2 >> 4;
        chr2 = (encode2 & 15) << 4 | encode3 >> 2;
        chr3 = (encode3 & 3) << 6 | encode4;
        output[resultIndex++] = chr1;
        if (encode3 !== 64) {
          output[resultIndex++] = chr2;
        }
        if (encode4 !== 64) {
          output[resultIndex++] = chr3;
        }
      }
      return output;
    };
    Utils2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    Utils2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return Utils2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/zip-archive.js
var CRC32TABLE = [];
var INT_SIZE = 4;
var SHORT_SIZE = 2;
var CentralDirectoryEndSignature = 101010256;
var CentralDirSizeOffset = 12;
var CentralHeaderSignature = 33639248;
var BufferSize = 4096;
var ZipArchive = (
  /** @class */
  function() {
    function ZipArchive2() {
      if (CRC32TABLE.length === 0) {
        ZipArchive2.initCrc32Table();
      }
      this.files = [];
      this.level = "Normal";
      Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
    }
    Object.defineProperty(ZipArchive2.prototype, "items", {
      get: function() {
        return this.files;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "compressionLevel", {
      /**
       * gets compression level
       */
      get: function() {
        return this.level;
      },
      /**
       * sets compression level
       */
      set: function(level) {
        this.level = level;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchive2.prototype, "length", {
      /**
       * gets items count
       */
      get: function() {
        if (this.files === void 0) {
          return 0;
        }
        return this.files.length;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchive2.prototype.addItem = function(item) {
      if (item === null || item === void 0) {
        throw new Error("ArgumentException: item cannot be null or undefined");
      }
      for (var i = 0; i < this.files.length; i++) {
        var file = this.files[i];
        if (file instanceof ZipArchiveItem) {
          if (file.name === item.name) {
            throw new Error("item with same name already exist");
          }
        }
      }
      this.files.push(item);
    };
    ZipArchive2.prototype.addDirectory = function(directoryName) {
      if (directoryName === null || directoryName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (directoryName.length === 0) {
        throw new Error("ArgumentException: string cannot be empty");
      }
      if (directoryName.slice(-1) !== "/") {
        directoryName += "/";
      }
      if (this.files.indexOf(directoryName) !== -1) {
        throw new Error("item with same name already exist");
      }
      this.files.push(directoryName);
    };
    ZipArchive2.prototype.getItem = function(index) {
      if (index >= 0 && index < this.files.length) {
        return this.files[index];
      }
      return void 0;
    };
    ZipArchive2.prototype.contains = function(item) {
      return this.files.indexOf(item) !== -1 ? true : false;
    };
    ZipArchive2.prototype.open = function(base64String) {
      var zipArchive = this;
      var zipByteArray = Utils.encodedString(base64String);
      if (zipByteArray.length == 0) throw new DOMException("stream");
      var stream = new Stream(zipByteArray);
      var lCentralDirEndPosition = ZipArchive2.findValueFromEnd(stream, CentralDirectoryEndSignature, 65557);
      if (lCentralDirEndPosition < 0) throw new DOMException("Can't locate end of central directory record. Possible wrong file format or archive is corrupt.");
      stream.position = lCentralDirEndPosition + CentralDirSizeOffset;
      var iCentralDirSize = ZipArchive2.ReadInt32(stream);
      var lCentralDirPosition = lCentralDirEndPosition - iCentralDirSize;
      stream.position = lCentralDirPosition;
      this.readCentralDirectoryDataAndExtractItems(stream);
    };
    ZipArchive2.prototype.readCentralDirectoryDataAndExtractItems = function(stream) {
      if (stream == null) throw new DOMException("stream");
      var itemHelper;
      while (ZipArchive2.ReadInt32(stream) == CentralHeaderSignature) {
        itemHelper = new ZipArchiveItemHelper();
        itemHelper.readCentralDirectoryData(stream);
        itemHelper;
      }
      itemHelper.readData(stream, itemHelper.checkCrc);
      itemHelper.decompressData();
      this.files.push(new ZipArchiveItem(itemHelper.unCompressedStream.buffer, itemHelper.name));
    };
    ZipArchive2.prototype.save = function(fileName) {
      if (fileName === null || fileName === void 0 || fileName.length === 0) {
        throw new Error("ArgumentException: fileName cannot be null or undefined");
      }
      if (this.files.length === 0) {
        throw new Error("InvalidOperation");
      }
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal(fileName, false).then(function() {
          resolve(zipArchive);
        });
      });
    };
    ZipArchive2.prototype.saveAsBlob = function() {
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        zipArchive.saveInternal("", true).then(function(blob) {
          resolve(blob);
        });
      });
    };
    ZipArchive2.prototype.saveInternal = function(fileName, skipFileSave) {
      var _this = this;
      var zipArchive = this;
      var promise;
      return promise = new Promise(function(resolve, reject) {
        var zipData = [];
        var dirLength = 0;
        for (var i = 0; i < zipArchive.files.length; i++) {
          var compressedObject = _this.getCompressedData(_this.files[i]);
          compressedObject.then(function(data) {
            dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);
            if (zipData.length === zipArchive.files.length) {
              var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);
              resolve(blob);
            }
          });
        }
      });
    };
    ZipArchive2.prototype.destroy = function() {
      if (this.files !== void 0 && this.files.length > 0) {
        for (var i = 0; i < this.files.length; i++) {
          var file = this.files[i];
          if (file instanceof ZipArchiveItem) {
            file.destroy();
          }
          file = void 0;
        }
        this.files = [];
      }
      this.files = void 0;
      this.level = void 0;
    };
    ZipArchive2.prototype.getCompressedData = function(item) {
      var zipArchive = this;
      var promise = new Promise(function(resolve, reject) {
        if (item instanceof ZipArchiveItem) {
          var reader_1 = new FileReader();
          reader_1.onload = function() {
            var input2 = new Uint8Array(reader_1.result);
            var data2 = {
              fileName: item.name,
              crc32Value: 0,
              compressedData: [],
              compressedSize: void 0,
              uncompressedDataSize: input2.length,
              compressionType: void 0,
              isDirectory: false
            };
            if (zipArchive.level === "Normal") {
              zipArchive.compressData(input2, data2, CRC32TABLE);
              var length_1 = 0;
              for (var i = 0; i < data2.compressedData.length; i++) {
                length_1 += data2.compressedData[i].length;
              }
              data2.compressedSize = length_1;
              data2.compressionType = "\b\0";
            } else {
              data2.compressedSize = input2.length;
              data2.crc32Value = zipArchive.calculateCrc32Value(0, input2, CRC32TABLE);
              data2.compressionType = "\0\0";
              data2.compressedData.push(input2);
            }
            resolve(data2);
          };
          reader_1.readAsArrayBuffer(item.data);
        } else {
          var data = {
            fileName: item,
            crc32Value: 0,
            compressedData: "",
            compressedSize: 0,
            uncompressedDataSize: 0,
            compressionType: "\0\0",
            isDirectory: true
          };
          resolve(data);
        }
      });
      return promise;
    };
    ZipArchive2.prototype.compressData = function(input2, data, crc32Table) {
      var compressor = new CompressedStreamWriter(true);
      var currentIndex = 0;
      var nextIndex = 0;
      do {
        if (currentIndex >= input2.length) {
          compressor.close();
          break;
        }
        nextIndex = Math.min(input2.length, currentIndex + 16384);
        var subArray = input2.subarray(currentIndex, nextIndex);
        data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);
        compressor.write(subArray, 0, nextIndex - currentIndex);
        currentIndex = nextIndex;
      } while (currentIndex <= input2.length);
      data.compressedData = compressor.compressedData;
      compressor.destroy();
    };
    ZipArchive2.prototype.constructZippedObject = function(zipParts, data, dirLength, isDirectory) {
      var extFileAttr = 0;
      var date = /* @__PURE__ */ new Date();
      if (isDirectory) {
        extFileAttr = extFileAttr | 16;
      }
      extFileAttr = extFileAttr | 0 & 63;
      var header = this.writeHeader(data, date);
      var localHeader = "PK" + header + data.fileName;
      var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);
      zipParts.push({
        localHeader,
        centralDir,
        compressedData: data
      });
      return dirLength + localHeader.length + data.compressedSize;
    };
    ZipArchive2.prototype.writeHeader = function(data, date) {
      var zipHeader = "";
      zipHeader += "\n\0\0\0";
      zipHeader += data.compressionType;
      zipHeader += this.getBytes(this.getModifiedTime(date), 2);
      zipHeader += this.getBytes(this.getModifiedDate(date), 2);
      zipHeader += this.getBytes(data.crc32Value, 4);
      zipHeader += this.getBytes(data.compressedSize, 4);
      zipHeader += this.getBytes(data.uncompressedDataSize, 4);
      zipHeader += this.getBytes(data.fileName.length, 2);
      zipHeader += this.getBytes(0, 2);
      return zipHeader;
    };
    ZipArchive2.prototype.writeZippedContent = function(fileName, zipData, localDirLen, skipFileSave) {
      var cenDirLen = 0;
      var buffer = [];
      for (var i = 0; i < zipData.length; i++) {
        var item = zipData[i];
        cenDirLen += item.centralDir.length;
        buffer.push(this.getArrayBuffer(item.localHeader));
        while (item.compressedData.compressedData.length) {
          buffer.push(item.compressedData.compressedData.shift().buffer);
        }
      }
      for (var i = 0; i < zipData.length; i++) {
        buffer.push(this.getArrayBuffer(zipData[i].centralDir));
      }
      buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));
      var blob = new Blob(buffer, {
        type: "application/zip"
      });
      if (!skipFileSave) {
        Save.save(fileName, blob);
      }
      return blob;
    };
    ZipArchive2.prototype.writeCentralDirectory = function(data, localHeader, offset, externalFileAttribute) {
      var directoryHeader = "PK" + this.getBytes(20, 2) + localHeader + // inherit from file header
      this.getBytes(0, 2) + // comment length
      "\0\0\0\0" + // internal file attributes 
      this.getBytes(externalFileAttribute, 4) + // external file attributes
      this.getBytes(offset, 4) + // local fileHeader relative offset
      data.fileName;
      return directoryHeader;
    };
    ZipArchive2.prototype.writeFooter = function(zipData, centralLength, localLength) {
      var dirEnd = "PK\0\0\0\0" + this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) + this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) + this.getBytes(0, 2);
      return dirEnd;
    };
    ZipArchive2.prototype.getArrayBuffer = function(input2) {
      var a = new Uint8Array(input2.length);
      for (var j = 0; j < input2.length; ++j) {
        a[j] = input2.charCodeAt(j) & 255;
      }
      return a.buffer;
    };
    ZipArchive2.prototype.getBytes = function(value, offset) {
      var bytes = "";
      for (var i = 0; i < offset; i++) {
        bytes += String.fromCharCode(value & 255);
        value = value >>> 8;
      }
      return bytes;
    };
    ZipArchive2.prototype.getModifiedTime = function(date) {
      var modTime = date.getHours();
      modTime = modTime << 6;
      modTime = modTime | date.getMinutes();
      modTime = modTime << 5;
      return modTime = modTime | date.getSeconds() / 2;
    };
    ZipArchive2.prototype.getModifiedDate = function(date) {
      var modiDate = date.getFullYear() - 1980;
      modiDate = modiDate << 4;
      modiDate = modiDate | date.getMonth() + 1;
      modiDate = modiDate << 5;
      return modiDate = modiDate | date.getDate();
    };
    ZipArchive2.prototype.calculateCrc32Value = function(crc32Value, input2, crc32Table) {
      crc32Value ^= -1;
      for (var i = 0; i < input2.length; i++) {
        crc32Value = crc32Value >>> 8 ^ crc32Table[(crc32Value ^ input2[i]) & 255];
      }
      return crc32Value ^ -1;
    };
    ZipArchive2.initCrc32Table = function() {
      var i;
      for (var j = 0; j < 256; j++) {
        i = j;
        for (var k = 0; k < 8; k++) {
          i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
        }
        CRC32TABLE[j] = i;
      }
    };
    ZipArchive2.findValueFromEnd = function(stream, value, maxCount) {
      if (stream == null) throw new DOMException("stream");
      var lStreamSize = stream.inputStream.buffer.byteLength;
      if (lStreamSize < 4) return -1;
      var arrBuffer = new Uint8Array(4);
      var lLastPos = Math.max(0, lStreamSize - maxCount);
      var lCurrentPosition = lStreamSize - 1 - INT_SIZE;
      stream.position = lCurrentPosition;
      stream.read(arrBuffer, 0, INT_SIZE);
      var uiCurValue = arrBuffer[0];
      var bFound = uiCurValue == value;
      if (!bFound) {
        while (lCurrentPosition > lLastPos) {
          uiCurValue <<= 8;
          lCurrentPosition--;
          stream.position = lCurrentPosition;
          uiCurValue += stream.readByte();
          if (uiCurValue == value) {
            bFound = true;
            break;
          }
        }
      }
      return bFound ? lCurrentPosition : -1;
    };
    ZipArchive2.ReadInt32 = function(stream) {
      var buffer = new Uint8Array(INT_SIZE);
      if (stream.read(buffer, 0, INT_SIZE) != INT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt32(buffer, 0);
    };
    ZipArchive2.ReadInt16 = function(stream) {
      var buffer = new Uint8Array(SHORT_SIZE);
      if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
        throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
      }
      return Utils.bitConverterToInt16(buffer, 0);
    };
    ZipArchive2.ReadUInt16 = function(stream) {
      {
        var buffer = new Uint8Array(SHORT_SIZE);
        if (stream.read(buffer, 0, SHORT_SIZE) != SHORT_SIZE) {
          throw new DOMException("Unable to read value at the specified position - end of stream was reached.");
        }
        return Utils.bitConverterToInt16(buffer, 0);
      }
    };
    return ZipArchive2;
  }()
);
var ZipArchiveItemHelper = (
  /** @class */
  function() {
    function ZipArchiveItemHelper2() {
      this.headerSignature = 67324752;
      this.checkCrc = true;
      this.crc32 = 0;
    }
    ZipArchiveItemHelper2.prototype.readCentralDirectoryData = function(stream) {
      stream.position += 4;
      this.options = ZipArchive.ReadInt16(stream);
      this.compressionMethod = ZipArchive.ReadInt16(stream);
      this.checkCrc = this.compressionMethod != 99;
      var lastModified = ZipArchive.ReadInt32(stream);
      this.crc32 = Utils.bitConverterToUInt32(ZipArchive.ReadInt32(stream));
      this.compressedSize = ZipArchive.ReadInt32(stream);
      this.originalSize = ZipArchive.ReadInt32(stream);
      var iFileNameLength = ZipArchive.ReadInt16(stream);
      var iExtraFieldLenth = ZipArchive.ReadInt16(stream);
      var iCommentLength = ZipArchive.ReadInt16(stream);
      stream.position += 4;
      this.externalAttributes = ZipArchive.ReadInt32(stream);
      this.localHeaderOffset = ZipArchive.ReadInt32(stream);
      var arrBuffer = new Uint8Array(iFileNameLength);
      stream.read(arrBuffer, 0, iFileNameLength);
      var m_strItemName = Utils.byteToString(arrBuffer);
      m_strItemName = m_strItemName.replace("\\", "/");
      this.name = m_strItemName;
      stream.position += iExtraFieldLenth + iCommentLength;
      if (this.options != 0) this.options = 0;
    };
    ZipArchiveItemHelper2.prototype.readData = function(stream, checkCrc) {
      if (stream.length == 0) throw new DOMException("stream");
      stream.position = this.localHeaderOffset;
      this.checkCrc = checkCrc;
      this.readLocalHeader(stream);
      this.readCompressedData(stream);
    };
    ZipArchiveItemHelper2.prototype.decompressData = function() {
      if (this.compressionMethod == 8) {
        if (this.originalSize > 0) {
          this.decompressDataOld();
        }
      }
    };
    ZipArchiveItemHelper2.prototype.decompressDataOld = function() {
      var reader = new CompressedStreamReader(this.compressedStream, true);
      var decompressedData;
      if (this.originalSize > 0) decompressedData = new Stream(new Uint8Array(this.originalSize));
      var arrBuffer = new Uint8Array(BufferSize);
      var iReadBytes;
      var past = new Uint8Array(0);
      while ((iReadBytes = reader.read(arrBuffer, 0, BufferSize)) > 0) {
        decompressedData.write(arrBuffer.subarray(0, iReadBytes), 0, iReadBytes);
      }
      this.unCompressedStream = decompressedData.toByteArray();
      if (this.checkCrc) {
      }
    };
    ZipArchiveItemHelper2.prototype.readLocalHeader = function(stream) {
      if (stream.length == 0) throw new DOMException("stream");
      if (ZipArchive.ReadInt32(stream) != this.headerSignature) throw new DOMException("Can't find local header signature - wrong file format or file is corrupt.");
      stream.position += 22;
      var iNameLength = ZipArchive.ReadInt16(stream);
      var iExtraLength = ZipArchive.ReadUInt16(stream);
      if (this.compressionMethod == 99) {
      } else if (iExtraLength > 2) {
        stream.position += iNameLength;
        var headerVal = ZipArchive.ReadInt16(stream);
        if (headerVal == 23)
          throw new DOMException("UnSupported");
        else stream.position += iExtraLength - 2;
      } else stream.position += iNameLength + iExtraLength;
    };
    ZipArchiveItemHelper2.prototype.readCompressedData = function(stream) {
      var dataStream;
      if (this.compressedSize > 0) {
        var iBytesLeft = this.compressedSize;
        dataStream = new Stream(new Uint8Array(iBytesLeft));
        var arrBuffer = new Uint8Array(BufferSize);
        while (iBytesLeft > 0) {
          var iBytesToRead = Math.min(iBytesLeft, BufferSize);
          if (stream.read(arrBuffer, 0, iBytesToRead) != iBytesToRead) throw new DOMException("End of file reached - wrong file format or file is corrupt.");
          dataStream.write(arrBuffer.subarray(0, iBytesToRead), 0, iBytesToRead);
          iBytesLeft -= iBytesToRead;
        }
        this.compressedStream = new Uint8Array(dataStream.inputStream);
      } else if (this.compressedSize < 0) {
      } else if (this.compressedSize == 0) {
      }
    };
    return ZipArchiveItemHelper2;
  }()
);
var ZipArchiveItem = (
  /** @class */
  function() {
    function ZipArchiveItem2(data, itemName) {
      if (data === null || data === void 0) {
        throw new Error("ArgumentException: data cannot be null or undefined");
      }
      if (itemName === null || itemName === void 0) {
        throw new Error("ArgumentException: string cannot be null or undefined");
      }
      if (itemName.length === 0) {
        throw new Error("string cannot be empty");
      }
      this.data = data;
      this.name = itemName;
    }
    Object.defineProperty(ZipArchiveItem2.prototype, "dataStream", {
      get: function() {
        return this.decompressedStream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZipArchiveItem2.prototype, "name", {
      /**
       * Get the name of archive item
       * @returns string
       */
      get: function() {
        return this.fileName;
      },
      /**
       * Set the name of archive item
       * @param  {string} value
       */
      set: function(value) {
        this.fileName = value;
      },
      enumerable: true,
      configurable: true
    });
    ZipArchiveItem2.prototype.destroy = function() {
      this.fileName = void 0;
      this.data = void 0;
    };
    return ZipArchiveItem2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-writer.js
var ARR_LITERAL_CODES = new Int16Array(286);
var ARR_LITERAL_LENGTHS = new Uint8Array(286);
var ARR_DISTANCE_CODES = new Int16Array(30);
var ARR_DISTANCE_LENGTHS = new Uint8Array(30);
var CompressedStreamWriter = (
  /** @class */
  function() {
    function CompressedStreamWriter2(noWrap) {
      this.pendingBuffer = new Uint8Array(1 << 16);
      this.pendingBufLength = 0;
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.currentHash = 0;
      this.matchStart = 0;
      this.matchLength = 0;
      this.matchPrevAvail = false;
      this.blockStart = 0;
      this.stringStart = 0;
      this.lookAhead = 0;
      this.totalBytesIn = 0;
      this.inputOffset = 0;
      this.inputEnd = 0;
      this.windowSize = 1 << 15;
      this.windowMask = this.windowSize - 1;
      this.hashSize = 1 << 15;
      this.hashMask = this.hashSize - 1;
      this.hashShift = Math.floor((15 + 3 - 1) / 3);
      this.maxDist = this.windowSize - 262;
      this.checkSum = 1;
      this.noWrap = false;
      if (!CompressedStreamWriter2.isHuffmanTreeInitiated) {
        CompressedStreamWriter2.initHuffmanTree();
        CompressedStreamWriter2.isHuffmanTreeInitiated = true;
      }
      this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);
      this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);
      this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);
      this.arrDistances = new Uint16Array(1 << 14);
      this.arrLiterals = new Uint8Array(1 << 14);
      this.stream = [];
      this.dataWindow = new Uint8Array(2 * this.windowSize);
      this.hashHead = new Int16Array(this.hashSize);
      this.hashPrevious = new Int16Array(this.windowSize);
      this.blockStart = this.stringStart = 1;
      this.noWrap = noWrap;
      if (!noWrap) {
        this.writeZLibHeader();
      }
    }
    Object.defineProperty(CompressedStreamWriter2.prototype, "compressedData", {
      /**
       * get compressed data
       */
      get: function() {
        return this.stream;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressedStreamWriter2.prototype, "getCompressedString", {
      get: function() {
        var compressedString = "";
        if (this.stream !== void 0) {
          for (var i = 0; i < this.stream.length; i++) {
            compressedString += String.fromCharCode.apply(null, this.stream[i]);
          }
        }
        return compressedString;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamWriter2.prototype.write = function(data, offset, length) {
      if (data === void 0 || data === null) {
        throw new Error("ArgumentException: data cannot null or undefined");
      }
      var end = offset + length;
      if (0 > offset || offset > end || end > data.length) {
        throw new Error("ArgumentOutOfRangeException: Offset or length is incorrect");
      }
      if (typeof data === "string") {
        var encode = new Encoding(false);
        encode.type = "Utf8";
        data = new Uint8Array(encode.getBytes(data, 0, data.length));
        end = offset + data.length;
      }
      this.inputBuffer = data;
      this.inputOffset = offset;
      this.inputEnd = end;
      if (!this.noWrap) {
        this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);
      }
      while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {
        this.pendingBufferFlush();
        this.compressData(false);
      }
    };
    CompressedStreamWriter2.prototype.writeZLibHeader = function() {
      var headerDate = 8 + (7 << 4) << 8;
      headerDate |= (5 >> 2 & 3) << 6;
      headerDate += 31 - headerDate % 31;
      this.pendingBufferWriteShortBytes(headerDate);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShortBytes = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
      this.pendingBuffer[this.pendingBufLength++] = s;
    };
    CompressedStreamWriter2.prototype.compressData = function(finish) {
      var success;
      do {
        this.fillWindow();
        var canFlush = finish && this.inputEnd === this.inputOffset;
        success = this.compressSlow(canFlush, finish);
      } while (this.pendingBufLength === 0 && success);
      return success;
    };
    CompressedStreamWriter2.prototype.compressSlow = function(flush, finish) {
      if (this.lookAhead < 262 && !flush) {
        return false;
      }
      while (this.lookAhead >= 262 || flush) {
        if (this.lookAhead === 0) {
          return this.lookAheadCompleted(finish);
        }
        if (this.stringStart >= 2 * this.windowSize - 262) {
          this.slideWindow();
        }
        var prevMatch = this.matchStart;
        var prevLen = this.matchLength;
        if (this.lookAhead >= 3) {
          this.discardMatch();
        }
        if (prevLen >= 3 && this.matchLength <= prevLen) {
          prevLen = this.matchPreviousBest(prevMatch, prevLen);
        } else {
          this.matchPreviousAvailable();
        }
        if (this.bufferPosition >= 1 << 14) {
          return this.huffmanIsFull(finish);
        }
      }
      return true;
    };
    CompressedStreamWriter2.prototype.discardMatch = function() {
      var hashHead = this.insertString();
      if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {
        if (this.matchLength <= 5 && this.matchLength === 3 && this.stringStart - this.matchStart > 4096) {
          this.matchLength = 3 - 1;
        }
      }
    };
    CompressedStreamWriter2.prototype.matchPreviousAvailable = function() {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = true;
      this.stringStart++;
      this.lookAhead--;
    };
    CompressedStreamWriter2.prototype.matchPreviousBest = function(prevMatch, prevLen) {
      this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);
      prevLen -= 2;
      do {
        this.stringStart++;
        this.lookAhead--;
        if (this.lookAhead >= 3) {
          this.insertString();
        }
      } while (--prevLen > 0);
      this.stringStart++;
      this.lookAhead--;
      this.matchPrevAvail = false;
      this.matchLength = 3 - 1;
      return prevLen;
    };
    CompressedStreamWriter2.prototype.lookAheadCompleted = function(finish) {
      if (this.matchPrevAvail) {
        this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 255);
      }
      this.matchPrevAvail = false;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);
      this.blockStart = this.stringStart;
      return false;
    };
    CompressedStreamWriter2.prototype.huffmanIsFull = function(finish) {
      var len = this.stringStart - this.blockStart;
      if (this.matchPrevAvail) {
        len--;
      }
      var lastBlock = finish && this.lookAhead === 0 && !this.matchPrevAvail;
      this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);
      this.blockStart += len;
      return !lastBlock;
    };
    CompressedStreamWriter2.prototype.fillWindow = function() {
      if (this.stringStart >= this.windowSize + this.maxDist) {
        this.slideWindow();
      }
      while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {
        var more = 2 * this.windowSize - this.lookAhead - this.stringStart;
        if (more > this.inputEnd - this.inputOffset) {
          more = this.inputEnd - this.inputOffset;
        }
        this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);
        this.inputOffset += more;
        this.totalBytesIn += more;
        this.lookAhead += more;
      }
      if (this.lookAhead >= 3) {
        this.updateHash();
      }
    };
    CompressedStreamWriter2.prototype.slideWindow = function() {
      this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);
      this.matchStart -= this.windowSize;
      this.stringStart -= this.windowSize;
      this.blockStart -= this.windowSize;
      for (var i = 0; i < this.hashSize; ++i) {
        var m = this.hashHead[i] & 65535;
        this.hashHead[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
      for (var i = 0; i < this.windowSize; i++) {
        var m = this.hashPrevious[i] & 65535;
        this.hashPrevious[i] = m >= this.windowSize ? m - this.windowSize : 0;
      }
    };
    CompressedStreamWriter2.prototype.insertString = function() {
      var match;
      var hash = (this.currentHash << this.hashShift ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;
      this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];
      this.hashHead[hash] = this.stringStart;
      this.currentHash = hash;
      return match & 65535;
    };
    CompressedStreamWriter2.prototype.findLongestMatch = function(curMatch) {
      var chainLen = 4096;
      var niceLen = 258;
      var scan = this.stringStart;
      var match;
      var bestEnd = this.stringStart + this.matchLength;
      var bestLength = Math.max(this.matchLength, 3 - 1);
      var limit = Math.max(this.stringStart - this.maxDist, 0);
      var stringEnd = this.stringStart + 258 - 1;
      var scanEnd1 = this.dataWindow[bestEnd - 1];
      var scanEnd = this.dataWindow[bestEnd];
      var data = this.dataWindow;
      if (bestLength >= 32) {
        chainLen >>= 2;
      }
      if (niceLen > this.lookAhead) {
        niceLen = this.lookAhead;
      }
      do {
        if (data[curMatch + bestLength] !== scanEnd || data[curMatch + bestLength - 1] !== scanEnd1 || data[curMatch] !== data[scan] || data[curMatch + 1] !== data[scan + 1]) {
          continue;
        }
        match = curMatch + 2;
        scan += 2;
        while (data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {
        }
        if (scan > bestEnd) {
          this.matchStart = curMatch;
          bestEnd = scan;
          bestLength = scan - this.stringStart;
          if (bestLength >= niceLen) {
            break;
          }
          scanEnd1 = data[bestEnd - 1];
          scanEnd = data[bestEnd];
        }
        scan = this.stringStart;
      } while ((curMatch = this.hashPrevious[curMatch & this.windowMask] & 65535) > limit && --chainLen !== 0);
      this.matchLength = Math.min(bestLength, this.lookAhead);
      return this.matchLength >= 3;
    };
    CompressedStreamWriter2.prototype.updateHash = function() {
      this.currentHash = this.dataWindow[this.stringStart] << this.hashShift ^ this.dataWindow[this.stringStart + 1];
    };
    CompressedStreamWriter2.prototype.huffmanTallyLit = function(literal) {
      this.arrDistances[this.bufferPosition] = 0;
      this.arrLiterals[this.bufferPosition++] = literal;
      this.treeLiteral.codeFrequencies[literal]++;
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanTallyDist = function(dist, len) {
      this.arrDistances[this.bufferPosition] = dist;
      this.arrLiterals[this.bufferPosition++] = len - 3;
      var lc = this.huffmanLengthCode(len - 3);
      this.treeLiteral.codeFrequencies[lc]++;
      if (lc >= 265 && lc < 285) {
        this.extraBits += Math.floor((lc - 261) / 4);
      }
      var dc = this.huffmanDistanceCode(dist - 1);
      this.treeDistances.codeFrequencies[dc]++;
      if (dc >= 4) {
        this.extraBits += Math.floor(dc / 2 - 1);
      }
      return this.bufferPosition >= 1 << 14;
    };
    CompressedStreamWriter2.prototype.huffmanFlushBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.treeLiteral.codeFrequencies[256]++;
      this.treeLiteral.buildTree();
      this.treeDistances.buildTree();
      this.treeLiteral.calculateBLFreq(this.treeCodeLengths);
      this.treeDistances.calculateBLFreq(this.treeCodeLengths);
      this.treeCodeLengths.buildTree();
      var blTreeCodes = 4;
      for (var i = 18; i > blTreeCodes; i--) {
        if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {
          blTreeCodes = i + 1;
        }
      }
      var opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() + this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;
      var static_len = this.extraBits;
      for (var i = 0; i < 286; i++) {
        static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];
      }
      for (var i = 0; i < 30; i++) {
        static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];
      }
      if (opt_len >= static_len) {
        opt_len = static_len;
      }
      if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {
        this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);
      } else if (opt_len == static_len) {
        this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);
        this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS);
        this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS);
        this.huffmanCompressBlock();
        this.huffmanReset();
      } else {
        this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);
        this.huffmanSendAllTrees(blTreeCodes);
        this.huffmanCompressBlock();
        this.huffmanReset();
      }
    };
    CompressedStreamWriter2.prototype.huffmanFlushStoredBlock = function(stored, storedOffset, storedLength, lastBlock) {
      this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);
      this.pendingBufferAlignToByte();
      this.pendingBufferWriteShort(storedLength);
      this.pendingBufferWriteShort(~storedLength);
      this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);
      this.huffmanReset();
    };
    CompressedStreamWriter2.prototype.huffmanLengthCode = function(len) {
      if (len === 255) {
        return 285;
      }
      var code = 257;
      while (len >= 8) {
        code += 4;
        len >>= 1;
      }
      return code + len;
    };
    CompressedStreamWriter2.prototype.huffmanDistanceCode = function(distance) {
      var code = 0;
      while (distance >= 4) {
        code += 2;
        distance >>= 1;
      }
      return code + distance;
    };
    CompressedStreamWriter2.prototype.huffmanSendAllTrees = function(blTreeCodes) {
      this.treeCodeLengths.buildCodes();
      this.treeLiteral.buildCodes();
      this.treeDistances.buildCodes();
      this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);
      this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);
      this.pendingBufferWriteBits(blTreeCodes - 4, 4);
      for (var rank = 0; rank < blTreeCodes; rank++) {
        this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);
      }
      this.treeLiteral.writeTree(this.treeCodeLengths);
      this.treeDistances.writeTree(this.treeCodeLengths);
    };
    CompressedStreamWriter2.prototype.huffmanReset = function() {
      this.bufferPosition = 0;
      this.extraBits = 0;
      this.treeLiteral.reset();
      this.treeDistances.reset();
      this.treeCodeLengths.reset();
    };
    CompressedStreamWriter2.prototype.huffmanCompressBlock = function() {
      for (var i = 0; i < this.bufferPosition; i++) {
        var literalLen = this.arrLiterals[i] & 255;
        var dist = this.arrDistances[i];
        if (dist-- !== 0) {
          var lc = this.huffmanLengthCode(literalLen);
          this.treeLiteral.writeCodeToStream(lc);
          var bits = Math.floor((lc - 261) / 4);
          if (bits > 0 && bits <= 5) {
            this.pendingBufferWriteBits(literalLen & (1 << bits) - 1, bits);
          }
          var dc = this.huffmanDistanceCode(dist);
          this.treeDistances.writeCodeToStream(dc);
          bits = Math.floor(dc / 2 - 1);
          if (bits > 0) {
            this.pendingBufferWriteBits(dist & (1 << bits) - 1, bits);
          }
        } else {
          this.treeLiteral.writeCodeToStream(literalLen);
        }
      }
      this.treeLiteral.writeCodeToStream(256);
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteBits = function(b, count2) {
      var uint = new Uint32Array(1);
      uint[0] = this.pendingBufCache | b << this.pendingBufBitsInCache;
      this.pendingBufCache = uint[0];
      this.pendingBufBitsInCache += count2;
      this.pendingBufferFlushBits();
    };
    CompressedStreamWriter2.prototype.pendingBufferFlush = function(isClose) {
      this.pendingBufferFlushBits();
      if (this.pendingBufLength > 0) {
        var array = new Uint8Array(this.pendingBufLength);
        array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);
        this.stream.push(array);
      }
      this.pendingBufLength = 0;
    };
    CompressedStreamWriter2.prototype.pendingBufferFlushBits = function() {
      var result = 0;
      while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < 1 << 16) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
        this.pendingBufCache >>= 8;
        this.pendingBufBitsInCache -= 8;
        result++;
      }
      return result;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteByteBlock = function(data, offset, length) {
      var array = data.subarray(offset, offset + length);
      this.pendingBuffer.set(array, this.pendingBufLength);
      this.pendingBufLength += length;
    };
    CompressedStreamWriter2.prototype.pendingBufferWriteShort = function(s) {
      this.pendingBuffer[this.pendingBufLength++] = s;
      this.pendingBuffer[this.pendingBufLength++] = s >> 8;
    };
    CompressedStreamWriter2.prototype.pendingBufferAlignToByte = function() {
      if (this.pendingBufBitsInCache > 0) {
        this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;
      }
      this.pendingBufCache = 0;
      this.pendingBufBitsInCache = 0;
    };
    CompressedStreamWriter2.initHuffmanTree = function() {
      var i = 0;
      while (i < 144) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(48 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      while (i < 256) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(400 - 144 + i << 7);
        ARR_LITERAL_LENGTHS[i++] = 9;
      }
      while (i < 280) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(0 - 256 + i << 9);
        ARR_LITERAL_LENGTHS[i++] = 7;
      }
      while (i < 286) {
        ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(192 - 280 + i << 8);
        ARR_LITERAL_LENGTHS[i++] = 8;
      }
      for (i = 0; i < 30; i++) {
        ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11);
        ARR_DISTANCE_LENGTHS[i] = 5;
      }
    };
    CompressedStreamWriter2.prototype.close = function() {
      do {
        this.pendingBufferFlush(true);
        if (!this.compressData(true)) {
          this.pendingBufferFlush(true);
          this.pendingBufferAlignToByte();
          if (!this.noWrap) {
            this.pendingBufferWriteShortBytes(this.checkSum >> 16);
            this.pendingBufferWriteShortBytes(this.checkSum & 65535);
          }
          this.pendingBufferFlush(true);
        }
      } while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0));
    };
    CompressedStreamWriter2.prototype.destroy = function() {
      this.stream = [];
      this.stream = void 0;
      this.pendingBuffer = void 0;
      this.treeLiteral = void 0;
      this.treeDistances = void 0;
      this.treeCodeLengths = void 0;
      this.arrLiterals = void 0;
      this.arrDistances = void 0;
      this.hashHead = void 0;
      this.hashPrevious = void 0;
      this.dataWindow = void 0;
      this.inputBuffer = void 0;
      this.pendingBufLength = void 0;
      this.pendingBufCache = void 0;
      this.pendingBufBitsInCache = void 0;
      this.bufferPosition = void 0;
      this.extraBits = void 0;
      this.currentHash = void 0;
      this.matchStart = void 0;
      this.matchLength = void 0;
      this.matchPrevAvail = void 0;
      this.blockStart = void 0;
      this.stringStart = void 0;
      this.lookAhead = void 0;
      this.totalBytesIn = void 0;
      this.inputOffset = void 0;
      this.inputEnd = void 0;
      this.windowSize = void 0;
      this.windowMask = void 0;
      this.hashSize = void 0;
      this.hashMask = void 0;
      this.hashShift = void 0;
      this.maxDist = void 0;
      this.checkSum = void 0;
      this.noWrap = void 0;
    };
    CompressedStreamWriter2.isHuffmanTreeInitiated = false;
    return CompressedStreamWriter2;
  }()
);
var CompressorHuffmanTree = (
  /** @class */
  function() {
    function CompressorHuffmanTree2(writer, elementCount, minCodes, maxLength) {
      this.writer = writer;
      this.codeMinCount = minCodes;
      this.maxLength = maxLength;
      this.codeFrequency = new Uint16Array(elementCount);
      this.lengthCount = new Int32Array(maxLength);
    }
    Object.defineProperty(CompressorHuffmanTree2.prototype, "treeLength", {
      get: function() {
        return this.codeCount;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeLengths", {
      get: function() {
        return this.codeLength;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompressorHuffmanTree2.prototype, "codeFrequencies", {
      get: function() {
        return this.codeFrequency;
      },
      enumerable: true,
      configurable: true
    });
    CompressorHuffmanTree2.prototype.setStaticCodes = function(codes, lengths) {
      var temp = new Int16Array(codes.length);
      temp.set(codes, 0);
      this.codes = temp;
      var lengthTemp = new Uint8Array(lengths.length);
      lengthTemp.set(lengths, 0);
      this.codeLength = lengthTemp;
    };
    CompressorHuffmanTree2.prototype.reset = function() {
      for (var i = 0; i < this.codeFrequency.length; i++) {
        this.codeFrequency[i] = 0;
      }
      this.codes = void 0;
      this.codeLength = void 0;
    };
    CompressorHuffmanTree2.prototype.writeCodeToStream = function(code) {
      this.writer.pendingBufferWriteBits(this.codes[code] & 65535, this.codeLength[code]);
    };
    CompressorHuffmanTree2.prototype.buildCodes = function() {
      var nextCode = new Int32Array(this.maxLength);
      this.codes = new Int16Array(this.codeCount);
      var code = 0;
      for (var bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {
        nextCode[bitsCount] = code;
        code += this.lengthCount[bitsCount] << 15 - bitsCount;
      }
      for (var i = 0; i < this.codeCount; i++) {
        var bits = this.codeLength[i];
        if (bits > 0) {
          this.codes[i] = CompressorHuffmanTree2.bitReverse(nextCode[bits - 1]);
          nextCode[bits - 1] += 1 << 16 - bits;
        }
      }
    };
    CompressorHuffmanTree2.bitReverse = function(value) {
      return CompressorHuffmanTree2.reverseBits[value & 15] << 12 | CompressorHuffmanTree2.reverseBits[value >> 4 & 15] << 8 | CompressorHuffmanTree2.reverseBits[value >> 8 & 15] << 4 | CompressorHuffmanTree2.reverseBits[value >> 12];
    };
    CompressorHuffmanTree2.prototype.getEncodedLength = function() {
      var len = 0;
      for (var i = 0; i < this.codeFrequency.length; i++) {
        len += this.codeFrequency[i] * this.codeLength[i];
      }
      return len;
    };
    CompressorHuffmanTree2.prototype.calculateBLFreq = function(blTree) {
      var maxCount;
      var minCount;
      var count2;
      var curLen = -1;
      var i = 0;
      while (i < this.codeCount) {
        count2 = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxCount = 138;
          minCount = 3;
        } else {
          maxCount = 6;
          minCount = 3;
          if (curLen !== nextLen) {
            blTree.codeFrequency[nextLen]++;
            count2 = 0;
          }
        }
        curLen = nextLen;
        i++;
        while (i < this.codeCount && curLen === this.codeLength[i]) {
          i++;
          if (++count2 >= maxCount) {
            break;
          }
        }
        if (count2 < minCount) {
          blTree.codeFrequency[curLen] += count2;
        } else if (curLen !== 0) {
          blTree.codeFrequency[16]++;
        } else if (count2 <= 10) {
          blTree.codeFrequency[17]++;
        } else {
          blTree.codeFrequency[18]++;
        }
      }
    };
    CompressorHuffmanTree2.prototype.writeTree = function(blTree) {
      var maxRepeatCount;
      var minRepeatCount;
      var currentRepeatCount;
      var currentCodeLength = -1;
      var i = 0;
      while (i < this.codeCount) {
        currentRepeatCount = 1;
        var nextLen = this.codeLength[i];
        if (nextLen === 0) {
          maxRepeatCount = 138;
          minRepeatCount = 3;
        } else {
          maxRepeatCount = 6;
          minRepeatCount = 3;
          if (currentCodeLength !== nextLen) {
            blTree.writeCodeToStream(nextLen);
            currentRepeatCount = 0;
          }
        }
        currentCodeLength = nextLen;
        i++;
        while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {
          i++;
          if (++currentRepeatCount >= maxRepeatCount) {
            break;
          }
        }
        if (currentRepeatCount < minRepeatCount) {
          while (currentRepeatCount-- > 0) {
            blTree.writeCodeToStream(currentCodeLength);
          }
        } else if (currentCodeLength !== 0) {
          blTree.writeCodeToStream(16);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);
        } else if (currentRepeatCount <= 10) {
          blTree.writeCodeToStream(17);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);
        } else {
          blTree.writeCodeToStream(18);
          this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);
        }
      }
    };
    CompressorHuffmanTree2.prototype.buildTree = function() {
      var codesCount = this.codeFrequency.length;
      var arrTree = new Int32Array(codesCount);
      var treeLength = 0;
      var maxCount = 0;
      for (var n = 0; n < codesCount; n++) {
        var freq = this.codeFrequency[n];
        if (freq !== 0) {
          var pos = treeLength++;
          var pPos = 0;
          while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {
            arrTree[pos] = arrTree[pPos];
            pos = pPos;
          }
          arrTree[pos] = n;
          maxCount = n;
        }
      }
      while (treeLength < 2) {
        arrTree[treeLength++] = maxCount < 2 ? ++maxCount : 0;
      }
      this.codeCount = Math.max(maxCount + 1, this.codeMinCount);
      var leafsCount = treeLength;
      var nodesCount = leafsCount;
      var child = new Int32Array(4 * treeLength - 2);
      var values = new Int32Array(2 * treeLength - 1);
      for (var i = 0; i < treeLength; i++) {
        var node = arrTree[i];
        var iIndex = 2 * i;
        child[iIndex] = node;
        child[iIndex + 1] = -1;
        values[i] = this.codeFrequency[node] << 8;
        arrTree[i] = i;
      }
      this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);
      this.buildLength(child);
    };
    CompressorHuffmanTree2.prototype.constructHuffmanTree = function(arrTree, treeLength, values, nodesCount, child) {
      do {
        var first = arrTree[0];
        var last = arrTree[--treeLength];
        var lastVal = values[last];
        var pPos = 0;
        var path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
        var second = arrTree[0];
        last = nodesCount++;
        child[2 * last] = first;
        child[2 * last + 1] = second;
        var minDepth = Math.min(values[first] & 255, values[second] & 255);
        values[last] = lastVal = values[first] + values[second] - minDepth + 1;
        pPos = 0;
        path = 1;
        while (path < treeLength) {
          if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {
            path++;
          }
          arrTree[pPos] = arrTree[path];
          pPos = path;
          path = pPos * 2 + 1;
        }
        while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {
          arrTree[path] = arrTree[pPos];
        }
        arrTree[path] = last;
      } while (treeLength > 1);
    };
    CompressorHuffmanTree2.prototype.buildLength = function(child) {
      this.codeLength = new Uint8Array(this.codeFrequency.length);
      var numNodes = Math.floor(child.length / 2);
      var numLeafs = Math.floor((numNodes + 1) / 2);
      var overflow = 0;
      for (var i = 0; i < this.maxLength; i++) {
        this.lengthCount[i] = 0;
      }
      overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);
      if (overflow === 0) {
        return;
      }
      var iIncreasableLength = this.maxLength - 1;
      do {
        while (this.lengthCount[--iIncreasableLength] === 0) {
        }
        do {
          this.lengthCount[iIncreasableLength]--;
          this.lengthCount[++iIncreasableLength]++;
          overflow -= 1 << this.maxLength - 1 - iIncreasableLength;
        } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);
      } while (overflow > 0);
      this.recreateTree(child, overflow, numLeafs);
    };
    CompressorHuffmanTree2.prototype.recreateTree = function(child, overflow, numLeafs) {
      this.lengthCount[this.maxLength - 1] += overflow;
      this.lengthCount[this.maxLength - 2] -= overflow;
      var nodePtr = 2 * numLeafs;
      for (var bits = this.maxLength; bits !== 0; bits--) {
        var n = this.lengthCount[bits - 1];
        while (n > 0) {
          var childPtr = 2 * child[nodePtr++];
          if (child[childPtr + 1] === -1) {
            this.codeLength[child[childPtr]] = bits;
            n--;
          }
        }
      }
    };
    CompressorHuffmanTree2.prototype.calculateOptimalCodeLength = function(child, overflow, numNodes) {
      var lengths = new Int32Array(numNodes);
      lengths[numNodes - 1] = 0;
      for (var i = numNodes - 1; i >= 0; i--) {
        var childIndex = 2 * i + 1;
        if (child[childIndex] !== -1) {
          var bitLength = lengths[i] + 1;
          if (bitLength > this.maxLength) {
            bitLength = this.maxLength;
            overflow++;
          }
          lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;
        } else {
          var bitLength = lengths[i];
          this.lengthCount[bitLength - 1]++;
          this.codeLength[child[childIndex - 1]] = lengths[i];
        }
      }
      return overflow;
    };
    CompressorHuffmanTree2.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
    CompressorHuffmanTree2.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    return CompressorHuffmanTree2;
  }()
);
var ChecksumCalculator = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.checksumUpdate = function(checksum, buffer, offset, length) {
      var uint = new Uint32Array(1);
      uint[0] = checksum;
      var checksum_uint = uint[0];
      var s1 = uint[0] = checksum_uint & 65535;
      var s2 = uint[0] = checksum_uint >> ChecksumCalculator3.checkSumBitOffset;
      while (length > 0) {
        var steps = Math.min(length, ChecksumCalculator3.checksumIterationCount);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (uint[0] = buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= ChecksumCalculator3.checksumBase;
        s2 %= ChecksumCalculator3.checksumBase;
      }
      checksum_uint = s2 << ChecksumCalculator3.checkSumBitOffset | s1;
      return checksum_uint;
    };
    ChecksumCalculator3.checkSumBitOffset = 16;
    ChecksumCalculator3.checksumBase = 65521;
    ChecksumCalculator3.checksumIterationCount = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/decompressor-huffman-tree.js
var DecompressorHuffmanTree = (
  /** @class */
  function() {
    function DecompressorHuffmanTree2(lengths) {
      this.buildTree(lengths);
    }
    DecompressorHuffmanTree2.init = function() {
      var lengths;
      var index;
      lengths = new Uint8Array(288);
      index = 0;
      while (index < 144) {
        lengths[index++] = 8;
      }
      while (index < 256) {
        lengths[index++] = 9;
      }
      while (index < 280) {
        lengths[index++] = 7;
      }
      while (index < 288) {
        lengths[index++] = 8;
      }
      DecompressorHuffmanTree2.m_LengthTree = new DecompressorHuffmanTree2(lengths);
      lengths = new Uint8Array(32);
      index = 0;
      while (index < 32) {
        lengths[index++] = 5;
      }
      DecompressorHuffmanTree2.m_DistanceTree = new DecompressorHuffmanTree2(lengths);
    };
    DecompressorHuffmanTree2.prototype.prepareData = function(blCount, nextCode, lengths) {
      var code = 0;
      var treeSize = 512;
      for (var i = 0; i < lengths.length; i++) {
        var length_1 = lengths[i];
        if (length_1 > 0) {
          blCount[length_1]++;
        }
      }
      for (var bits = 1; bits <= DecompressorHuffmanTree2.MAX_BITLEN; bits++) {
        nextCode[bits] = code;
        code += blCount[bits] << 16 - bits;
        if (bits >= 10) {
          var start = nextCode[bits] & 130944;
          var end = code & 130944;
          treeSize += end - start >> 16 - bits;
        }
      }
      return {
        "code": code,
        "treeSize": treeSize
      };
    };
    DecompressorHuffmanTree2.prototype.treeFromData = function(blCount, nextCode, lengths, code, treeSize) {
      var tree = new Int16Array(treeSize);
      var pointer = 512;
      var increment = 1 << 7;
      for (var bits = DecompressorHuffmanTree2.MAX_BITLEN; bits >= 10; bits--) {
        var end = code & 130944;
        code -= blCount[bits] << 16 - bits;
        var start = code & 130944;
        for (var i = start; i < end; i += increment) {
          tree[Utils.bitReverse(i)] = Utils.bitConverterInt32ToInt16(-pointer << 4 | bits);
          pointer += 1 << bits - 9;
        }
      }
      for (var i = 0; i < lengths.length; i++) {
        var bits = lengths[i];
        if (bits == 0) {
          continue;
        }
        code = nextCode[bits];
        var revcode = Utils.bitReverse(code);
        if (bits <= 9) {
          do {
            tree[revcode] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < 512);
        } else {
          var subTree = tree[revcode & 511];
          var treeLen = 1 << (subTree & 15);
          subTree = -(subTree >> 4);
          do {
            tree[subTree | revcode >> 9] = Utils.bitConverterInt32ToInt16(i << 4 | bits);
            revcode += 1 << bits;
          } while (revcode < treeLen);
        }
        nextCode[bits] = code + (1 << 16 - bits);
      }
      return tree;
    };
    DecompressorHuffmanTree2.prototype.buildTree = function(lengths) {
      var blCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var nextCode = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var prepareData = this.prepareData(blCount, nextCode, lengths);
      this.m_Tree = this.treeFromData(blCount, nextCode, lengths, prepareData.code, prepareData.treeSize);
    };
    DecompressorHuffmanTree2.prototype.unpackSymbol = function(input2) {
      var lookahead;
      var symbol;
      if ((lookahead = input2.peekBits(9)) >= 0) {
        if ((symbol = this.m_Tree[lookahead]) >= 0) {
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        }
        var subtree = -(symbol >> 4);
        var bitlen = symbol & 15;
        if ((lookahead = input2.peekBits(bitlen)) >= 0) {
          symbol = this.m_Tree[subtree | lookahead >> 9];
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          var bits = input2.availableBits;
          lookahead = input2.peekBits(bits);
          symbol = this.m_Tree[subtree | lookahead >> 9];
          if ((symbol & 15) <= bits) {
            input2.skipBits(symbol & 15);
            return symbol >> 4;
          } else {
            return -1;
          }
        }
      } else {
        var bits = input2.availableBits;
        lookahead = input2.peekBits(bits);
        symbol = this.m_Tree[lookahead];
        if (symbol >= 0 && (symbol & 15) <= bits) {
          input2.skipBits(symbol & 15);
          return symbol >> 4;
        } else {
          return -1;
        }
      }
    };
    Object.defineProperty(DecompressorHuffmanTree2, "lengthTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding lengths.
      /// </summary>
      get: function() {
        return this.m_LengthTree;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DecompressorHuffmanTree2, "distanceTree", {
      /// <summary>
      /// GET huffman tree for encoding and decoding distances.
      /// </summary>
      get: function() {
        return this.m_DistanceTree;
      },
      enumerable: true,
      configurable: true
    });
    DecompressorHuffmanTree2.MAX_BITLEN = 15;
    return DecompressorHuffmanTree2;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/checksum-calculator.js
var ChecksumCalculator2 = (
  /** @class */
  function() {
    function ChecksumCalculator3() {
    }
    ChecksumCalculator3.ChecksumUpdate = function(checksum, buffer, offset, length) {
      var checkSumUInt = checksum;
      var s1 = checkSumUInt & 65535;
      var s2 = checkSumUInt >> this.DEF_CHECKSUM_BIT_OFFSET;
      while (length > 0) {
        var steps = Math.min(length, this.DEF_CHECKSUM_ITERATIONSCOUNT);
        length -= steps;
        while (--steps >= 0) {
          s1 = s1 + (buffer[offset++] & 255);
          s2 = s2 + s1;
        }
        s1 %= this.DEF_CHECKSUM_BASE;
        s2 %= this.DEF_CHECKSUM_BASE;
      }
      checkSumUInt = s2 << this.DEF_CHECKSUM_BIT_OFFSET | s1;
      checksum = checkSumUInt;
    };
    ChecksumCalculator3.ChecksumGenerate = function(buffer, offset, length) {
      var result = 1;
      ChecksumCalculator3.ChecksumUpdate(result, buffer, offset, length);
      return result;
    };
    ChecksumCalculator3.DEF_CHECKSUM_BIT_OFFSET = 16;
    ChecksumCalculator3.DEF_CHECKSUM_BASE = 65521;
    ChecksumCalculator3.DEF_CHECKSUM_ITERATIONSCOUNT = 3800;
    return ChecksumCalculator3;
  }()
);

// node_modules/@syncfusion/ej2-compression/src/compression-reader.js
var CompressedStreamReader = (
  /** @class */
  function() {
    function CompressedStreamReader2(stream, bNoWrap) {
      this.defaultHuffmanDynamicTree = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      this.DEF_HEADER_METHOD_MASK = 15 << 8;
      this.DEF_HEADER_INFO_MASK = 240 << 8;
      this.DEF_HEADER_FLAGS_FCHECK = 31;
      this.DEF_HEADER_FLAGS_FDICT = 32;
      this.DEF_HEADER_FLAGS_FLEVEL = 192;
      this.DEF_MAX_WINDOW_SIZE = 65535;
      this.DEF_HUFFMAN_REPEATE_MAX = 258;
      this.DEF_HUFFMAN_END_BLOCK = 256;
      this.DEF_HUFFMAN_LENGTH_MINIMUMCODE = 257;
      this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE = 285;
      this.DEF_HUFFMAN_DISTANCE_MAXIMUMCODE = 29;
      this.mCheckSum = 1;
      this.tBuffer = 0;
      this.mBufferedBits = 0;
      this.mTempBuffer = new Uint8Array(4);
      this.mBlockBuffer = new Uint8Array(this.DEF_MAX_WINDOW_SIZE);
      this.mbNoWrap = false;
      this.mWindowSize = 0;
      this.mCurrentPosition = 0;
      this.mDataLength = 0;
      this.mbCanReadNextBlock = true;
      this.mbCanReadMoreData = true;
      this.mbCheckSumRead = false;
      if (stream == null) {
        throw new DOMException("stream");
      }
      if (stream.length === 0) {
        throw new DOMException("stream - string can not be empty");
      }
      DecompressorHuffmanTree.init();
      this.mInputStream = new Stream(stream);
      this.mbNoWrap = bNoWrap;
      if (!this.mbNoWrap) {
        this.readZLibHeader();
      }
      this.decodeBlockHeader();
    }
    Object.defineProperty(CompressedStreamReader2.prototype, "mBuffer", {
      get: function() {
        return this.tBuffer;
      },
      set: function(value) {
        this.tBuffer = value;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.peekBits = function(count2) {
      if (count2 < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count2 > 32) {
        throw new DOMException("count", "Count of bits is too large.");
      }
      if (this.mBufferedBits < count2) {
        this.fillBuffer();
      }
      if (this.mBufferedBits < count2) {
        return -1;
      }
      var bitMask = ~(4294967295 << count2);
      var result = Utils.bitConverterUintToInt32(this.mBuffer & bitMask);
      return result;
    };
    CompressedStreamReader2.prototype.fillBuffer = function() {
      var length = 4 - (this.mBufferedBits >> 3) - ((this.mBufferedBits & 7) !== 0 ? 1 : 0);
      if (length === 0) {
        return;
      }
      var bytesRead = this.mInputStream.read(this.mTempBuffer, 0, length);
      for (var i = 0; i < bytesRead; i++) {
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer | Utils.bitConverterInt32ToUint(this.mTempBuffer[i] << this.mBufferedBits));
        this.mBufferedBits += 8;
      }
    };
    CompressedStreamReader2.prototype.skipBits = function(count2) {
      if (count2 < 0) {
        throw new DOMException("count", "Bits count can not be less than zero.");
      }
      if (count2 === 0) {
        return;
      }
      if (count2 >= this.mBufferedBits) {
        count2 -= this.mBufferedBits;
        this.mBufferedBits = 0;
        this.mBuffer = 0;
        if (count2 > 0) {
          this.mInputStream.position += count2 >> 3;
          count2 &= 7;
          if (count2 > 0) {
            this.fillBuffer();
            this.mBufferedBits -= count2;
            this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count2);
          }
        }
      } else {
        this.mBufferedBits -= count2;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count2);
      }
    };
    Object.defineProperty(CompressedStreamReader2.prototype, "availableBits", {
      get: function() {
        return this.mBufferedBits;
      },
      enumerable: true,
      configurable: true
    });
    CompressedStreamReader2.prototype.readZLibHeader = function() {
      var header = this.readInt16();
      if (header === -1) {
        throw new DOMException("Header of the stream can not be read.");
      }
      if (header % 31 !== 0) {
        throw new DOMException("Header checksum illegal");
      }
      if ((header & this.DEF_HEADER_METHOD_MASK) !== 8 << 8) {
        throw new DOMException("Unsupported compression method.");
      }
      this.mWindowSize = Math.pow(2, ((header & this.DEF_HEADER_INFO_MASK) >> 12) + 8);
      if (this.mWindowSize > 65535) {
        throw new DOMException("Unsupported window size for deflate compression method.");
      }
      if ((header & this.DEF_HEADER_FLAGS_FDICT) >> 5 === 1) {
        throw new DOMException("Custom dictionary is not supported at the moment.");
      }
    };
    CompressedStreamReader2.prototype.readInt16 = function() {
      var result = this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.readBits = function(count2) {
      var result = this.peekBits(count2);
      if (result === -1) {
        return -1;
      }
      this.mBufferedBits -= count2;
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> count2);
      return result;
    };
    CompressedStreamReader2.prototype.decodeBlockHeader = function() {
      if (!this.mbCanReadNextBlock) {
        return false;
      }
      var bFinalBlock = this.readBits(1);
      if (bFinalBlock === -1) {
        return false;
      }
      var blockType = this.readBits(2);
      if (blockType === -1) {
        return false;
      }
      this.mbCanReadNextBlock = bFinalBlock === 0;
      switch (blockType) {
        case 0:
          this.mbReadingUncompressed = true;
          this.skipToBoundary();
          var length_1 = this.readInt16Inverted();
          var lengthComplement = this.readInt16Inverted();
          if (length_1 !== (lengthComplement ^ 65535)) {
            throw new DOMException("Wrong block length.");
          }
          if (length_1 > 65535) {
            throw new DOMException("Uncompressed block length can not be more than 65535.");
          }
          this.mUncompressedDataLength = length_1;
          this.mCurrentLengthTree = null;
          this.mCurrentDistanceTree = null;
          break;
        case 1:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          this.mCurrentLengthTree = DecompressorHuffmanTree.lengthTree;
          this.mCurrentDistanceTree = DecompressorHuffmanTree.distanceTree;
          break;
        case 2:
          this.mbReadingUncompressed = false;
          this.mUncompressedDataLength = -1;
          var trees = this.decodeDynamicHeader(this.mCurrentLengthTree, this.mCurrentDistanceTree);
          this.mCurrentLengthTree = trees.lengthTree;
          this.mCurrentDistanceTree = trees.distanceTree;
          break;
        default:
          throw new DOMException("Wrong block type.");
      }
      return true;
    };
    CompressedStreamReader2.prototype.skipToBoundary = function() {
      this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> (this.mBufferedBits & 7));
      this.mBufferedBits &= ~7;
    };
    CompressedStreamReader2.prototype.readInt16Inverted = function() {
      var result = this.readBits(8);
      result |= this.readBits(8) << 8;
      return result;
    };
    CompressedStreamReader2.prototype.decodeDynamicHeader = function(lengthTree, distanceTree) {
      var bLastSymbol = 0;
      var iLengthsCount = this.readBits(5);
      var iDistancesCount = this.readBits(5);
      var iCodeLengthsCount = this.readBits(4);
      if (iLengthsCount < 0 || iDistancesCount < 0 || iCodeLengthsCount < 0) {
        throw new DOMException("Wrong dynamic huffman codes.");
      }
      iLengthsCount += 257;
      iDistancesCount += 1;
      var iResultingCodeLengthsCount = iLengthsCount + iDistancesCount;
      var arrResultingCodeLengths = new Uint8Array(iResultingCodeLengthsCount);
      var arrDecoderCodeLengths = new Uint8Array(19);
      iCodeLengthsCount += 4;
      var iCurrentCode = 0;
      while (iCurrentCode < iCodeLengthsCount) {
        var len = this.readBits(3);
        if (len < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        arrDecoderCodeLengths[this.defaultHuffmanDynamicTree[iCurrentCode++]] = len;
      }
      var treeInternalDecoder = new DecompressorHuffmanTree(arrDecoderCodeLengths);
      iCurrentCode = 0;
      for (; ; ) {
        var symbol = void 0;
        var bNeedBreak = false;
        symbol = treeInternalDecoder.unpackSymbol(this);
        while ((symbol & ~15) === 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol = symbol;
          if (iCurrentCode === iResultingCodeLengthsCount) {
            bNeedBreak = true;
            break;
          }
          symbol = treeInternalDecoder.unpackSymbol(this);
        }
        if (bNeedBreak) {
          break;
        }
        if (symbol < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        if (symbol >= 17) {
          bLastSymbol = 0;
        } else if (iCurrentCode === 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        var miRepSymbol = symbol - 16;
        var bits = CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS[miRepSymbol];
        var count2 = this.readBits(bits);
        if (count2 < 0) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        count2 += CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS[miRepSymbol];
        if (iCurrentCode + count2 > iResultingCodeLengthsCount) {
          throw new DOMException("Wrong dynamic huffman codes.");
        }
        while (count2-- > 0) {
          arrResultingCodeLengths[iCurrentCode++] = bLastSymbol;
        }
        if (iCurrentCode === iResultingCodeLengthsCount) {
          break;
        }
      }
      var tempArray = new Uint8Array(iLengthsCount);
      tempArray.set(arrResultingCodeLengths.subarray(0, iLengthsCount), 0);
      lengthTree = new DecompressorHuffmanTree(tempArray);
      tempArray = arrResultingCodeLengths.slice(iLengthsCount, iLengthsCount + iDistancesCount);
      distanceTree = new DecompressorHuffmanTree(tempArray);
      return {
        "lengthTree": lengthTree,
        "distanceTree": distanceTree
      };
    };
    CompressedStreamReader2.prototype.readHuffman = function() {
      var free = this.DEF_MAX_WINDOW_SIZE - (this.mDataLength - this.mCurrentPosition);
      var dataRead = false;
      var readdata = {};
      while (free >= this.DEF_HUFFMAN_REPEATE_MAX) {
        var symbol = void 0;
        symbol = this.mCurrentLengthTree.unpackSymbol(this);
        while ((symbol & ~255) === 0) {
          readdata[(this.mDataLength + 1) % this.DEF_MAX_WINDOW_SIZE] = symbol;
          this.mBlockBuffer[this.mDataLength++ % this.DEF_MAX_WINDOW_SIZE] = symbol;
          dataRead = true;
          if (--free < this.DEF_HUFFMAN_REPEATE_MAX) {
            return true;
          }
          symbol = this.mCurrentLengthTree.unpackSymbol(this);
        }
        if (symbol < this.DEF_HUFFMAN_LENGTH_MINIMUMCODE) {
          if (symbol < this.DEF_HUFFMAN_END_BLOCK) {
            throw new DOMException("Illegal code.");
          }
          var numDataRead = dataRead ? 1 : 0;
          this.mbCanReadMoreData = this.decodeBlockHeader();
          var numReadMore = this.mbCanReadMoreData ? 1 : 0;
          return numDataRead | numReadMore ? true : false;
        }
        if (symbol > this.DEF_HUFFMAN_LENGTH_MAXIMUMCODE) {
          throw new DOMException("Illegal repeat code length.");
        }
        var iRepeatLength = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        var iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION[symbol - this.DEF_HUFFMAN_LENGTH_MINIMUMCODE];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatLength += extra;
        }
        symbol = this.mCurrentDistanceTree.unpackSymbol(this);
        if (symbol < 0 || symbol > CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE.length) {
          throw new DOMException("Wrong distance code.");
        }
        var iRepeatDistance = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE[symbol];
        iRepeatExtraBits = CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION[symbol];
        if (iRepeatExtraBits > 0) {
          var extra = this.readBits(iRepeatExtraBits);
          if (extra < 0) {
            throw new DOMException("Wrong data.");
          }
          iRepeatDistance += extra;
        }
        for (var i = 0; i < iRepeatLength; i++) {
          this.mBlockBuffer[this.mDataLength % this.DEF_MAX_WINDOW_SIZE] = this.mBlockBuffer[(this.mDataLength - iRepeatDistance) % this.DEF_MAX_WINDOW_SIZE];
          this.mDataLength++;
          free--;
        }
        dataRead = true;
      }
      return dataRead;
    };
    CompressedStreamReader2.prototype.read = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException("offset", "Offset does not belong to specified buffer.");
      }
      if (length < 0 || length > buffer.length - offset) {
        throw new DOMException("length", "Length is illegal.");
      }
      var initialLength = length;
      while (length > 0) {
        if (this.mCurrentPosition < this.mDataLength) {
          var inBlockPosition = this.mCurrentPosition % this.DEF_MAX_WINDOW_SIZE;
          var dataToCopy = Math.min(this.DEF_MAX_WINDOW_SIZE - inBlockPosition, this.mDataLength - this.mCurrentPosition);
          dataToCopy = Math.min(dataToCopy, length);
          Utils.arrayCopy(this.mBlockBuffer, inBlockPosition, buffer, offset, dataToCopy);
          this.mCurrentPosition += dataToCopy;
          offset += dataToCopy;
          length -= dataToCopy;
        } else {
          if (!this.mbCanReadMoreData) {
            break;
          }
          var oldDataLength = this.mDataLength;
          if (!this.mbReadingUncompressed) {
            if (!this.readHuffman()) {
              break;
            }
          } else {
            if (this.mUncompressedDataLength === 0) {
              this.mbCanReadMoreData = this.decodeBlockHeader();
              if (!this.mbCanReadMoreData) {
                break;
              }
            } else {
              var inBlockPosition = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
              var dataToRead = Math.min(this.mUncompressedDataLength, this.DEF_MAX_WINDOW_SIZE - inBlockPosition);
              var dataRead = this.readPackedBytes(this.mBlockBuffer, inBlockPosition, dataToRead);
              if (dataToRead !== dataRead) {
                throw new DOMException("Not enough data in stream.");
              }
              this.mUncompressedDataLength -= dataRead;
              this.mDataLength += dataRead;
            }
          }
          if (oldDataLength < this.mDataLength) {
            var start = oldDataLength % this.DEF_MAX_WINDOW_SIZE;
            var end = this.mDataLength % this.DEF_MAX_WINDOW_SIZE;
            if (start < end) {
              this.checksumUpdate(this.mBlockBuffer, start, end - start);
            } else {
              this.checksumUpdate(this.mBlockBuffer, start, this.DEF_MAX_WINDOW_SIZE - start);
              if (end > 0) {
                this.checksumUpdate(this.mBlockBuffer, 0, end);
              }
            }
          }
        }
      }
      if (!this.mbCanReadMoreData && !this.mbCheckSumRead && !this.mbNoWrap) {
        this.skipToBoundary();
        var checkSum = this.readInt32();
        if (checkSum !== this.mCheckSum) {
          throw new DOMException("Checksum check failed.");
        }
        this.mbCheckSumRead = true;
      }
      return initialLength - length;
    };
    CompressedStreamReader2.prototype.readPackedBytes = function(buffer, offset, length) {
      if (buffer == null) {
        throw new DOMException("buffer");
      }
      if (offset < 0 || offset > buffer.length - 1) {
        throw new DOMException('offset", "Offset can not be less than zero or greater than buffer length - 1.');
      }
      if (length < 0) {
        throw new DOMException('length", "Length can not be less than zero.');
      }
      if (length > buffer.length - offset) {
        throw new DOMException('length", "Length is too large.');
      }
      if ((this.mBufferedBits & 7) !== 0) {
        throw new DOMException("Reading of unalligned data is not supported.");
      }
      if (length === 0) {
        return 0;
      }
      var result = 0;
      while (this.mBufferedBits > 0 && length > 0) {
        buffer[offset++] = this.mBuffer;
        this.mBufferedBits -= 8;
        this.mBuffer = Utils.bitConverterInt32ToUint(this.mBuffer >>> 8);
        length--;
        result++;
      }
      if (length > 0) {
        result += this.mInputStream.read(buffer, offset, length);
      }
      return result;
    };
    CompressedStreamReader2.prototype.readInt32 = function() {
      var result = this.readBits(8) << 24;
      result |= this.readBits(8) << 16;
      result |= this.readBits(8) << 8;
      result |= this.readBits(8);
      return result;
    };
    CompressedStreamReader2.prototype.checksumUpdate = function(buffer, offset, length) {
      ChecksumCalculator2.ChecksumUpdate(this.mCheckSum, buffer, offset, length);
    };
    CompressedStreamReader2.DEF_REVERSE_BITS = new Uint8Array([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_MINIMUMS = [3, 3, 11];
    CompressedStreamReader2.DEF_HUFFMAN_DYNTREE_REPEAT_BITS = [2, 3, 7];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_BASE = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_LENGTH_EXTENSION = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_BASE = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
    CompressedStreamReader2.DEF_HUFFMAN_REPEAT_DISTANCE_EXTENSION = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
    return CompressedStreamReader2;
  }()
);
var Stream = (
  /** @class */
  function() {
    function Stream2(input2) {
      this.position = 0;
      this.inputStream = new Uint8Array(input2.buffer);
    }
    Object.defineProperty(Stream2.prototype, "length", {
      get: function() {
        return this.inputStream.buffer.byteLength;
      },
      enumerable: true,
      configurable: true
    });
    Stream2.prototype.read = function(buffer, start, length) {
      var temp = new Uint8Array(this.inputStream.buffer, this.position + start);
      var data = temp.subarray(0, length);
      buffer.set(data, 0);
      this.position += data.byteLength;
      return data.byteLength;
    };
    Stream2.prototype.readByte = function() {
      return this.inputStream[this.position++];
    };
    Stream2.prototype.write = function(inputBuffer, offset, count2) {
      Utils.arrayCopy(inputBuffer, 0, this.inputStream, this.position + offset, count2);
      this.position += count2;
    };
    Stream2.prototype.toByteArray = function() {
      return new Uint8Array(this.inputStream.buffer);
    };
    return Stream2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js
var ValueFormatter2 = (
  /** @class */
  function() {
    function ValueFormatter3(cultureName) {
      this.intl = new Internationalization();
    }
    ValueFormatter3.prototype.getFormatFunction = function(format, isServerRendered) {
      if (format.type) {
        if (isServerRendered) {
          format.isServerRendered = true;
        }
        return this.intl.getDateFormat(format);
      } else {
        return this.intl.getNumberFormat(format);
      }
    };
    ValueFormatter3.prototype.toView = function(value, format) {
      var result = value;
      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
        result = format(value);
      }
      return result;
    };
    ValueFormatter3.prototype.displayText = function(value, format, isServerRendered) {
      return this.toView(value, this.getFormatFunction(format, isServerRendered));
    };
    return ValueFormatter3;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js
var CsvHelper = (
  /** @class */
  function() {
    function CsvHelper2(json, separator) {
      this.csvStr = "";
      if (separator === null || separator === void 0) {
        this.separator = ",";
      } else {
        this.separator = separator;
      }
      this.formatter = new ValueFormatter2();
      this.isMicrosoftBrowser = !!navigator.msSaveBlob;
      if (json.isServerRendered !== null && json.isServerRendered !== void 0) {
        this.isServerRendered = json.isServerRendered;
      }
      if (json.styles !== null && json.styles !== void 0) {
        this.globalStyles = /* @__PURE__ */ new Map();
        for (var i = 0; i < json.styles.length; i++) {
          if (json.styles[i].name !== void 0 && json.styles[i].numberFormat !== void 0) {
            this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);
          }
        }
      }
      if (json.worksheets !== null && json.worksheets !== void 0) {
        this.parseWorksheet(json.worksheets[0]);
      }
    }
    CsvHelper2.prototype.parseWorksheet = function(json) {
      if (json.rows !== null && json.rows !== void 0) {
        this.parseRows(json.rows);
      }
    };
    CsvHelper2.prototype.parseRows = function(rows) {
      var count2 = 1;
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        if (row2.index !== null && row2.index !== void 0) {
          while (count2 < row2.index) {
            this.csvStr += "\r\n";
            count2++;
          }
          this.parseRow(row2);
        } else {
          throw Error("Row index is missing.");
        }
      }
      this.csvStr += "\r\n";
    };
    CsvHelper2.prototype.parseRow = function(row2) {
      if (row2.cells !== null && row2.cells !== void 0) {
        var count2 = 1;
        for (var _i = 0, _a = row2.cells; _i < _a.length; _i++) {
          var cell = _a[_i];
          if (cell.index !== null && cell.index !== void 0) {
            while (count2 < cell.index) {
              this.csvStr += this.separator;
              count2++;
            }
            this.parseCell(cell);
          } else {
            throw Error("Cell index is missing.");
          }
        }
      }
    };
    CsvHelper2.prototype.parseCell = function(cell) {
      var csv = this.csvStr;
      if (cell.value !== void 0) {
        if (cell.value instanceof Date) {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                skeleton: cell.style.numberFormat
              }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                format: cell.style.numberFormat
              }, this.isServerRendered));
            }
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            try {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                skeleton: this.globalStyles.get(cell.style.name)
              }, this.isServerRendered));
            } catch (error) {
              csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                format: this.globalStyles.get(cell.style.name)
              }, this.isServerRendered));
            }
          } else {
            csv += cell.value;
          }
        } else if (typeof cell.value === "boolean") {
          csv += cell.value ? "TRUE" : "FALSE";
        } else if (typeof cell.value === "number") {
          if (cell.style !== void 0 && cell.style.numberFormat !== void 0) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, {
              format: cell.style.numberFormat
            }, this.isServerRendered));
          } else if (cell.style !== void 0 && cell.style.name !== void 0 && this.globalStyles.has(cell.style.name)) {
            csv += this.parseCellValue(this.formatter.displayText(cell.value, {
              format: this.globalStyles.get(cell.style.name)
            }, this.isServerRendered));
          } else {
            csv += cell.value;
          }
        } else {
          csv += this.parseCellValue(cell.value);
        }
      }
      this.csvStr = csv;
    };
    CsvHelper2.prototype.parseCellValue = function(value) {
      var val = "";
      var length = value.length;
      for (var start = 0; start < length; start++) {
        if (value[start] === '"') {
          val += value[start].replace('"', '""');
        } else {
          val += value[start];
        }
      }
      value = val;
      if (value.indexOf(this.separator) !== -1 || value.indexOf("\n") !== -1 || value.indexOf('"') !== -1) {
        return value = '"' + value + '"';
      } else {
        return value;
      }
    };
    CsvHelper2.prototype.save = function(fileName) {
      this.buffer = new Blob(["\uFEFF" + this.csvStr], {
        type: "text/csv;charset=UTF-8"
      });
      if (this.isMicrosoftBrowser) {
        navigator.msSaveBlob(this.buffer, fileName);
      } else {
        var dataUrl_1 = window.URL.createObjectURL(this.buffer);
        var dwlLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        dwlLink.download = fileName;
        dwlLink.href = dataUrl_1;
        var event_1 = document.createEvent("MouseEvent");
        event_1.initEvent("click", true, true);
        dwlLink.dispatchEvent(event_1);
        setTimeout(function() {
          window.URL.revokeObjectURL(dataUrl_1);
        });
      }
    };
    CsvHelper2.prototype.saveAsBlob = function(encodingType) {
      if (encodingType != void 0) {
        var encoding = new Encoding();
        var encodeString = "UTF-8";
        if (encodingType.toUpperCase() == "ANSI") {
          encoding.type = "Ansi";
          encodeString = "ANSI";
        } else if (encodingType.toUpperCase() == "UNICODE") {
          encoding.type = "Unicode";
          encodeString = "UNICODE";
        } else {
          encoding.type = "Utf8";
          encodeString = "UTF-8";
        }
        var buffer = encoding.getBytes(this.csvStr, 0, this.csvStr.length);
        return new Blob([buffer], {
          type: "text/csv;charset=" + encodeString
        });
      } else return new Blob(["\uFEFF" + this.csvStr], {
        type: "text/csv;charset=UTF-8"
      });
    };
    return CsvHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/blob-helper.js
var BlobHelper = (
  /** @class */
  function() {
    function BlobHelper2() {
      this.parts = [];
    }
    BlobHelper2.prototype.append = function(part) {
      this.parts.push(part);
      this.blob = void 0;
    };
    BlobHelper2.prototype.getBlob = function() {
      return new Blob(this.parts, {
        type: "text/plain"
      });
    };
    return BlobHelper2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/auto-filters.js
var AutoFilters = (
  /** @class */
  /* @__PURE__ */ function() {
    function AutoFilters2() {
    }
    return AutoFilters2;
  }()
);

// node_modules/@syncfusion/ej2-excel-export/src/workbook.js
var Workbook = (
  /** @class */
  function() {
    function Workbook2(json, saveType, culture, currencyString, separator) {
      this.sharedStringCount = 0;
      this.unitsProportions = [96 / 75, 96 / 300, 96, 96 / 25.4, 96 / 2.54, 1, 96 / 72, 96 / 72 / 12700];
      this.hyperlinkStyle = {
        fontColor: "#0000FF",
        underline: true
      };
      if (culture !== void 0) {
        this.culture = culture;
      } else {
        this.culture = "en-US";
      }
      if (currencyString !== void 0) {
        this.currency = currencyString;
      } else {
        this.currency = "USD";
      }
      this.intl = new Internationalization(this.culture);
      this.mSaveType = saveType;
      if (saveType === "xlsx") {
        this.mArchive = new ZipArchive();
        this.sharedString = [];
        this.mFonts = [];
        this.mBorders = [];
        this.mStyles = [];
        this.printTitles = /* @__PURE__ */ new Map();
        this.cellStyles = /* @__PURE__ */ new Map();
        this.mNumFmt = /* @__PURE__ */ new Map();
        this.mFills = /* @__PURE__ */ new Map();
        this.mStyles.push(new CellStyle());
        this.mFonts.push(new Font());
        this.cellStyles.set("Normal", new CellStyles());
        this.mCellXfs = [];
        this.mCellStyleXfs = [];
        this.drawingCount = 0;
        this.imageCount = 0;
        if (json.styles !== null && json.styles !== void 0) {
          this.globalStyles = /* @__PURE__ */ new Map();
          for (var i = 0; i < json.styles.length; i++) {
            if (json.styles[i].name !== void 0) {
              if (!this.cellStyles.has(json.styles[i].name)) {
                var cellStyle = new CellStyle();
                cellStyle.isGlobalStyle = true;
                this.parserCellStyle(json.styles[i], cellStyle, "none");
                var cellStylesIn = new CellStyles();
                cellStylesIn.name = cellStyle.name;
                cellStylesIn.xfId = cellStyle.index - 1;
                this.cellStyles.set(cellStylesIn.name, cellStylesIn);
                var tFormat = {};
                if (json.styles[i].numberFormat !== void 0) {
                  tFormat.format = json.styles[i].numberFormat;
                }
                if (json.styles[i].type !== void 0) {
                  tFormat.type = json.styles[i].type;
                } else {
                  tFormat.type = "datetime";
                }
                if (tFormat.format !== void 0) {
                  this.globalStyles.set(json.styles[i].name, tFormat);
                }
              } else {
                throw Error("Style name " + json.styles[i].name + " is already existed");
              }
            }
          }
        }
        if (json.worksheets !== null && json.worksheets !== void 0) {
          this.parserWorksheets(json.worksheets);
        } else {
          throw Error("Worksheet is expected.");
        }
        if (json.builtInProperties !== null && json.builtInProperties !== void 0) {
          this.builtInProperties = new BuiltInProperties();
          this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);
        }
      } else {
        this.csvHelper = new CsvHelper(json, separator);
      }
    }
    Workbook2.prototype.parserBuiltInProperties = function(jsonBuiltInProperties, builtInProperties) {
      if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== void 0) {
        builtInProperties.author = jsonBuiltInProperties.author;
      }
      if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== void 0) {
        builtInProperties.comments = jsonBuiltInProperties.comments;
      }
      if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== void 0) {
        builtInProperties.category = jsonBuiltInProperties.category;
      }
      if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== void 0) {
        builtInProperties.company = jsonBuiltInProperties.company;
      }
      if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== void 0) {
        builtInProperties.manager = jsonBuiltInProperties.manager;
      }
      if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== void 0) {
        builtInProperties.subject = jsonBuiltInProperties.subject;
      }
      if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== void 0) {
        builtInProperties.title = jsonBuiltInProperties.title;
      }
      if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== void 0) {
        builtInProperties.createdDate = jsonBuiltInProperties.createdDate;
      }
      if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== void 0) {
        builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;
      }
      if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== void 0) {
        builtInProperties.tags = jsonBuiltInProperties.tags;
      }
      if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== void 0) {
        builtInProperties.status = jsonBuiltInProperties.status;
      }
    };
    Workbook2.prototype.parserWorksheets = function(json) {
      this.worksheets = new Worksheets();
      var length = json.length;
      for (var i = 0; i < length; i++) {
        var jsonSheet = json[i];
        var sheet = new Worksheet();
        this.mergeCells = new MergeCells();
        this.mergedCellsStyle = /* @__PURE__ */ new Map();
        this.mHyperLinks = [];
        if (jsonSheet.name !== null && jsonSheet.name !== void 0) {
          sheet.name = jsonSheet.name;
        } else {
          sheet.name = "Sheet" + (i + 1).toString();
        }
        if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== void 0) {
          sheet.enableRtl = jsonSheet.enableRtl;
        }
        sheet.index = i + 1;
        if (jsonSheet.columns !== null && jsonSheet.columns !== void 0) {
          this.parserColumns(jsonSheet.columns, sheet);
        }
        if (jsonSheet.rows !== null && jsonSheet.rows !== void 0) {
          this.parserRows(jsonSheet.rows, sheet);
        }
        if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== void 0) {
          sheet.showGridLines = jsonSheet.showGridLines;
        }
        if (jsonSheet.freeze !== null && jsonSheet.freeze !== void 0) {
          this.parserFreezePanes(jsonSheet.freeze, sheet);
        }
        if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== void 0) {
          this.parserPrintTitle(jsonSheet.printTitle, sheet);
        }
        if (jsonSheet.pageSetup !== void 0) {
          if (jsonSheet.pageSetup.isSummaryRowBelow !== void 0) {
            sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;
          }
        }
        if (jsonSheet.images !== void 0) {
          this.parserImages(jsonSheet.images, sheet);
        }
        if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== void 0) {
          this.parseFilters(jsonSheet.autoFilters, sheet);
        }
        sheet.index = i + 1;
        sheet.mergeCells = this.mergeCells;
        sheet.hyperLinks = this.mHyperLinks;
        this.worksheets.push(sheet);
      }
    };
    Workbook2.prototype.mergeOptions = function(fromJson, toJson) {
      var result = {};
      this.applyProperties(fromJson, result);
      this.applyProperties(toJson, result);
      return result;
    };
    Workbook2.prototype.applyProperties = function(sourceJson, destJson) {
      var keys = Object.keys(sourceJson);
      for (var index = 0; index < keys.length; index++) {
        if (keys[index] !== "name") {
          destJson[keys[index]] = sourceJson[keys[index]];
        }
      }
    };
    Workbook2.prototype.getCellName = function(row2, column) {
      return this.getColumnName(column) + row2.toString();
    };
    Workbook2.prototype.getColumnName = function(col) {
      col--;
      var strColumnName = "";
      do {
        var iCurrentDigit = col % 26;
        col = col / 26 - 1;
        strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;
      } while (col >= 0);
      return strColumnName;
    };
    Workbook2.prototype.parserPrintTitle = function(json, sheet) {
      var printTitleName = "";
      var titleRowName;
      if (json.fromRow !== null && json.fromRow !== void 0) {
        var fromRow = json.fromRow;
        var toRow = void 0;
        if (json.toRow !== null && json.toRow !== void 0) {
          toRow = json.toRow;
        } else {
          toRow = json.fromRow;
        }
        titleRowName = "$" + fromRow + ":$" + toRow;
      }
      var titleColName;
      if (json.fromColumn !== null && json.fromColumn !== void 0) {
        var fromColumn = json.fromColumn;
        var toColumn = void 0;
        if (json.toColumn !== null && json.toColumn !== void 0) {
          toColumn = json.toColumn;
        } else {
          toColumn = json.fromColumn;
        }
        titleColName = "$" + this.getColumnName(fromColumn) + ":$" + this.getColumnName(toColumn);
      }
      if (titleRowName !== void 0) {
        printTitleName += sheet.name + "!" + titleRowName;
      }
      if (titleColName !== void 0 && titleRowName !== void 0) {
        printTitleName += "," + (sheet.name + "!" + titleColName);
      } else if (titleColName !== void 0) {
        printTitleName += sheet.name + "!" + titleColName;
      }
      if (printTitleName !== "") {
        this.printTitles.set(sheet.index - 1, printTitleName);
      }
    };
    Workbook2.prototype.parserFreezePanes = function(json, sheet) {
      sheet.freezePanes = new FreezePane();
      if (json.row !== null && json.row !== void 0) {
        sheet.freezePanes.row = json.row;
      } else {
        sheet.freezePanes.row = 0;
      }
      if (json.column !== null && json.column !== void 0) {
        sheet.freezePanes.column = json.column;
      } else {
        sheet.freezePanes.column = 0;
      }
      sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);
    };
    Workbook2.prototype.parserColumns = function(json, sheet) {
      var columnsLength = json.length;
      sheet.columns = [];
      for (var column = 0; column < columnsLength; column++) {
        var col = new Column2();
        if (json[column].index !== null && json[column].index !== void 0) {
          col.index = json[column].index;
        } else {
          throw Error("Column index is missing.");
        }
        if (json[column].width !== null && json[column].width !== void 0) {
          col.width = json[column].width;
        }
        sheet.columns.push(col);
      }
    };
    Workbook2.prototype.parserRows = function(json, sheet) {
      var rowsLength = json.length;
      sheet.rows = new Rows();
      var rowId = 0;
      for (var r = 0; r < rowsLength; r++) {
        var row2 = this.parserRow(json[r], rowId);
        rowId = row2.index;
        sheet.rows.add(row2);
      }
      this.insertMergedCellsStyle(sheet);
    };
    Workbook2.prototype.insertMergedCellsStyle = function(sheet) {
      var _this = this;
      if (this.mergeCells.length > 0) {
        this.mergedCellsStyle.forEach(function(value, key) {
          var row2 = sheet.rows.filter(function(item) {
            return item.index === value.y;
          })[0];
          if (!isNullOrUndefined(row2)) {
            var cell = row2.cells.filter(function(item) {
              return item.index === value.x;
            })[0];
            if (!isNullOrUndefined(cell)) {
              cell.styleIndex = value.styleIndex;
            } else {
              var cells = row2.cells.filter(function(item) {
                return item.index <= value.x;
              });
              var insertIndex = 0;
              if (cells.length > 0) {
                insertIndex = row2.cells.indexOf(cells[cells.length - 1]) + 1;
              }
              row2.cells.splice(insertIndex, 0, _this.createCell(value, key));
            }
          } else {
            var rows = sheet.rows.filter(function(item) {
              return item.index <= value.y;
            });
            var rowToInsert = new Row2();
            rowToInsert.index = value.y;
            rowToInsert.cells = new Cells();
            rowToInsert.cells.add(_this.createCell(value, key));
            var insertIndex = 0;
            if (rows.length > 0) {
              insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;
            }
            sheet.rows.splice(insertIndex, 0, rowToInsert);
          }
        });
      }
    };
    Workbook2.prototype.createCell = function(value, key) {
      var cellToInsert = new Cell2();
      cellToInsert.refName = key;
      cellToInsert.index = value.x;
      cellToInsert.cellStyle = new CellStyle();
      cellToInsert.styleIndex = value.styleIndex;
      return cellToInsert;
    };
    Workbook2.prototype.parserRow = function(json, rowIndex) {
      var row2 = new Row2();
      if (json.height !== null && json.height !== void 0) {
        row2.height = json.height;
      }
      if (json.index !== null && json.index !== void 0) {
        row2.index = json.index;
      } else {
        throw Error("Row index is missing.");
      }
      if (json.grouping !== null && json.grouping !== void 0) {
        this.parseGrouping(json.grouping, row2);
      }
      this.parseCells(json.cells, row2);
      return row2;
    };
    Workbook2.prototype.parseGrouping = function(json, row2) {
      row2.grouping = new Grouping();
      if (json.outlineLevel !== void 0) {
        row2.grouping.outlineLevel = json.outlineLevel;
      }
      if (json.isCollapsed !== void 0) {
        row2.grouping.isCollapsed = json.isCollapsed;
      }
      if (json.isHidden !== void 0) {
        row2.grouping.isHidden = json.isHidden;
      }
    };
    Workbook2.prototype.parseCells = function(json, row2) {
      row2.cells = new Cells();
      var cellsLength = json !== void 0 ? json.length : 0;
      var spanMin = 1;
      var spanMax = 1;
      var curCellIndex = 0;
      for (var cellId = 0; cellId < cellsLength; cellId++) {
        var jsonCell = json[cellId];
        var cell = new Cell2();
        if (jsonCell.index !== null && jsonCell.index !== void 0) {
          cell.index = jsonCell.index;
        } else {
          throw Error("Cell index is missing.");
        }
        if (cell.index < spanMin) {
          spanMin = cell.index;
        } else if (cell.index > spanMax) {
          spanMax = cell.index;
        }
        cell.refName = this.getCellName(row2.index, cell.index);
        if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== void 0) {
          cell.rowSpan = jsonCell.rowSpan - 1;
        } else {
          cell.rowSpan = 0;
        }
        if (jsonCell.colSpan !== null && jsonCell.colSpan !== void 0) {
          cell.colSpan = jsonCell.colSpan - 1;
        } else {
          cell.colSpan = 0;
        }
        if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== void 0) {
          var hyperLink = new HyperLink();
          if (jsonCell.hyperlink.target !== void 0) {
            hyperLink.target = jsonCell.hyperlink.target;
            if (jsonCell.hyperlink.displayText !== void 0) {
              cell.value = jsonCell.hyperlink.displayText;
            } else {
              cell.value = jsonCell.hyperlink.target;
            }
            cell.type = this.getCellValueType(cell.value);
            hyperLink.ref = cell.refName;
            hyperLink.rId = this.mHyperLinks.length + 1;
            this.mHyperLinks.push(hyperLink);
            cell.cellStyle = new CellStyle();
            this.parserCellStyle(jsonCell.style !== void 0 ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, "string");
            cell.styleIndex = cell.cellStyle.index;
          }
        }
        if (jsonCell.formula !== null && jsonCell.formula !== void 0) {
          cell.formula = jsonCell.formula;
          cell.type = "formula";
        }
        if (jsonCell.value !== null && jsonCell.value !== void 0) {
          if (cell.formula !== void 0) {
            cell.value = 0;
          } else {
            cell.value = jsonCell.value;
            cell.type = this.getCellValueType(cell.value);
          }
        }
        if (jsonCell.style !== null && jsonCell.style !== void 0 && cell.styleIndex === void 0) {
          cell.cellStyle = new CellStyle();
          if (cell.value instanceof Date) {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);
          } else {
            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);
          }
          cell.styleIndex = cell.cellStyle.index;
        } else if (cell.value instanceof Date) {
          cell.cellStyle = new CellStyle();
          this.parserCellStyle({}, cell.cellStyle, cell.type, 14);
          cell.styleIndex = cell.cellStyle.index;
        }
        this.parseCellType(cell);
        this.mergeCells = this.processMergeCells(cell, row2.index, this.mergeCells);
        row2.cells.add(cell);
        curCellIndex = cell.index + 1;
      }
      row2.spans = spanMin + ":" + spanMax;
    };
    Workbook2.prototype.GetColors = function() {
      var colors;
      colors = /* @__PURE__ */ new Map();
      colors.set("WHITE", "FFFFFFFF");
      colors.set("SILVER", "FFC0C0C0");
      colors.set("GRAY", "FF808080");
      colors.set("BLACK", "FF000000");
      colors.set("RED", "FFFF0000");
      colors.set("MAROON", "FF800000");
      colors.set("YELLOW", "FFFFFF00");
      colors.set("OLIVE", "FF808000");
      colors.set("LIME", "FF00FF00");
      colors.set("GREEN", "FF008000");
      colors.set("AQUA", "FF00FFFF");
      colors.set("TEAL", "FF008080");
      colors.set("BLUE", "FF0000FF");
      colors.set("NAVY", "FF000080");
      colors.set("FUCHSIA", "FFFF00FF");
      colors.set("PURPLE", "FF800080");
      return colors;
    };
    Workbook2.prototype.processColor = function(colorVal) {
      if (colorVal.indexOf("#") === 0) {
        return colorVal.replace("#", "FF");
      }
      colorVal = colorVal.toUpperCase();
      this.rgbColors = this.GetColors();
      if (this.rgbColors.has(colorVal)) {
        colorVal = this.rgbColors.get(colorVal);
      } else {
        colorVal = "FF000000";
      }
      return colorVal;
    };
    Workbook2.prototype.processCellValue = function(value, cell) {
      var cellValue = value;
      if (value.indexOf("<font") !== -1 || value.indexOf("<a") !== -1 || value.indexOf("<b>") !== -1 || value.indexOf("<i>") !== -1 || value.indexOf("<u>") !== -1) {
        var processedVal = "";
        var startindex = value.indexOf("<", 0);
        var endIndex = value.indexOf(">", startindex + 1);
        if (startindex >= 0 && endIndex >= 0) {
          if (startindex !== 0) {
            processedVal += '<r><t xml:space="preserve">' + this.processString(value.substring(0, startindex)) + "</t></r>";
          }
          while (startindex >= 0 && endIndex >= 0) {
            endIndex = value.indexOf(">", startindex + 1);
            if (endIndex >= 0) {
              var subString = value.substring(startindex + 1, endIndex);
              startindex = value.indexOf("<", endIndex + 1);
              if (startindex < 0) {
                startindex = cellValue.length;
              }
              var text = cellValue.substring(endIndex + 1, startindex);
              if (text.length !== 0) {
                var subSplit = subString.split(" ");
                if (subSplit.length > 0) {
                  processedVal += "<r><rPr>";
                }
                if (subSplit.length > 1) {
                  for (var _i = 0, subSplit_1 = subSplit; _i < subSplit_1.length; _i++) {
                    var element = subSplit_1[_i];
                    var start = element.trim().substring(0, 5);
                    switch (start) {
                      case "size=":
                        processedVal += '<sz val="' + element.substring(6, element.length - 1) + '"/>';
                        break;
                      case "face=":
                        processedVal += '<rFont val="' + element.substring(6, element.length - 1) + '"/>';
                        break;
                      case "color":
                        processedVal += '<color rgb="' + this.processColor(element.substring(7, element.length - 1)) + '"/>';
                        break;
                      case "href=":
                        var hyperLink = new HyperLink();
                        hyperLink.target = element.substring(6, element.length - 1).trim();
                        hyperLink.ref = cell.refName;
                        hyperLink.rId = this.mHyperLinks.length + 1;
                        this.mHyperLinks.push(hyperLink);
                        processedVal += '<color rgb="FF0000FF"/><u/><b/>';
                        break;
                    }
                  }
                } else if (subSplit.length === 1) {
                  var style = subSplit[0].trim();
                  switch (style) {
                    case "b":
                      processedVal += "<b/>";
                      break;
                    case "i":
                      processedVal += "<i/>";
                      break;
                    case "u":
                      processedVal += "<u/>";
                      break;
                  }
                }
                processedVal += '</rPr><t xml:space="preserve">' + this.processString(text) + "</t></r>";
              }
            }
          }
          if (processedVal === "") {
            return cellValue;
          }
          return processedVal;
        } else {
          return cellValue;
        }
      } else {
        return cellValue;
      }
    };
    Workbook2.prototype.applyGlobalStyle = function(json, cellStyle) {
      var index = 0;
      if (this.cellStyles.has(json.name)) {
        cellStyle.index = this.mStyles.filter(function(a) {
          return a.name === json.name;
        })[0].index;
        cellStyle.name = json.name;
      }
    };
    Workbook2.prototype.parserCellStyle = function(json, cellStyle, cellType, defStyleIndex) {
      if (json.name !== null && json.name !== void 0) {
        if (cellStyle.isGlobalStyle) {
          cellStyle.name = json.name;
        } else {
          this.applyGlobalStyle(json, cellStyle);
          return;
        }
      }
      if (json.backColor !== null && json.backColor !== void 0) {
        cellStyle.backColor = json.backColor;
      }
      cellStyle.borders = new Borders();
      if (json.borders !== null && json.borders !== void 0) {
        this.parserBorder(json.borders, cellStyle.borders.all);
      }
      if (json.leftBorder !== null && json.leftBorder !== void 0) {
        this.parserBorder(json.leftBorder, cellStyle.borders.left);
      }
      if (json.rightBorder !== null && json.rightBorder !== void 0) {
        this.parserBorder(json.rightBorder, cellStyle.borders.right);
      }
      if (json.topBorder !== null && json.topBorder !== void 0) {
        this.parserBorder(json.topBorder, cellStyle.borders.top);
      }
      if (json.bottomBorder !== null && json.bottomBorder !== void 0) {
        this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);
      }
      if (json.fontName !== null && json.fontName !== void 0) {
        cellStyle.fontName = json.fontName;
      }
      if (json.fontSize !== null && json.fontSize !== void 0) {
        cellStyle.fontSize = json.fontSize;
      }
      if (json.fontColor !== null && json.fontColor !== void 0) {
        cellStyle.fontColor = json.fontColor;
      }
      if (json.italic !== null && json.italic !== void 0) {
        cellStyle.italic = json.italic;
      }
      if (json.bold !== null && json.bold !== void 0) {
        cellStyle.bold = json.bold;
      }
      if (json.hAlign !== null && json.hAlign !== void 0) {
        cellStyle.hAlign = json.hAlign.toLowerCase();
      }
      if (json.indent !== null && json.indent !== void 0) {
        cellStyle.indent = json.indent;
        if (!(cellStyle.hAlign === "left" || cellStyle.hAlign === "right")) {
          cellStyle.hAlign = "left";
        }
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        cellStyle.rotation = json.rotation;
      }
      if (json.vAlign !== null && json.vAlign !== void 0) {
        cellStyle.vAlign = json.vAlign.toLowerCase();
      }
      if (json.underline !== null && json.underline !== void 0) {
        cellStyle.underline = json.underline;
      }
      if (json.strikeThrough !== null && json.strikeThrough !== void 0) {
        cellStyle.strikeThrough = json.strikeThrough;
      }
      if (json.wrapText !== null && json.wrapText !== void 0) {
        cellStyle.wrapText = json.wrapText;
      }
      if (json.numberFormat !== null && json.numberFormat !== void 0) {
        if (json.type !== null && json.type !== void 0) {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);
        } else {
          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);
        }
      } else if (defStyleIndex !== void 0) {
        cellStyle.numFmtId = 14;
        cellStyle.numberFormat = "GENERAL";
      } else {
        cellStyle.numberFormat = "GENERAL";
      }
      cellStyle.index = this.processCellStyle(cellStyle);
    };
    Workbook2.prototype.switchNumberFormat = function(numberFormat, type) {
      var format = this.getNumberFormat(numberFormat, type);
      if (format !== numberFormat) {
        var numFmt = this.mNumFmt.get(numberFormat);
        if (numFmt !== void 0) {
          numFmt.formatCode = format;
          if (this.mNumFmt.has(format)) {
            for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
              var cellStyleXfs = _a[_i];
              if (cellStyleXfs.numFmtId === numFmt.numFmtId) {
                cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
            for (var _b = 0, _c = this.mCellXfs; _b < _c.length; _b++) {
              var cellXfs = _c[_b];
              if (cellXfs.numFmtId === numFmt.numFmtId) {
                cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;
              }
            }
          }
        }
      }
    };
    Workbook2.prototype.changeNumberFormats = function(value) {
      if (typeof value == "string") {
        var regex = new RegExp(this.currency, "g");
        value = value.replace(regex, "[$" + this.currency + "]");
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          value[i] = value[i].replace(this.currency, "[$" + this.currency + "]");
        }
      }
      return value;
    };
    Workbook2.prototype.getNumberFormat = function(numberFormat, type) {
      var returnFormat;
      switch (type) {
        case "number":
          try {
            returnFormat = this.intl.getNumberPattern({
              format: numberFormat,
              currency: this.currency,
              useGrouping: true
            }, true);
            if (this.currency.length > 1) {
              returnFormat = this.changeNumberFormats(returnFormat);
            }
          } catch (error) {
            returnFormat = numberFormat;
          }
          break;
        case "datetime":
          try {
            returnFormat = this.intl.getDatePattern({
              skeleton: numberFormat,
              type: "dateTime"
            }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({
                format: numberFormat,
                type: "dateTime"
              }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "date":
          try {
            returnFormat = this.intl.getDatePattern({
              skeleton: numberFormat,
              type: "date"
            }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({
                format: numberFormat,
                type: "date"
              }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        case "time":
          try {
            returnFormat = this.intl.getDatePattern({
              skeleton: numberFormat,
              type: "time"
            }, true);
          } catch (error) {
            try {
              returnFormat = this.intl.getDatePattern({
                format: numberFormat,
                type: "time"
              }, true);
            } catch (error2) {
              returnFormat = numberFormat;
            }
          }
          break;
        default:
          returnFormat = numberFormat;
          break;
      }
      return returnFormat;
    };
    Workbook2.prototype.parserBorder = function(json, border) {
      if (json.color !== null && json.color !== void 0) {
        border.color = json.color;
      } else {
        border.color = "#000000";
      }
      if (json.lineStyle !== null && json.lineStyle !== void 0) {
        border.lineStyle = json.lineStyle;
      } else {
        border.lineStyle = "thin";
      }
    };
    Workbook2.prototype.processCellStyle = function(style) {
      if (style.isGlobalStyle) {
        this.processNumFormatId(style);
        this.mStyles.push(style);
        return this.mStyles.length;
      } else {
        var compareResult = this.compareStyle(style);
        if (!compareResult.result) {
          this.processNumFormatId(style);
          this.mStyles.push(style);
          return this.mStyles.length;
        } else {
          return compareResult.index;
        }
      }
    };
    Workbook2.prototype.processNumFormatId = function(style) {
      if (style.numberFormat !== "GENERAL" && !this.mNumFmt.has(style.numberFormat)) {
        var id = this.mNumFmt.size + 164;
        this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
      }
    };
    Workbook2.prototype.isNewFont = function(toCompareStyle) {
      var result = false;
      var index = 0;
      for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
        var font = _a[_i];
        index++;
        var fontColor = void 0;
        if (toCompareStyle.fontColor !== void 0) {
          fontColor = "FF" + toCompareStyle.fontColor.replace("#", "");
        }
        result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.strike === toCompareStyle.strikeThrough && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize;
        if (result) {
          break;
        }
      }
      index = index - 1;
      return {
        index,
        result
      };
    };
    Workbook2.prototype.isNewBorder = function(toCompareStyle) {
      var bStyle = new CellStyle();
      if (this.isAllBorder(toCompareStyle.borders)) {
        return bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle;
      } else {
        return bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
      }
    };
    Workbook2.prototype.isAllBorder = function(toCompareBorder) {
      var allBorderStyle = new CellStyle();
      return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;
    };
    Workbook2.prototype.compareStyle = function(toCompareStyle) {
      var result = true;
      var index = 0;
      var globalStyleIndex = 0;
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var baseStyle = _a[_i];
        result = baseStyle.isGlobalStyle ? false : baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.strikeThrough === toCompareStyle.strikeThrough && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.rotation === toCompareStyle.rotation && baseStyle.wrapText === toCompareStyle.wrapText && baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle && baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
        if (result) {
          index = baseStyle.index;
          break;
        }
      }
      return {
        index,
        result
      };
    };
    Workbook2.prototype.contains = function(array, item) {
      var index = array.indexOf(item);
      return index > -1 && index < array.length;
    };
    Workbook2.prototype.getCellValueType = function(value) {
      if (value instanceof Date) {
        return "datetime";
      } else if (typeof value === "boolean") {
        return "boolean";
      } else if (typeof value === "number") {
        return "number";
      } else {
        return "string";
      }
    };
    Workbook2.prototype.parseCellType = function(cell) {
      var type = cell.type;
      var saveType;
      var value = cell.value;
      switch (type) {
        case "datetime":
          value = this.toOADate(value);
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              var value_1 = this.globalStyles.get(cell.cellStyle.name);
              this.switchNumberFormat(value_1.format, value_1.type);
            }
          }
          saveType = "n";
          break;
        case "boolean":
          value = value ? 1 : 0;
          saveType = "b";
          break;
        case "number":
          saveType = "n";
          if (cell.cellStyle !== void 0 && cell.cellStyle.name !== void 0) {
            if (this.globalStyles.has(cell.cellStyle.name)) {
              this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, "number");
            }
          }
          break;
        case "string":
          this.sharedStringCount++;
          saveType = "s";
          var sstvalue = this.processCellValue(value, cell);
          if (!this.contains(this.sharedString, sstvalue)) {
            this.sharedString.push(sstvalue);
          }
          value = this.sharedString.indexOf(sstvalue);
          break;
        default:
          break;
      }
      cell.saveType = saveType;
      cell.value = value;
    };
    Workbook2.prototype.parserImages = function(json, sheet) {
      var imagesLength = json.length;
      sheet.images = [];
      var imageId = 0;
      for (var p = 0; p < imagesLength; p++) {
        var image = this.parserImage(json[p]);
        sheet.images.push(image);
      }
    };
    Workbook2.prototype.parseFilters = function(json, sheet) {
      sheet.autoFilters = new AutoFilters();
      if (json.row !== null && json.row !== void 0) sheet.autoFilters.row = json.row;
      else throw new Error("Argument Null Exception: row null or empty");
      if (json.lastRow !== null && json.lastRow !== void 0) sheet.autoFilters.lastRow = json.lastRow;
      else throw new Error("Argument Null Exception: lastRow cannot be null or empty");
      if (json.column !== null && json.column !== void 0) sheet.autoFilters.column = json.column;
      else throw new Error("Argument Null Exception: column cannot be null or empty");
      if (json.lastColumn !== null && json.row !== void 0) sheet.autoFilters.lastColumn = json.lastColumn;
      else throw new Error("Argument Null Exception: lastColumn cannot be null or empty");
    };
    Workbook2.prototype.parserImage = function(json) {
      var image = new Image();
      if (json.image !== null && json.image !== void 0) {
        image.image = json.image;
      }
      if (json.row !== null && json.row !== void 0) {
        image.row = json.row;
      }
      if (json.column !== null && json.column !== void 0) {
        image.column = json.column;
      }
      if (json.lastRow !== null && json.lastRow !== void 0) {
        image.lastRow = json.lastRow;
      }
      if (json.lastColumn !== null && json.lastColumn !== void 0) {
        image.lastColumn = json.lastColumn;
      }
      if (json.width !== null && json.width !== void 0) {
        image.width = json.width;
      }
      if (json.height !== null && json.height !== void 0) {
        image.height = json.height;
      }
      if (json.horizontalFlip !== null && json.horizontalFlip !== void 0) {
        image.horizontalFlip = json.horizontalFlip;
      }
      if (json.verticalFlip !== null && json.verticalFlip !== void 0) {
        image.verticalFlip = json.verticalFlip;
      }
      if (json.rotation !== null && json.rotation !== void 0) {
        image.rotation = json.rotation;
      }
      return image;
    };
    Workbook2.prototype.saveAsBlob = function(blobSaveType, encodingType) {
      var _this = this;
      switch (blobSaveType) {
        case "text/csv":
          return new Promise(function(resolve, reject) {
            var obj = {};
            obj.blobData = _this.csvHelper.saveAsBlob(encodingType);
            resolve(obj);
          });
        default:
          return new Promise(function(resolve, reject) {
            _this.saveInternal();
            _this.mArchive.saveAsBlob().then(function(blob) {
              var obj = {};
              obj.blobData = new Blob([blob], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
              });
              resolve(obj);
            });
          });
      }
    };
    Workbook2.prototype.save = function(fileName, proxyUrl) {
      var _this = this;
      if (fileName === null || fileName === void 0 || fileName === "") {
        throw new Error("Argument Null Exception: fileName cannot be null or empty");
      }
      var xlsxMatch = fileName.match(".xlsx$");
      var csvMatch = fileName.match(".csv$");
      if (xlsxMatch !== null && xlsxMatch[0] === "." + this.mSaveType) {
        this.saveInternal();
        this.mArchive.save(fileName).then(function() {
          _this.mArchive.destroy();
        });
      } else if (csvMatch !== null && csvMatch[0] === "." + this.mSaveType) {
        this.csvHelper.save(fileName);
      } else {
        throw Error("Save type and file extension is different.");
      }
    };
    Workbook2.prototype.saveInternal = function() {
      this.saveWorkbook();
      this.saveWorksheets();
      this.saveSharedString();
      this.saveStyles();
      this.saveApp(this.builtInProperties);
      this.saveCore(this.builtInProperties);
      this.saveContentType();
      this.saveTopLevelRelation();
      this.saveWorkbookRelation();
    };
    Workbook2.prototype.saveWorkbook = function() {
      var workbookTemp = '<?xml version="1.0" encoding="utf-8"?><workbook xmlns:r = "http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns= "http://schemas.openxmlformats.org/spreadsheetml/2006/main"><workbookPr codeName="ThisWorkbook" defaultThemeVersion= "153222"/><bookViews><workbookView activeTab="0"/></bookViews>';
      var sheets = "<sheets>";
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        var sheetName = this.worksheets[i].name;
        sheetName = sheetName.replace("&", "&amp;");
        sheetName = sheetName.replace("<", "&lt;");
        sheetName = sheetName.replace(">", "&gt;");
        sheetName = sheetName.replace('"', "&quot;");
        sheets += '<sheet name="' + sheetName + '" sheetId="' + (i + 1).toString() + '" r:id ="rId' + (i + 1).toString() + '" />';
      }
      sheets += "</sheets>";
      workbookTemp += sheets;
      if (this.printTitles.size > 0) {
        var printTitle_1 = "<definedNames>";
        this.printTitles.forEach(function(value, key) {
          printTitle_1 += '<definedName name="_xlnm.Print_Titles" localSheetId="' + key + '">' + value + "</definedName>";
        });
        printTitle_1 += "</definedNames>";
        workbookTemp += printTitle_1;
      }
      this.addToArchive(workbookTemp + "</workbook>", "xl/workbook.xml");
    };
    Workbook2.prototype.saveWorksheets = function() {
      var length = this.worksheets.length;
      for (var i = 0; i < length; i++) {
        this.saveWorksheet(this.worksheets[i], i);
      }
    };
    Workbook2.prototype.saveWorksheet = function(sheet, index) {
      var sheetBlob = new BlobHelper();
      var sheetString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><worksheet xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      if (!sheet.isSummaryRowBelow) {
        sheetString += '<sheetPr><outlinePr summaryBelow="0" ></outlinePr></sheetPr>';
      } else {
        sheetString += "<sheetPr />";
      }
      sheetString += this.saveSheetView(sheet);
      if (sheet.columns !== void 0) {
        var colString = "<cols>";
        for (var _i = 0, _a = sheet.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          if (column.width !== void 0) {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="' + this.pixelsToColumnWidth(column.width) + '" customWidth="1" />';
          } else {
            colString += '<col min="' + column.index + '" max="' + column.index + '" width="8.43" customWidth="1" />';
          }
        }
        sheetString += colString + "</cols>";
      }
      sheetString += "<sheetData>";
      sheetBlob.append(sheetString);
      sheetString = "";
      if (sheet.rows !== void 0) {
        for (var _b = 0, _c = sheet.rows; _b < _c.length; _b++) {
          var row2 = _c[_b];
          var rowString = '<row r="' + row2.index + '" ';
          if (!isNullOrUndefined(row2.spans)) {
            rowString += 'spans="' + row2.spans + '" ';
          }
          if (row2.height !== void 0) {
            rowString += 'ht="' + this.pixelsToRowHeight(row2.height) + '" customHeight="1" ';
          }
          if (row2.grouping !== void 0) {
            if (row2.grouping.isHidden) {
              rowString += 'hidden="1" ';
            }
            if (row2.grouping.outlineLevel !== void 0) {
              rowString += 'outlineLevel="' + row2.grouping.outlineLevel + '" ';
            }
            if (row2.grouping.isCollapsed) {
              rowString += 'collapsed="1" ';
            }
          }
          rowString += ">";
          for (var _d = 0, _e = row2.cells; _d < _e.length; _d++) {
            var cell = _e[_d];
            if (cell !== void 0 && (cell.value !== void 0 || cell.cellStyle !== void 0)) {
              rowString += '<c r="' + cell.refName + '" ';
              if (cell.saveType !== void 0) {
                rowString += 't="' + cell.saveType + '" ';
              }
              if (cell.styleIndex !== void 0) {
                rowString += 's="' + cell.styleIndex + '" ';
              }
              rowString += " >";
              if (cell.formula !== void 0) {
                rowString += "<f>" + cell.formula + "</f>";
              }
              if (cell.value !== void 0) {
                rowString += "<v>" + cell.value + "</v></c>";
              } else {
                rowString += "</c>";
              }
            }
          }
          rowString += "</row>";
          sheetBlob.append(rowString);
        }
      }
      sheetString += "</sheetData>";
      if (sheet.autoFilters !== null && sheet.autoFilters !== void 0) sheetString += '<autoFilter ref="' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ":" + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '"/>';
      if (sheet.mergeCells.length > 0) {
        sheetString += '<mergeCells count="' + sheet.mergeCells.length + '">';
        for (var _f = 0, _g = sheet.mergeCells; _f < _g.length; _f++) {
          var mCell = _g[_f];
          sheetString += '<mergeCell ref="' + mCell.ref + '" />';
        }
        sheetString += "</mergeCells>";
      }
      if (sheet.hyperLinks.length > 0) {
        sheetString += "<hyperlinks>";
        for (var _h = 0, _j = sheet.hyperLinks; _h < _j.length; _h++) {
          var hLink = _j[_h];
          sheetString += '<hyperlink ref="' + hLink.ref + '" r:id="rId' + hLink.rId + '" />';
        }
        sheetString += "</hyperlinks>";
      }
      sheetString += '<pageMargins left="0.75" right="0.75" top="1" bottom="1" header="0.5" footer="0.5" /><headerFooter scaleWithDoc="1" alignWithMargins="0" differentFirst="0" differentOddEven="0" />';
      if (sheet.images != void 0 && sheet.images.length > 0) {
        this.drawingCount++;
        this.saveDrawings(sheet, sheet.index);
        sheetString += '<drawing r:id="rId' + (sheet.hyperLinks.length + 1) + '"/>';
      }
      this.addToArchive(this.saveSheetRelations(sheet), "xl/worksheets/_rels/sheet" + sheet.index + ".xml.rels");
      sheetBlob.append(sheetString + "</worksheet>");
      this.addToArchive(sheetBlob.getBlob(), "xl/worksheets/sheet" + (index + 1) + ".xml");
    };
    Workbook2.prototype.saveDrawings = function(sheet, index) {
      var drawings = new BlobHelper();
      var sheetDrawingString = '<xdr:wsDr xmlns:xdr="http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main">';
      if (sheet.images !== void 0) {
        var imgId = 0;
        for (var _i = 0, _a = sheet.images; _i < _a.length; _i++) {
          var pic = _a[_i];
          if (pic.height !== void 0 && pic.width !== void 0) {
            this.updatelastRowOffset(sheet, pic);
            this.updatelastColumnOffSet(sheet, pic);
            pic.lastRow -= 1;
            pic.lastColumn -= 1;
          } else if (pic.lastRow !== void 0 && pic.lastColumn !== void 0) {
            pic.lastRowOffset = 0;
            pic.lastColOffset = 0;
          }
          imgId++;
          sheetDrawingString += '<xdr:twoCellAnchor editAs="oneCell">';
          sheetDrawingString += "<xdr:from><xdr:col>";
          sheetDrawingString += pic.column - 1;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.row - 1;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += 0;
          sheetDrawingString += "</xdr:rowOff></xdr:from>";
          sheetDrawingString += "<xdr:to><xdr:col>";
          sheetDrawingString += pic.lastColumn;
          sheetDrawingString += "</xdr:col><xdr:colOff>";
          sheetDrawingString += pic.lastColOffset;
          sheetDrawingString += "</xdr:colOff><xdr:row>";
          sheetDrawingString += pic.lastRow;
          sheetDrawingString += "</xdr:row><xdr:rowOff>";
          sheetDrawingString += pic.lastRowOffset;
          sheetDrawingString += "</xdr:rowOff></xdr:to>";
          sheetDrawingString += "<xdr:pic>";
          sheetDrawingString += "<xdr:nvPicPr>";
          sheetDrawingString += '<xdr:cNvPr id="' + imgId + '" name="Picture ' + imgId + '"> </xdr:cNvPr>';
          sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect="1"/></xdr:cNvPicPr> </xdr:nvPicPr>';
          sheetDrawingString += "<xdr:blipFill>";
          sheetDrawingString += '<a:blip xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" r:embed="rId' + imgId + '" cstate="print">';
          sheetDrawingString += "</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>";
          sheetDrawingString += "<xdr:spPr>";
          sheetDrawingString += "<a:xfrm";
          if (pic.rotation != void 0 && pic.rotation <= 3600 && pic.rotation >= -3600) {
            sheetDrawingString += ' rot="' + pic.rotation * 6e4 + '"';
          }
          if (pic.verticalFlip != void 0 && pic.verticalFlip != false) {
            sheetDrawingString += ' flipV="1"';
          }
          if (pic.horizontalFlip != void 0 && pic.horizontalFlip != false) {
            sheetDrawingString += ' flipH="1"';
          }
          sheetDrawingString += "/>";
          sheetDrawingString += '<a:prstGeom prst="rect"><a:avLst /></a:prstGeom></xdr:spPr>';
          sheetDrawingString += "</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>";
          var imageFile = new BlobHelper();
          var imageData = this.convertBase64toImage(pic.image);
          this.imageCount += 1;
          this.addToArchive(imageData, "xl/media/image" + this.imageCount + ".png");
        }
        drawings.append(sheetDrawingString);
        drawings.append("</xdr:wsDr>");
        this.saveDrawingRelations(sheet);
        this.addToArchive(drawings.getBlob(), "xl/drawings/drawing" + this.drawingCount + ".xml");
      }
    };
    Workbook2.prototype.updatelastRowOffset = function(sheet, picture) {
      var iCurHeight = picture.height;
      var iCurRow = picture.row;
      var iCurOffset = 0;
      while (iCurHeight >= 0) {
        var iRowHeight = 0;
        if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0) iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
        else iRowHeight = this.convertToPixels(15);
        var iSpaceInCell = iRowHeight - iCurOffset * iRowHeight / 256;
        if (iSpaceInCell > iCurHeight) {
          picture.lastRow = iCurRow;
          picture.lastRowOffset = iCurOffset + iCurHeight * 256 / iRowHeight;
          var rowHiddenHeight = 0;
          if (sheet.rows !== void 0 && sheet.rows[iCurRow - 1] !== void 0) rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === void 0 ? 15 : sheet.rows[iCurRow - 1].height);
          else rowHiddenHeight = this.convertToPixels(15);
          picture.lastRowOffset = rowHiddenHeight * picture.lastRowOffset / 256;
          picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurHeight -= iSpaceInCell;
          iCurRow++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.updatelastColumnOffSet = function(sheet, picture) {
      var iCurWidth = picture.width;
      var iCurCol = picture.column;
      var iCurOffset = 0;
      while (iCurWidth >= 0) {
        var iColWidth = 0;
        if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0) iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
        else iColWidth = this.ColumnWidthToPixels(8.43);
        var iSpaceInCell = iColWidth - iCurOffset * iColWidth / 1024;
        if (iSpaceInCell > iCurWidth) {
          picture.lastColumn = iCurCol;
          picture.lastColOffset = iCurOffset + iCurWidth * 1024 / iColWidth;
          var colHiddenWidth = 0;
          if (sheet.columns !== void 0 && sheet.columns[iCurCol - 1] !== void 0) colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === void 0 ? 8.43 : sheet.columns[iCurCol - 1].width);
          else colHiddenWidth = this.ColumnWidthToPixels(8.43);
          picture.lastColOffset = colHiddenWidth * picture.lastColOffset / 1024;
          picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);
          break;
        } else {
          iCurWidth -= iSpaceInCell;
          iCurCol++;
          iCurOffset = 0;
        }
      }
    };
    Workbook2.prototype.convertToPixels = function(value) {
      return value * this.unitsProportions[6];
    };
    Workbook2.prototype.convertBase64toImage = function(img) {
      var byteStr = window.atob(img);
      var buffer = new ArrayBuffer(byteStr.length);
      var data = new Uint8Array(buffer);
      for (var i = 0; i < byteStr.length; i++) {
        data[i] = byteStr.charCodeAt(i);
      }
      var blob = new Blob([data], {
        type: "image/png"
      });
      return blob;
    };
    Workbook2.prototype.saveDrawingRelations = function(sheet) {
      var drawingRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = sheet.images.length;
      var id = this.imageCount - sheet.images.length;
      for (var i = 1; i <= length; i++) {
        id++;
        drawingRelation += '<Relationship Id="rId' + i + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="../media/image' + id + '.png" />';
      }
      this.addToArchive(drawingRelation + "</Relationships>", "xl/drawings/_rels/drawing" + this.drawingCount + ".xml.rels");
    };
    Workbook2.prototype.pixelsToColumnWidth = function(pixels) {
      var dDigitWidth = 7;
      var val = pixels > dDigitWidth + 5 ? this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 : pixels / (dDigitWidth + 5);
      return val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
    };
    Workbook2.prototype.ColumnWidthToPixels = function(val) {
      var dDigitWidth = 7;
      var fileWidth = val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256 / 256 : val * (dDigitWidth + 5) / dDigitWidth * 256 / 256;
      return this.trunc((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256 * dDigitWidth);
    };
    Workbook2.prototype.trunc = function(x) {
      var n = x - x % 1;
      return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;
    };
    Workbook2.prototype.pixelsToRowHeight = function(pixels) {
      return pixels * this.unitsProportions[5] / this.unitsProportions[6];
    };
    Workbook2.prototype.saveSheetRelations = function(sheet) {
      var relStr = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      for (var _i = 0, _a = sheet.hyperLinks; _i < _a.length; _i++) {
        var hLink = _a[_i];
        relStr += '<Relationship Id="rId' + hLink.rId + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" Target="' + this.processString(hLink.target) + '" TargetMode="External" />';
      }
      if (sheet.images != void 0 && sheet.images.length > 0) {
        relStr += '<Relationship Id="rId' + (sheet.hyperLinks.length + 1) + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing" Target="../drawings/drawing' + this.drawingCount + '.xml" />';
      }
      relStr += "</Relationships>";
      return relStr;
    };
    Workbook2.prototype.saveSheetView = function(sheet) {
      var paneString = '<sheetViews><sheetView workbookViewId="0" ';
      if (sheet.enableRtl === true) {
        paneString += 'rightToLeft="1"';
      }
      if (sheet.showGridLines === false) {
        paneString += 'showGridLines="0" >';
      } else {
        paneString += ">";
      }
      if (sheet.freezePanes !== void 0) {
        paneString += '<pane state="frozen" topLeftCell="' + sheet.freezePanes.leftCell + '" ';
        if (sheet.freezePanes.row !== 0) {
          paneString += 'ySplit="' + sheet.freezePanes.row + '" ';
        }
        if (sheet.freezePanes.column !== 0) {
          paneString += 'xSplit="' + sheet.freezePanes.column + '" ';
        }
        paneString += "/>";
      }
      paneString += "</sheetView></sheetViews > ";
      return paneString;
    };
    Workbook2.prototype.saveSharedString = function() {
      var length = this.sharedString.length;
      if (length > 0) {
        var sstStart = '<?xml version="1.0" encoding="utf-8"?><sst uniqueCount="' + length + '" count="' + this.sharedStringCount + '" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
        var si = "";
        for (var i = 0; i < length; i++) {
          if (this.sharedString[i].indexOf("<r>") !== 0) {
            si += "<si><t>";
            si += this.processString(this.sharedString[i]);
            si += "</t></si>";
          } else {
            si += "<si>";
            si += this.sharedString[i];
            si += "</si>";
          }
        }
        si += "</sst>";
        this.addToArchive(sstStart + si, "xl/sharedStrings.xml");
      }
    };
    Workbook2.prototype.processString = function(value) {
      if (typeof value == "string") {
        if (value.indexOf("&") !== -1) {
          value = value.replace(/&/g, "&amp;");
        }
        if (value.indexOf("<") !== -1) {
          value = value.replace(/</g, "&lt;");
        }
        if (value.indexOf(">") !== -1) {
          value = value.replace(/>/g, "&gt;");
        }
        if (value.indexOf("\v") !== -1) {
          value = value.replace(/\v/g, "_x000B_");
        }
      } else if (typeof value == "object") {
        for (var i = 0; i < value.length; i++) {
          if (value[i].indexOf("&") !== -1) {
            value[i] = value[i].replace(/&/g, "&amp;");
          }
          if (value[i].indexOf("<") !== -1) {
            value[i] = value[i].replace(/</g, "&lt;");
          }
          if (value[i].indexOf(">") !== -1) {
            value[i] = value[i].replace(/>/g, "&gt;");
          }
          if (value[i].indexOf("\v") !== -1) {
            value[i] = value[i].replace(/\v/g, "_x000B_");
          }
        }
      }
      return value;
    };
    Workbook2.prototype.saveStyles = function() {
      this.updateCellXfsStyleXfs();
      var styleTemp = '<?xml version="1.0" encoding="utf-8"?><styleSheet xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
      styleTemp += this.saveNumberFormats();
      styleTemp += this.saveFonts();
      styleTemp += this.saveFills();
      styleTemp += this.saveBorders();
      styleTemp += this.saveCellStyleXfs();
      styleTemp += this.saveCellXfs();
      styleTemp += this.saveCellStyles();
      this.addToArchive(styleTemp + "</styleSheet>", "xl/styles.xml");
    };
    Workbook2.prototype.updateCellXfsStyleXfs = function() {
      for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
        var style = _a[_i];
        var cellXfs = void 0;
        if (style.isGlobalStyle) {
          cellXfs = new CellStyleXfs();
          cellXfs.xfId = style.index - 1;
        } else {
          cellXfs = new CellXfs();
          cellXfs.xfId = 0;
        }
        var compareFontResult = this.isNewFont(style);
        if (!compareFontResult.result) {
          var font = new Font();
          font.b = style.bold;
          font.i = style.italic;
          font.name = style.fontName;
          font.sz = style.fontSize;
          font.u = style.underline;
          font.strike = style.strikeThrough;
          font.color = "FF" + style.fontColor.replace("#", "");
          this.mFonts.push(font);
          cellXfs.fontId = this.mFonts.length - 1;
        } else {
          cellXfs.fontId = compareFontResult.index;
        }
        if (style.backColor !== "none") {
          var backColor = "FF" + style.backColor.replace("#", "");
          if (this.mFills.has(backColor)) {
            var fillId = this.mFills.get(backColor);
            cellXfs.fillId = fillId;
          } else {
            var fillId = this.mFills.size + 2;
            this.mFills.set(backColor, fillId);
            cellXfs.fillId = fillId;
          }
        } else {
          cellXfs.fillId = 0;
        }
        if (!this.isNewBorder(style)) {
          this.mBorders.push(style.borders);
          cellXfs.borderId = this.mBorders.length;
        } else {
          cellXfs.borderId = 0;
        }
        if (style.numberFormat !== "GENERAL") {
          if (this.mNumFmt.has(style.numberFormat)) {
            var numFmt = this.mNumFmt.get(style.numberFormat);
            cellXfs.numFmtId = numFmt.numFmtId;
          } else {
            var id = this.mNumFmt.size + 164;
            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
            cellXfs.numFmtId = id;
          }
        } else {
          if (style.numberFormat === "GENERAL" && style.numFmtId === 14) {
            cellXfs.numFmtId = 14;
          } else {
            cellXfs.numFmtId = 0;
          }
        }
        if (!style.isGlobalStyle) {
          cellXfs.applyAlignment = 1;
        }
        cellXfs.alignment = new Alignment();
        cellXfs.alignment.indent = style.indent;
        cellXfs.alignment.horizontal = style.hAlign;
        cellXfs.alignment.vertical = style.vAlign;
        cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;
        cellXfs.alignment.rotation = style.rotation;
        if (style.isGlobalStyle) {
          this.mCellStyleXfs.push(cellXfs);
          this.mCellXfs.push(cellXfs);
        } else {
          this.mCellXfs.push(cellXfs);
        }
      }
    };
    Workbook2.prototype.saveNumberFormats = function() {
      if (this.mNumFmt.size >= 1) {
        var numFmtStyle_1 = '<numFmts count="' + this.mNumFmt.size + '">';
        this.mNumFmt.forEach(function(value, key) {
          numFmtStyle_1 += '<numFmt numFmtId="' + value.numFmtId + '" formatCode="' + value.formatCode.replace(/"/g, "&quot;") + '" />';
        });
        return numFmtStyle_1 += "</numFmts>";
      } else {
        return "";
      }
    };
    Workbook2.prototype.saveFonts = function() {
      var fontStyle = '<fonts count="' + this.mFonts.length + '">';
      if (this.mFonts.length >= 1) {
        for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
          var font = _a[_i];
          fontStyle += "<font>";
          if (font.b) {
            fontStyle += "<b />";
          }
          if (font.i) {
            fontStyle += "<i />";
          }
          if (font.u) {
            fontStyle += "<u />";
          }
          if (font.strike) {
            fontStyle += "<strike />";
          }
          fontStyle += '<sz val="' + font.sz + '" />';
          fontStyle += '<color rgb="' + font.color + '" />';
          fontStyle += '<name val="' + font.name + '" /></font>';
        }
      }
      return fontStyle + "</fonts>";
    };
    Workbook2.prototype.saveFills = function() {
      var fillsStyle = '<fills count="' + (this.mFills.size + 2) + '"><fill><patternFill patternType="none"></patternFill></fill><fill><patternFill patternType="gray125"></patternFill></fill>';
      if (this.mFills.size >= 1) {
        this.mFills.forEach(function(value, key) {
          fillsStyle += '<fill><patternFill patternType="solid"><fgColor rgb="' + key + '" /><bgColor rgb="FFFFFFFF" /></patternFill></fill>';
        });
      }
      return fillsStyle + "</fills>";
    };
    Workbook2.prototype.saveBorders = function() {
      var bordersStyle = '<borders count="' + (this.mBorders.length + 1) + '"><border><left /><right /><top /><bottom /><diagonal /></border>';
      if (this.mBorders.length >= 1) {
        for (var _i = 0, _a = this.mBorders; _i < _a.length; _i++) {
          var borders = _a[_i];
          if (this.isAllBorder(borders)) {
            var color = borders.all.color.replace("#", "");
            var lineStyle = borders.all.lineStyle;
            bordersStyle += '<border><left style="' + lineStyle + '"><color rgb="FF' + color + '" /></left><right style="' + lineStyle + '"><color rgb="FF' + color + '" /></right><top style="' + lineStyle + '"><color rgb="FF' + color + '" /></top><bottom style="' + lineStyle + '"><color rgb="FF' + color + '" /></bottom></border>';
          } else {
            bordersStyle += '<border><left style="' + borders.left.lineStyle + '"><color rgb="FF' + borders.left.color.replace("#", "") + '" /></left><right style="' + borders.right.lineStyle + '"><color rgb="FF' + borders.right.color.replace("#", "") + '" /></right><top style="' + borders.top.lineStyle + '"><color rgb="FF' + borders.top.color.replace("#", "") + '" /></top><bottom style="' + borders.bottom.lineStyle + '"><color rgb="FF' + borders.bottom.color.replace("#", "") + '" /></bottom></border>';
          }
        }
      }
      return bordersStyle + "</borders>";
    };
    Workbook2.prototype.saveCellStyles = function() {
      var _this = this;
      var cellStyleString = '<cellStyles  count="' + this.cellStyles.size + '">';
      this.cellStyles.forEach(function(value, key) {
        cellStyleString += '<cellStyle name="' + key + '" xfId="' + _this.cellStyles.get(key).xfId + '"';
        if (key === "Normal") {
          cellStyleString += ' builtinId="0"';
        }
        cellStyleString += " />";
      });
      return cellStyleString += "</cellStyles>";
    };
    Workbook2.prototype.saveCellStyleXfs = function() {
      var cellXfsStyle = '<cellStyleXfs count="' + (this.mCellStyleXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" />';
      if (this.mCellStyleXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
          var cellStyleXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellStyleXf.numFmtId + '" fontId="' + cellStyleXf.fontId + '" fillId="' + cellStyleXf.fillId + '" borderId="' + cellStyleXf.borderId + '" ';
          if (cellStyleXf.alignment !== void 0) {
            cellXfsStyle += ">" + this.saveAlignment(cellStyleXf) + "</xf>";
          } else {
            cellXfsStyle += " />";
          }
        }
      }
      return cellXfsStyle + "</cellStyleXfs>";
    };
    Workbook2.prototype.saveCellXfs = function() {
      var cellXfsStyle = '<cellXfs count="' + (this.mCellXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0" />';
      if (this.mCellXfs.length >= 1) {
        for (var _i = 0, _a = this.mCellXfs; _i < _a.length; _i++) {
          var cellXf = _a[_i];
          cellXfsStyle += '<xf numFmtId="' + cellXf.numFmtId + '" fontId="' + cellXf.fontId + '" fillId="' + cellXf.fillId + '" borderId="' + cellXf.borderId + '" xfId="' + cellXf.xfId + '" ';
          if (cellXf.applyAlignment === 1) {
            cellXfsStyle += 'applyAlignment="1"';
          }
          cellXfsStyle += ">" + this.saveAlignment(cellXf) + "</xf>";
        }
      }
      return cellXfsStyle + "</cellXfs>";
    };
    Workbook2.prototype.saveAlignment = function(cellXf) {
      var alignString = "<alignment ";
      if (cellXf.alignment.horizontal !== void 0) {
        alignString += 'horizontal="' + cellXf.alignment.horizontal + '" ';
      }
      if (cellXf.alignment.indent !== void 0 && cellXf.alignment.indent !== 0) {
        alignString += 'indent="' + cellXf.alignment.indent + '" ';
      } else if (cellXf.alignment.rotation !== void 0 && cellXf.alignment.rotation !== 0) {
        alignString += 'textRotation="' + cellXf.alignment.rotation + '" ';
      }
      if (cellXf.alignment.vertical !== void 0) {
        alignString += 'vertical="' + cellXf.alignment.vertical + '" ';
      }
      alignString += 'wrapText="' + cellXf.alignment.wrapText + '" />';
      return alignString;
    };
    Workbook2.prototype.saveApp = function(builtInProperties) {
      var appString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties"><Application>Essential XlsIO</Application>';
      if (builtInProperties !== void 0) {
        if (builtInProperties.manager !== void 0) {
          appString += "<Manager>" + builtInProperties.manager + "</Manager>";
        }
        if (builtInProperties.company !== void 0) {
          appString += "<Company>" + builtInProperties.company + "</Company>";
        }
      }
      this.addToArchive(appString + "</Properties>", "docProps/app.xml");
    };
    Workbook2.prototype.saveCore = function(builtInProperties) {
      var createdDate = /* @__PURE__ */ new Date();
      var coreString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><cp:coreProperties xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties">';
      if (this.builtInProperties !== void 0) {
        if (builtInProperties.author !== void 0) {
          coreString += "<dc:creator>" + builtInProperties.author + "</dc:creator>";
        }
        if (builtInProperties.subject !== void 0) {
          coreString += "<dc:subject>" + builtInProperties.subject + "</dc:subject>";
        }
        if (builtInProperties.category !== void 0) {
          coreString += "<cp:category>" + builtInProperties.category + "</cp:category>";
        }
        if (builtInProperties.comments !== void 0) {
          coreString += "<dc:description>" + builtInProperties.comments + "</dc:description>";
        }
        if (builtInProperties.title !== void 0) {
          coreString += "<dc:title>" + builtInProperties.title + "</dc:title>";
        }
        if (builtInProperties.tags !== void 0) {
          coreString += "<cp:keywords>" + builtInProperties.tags + "</cp:keywords>";
        }
        if (builtInProperties.status !== void 0) {
          coreString += "<cp:contentStatus>" + builtInProperties.status + "</cp:contentStatus>";
        }
        if (builtInProperties.createdDate !== void 0) {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + builtInProperties.createdDate.toISOString() + "</dcterms:created>";
        } else {
          coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        }
        if (builtInProperties.modifiedDate !== void 0) {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + builtInProperties.modifiedDate.toISOString() + "</dcterms:modified>";
        } else {
          coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
        }
      } else {
        coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>";
        coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>";
      }
      coreString += "</cp:coreProperties>";
      this.addToArchive(coreString, "docProps/core.xml");
    };
    Workbook2.prototype.saveTopLevelRelation = function() {
      var topRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml" /><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml" /><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml" /></Relationships>';
      this.addToArchive(topRelation, "_rels/.rels");
    };
    Workbook2.prototype.saveWorkbookRelation = function() {
      var wbRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">';
      var length = this.worksheets.length;
      var count2 = 0;
      for (var i = 0; i < length; i++, count2++) {
        wbRelation += '<Relationship Id="rId' + (i + 1).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet' + (i + 1).toString() + '.xml" />';
      }
      wbRelation += '<Relationship Id="rId' + (++count2).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml" />';
      if (this.sharedStringCount > 0) {
        wbRelation += '<Relationship Id="rId' + (++count2).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml" />';
      }
      this.addToArchive(wbRelation + "</Relationships>", "xl/_rels/workbook.xml.rels");
    };
    Workbook2.prototype.saveContentType = function() {
      var contentTypeString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="xml" ContentType="application/xml" /><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" /><Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" /><Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" /><Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml" /><Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml" />';
      var sheetsOverride = "";
      var length = this.worksheets.length;
      var drawingIndex = 0;
      for (var i = 0; i < length; i++) {
        sheetsOverride += '<Override PartName="/xl/worksheets/sheet' + (i + 1).toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />';
        if (this.worksheets[i].images != void 0 && this.worksheets[i].images.length > 0) {
          drawingIndex++;
          sheetsOverride += '<Override PartName="/xl/drawings/drawing' + drawingIndex.toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.drawing+xml" />';
        }
      }
      if (this.imageCount > 0) sheetsOverride += '<Default Extension="png" ContentType="image/png" />';
      if (this.sharedStringCount > 0) {
        contentTypeString += '<Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml" />';
      }
      this.addToArchive(contentTypeString + sheetsOverride + "</Types>", "[Content_Types].xml");
    };
    Workbook2.prototype.addToArchive = function(xmlString, itemName) {
      if (typeof xmlString === "string") {
        var blob = new Blob([xmlString], {
          type: "text/plain"
        });
        var archiveItem = new ZipArchiveItem(blob, itemName);
        this.mArchive.addItem(archiveItem);
      } else {
        var archiveItem = new ZipArchiveItem(xmlString, itemName);
        this.mArchive.addItem(archiveItem);
      }
    };
    Workbook2.prototype.processMergeCells = function(cell, rowIndex, mergeCells) {
      if (cell.rowSpan !== 0 || cell.colSpan !== 0) {
        var mCell = new MergeCell();
        mCell.x = cell.index;
        mCell.width = cell.colSpan;
        mCell.y = rowIndex;
        mCell.height = cell.rowSpan;
        var startCell = this.getCellName(mCell.y, mCell.x);
        var endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);
        mCell.ref = startCell + ":" + endCell;
        var mergedCell = mergeCells.add(mCell);
        var start = {
          x: mCell.x,
          y: mCell.y
        };
        var end = {
          x: cell.index + mCell.width,
          y: rowIndex + mCell.height
        };
        this.updatedMergedCellStyles(start, end, cell);
      }
      return mergeCells;
    };
    Workbook2.prototype.updatedMergedCellStyles = function(sCell, eCell, cell) {
      for (var x = sCell.x; x <= eCell.x; x++) {
        for (var y = sCell.y; y <= eCell.y; y++) {
          this.mergedCellsStyle.set(this.getCellName(y, x), {
            x,
            y,
            styleIndex: cell.styleIndex
          });
        }
      }
    };
    Workbook2.prototype.dateToTicks = function(year, month, day) {
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
      var daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
      if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {
        var days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;
        var y = year - 1;
        var n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;
        return n * ticksPerDay;
      }
      throw new Error("Not a valid date");
    };
    Workbook2.prototype.timeToTicks = function(hour, minute, second) {
      if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {
        var totalSeconds = hour * 3600 + minute * 60 + second;
        return totalSeconds * 1e4 * 1e3;
      }
      throw new Error("Not valid time");
    };
    Workbook2.prototype.isLeapYear = function(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    Workbook2.prototype.toOADate = function(date) {
      var ticks = 0;
      ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());
      if (ticks === 0) {
        return 0;
      }
      var ticksPerDay = 1e4 * 1e3 * 60 * 60 * 24;
      var daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;
      var doubleDateOffset = daysTo1899 * ticksPerDay;
      var oaDateMinAsTicks = ((365 * 4 + 1) * 25 - 1 - 365) * ticksPerDay;
      if (ticks < oaDateMinAsTicks) {
        throw new Error("Arg_OleAutDateInvalid");
      }
      var millisPerDay = 1e3 * 60 * 60 * 24;
      return (ticks - doubleDateOffset) / 1e4 / millisPerDay;
    };
    return Workbook2;
  }()
);
var BuiltInProperties = (
  /** @class */
  /* @__PURE__ */ function() {
    function BuiltInProperties2() {
    }
    return BuiltInProperties2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/export-helper.js
var ExportHelper = (
  /** @class */
  function() {
    function ExportHelper2(parent, foreignKeyData2) {
      this.hideColumnInclude = false;
      this.foreignKeyData = {};
      this.parent = parent;
      if (!parent.parentDetails && foreignKeyData2) {
        this.foreignKeyData = foreignKeyData2;
      }
    }
    ExportHelper2.getQuery = function(parent, data) {
      var query = data.generateQuery(true).requiresCount();
      if (data.isRemote()) {
        if (parent.groupSettings.enableLazyLoading && parent.groupSettings.columns.length) {
          query.lazyLoad = [];
        } else {
          query.take(parent.pageSettings.totalRecordsCount);
        }
      }
      return query;
    };
    ExportHelper2.prototype.getFData = function(value, column) {
      var foreignKeyData2 = getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];
      return foreignKeyData2;
    };
    ExportHelper2.prototype.getGridRowModel = function(columns, dataSource, gObj, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      var rows = [];
      var length = dataSource.length;
      if (length) {
        for (var i = 0; i < length; i++, startIndex++) {
          var options = {
            isExpand: false
          };
          options.data = dataSource[parseInt(i.toString(), 10)];
          options.index = startIndex;
          if (gObj.childGrid || gObj.detailTemplate) {
            if (gObj.hierarchyPrintMode === "All") {
              options.isExpand = true;
            } else if (gObj.hierarchyPrintMode === "Expanded" && this.parent.expandedRows && this.parent.expandedRows[parseInt(startIndex.toString(), 10)]) {
              options.isExpand = gObj.expandedRows[parseInt(startIndex.toString(), 10)].isExpand;
            }
          }
          var row2 = new Row(options);
          row2.cells = this.generateCells(columns, gObj);
          rows.push(row2);
        }
        this.processColumns(rows);
      }
      return rows;
    };
    ExportHelper2.prototype.generateCells = function(columns, gObj) {
      var cells = [];
      if (gObj.childGridLevel) {
        var len = gObj.childGridLevel;
        for (var i = 0; len > i; i++) {
          cells.push(this.generateCell({}, CellType.Indent));
        }
      }
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        cells.push(this.generateCell(col, CellType.Data));
      }
      return cells;
    };
    ExportHelper2.prototype.getColumnData = function(gridObj) {
      var _this = this;
      var columnPromise = [];
      var promise;
      var fColumns = gridObj.getForeignKeyColumns();
      if (fColumns.length) {
        for (var i = 0; i < fColumns.length; i++) {
          var colData = "result" in fColumns[parseInt(i.toString(), 10)].dataSource ? new DataManager(fColumns[parseInt(i.toString(), 10)].dataSource.result) : fColumns[parseInt(i.toString(), 10)].dataSource;
          columnPromise.push(colData.executeQuery(new Query()));
        }
        promise = Promise.all(columnPromise).then(function(e) {
          for (var j = 0; j < fColumns.length; j++) {
            _this.foreignKeyData[fColumns[parseInt(j.toString(), 10)].field] = e[parseInt(j.toString(), 10)].result;
          }
        });
      }
      return promise;
    };
    ExportHelper2.prototype.getHeaders = function(columns, isHideColumnInclude) {
      if (isHideColumnInclude) {
        this.hideColumnInclude = true;
      } else {
        this.hideColumnInclude = false;
      }
      this.colDepth = measureColumnDepth(columns);
      var rows = [];
      for (var i = 0; i < this.colDepth; i++) {
        rows[parseInt(i.toString(), 10)] = new Row({});
        rows[parseInt(i.toString(), 10)].cells = [];
      }
      rows = this.processColumns(rows);
      rows = this.processHeaderCells(rows, columns);
      return {
        rows,
        columns: this.generateActualColumns(columns)
      };
    };
    ExportHelper2.prototype.getConvertedWidth = function(input2) {
      var value = parseFloat(input2);
      return input2.indexOf("%") !== -1 ? this.parent.element.getBoundingClientRect().width * value / 100 : value;
    };
    ExportHelper2.prototype.generateActualColumns = function(columns, actualColumns) {
      if (actualColumns === void 0) {
        actualColumns = [];
      }
      for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var column = columns_2[_i];
        if (column.commands) {
          continue;
        }
        if (!column.columns) {
          if (column.visible || this.hideColumnInclude) {
            actualColumns.push(column);
          }
        } else {
          if (column.visible || this.hideColumnInclude) {
            var colSpan = this.getCellCount(column, 0);
            if (colSpan !== 0) {
              this.generateActualColumns(column.columns, actualColumns);
            }
          }
        }
      }
      return actualColumns;
    };
    ExportHelper2.prototype.processHeaderCells = function(rows, cols) {
      var columns = cols;
      for (var i = 0; i < columns.length; i++) {
        if (!columns[parseInt(i.toString(), 10)].commands) {
          rows = this.appendGridCells(columns[parseInt(i.toString(), 10)], rows, 0);
        }
      }
      return rows;
    };
    ExportHelper2.prototype.appendGridCells = function(cols, gridRows, index) {
      if (!cols.columns && (cols.visible !== false || this.hideColumnInclude) && !cols.commands) {
        gridRows[parseInt(index.toString(), 10)].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, index));
      } else if (cols.columns) {
        var colSpan = this.getCellCount(cols, 0);
        if (colSpan) {
          gridRows[parseInt(index.toString(), 10)].cells.push(new Cell({
            cellType: CellType.StackedHeader,
            column: cols,
            colSpan
          }));
        }
        var isIgnoreFirstCell = void 0;
        for (var i = 0, len = cols.columns.length; i < len; i++) {
          if (cols.columns[parseInt(i.toString(), 10)].visible && !isIgnoreFirstCell) {
            isIgnoreFirstCell = true;
          }
          gridRows = this.appendGridCells(cols.columns[parseInt(i.toString(), 10)], gridRows, index + 1);
        }
      }
      return gridRows;
    };
    ExportHelper2.prototype.generateCell = function(gridColumn, cellType, rowSpan, rowIndex) {
      var option = {
        "visible": gridColumn.visible,
        "isDataCell": cellType === CellType.Data,
        "column": gridColumn,
        "cellType": cellType,
        "rowSpan": rowSpan,
        "index": rowIndex
      };
      if (!option.rowSpan || option.rowSpan < 2) {
        delete option.rowSpan;
      }
      return new Cell(option);
    };
    ExportHelper2.prototype.processColumns = function(rows) {
      var gridObj = this.parent;
      var columnIndexes = [];
      if (gridObj.enableColumnVirtualization) {
        columnIndexes = gridObj.getColumnIndexesInView();
      }
      for (var i = 0, len = rows.length; i < len; i++) {
        if (gridObj.allowGrouping) {
          for (var j = 0, len_1 = gridObj.groupSettings.columns.length - 1; j < len_1; j++) {
            if (gridObj.enableColumnVirtualization && columnIndexes.indexOf(j) === -1) {
              continue;
            }
            rows[parseInt(i.toString(), 10)].cells.splice(0, 0, this.generateCell({}, CellType.HeaderIndent));
          }
        }
      }
      return rows;
    };
    ExportHelper2.prototype.getCellCount = function(column, count2) {
      if (column.columns) {
        for (var i = 0; i < column.columns.length; i++) {
          count2 = this.getCellCount(column.columns[parseInt(i.toString(), 10)], count2);
        }
      } else {
        if (column.visible || this.hideColumnInclude) {
          count2++;
        }
      }
      return count2;
    };
    ExportHelper2.prototype.checkAndExport = function(gridPool, globalResolve) {
      var bool = Object.keys(gridPool).some(function(key) {
        return !gridPool["" + key];
      });
      if (!bool) {
        globalResolve();
      }
    };
    ExportHelper2.prototype.failureHandler = function(gridPool, childGridObj, resolve) {
      var _this = this;
      return function() {
        gridPool[childGridObj.id] = true;
        _this.checkAndExport(gridPool, resolve);
      };
    };
    ExportHelper2.prototype.createChildGrid = function(gObj, row2, exportType, gridPool) {
      var childGridObj = new Grid(this.parent.detailRowModule.getGridModel(gObj, row2, exportType));
      gObj.isPrinting = false;
      var parent = "parentDetails";
      childGridObj["" + parent] = {
        parentID: gObj.element.id,
        parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
        parentKeyField: gObj.childGrid.queryString,
        parentKeyFieldValue: getValue(childGridObj.queryString, row2.data),
        parentRowData: row2.data
      };
      var exportId = getUid("child-grid");
      var element = createElement("div", {
        id: exportId,
        styles: "display: none"
      });
      document.body.appendChild(element);
      childGridObj.id = exportId;
      gridPool["" + exportId] = false;
      childGridObj.isExportGrid = true;
      return {
        childGrid: childGridObj,
        element
      };
    };
    ExportHelper2.prototype.getGridExportColumns = function(columns) {
      var actualGridColumns = [];
      for (var i = 0, gridColumns = columns; i < gridColumns.length; i++) {
        if (gridColumns[parseInt(i.toString(), 10)].type !== "checkbox") {
          actualGridColumns.push(gridColumns[parseInt(i.toString(), 10)]);
        }
      }
      return actualGridColumns;
    };
    ExportHelper2.prototype.getForeignKeyData = function() {
      return this.foreignKeyData;
    };
    return ExportHelper2;
  }()
);
var ExportValueFormatter = (
  /** @class */
  function() {
    function ExportValueFormatter2(culture) {
      this.valueFormatter = new ValueFormatter(culture);
      this.internationalization = new Internationalization(culture);
    }
    ExportValueFormatter2.prototype.returnFormattedValue = function(args, customFormat) {
      if (!isNullOrUndefined(args.value) && args.value) {
        return this.valueFormatter.getFormatFunction(customFormat)(args.value);
      } else {
        return "";
      }
    };
    ExportValueFormatter2.prototype.formatCellValue = function(args) {
      if (args.isForeignKey) {
        args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0]);
      }
      if (args.column.type === "number" && args.column.format !== void 0 && args.column.format !== "") {
        if (typeof args.column.format === "string") {
          args.column.format = {
            format: args.column.format
          };
        }
        return args.value || args.value === 0 ? this.internationalization.getNumberFormat(args.column.format)(args.value) : "";
      } else if (args.column.type === "boolean" && args.value !== "") {
        return args.value ? "true" : "false";
      } else if ((args.column.type === "date" || args.column.type === "dateonly" || args.column.type === "datetime" || args.column.type === "time") && args.column.format !== void 0) {
        if (typeof args.value === "string") {
          args.value = new Date(args.value);
        }
        if (typeof args.column.format === "string") {
          var format = void 0;
          var cFormat = args.column.format;
          if (args.column.type === "date" || args.column.type === "dateonly") {
            format = {
              type: "date",
              skeleton: cFormat
            };
          } else if (args.column.type === "time") {
            format = {
              type: "time",
              skeleton: cFormat
            };
          } else {
            format = {
              type: "dateTime",
              skeleton: cFormat
            };
          }
          return this.returnFormattedValue(args, format);
        } else {
          if (args.column.format instanceof Object && args.column.format.type === void 0) {
            return args.value.toString();
          } else {
            var customFormat = void 0;
            if (args.column.type === "date" || args.column.type === "dateonly") {
              customFormat = {
                type: args.column.format.type,
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
              };
            } else if (args.column.type === "time") {
              customFormat = {
                type: "time",
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
              };
            } else {
              customFormat = {
                type: "dateTime",
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
              };
            }
            return this.returnFormattedValue(args, customFormat);
          }
        }
      } else {
        if (!isNullOrUndefined(args.column.type) && !isNullOrUndefined(args.value) || !isNullOrUndefined(args.value)) {
          return args.value.toString();
        } else {
          return "";
        }
      }
    };
    return ExportValueFormatter2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js
var ExcelExport = (
  /** @class */
  function() {
    function ExcelExport2(parent, locator) {
      this.book = {};
      this.workSheet = [];
      this.rows = [];
      this.columns = [];
      this.styles = [];
      this.rowLength = 1;
      this.expType = "AppendToSheet";
      this.includeHiddenColumn = false;
      this.isCsvExport = false;
      this.isChild = false;
      this.isElementIdChanged = false;
      this.gridPool = {};
      this.sheet = {};
      this.grpFooterTemplates = [];
      this.footerTemplates = [];
      this.aggIndex = 0;
      this.totalAggregates = 0;
      this.parent = parent;
      this.helper = new ExportHelper(parent);
      this.locator = locator;
      this.l10n = this.locator.getService("localization");
    }
    ExcelExport2.prototype.getModuleName = function() {
      return "ExcelExport";
    };
    ExcelExport2.prototype.init = function(gObj) {
      if (gObj.element !== null && gObj.element.id === "") {
        gObj.element.id = (/* @__PURE__ */ new Date()).toISOString();
        this.isElementIdChanged = true;
      }
      this.parent = gObj;
      if (this.parent.isDestroyed) {
        return;
      }
      this.isExporting = void 0;
      this.book = {};
      this.workSheet = [];
      this.rows = [];
      this.columns = [];
      this.styles = [];
      this.rowLength = 1;
      this.footer = void 0;
      this.expType = "AppendToSheet";
      this.includeHiddenColumn = false;
      this.exportValueFormatter = new ExportValueFormatter(gObj.locale);
      gObj.id = getUid("main-grid");
      this.gridPool[gObj.id] = false;
    };
    ExcelExport2.prototype.Map = function(grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {
      var gObj = grid;
      var cancel = "cancel";
      var isBlb = "isBlob";
      var Child = "isChild";
      var csv = "isCsv";
      var workbk = "workbook";
      var isMultiEx = "isMultipleExport";
      this.gridPool = {};
      if ((grid.childGrid || grid.detailTemplate) && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === "None")) {
        grid.expandedRows = getPrintGridModel(grid).expandedRows;
      }
      var args = {
        requestType: "beforeExcelExport",
        gridObject: gObj,
        cancel: false,
        isMultipleExport,
        workbook,
        isCsv,
        isBlob,
        isChild: this.isChild,
        grpFooterTemplates: this.grpFooterTemplates
      };
      gObj.trigger(beforeExcelExport, args);
      if (args["" + cancel]) {
        return new Promise(function(resolve) {
          return resolve();
        });
      }
      this.parent.log("exporting_begin", this.getModuleName());
      this.data = new Data(gObj);
      this.isExporting = true;
      this.isBlob = args["" + isBlb];
      this.isChild = args["" + Child];
      this.grpFooterTemplates = args["grpFooterTemplates"];
      if (args["" + csv]) {
        this.isCsvExport = args["" + csv];
      } else {
        this.isCsvExport = false;
      }
      if (isExportColumns(exportProperties)) {
        updateColumnTypeForExportColumns(exportProperties, gObj);
      }
      return this.processRecords(gObj, exportProperties, args["" + isMultiEx], args["" + workbk]);
    };
    ExcelExport2.prototype.exportingSuccess = function(resolve) {
      this.isExporting = false;
      this.parent.trigger(excelExportComplete, this.isBlob ? {
        promise: this.blobPromise
      } : {
        gridInstance: this.parent
      });
      this.parent.log("exporting_complete", this.getModuleName());
      resolve(this.book);
    };
    ExcelExport2.prototype.processRecords = function(gObj, exportProperties, isMultipleExport, workbook) {
      var _this = this;
      if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {
        exportProperties.dataSource = exportProperties.dataSource instanceof DataManager ? exportProperties.dataSource : new DataManager(exportProperties.dataSource);
        var query_1 = exportProperties.query ? exportProperties.query : new Query();
        if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {
          query_1.isCountRequired = true;
        }
        return new Promise(function(resolve) {
          var dataManager = exportProperties.dataSource.executeQuery(query_1);
          dataManager.then(function(r) {
            _this.init(gObj);
            _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function() {
              _this.exportingSuccess(resolve);
            });
          });
        });
      } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === "CurrentPage" && !(this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote())) {
        return new Promise(function(resolve) {
          _this.init(gObj);
          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());
          _this.exportingSuccess(resolve);
        });
      } else {
        var allPromise_1 = [];
        var query = ExportHelper.getQuery(gObj, this.data);
        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote()) {
          if (isNullOrUndefined(exportProperties)) exportProperties = {
            hierarchyExportMode: "All"
          };
          exportProperties.hierarchyExportMode = exportProperties.hierarchyExportMode === "None" ? "None" : "All";
          if (exportProperties.hierarchyExportMode === "All") query.lazyLoad = [];
        }
        allPromise_1.push(this.data.getData({}, query));
        allPromise_1.push(this.helper.getColumnData(gObj));
        return new Promise(function(resolve, reject) {
          Promise.all(allPromise_1).then(function(e) {
            _this.init(gObj);
            _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function() {
              _this.exportingSuccess(resolve);
            });
          }).catch(function(e) {
            reject(_this.book);
            _this.parent.trigger(actionFailure, e);
          });
        });
      }
    };
    ExcelExport2.prototype.processInnerRecords = function(gObj, exportProperties, isMultipleExport, workbook, r) {
      var _this = this;
      this.groupedColLength = gObj.groupSettings.columns.length;
      var blankRows = 5;
      var separator;
      var rows = [];
      var colDepth = measureColumnDepth(gObj.columns);
      var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);
      if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {
        this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : "AppendToSheet";
        if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {
          blankRows = exportProperties.multipleExport.blankRows;
        }
      }
      if (isNullOrUndefined(workbook)) {
        this.workSheet = [];
        this.rows = [];
        this.columns = [];
        this.styles = [];
        this.sheet.images = [];
      } else if (this.expType === "NewSheet") {
        this.workSheet = workbook.worksheets;
        this.rows = [];
        this.columns = [];
        this.sheet.images = [];
        this.styles = workbook.styles;
      } else {
        this.workSheet = [];
        this.rows = workbook.worksheets[0].rows;
        this.columns = workbook.worksheets[0].columns;
        this.styles = workbook.styles;
        this.sheet.images = workbook.worksheets[0].images;
        this.rowLength = this.rows[this.rows.length - 1].index + blankRows;
        this.rowLength++;
      }
      if (isExportPropertiesPresent) {
        if (!isNullOrUndefined(isMultipleExport)) {
          if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === "NewSheet")) {
            this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
          }
          if (!isNullOrUndefined(exportProperties.footer)) {
            if (this.expType === "AppendToSheet") {
              if (!isMultipleExport) {
                this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
              }
            } else {
              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
            }
          }
        } else {
          if (!isNullOrUndefined(exportProperties.header)) {
            this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
          }
          if (!isNullOrUndefined(exportProperties.footer)) {
            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
          }
        }
      }
      this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false;
      return new Promise(function(resolve, reject) {
        gObj.childGridLevel = 0;
        rows = _this.processGridExport(gObj, exportProperties, r);
        _this.globalResolve = resolve;
        _this.gridPool[gObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
      }).then(function() {
        var organisedRows = [];
        _this.organiseRows(rows, rows[0].index, organisedRows);
        _this.rows = _this.rows.concat(organisedRows);
        if (!isNullOrUndefined(_this.footer)) {
          if (_this.expType === "AppendToSheet" && !isMultipleExport || _this.expType === "NewSheet") {
            _this.processExcelFooter(_this.footer);
          }
        }
        if (_this.columns.length > 0) {
          _this.sheet.columns = _this.columns;
        }
        _this.sheet.rows = _this.rows;
        _this.sheet.enableRtl = _this.parent.enableRtl;
        if (_this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent && exportProperties.enableFilter) {
          var headerRowLen = exportProperties.header ? exportProperties.header.headerRows || exportProperties.header.rows.length : 0;
          var autoFilters = {
            row: colDepth + headerRowLen,
            column: _this.groupedColLength ? _this.groupedColLength + 1 : _this.sheet.columns[0].index,
            lastRow: _this.sheet.rows.length,
            lastColumn: _this.sheet.columns.length
          };
          _this.sheet.autoFilters = autoFilters;
        }
        _this.workSheet.push(_this.sheet);
        _this.book.worksheets = _this.workSheet;
        _this.book.styles = _this.styles;
        gObj.notify("finalPageSetup", _this.book);
        if (!isMultipleExport) {
          if (_this.isCsvExport) {
            if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ",") {
              separator = exportProperties.separator;
            }
            var book = new Workbook(_this.book, "csv", gObj.locale, defaultCurrencyCode, separator);
            if (!_this.isBlob) {
              if (isExportPropertiesPresent && exportProperties.fileName) {
                book.save(exportProperties.fileName);
              } else {
                book.save("Export.csv");
              }
            } else {
              _this.blobPromise = book.saveAsBlob("text/csv");
            }
          } else {
            var book = new Workbook(_this.book, "xlsx", gObj.locale, defaultCurrencyCode);
            if (!_this.isBlob) {
              if (isExportPropertiesPresent && exportProperties.fileName) {
                book.save(exportProperties.fileName);
              } else {
                book.save("Export.xlsx");
              }
            } else {
              _this.blobPromise = book.saveAsBlob("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            }
          }
          if (_this.isElementIdChanged) {
            gObj.element.id = "";
          }
          delete gObj.expandedRows;
        }
        return workbook;
      });
    };
    ExcelExport2.prototype.organiseRows = function(rows, initialIndex, organisedRows) {
      if (!rows.length) {
        return initialIndex;
      }
      for (var i = 0; i < rows.length; i++) {
        var row2 = rows[parseInt(i.toString(), 10)];
        var childRows = row2.childRows;
        if (childRows) {
          row2.index = initialIndex++;
          delete row2.childRows;
          organisedRows.push(row2);
          initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);
        } else {
          row2.index = initialIndex++;
          organisedRows.push(row2);
        }
      }
      return initialIndex;
    };
    ExcelExport2.prototype.processGridExport = function(gObj, exportProperties, r) {
      var excelRows = [];
      if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {
        this.theme = exportProperties.theme;
      }
      if ((gObj.childGrid || gObj.detailTemplate) && !isNullOrUndefined(exportProperties)) {
        gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || "Expanded";
      }
      var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());
      var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(gObj.columns);
      var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);
      var groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;
      excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);
      if (!isNullOrUndefined(exportProperties) && Object.keys(exportProperties).length && isNullOrUndefined(exportProperties.dataSource)) {
        if (exportProperties.exportType === "CurrentPage" && (!gObj.groupSettings.enableLazyLoading || gObj.getDataModule().isRemote())) {
          excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);
        } else {
          excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, void 0, excelRows, helper);
        }
      } else {
        excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, void 0, excelRows, helper);
      }
      gObj.notify(exportDataBound, {
        excelRows,
        type: "excel"
      });
      this.capTemplate = void 0;
      this.footerTemplates = [];
      this.grpFooterTemplates = [];
      this.aggIndex = 0;
      this.totalAggregates = 0;
      return excelRows;
    };
    ExcelExport2.prototype.processRecordContent = function(gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {
      var record;
      if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {
        record = currentViewRecords;
      } else {
        record = returnType.result;
      }
      if (!isNullOrUndefined(record.level)) {
        this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);
      } else {
        this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);
      }
      if (!isNullOrUndefined(returnType.aggregates)) {
        if (!isNullOrUndefined(currentViewRecords) && !this.parent.groupSettings.enableLazyLoading) {
          this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);
        } else {
          var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;
          this.processAggregates(gObj, result, excelRow);
        }
      }
      return excelRow;
    };
    ExcelExport2.prototype.processGroupedRows = function(gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {
      for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
        var item = dataSource_1[_i];
        var cells = [];
        var index = 1;
        var cell = {};
        cell.index = index + level - 1;
        var col = gObj.getColumnByField(item.field);
        var args = {
          value: item.key,
          column: col,
          style: void 0,
          isForeignKey: col.isForeignColumn()
        };
        var value = gObj.getColumnByField(item.field).headerText + ": " + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + " - ";
        if (item.count > 1) {
          value += item.count + " items";
        } else {
          value += item.count + " item";
        }
        var cArgs = {
          captionText: value,
          type: this.isCsvExport ? "CSV" : "Excel",
          data: item
        };
        this.parent.trigger(exportGroupCaption, cArgs);
        cell.value = cArgs.captionText;
        cell.style = this.getCaptionThemeStyle(this.theme);
        if (!isNullOrUndefined(cArgs.style)) {
          cell.style = this.mergeOptions(cell.style, cArgs.style);
        }
        var captionModelGen = new CaptionSummaryModelGenerator(gObj);
        var groupCaptionSummaryRows = captionModelGen.generateRows(item);
        this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels - 1, excelRows, this.rowLength);
        cells.push(cell);
        if (excelRows[excelRows.length - 1].cells.length > 0) {
          var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;
          var hIndex = 0;
          for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {
            var tCell = _b[_a];
            if (tCell.index < lIndex) {
              lIndex = tCell.index;
            }
            if (tCell.index > hIndex) {
              hIndex = tCell.index;
            }
            if (cells[cells.length - 1].index !== tCell.index) {
              cells.push(tCell);
            }
          }
          if (lIndex - cell.index > 1) {
            cell.colSpan = lIndex - cell.index;
          }
          while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {
            var sCell = {};
            sCell.index = hIndex + 1;
            sCell.style = this.getCaptionThemeStyle(this.theme);
            cells.push(sCell);
            hIndex++;
          }
        } else {
          var span = 0;
          for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {
            var col_1 = _d[_c];
            if (col_1.visible) {
              span++;
            }
          }
          cell.colSpan = dataSource.childLevels + span;
        }
        excelRows[excelRows.length - 1].cells = cells;
        this.rowLength++;
        if (this.groupedColLength < 8 && level > 1) {
          var grouping = {
            outlineLevel: level - 1,
            isCollapsed: true
          };
          excelRows[excelRows.length - 1].grouping = grouping;
        }
        if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
          this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);
          this.processAggregates(gObj, item, excelRows, void 0, level - 1 + dataSource.childLevels, true);
        } else {
          startIndex = this.processRecordRows(gObj, item.items, headerRow, level - 1, startIndex, excelExportProperties, excelRows, helper);
          this.processAggregates(gObj, item, excelRows, void 0, level - 1, true);
        }
      }
    };
    ExcelExport2.prototype.processRecordRows = function(gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {
      var index = 1;
      var cells = [];
      var columns = headerRow.columns;
      var rows = helper.getGridRowModel(columns, record, gObj, startIndex);
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        cells = [];
        startIndex++;
        index = 1;
        var templateRowHeight = void 0;
        for (var c = 0, len = row2.cells.length; c < len; c++) {
          var gCell = row2.cells[parseInt(c.toString(), 10)];
          if (gCell.cellType !== CellType.Data) {
            continue;
          }
          var column = gCell.column;
          var field = column.field;
          var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row2.data, column) : "";
          var value = !isNullOrUndefined(cellValue) ? cellValue : "";
          if (column.type === "dateonly" && typeof value === "string" && value) {
            var arr = value.split(/[^0-9.]/);
            value = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
          }
          var fkData = void 0;
          if (column.isForeignColumn && column.isForeignColumn()) {
            fkData = helper.getFData(value, column);
            value = getValue(column.foreignKeyValue, fkData);
          }
          if (!isNullOrUndefined(value)) {
            var cell = {};
            var idx = index + level + gObj.childGridLevel;
            var excelCellArgs = {
              data: row2.data,
              column,
              foreignKeyData: fkData,
              value,
              style: void 0,
              colSpan: 1,
              cell
            };
            gObj.trigger(excelQueryCellInfo, excelCellArgs);
            if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {
              templateRowHeight = this.setImage(excelCellArgs, idx);
              if (excelCellArgs.image.height && excelCellArgs.value !== "") {
                templateRowHeight += 30;
              }
            }
            if (!isNullOrUndefined(excelCellArgs.hyperLink)) {
              excelCellArgs.cell.hyperlink = {
                target: excelCellArgs.hyperLink.target
              };
              excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;
            }
            cell = excelCellArgs.cell;
            cell.index = idx;
            cell.value = excelCellArgs.value;
            if (excelCellArgs.data === "" && gObj.childGridLevel && index === 1) {
              var style = {};
              style.hAlign = "left";
              excelCellArgs = {
                style
              };
              cell.colSpan = gObj.getVisibleColumns().length;
              cell.value = this.l10n.getConstant("EmptyRecord");
            }
            if (excelCellArgs.colSpan > 1) {
              cell.colSpan = excelCellArgs.colSpan;
            }
            if (!isNullOrUndefined(excelCellArgs.style)) {
              var styleIndex = this.getColumnStyle(gObj, index + level);
              cell.style = this.mergeOptions(this.styles[parseInt(styleIndex.toString(), 10)], excelCellArgs.style);
            } else {
              cell.style = {
                name: gObj.element.id + "column" + (index + level)
              };
            }
            cells.push(cell);
          }
          index++;
        }
        var excelRow = {
          index: this.rowLength++,
          cells
        };
        if (!isNullOrUndefined(templateRowHeight)) {
          excelRow.height = templateRowHeight;
        }
        if (this.groupedColLength && this.groupedColLength < 8 && level + 1 > 0) {
          excelRow.grouping = {
            outlineLevel: level + 1,
            isCollapsed: true
          };
          excelRows.push(excelRow);
        } else {
          excelRows.push(excelRow);
        }
        if ((row2.isExpand || this.isChild) && (!isNullOrUndefined(gObj.childGrid) || !isNullOrUndefined(gObj.detailTemplate))) {
          if (!isNullOrUndefined(gObj.childGrid)) {
            gObj.isPrinting = true;
            var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : "AllPages";
            var returnVal = this.helper.createChildGrid(gObj, row2, exportType, this.gridPool);
            var childGridObj = returnVal.childGrid;
            var element = returnVal.element;
            childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);
            childGridObj.childGridLevel = gObj.childGridLevel + 1;
            var args = {
              childGrid: childGridObj,
              row: row2,
              exportProperties: excelExportProperties
            };
            this.parent.trigger(exportDetailDataBound, args);
            childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row2);
            childGridObj.appendTo(element);
          } else {
            var args = {
              parentRow: row2,
              row: excelRow,
              value: {},
              action: "excelexport",
              gridInstance: gObj
            };
            this.parent.trigger(exportDetailTemplate, args);
            excelRow.childRows = this.processDetailTemplate(args);
          }
        }
        gObj.notify(exportRowDataBound, {
          rowObj: row2,
          type: "excel",
          excelRows
        });
      }
      return startIndex;
    };
    ExcelExport2.prototype.processDetailTemplate = function(templateData) {
      var _this = this;
      var rows = [];
      var templateRowHeight;
      var detailIndent = 2;
      var detailCellIndex;
      if (templateData.value.columnHeader || templateData.value.rows) {
        var processCell_1 = function(currentCell, isHeader) {
          var cell = {};
          if (isNullOrUndefined(currentCell.index)) {
            currentCell.index = detailCellIndex;
            detailCellIndex++;
          }
          cell.index = currentCell.index + detailIndent;
          if (!isNullOrUndefined(currentCell.value)) {
            cell.value = currentCell.value;
          }
          if (!isNullOrUndefined(currentCell.colSpan)) {
            cell.colSpan = currentCell.colSpan;
          }
          if (!isNullOrUndefined(currentCell.rowSpan)) {
            cell.rowSpan = currentCell.rowSpan;
          }
          if (isHeader) {
            cell.style = _this.getHeaderThemeStyle(_this.theme);
          } else {
            cell.style = _this.getRecordThemeStyle(_this.theme);
          }
          if (!isNullOrUndefined(currentCell.style)) {
            var cellStyle = {
              fontColor: currentCell.style.fontColor,
              fontName: currentCell.style.fontName,
              fontSize: currentCell.style.fontSize,
              hAlign: currentCell.style.excelHAlign,
              vAlign: currentCell.style.excelVAlign,
              rotation: currentCell.style.excelRotation,
              bold: currentCell.style.bold,
              indent: currentCell.style.indent,
              italic: currentCell.style.italic,
              underline: currentCell.style.underline,
              backColor: currentCell.style.backColor,
              wrapText: currentCell.style.wrapText,
              borders: currentCell.style.excelBorders,
              numberFormat: currentCell.style.excelNumberFormat,
              type: currentCell.style.excelType,
              strikeThrough: currentCell.style.strikeThrough
            };
            cell.style = _this.mergeOptions(cellStyle, cell.style);
          }
          if (!isNullOrUndefined(currentCell.image) && !isNullOrUndefined(currentCell.image.base64)) {
            if (currentCell.rowSpan > 1) {
              _this.setImage(currentCell, cell.index);
            } else {
              templateRowHeight = _this.setImage(currentCell, cell.index);
              if (currentCell.image.height && currentCell.value !== "") {
                templateRowHeight += 30;
              }
            }
          }
          if (!isNullOrUndefined(currentCell.hyperLink)) {
            cell.hyperlink = {
              target: currentCell.hyperLink.target
            };
            cell.value = currentCell.hyperLink.displayText;
          }
          return cell;
        };
        var processRow = function(currentRow, isHeader) {
          var excelDetailCells = [];
          detailCellIndex = 0;
          for (var j = 0; j < currentRow.cells.length; j++) {
            var currentCell = currentRow.cells[parseInt(j.toString(), 10)];
            var detailCell = processCell_1(currentCell, isHeader);
            excelDetailCells.push(detailCell);
          }
          var row3 = {
            index: _this.rowLength++,
            cells: excelDetailCells
          };
          if (!isNullOrUndefined(templateRowHeight)) {
            row3.height = templateRowHeight;
            templateRowHeight = null;
          }
          rows.push(row3);
        };
        if (templateData.value.columnHeader) {
          for (var i = 0; i < templateData.value.columnHeader.length; i++) {
            processRow(templateData.value.columnHeader[parseInt(i.toString(), 10)], true);
          }
        }
        if (templateData.value.rows) {
          for (var i = 0; i < templateData.value.rows.length; i++) {
            processRow(templateData.value.rows[parseInt(i.toString(), 10)]);
          }
        }
      } else if (templateData.value.image) {
        templateRowHeight = this.setImage(templateData.value, detailIndent);
        var row2 = {
          index: this.rowLength++,
          cells: [{
            index: detailIndent,
            style: this.getRecordThemeStyle(this.theme)
          }]
        };
        if (!isNullOrUndefined(templateRowHeight)) {
          row2.height = templateRowHeight;
          templateRowHeight = null;
        }
        rows.push(row2);
      } else if (templateData.value.text) {
        var row2 = {
          index: this.rowLength++,
          cells: [{
            index: detailIndent,
            value: templateData.value.text,
            style: this.getRecordThemeStyle(this.theme)
          }]
        };
        rows.push(row2);
      } else if (templateData.value.hyperLink) {
        var row2 = {
          index: this.rowLength++,
          cells: [{
            index: 2,
            hyperlink: {
              target: templateData.value.hyperLink.target
            },
            value: templateData.value.hyperLink.displayText,
            style: this.getRecordThemeStyle(this.theme)
          }]
        };
        rows.push(row2);
      }
      for (var i = 0; i < rows.length; i++) {
        rows[parseInt(i.toString(), 10)].grouping = {
          outlineLevel: 1,
          isCollapsed: !templateData.parentRow.isExpand,
          isHidden: !templateData.parentRow.isExpand
        };
      }
      return rows;
    };
    ExcelExport2.prototype.setImage = function(args, idx) {
      if (isNullOrUndefined(this.sheet.images)) {
        this.sheet.images = [];
      }
      var excelImage = {
        image: args.image.base64,
        row: this.rowLength,
        column: idx,
        lastRow: this.rowLength,
        lastColumn: idx
      };
      if (args.image.width && args.image.height) {
        excelImage.width = args.image.width;
        excelImage.height = args.image.height;
      }
      this.sheet.images.push(excelImage);
      this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;
      return args.image.height || 50;
    };
    ExcelExport2.prototype.childGridCell = function(excelRow, childGridObj, excelExportProps, gRow) {
      var _this = this;
      return function(result) {
        childGridObj.beforeDataBound = null;
        result.cancel = true;
        if (result.result.length === 0) {
          result.result = [""];
        }
        excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);
        var intent = _this.parent.groupSettings.columns.length;
        var rows = excelRow.childRows;
        for (var i = 0; i < rows.length; i++) {
          rows[parseInt(i.toString(), 10)].grouping = {
            outlineLevel: intent + childGridObj.childGridLevel,
            isCollapsed: !gRow.isExpand,
            isHidden: !gRow.isExpand
          };
        }
        childGridObj.destroy();
        detach(childGridObj.element);
        _this.gridPool[childGridObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
        return excelRow;
      };
    };
    ExcelExport2.prototype.processAggregates = function(gObj, rec, excelRows, currentViewRecords, indent, byGroup) {
      var summaryModel = new SummaryModelGenerator(gObj);
      var columns = summaryModel.getColumns();
      columns = columns.filter(function(col) {
        return isNullOrUndefined(col.commands) && col.type !== "checkbox";
      });
      if (gObj.aggregates.length && this.parent !== gObj) {
        gObj.aggregateModule.prepareSummaryInfo();
      }
      var data = void 0;
      if (!isNullOrUndefined(currentViewRecords)) {
        data = currentViewRecords;
      } else {
        data = rec;
      }
      if (indent === void 0) {
        indent = 0;
      }
      if (gObj.groupSettings.columns.length > 0 && byGroup) {
        var groupSummaryModel = new GroupSummaryModelGenerator(gObj);
        var groupSummaryRows = groupSummaryModel.generateRows(data, {
          level: data.level
        });
        if (groupSummaryRows.length > 0) {
          excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);
        }
      } else {
        indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;
        var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);
        if (sRows.length > 0 && !byGroup) {
          indent = gObj.groupSettings.columns.length ? indent - 1 : indent;
          excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);
        }
      }
      return excelRows;
    };
    ExcelExport2.prototype.fillAggregates = function(gObj, rows, indent, excelRows, customIndex) {
      for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {
        var row2 = rows_2[_i];
        var cells = [];
        var isEmpty = true;
        var index = 0;
        for (var _a = 0, _b = row2.cells; _a < _b.length; _a++) {
          var cell = _b[_a];
          var eCell = {};
          var columnsDetails = {};
          if (!isNullOrUndefined(cell.attributes.index)) {
            columnsDetails = this.parent.getColumnByIndex(cell.attributes.index);
          }
          if (cell.cellType === CellType.DetailFooterIntent || columnsDetails.type === "checkbox" || columnsDetails.commands) {
            continue;
          }
          if (cell.visible || this.includeHiddenColumn) {
            index++;
            if (cell.isDataCell) {
              isEmpty = false;
              var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);
              var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);
              var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);
              eCell.index = index + indent + gObj.childGridLevel;
              if (footerTemplate) {
                eCell.value = this.getAggreateValue(gObj, CellType.Summary, cell.column.footerTemplate, cell, row2);
              } else if (groupFooterTemplate) {
                eCell.value = this.getAggreateValue(gObj, CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row2);
              } else if (groupCaptionTemplate) {
                eCell.value = this.getAggreateValue(gObj, CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row2);
              } else {
                for (var _c = 0, _d = Object.keys(row2.data[cell.column.field]); _c < _d.length; _c++) {
                  var key = _d[_c];
                  if (key === cell.column.type) {
                    if (!isNullOrUndefined(row2.data[cell.column.field].Sum)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - sum"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Average)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - average"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Max)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - max"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Min)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - min"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Count)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - count"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].TrueCount)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - truecount"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].FalseCount)) {
                      eCell.value = row2.data[cell.column.field][cell.column.field + " - falsecount"];
                    } else if (!isNullOrUndefined(row2.data[cell.column.field].Custom)) {
                      eCell.value = row2.data[cell.column.field].Custom;
                    }
                  }
                }
              }
              eCell.style = this.getCaptionThemeStyle(this.theme);
              this.aggregateStyle(cell.column, eCell.style, cell.column.field);
              var gridCellStyle = cell.attributes.style;
              if (gridCellStyle.textAlign) {
                eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();
              }
              var args = {
                row: row2,
                type: footerTemplate ? "Footer" : groupFooterTemplate ? "GroupFooter" : "GroupCaption",
                style: eCell,
                cell
              };
              this.parent.trigger(excelAggregateQueryCellInfo, args);
              cells.push(eCell);
            } else {
              if (customIndex === void 0) {
                eCell.index = index + indent + gObj.childGridLevel;
                eCell.style = this.getCaptionThemeStyle(this.theme);
                cells.push(eCell);
              }
            }
          }
        }
        if (!isNullOrUndefined(customIndex)) {
          excelRows.push({
            index: customIndex,
            cells
          });
        } else {
          var row_1 = {};
          var dummyOutlineLevel = "outlineLevel";
          var dummyGrouping = "grouping";
          if (this.groupedColLength < 8 && this.groupedColLength > 0 && !(gObj.groupSettings.enableLazyLoading && isNullOrUndefined(excelRows[excelRows.length - 1]["" + dummyGrouping]))) {
            var level = excelRows[excelRows.length - 1]["" + dummyGrouping]["" + dummyOutlineLevel];
            var grouping = {
              outlineLevel: level,
              isCollapsed: true
            };
            row_1 = {
              index: this.rowLength++,
              cells,
              grouping
            };
          } else {
            row_1 = {
              index: this.rowLength++,
              cells
            };
          }
          if (!isEmpty) {
            excelRows.push(row_1);
          }
        }
      }
      return excelRows;
    };
    ExcelExport2.prototype.aggregateStyle = function(col, style, field) {
      var column = this.parent.getColumnByField(field);
      if (typeof col.format === "object") {
        var format = col.format;
        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;
        if (!isNullOrUndefined(format.type)) {
          style.type = format.type.toLowerCase();
        }
      } else {
        style.numberFormat = col.format;
      }
      if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {
        style.type = column.type.toLowerCase();
      }
    };
    ExcelExport2.prototype.getAggreateValue = function(gObj, cellType, template, cell, row2) {
      var templateFn = {};
      templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);
      var txt;
      var data = row2.data[cell.column.field ? cell.column.field : cell.column.columnName];
      if ((this.parent.isReact || this.parent.isVue || this.parent.isVue3 || this.parent.isAngular) && !(typeof cell.column.footerTemplate === "string" || typeof cell.column.groupFooterTemplate === "string" || typeof cell.column.groupCaptionTemplate === "string")) {
        txt = data[cell.column.type];
        return !isNullOrUndefined(txt) ? txt : "";
      } else {
        txt = templateFn[getEnumValue(CellType, cell.cellType)](data);
      }
      return !isNullOrUndefined(txt[0]) ? txt[0].textContent : "";
    };
    ExcelExport2.prototype.mergeOptions = function(JSON1, JSON2) {
      var result = {};
      var attrname = Object.keys(JSON1);
      for (var index = 0; index < attrname.length; index++) {
        if (attrname[parseInt(index.toString(), 10)] !== "name") {
          result[attrname[parseInt(index.toString(), 10)]] = JSON1[attrname[parseInt(index.toString(), 10)]];
        }
      }
      attrname = Object.keys(JSON2);
      for (var index = 0; index < attrname.length; index++) {
        if (attrname[parseInt(index.toString(), 10)] !== "name") {
          result[attrname[parseInt(index.toString(), 10)]] = JSON2[attrname[parseInt(index.toString(), 10)]];
        }
      }
      return result;
    };
    ExcelExport2.prototype.getColumnStyle = function(gObj, columnIndex) {
      var index = 0;
      for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {
        var style = _a[_i];
        if (style.name === gObj.element.id + "column" + columnIndex) {
          return index;
        }
        index++;
      }
      return void 0;
    };
    ExcelExport2.prototype.headerRotation = function(args) {
      var degree = args.style.rotation;
      if (degree <= 90 && degree >= 0) {
        args.style.hAlign = "Left";
      } else if (degree > 90 && degree <= 180) {
        args.style.hAlign = "Right";
      } else {
        degree = 180;
        args.style.hAlign = "Right";
      }
      args.style.rotation = degree;
    };
    ExcelExport2.prototype.processHeaderContent = function(gObj, headerRow, indent, excelRows) {
      var rowIndex = 1;
      var gridRows = headerRow.rows;
      var gridColumns = headerRow.columns;
      var spannedCells = [];
      if (indent > 0) {
        var index = 0;
        while (index !== indent) {
          this.columns.push({
            index: index + 1,
            width: 30
          });
          index++;
        }
      }
      for (var col = 0; col < gridColumns.length; col++) {
        this.parseStyles(gObj, gridColumns[parseInt(col.toString(), 10)], this.getRecordThemeStyle(this.theme), indent + col + 1);
      }
      var templateRowHeight;
      for (var row2 = 0; row2 < gridRows.length; row2++) {
        var currentCellIndex = 1 + indent;
        var cells = [];
        for (var column = 0; column < gridRows[parseInt(row2.toString(), 10)].cells.length; column++) {
          var style = {};
          var cell = {};
          var gridCell = gridRows[parseInt(row2.toString(), 10)].cells[parseInt(column.toString(), 10)];
          if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {
            continue;
          }
          var result = {
            contains: true,
            index: 1
          };
          while (result.contains) {
            result = this.getIndex(spannedCells, rowIndex, currentCellIndex);
            currentCellIndex = result.index;
            if (!result.contains) {
              cell.index = result.index + gObj.childGridLevel;
              break;
            }
          }
          if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {
            cell.rowSpan = gridCell.rowSpan;
            for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {
              var spannedCell = {
                rowIndex: 0,
                columnIndex: 0
              };
              spannedCell.rowIndex = i;
              spannedCell.columnIndex = currentCellIndex;
              spannedCells.push(spannedCell);
            }
          }
          if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {
            cell.colSpan = gridCell.colSpan;
            currentCellIndex = currentCellIndex + cell.colSpan - 1;
          }
          cell.value = gridCell.column.headerText;
          style = this.getHeaderThemeStyle(this.theme);
          if (!isNullOrUndefined(gridCell.column.textAlign)) {
            style.hAlign = gridCell.column.textAlign.toLowerCase();
          }
          if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {
            style.hAlign = gridCell.column.headerTextAlign.toLowerCase();
          }
          var excelHeaderCellArgs = {
            cell,
            gridCell,
            style
          };
          gObj.trigger(excelHeaderQueryCellInfo, excelHeaderCellArgs);
          if (excelHeaderCellArgs.style.rotation) {
            this.headerRotation(excelHeaderCellArgs);
          }
          if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {
            templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);
          }
          if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {
            excelHeaderCellArgs.cell.hyperlink = {
              target: excelHeaderCellArgs.hyperLink.target
            };
            cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;
          }
          cell.style = excelHeaderCellArgs.style;
          cells.push(cell);
          currentCellIndex++;
        }
        var excelRow = {
          index: this.rowLength++,
          cells
        };
        if (!isNullOrUndefined(templateRowHeight)) {
          excelRow.height = templateRowHeight;
        }
        excelRows.push(excelRow);
      }
      return excelRows;
    };
    ExcelExport2.prototype.getHeaderThemeStyle = function(theme) {
      var style = {};
      style.fontSize = 12;
      style.borders = {
        color: "#E0E0E0"
      };
      style.bold = true;
      if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {
        style = this.updateThemeStyle(theme.header, style);
      }
      return style;
    };
    ExcelExport2.prototype.updateThemeStyle = function(themestyle, style) {
      return extend(style, themestyle);
    };
    ExcelExport2.prototype.getCaptionThemeStyle = function(theme) {
      var style = {};
      style.fontSize = 13;
      style.backColor = "#F6F6F6";
      if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {
        style = this.updateThemeStyle(theme.caption, style);
      }
      return style;
    };
    ExcelExport2.prototype.getRecordThemeStyle = function(theme) {
      var style = {};
      style.fontSize = 13;
      style.borders = {
        color: "#E0E0E0"
      };
      if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {
        style = this.updateThemeStyle(theme.record, style);
      }
      return style;
    };
    ExcelExport2.prototype.processExcelHeader = function(header) {
      if (!isNullOrUndefined(header.rows) && (this.expType === "NewSheet" || this.rowLength === 1)) {
        var noRows = void 0;
        if (header.headerRows === void 0) {
          this.rowLength = header.rows.length;
        } else {
          this.rowLength = header.headerRows;
        }
        if (this.rowLength < header.rows.length) {
          noRows = this.rowLength;
        } else {
          noRows = header.rows.length;
        }
        this.rowLength++;
        for (var row2 = 0; row2 < noRows; row2++) {
          var json = header.rows[parseInt(row2.toString(), 10)];
          if (!(json.index !== null && !isNullOrUndefined(json.index))) {
            json.index = row2 + 1;
          }
          this.updatedCellIndex(json);
        }
      }
    };
    ExcelExport2.prototype.updatedCellIndex = function(json) {
      var cellsLength = json.cells.length;
      for (var cellId = 0; cellId < cellsLength; cellId++) {
        var jsonCell = json.cells[parseInt(cellId.toString(), 10)];
        if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {
          jsonCell.index = cellId + 1;
        }
      }
      this.rows.push(json);
    };
    ExcelExport2.prototype.processExcelFooter = function(footer) {
      if (!isNullOrUndefined(footer.rows)) {
        var noRows = void 0;
        if (footer.footerRows === void 0) {
          this.rowLength += footer.rows.length;
        } else {
          if (footer.footerRows > footer.rows.length) {
            this.rowLength += footer.footerRows - footer.rows.length;
            noRows = footer.rows.length;
          } else {
            noRows = footer.footerRows;
          }
        }
        for (var row2 = 0; row2 < noRows; row2++) {
          var json = footer.rows[parseInt(row2.toString(), 10)];
          if (json.index === null || json.index === void 0) {
            json.index = this.rowLength++;
          } else {
            json.index += this.rowLength;
          }
          this.updatedCellIndex(json);
        }
      }
    };
    ExcelExport2.prototype.getIndex = function(spannedCells, rowIndex, columnIndex) {
      for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {
        var spannedCell = spannedCells_1[_i];
        if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {
          columnIndex = columnIndex + 1;
          return {
            contains: true,
            index: columnIndex
          };
        }
      }
      return {
        contains: false,
        index: columnIndex
      };
    };
    ExcelExport2.prototype.parseStyles = function(gObj, col, style, index) {
      if (!isNullOrUndefined(col.format)) {
        if (typeof col.format === "object") {
          var format = col.format;
          style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;
          if (!isNullOrUndefined(format.type)) {
            style.type = format.type === "dateonly" ? "date" : format.type.toLowerCase();
          }
        } else {
          style.numberFormat = col.format;
          style.type = col.type === "dateonly" ? "date" : col.type;
        }
      }
      if (!isNullOrUndefined(col.textAlign)) {
        style.hAlign = col.textAlign.toLowerCase();
      }
      if (Object.keys(style).length > 0) {
        style.name = gObj.element.id + "column" + index;
        this.styles.push(style);
      }
      if (!isNullOrUndefined(col.width) && col.width !== "auto" && !gObj.childGridLevel) {
        this.columns.push({
          index: index + gObj.childGridLevel,
          width: typeof col.width === "number" ? col.width : this.helper.getConvertedWidth(col.width)
        });
      }
    };
    ExcelExport2.prototype.destroy = function() {
    };
    return ExcelExport2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/utils.js
function defaultToString(item) {
  if (Object.prototype.toString.call(item) === "[object String]") {
    return "$s" + item;
  } else {
    return "$o" + item.toString();
  }
}

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/dictionary.js
var Dictionary = (
  /** @class */
  function() {
    function Dictionary2(toStringFunction) {
      this.table = {};
      this.nElements = 0;
      this.toStr = toStringFunction || defaultToString;
    }
    Dictionary2.prototype.getValue = function(key) {
      var pair = this.table["$" + this.toStr(key)];
      if (typeof pair === "undefined") {
        return void 0;
      }
      return pair.value;
    };
    Dictionary2.prototype.setValue = function(key, value) {
      var ret;
      var k = "$" + this.toStr(key);
      var previousElement = this.table[k];
      this.nElements++;
      ret = void 0;
      this.table[k] = {
        key,
        value
      };
      return ret;
    };
    Dictionary2.prototype.remove = function(key) {
      var k = "$" + this.toStr(key);
      var previousElement = this.table[k];
      delete this.table[k];
      this.nElements--;
      return previousElement.value;
    };
    Dictionary2.prototype.keys = function() {
      var keysArray = [];
      var namesOfKeys = Object.keys(this.table);
      for (var index1 = 0; index1 < namesOfKeys.length; index1++) {
        var pair1 = this.table[namesOfKeys[index1]];
        keysArray.push(pair1.key);
      }
      return keysArray;
    };
    Dictionary2.prototype.values = function() {
      var valuesArray = [];
      var namesOfValues = Object.keys(this.table);
      for (var index2 = 0; index2 < namesOfValues.length; index2++) {
        var pair2 = this.table[namesOfValues[index2]];
        valuesArray.push(pair2.value);
      }
      return valuesArray;
    };
    Dictionary2.prototype.containsKey = function(key) {
      var retutnValue = true;
      if (typeof this.getValue(key) === "undefined") {
        retutnValue = true;
      } else {
        retutnValue = false;
      }
      return !retutnValue;
    };
    Dictionary2.prototype.clear = function() {
      this.table = {};
      this.nElements = 0;
    };
    Dictionary2.prototype.size = function() {
      return this.nElements;
    };
    return Dictionary2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-name.js
var PdfName = (
  /** @class */
  function() {
    function PdfName2(value) {
      this.stringStartMark = "/";
      this.internalValue = "";
      this.isSaving6 = false;
      this.position6 = -1;
      this.internalValue = this.normalizeValue(value);
    }
    Object.defineProperty(PdfName2.prototype, "status", {
      //property
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status6;
      },
      set: function(value) {
        this.status6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving6;
      },
      set: function(value) {
        this.isSaving6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index6;
      },
      set: function(value) {
        this.index6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position6;
      },
      set: function(value) {
        this.position6 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfName2.prototype, "value", {
      /**
       * Gets or sets the `value` of the object.
       * @private
       */
      get: function() {
        return this.internalValue;
      },
      set: function(value) {
        var val = value;
        if (value !== null && value.length > 0) {
          val = value;
          this.internalValue = this.normalizeValue(val);
        } else {
          this.internalValue = val;
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfName2.prototype.save = function(writer) {
      writer.write(this.toString());
    };
    PdfName2.prototype.toString = function() {
      return this.stringStartMark + this.escapeString(this.value);
    };
    PdfName2.prototype.clone = function(crossTable) {
      var newName = new PdfName2();
      newName.value = this.internalValue;
      return newName;
    };
    PdfName2.prototype.escapeString = function(stringValue) {
      var result = "";
      var len = 0;
      for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {
        var ch = stringValue[i];
        var index = PdfName2.delimiters.indexOf(ch);
        result = result + ch;
      }
      return result;
    };
    PdfName2.prototype.normalizeValue = function(value, c) {
      var strFormat = "#{0:X}";
      return value;
    };
    PdfName2.delimiters = "()<>[]{}/%}";
    PdfName2.replacements = [" ", "	", "\n", "\r"];
    return PdfName2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-operators.js
var Operators = (
  /** @class */
  function() {
    function Operators2() {
      this.forTest = "test";
      this.forTest = Operators2.obj;
    }
    Operators2.obj = "obj";
    Operators2.endObj = "endobj";
    Operators2.r = "R";
    Operators2.whiteSpace = " ";
    Operators2.slash = "/";
    Operators2.newLine = "\r\n";
    Operators2.stream = "stream";
    Operators2.endStream = "endstream";
    Operators2.xref = "xref";
    Operators2.f = "f";
    Operators2.n = "n";
    Operators2.trailer = "trailer";
    Operators2.startxref = "startxref";
    Operators2.eof = "%%EOF";
    Operators2.header = "%PDF-1.5";
    Operators2.beginText = "BT";
    Operators2.endText = "ET";
    Operators2.beginPath = "m";
    Operators2.appendLineSegment = "l";
    Operators2.stroke = "S";
    Operators2.fill = "f";
    Operators2.fillEvenOdd = "f*";
    Operators2.fillStroke = "B";
    Operators2.fillStrokeEvenOdd = "B*";
    Operators2.appendbeziercurve = "c";
    Operators2.appendRectangle = "re";
    Operators2.saveState = "q";
    Operators2.restoreState = "Q";
    Operators2.paintXObject = "Do";
    Operators2.modifyCtm = "cm";
    Operators2.modifyTM = "Tm";
    Operators2.setLineWidth = "w";
    Operators2.setLineCapStyle = "J";
    Operators2.setLineJoinStyle = "j";
    Operators2.setDashPattern = "d";
    Operators2.setFlatnessTolerance = "i";
    Operators2.closePath = "h";
    Operators2.closeStrokePath = "s";
    Operators2.closeFillStrokePath = "b";
    Operators2.setCharacterSpace = "Tc";
    Operators2.setWordSpace = "Tw";
    Operators2.setHorizontalScaling = "Tz";
    Operators2.setTextLeading = "TL";
    Operators2.setFont = "Tf";
    Operators2.setRenderingMode = "Tr";
    Operators2.setTextRise = "Ts";
    Operators2.setTextScaling = "Tz";
    Operators2.setCoords = "Td";
    Operators2.goToNextLine = "T*";
    Operators2.setText = "Tj";
    Operators2.setTextWithFormatting = "TJ";
    Operators2.setTextOnNewLine = "'";
    Operators2.selectcolorspaceforstroking = "CS";
    Operators2.selectcolorspacefornonstroking = "cs";
    Operators2.setrbgcolorforstroking = "RG";
    Operators2.setrbgcolorfornonstroking = "rg";
    Operators2.setcmykcolorforstroking = "K";
    Operators2.setcmykcolorfornonstroking = "k";
    Operators2.setgraycolorforstroking = "G";
    Operators2.setgraycolorfornonstroking = "g";
    Operators2.clipPath = "W";
    Operators2.clipPathEvenOdd = "W*";
    Operators2.endPath = "n";
    Operators2.setGraphicsState = "gs";
    Operators2.comment = "%";
    Operators2.evenOdd = "*";
    Operators2.setMiterLimit = "M";
    Operators2.setColorAndPattern = "scn";
    Operators2.setColorAndPatternStroking = "SCN";
    return Operators2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-dictionary-properties.js
var DictionaryProperties = (
  /** @class */
  /* @__PURE__ */ function() {
    function DictionaryProperties2() {
      this.pages = "Pages";
      this.kids = "Kids";
      this.count = "Count";
      this.resources = "Resources";
      this.type = "Type";
      this.size = "Size";
      this.mediaBox = "MediaBox";
      this.parent = "Parent";
      this.root = "Root";
      this.decodeParms = "DecodeParms";
      this.filter = "Filter";
      this.font = "Font";
      this.type1 = "Type1";
      this.baseFont = "BaseFont";
      this.encoding = "Encoding";
      this.subtype = "Subtype";
      this.contents = "Contents";
      this.procset = "ProcSet";
      this.colorSpace = "ColorSpace";
      this.extGState = "ExtGState";
      this.pattern = "Pattern";
      this.xObject = "XObject";
      this.length = "Length";
      this.width = "Width";
      this.height = "Height";
      this.bitsPerComponent = "BitsPerComponent";
      this.image = "Image";
      this.dctdecode = "DCTDecode";
      this.columns = "Columns";
      this.blackIs1 = "BlackIs1";
      this.k = "K";
      this.s = "S";
      this.predictor = "Predictor";
      this.deviceRgb = "DeviceRGB";
      this.next = "Next";
      this.action = "Action";
      this.link = "Link";
      this.a = "A";
      this.annot = "Annot";
      this.p = "P";
      this.c = "C";
      this.rect = "Rect";
      this.uri = "URI";
      this.annots = "Annots";
      this.ca = "ca";
      this.CA = "CA";
      this.xyz = "XYZ";
      this.fit = "Fit";
      this.dest = "Dest";
      this.BM = "BM";
      this.flatedecode = "FlateDecode";
      this.rotate = "Rotate";
      this.bBox = "BBox";
      this.form = "Form";
      this.w = "W";
      this.cIDFontType2 = "CIDFontType2";
      this.cIDToGIDMap = "CIDToGIDMap";
      this.identity = "Identity";
      this.dw = "DW";
      this.fontDescriptor = "FontDescriptor";
      this.cIDSystemInfo = "CIDSystemInfo";
      this.fontName = "FontName";
      this.flags = "Flags";
      this.fontBBox = "FontBBox";
      this.missingWidth = "MissingWidth";
      this.stemV = "StemV";
      this.italicAngle = "ItalicAngle";
      this.capHeight = "CapHeight";
      this.ascent = "Ascent";
      this.descent = "Descent";
      this.leading = "Leading";
      this.avgWidth = "AvgWidth";
      this.fontFile2 = "FontFile2";
      this.maxWidth = "MaxWidth";
      this.xHeight = "XHeight";
      this.stemH = "StemH";
      this.registry = "Registry";
      this.ordering = "Ordering";
      this.supplement = "Supplement";
      this.type0 = "Type0";
      this.identityH = "Identity-H";
      this.toUnicode = "ToUnicode";
      this.descendantFonts = "DescendantFonts";
      this.background = "Background";
      this.shading = "Shading";
      this.matrix = "Matrix";
      this.antiAlias = "AntiAlias";
      this.function = "Function";
      this.extend = "Extend";
      this.shadingType = "ShadingType";
      this.coords = "Coords";
      this.domain = "Domain";
      this.range = "Range";
      this.functionType = "FunctionType";
      this.bitsPerSample = "BitsPerSample";
      this.patternType = "PatternType";
      this.paintType = "PaintType";
      this.tilingType = "TilingType";
      this.xStep = "XStep";
      this.yStep = "YStep";
      this.viewerPreferences = "ViewerPreferences";
      this.centerWindow = "CenterWindow";
      this.displayTitle = "DisplayTitle";
      this.fitWindow = "FitWindow";
      this.hideMenuBar = "HideMenubar";
      this.hideToolBar = "HideToolbar";
      this.hideWindowUI = "HideWindowUI";
      this.pageMode = "PageMode";
      this.pageLayout = "PageLayout";
      this.duplex = "Duplex";
      this.printScaling = "PrintScaling";
    }
    return DictionaryProperties2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-dictionary.js
var PdfDictionary = (
  /** @class */
  function() {
    function PdfDictionary2(dictionary) {
      this.position7 = -1;
      this.primitiveItems = new Dictionary();
      this.prefix = "<<";
      this.suffix = ">>";
      this.resources = [];
      this.object = null;
      this.archive = true;
      this.isResource = false;
      if (typeof dictionary === "undefined") {
        this.primitiveItems = new Dictionary();
        this.encrypt = true;
        this.dictionaryProperties = new DictionaryProperties();
      } else {
        this.primitiveItems = new Dictionary();
        var keys = dictionary.items.keys();
        var values = dictionary.items.values();
        for (var index = 0; index < dictionary.items.size(); index++) {
          this.primitiveItems.setValue(keys[index], values[index]);
        }
        this.status = dictionary.status;
        this.freezeChanges(this);
        this.encrypt = true;
        this.dictionaryProperties = new DictionaryProperties();
      }
    }
    Object.defineProperty(PdfDictionary2.prototype, "items", {
      //Properties
      /**
       * Gets or sets the `IPdfSavable` with the specified key.
       * @private
       */
      get: function() {
        return this.primitiveItems;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status7;
      },
      set: function(value) {
        this.status7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving7;
      },
      set: function(value) {
        this.isSaving7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index7;
      },
      set: function(value) {
        this.index7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return this.object;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position7;
      },
      set: function(value) {
        this.position7 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "Count", {
      /**
       * Gets the `count`.
       * @private
       */
      get: function() {
        return this.primitiveItems.size();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDictionary2.prototype, "Dictionary", {
      /**
       * Collection of `items` in the object.
       * @private
       */
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    PdfDictionary2.prototype.getArchive = function() {
      return this.archive;
    };
    PdfDictionary2.prototype.setArchive = function(value) {
      this.archive = value;
    };
    PdfDictionary2.prototype.setEncrypt = function(value) {
      this.encrypt = value;
      this.modify();
    };
    PdfDictionary2.prototype.getEncrypt = function() {
      return this.encrypt;
    };
    PdfDictionary2.prototype.freezeChanges = function(freezer) {
      this.bChanged = false;
    };
    PdfDictionary2.prototype.clone = function(crossTable) {
      var newDict = new PdfDictionary2();
      return newDict;
    };
    PdfDictionary2.prototype.modify = function() {
      this.bChanged = true;
    };
    PdfDictionary2.prototype.remove = function(key) {
      if (typeof key !== "string") {
        this.primitiveItems.remove(key.value);
        this.modify();
      } else {
        this.remove(new PdfName(key));
      }
    };
    PdfDictionary2.prototype.containsKey = function(key) {
      var returnValue = false;
      returnValue = this.primitiveItems.containsKey(key.toString());
      return returnValue;
    };
    PdfDictionary2.prototype.onBeginSave = function() {
      this.beginSave.sender.beginSave();
    };
    PdfDictionary2.prototype.onFontDictionaryBeginSave = function() {
      this.fontDictionaryBeginSave.sender.fontDictionaryBeginSave();
    };
    PdfDictionary2.prototype.onDescendantFontBeginSave = function() {
      this.descendantFontBeginSave.sender.descendantFontBeginSave();
    };
    PdfDictionary2.prototype.onTemplateBeginSave = function() {
      this.pageBeginDrawTemplate.sender.pageBeginSave();
    };
    PdfDictionary2.prototype.onBeginAnnotationSave = function() {
      this.annotationBeginSave.sender.beginSave();
    };
    PdfDictionary2.prototype.onSectionBeginSave = function(writer) {
      var saveEvent = this.sectionBeginSave;
      saveEvent.sender.beginSave(saveEvent.state, writer);
    };
    PdfDictionary2.prototype.save = function(writer, bRaiseEvent) {
      if (typeof bRaiseEvent === "undefined") {
        this.save(writer, true);
      } else {
        writer.write(this.prefix);
        if (typeof this.beginSave !== "undefined") {
          this.onBeginSave();
        }
        if (typeof this.descendantFontBeginSave !== "undefined") {
          this.onDescendantFontBeginSave();
        }
        if (typeof this.fontDictionaryBeginSave !== "undefined") {
          this.onFontDictionaryBeginSave();
        }
        if (typeof this.annotationBeginSave !== "undefined") {
          this.onBeginAnnotationSave();
        }
        if (typeof this.sectionBeginSave !== "undefined") {
          this.onSectionBeginSave(writer);
        }
        if (typeof this.pageBeginDrawTemplate !== "undefined") {
          this.onTemplateBeginSave();
        }
        if (this.Count > 0) {
          this.saveItems(writer);
        }
        writer.write(this.suffix);
        writer.write(Operators.newLine);
      }
    };
    PdfDictionary2.prototype.saveItems = function(writer) {
      writer.write(Operators.newLine);
      var keys = this.primitiveItems.keys();
      var values = this.primitiveItems.values();
      for (var index = 0; index < keys.length; index++) {
        var key = keys[index];
        var name_1 = new PdfName(key);
        name_1.save(writer);
        writer.write(Operators.whiteSpace);
        var resources = values[index];
        resources.save(writer);
        writer.write(Operators.newLine);
      }
    };
    return PdfDictionary2;
  }()
);
var SaveSectionCollectionEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveSectionCollectionEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveSectionCollectionEventHandler2;
  }()
);
var SaveDescendantFontEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveDescendantFontEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveDescendantFontEventHandler2;
  }()
);
var SaveFontDictionaryEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveFontDictionaryEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveFontDictionaryEventHandler2;
  }()
);
var SaveAnnotationEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveAnnotationEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveAnnotationEventHandler2;
  }()
);
var SaveSectionEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveSectionEventHandler2(sender, state) {
      this.sender = sender;
      this.state = state;
    }
    return SaveSectionEventHandler2;
  }()
);
var SaveTemplateEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveTemplateEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveTemplateEventHandler2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-number.js
var PdfNumber = (
  /** @class */
  function() {
    function PdfNumber2(value) {
      this.position5 = -1;
      this.value = value;
    }
    Object.defineProperty(PdfNumber2.prototype, "intValue", {
      /**
       * Gets or sets the `integer` value.
       * @private
       */
      get: function() {
        return this.value;
      },
      set: function(value) {
        this.value = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "isInteger", {
      /**
       * Gets or sets a value indicating whether this instance `is integer`.
       * @private
       */
      get: function() {
        return this.integer;
      },
      set: function(value) {
        this.integer = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status5;
      },
      set: function(value) {
        this.status5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving5;
      },
      set: function(value) {
        this.isSaving5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index5;
      },
      set: function(value) {
        this.index5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position5;
      },
      set: function(value) {
        this.position5 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfNumber2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        var rValue = null;
        return rValue;
      },
      enumerable: true,
      configurable: true
    });
    PdfNumber2.prototype.save = function(writer) {
      writer.write(this.intValue.toString());
    };
    PdfNumber2.prototype.clone = function(crossTable) {
      var newNumber = new PdfNumber2(this.value);
      return newNumber;
    };
    PdfNumber2.floatToString = function(number) {
      var returnString = number.toFixed(2);
      if (returnString === "0.00") {
        returnString = ".00";
      }
      return returnString;
    };
    PdfNumber2.min = function(x, y, z) {
      var r = Math.min(x, y);
      return Math.min(z, r);
    };
    return PdfNumber2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-array.js
var PdfArray = (
  /** @class */
  function() {
    function PdfArray2(array) {
      this.startMark = "[";
      this.endMark = "]";
      this.position9 = -1;
      this.clonedObject9 = null;
      this.isFont = false;
      if (typeof array === "undefined") {
        this.internalElements = [];
      } else {
        if (typeof array !== "undefined" && !(array instanceof PdfArray2)) {
          var tempNumberArray = array;
          for (var index = 0; index < tempNumberArray.length; index++) {
            var pdfNumber = new PdfNumber(tempNumberArray[index]);
            this.add(pdfNumber);
          }
        } else {
          var tempArray = array;
          this.internalElements = [];
          for (var index = 0; index < tempArray.elements.length; index++) {
            this.internalElements.push(tempArray.elements[index]);
          }
        }
      }
    }
    PdfArray2.prototype.items = function(index) {
      return this.internalElements[index];
    };
    Object.defineProperty(PdfArray2.prototype, "count", {
      /**
       * Gets the `count`.
       * @private
       */
      get: function() {
        return this.internalElements.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status9;
      },
      set: function(value) {
        this.status9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving9;
      },
      set: function(value) {
        this.isSaving9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return this.clonedObject9;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position9;
      },
      set: function(value) {
        this.position9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index9;
      },
      set: function(value) {
        this.index9 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "CrossTable", {
      /**
       * Returns `PdfCrossTable` associated with the object.
       * @private
       */
      get: function() {
        return this.pdfCrossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfArray2.prototype, "elements", {
      /**
       * Gets the `elements` of the Pdf Array.
       * @private
       */
      get: function() {
        return this.internalElements;
      },
      enumerable: true,
      configurable: true
    });
    PdfArray2.prototype.add = function(element) {
      if (typeof this.internalElements === "undefined") {
        this.internalElements = [];
      }
      this.internalElements.push(element);
      this.markedChange();
    };
    PdfArray2.prototype.markedChange = function() {
      this.bChanged = true;
    };
    PdfArray2.prototype.contains = function(element) {
      var returnValue = false;
      for (var index = 0; index < this.internalElements.length; index++) {
        var tempElement = this.internalElements[index];
        var inputElement = element;
        if (tempElement != null && typeof tempElement !== "undefined" && inputElement != null && typeof inputElement !== "undefined") {
          if (tempElement.value === inputElement.value) {
            return true;
          }
        }
      }
      return returnValue;
    };
    PdfArray2.prototype.getItems = function(index) {
      return this.internalElements[index];
    };
    PdfArray2.prototype.save = function(writer) {
      writer.write(this.startMark);
      for (var i = 0, len = this.count; i < len; i++) {
        this.getItems(i).save(writer);
        if (i + 1 !== len) {
          writer.write(Operators.whiteSpace);
        }
      }
      writer.write(this.endMark);
    };
    PdfArray2.prototype.clone = function(crossTable) {
      this.clonedObject9 = null;
      var newArray = new PdfArray2();
      for (var index = 0; index < this.internalElements.length; index++) {
        var obj = this.internalElements[index];
        newArray.add(obj.clone(crossTable));
      }
      newArray.pdfCrossTable = crossTable;
      this.clonedObject9 = newArray;
      return newArray;
    };
    PdfArray2.fromRectangle = function(bounds) {
      var values = [bounds.x, bounds.y, bounds.width, bounds.height];
      var array = new PdfArray2(values);
      return array;
    };
    PdfArray2.prototype.insert = function(index, element) {
      if (index < this.internalElements.length && index > 0) {
        var tempElements = [];
        for (var i = 0; i < index; i++) {
          tempElements.push(this.internalElements[i]);
        }
        tempElements.push(element);
        for (var i = index; i < this.internalElements.length; i++) {
          tempElements.push(this.internalElements[i]);
        }
        this.internalElements = tempElements;
      } else {
        this.internalElements.push(element);
      }
      this.markChanged();
    };
    PdfArray2.prototype.indexOf = function(element) {
      return this.internalElements.indexOf(element);
    };
    PdfArray2.prototype.remove = function(element) {
      var index = this.internalElements.indexOf(element);
      this.internalElements[index] = null;
      this.markChanged();
    };
    PdfArray2.prototype.removeAt = function(index) {
      if (this.internalElements.length > index) {
        var tempArray = [];
        for (var i = 0; i < index; i++) {
          tempArray.push(this.internalElements[i]);
        }
        for (var i = index + 1; i < this.internalElements.length; i++) {
          tempArray.push(this.internalElements[i]);
        }
        this.internalElements = tempArray;
      }
      this.markChanged();
    };
    PdfArray2.prototype.clear = function() {
      this.internalElements = [];
      this.markChanged();
    };
    PdfArray2.prototype.markChanged = function() {
      this.bChanged = true;
    };
    return PdfArray2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-stream.js
var __extends41 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfStream = (
  /** @class */
  function(_super) {
    __extends41(PdfStream2, _super);
    function PdfStream2(dictionary, data) {
      var _this = _super.call(this, dictionary) || this;
      _this.dicPrefix = "stream";
      _this.dicSuffix = "endstream";
      _this.clonedObject2 = null;
      _this.bCompress = true;
      if (typeof dictionary !== "undefined" || typeof data !== "undefined") {
        _this.dataStream2 = [];
        _this.dataStream2 = data;
        _this.bCompress2 = false;
      } else {
        _this.dataStream2 = [];
        _this.bCompress2 = true;
      }
      return _this;
    }
    Object.defineProperty(PdfStream2.prototype, "internalStream", {
      /**
       * Gets the `internal` stream.
       * @private
       */
      get: function() {
        return this.dataStream2;
      },
      set: function(value) {
        this.dataStream2 = [];
        this.dataStream2 = value;
        this.modify();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStream2.prototype, "compress", {
      /**
       * Gets or sets `compression` flag.
       * @private
       */
      get: function() {
        return this.bCompress;
      },
      set: function(value) {
        this.bCompress = value;
        this.modify();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStream2.prototype, "data", {
      /**
       * Gets or sets the `data`.
       * @private
       */
      get: function() {
        return this.dataStream2;
      },
      set: function(value) {
        this.dataStream2 = [];
        this.dataStream2 = value;
        this.modify();
      },
      enumerable: true,
      configurable: true
    });
    PdfStream2.prototype.clearStream = function() {
      this.internalStream = [];
      if (this.items.containsKey(this.dictionaryProperties.filter)) {
        this.remove(this.dictionaryProperties.filter);
      }
      this.bCompress = true;
      this.modify();
    };
    PdfStream2.prototype.write = function(text) {
      if (text == null) {
        throw new Error("ArgumentNullException:text");
      }
      if (text.length <= 0) {
        throw new Error("ArgumentException: Can not write an empty string, text");
      }
      this.dataStream2.push(text);
      this.modify();
    };
    PdfStream2.prototype.writeBytes = function(data) {
      if (data === null) {
        throw new Error("ArgumentNullException:data");
      }
      if (data.length <= 0) {
        throw new Error("ArgumentException: Can not write an empty bytes, data");
      }
      var text = "";
      for (var i = 0; i < data.length; i++) {
        text += String.fromCharCode(data[i]);
      }
      this.dataStream2.push(text);
      this.modify();
    };
    PdfStream2.prototype.onCmapBeginSave = function() {
      this.cmapBeginSave.sender.cmapBeginSave();
    };
    PdfStream2.prototype.onFontProgramBeginSave = function() {
      this.fontProgramBeginSave.sender.fontProgramBeginSave();
    };
    PdfStream2.prototype.compressContent = function(data, writer) {
      if (this.bCompress) {
        var byteArray = [];
        for (var i = 0; i < data.length; i++) {
          byteArray.push(data.charCodeAt(i));
        }
        var dataArray = new Uint8Array(byteArray);
        var sw = new CompressedStreamWriter();
        sw.write(dataArray, 0, dataArray.length);
        sw.close();
        data = sw.getCompressedString;
        this.addFilter(this.dictionaryProperties.flatedecode);
      }
      return data;
    };
    PdfStream2.prototype.addFilter = function(filterName) {
      var obj = this.items.getValue(this.dictionaryProperties.filter);
      if (obj instanceof PdfReferenceHolder) {
        var rh = obj;
        obj = rh.object;
      }
      var array = obj;
      var name = obj;
      if (name != null) {
        array = new PdfArray();
        array.insert(0, name);
        this.items.setValue(this.dictionaryProperties.filter, array);
      }
      name = new PdfName(filterName);
      if (array == null) {
        this.items.setValue(this.dictionaryProperties.filter, name);
      } else {
        array.insert(0, name);
      }
    };
    PdfStream2.prototype.save = function(writer) {
      if (typeof this.cmapBeginSave !== "undefined") {
        this.onCmapBeginSave();
      }
      if (typeof this.fontProgramBeginSave !== "undefined") {
        this.onFontProgramBeginSave();
      }
      var data = "";
      for (var i = 0; i < this.data.length; i++) {
        data = data + this.data[i];
      }
      if (data.length > 1 && !this.isResource) {
        data = "q\r\n" + data + "Q\r\n";
      }
      data = this.compressContent(data, writer);
      var length = data.length;
      this.items.setValue(this.dictionaryProperties.length, new PdfNumber(length));
      _super.prototype.save.call(this, writer, false);
      writer.write(this.dicPrefix);
      writer.write(Operators.newLine);
      if (data.length > 0) {
        writer.write(data);
      }
      writer.write(Operators.newLine);
      writer.write(this.dicSuffix);
      writer.write(Operators.newLine);
    };
    PdfStream2.bytesToString = function(byteArray) {
      var output = "";
      for (var i = 0; i < byteArray.length; i++) {
        output = output + String.fromCharCode(byteArray[i]);
      }
      return output;
    };
    return PdfStream2;
  }(PdfDictionary)
);
var SaveCmapEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveCmapEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveCmapEventHandler2;
  }()
);
var SaveFontProgramEventHandler = (
  /** @class */
  /* @__PURE__ */ function() {
    function SaveFontProgramEventHandler2(sender) {
      this.sender = sender;
    }
    return SaveFontProgramEventHandler2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-string.js
var InternalEnum;
(function(InternalEnum2) {
  var ForceEncoding;
  (function(ForceEncoding2) {
    ForceEncoding2[ForceEncoding2["None"] = 0] = "None";
    ForceEncoding2[ForceEncoding2["Ascii"] = 1] = "Ascii";
    ForceEncoding2[ForceEncoding2["Unicode"] = 2] = "Unicode";
  })(ForceEncoding = InternalEnum2.ForceEncoding || (InternalEnum2.ForceEncoding = {}));
  var SourceType;
  (function(SourceType2) {
    SourceType2[SourceType2["StringValue"] = 0] = "StringValue";
    SourceType2[SourceType2["ByteBuffer"] = 1] = "ByteBuffer";
  })(SourceType || (SourceType = {}));
})(InternalEnum || (InternalEnum = {}));
var PdfString = (
  /** @class */
  function() {
    function PdfString2(value) {
      this.bHex = false;
      this.position1 = -1;
      this.clonedObject1 = null;
      this.bDecrypted = false;
      this.isParentDecrypted = false;
      this.isPacked = false;
      this.isFormField = false;
      this.isColorSpace = false;
      this.isHexString = true;
      if (typeof value === "undefined") {
        this.bHex = false;
      } else {
        if (!(value.length > 0 && value[0] === "0xfeff")) {
          this.stringValue = value;
          this.data = [];
          for (var i = 0; i < value.length; ++i) {
            this.data.push(value.charCodeAt(i));
          }
        }
      }
    }
    Object.defineProperty(PdfString2.prototype, "hex", {
      //Property
      /**
       * Gets a value indicating whether string is in `hex`.
       * @private
       */
      get: function() {
        return this.bHex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "value", {
      /**
       * Gets or sets string `value` of the object.
       * @private
       */
      get: function() {
        return this.stringValue;
      },
      set: function(value) {
        this.stringValue = value;
        this.data = null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "status", {
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status1;
      },
      set: function(value) {
        this.status1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving1;
      },
      set: function(value) {
        this.isSaving1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index1;
      },
      set: function(value) {
        this.index1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return this.clonedObject1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position1;
      },
      set: function(value) {
        this.position1 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "CrossTable", {
      /**
       * Returns `PdfCrossTable` associated with the object.
       * @private
       */
      get: function() {
        return this.crossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "converted", {
      /**
       * Gets a value indicating whether to check if the value has unicode characters.
       * @private
       */
      get: function() {
        return this.bConverted;
      },
      /**
       * sets a value indicating whether to check if the value has unicode characters.
       * @private
       */
      set: function(value) {
        this.bConverted = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfString2.prototype, "encode", {
      /**
       * Gets value indicating whether we should convert data to Unicode.
       */
      get: function() {
        return this.bForceEncoding;
      },
      set: function(value) {
        this.bForceEncoding = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfString2.bytesToHex = function(bytes) {
      if (bytes == null) {
        return "";
      }
      var builder = "";
      return builder;
    };
    PdfString2.prototype.save = function(writer) {
      if (writer === null) {
        throw new Error("ArgumentNullException : writer");
      }
      if (this.encode !== void 0 && this.encode === InternalEnum.ForceEncoding.Ascii) {
        writer.write(this.pdfEncode());
      } else {
        writer.write(PdfString2.stringMark[0] + this.value + PdfString2.stringMark[1]);
      }
    };
    PdfString2.prototype.pdfEncode = function() {
      var result = "";
      if (this.encode !== void 0 && this.encode === InternalEnum.ForceEncoding.Ascii) {
        var data = this.escapeSymbols(this.value);
        for (var i = 0; i < data.length; i++) {
          result += String.fromCharCode(data[i]);
        }
        result = PdfString2.stringMark[0] + result + PdfString2.stringMark[1];
      } else {
        result = this.value;
      }
      return result;
    };
    PdfString2.prototype.escapeSymbols = function(value) {
      var data = [];
      for (var i = 0; i < value.length; i++) {
        var currentData = value.charCodeAt(i);
        switch (currentData) {
          case 40:
          case 41:
            data.push(92);
            data.push(currentData);
            break;
          case 13:
            data.push(92);
            data.push(114);
            break;
          case 92:
            data.push(92);
            data.push(currentData);
            break;
          default:
            data.push(currentData);
            break;
        }
      }
      return data;
    };
    PdfString2.prototype.clone = function(crossTable) {
      if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {
        return this.clonedObject1;
      } else {
        this.clonedObject1 = null;
      }
      var newString = new PdfString2(this.stringValue);
      newString.bHex = this.bHex;
      newString.crossTable = crossTable;
      newString.isColorSpace = this.isColorSpace;
      this.clonedObject1 = newString;
      return newString;
    };
    PdfString2.toUnicodeArray = function(value, bAddPrefix) {
      if (value == null) {
        throw new Error("Argument Null Exception : value");
      }
      var startIndex = 0;
      var output = [];
      for (var i = 0; i < value.length; i++) {
        var code = value.charCodeAt(i);
        output.push(code / 256 >>> 0);
        output.push(code & 255);
      }
      return output;
    };
    PdfString2.byteToString = function(data) {
      if (data == null) {
        throw new Error("Argument Null Exception : stream");
      }
      var result = "";
      for (var i = 0; i < data.length; ++i) {
        result += String.fromCharCode(data[i]);
      }
      return result;
    };
    PdfString2.stringMark = "()";
    PdfString2.hexStringMark = "<>";
    PdfString2.hexFormatPattern = "{0:X2}";
    return PdfString2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-reference.js
var PdfReference = (
  /** @class */
  function() {
    function PdfReference2(objNumber, genNumber) {
      this.index3 = -1;
      this.position3 = -1;
      this.objNumber = 0;
      this.genNumber = 0;
      if (typeof objNumber === "number" && typeof genNumber === "number") {
        this.objNumber = objNumber;
        this.genNumber = genNumber;
      } else {
        this.objNumber = Number(objNumber);
        this.genNumber = Number(genNumber);
      }
    }
    Object.defineProperty(PdfReference2.prototype, "status", {
      //Property
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status3;
      },
      set: function(value) {
        this.status3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving3;
      },
      set: function(value) {
        this.isSaving3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index3;
      },
      set: function(value) {
        this.index3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position3;
      },
      set: function(value) {
        this.position3 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReference2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        var returnObject3 = null;
        return returnObject3;
      },
      enumerable: true,
      configurable: true
    });
    PdfReference2.prototype.save = function(writer) {
      writer.write(this.toString());
    };
    PdfReference2.prototype.toString = function() {
      return this.objNumber.toString() + " " + this.genNumber.toString() + " R";
    };
    PdfReference2.prototype.clone = function(crossTable) {
      return null;
    };
    return PdfReference2;
  }()
);
var PdfReferenceHolder = (
  /** @class */
  function() {
    function PdfReferenceHolder2(obj1, obj2) {
      this.index4 = -1;
      this.position4 = -1;
      this.objectIndex = -1;
      this.dictionaryProperties = new DictionaryProperties();
      this.initialize(obj1);
    }
    Object.defineProperty(PdfReferenceHolder2.prototype, "status", {
      //Properties
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.status4;
      },
      set: function(value) {
        this.status4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.isSaving4;
      },
      set: function(value) {
        this.isSaving4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index4;
      },
      set: function(value) {
        this.index4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.position4;
      },
      set: function(value) {
        this.position4 = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "object", {
      /**
       * Gets the `object` the reference is of.
       * @private
       */
      get: function() {
        return this.primitiveObject;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "reference", {
      /**
       * Gets the `reference`.
       * @private
       */
      get: function() {
        return this.pdfReference;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "index", {
      /**
       * Gets the `index` of the object.
       * @private
       */
      get: function() {
        return this.objectIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfReferenceHolder2.prototype, "element", {
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.primitiveObject;
      },
      enumerable: true,
      configurable: true
    });
    PdfReferenceHolder2.prototype.initialize = function(obj1) {
      if (obj1 instanceof PdfArray || obj1 instanceof PdfDictionary || obj1 instanceof PdfName || obj1 instanceof PdfNumber || obj1 instanceof PdfStream || obj1 instanceof PdfReference || obj1 instanceof PdfString) {
        this.primitiveObject = obj1;
      } else {
        var tempObj = obj1;
        this.initialize(tempObj.element);
      }
    };
    PdfReferenceHolder2.prototype.save = function(writer) {
      var position = writer.position;
      var cTable = writer.document.crossTable;
      this.object.isSaving = true;
      var reference = null;
      reference = cTable.getReference(this.object);
      reference.save(writer);
    };
    PdfReferenceHolder2.prototype.clone = function(crossTable) {
      var refHolder = null;
      var temp = null;
      var refNum = "";
      var reference = null;
      return null;
    };
    return PdfReferenceHolder2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/actions/action.js
var PdfAction = (
  /** @class */
  function() {
    function PdfAction2() {
      this.action = null;
      this.dictionaryProperties = new DictionaryProperties();
      this.initialize();
    }
    Object.defineProperty(PdfAction2.prototype, "next", {
      // Properties
      /**
       * Gets and Sets the `Next` action to perform.
       * @private
       */
      get: function() {
        return this.action;
      },
      set: function(value) {
        this.action = value;
        this.dictionary.items.setValue(this.dictionaryProperties.next, new PdfReferenceHolder(this.action));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAction2.prototype, "dictionary", {
      /**
       * Gets and Sets the instance of PdfDictionary class for `Dictionary`.
       * @private
       */
      get: function() {
        if (typeof this.pdfDictionary === "undefined") {
          this.pdfDictionary = new PdfDictionary();
        }
        return this.pdfDictionary;
      },
      enumerable: true,
      configurable: true
    });
    PdfAction2.prototype.initialize = function() {
      this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.action));
    };
    Object.defineProperty(PdfAction2.prototype, "element", {
      // IPdfWrapper Members
      /**
       * Gets the `Element` as IPdfPrimitive class.
       * @private
       */
      get: function() {
        return this.dictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAction2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/actions/uri-action.js
var __extends42 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfUriAction = (
  /** @class */
  function(_super) {
    __extends42(PdfUriAction2, _super);
    function PdfUriAction2(uri) {
      var _this = _super.call(this) || this;
      _this.uniformResourceIdentifier = "";
      return _this;
    }
    Object.defineProperty(PdfUriAction2.prototype, "uri", {
      // Properties
      /**
       * Gets and Sets the value of `Uri`.
       * @private
       */
      get: function() {
        return this.uniformResourceIdentifier;
      },
      set: function(value) {
        this.uniformResourceIdentifier = value;
        this.dictionary.items.setValue(this.dictionaryProperties.uri, new PdfString(this.uniformResourceIdentifier));
      },
      enumerable: true,
      configurable: true
    });
    PdfUriAction2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      this.dictionary.items.setValue(this.dictionaryProperties.s, new PdfName(this.dictionaryProperties.uri));
    };
    return PdfUriAction2;
  }(PdfAction)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/enum.js
var PdfHorizontalAlignment;
(function(PdfHorizontalAlignment2) {
  PdfHorizontalAlignment2[PdfHorizontalAlignment2["Left"] = 0] = "Left";
  PdfHorizontalAlignment2[PdfHorizontalAlignment2["Center"] = 1] = "Center";
  PdfHorizontalAlignment2[PdfHorizontalAlignment2["Right"] = 2] = "Right";
})(PdfHorizontalAlignment || (PdfHorizontalAlignment = {}));
var PdfVerticalAlignment;
(function(PdfVerticalAlignment2) {
  PdfVerticalAlignment2[PdfVerticalAlignment2["Top"] = 0] = "Top";
  PdfVerticalAlignment2[PdfVerticalAlignment2["Middle"] = 1] = "Middle";
  PdfVerticalAlignment2[PdfVerticalAlignment2["Bottom"] = 2] = "Bottom";
})(PdfVerticalAlignment || (PdfVerticalAlignment = {}));
var PdfTextAlignment;
(function(PdfTextAlignment2) {
  PdfTextAlignment2[PdfTextAlignment2["Left"] = 0] = "Left";
  PdfTextAlignment2[PdfTextAlignment2["Center"] = 1] = "Center";
  PdfTextAlignment2[PdfTextAlignment2["Right"] = 2] = "Right";
  PdfTextAlignment2[PdfTextAlignment2["Justify"] = 3] = "Justify";
})(PdfTextAlignment || (PdfTextAlignment = {}));
var TextRenderingMode;
(function(TextRenderingMode2) {
  TextRenderingMode2[TextRenderingMode2["Fill"] = 0] = "Fill";
  TextRenderingMode2[TextRenderingMode2["Stroke"] = 1] = "Stroke";
  TextRenderingMode2[TextRenderingMode2["FillStroke"] = 2] = "FillStroke";
  TextRenderingMode2[TextRenderingMode2["None"] = 3] = "None";
  TextRenderingMode2[TextRenderingMode2["ClipFlag"] = 4] = "ClipFlag";
  TextRenderingMode2[TextRenderingMode2["ClipFill"] = 4] = "ClipFill";
  TextRenderingMode2[TextRenderingMode2["ClipStroke"] = 5] = "ClipStroke";
  TextRenderingMode2[TextRenderingMode2["ClipFillStroke"] = 6] = "ClipFillStroke";
  TextRenderingMode2[TextRenderingMode2["Clip"] = 7] = "Clip";
})(TextRenderingMode || (TextRenderingMode = {}));
var PdfLineJoin;
(function(PdfLineJoin2) {
  PdfLineJoin2[PdfLineJoin2["Miter"] = 0] = "Miter";
  PdfLineJoin2[PdfLineJoin2["Round"] = 1] = "Round";
  PdfLineJoin2[PdfLineJoin2["Bevel"] = 2] = "Bevel";
})(PdfLineJoin || (PdfLineJoin = {}));
var PdfLineCap;
(function(PdfLineCap2) {
  PdfLineCap2[PdfLineCap2["Flat"] = 0] = "Flat";
  PdfLineCap2[PdfLineCap2["Round"] = 1] = "Round";
  PdfLineCap2[PdfLineCap2["Square"] = 2] = "Square";
})(PdfLineCap || (PdfLineCap = {}));
var PdfDashStyle;
(function(PdfDashStyle2) {
  PdfDashStyle2[PdfDashStyle2["Solid"] = 0] = "Solid";
  PdfDashStyle2[PdfDashStyle2["Dash"] = 1] = "Dash";
  PdfDashStyle2[PdfDashStyle2["Dot"] = 2] = "Dot";
  PdfDashStyle2[PdfDashStyle2["DashDot"] = 3] = "DashDot";
  PdfDashStyle2[PdfDashStyle2["DashDotDot"] = 4] = "DashDotDot";
  PdfDashStyle2[PdfDashStyle2["Custom"] = 5] = "Custom";
})(PdfDashStyle || (PdfDashStyle = {}));
var PdfFillMode;
(function(PdfFillMode2) {
  PdfFillMode2[PdfFillMode2["Winding"] = 0] = "Winding";
  PdfFillMode2[PdfFillMode2["Alternate"] = 1] = "Alternate";
})(PdfFillMode || (PdfFillMode = {}));
var PdfColorSpace;
(function(PdfColorSpace2) {
  PdfColorSpace2[PdfColorSpace2["Rgb"] = 0] = "Rgb";
  PdfColorSpace2[PdfColorSpace2["Cmyk"] = 1] = "Cmyk";
  PdfColorSpace2[PdfColorSpace2["GrayScale"] = 2] = "GrayScale";
  PdfColorSpace2[PdfColorSpace2["Indexed"] = 3] = "Indexed";
})(PdfColorSpace || (PdfColorSpace = {}));
var PdfBlendMode;
(function(PdfBlendMode2) {
  PdfBlendMode2[PdfBlendMode2["Normal"] = 0] = "Normal";
  PdfBlendMode2[PdfBlendMode2["Multiply"] = 1] = "Multiply";
  PdfBlendMode2[PdfBlendMode2["Screen"] = 2] = "Screen";
  PdfBlendMode2[PdfBlendMode2["Overlay"] = 3] = "Overlay";
  PdfBlendMode2[PdfBlendMode2["Darken"] = 4] = "Darken";
  PdfBlendMode2[PdfBlendMode2["Lighten"] = 5] = "Lighten";
  PdfBlendMode2[PdfBlendMode2["ColorDodge"] = 6] = "ColorDodge";
  PdfBlendMode2[PdfBlendMode2["ColorBurn"] = 7] = "ColorBurn";
  PdfBlendMode2[PdfBlendMode2["HardLight"] = 8] = "HardLight";
  PdfBlendMode2[PdfBlendMode2["SoftLight"] = 9] = "SoftLight";
  PdfBlendMode2[PdfBlendMode2["Difference"] = 10] = "Difference";
  PdfBlendMode2[PdfBlendMode2["Exclusion"] = 11] = "Exclusion";
  PdfBlendMode2[PdfBlendMode2["Hue"] = 12] = "Hue";
  PdfBlendMode2[PdfBlendMode2["Saturation"] = 13] = "Saturation";
  PdfBlendMode2[PdfBlendMode2["Color"] = 14] = "Color";
  PdfBlendMode2[PdfBlendMode2["Luminosity"] = 15] = "Luminosity";
})(PdfBlendMode || (PdfBlendMode = {}));
var PdfGraphicsUnit;
(function(PdfGraphicsUnit2) {
  PdfGraphicsUnit2[PdfGraphicsUnit2["Centimeter"] = 0] = "Centimeter";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Pica"] = 1] = "Pica";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Pixel"] = 2] = "Pixel";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Point"] = 3] = "Point";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Inch"] = 4] = "Inch";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Document"] = 5] = "Document";
  PdfGraphicsUnit2[PdfGraphicsUnit2["Millimeter"] = 6] = "Millimeter";
})(PdfGraphicsUnit || (PdfGraphicsUnit = {}));
var PdfGridImagePosition;
(function(PdfGridImagePosition2) {
  PdfGridImagePosition2[PdfGridImagePosition2["Fit"] = 0] = "Fit";
  PdfGridImagePosition2[PdfGridImagePosition2["Center"] = 1] = "Center";
  PdfGridImagePosition2[PdfGridImagePosition2["Stretch"] = 2] = "Stretch";
  PdfGridImagePosition2[PdfGridImagePosition2["Tile"] = 3] = "Tile";
})(PdfGridImagePosition || (PdfGridImagePosition = {}));
var PdfTextDirection;
(function(PdfTextDirection2) {
  PdfTextDirection2[PdfTextDirection2["None"] = 0] = "None";
  PdfTextDirection2[PdfTextDirection2["LeftToRight"] = 1] = "LeftToRight";
  PdfTextDirection2[PdfTextDirection2["RightToLeft"] = 2] = "RightToLeft";
})(PdfTextDirection || (PdfTextDirection = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-color.js
var PdfColor = (
  /** @class */
  function() {
    function PdfColor2(color1, color2, color3, color4) {
      if (typeof color1 === "undefined") {
        if (typeof color2 !== "undefined" && typeof color3 !== "undefined" && typeof color4 !== "undefined") {
          this.assignRGB(color2, color3, color4);
        } else {
          this.filled = false;
        }
      } else if (color1 instanceof PdfColor2) {
        this.redColor = color1.r;
        this.greenColor = color1.g;
        this.blueColor = color1.b;
        this.grayColor = color1.gray;
        this.alpha = color1.alpha;
        this.filled = this.alpha !== 0;
      } else if (typeof color1 === "number" && typeof color2 === "undefined" && typeof color3 === "undefined" && typeof color4 === "undefined") {
        if (color1 < 0) {
          color1 = 0;
        }
        if (color1 > 1) {
          color1 = 1;
        }
        this.redColor = color1 * PdfColor2.maxColourChannelValue;
        this.greenColor = color1 * PdfColor2.maxColourChannelValue;
        this.blueColor = color1 * PdfColor2.maxColourChannelValue;
        this.cyanColor = color1;
        this.magentaColor = color1;
        this.yellowColor = color1;
        this.blackColor = color1;
        this.grayColor = color1;
        this.alpha = PdfColor2.maxColourChannelValue;
        this.filled = true;
      } else if (typeof color4 === "undefined") {
        this.assignRGB(color1, color2, color3);
      } else {
        this.assignRGB(color2, color3, color4, color1);
      }
    }
    PdfColor2.prototype.assignRGB = function(r, g, b, a) {
      if (typeof r === "undefined" || typeof g === "undefined" || typeof b === "undefined") {
        this.filled = false;
      } else {
        this.cyanColor = 0;
        this.magentaColor = 0;
        this.yellowColor = 0;
        this.blackColor = 0;
        this.grayColor = 0;
        this.redColor = r;
        this.greenColor = g;
        this.blueColor = b;
        if (typeof a === "undefined") {
          this.alpha = PdfColor2.maxColourChannelValue;
        } else {
          this.alpha = a;
        }
        this.filled = true;
        this.assignCMYK(r, g, b);
      }
    };
    PdfColor2.prototype.assignCMYK = function(r, g, b) {
      var red = r / PdfColor2.maxColourChannelValue;
      var green = g / PdfColor2.maxColourChannelValue;
      var blue = b / PdfColor2.maxColourChannelValue;
      var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);
      var cyan = black === 1 ? 0 : (1 - red - black) / (1 - black);
      var magenta = black === 1 ? 0 : (1 - green - black) / (1 - black);
      var yellow = black === 1 ? 0 : (1 - blue - black) / (1 - black);
      this.blackColor = black;
      this.cyanColor = cyan;
      this.magentaColor = magenta;
      this.yellowColor = yellow;
    };
    Object.defineProperty(PdfColor2.prototype, "r", {
      //Properties
      // public static get Empty():PdfColor
      // {
      //     return this.s_emptyColor
      // }
      /**
       * Gets or sets `Red` channel value.
       * @private
       */
      get: function() {
        return this.redColor;
      },
      set: function(value) {
        this.redColor = value;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "red", {
      /**
       * Gets the `Red` color
       * @private
       */
      get: function() {
        return this.r / PdfColor2.maxColourChannelValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "b", {
      /**
       * Gets or sets `Blue` channel value.
       * @private
       */
      get: function() {
        return this.blueColor;
      },
      set: function(value) {
        this.blueColor = value;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "blue", {
      /**
       * Gets the `blue` color.
       * @private
       */
      get: function() {
        return this.b / PdfColor2.maxColourChannelValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "c", {
      /**
       * Gets or sets `Cyan` channel value.
       * @private
       */
      get: function() {
        return this.cyanColor;
      },
      set: function(value) {
        if (value < 0) {
          this.cyanColor = 0;
        } else if (value > 1) {
          this.cyanColor = 1;
        } else {
          this.cyanColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "k", {
      /**
       * Gets or sets `Black` channel value.
       * @private
       */
      get: function() {
        return this.blackColor;
      },
      set: function(value) {
        if (value < 0) {
          this.blackColor = 0;
        } else if (value > 1) {
          this.blackColor = 1;
        } else {
          this.blackColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "m", {
      /**
       * Gets or sets `Magenta` channel value.
       * @private
       */
      get: function() {
        return this.magentaColor;
      },
      set: function(value) {
        if (value < 0) {
          this.magentaColor = 0;
        } else if (value > 1) {
          this.magentaColor = 1;
        } else {
          this.magentaColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "y", {
      /**
       * Gets or sets `Yellow` channel value.
       * @private
       */
      get: function() {
        return this.yellowColor;
      },
      set: function(value) {
        if (value < 0) {
          this.yellowColor = 0;
        } else if (value > 1) {
          this.yellowColor = 1;
        } else {
          this.yellowColor = value;
        }
        this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "g", {
      /**
       *  Gets or sets `Green` channel value.
       * @private
       */
      get: function() {
        return this.greenColor;
      },
      set: function(value) {
        this.greenColor = value;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "green", {
      /**
       * Gets the `Green` color.
       * @private
       */
      get: function() {
        return this.g / PdfColor2.maxColourChannelValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "gray", {
      /**
       * Gets or sets `Gray` channel value.
       * @private
       */
      get: function() {
        return (this.redColor + this.greenColor + this.blueColor) / (PdfColor2.maxColourChannelValue * 3);
      },
      set: function(value) {
        if (value < 0) {
          this.grayColor = 0;
        } else if (value > 1) {
          this.grayColor = 1;
        } else {
          this.grayColor = value;
        }
        this.r = this.grayColor * PdfColor2.maxColourChannelValue;
        this.g = this.grayColor * PdfColor2.maxColourChannelValue;
        this.b = this.grayColor * PdfColor2.maxColourChannelValue;
        this.assignCMYK(this.redColor, this.greenColor, this.blueColor);
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "isEmpty", {
      /**
       * Gets whether the PDFColor `is Empty` or not.
       * @private
       */
      get: function() {
        return !this.filled;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfColor2.prototype, "a", {
      /**
       * Gets or sets `Alpha` channel value.
       * @private
       */
      get: function() {
        return this.alpha;
      },
      set: function(value) {
        if (value < 0) {
          this.alpha = 0;
        } else {
          this.alpha = value;
        }
        this.filled = true;
      },
      enumerable: true,
      configurable: true
    });
    PdfColor2.prototype.toString = function(colorSpace, stroke) {
      if (this.isEmpty) {
        return "";
      }
      var str = "";
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          str = this.rgbToString(stroke);
          break;
        case PdfColorSpace.GrayScale:
          str = this.grayScaleToString(stroke);
          break;
        case PdfColorSpace.Cmyk:
          str = this.cmykToString(stroke);
          break;
      }
      return str;
    };
    PdfColor2.prototype.grayScaleToString = function(ifStroking) {
      var gray = this.gray;
      var colour = "";
      var obj = null;
      obj = ifStroking ? PdfColor2.grayStringsSroke.containsKey(gray) ? PdfColor2.grayStringsSroke.getValue(gray) : null : PdfColor2.grayStringsFill.containsKey(gray) ? PdfColor2.grayStringsFill.getValue(gray) : null;
      if (obj == null) {
        if (ifStroking) {
          colour = gray.toString() + " G";
          PdfColor2.grayStringsSroke.setValue(gray, colour);
        }
      } else {
        colour = obj.toString();
      }
      return colour + Operators.newLine;
    };
    PdfColor2.prototype.rgbToString = function(ifStroking) {
      var r = this.r;
      var g = this.g;
      var b = this.b;
      var key = (r << 16) + (g << 8) + b;
      if (ifStroking) {
        key += 1 << 24;
      }
      var colour = "";
      var obj = null;
      if (PdfColor2.rgbStrings.containsKey(key)) {
        obj = PdfColor2.rgbStrings.getValue(key);
      }
      if (obj == null) {
        var red = r / PdfColor2.maxColourChannelValue;
        var green = g / PdfColor2.maxColourChannelValue;
        var blue = b / PdfColor2.maxColourChannelValue;
        if (ifStroking) {
          colour = red.toString() + " " + green.toString() + " " + blue.toString() + " RG";
        } else {
          colour = red.toString() + " " + green.toString() + " " + blue.toString() + " rg";
        }
        PdfColor2.rgbStrings.setValue(key, colour);
      } else {
        colour = obj.toString();
      }
      return colour + Operators.newLine;
    };
    PdfColor2.prototype.cmykToString = function(ifStroking) {
      var cyan = this.c;
      var magenta = this.m;
      var yellow = this.y;
      var black = this.b;
      var colour = "";
      colour = cyan.toString() + " " + magenta.toString() + " " + yellow.toString() + " " + black.toString() + " K";
      return colour + Operators.newLine;
    };
    PdfColor2.prototype.toArray = function(colorSpace) {
      var array = new PdfArray();
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          array.add(new PdfNumber(this.red));
          array.add(new PdfNumber(this.green));
          array.add(new PdfNumber(this.blue));
          break;
      }
      return array;
    };
    PdfColor2.rgbStrings = new Dictionary();
    PdfColor2.grayStringsSroke = new Dictionary();
    PdfColor2.grayStringsFill = new Dictionary();
    PdfColor2.maxColourChannelValue = 255;
    return PdfColor2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/drawing/pdf-drawing.js
var PointF = (
  /** @class */
  /* @__PURE__ */ function() {
    function PointF2(x, y) {
      if (typeof x === "undefined") {
        this.x = 0;
        this.y = 0;
      } else {
        if (x !== null) {
          this.x = x;
        } else {
          this.x = 0;
        }
        if (y !== null) {
          this.y = y;
        } else {
          this.y = 0;
        }
      }
    }
    return PointF2;
  }()
);
var SizeF = (
  /** @class */
  /* @__PURE__ */ function() {
    function SizeF2(width, height) {
      if (typeof height === "undefined") {
        this.height = 0;
        this.width = 0;
      } else {
        if (height !== null) {
          this.height = height;
        } else {
          this.height = 0;
        }
        if (width !== null) {
          this.width = width;
        } else {
          this.width = 0;
        }
      }
    }
    return SizeF2;
  }()
);
var RectangleF = (
  /** @class */
  /* @__PURE__ */ function() {
    function RectangleF2(arg1, arg2, arg3, arg4) {
      if (typeof arg1 === typeof arg1 && typeof arg1 === "undefined") {
        this.x = 0;
        this.y = 0;
        this.height = 0;
        this.width = 0;
      } else {
        if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === "undefined") {
          var pointf = arg1;
          this.x = pointf.x;
          this.y = pointf.y;
          var sizef = arg2;
          this.height = sizef.height;
          this.width = sizef.width;
        } else {
          var x = arg1;
          var y = arg2;
          var width = arg3;
          var height = arg4;
          this.x = x;
          this.y = y;
          this.height = height;
          this.width = width;
        }
      }
    }
    return RectangleF2;
  }()
);
var Rectangle = (
  /** @class */
  function() {
    function Rectangle2(left, top, right, bottom) {
      this.left = left;
      this.top = top;
      this.right = right;
      this.bottom = bottom;
    }
    Object.defineProperty(Rectangle2.prototype, "width", {
      /**
       * Gets a value of width
       */
      get: function() {
        return this.right - this.left;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "height", {
      /**
       * Gets a value of height
       */
      get: function() {
        return this.bottom - this.top;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "topLeft", {
      /**
       * Gets a value of Top and Left
       */
      get: function() {
        return new PointF(this.left, this.top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Rectangle2.prototype, "size", {
      /**
       * Gets a value of size
       */
      get: function() {
        return new SizeF(this.width, this.height);
      },
      enumerable: true,
      configurable: true
    });
    Rectangle2.prototype.toString = function() {
      return this.topLeft + "x" + this.size;
    };
    return Rectangle2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-brush.js
var PdfBrush = (
  /** @class */
  function() {
    function PdfBrush2() {
    }
    PdfBrush2.prototype.clone = function() {
      return this;
    };
    return PdfBrush2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-solid-brush.js
var __extends43 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSolidBrush = (
  /** @class */
  function(_super) {
    __extends43(PdfSolidBrush2, _super);
    function PdfSolidBrush2(color) {
      var _this = _super.call(this) || this;
      _this.pdfColor = color;
      return _this;
    }
    Object.defineProperty(PdfSolidBrush2.prototype, "color", {
      //Properties
      /**
       * Gets or sets the `color` of the brush.
       * @private
       */
      get: function() {
        return this.pdfColor;
      },
      set: function(value) {
        this.pdfColor = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfSolidBrush2.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
      if (streamWriter == null) {
        throw new Error("ArgumentNullException:streamWriter");
      }
      var diff = false;
      if (brush == null) {
        diff = true;
        streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);
        return diff;
      } else {
        var sBrush = brush;
        diff = true;
        streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);
        return diff;
      }
    };
    PdfSolidBrush2.prototype.resetChanges = function(streamWriter) {
      streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);
    };
    return PdfSolidBrush2;
  }(PdfBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/enum.js
var PdfFontStyle;
(function(PdfFontStyle2) {
  PdfFontStyle2[PdfFontStyle2["Regular"] = 0] = "Regular";
  PdfFontStyle2[PdfFontStyle2["Bold"] = 1] = "Bold";
  PdfFontStyle2[PdfFontStyle2["Italic"] = 2] = "Italic";
  PdfFontStyle2[PdfFontStyle2["Underline"] = 4] = "Underline";
  PdfFontStyle2[PdfFontStyle2["Strikeout"] = 8] = "Strikeout";
})(PdfFontStyle || (PdfFontStyle = {}));
var PdfFontFamily;
(function(PdfFontFamily2) {
  PdfFontFamily2[PdfFontFamily2["Helvetica"] = 0] = "Helvetica";
  PdfFontFamily2[PdfFontFamily2["Courier"] = 1] = "Courier";
  PdfFontFamily2[PdfFontFamily2["TimesRoman"] = 2] = "TimesRoman";
  PdfFontFamily2[PdfFontFamily2["Symbol"] = 3] = "Symbol";
  PdfFontFamily2[PdfFontFamily2["ZapfDingbats"] = 4] = "ZapfDingbats";
})(PdfFontFamily || (PdfFontFamily = {}));
var PdfFontType;
(function(PdfFontType2) {
  PdfFontType2[PdfFontType2["Standard"] = 0] = "Standard";
  PdfFontType2[PdfFontType2["TrueType"] = 1] = "TrueType";
  PdfFontType2[PdfFontType2["TrueTypeEmbedded"] = 2] = "TrueTypeEmbedded";
})(PdfFontType || (PdfFontType = {}));
var PdfWordWrapType;
(function(PdfWordWrapType2) {
  PdfWordWrapType2[PdfWordWrapType2["None"] = 0] = "None";
  PdfWordWrapType2[PdfWordWrapType2["Word"] = 1] = "Word";
  PdfWordWrapType2[PdfWordWrapType2["WordOnly"] = 2] = "WordOnly";
  PdfWordWrapType2[PdfWordWrapType2["Character"] = 3] = "Character";
})(PdfWordWrapType || (PdfWordWrapType = {}));
var PdfSubSuperScript;
(function(PdfSubSuperScript2) {
  PdfSubSuperScript2[PdfSubSuperScript2["None"] = 0] = "None";
  PdfSubSuperScript2[PdfSubSuperScript2["SuperScript"] = 1] = "SuperScript";
  PdfSubSuperScript2[PdfSubSuperScript2["SubScript"] = 2] = "SubScript";
})(PdfSubSuperScript || (PdfSubSuperScript = {}));
var FontEncoding;
(function(FontEncoding2) {
  FontEncoding2[FontEncoding2["Unknown"] = 0] = "Unknown";
  FontEncoding2[FontEncoding2["StandardEncoding"] = 1] = "StandardEncoding";
  FontEncoding2[FontEncoding2["MacRomanEncoding"] = 2] = "MacRomanEncoding";
  FontEncoding2[FontEncoding2["MacExpertEncoding"] = 3] = "MacExpertEncoding";
  FontEncoding2[FontEncoding2["WinAnsiEncoding"] = 4] = "WinAnsiEncoding";
  FontEncoding2[FontEncoding2["PdfDocEncoding"] = 5] = "PdfDocEncoding";
  FontEncoding2[FontEncoding2["IdentityH"] = 6] = "IdentityH";
})(FontEncoding || (FontEncoding = {}));
var TtfCmapFormat;
(function(TtfCmapFormat2) {
  TtfCmapFormat2[TtfCmapFormat2["Apple"] = 0] = "Apple";
  TtfCmapFormat2[TtfCmapFormat2["Microsoft"] = 4] = "Microsoft";
  TtfCmapFormat2[TtfCmapFormat2["Trimmed"] = 6] = "Trimmed";
})(TtfCmapFormat || (TtfCmapFormat = {}));
var TtfCmapEncoding;
(function(TtfCmapEncoding2) {
  TtfCmapEncoding2[TtfCmapEncoding2["Unknown"] = 0] = "Unknown";
  TtfCmapEncoding2[TtfCmapEncoding2["Symbol"] = 1] = "Symbol";
  TtfCmapEncoding2[TtfCmapEncoding2["Unicode"] = 2] = "Unicode";
  TtfCmapEncoding2[TtfCmapEncoding2["Macintosh"] = 3] = "Macintosh";
})(TtfCmapEncoding || (TtfCmapEncoding = {}));
var TtfPlatformID;
(function(TtfPlatformID2) {
  TtfPlatformID2[TtfPlatformID2["AppleUnicode"] = 0] = "AppleUnicode";
  TtfPlatformID2[TtfPlatformID2["Macintosh"] = 1] = "Macintosh";
  TtfPlatformID2[TtfPlatformID2["Iso"] = 2] = "Iso";
  TtfPlatformID2[TtfPlatformID2["Microsoft"] = 3] = "Microsoft";
})(TtfPlatformID || (TtfPlatformID = {}));
var TtfMicrosoftEncodingID;
(function(TtfMicrosoftEncodingID2) {
  TtfMicrosoftEncodingID2[TtfMicrosoftEncodingID2["Undefined"] = 0] = "Undefined";
  TtfMicrosoftEncodingID2[TtfMicrosoftEncodingID2["Unicode"] = 1] = "Unicode";
})(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));
var TtfMacintoshEncodingID;
(function(TtfMacintoshEncodingID2) {
  TtfMacintoshEncodingID2[TtfMacintoshEncodingID2["Roman"] = 0] = "Roman";
  TtfMacintoshEncodingID2[TtfMacintoshEncodingID2["Japanese"] = 1] = "Japanese";
  TtfMacintoshEncodingID2[TtfMacintoshEncodingID2["Chinese"] = 2] = "Chinese";
})(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));
var FontDescriptorFlags;
(function(FontDescriptorFlags2) {
  FontDescriptorFlags2[FontDescriptorFlags2["FixedPitch"] = 1] = "FixedPitch";
  FontDescriptorFlags2[FontDescriptorFlags2["Serif"] = 2] = "Serif";
  FontDescriptorFlags2[FontDescriptorFlags2["Symbolic"] = 4] = "Symbolic";
  FontDescriptorFlags2[FontDescriptorFlags2["Script"] = 8] = "Script";
  FontDescriptorFlags2[FontDescriptorFlags2["Nonsymbolic"] = 32] = "Nonsymbolic";
  FontDescriptorFlags2[FontDescriptorFlags2["Italic"] = 64] = "Italic";
  FontDescriptorFlags2[FontDescriptorFlags2["ForceBold"] = 262144] = "ForceBold";
})(FontDescriptorFlags || (FontDescriptorFlags = {}));
var TtfCompositeGlyphFlags;
(function(TtfCompositeGlyphFlags2) {
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["Arg1And2AreWords"] = 1] = "Arg1And2AreWords";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["ArgsAreXyValues"] = 2] = "ArgsAreXyValues";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["RoundXyToGrid"] = 4] = "RoundXyToGrid";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveScale"] = 8] = "WeHaveScale";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["Reserved"] = 16] = "Reserved";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["MoreComponents"] = 32] = "MoreComponents";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveAnXyScale"] = 64] = "WeHaveAnXyScale";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveTwoByTwo"] = 128] = "WeHaveTwoByTwo";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["WeHaveInstructions"] = 256] = "WeHaveInstructions";
  TtfCompositeGlyphFlags2[TtfCompositeGlyphFlags2["UseMyMetrics"] = 512] = "UseMyMetrics";
})(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-string-format.js
var PdfStringFormat = (
  /** @class */
  function() {
    function PdfStringFormat2(arg1, arg2) {
      this.scalingFactor = 100;
      this.wordWrapType = PdfWordWrapType.Word;
      this.internalLineLimit = true;
      this.wordWrapType = PdfWordWrapType.Word;
      if (typeof arg1 !== "undefined" && typeof arg1 !== "string") {
        this.textAlignment = arg1;
      }
      if (typeof arg2 !== "undefined") {
        this.verticalAlignment = arg2;
      }
    }
    Object.defineProperty(PdfStringFormat2.prototype, "alignment", {
      //Properties
      /**
       * Gets or sets the `horizontal` text alignment
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set the text alignment
       * stringFormat.alignment = PdfTextAlignment.Center;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.textAlignment;
      },
      set: function(value) {
        this.textAlignment = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "textDirection", {
      get: function() {
        return this.direction;
      },
      set: function(value) {
        this.direction = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "lineAlignment", {
      /**
       * Gets or sets the `vertical` text alignment.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set the vertical alignment
       * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.verticalAlignment === "undefined" || this.verticalAlignment == null) {
          return PdfVerticalAlignment.Top;
        } else {
          return this.verticalAlignment;
        }
      },
      set: function(value) {
        this.verticalAlignment = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "rightToLeft", {
      /**
       * Gets or sets the value that indicates text `direction` mode.
       * @private
       */
      get: function() {
        if (typeof this.isRightToLeft === "undefined" || this.isRightToLeft == null) {
          return false;
        } else {
          return this.isRightToLeft;
        }
      },
      set: function(value) {
        this.isRightToLeft = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "characterSpacing", {
      /**
       * Gets or sets value that indicates a `size` among the characters in the text.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set character spacing
       * stringFormat.characterSpacing = 10;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.internalCharacterSpacing === "undefined" || this.internalCharacterSpacing == null) {
          return 0;
        } else {
          return this.internalCharacterSpacing;
        }
      },
      set: function(value) {
        this.internalCharacterSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "wordSpacing", {
      /**
       * Gets or sets value that indicates a `size` among the words in the text.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set word spacing
       * stringFormat.wordSpacing = 10;
       * //
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.internalWordSpacing === "undefined" || this.internalWordSpacing == null) {
          return 0;
        } else {
          return this.internalWordSpacing;
        }
      },
      set: function(value) {
        this.internalWordSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "lineSpacing", {
      /**
       * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * // set string
       * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
       * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';
       * // set rectangle bounds
       * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})
       * //
       * // set the format for string
       * let stringFormat : PdfStringFormat = new PdfStringFormat();
       * // set line spacing
       * stringFormat.lineSpacing = 10;
       * //
       * // draw the text
       * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        if (typeof this.leading === "undefined" || this.leading == null) {
          return 0;
        } else {
          return this.leading;
        }
      },
      set: function(value) {
        this.leading = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "clipPath", {
      /**
       * Gets or sets a value indicating whether the text is `clipped` or not.
       * @private
       */
      get: function() {
        if (typeof this.clip === "undefined" || this.clip == null) {
          return false;
        } else {
          return this.clip;
        }
      },
      set: function(value) {
        this.clip = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "subSuperScript", {
      /**
       * Gets or sets value indicating whether the text is in `subscript or superscript` mode.
       * @private
       */
      get: function() {
        if (typeof this.pdfSubSuperScript === "undefined" || this.pdfSubSuperScript == null) {
          return PdfSubSuperScript.None;
        } else {
          return this.pdfSubSuperScript;
        }
      },
      set: function(value) {
        this.pdfSubSuperScript = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "paragraphIndent", {
      /**
       * Gets or sets the `indent` of the first line in the paragraph.
       * @private
       */
      get: function() {
        if (typeof this.internalParagraphIndent === "undefined" || this.internalParagraphIndent == null) {
          return 0;
        } else {
          return this.internalParagraphIndent;
        }
      },
      set: function(value) {
        this.internalParagraphIndent = value;
        this.firstLineIndent = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "lineLimit", {
      /**
       * Gets or sets a value indicating whether [`line limit`].
       * @private
       */
      get: function() {
        return this.internalLineLimit;
      },
      set: function(value) {
        this.internalLineLimit = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "measureTrailingSpaces", {
      /**
       * Gets or sets a value indicating whether [`measure trailing spaces`].
       * @private
       */
      get: function() {
        if (typeof this.trailingSpaces === "undefined" || this.trailingSpaces == null) {
          return false;
        } else {
          return this.trailingSpaces;
        }
      },
      set: function(value) {
        this.trailingSpaces = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "noClip", {
      /**
       * Gets or sets a value indicating whether [`no clip`].
       * @private
       */
      get: function() {
        if (typeof this.isNoClip === "undefined" || this.isNoClip == null) {
          return false;
        } else {
          return this.isNoClip;
        }
      },
      set: function(value) {
        this.isNoClip = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "wordWrap", {
      /**
       * Gets or sets value indicating type of the text `wrapping`.
       * @private
       */
      get: function() {
        return this.wordWrapType;
      },
      set: function(value) {
        this.wordWrapType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "horizontalScalingFactor", {
      /**
       * Gets or sets the `scaling factor`.
       * @private
       */
      get: function() {
        return this.scalingFactor;
      },
      set: function(value) {
        if (value <= 0) {
          throw new Error("ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor");
        }
        this.scalingFactor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringFormat2.prototype, "firstLineIndent", {
      /**
       * Gets or sets the `indent` of the first line in the text.
       * @private
       */
      get: function() {
        if (typeof this.initialLineIndent === "undefined" || this.initialLineIndent == null) {
          return 0;
        } else {
          return this.initialLineIndent;
        }
      },
      set: function(value) {
        this.initialLineIndent = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfStringFormat2.prototype.clone = function() {
      var format = this;
      return format;
    };
    return PdfStringFormat2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-tokenizer.js
var StringTokenizer = (
  /** @class */
  function() {
    function StringTokenizer2(textValue) {
      this.currentPosition = 0;
      if (textValue == null) {
        throw new Error("ArgumentNullException:text");
      }
      this.text = textValue;
    }
    Object.defineProperty(StringTokenizer2.prototype, "length", {
      // Properties
      /**
       * Gets text `length`.
       * @private
       */
      get: function() {
        return this.text.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StringTokenizer2.prototype, "end", {
      get: function() {
        return this.currentPosition === this.text.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(StringTokenizer2.prototype, "position", {
      /**
       * Gets or sets the position.
       * @private
       */
      get: function() {
        return this.currentPosition;
      },
      set: function(value) {
        this.currentPosition = value;
      },
      enumerable: true,
      configurable: true
    });
    StringTokenizer2.getCharsCount = function(text, symbols) {
      if (typeof symbols === "string") {
        if (text == null) {
          throw new Error("ArgumentNullException:wholeText");
        }
        var numSymbols = 0;
        var curIndex = 0;
        for (; ; ) {
          curIndex = text.indexOf(symbols, curIndex);
          if (curIndex === -1) {
            break;
          } else {
            numSymbols++;
            curIndex++;
          }
        }
        return numSymbols;
      } else {
        if (text == null) {
          throw new Error("ArgumentNullException:text");
        }
        if (symbols == null) {
          throw new Error("ArgumentNullException:symbols");
        }
        var count2 = 0;
        for (var i = 0, len = text.length; i < len; i++) {
          var ch = text[i];
          if (this.contains(symbols, ch)) {
            count2++;
          }
        }
        return count2;
      }
    };
    StringTokenizer2.prototype.readLine = function() {
      var pos = this.currentPosition;
      while (pos < this.length) {
        var ch = this.text[pos];
        switch (ch) {
          case "\r":
          case "\n": {
            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);
            this.currentPosition = pos + 1;
            if (ch === "\r" && this.currentPosition < this.length && this.text[this.currentPosition] === "\n") {
              this.currentPosition++;
            }
            return text;
          }
        }
        pos++;
      }
      if (pos > this.currentPosition) {
        var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);
        this.currentPosition = pos;
        return text2;
      }
      return null;
    };
    StringTokenizer2.prototype.peekLine = function() {
      var pos = this.currentPosition;
      var line = this.readLine();
      this.currentPosition = pos;
      return line;
    };
    StringTokenizer2.prototype.readWord = function() {
      var pos = this.currentPosition;
      while (pos < this.length) {
        var ch = this.text[pos];
        switch (ch) {
          case "\r":
          case "\n":
            var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);
            this.currentPosition = pos + 1;
            if (ch === "\r" && this.currentPosition < this.length && this.text[this.currentPosition] === "\n") {
              this.currentPosition++;
            }
            return textValue;
          case " ":
          case "	": {
            if (pos === this.currentPosition) {
              pos++;
            }
            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);
            this.currentPosition = pos;
            return text;
          }
        }
        pos++;
      }
      if (pos > this.currentPosition) {
        var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);
        this.currentPosition = pos;
        return text2;
      }
      return null;
    };
    StringTokenizer2.prototype.peekWord = function() {
      var pos = this.currentPosition;
      var word = this.readWord();
      this.currentPosition = pos;
      return word;
    };
    StringTokenizer2.prototype.read = function(count2) {
      if (typeof count2 === "undefined") {
        var ch = "0";
        if (!this.end) {
          ch = this.text[this.currentPosition];
          this.currentPosition++;
        }
        return ch;
      } else {
        var num = 0;
        var builder = "";
        while (!this.end && num < count2) {
          var ch = this.read();
          builder = builder + ch;
          num++;
        }
        return builder;
      }
    };
    StringTokenizer2.prototype.peek = function() {
      var ch = "0";
      if (!this.end) {
        ch = this.text[this.currentPosition];
      }
      return ch;
    };
    StringTokenizer2.prototype.close = function() {
      this.text = null;
    };
    StringTokenizer2.prototype.readToEnd = function() {
      var text;
      if (this.currentPosition === 0) {
        text = this.text;
      } else {
        text = this.text.substr(this.currentPosition, this.length - this.currentPosition);
      }
      this.currentPosition = this.length;
      return text;
    };
    StringTokenizer2.contains = function(array, symbol) {
      var contains = false;
      for (var i = 0; i < array.length; i++) {
        if (array[i] === symbol) {
          contains = true;
          break;
        }
      }
      return contains;
    };
    StringTokenizer2.whiteSpace = " ";
    StringTokenizer2.tab = "	";
    StringTokenizer2.spaces = [StringTokenizer2.whiteSpace, StringTokenizer2.tab];
    StringTokenizer2.whiteSpacePattern = "^[ 	]+$";
    return StringTokenizer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-layouter.js
var PdfStringLayouter = (
  /** @class */
  function() {
    function PdfStringLayouter2() {
      this.isOverloadWithPosition = false;
    }
    PdfStringLayouter2.prototype.layout = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      if (arg4 instanceof RectangleF) {
        this.initialize(arg1, arg2, arg3, arg4, arg5);
        this.isOverloadWithPosition = arg6;
        this.clientSize = arg7;
        var result = this.doLayout();
        this.clear();
        return result;
      } else {
        this.initialize(arg1, arg2, arg3, arg4);
        this.isOverloadWithPosition = arg5;
        this.clientSize = arg6;
        var result = this.doLayout();
        this.clear();
        return result;
      }
    };
    PdfStringLayouter2.prototype.initialize = function(text, font, format, rectSize, pageHeight) {
      if (typeof pageHeight === "number") {
        if (text == null) {
          throw new Error("ArgumentNullException:text");
        }
        if (font == null) {
          throw new Error("ArgumentNullException:font");
        }
        this.text = text;
        this.font = font;
        this.format = format;
        this.size = new SizeF(rectSize.width, rectSize.height);
        this.rectangle = rectSize;
        this.pageHeight = pageHeight;
        this.reader = new StringTokenizer(text);
      } else {
        this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);
      }
    };
    PdfStringLayouter2.prototype.clear = function() {
      this.font = null;
      this.format = null;
      this.reader.close();
      this.reader = null;
      this.text = null;
    };
    PdfStringLayouter2.prototype.doLayout = function() {
      var result = new PdfStringLayoutResult();
      var lineResult = new PdfStringLayoutResult();
      var lines = [];
      var line = this.reader.peekLine();
      var lineIndent = this.getLineIndent(true);
      while (line != null) {
        lineResult = this.layoutLine(line, lineIndent);
        if (lineResult !== null || typeof lineResult !== "undefined") {
          var numSymbolsInserted = 0;
          var returnedValue = this.copyToResult(
            result,
            lineResult,
            lines,
            /*out*/
            numSymbolsInserted
          );
          var success = returnedValue.success;
          numSymbolsInserted = returnedValue.numInserted;
          if (!success) {
            this.reader.read(numSymbolsInserted);
            break;
          }
        }
        this.reader.readLine();
        line = this.reader.peekLine();
        lineIndent = this.getLineIndent(false);
      }
      this.finalizeResult(result, lines);
      return result;
    };
    PdfStringLayouter2.prototype.getLineIndent = function(firstLine) {
      var lineIndent = 0;
      if (this.format != null) {
        lineIndent = firstLine ? this.format.firstLineIndent : this.format.paragraphIndent;
        lineIndent = this.size.width > 0 ? Math.min(this.size.width, lineIndent) : lineIndent;
      }
      return lineIndent;
    };
    PdfStringLayouter2.prototype.getLineHeight = function() {
      var height = this.font.height;
      if (this.format != null && this.format.lineSpacing !== 0) {
        height = this.format.lineSpacing + this.font.height;
      }
      return height;
    };
    PdfStringLayouter2.prototype.getLineWidth = function(line) {
      var width = this.font.getLineWidth(line, this.format);
      return width;
    };
    PdfStringLayouter2.prototype.layoutLine = function(line, lineIndent) {
      var lineResult = new PdfStringLayoutResult();
      lineResult.layoutLineHeight = this.getLineHeight();
      var lines = [];
      var maxWidth = this.size.width;
      var lineWidth = this.getLineWidth(line) + lineIndent;
      var lineType = LineType.FirstParagraphLine;
      var readWord = true;
      if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {
        this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);
      } else {
        var builder = "";
        var curLine = "";
        lineWidth = lineIndent;
        var curIndent = lineIndent;
        var reader = new StringTokenizer(line);
        var word = reader.peekWord();
        var isSingleWord = false;
        if (word.length !== reader.length) {
          if (word === " ") {
            curLine = curLine + word;
            builder = builder + word;
            reader.position += 1;
            word = reader.peekWord();
          }
        }
        while (word != null) {
          curLine = curLine + word;
          var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent;
          if (curLine.toString() === " ") {
            curLine = "";
            curLineWidth = 0;
          }
          if (curLineWidth > maxWidth) {
            if (this.getWrapType() === PdfWordWrapType.None) {
              break;
            }
            if (curLine.length === word.length) {
              if (this.getWrapType() === PdfWordWrapType.WordOnly) {
                lineResult.textRemainder = line.substring(reader.position);
                break;
              } else if (curLine.length === 1) {
                builder = builder + word;
                break;
              } else {
                readWord = false;
                curLine = "";
                word = reader.peek().toString();
                continue;
              }
            } else {
              if (this.getLineWidth(word.toString()) > maxWidth) {
                this.format.wordWrap = PdfWordWrapType.Character;
              } else {
                if (typeof this.format !== "undefined" && this.format !== null) {
                  this.format.wordWrap = PdfWordWrapType.Word;
                }
              }
              if (this.getWrapType() !== PdfWordWrapType.Character || !readWord) {
                var ln = builder.toString();
                if (ln !== " ") {
                  this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);
                }
                if (this.isOverloadWithPosition) {
                  maxWidth = this.clientSize.width;
                }
                curLine = "";
                builder = "";
                lineWidth = 0;
                curIndent = 0;
                curLineWidth = 0;
                lineType = LineType.None;
                word = readWord ? word : reader.peekWord();
                readWord = true;
              } else {
                readWord = false;
                curLine = "";
                curLine = curLine + builder.toString();
                word = reader.peek().toString();
              }
              continue;
            }
          }
          builder = builder + word;
          lineWidth = curLineWidth;
          if (readWord) {
            reader.readWord();
            word = reader.peekWord();
          } else {
            reader.read();
            word = reader.peek().toString();
          }
        }
        if (builder.length > 0) {
          var ln = builder.toString();
          this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);
        }
        reader.close();
      }
      lineResult.layoutLines = [];
      for (var index = 0; index < lines.length; index++) {
        lineResult.layoutLines.push(lines[index]);
      }
      lines = [];
      return lineResult;
    };
    PdfStringLayouter2.prototype.addToLineResult = function(lineResult, lines, line, lineWidth, breakType) {
      var info = new LineInfo();
      info.text = line;
      info.width = lineWidth;
      info.lineType = breakType;
      lines.push(info);
      var size = lineResult.actualSize;
      size.height += this.getLineHeight();
      size.width = Math.max(size.width, lineWidth);
      lineResult.size = size;
    };
    PdfStringLayouter2.prototype.copyToResult = function(result, lineResult, lines, numInserted) {
      var success = true;
      var allowPartialLines = this.format != null && !this.format.lineLimit;
      var height = result.actualSize.height;
      var maxHeight = this.size.height;
      if (this.pageHeight > 0 && maxHeight + this.rectangle.y > this.pageHeight) {
        maxHeight = this.rectangle.y - this.pageHeight;
        maxHeight = Math.max(maxHeight, -maxHeight);
      }
      numInserted = 0;
      if (lineResult.lines != null) {
        for (var i = 0, len = lineResult.lines.length; i < len; i++) {
          var expHeight = height + lineResult.lineHeight;
          if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {
            var info = lineResult.lines[i];
            numInserted += info.text.length;
            info = this.trimLine(info, lines.length === 0);
            lines.push(info);
            var size = result.actualSize;
            size.width = Math.max(size.width, info.width);
            result.size = size;
            height = expHeight;
          } else {
            success = false;
            break;
          }
        }
      }
      if (height != result.size.height) {
        var size1 = result.actualSize;
        size1.height = height;
        result.size = size1;
      }
      return {
        success,
        numInserted
      };
    };
    PdfStringLayouter2.prototype.finalizeResult = function(result, lines) {
      result.layoutLines = [];
      for (var index = 0; index < lines.length; index++) {
        result.layoutLines.push(lines[index]);
      }
      result.layoutLineHeight = this.getLineHeight();
      if (!this.reader.end) {
        result.textRemainder = this.reader.readToEnd();
      }
      lines = [];
    };
    PdfStringLayouter2.prototype.trimLine = function(info, firstLine) {
      var line = info.text;
      var lineWidth = info.width;
      var trimStartSpaces = (info.lineType & LineType.FirstParagraphLine) === 0;
      var start = this.format == null || !this.format.rightToLeft;
      var spaces = StringTokenizer.spaces;
      line = start ? line.trim() : line.trim();
      if (line.length !== info.text.length) {
        lineWidth = this.getLineWidth(line);
        if ((info.lineType & LineType.FirstParagraphLine) > 0) {
          lineWidth += this.getLineIndent(firstLine);
        }
      }
      info.text = line;
      info.width = lineWidth;
      return info;
    };
    PdfStringLayouter2.prototype.getWrapType = function() {
      var wrapType = this.format != null ? this.format.wordWrap : PdfWordWrapType.Word;
      return wrapType;
    };
    return PdfStringLayouter2;
  }()
);
var PdfStringLayoutResult = (
  /** @class */
  function() {
    function PdfStringLayoutResult2() {
    }
    Object.defineProperty(PdfStringLayoutResult2.prototype, "remainder", {
      // Properties
      /**
       * Gets the `text` which is not lay outed.
       * @private
       */
      get: function() {
        return this.textRemainder;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "actualSize", {
      /**
       * Gets the actual layout text `bounds`.
       * @private
       */
      get: function() {
        if (typeof this.size === "undefined") {
          this.size = new SizeF(0, 0);
        }
        return this.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "lines", {
      /**
       * Gets layout `lines` information.
       * @private
       */
      get: function() {
        return this.layoutLines;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "lineHeight", {
      /**
       * Gets the `height` of the line.
       * @private
       */
      get: function() {
        return this.layoutLineHeight;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "empty", {
      /**
       * Gets value that indicates whether any layout text [`empty`].
       * @private
       */
      get: function() {
        return this.layoutLines == null || this.layoutLines.length === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStringLayoutResult2.prototype, "lineCount", {
      /**
       * Gets `number of` the layout lines.
       * @private
       */
      get: function() {
        var count2 = !this.empty ? this.layoutLines.length : 0;
        return count2;
      },
      enumerable: true,
      configurable: true
    });
    return PdfStringLayoutResult2;
  }()
);
var LineInfo = (
  /** @class */
  function() {
    function LineInfo2() {
    }
    Object.defineProperty(LineInfo2.prototype, "lineType", {
      //Properties
      /**
       * Gets the `type` of the line text.
       * @private
       */
      get: function() {
        return this.type;
      },
      set: function(value) {
        this.type = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(LineInfo2.prototype, "text", {
      /**
       * Gets the line `text`.
       * @private
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.content = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(LineInfo2.prototype, "width", {
      /**
       * Gets `width` of the line text.
       * @private
       */
      get: function() {
        return this.lineWidth;
      },
      set: function(value) {
        this.lineWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    return LineInfo2;
  }()
);
var LineType;
(function(LineType2) {
  LineType2[LineType2["None"] = 0] = "None";
  LineType2[LineType2["NewLineBreak"] = 1] = "NewLineBreak";
  LineType2[LineType2["LayoutBreak"] = 2] = "LayoutBreak";
  LineType2[LineType2["FirstParagraphLine"] = 4] = "FirstParagraphLine";
  LineType2[LineType2["LastParagraphLine"] = 8] = "LastParagraphLine";
})(LineType || (LineType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font.js
var PdfFont = (
  /** @class */
  function() {
    function PdfFont2(size, style) {
      this.fontStyle = PdfFontStyle.Regular;
      if (typeof size === "number" && typeof style === "undefined") {
        this.fontSize = size;
      } else {
        this.fontSize = size;
        this.setStyle(style);
      }
    }
    Object.defineProperty(PdfFont2.prototype, "name", {
      //Properties
      /**
       * Gets the face name of this Font.
       * @private
       */
      get: function() {
        return this.metrics.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "size", {
      /**
       * Gets the size of this font.
       * @private
       */
      get: function() {
        return this.fontSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "height", {
      /**
       * Gets the height of the font in points.
       * @private
       */
      get: function() {
        return this.metrics.getHeight(null);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "style", {
      /**
       * Gets the style information for this font.
       * @private
       */
      get: function() {
        return this.fontStyle;
      },
      set: function(value) {
        this.fontStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "bold", {
      /**
       * Gets a value indicating whether this `PdfFont` is `bold`.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Bold) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "italic", {
      /**
       * Gets a value indicating whether this `PdfFont` has the `italic` style applied.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Italic) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "strikeout", {
      /**
       * Gets a value indicating whether this `PdfFont` is `strikeout`.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Strikeout) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "underline", {
      /**
       * Gets a value indicating whether this `PdfFont` is `underline`.
       * @private
       */
      get: function() {
        return (this.style & PdfFontStyle.Underline) > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "metrics", {
      /**
       * Gets or sets the `metrics` for this font.
       * @private
       */
      get: function() {
        return this.fontMetrics;
      },
      set: function(value) {
        this.fontMetrics = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFont2.prototype, "element", {
      // /**
      //  * Gets and Sets the font `internals`.
      //  * @private
      //  */
      // public get fontInternal() : IPdfPrimitive {
      //     return this.pdfFontInternals;
      // }
      // public set fontInternal(value : IPdfPrimitive) {
      //     this.pdfFontInternals = value;
      // }
      //IPdfWrapper Members
      /**
       * Gets the `element` representing the font.
       * @private
       */
      get: function() {
        return this.pdfFontInternals;
      },
      enumerable: true,
      configurable: true
    });
    PdfFont2.prototype.measureString = function(text, arg2, arg3, arg4, arg5) {
      if (typeof text === "string" && typeof arg2 === "undefined") {
        return this.measureString(text, null);
      } else if (typeof text === "string" && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === "undefined" && typeof arg4 === "undefined") {
        var temparg2 = arg2;
        var charactersFitted = 0;
        var linesFilled = 0;
        return this.measureString(text, temparg2, charactersFitted, linesFilled);
      } else if (typeof text === "string" && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === "number" && typeof arg4 === "number") {
        var temparg2 = arg2;
        return this.measureString(text, 0, temparg2, arg3, arg4);
      } else if (typeof text === "string" && typeof arg2 === "number" && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === "number" && typeof arg5 === "number") {
        var layoutArea = new SizeF(arg2, 0);
        var temparg3 = arg3;
        return this.measureString(text, layoutArea, temparg3, arg4, arg5);
      } else {
        if (text == null) {
          throw Error('ArgumentNullException("text")');
        }
        var temparg2 = arg2;
        var temparg3 = arg3;
        var layouter = new PdfStringLayouter();
        var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));
        arg4 = text.length;
        arg5 = result.empty ? 0 : result.lines.length;
        return result.actualSize;
      }
    };
    PdfFont2.prototype.equalsTo = function(obj) {
      var result = this.equalsToFont(obj);
      return result;
    };
    PdfFont2.prototype.getInternals = function() {
      return this.pdfFontInternals;
    };
    PdfFont2.prototype.setInternals = function(internals) {
      if (internals == null) {
        throw new Error("ArgumentNullException:internals");
      }
      this.pdfFontInternals = internals;
    };
    PdfFont2.prototype.setStyle = function(style) {
      this.fontStyle = style;
    };
    PdfFont2.prototype.applyFormatSettings = function(line, format, width) {
      var realWidth = width;
      if (format != null && width > 0) {
        if (format.characterSpacing !== 0) {
          realWidth += (line.length - 1) * format.characterSpacing;
        }
        if (format.wordSpacing !== 0) {
          var symbols = StringTokenizer.spaces;
          var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);
          realWidth += whitespacesCount * format.wordSpacing;
        }
      }
      return realWidth;
    };
    PdfFont2.charSizeMultiplier = 1e-3;
    PdfFont2.syncObject = new Object();
    return PdfFont2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-writer.js
var PdfWriter = (
  /** @class */
  function() {
    function PdfWriter2(stream) {
      this.streamWriter = stream;
    }
    Object.defineProperty(PdfWriter2.prototype, "document", {
      //properties
      /**
       * Gets and Sets the `document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      set: function(value) {
        this.pdfDocument = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfWriter2.prototype, "position", {
      /**
       * Gets the `position`.
       * @private
       */
      get: function() {
        return this.streamWriter.buffer.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfWriter2.prototype, "length", {
      /**
       * Gets  the `length` of the stream'.
       * @private
       */
      get: function() {
        return this.streamWriter.buffer.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfWriter2.prototype, "stream", {
      /**
       * Gets the `stream`.
       * @private
       */
      get: function() {
        var result = this.streamWriter;
        return result;
      },
      enumerable: true,
      configurable: true
    });
    PdfWriter2.prototype.write = function(overload) {
      var data = [];
      var tempOverload = overload;
      this.streamWriter.write(tempOverload);
    };
    return PdfWriter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/enum.js
var ObjectStatus;
(function(ObjectStatus2) {
  ObjectStatus2[ObjectStatus2["None"] = 0] = "None";
  ObjectStatus2[ObjectStatus2["Registered"] = 1] = "Registered";
})(ObjectStatus || (ObjectStatus = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-main-object-collection.js
var PdfMainObjectCollection = (
  /** @class */
  function() {
    function PdfMainObjectCollection2() {
      this.objectCollections = [];
      this.mainObjectCollection = new Dictionary();
      this.primitiveObjectCollection = new Dictionary();
    }
    Object.defineProperty(PdfMainObjectCollection2.prototype, "count", {
      //Properties
      /**
       * Gets the `count`.
       * @private
       */
      get: function() {
        return this.objectCollections.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfMainObjectCollection2.prototype.items = function(index) {
      return this.objectCollections[index];
    };
    Object.defineProperty(PdfMainObjectCollection2.prototype, "outIsNew", {
      //Methods
      /**
       * Specifies the value of `IsNew`.
       * @private
       */
      get: function() {
        return this.isNew;
      },
      enumerable: true,
      configurable: true
    });
    PdfMainObjectCollection2.prototype.add = function(element) {
      var objInfo = new ObjectInfo(element);
      this.objectCollections.push(objInfo);
      if (!this.primitiveObjectCollection.containsKey(element)) {
        this.primitiveObjectCollection.setValue(element, this.objectCollections.length - 1);
      }
      element.position = this.index = this.objectCollections.length - 1;
      element.status = ObjectStatus.Registered;
    };
    PdfMainObjectCollection2.prototype.lookFor = function(obj) {
      var index = -1;
      if (obj.position !== -1) {
        return obj.position;
      }
      if (this.primitiveObjectCollection.containsKey(obj) && this.count === this.primitiveObjectCollection.size()) {
        index = this.primitiveObjectCollection.getValue(obj);
      } else {
        for (var i = this.count - 1; i >= 0; i--) {
          var oi = this.objectCollections[i];
          if (oi.object === obj) {
            index = i;
            break;
          }
        }
      }
      return index;
    };
    PdfMainObjectCollection2.prototype.getReference = function(index, isNew) {
      this.index = this.lookFor(index);
      var reference;
      this.isNew = false;
      var oi = this.objectCollections[this.index];
      reference = oi.reference;
      var obj = {
        reference,
        wasNew: isNew
      };
      return obj;
    };
    PdfMainObjectCollection2.prototype.trySetReference = function(obj, reference, found) {
      var result = true;
      found = true;
      this.index = this.lookFor(obj);
      var oi = this.objectCollections[this.index];
      oi.setReference(reference);
      return result;
    };
    PdfMainObjectCollection2.prototype.destroy = function() {
      for (var _i = 0, _a = this.objectCollections; _i < _a.length; _i++) {
        var obj = _a[_i];
        if (obj !== void 0) {
          obj.pdfObject.position = -1;
          obj.pdfObject.isSaving = void 0;
          obj.pdfObject.objectCollectionIndex = void 0;
          obj.pdfObject.position = void 0;
        }
      }
      this.objectCollections = [];
      this.mainObjectCollection = new Dictionary();
      this.primitiveObjectCollection = new Dictionary();
    };
    return PdfMainObjectCollection2;
  }()
);
var ObjectInfo = (
  /** @class */
  function() {
    function ObjectInfo2(obj, reference) {
      this.pdfObject = obj;
      this.pdfReference = reference;
    }
    Object.defineProperty(ObjectInfo2.prototype, "object", {
      //Properties
      /**
       * Gets the `object`.
       * @private
       */
      get: function() {
        return this.pdfObject;
      },
      set: function(value) {
        this.pdfObject = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectInfo2.prototype, "reference", {
      /**
       * Gets the `reference`.
       * @private
       */
      get: function() {
        return this.pdfReference;
      },
      enumerable: true,
      configurable: true
    });
    ObjectInfo2.prototype.setReference = function(reference) {
      this.pdfReference = reference;
    };
    return ObjectInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-base.js
var PdfDocumentBase = (
  /** @class */
  function() {
    function PdfDocumentBase2(document2) {
      this.isStreamCopied = false;
      if (document2 instanceof PdfDocument) {
        this.document = document2;
      }
    }
    Object.defineProperty(PdfDocumentBase2.prototype, "pdfObjects", {
      //Prpperties
      /**
       * Gets the `PDF objects` collection, which stores all objects and references to it..
       * @private
       */
      get: function() {
        return this.objects;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "crossTable", {
      /**
       * Gets the `cross-reference` table.
       * @private
       */
      get: function() {
        return this.pdfCrossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "currentSavingObj", {
      /**
       * Gets or sets the current saving `object number`.
       * @private
       */
      get: function() {
        return this.currentSavingObject;
      },
      set: function(value) {
        this.currentSavingObject = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "catalog", {
      /**
       * Gets the PDF document `catalog`.
       * @private
       */
      get: function() {
        return this.pdfCatalog;
      },
      set: function(value) {
        this.pdfCatalog = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentBase2.prototype, "viewerPreferences", {
      /**
       * Gets viewer preferences for presenting the PDF document in a viewer.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets viewer preferences
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.pdfCatalog.viewerPreferences;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentBase2.prototype.setMainObjectCollection = function(mainObjectCollection) {
      this.objects = mainObjectCollection;
    };
    PdfDocumentBase2.prototype.setCrossTable = function(cTable) {
      this.pdfCrossTable = cTable;
    };
    PdfDocumentBase2.prototype.setCatalog = function(catalog) {
      this.pdfCatalog = catalog;
    };
    PdfDocumentBase2.prototype.save = function(filename) {
      var _this = this;
      var encoding = new Encoding(true);
      var SW = new StreamWriter(encoding);
      if (typeof filename === "undefined") {
        var encoding_1 = new Encoding(true);
        var SW_1 = new StreamWriter(encoding_1);
        return new Promise(function(resolve, reject) {
          var obj = {};
          obj.blobData = new Blob([_this.document.docSave(SW_1, true)], {
            type: "application/pdf"
          });
          resolve(obj);
        });
      } else {
        this.document.docSave(SW, filename, true);
      }
    };
    PdfDocumentBase2.prototype.clone = function() {
      return this.document;
    };
    return PdfDocumentBase2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/cross-table.js
var ObjectType;
(function(ObjectType2) {
  ObjectType2[ObjectType2["Free"] = 0] = "Free";
  ObjectType2[ObjectType2["Normal"] = 1] = "Normal";
  ObjectType2[ObjectType2["Packed"] = 2] = "Packed";
})(ObjectType || (ObjectType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-boolean.js
var PdfBoolean = (
  /** @class */
  function() {
    function PdfBoolean2(value) {
      this.currentPosition = -1;
      this.value = value;
    }
    Object.defineProperty(PdfBoolean2.prototype, "status", {
      //Properties
      /**
       * Gets or sets the `Status` of the specified object.
       * @private
       */
      get: function() {
        return this.objectStatus;
      },
      set: function(value) {
        this.objectStatus = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "isSaving", {
      /**
       * Gets or sets a value indicating whether this document `is saving` or not.
       * @private
       */
      get: function() {
        return this.saving;
      },
      set: function(value) {
        this.saving = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "objectCollectionIndex", {
      /**
       * Gets or sets the `index` value of the specified object.
       * @private
       */
      get: function() {
        return this.index;
      },
      set: function(value) {
        this.index = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "position", {
      /**
       * Gets or sets the `position` of the object.
       * @private
       */
      get: function() {
        return this.currentPosition;
      },
      set: function(value) {
        this.currentPosition = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBoolean2.prototype, "clonedObject", {
      /**
       * Returns `cloned object`.
       * @private
       */
      get: function() {
        var rValue = null;
        return rValue;
      },
      enumerable: true,
      configurable: true
    });
    PdfBoolean2.prototype.save = function(writer) {
      writer.write(this.boolToStr(this.value));
    };
    PdfBoolean2.prototype.clone = function(crossTable) {
      var newNumber = new PdfBoolean2(this.value);
      return newNumber;
    };
    PdfBoolean2.prototype.boolToStr = function(value) {
      return value ? "true" : "false";
    };
    return PdfBoolean2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-viewer-preferences.js
var PdfViewerPreferences = (
  /** @class */
  function() {
    function PdfViewerPreferences2(catalog) {
      this._dictionaryProperties = new DictionaryProperties();
      this._centerWindow = false;
      this._fitWindow = false;
      this._displayTitle = false;
      this._splitWindow = false;
      this._hideMenuBar = false;
      this._hideToolBar = false;
      this._hideWindowUI = false;
      this._pageMode = PdfPageMode.UseNone;
      this._pageLayout = PdfPageLayout.SinglePage;
      this._dictionary = new PdfDictionary();
      this._duplex = DuplexMode.None;
      this._catalog = catalog;
    }
    Object.defineProperty(PdfViewerPreferences2.prototype, "centerWindow", {
      /**
       * A flag specifying whether to position the document’s window in the center of the screen.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the center window
       * let centerWindow : boolean = viewerPreferences.centerWindow;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._centerWindow;
      },
      /**
       * A flag specifying whether to position the document’s window in the center of the screen.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the center window
       * viewerPreferences.centerWindow = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._centerWindow = value;
        this._dictionary.items.setValue(this._dictionaryProperties.centerWindow, new PdfBoolean(this._centerWindow));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "displayTitle", {
      /**
       * A flag specifying whether the window’s title bar should display the document title taken
       * from the Title entry of the document information dictionary. If false, the title bar
       * should instead display the name of the PDF file containing the document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the display title
       * let displayTitle : boolean = viewerPreferences.displayTitle;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._displayTitle;
      },
      /**
       * A flag specifying whether the window’s title bar should display the document title taken
       * from the Title entry of the document information dictionary. If false, the title bar
       * should instead display the name of the PDF file containing the document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the display title
       * viewerPreferences.displayTitle = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._displayTitle = value;
        this._dictionary.items.setValue(this._dictionaryProperties.displayTitle, new PdfBoolean(this._displayTitle));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "fitWindow", {
      /**
       * A flag specifying whether to resize the document’s window to fit the size of the first
       * displayed page.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the fit window
       * let fitWindow : boolean = viewerPreferences.fitWindow;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._fitWindow;
      },
      /**
       * A flag specifying whether to resize the document’s window to fit the size of the first
       * displayed page.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the fit window
       * viewerPreferences.fitWindow = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._fitWindow = value;
        this._dictionary.items.setValue(this._dictionaryProperties.fitWindow, new PdfBoolean(this._fitWindow));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "hideMenuBar", {
      /**
       * A flag specifying whether to hide the viewer application’s menu bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the hide menu bar
       * let hideMenuBar: boolean = viewerPreferences.hideMenuBar;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._hideMenuBar;
      },
      /**
       * A flag specifying whether to hide the viewer application’s menu bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the hide menu bar
       * viewerPreferences.hideMenuBar = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._hideMenuBar = value;
        this._dictionary.items.setValue(this._dictionaryProperties.hideMenuBar, new PdfBoolean(this._hideMenuBar));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "hideToolBar", {
      /**
       * A flag specifying whether to hide the viewer application’s tool bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the hide tool bar
       * let hideToolBar: boolean = viewerPreferences.hideToolBar;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._hideToolBar;
      },
      /**
       * A flag specifying whether to hide the viewer application’s tool bar when the
       * document is active.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the hide tool bar
       * viewerPreferences.hideToolbar = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._hideToolBar = value;
        this._dictionary.items.setValue(this._dictionaryProperties.hideToolBar, new PdfBoolean(this._hideToolBar));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "hideWindowUI", {
      /**
       * A flag specifying whether to hide user interface elements in the document’s window
       * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the hide window UI
       * let hideWindowUI: boolean = viewerPreferences.hideWindowUI;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._hideWindowUI;
      },
      /**
       * A flag specifying whether to hide user interface elements in the document’s window
       * (such as scroll bars and navigation controls), leaving only the document’s contents displayed.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the hide window UI
       * viewerPreferences.hideWindowUI = true;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._hideWindowUI = value;
        this._dictionary.items.setValue(this._dictionaryProperties.hideWindowUI, new PdfBoolean(this._hideWindowUI));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "pageMode", {
      /**
       * A name object specifying how the document should be displayed when opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the page mode
       * let pageMode: PdfPageMode = viewerPreferences.pageMode;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._pageMode;
      },
      /**
       * A name object specifying how the document should be displayed when opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the page mode
       * viewerPreferences.pageMode = PdfPageMode.UseOutlines;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._pageMode = value;
        this._catalog.items.setValue(this._dictionaryProperties.pageMode, new PdfName(this._mapPageMode(this._pageMode)));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "duplex", {
      /**
       * Gets print duplex mode handling option to use when printing the file from the print dialog.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the duplex
       * let duplex : DuplexMode = viewerPreferences.duplex;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._duplex;
      },
      /**
       * Sets print duplex mode handling option to use when printing the file from the print dialog.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the duplex
       * viewerPreferences.duplex = DuplexMode.DuplexFlipLongEdge;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._duplex = value;
        this._catalog.items.setValue(this._dictionaryProperties.duplex, new PdfName(this._mapDuplexMode(this._duplex)));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "pageLayout", {
      /**
       * A name object specifying the page layout to be used when the document is opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the page layout
       * let pageLayout : PdfPageLayout = viewerPreferences.pageLayout;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._pageLayout;
      },
      /**
       * A name object specifying the page layout to be used when the document is opened.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the page layout
       * viewerPreferences.pageLayout = PdfPageLayout.TwoColumnLeft;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._pageLayout = value;
        this._catalog.items.setValue(this._dictionaryProperties.pageLayout, new PdfName(this._mapPageLayout(this._pageLayout)));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "pageScaling", {
      /**
       * Gets the page scaling option to be selected
       * when a print dialog is displayed for this document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Gets the page scaling
       * let pageScaling : PageScalingMode = viewerPreferences.pageScaling;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this._pageScaling;
      },
      /**
       * Sets the page scaling option to be selected
       * when a print dialog is displayed for this document.
       * ```typescript
       * // Create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // Gets the viewer preferences of the document
       * let viewerPreferences : PdfViewerPreferences = document.viewerPreferences;
       * // Sets the page scaling
       * viewerPreferences.pageScaling = PageScalingMode.None;
       * // Destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this._pageScaling = value;
        if (this._pageScaling === PageScalingMode.AppDefault && this._dictionary.items.containsKey(this._dictionaryProperties.printScaling)) {
          this._dictionary.items.remove(this._dictionaryProperties.printScaling);
        } else if (this._pageScaling === PageScalingMode.None) {
          this._dictionary.items.setValue(this._dictionaryProperties.printScaling, new PdfName("None"));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfViewerPreferences2.prototype, "element", {
      /**
       * Primivie element
       *
       * @private
       */
      get: function() {
        return this._dictionary;
      },
      enumerable: true,
      configurable: true
    });
    PdfViewerPreferences2.prototype._mapDuplexMode = function(mode) {
      switch (mode) {
        case DuplexMode.Simplex:
          return "Simplex";
        case DuplexMode.DuplexFlipShortEdge:
          return "DuplexFlipShortEdge";
        case DuplexMode.DuplexFlipLongEdge:
          return "DuplexFlipLongEdge";
        case DuplexMode.None:
          return "None";
      }
    };
    PdfViewerPreferences2.prototype._mapPageMode = function(mode) {
      switch (mode) {
        case PdfPageMode.UseNone:
          return "UseNone";
        case PdfPageMode.UseOutlines:
          return "UseOutlines";
        case PdfPageMode.UseThumbs:
          return "UseThumbs";
        case PdfPageMode.FullScreen:
          return "FullScreen";
        case PdfPageMode.UseOC:
          return "UseOC";
        case PdfPageMode.UseAttachments:
          return "UseAttachments";
      }
    };
    PdfViewerPreferences2.prototype._mapPageLayout = function(layout) {
      switch (layout) {
        case PdfPageLayout.SinglePage:
          return "SinglePage";
        case PdfPageLayout.OneColumn:
          return "OneColumn";
        case PdfPageLayout.TwoColumnLeft:
          return "TwoColumnLeft";
        case PdfPageLayout.TwoColumnRight:
          return "TwoColumnRight";
        case PdfPageLayout.TwoPageLeft:
          return "TwoPageLeft";
        case PdfPageLayout.TwoPageRight:
          return "TwoPageRight";
      }
    };
    return PdfViewerPreferences2;
  }()
);
var PdfPageMode;
(function(PdfPageMode2) {
  PdfPageMode2[PdfPageMode2["UseNone"] = 0] = "UseNone";
  PdfPageMode2[PdfPageMode2["UseOutlines"] = 1] = "UseOutlines";
  PdfPageMode2[PdfPageMode2["UseThumbs"] = 2] = "UseThumbs";
  PdfPageMode2[PdfPageMode2["FullScreen"] = 3] = "FullScreen";
  PdfPageMode2[PdfPageMode2["UseOC"] = 4] = "UseOC";
  PdfPageMode2[PdfPageMode2["UseAttachments"] = 5] = "UseAttachments";
})(PdfPageMode || (PdfPageMode = {}));
var PdfPageLayout;
(function(PdfPageLayout2) {
  PdfPageLayout2[PdfPageLayout2["SinglePage"] = 0] = "SinglePage";
  PdfPageLayout2[PdfPageLayout2["OneColumn"] = 1] = "OneColumn";
  PdfPageLayout2[PdfPageLayout2["TwoColumnLeft"] = 2] = "TwoColumnLeft";
  PdfPageLayout2[PdfPageLayout2["TwoColumnRight"] = 3] = "TwoColumnRight";
  PdfPageLayout2[PdfPageLayout2["TwoPageLeft"] = 4] = "TwoPageLeft";
  PdfPageLayout2[PdfPageLayout2["TwoPageRight"] = 5] = "TwoPageRight";
})(PdfPageLayout || (PdfPageLayout = {}));
var DuplexMode;
(function(DuplexMode2) {
  DuplexMode2[DuplexMode2["Simplex"] = 0] = "Simplex";
  DuplexMode2[DuplexMode2["DuplexFlipShortEdge"] = 1] = "DuplexFlipShortEdge";
  DuplexMode2[DuplexMode2["DuplexFlipLongEdge"] = 2] = "DuplexFlipLongEdge";
  DuplexMode2[DuplexMode2["None"] = 3] = "None";
})(DuplexMode || (DuplexMode = {}));
var PageScalingMode;
(function(PageScalingMode2) {
  PageScalingMode2[PageScalingMode2["AppDefault"] = 0] = "AppDefault";
  PageScalingMode2[PageScalingMode2["None"] = 1] = "None";
})(PageScalingMode || (PageScalingMode = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-catalog.js
var __extends44 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfCatalog = (
  /** @class */
  function(_super) {
    __extends44(PdfCatalog2, _super);
    function PdfCatalog2() {
      var _this = _super.call(this) || this;
      _this.sections = null;
      _this.tempDictionaryProperties = new DictionaryProperties();
      _this.items.setValue(new DictionaryProperties().type, new PdfName("Catalog"));
      return _this;
    }
    Object.defineProperty(PdfCatalog2.prototype, "pages", {
      //Properties
      /**
       * Gets or sets the sections, which contain `pages`.
       * @private
       */
      get: function() {
        return this.sections;
      },
      set: function(value) {
        var dictionary = value.element;
        this.sections = value;
        this.items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCatalog2.prototype, "viewerPreferences", {
      /**
       * Gets the viewer preferences of the PDF document.
       * @private
       */
      get: function() {
        if (this._viewerPreferences === null || typeof this._viewerPreferences === "undefined") {
          this._viewerPreferences = new PdfViewerPreferences(this);
          this.items.setValue(this.tempDictionaryProperties.viewerPreferences, new PdfReferenceHolder(this._viewerPreferences.element));
        }
        return this._viewerPreferences;
      },
      enumerable: true,
      configurable: true
    });
    return PdfCatalog2;
  }(PdfDictionary)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-cross-table.js
var PdfCrossTable = (
  /** @class */
  function() {
    function PdfCrossTable2() {
      this.objects = new Dictionary();
      this.maxGenNumIndex = 0;
      this.objectCount = 0;
      this.dictionaryProperties = new DictionaryProperties();
    }
    Object.defineProperty(PdfCrossTable2.prototype, "isMerging", {
      //Properties
      /**
       * Gets or sets if the document `is merged`.
       * @private
       */
      get: function() {
        return this.merging;
      },
      set: function(value) {
        this.merging = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "trailer", {
      /**
       * Gets the `trailer`.
       * @private
       */
      get: function() {
        if (this.internalTrailer == null) {
          this.internalTrailer = new PdfStream();
        }
        return this.internalTrailer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "document", {
      /**
       * Gets or sets the main `PdfDocument` class instance.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      set: function(value) {
        this.pdfDocument = value;
        this.items = this.pdfDocument.pdfObjects;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "pdfObjects", {
      /**
       * Gets the catched `PDF object` main collection.
       * @private
       */
      get: function() {
        return this.items;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "objectCollection", {
      /**
       * Gets the `object collection`.
       * @private
       */
      get: function() {
        return this.pdfDocument.pdfObjects;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "count", {
      /**
       * Gets or sets the `number of the objects` within the document.
       * @private
       */
      get: function() {
        return this.objectCount;
      },
      set: function(value) {
        this.objectCount = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCrossTable2.prototype, "nextObjNumber", {
      /**
       * Returns `next available object number`.
       * @private
       */
      get: function() {
        this.count = this.count + 1;
        return this.count;
      },
      enumerable: true,
      configurable: true
    });
    PdfCrossTable2.prototype.save = function(writer, filename) {
      this.saveHead(writer);
      var state = false;
      this.mappedReferences = null;
      this.objects.clear();
      this.markTrailerReferences();
      this.saveObjects(writer);
      var saveCount = this.count;
      var xrefPos = writer.position;
      this.registerObject(0, new PdfReference(0, -1), true);
      var prevXRef = 0;
      writer.write(Operators.xref);
      writer.write(Operators.newLine);
      this.saveSections(writer);
      this.saveTrailer(writer, this.count, prevXRef);
      this.saveTheEndess(writer, xrefPos);
      this.count = saveCount;
      for (var i = 0; i < this.objectCollection.count; ++i) {
        var oi = this.objectCollection.items(i);
        oi.object.isSaving = false;
      }
      if (typeof filename === "undefined") {
        return writer.stream.buffer;
      } else {
        writer.stream.save(filename);
      }
    };
    PdfCrossTable2.prototype.saveTheEndess = function(writer, xrefPos) {
      writer.write(Operators.newLine + Operators.startxref + Operators.newLine);
      writer.write(xrefPos.toString() + Operators.newLine);
      writer.write(Operators.eof + Operators.newLine);
    };
    PdfCrossTable2.prototype.saveTrailer = function(writer, count2, prevXRef) {
      writer.write(Operators.trailer + Operators.newLine);
      var trailer = this.trailer;
      trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));
      trailer = new PdfDictionary(trailer);
      trailer.setEncrypt(false);
      trailer.save(writer);
    };
    PdfCrossTable2.prototype.saveSections = function(writer) {
      var objectNum = 0;
      var count2 = 0;
      do {
        count2 = this.prepareSubsection(objectNum);
        this.saveSubsection(writer, objectNum, count2);
        objectNum += count2;
      } while (count2 !== 0);
    };
    PdfCrossTable2.prototype.saveSubsection = function(writer, objectNum, count2) {
      if (count2 <= 0 || objectNum >= this.count) {
        return;
      }
      var subsectionHead = "{0} {1}{2}";
      writer.write(objectNum + " " + (count2 + 1) + Operators.newLine);
      for (var i = objectNum; i <= objectNum + count2; ++i) {
        var obj = this.objects.getValue(i);
        var str = "";
        if (obj.type === ObjectType.Free) {
          str = this.getItem(obj.offset, 65535, true);
        } else {
          str = this.getItem(obj.offset, obj.generation, false);
        }
        writer.write(str);
      }
    };
    PdfCrossTable2.prototype.getItem = function(offset, genNumber, isFree) {
      var returnString = "";
      var addOffsetLength = 10 - offset.toString().length;
      if (genNumber <= 0) {
        genNumber = 0;
      }
      var addGenNumberLength = 5 - genNumber.toString().length <= 0 ? 0 : 5 - genNumber.toString().length;
      for (var index = 0; index < addOffsetLength; index++) {
        returnString = returnString + "0";
      }
      returnString = returnString + offset.toString() + " ";
      for (var index = 0; index < addGenNumberLength; index++) {
        returnString = returnString + "0";
      }
      returnString = returnString + genNumber.toString() + " ";
      returnString = returnString + (isFree ? Operators.f : Operators.n) + Operators.newLine;
      return returnString;
    };
    PdfCrossTable2.prototype.prepareSubsection = function(objectNum) {
      var count2 = 0;
      var i;
      var total = this.count;
      for (var k = 0; k < this.document.pdfObjects.count; k++) {
        var reference = this.document.pdfObjects.items(k).reference;
        var refString = reference.toString();
        var refArray = refString.split(" ");
      }
      if (objectNum >= total) {
        return count2;
      }
      for (i = objectNum; i < total; ++i) {
        break;
      }
      objectNum = i;
      for (; i < total; ++i) {
        ++count2;
      }
      return count2;
    };
    PdfCrossTable2.prototype.markTrailerReferences = function() {
      var tempArray;
      var keys = this.trailer.items.keys();
      var values = this.trailer.items.values();
    };
    PdfCrossTable2.prototype.saveHead = function(writer) {
      var version = this.generateFileVersion(writer.document);
      writer.write("%PDF-" + version);
      writer.write(Operators.newLine);
    };
    PdfCrossTable2.prototype.generateFileVersion = function(document2) {
      var iVersion = 4;
      var version = "1." + iVersion.toString();
      return version;
    };
    PdfCrossTable2.prototype.getReference = function(obj, bNew) {
      if (typeof bNew === "undefined") {
        var wasNew = false;
        return this.getReference(obj, wasNew);
      } else {
        return this.getSubReference(obj, bNew);
      }
    };
    PdfCrossTable2.prototype.getSubReference = function(obj, bNew) {
      var isNew = false;
      var wasNew;
      var reference = null;
      if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {
        var tempObj = this.document.pdfObjects.getReference(obj, wasNew);
        reference = tempObj.reference;
        wasNew = tempObj.wasNew;
      }
      if (reference == null) {
        if (obj.status === ObjectStatus.Registered) {
          wasNew = false;
        } else {
          wasNew = true;
        }
      } else {
        wasNew = false;
      }
      if (reference == null) {
        var objnumber = this.nextObjNumber;
        reference = new PdfReference(objnumber, 0);
        var found = void 0;
        if (wasNew) {
          this.document.pdfObjects.add(obj);
          this.document.pdfObjects.trySetReference(obj, reference, found);
          var tempIndex = this.document.pdfObjects.count - 1;
          var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;
          var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];
          this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);
          obj.position = -1;
        } else {
          this.document.pdfObjects.trySetReference(obj, reference, found);
        }
        obj.objectCollectionIndex = reference.objNumber;
        obj.status = ObjectStatus.None;
        isNew = true;
      }
      bNew = isNew || this.bForceNew;
      return reference;
    };
    PdfCrossTable2.prototype.saveObjects = function(writer) {
      var objectCollection = this.objectCollection;
      for (var i = 0; i < objectCollection.count; ++i) {
        var oi = objectCollection.items(i);
        var obj = oi.object;
        obj.isSaving = true;
        this.saveIndirectObject(obj, writer);
      }
    };
    PdfCrossTable2.prototype.saveIndirectObject = function(obj, writer) {
      var reference = this.getReference(obj);
      if (obj instanceof PdfCatalog) {
        this.trailer.items.setValue(this.dictionaryProperties.root, reference);
      }
      this.pdfDocument.currentSavingObj = reference;
      var tempArchive = false;
      tempArchive = obj.getArchive();
      var allowedType = !(obj instanceof PdfStream || !tempArchive || obj instanceof PdfCatalog);
      var sigFlag = false;
      this.registerObject(writer.position, reference);
      this.doSaveObject(obj, reference, writer);
    };
    PdfCrossTable2.prototype.doSaveObject = function(obj, reference, writer) {
      var correctPosition = writer.length;
      writer.write(reference.objNumber.toString());
      writer.write(Operators.whiteSpace);
      writer.write(reference.genNumber.toString());
      writer.write(Operators.whiteSpace);
      writer.write(Operators.obj);
      writer.write(Operators.newLine);
      obj.save(writer);
      var stream = writer.stream;
      writer.write(Operators.endObj);
      writer.write(Operators.newLine);
    };
    PdfCrossTable2.prototype.registerObject = function(offset, reference, free) {
      if (typeof free === "boolean") {
        this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));
        this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);
      } else if (typeof free === "undefined") {
        this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));
        this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);
      }
    };
    PdfCrossTable2.dereference = function(obj) {
      var rh = obj;
      if (rh != null) {
        obj = rh.object;
      }
      return obj;
    };
    return PdfCrossTable2;
  }()
);
var RegisteredObject = (
  /** @class */
  function() {
    function RegisteredObject2(offset, reference, free) {
      var tempOffset = offset;
      this.offsetNumber = tempOffset;
      var tempReference = reference;
      this.generation = tempReference.genNumber;
      this.object = tempReference.objNumber;
      if (typeof free === "undefined") {
        this.type = ObjectType.Normal;
      } else {
        this.type = ObjectType.Free;
      }
    }
    Object.defineProperty(RegisteredObject2.prototype, "objectNumber", {
      //Properties
      /**
       * Gets the `object number`.
       * @private
       */
      get: function() {
        return this.object;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RegisteredObject2.prototype, "offset", {
      /**
       * Gets the `offset`.
       * @private
       */
      get: function() {
        var result;
        result = this.offsetNumber;
        return result;
      },
      enumerable: true,
      configurable: true
    });
    return RegisteredObject2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-size.js
var PdfPageSize = (
  /** @class */
  function() {
    function PdfPageSize2() {
    }
    PdfPageSize2.letter = new SizeF(612, 792);
    PdfPageSize2.note = new SizeF(540, 720);
    PdfPageSize2.legal = new SizeF(612, 1008);
    PdfPageSize2.a0 = new SizeF(2380, 3368);
    PdfPageSize2.a1 = new SizeF(1684, 2380);
    PdfPageSize2.a2 = new SizeF(1190, 1684);
    PdfPageSize2.a3 = new SizeF(842, 1190);
    PdfPageSize2.a4 = new SizeF(595, 842);
    PdfPageSize2.a5 = new SizeF(421, 595);
    PdfPageSize2.a6 = new SizeF(297, 421);
    PdfPageSize2.a7 = new SizeF(210, 297);
    PdfPageSize2.a8 = new SizeF(148, 210);
    PdfPageSize2.a9 = new SizeF(105, 148);
    PdfPageSize2.a10 = new SizeF(74, 105);
    PdfPageSize2.b0 = new SizeF(2836, 4008);
    PdfPageSize2.b1 = new SizeF(2004, 2836);
    PdfPageSize2.b2 = new SizeF(1418, 2004);
    PdfPageSize2.b3 = new SizeF(1002, 1418);
    PdfPageSize2.b4 = new SizeF(709, 1002);
    PdfPageSize2.b5 = new SizeF(501, 709);
    PdfPageSize2.archE = new SizeF(2592, 3456);
    PdfPageSize2.archD = new SizeF(1728, 2592);
    PdfPageSize2.archC = new SizeF(1296, 1728);
    PdfPageSize2.archB = new SizeF(864, 1296);
    PdfPageSize2.archA = new SizeF(648, 864);
    PdfPageSize2.flsa = new SizeF(612, 936);
    PdfPageSize2.halfLetter = new SizeF(396, 612);
    PdfPageSize2.letter11x17 = new SizeF(792, 1224);
    PdfPageSize2.ledger = new SizeF(1224, 792);
    return PdfPageSize2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/enum.js
var PdfPageOrientation;
(function(PdfPageOrientation2) {
  PdfPageOrientation2[PdfPageOrientation2["Portrait"] = 0] = "Portrait";
  PdfPageOrientation2[PdfPageOrientation2["Landscape"] = 1] = "Landscape";
})(PdfPageOrientation || (PdfPageOrientation = {}));
var PdfPageRotateAngle;
(function(PdfPageRotateAngle2) {
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle0"] = 0] = "RotateAngle0";
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle90"] = 1] = "RotateAngle90";
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle180"] = 2] = "RotateAngle180";
  PdfPageRotateAngle2[PdfPageRotateAngle2["RotateAngle270"] = 3] = "RotateAngle270";
})(PdfPageRotateAngle || (PdfPageRotateAngle = {}));
var PdfNumberStyle;
(function(PdfNumberStyle2) {
  PdfNumberStyle2[PdfNumberStyle2["None"] = 0] = "None";
  PdfNumberStyle2[PdfNumberStyle2["Numeric"] = 1] = "Numeric";
  PdfNumberStyle2[PdfNumberStyle2["LowerLatin"] = 2] = "LowerLatin";
  PdfNumberStyle2[PdfNumberStyle2["LowerRoman"] = 3] = "LowerRoman";
  PdfNumberStyle2[PdfNumberStyle2["UpperLatin"] = 4] = "UpperLatin";
  PdfNumberStyle2[PdfNumberStyle2["UpperRoman"] = 5] = "UpperRoman";
})(PdfNumberStyle || (PdfNumberStyle = {}));
var PdfDockStyle;
(function(PdfDockStyle2) {
  PdfDockStyle2[PdfDockStyle2["None"] = 0] = "None";
  PdfDockStyle2[PdfDockStyle2["Bottom"] = 1] = "Bottom";
  PdfDockStyle2[PdfDockStyle2["Top"] = 2] = "Top";
  PdfDockStyle2[PdfDockStyle2["Left"] = 3] = "Left";
  PdfDockStyle2[PdfDockStyle2["Right"] = 4] = "Right";
  PdfDockStyle2[PdfDockStyle2["Fill"] = 5] = "Fill";
})(PdfDockStyle || (PdfDockStyle = {}));
var PdfAlignmentStyle;
(function(PdfAlignmentStyle2) {
  PdfAlignmentStyle2[PdfAlignmentStyle2["None"] = 0] = "None";
  PdfAlignmentStyle2[PdfAlignmentStyle2["TopLeft"] = 1] = "TopLeft";
  PdfAlignmentStyle2[PdfAlignmentStyle2["TopCenter"] = 2] = "TopCenter";
  PdfAlignmentStyle2[PdfAlignmentStyle2["TopRight"] = 3] = "TopRight";
  PdfAlignmentStyle2[PdfAlignmentStyle2["MiddleLeft"] = 4] = "MiddleLeft";
  PdfAlignmentStyle2[PdfAlignmentStyle2["MiddleCenter"] = 5] = "MiddleCenter";
  PdfAlignmentStyle2[PdfAlignmentStyle2["MiddleRight"] = 6] = "MiddleRight";
  PdfAlignmentStyle2[PdfAlignmentStyle2["BottomLeft"] = 7] = "BottomLeft";
  PdfAlignmentStyle2[PdfAlignmentStyle2["BottomCenter"] = 8] = "BottomCenter";
  PdfAlignmentStyle2[PdfAlignmentStyle2["BottomRight"] = 9] = "BottomRight";
})(PdfAlignmentStyle || (PdfAlignmentStyle = {}));
var TemplateType;
(function(TemplateType2) {
  TemplateType2[TemplateType2["None"] = 0] = "None";
  TemplateType2[TemplateType2["Top"] = 1] = "Top";
  TemplateType2[TemplateType2["Bottom"] = 2] = "Bottom";
  TemplateType2[TemplateType2["Left"] = 3] = "Left";
  TemplateType2[TemplateType2["Right"] = 4] = "Right";
})(TemplateType || (TemplateType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-margins.js
var PdfMargins = (
  /** @class */
  function() {
    function PdfMargins2() {
      this.pdfMargin = 40;
      this.setMargins(this.pdfMargin);
    }
    Object.defineProperty(PdfMargins2.prototype, "left", {
      //Properties
      /**
       * Gets or sets the `left margin` size.
       * @private
       */
      get: function() {
        return this.leftMargin;
      },
      set: function(value) {
        this.leftMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "top", {
      /**
       * Gets or sets the `top margin` size.
       * @private
       */
      get: function() {
        return this.topMargin;
      },
      set: function(value) {
        this.topMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "right", {
      /**
       * Gets or sets the `right margin` size.
       * @private
       */
      get: function() {
        return this.rightMargin;
      },
      set: function(value) {
        this.rightMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "bottom", {
      /**
       * Gets or sets the `bottom margin` size.
       * @private
       */
      get: function() {
        return this.bottomMargin;
      },
      set: function(value) {
        this.bottomMargin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfMargins2.prototype, "all", {
      /**
       * Sets the `margins`.
       * @private
       */
      set: function(value) {
        this.setMargins(value);
      },
      enumerable: true,
      configurable: true
    });
    PdfMargins2.prototype.setMargins = function(margin1, margin2, margin3, margin4) {
      if (typeof margin2 === "undefined") {
        this.leftMargin = this.topMargin = this.rightMargin = this.bottomMargin = margin1;
      } else {
        if (typeof margin3 === "undefined") {
          this.leftMargin = this.rightMargin = margin1;
          this.bottomMargin = this.topMargin = margin2;
        } else {
          this.leftMargin = margin1;
          this.topMargin = margin2;
          this.rightMargin = margin3;
          this.bottomMargin = margin4;
        }
      }
    };
    PdfMargins2.prototype.clone = function() {
      return this;
    };
    return PdfMargins2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-settings.js
var PdfPageSettings = (
  /** @class */
  function() {
    function PdfPageSettings2(margins) {
      this.pageMargins = new PdfMargins();
      this.pageSize = PdfPageSize.a4;
      this.rotateAngle = PdfPageRotateAngle.RotateAngle0;
      this.pageOrientation = PdfPageOrientation.Portrait;
      this.pageOrigin = new PointF(0, 0);
      this.isRotation = false;
      if (typeof margins === "number") {
        this.pageMargins.setMargins(margins);
      }
    }
    Object.defineProperty(PdfPageSettings2.prototype, "size", {
      //Properties
      /**
       * Gets or sets the `size` of the page.
       * @private
       */
      get: function() {
        return this.pageSize;
      },
      set: function(value) {
        this.setSize(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "orientation", {
      /**
       * Gets or sets the page `orientation`.
       * @private
       */
      get: function() {
        return this.pageOrientation;
      },
      set: function(orientation) {
        if (this.pageOrientation !== orientation) {
          this.pageOrientation = orientation;
          this.updateSize(orientation);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "margins", {
      /**
       * Gets or sets the `margins` of the page.
       * @private
       */
      get: function() {
        return this.pageMargins;
      },
      set: function(value) {
        this.pageMargins = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "width", {
      /**
       * Gets or sets the `width` of the page.
       * @private
       */
      get: function() {
        return this.pageSize.width;
      },
      set: function(value) {
        this.pageSize.width = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "height", {
      /**
       * Gets or sets the `height` of the page.
       * @private
       */
      get: function() {
        return this.pageSize.height;
      },
      set: function(value) {
        this.pageSize.height = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "origin", {
      /**
       * Gets or sets the `origin` of the page.
       * @private
       */
      get: function() {
        return this.pageOrigin;
      },
      set: function(value) {
        this.pageOrigin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageSettings2.prototype, "rotate", {
      /**
       * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.
       * @private
       */
      get: function() {
        return this.rotateAngle;
      },
      set: function(value) {
        this.rotateAngle = value;
        this.isRotation = true;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageSettings2.prototype.updateSize = function(orientation) {
      var min = Math.min(this.pageSize.width, this.pageSize.height);
      var max = Math.max(this.pageSize.width, this.pageSize.height);
      switch (orientation) {
        case PdfPageOrientation.Portrait:
          this.pageSize = new SizeF(min, max);
          break;
        case PdfPageOrientation.Landscape:
          this.pageSize = new SizeF(max, min);
          break;
      }
    };
    PdfPageSettings2.prototype.clone = function() {
      var settings = this;
      settings.pageMargins = this.pageMargins.clone();
      return settings;
    };
    PdfPageSettings2.prototype.getActualSize = function() {
      var width = this.width - (this.margins.left + this.margins.right);
      var height = this.height - (this.margins.top + this.margins.bottom);
      var size = new SizeF(width, height);
      return size;
    };
    PdfPageSettings2.prototype.setSize = function(size) {
      var min = Math.min(size.width, size.height);
      var max = Math.max(size.width, size.height);
      if (this.orientation === PdfPageOrientation.Portrait) {
        this.pageSize = new SizeF(min, max);
      } else {
        this.pageSize = new SizeF(max, min);
      }
    };
    return PdfPageSettings2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-stream-writer.js
var PdfStreamWriter = (
  /** @class */
  function() {
    function PdfStreamWriter2(stream) {
      if (stream == null) {
        throw new Error("ArgumentNullException:stream");
      }
      this.stream = stream;
    }
    PdfStreamWriter2.prototype.clear = function() {
      this.stream.clearStream();
    };
    PdfStreamWriter2.prototype.setGraphicsState = function(dictionaryName) {
      if (dictionaryName instanceof PdfName) {
        this.stream.write(dictionaryName.toString());
        this.stream.write(Operators.whiteSpace);
        this.writeOperator(Operators.setGraphicsState);
      } else {
        this.stream.write(Operators.slash);
        this.stream.write(dictionaryName);
        this.stream.write(Operators.whiteSpace);
        this.writeOperator(Operators.setGraphicsState);
      }
    };
    PdfStreamWriter2.prototype.executeObject = function(name) {
      this.stream.write(name.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.paintXObject);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.closePath = function() {
      this.writeOperator(Operators.closePath);
    };
    PdfStreamWriter2.prototype.clipPath = function(useEvenOddRule) {
      this.stream.write(Operators.clipPath);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
      }
      this.stream.write(Operators.whiteSpace);
      this.stream.write(Operators.endPath);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.closeFillStrokePath = function(useEvenOddRule) {
      this.stream.write(Operators.closeFillStrokePath);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.fillStrokePath = function(useEvenOddRule) {
      this.stream.write(Operators.fillStroke);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.fillPath = function(useEvenOddRule) {
      this.stream.write(Operators.fill);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.endPath = function() {
      this.writeOperator(Operators.n);
    };
    PdfStreamWriter2.prototype.closeFillPath = function(useEvenOddRule) {
      this.writeOperator(Operators.closePath);
      this.stream.write(Operators.fill);
      if (useEvenOddRule) {
        this.stream.write(Operators.evenOdd);
        this.stream.write(Operators.newLine);
      } else {
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.closeStrokePath = function() {
      this.writeOperator(Operators.closeStrokePath);
    };
    PdfStreamWriter2.prototype.setTextScaling = function(textScaling) {
      this.stream.write(PdfNumber.floatToString(textScaling));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setTextScaling);
    };
    PdfStreamWriter2.prototype.strokePath = function() {
      this.writeOperator(Operators.stroke);
    };
    PdfStreamWriter2.prototype.restoreGraphicsState = function() {
      this.writeOperator(Operators.restoreState);
    };
    PdfStreamWriter2.prototype.saveGraphicsState = function() {
      this.writeOperator(Operators.saveState);
    };
    PdfStreamWriter2.prototype.startNextLine = function(arg1, arg2) {
      if (typeof arg1 === "undefined") {
        this.writeOperator(Operators.goToNextLine);
      } else if (arg1 instanceof PointF) {
        this.writePoint(arg1);
        this.writeOperator(Operators.setCoords);
      } else {
        this.writePoint(arg1, arg2);
        this.writeOperator(Operators.setCoords);
      }
    };
    PdfStreamWriter2.prototype.showText = function(text) {
      this.checkTextParam(text);
      this.writeText(text);
      this.writeOperator(Operators.setText);
    };
    PdfStreamWriter2.prototype.setLeading = function(leading) {
      this.stream.write(PdfNumber.floatToString(leading));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setTextLeading);
    };
    PdfStreamWriter2.prototype.beginPath = function(x, y) {
      this.writePoint(x, y);
      this.writeOperator(Operators.beginPath);
    };
    PdfStreamWriter2.prototype.beginText = function() {
      this.writeOperator(Operators.beginText);
    };
    PdfStreamWriter2.prototype.endText = function() {
      this.writeOperator(Operators.endText);
    };
    PdfStreamWriter2.prototype.appendRectangle = function(arg1, arg2, arg3, arg4) {
      if (arg1 instanceof RectangleF) {
        this.appendRectangle(arg1.x, arg1.y, arg1.width, arg1.height);
      } else {
        this.writePoint(arg1, arg2);
        this.writePoint(arg3, arg4);
        this.writeOperator(Operators.appendRectangle);
      }
    };
    PdfStreamWriter2.prototype.appendLineSegment = function(arg1, arg2) {
      if (arg1 instanceof PointF) {
        this.appendLineSegment(arg1.x, arg1.y);
      } else {
        this.writePoint(arg1, arg2);
        this.writeOperator(Operators.appendLineSegment);
      }
    };
    PdfStreamWriter2.prototype.setTextRenderingMode = function(renderingMode) {
      this.stream.write(renderingMode.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setRenderingMode);
    };
    PdfStreamWriter2.prototype.setCharacterSpacing = function(charSpacing) {
      this.stream.write(PdfNumber.floatToString(charSpacing));
      this.stream.write(Operators.whiteSpace);
      this.stream.write(Operators.setCharacterSpace);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.setWordSpacing = function(wordSpacing) {
      this.stream.write(PdfNumber.floatToString(wordSpacing));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setWordSpace);
    };
    PdfStreamWriter2.prototype.showNextLineText = function(arg1, arg2) {
      if (arg1 instanceof PdfString) {
        this.checkTextParam(arg1);
        this.writeText(arg1);
        this.writeOperator(Operators.setTextOnNewLine);
      } else {
        this.checkTextParam(arg1);
        this.writeText(arg1, arg2);
        this.writeOperator(Operators.setTextOnNewLine);
      }
    };
    PdfStreamWriter2.prototype.setColorSpace = function(arg1, arg2) {
      if (arg1 instanceof PdfName && typeof arg2 === "boolean") {
        var temparg1 = arg1;
        var temparg2 = arg2;
        var op = temparg2 ? Operators.selectcolorspaceforstroking : Operators.selectcolorspacefornonstroking;
        this.stream.write(temparg1.toString());
        this.stream.write(Operators.whiteSpace);
        this.stream.write(op);
        this.stream.write(Operators.newLine);
      } else {
        var temparg1 = arg1;
        var temparg2 = arg2;
        this.setColorSpace(new PdfName(temparg1), temparg2);
      }
    };
    PdfStreamWriter2.prototype.modifyCtm = function(matrix) {
      if (matrix == null) {
        throw new Error("ArgumentNullException:matrix");
      }
      this.stream.write(matrix.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.modifyCtm);
    };
    PdfStreamWriter2.prototype.setFont = function(font, name, size) {
      if (typeof name === "string") {
        this.setFont(font, new PdfName(name), size);
      } else {
        if (font == null) {
          throw new Error("ArgumentNullException:font");
        }
        this.stream.write(name.toString());
        this.stream.write(Operators.whiteSpace);
        this.stream.write(PdfNumber.floatToString(size));
        this.stream.write(Operators.whiteSpace);
        this.writeOperator(Operators.setFont);
      }
    };
    PdfStreamWriter2.prototype.writeOperator = function(opcode) {
      this.stream.write(opcode);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.checkTextParam = function(text) {
      if (text == null) {
        throw new Error("ArgumentNullException:text");
      }
      if (typeof text === "string" && text === "") {
        throw new Error("ArgumentException:The text can not be an empty string, text");
      }
    };
    PdfStreamWriter2.prototype.writeText = function(arg1, arg2) {
      if (arg1 instanceof PdfString && typeof arg2 === "undefined") {
        this.stream.write(arg1.pdfEncode());
      } else {
        var start = void 0;
        var end = void 0;
        if (arg2) {
          start = PdfString.hexStringMark[0];
          end = PdfString.hexStringMark[1];
        } else {
          start = PdfString.stringMark[0];
          end = PdfString.stringMark[1];
        }
        this.stream.write(start);
        this.stream.write(arg1);
        this.stream.write(end);
      }
    };
    PdfStreamWriter2.prototype.writePoint = function(arg1, arg2) {
      if (arg1 instanceof PointF && typeof arg2 === "undefined") {
        this.writePoint(arg1.x, arg1.y);
      } else {
        var temparg1 = arg1;
        this.stream.write(PdfNumber.floatToString(temparg1));
        this.stream.write(Operators.whiteSpace);
        arg2 = this.updateY(arg2);
        this.stream.write(PdfNumber.floatToString(arg2));
        this.stream.write(Operators.whiteSpace);
      }
    };
    PdfStreamWriter2.prototype.updateY = function(arg) {
      return -arg;
    };
    PdfStreamWriter2.prototype.write = function(string) {
      var builder = "";
      builder += string;
      builder += Operators.newLine;
      this.writeOperator(builder);
    };
    PdfStreamWriter2.prototype.writeComment = function(comment) {
      if (comment != null && comment.length > 0) {
        var builder = "";
        builder += Operators.comment;
        builder += Operators.whiteSpace;
        builder += comment;
        this.writeOperator(builder);
      } else {
        throw new Error("Invalid comment");
      }
    };
    PdfStreamWriter2.prototype.setColorAndSpace = function(color, colorSpace, forStroking) {
      if (!color.isEmpty) {
        this.stream.write(color.toString(colorSpace, forStroking));
        this.stream.write(Operators.newLine);
      }
    };
    PdfStreamWriter2.prototype.setLineDashPattern = function(pattern, patternOffset) {
      this.setLineDashPatternHelper(pattern, patternOffset);
    };
    PdfStreamWriter2.prototype.setLineDashPatternHelper = function(pattern, patternOffset) {
      var tempPattern = "[";
      if (pattern.length > 1) {
        for (var index = 0; index < pattern.length; index++) {
          if (index === pattern.length - 1) {
            tempPattern += pattern[index].toString();
          } else {
            tempPattern += pattern[index].toString() + " ";
          }
        }
      }
      tempPattern += "] ";
      tempPattern += patternOffset.toString();
      tempPattern += " " + Operators.setDashPattern;
      this.stream.write(tempPattern);
      this.stream.write(Operators.newLine);
    };
    PdfStreamWriter2.prototype.setMiterLimit = function(miterLimit) {
      this.stream.write(PdfNumber.floatToString(miterLimit));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setMiterLimit);
    };
    PdfStreamWriter2.prototype.setLineWidth = function(width) {
      this.stream.write(PdfNumber.floatToString(width));
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setLineWidth);
    };
    PdfStreamWriter2.prototype.setLineCap = function(lineCapStyle) {
      this.stream.write(lineCapStyle.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setLineCapStyle);
    };
    PdfStreamWriter2.prototype.setLineJoin = function(lineJoinStyle) {
      this.stream.write(lineJoinStyle.toString());
      this.stream.write(Operators.whiteSpace);
      this.writeOperator(Operators.setLineJoinStyle);
    };
    Object.defineProperty(PdfStreamWriter2.prototype, "position", {
      //IPdfWriter members
      /**
       * Gets or sets the current `position` within the stream.
       * @private
       */
      get: function() {
        return this.stream.position;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStreamWriter2.prototype, "length", {
      /**
       * Gets `stream length`.
       * @private
       */
      get: function() {
        var returnValue = 0;
        if (this.stream.data.length !== 0 && this.stream.data.length !== -1) {
          for (var index = 0; index < this.stream.data.length; index++) {
            returnValue += this.stream.data[index].length;
          }
        }
        return returnValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfStreamWriter2.prototype, "document", {
      /**
       * Gets and Sets the `current document`.
       * @private
       */
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    PdfStreamWriter2.prototype.appendBezierSegment = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof PointF && arg2 instanceof PointF && arg3 instanceof PointF) {
        this.writePoint(arg1.x, arg1.y);
        this.writePoint(arg2.x, arg2.y);
        this.writePoint(arg3.x, arg3.y);
      } else {
        this.writePoint(arg1, arg2);
        this.writePoint(arg3, arg4);
        this.writePoint(arg5, arg6);
      }
      this.writeOperator(Operators.appendbeziercurve);
    };
    PdfStreamWriter2.prototype.setColourWithPattern = function(colours, patternName, forStroking) {
      if (colours != null) {
        var count2 = colours.length;
        var i = 0;
        for (i = 0; i < count2; ++i) {
          this.stream.write(colours[i].toString());
          this.stream.write(Operators.whiteSpace);
        }
      }
      if (patternName != null) {
        this.stream.write(patternName.toString());
        this.stream.write(Operators.whiteSpace);
      }
      if (forStroking) {
        this.writeOperator(Operators.setColorAndPatternStroking);
      } else {
        this.writeOperator(Operators.setColorAndPattern);
      }
    };
    return PdfStreamWriter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-pen.js
var PdfPen = (
  /** @class */
  function() {
    function PdfPen2(arg1, arg2) {
      this.pdfColor = new PdfColor(0, 0, 0);
      this.dashOffsetValue = 0;
      this.penDashPattern = [0];
      this.pdfDashStyle = PdfDashStyle.Solid;
      this.pdfLineCap = 0;
      this.pdfLineJoin = 0;
      this.penWidth = 1;
      this.internalMiterLimit = 0;
      this.colorSpace = PdfColorSpace.Rgb;
      if (arg1 instanceof PdfBrush) {
        this.setBrush(arg1);
      } else if (arg1 instanceof PdfColor) {
        this.color = arg1;
      }
      if (typeof arg2 === "number") {
        this.width = arg2;
      }
    }
    Object.defineProperty(PdfPen2.prototype, "color", {
      //Properties
      /**
       * Gets or sets the `color of the pen`.
       * @private
       */
      get: function() {
        return this.pdfColor;
      },
      set: function(value) {
        this.pdfColor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "dashOffset", {
      /**
       * Gets or sets the `dash offset of the pen`.
       * @private
       */
      get: function() {
        if (typeof this.dashOffsetValue === "undefined" || this.dashOffsetValue == null) {
          return 0;
        } else {
          return this.dashOffsetValue;
        }
      },
      set: function(value) {
        this.dashOffsetValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "dashPattern", {
      /**
       * Gets or sets the `dash pattern of the pen`.
       * @private
       */
      get: function() {
        return this.penDashPattern;
      },
      set: function(value) {
        this.penDashPattern = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "dashStyle", {
      /**
       * Gets or sets the `dash style of the pen`.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // create a new page
       * let page1 : PdfPage = document.pages.add();
       * // set pen
       * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));
       * //
       * // set pen style
       * pen.dashStyle = PdfDashStyle.DashDot;
       * // get pen style
       * let style : PdfDashStyle = pen.dashStyle;
       * //
       * // draw rectangle
       * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.pdfDashStyle;
      },
      set: function(value) {
        if (this.pdfDashStyle !== value) {
          this.pdfDashStyle = value;
          switch (this.pdfDashStyle) {
            case PdfDashStyle.Custom:
              break;
            case PdfDashStyle.Dash:
              this.penDashPattern = [3, 1];
              break;
            case PdfDashStyle.Dot:
              this.penDashPattern = [1, 1];
              break;
            case PdfDashStyle.DashDot:
              this.penDashPattern = [3, 1, 1, 1];
              break;
            case PdfDashStyle.DashDotDot:
              this.penDashPattern = [3, 1, 1, 1, 1, 1];
              break;
            case PdfDashStyle.Solid:
              break;
            default:
              this.pdfDashStyle = PdfDashStyle.Solid;
              this.penDashPattern = [0];
              break;
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "lineCap", {
      /**
       * Gets or sets the `line cap of the pen`.
       * @private
       */
      get: function() {
        return this.pdfLineCap;
      },
      set: function(value) {
        this.pdfLineCap = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "lineJoin", {
      /**
       * Gets or sets the `line join style of the pen`.
       * @private
       */
      get: function() {
        return this.pdfLineJoin;
      },
      set: function(value) {
        this.pdfLineJoin = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "miterLimit", {
      /**
       * Gets or sets the `miter limit`.
       * @private
       */
      get: function() {
        return this.internalMiterLimit;
      },
      set: function(value) {
        this.internalMiterLimit = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPen2.prototype, "width", {
      /**
       * Gets or sets the `width of the pen`.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // create a new page
       * let page1 : PdfPage = document.pages.add();
       * // set pen
       * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));
       * //
       * // set pen width
       * pen.width = 2;
       * //
       * // draw rectangle
       * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.penWidth;
      },
      set: function(value) {
        this.penWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfPen2.prototype.clone = function() {
      var pen = this;
      return pen;
    };
    PdfPen2.prototype.setBrush = function(brush) {
      var sBrush = brush;
      if (sBrush != null && sBrush instanceof PdfSolidBrush) {
        this.color = sBrush.color;
        this.pdfBrush = sBrush;
      }
      this.color = sBrush.color;
      this.pdfBrush = sBrush;
    };
    PdfPen2.prototype.monitorChanges = function(currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {
      var diff = false;
      saveState = true;
      if (currentPen == null) {
        diff = true;
      }
      diff = this.dashControl(currentPen, saveState, streamWriter);
      streamWriter.setLineWidth(this.width);
      streamWriter.setLineJoin(this.lineJoin);
      streamWriter.setLineCap(this.lineCap);
      var miterLimit = this.miterLimit;
      if (miterLimit > 0) {
        streamWriter.setMiterLimit(miterLimit);
        diff = true;
      }
      var brush = this.pdfBrush;
      streamWriter.setColorAndSpace(this.color, currentColorSpace, true);
      diff = true;
      return diff;
    };
    PdfPen2.prototype.dashControl = function(pen, saveState, streamWriter) {
      saveState = true;
      var lineWidth = this.width;
      var pattern = this.getPattern();
      streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);
      return saveState;
    };
    PdfPen2.prototype.getPattern = function() {
      var pattern = this.dashPattern;
      for (var i = 0; i < pattern.length; ++i) {
        pattern[i] *= this.width;
      }
      return pattern;
    };
    return PdfPen2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transformation-matrix.js
var PdfTransformationMatrix = (
  /** @class */
  function() {
    function PdfTransformationMatrix2(value) {
      this.radDegFactor = 180 / Math.PI;
      if (typeof value === "undefined") {
        this.transformationMatrix = new Matrix2(1, 0, 0, 1, 0, 0);
      } else {
        this.transformationMatrix = new Matrix2(1, 0, 0, -1, 0, 0);
      }
    }
    Object.defineProperty(PdfTransformationMatrix2.prototype, "matrix", {
      // Properties
      /**
       * Gets or sets the `internal matrix object`.
       * @private
       */
      get: function() {
        return this.transformationMatrix;
      },
      set: function(value) {
        this.transformationMatrix = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTransformationMatrix2.prototype.translate = function(offsetX, offsetY) {
      this.transformationMatrix.translate(offsetX, offsetY);
    };
    PdfTransformationMatrix2.prototype.scale = function(scaleX, scaleY) {
      this.transformationMatrix.elements[0] = scaleX;
      this.transformationMatrix.elements[3] = scaleY;
    };
    PdfTransformationMatrix2.prototype.rotate = function(angle) {
      angle = angle * Math.PI / 180;
      this.transformationMatrix.elements[0] = Math.cos(angle);
      this.transformationMatrix.elements[1] = Math.sin(angle);
      this.transformationMatrix.elements[2] = -Math.sin(angle);
      this.transformationMatrix.elements[3] = Math.cos(angle);
    };
    PdfTransformationMatrix2.prototype.toString = function() {
      var builder = "";
      var whitespace = " ";
      for (var i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {
        var temp = this.matrix.elements[i];
        builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]);
        builder += whitespace;
      }
      return builder;
    };
    PdfTransformationMatrix2.prototype.multiply = function(matrix) {
      this.transformationMatrix.multiply(matrix.matrix);
    };
    PdfTransformationMatrix2.degreesToRadians = function(degreesX) {
      return this.degRadFactor * degreesX;
    };
    PdfTransformationMatrix2.prototype.radiansToDegrees = function(radians) {
      return this.radDegFactor * radians;
    };
    PdfTransformationMatrix2.prototype.clone = function() {
      return this;
    };
    PdfTransformationMatrix2.degRadFactor = Math.PI / 180;
    return PdfTransformationMatrix2;
  }()
);
var Matrix2 = (
  /** @class */
  function() {
    function Matrix3(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (typeof arg1 === "undefined") {
        this.metrixElements = [];
      } else if (typeof arg1 === "number") {
        this.metrixElements = [];
        this.metrixElements.push(arg1);
        this.metrixElements.push(arg2);
        this.metrixElements.push(arg3);
        this.metrixElements.push(arg4);
        this.metrixElements.push(arg5);
        this.metrixElements.push(arg6);
      } else {
        this.metrixElements = arg1;
      }
    }
    Object.defineProperty(Matrix3.prototype, "elements", {
      // Properties
      /**
       * Gets the `elements`.
       * @private
       */
      get: function() {
        return this.metrixElements;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Matrix3.prototype, "offsetX", {
      /**
       * Gets the off set `X`.
       * @private
       */
      get: function() {
        return this.metrixElements[4];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Matrix3.prototype, "offsetY", {
      /**
       * Gets the off set `Y`.
       * @private
       */
      get: function() {
        return this.metrixElements[5];
      },
      enumerable: true,
      configurable: true
    });
    Matrix3.prototype.translate = function(offsetX, offsetY) {
      this.metrixElements[4] = offsetX;
      this.metrixElements[5] = offsetY;
    };
    Matrix3.prototype.transform = function(point) {
      var x = point.x;
      var y = point.y;
      var x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;
      var y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;
      return new PointF(x2, y2);
    };
    Matrix3.prototype.multiply = function(matrix) {
      var tempMatrix = [];
      tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);
      tempMatrix[1] = this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3];
      tempMatrix[2] = this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2];
      tempMatrix[3] = this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3];
      tempMatrix[4] = this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX;
      tempMatrix[5] = this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY;
      for (var i = 0; i < tempMatrix.length; i++) {
        this.elements[i] = tempMatrix[i];
      }
    };
    Matrix3.prototype.dispose = function() {
      this.metrixElements = null;
    };
    Matrix3.prototype.clone = function() {
      var m = new Matrix3(this.metrixElements);
      return m;
    };
    return Matrix3;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/constants.js
var ProcedureSets = (
  /** @class */
  /* @__PURE__ */ function() {
    function ProcedureSets2() {
      this.pdf = "PDF";
      this.text = "Text";
      this.imageB = "ImageB";
      this.imageC = "ImageC";
      this.imageI = "ImageI";
    }
    return ProcedureSets2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/object-object-pair/dictionary.js
var TemporaryDictionary = (
  /** @class */
  function() {
    function TemporaryDictionary2() {
      this.mKeys = [];
      this.mValues = [];
    }
    TemporaryDictionary2.prototype.size = function() {
      return this.mKeys.length;
    };
    TemporaryDictionary2.prototype.add = function(key, value) {
      if (key === void 0 || key === null || value === void 0 || value === null) {
        throw new ReferenceError("Provided key or value is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        this.mKeys.push(key);
        this.mValues.push(value);
        return 1;
      } else {
        throw new RangeError("An item with the same key has already been added.");
      }
    };
    TemporaryDictionary2.prototype.keys = function() {
      return this.mKeys;
    };
    TemporaryDictionary2.prototype.values = function() {
      return this.mValues;
    };
    TemporaryDictionary2.prototype.getValue = function(key) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        throw new RangeError("No item with the specified key has been added.");
      } else {
        return this.mValues[index];
      }
    };
    TemporaryDictionary2.prototype.setValue = function(key, value) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        this.mKeys.push(key);
        this.mValues.push(value);
      } else {
        this.mValues[index] = value;
      }
    };
    TemporaryDictionary2.prototype.remove = function(key) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        throw new RangeError("No item with the specified key has been added.");
      } else {
        this.mKeys.splice(index, 1);
        this.mValues.splice(index, 1);
        return true;
      }
    };
    TemporaryDictionary2.prototype.containsKey = function(key) {
      if (key === void 0 || key === null) {
        throw new ReferenceError("Provided key is not valid.");
      }
      var index = this.mKeys.indexOf(key);
      if (index < 0) {
        return false;
      }
      return true;
    };
    TemporaryDictionary2.prototype.clear = function() {
      this.mKeys = [];
      this.mValues = [];
    };
    return TemporaryDictionary2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transparency.js
var PdfTransparency = (
  /** @class */
  function() {
    function PdfTransparency2(stroke, fill, mode) {
      this.dictionary = new PdfDictionary();
      this.dictionaryProperties = new DictionaryProperties();
      this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));
      this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));
      this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));
    }
    Object.defineProperty(PdfTransparency2.prototype, "element", {
      // // Implementation
      // /**
      //  * Gets the `number value`.
      //  * @private
      //  */
      // private getNumber(keyName : string) : number {
      //     let result : number = 0.0;
      //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;
      //     result = numb.intValue;
      //     return result;
      // }
      // /**
      //  * Gets the `name value`.
      //  * @private
      //  */
      // private getName(keyName : string) : string {
      //     let result : string = null;
      //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;
      //     result = name.value;
      //     return result;
      // }
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.dictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTransparency2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field-info-collection.js
var PdfAutomaticFieldInfoCollection = (
  /** @class */
  function() {
    function PdfAutomaticFieldInfoCollection2() {
      this.automaticFieldsInformation = [];
    }
    Object.defineProperty(PdfAutomaticFieldInfoCollection2.prototype, "automaticFields", {
      /**
       * Gets the `page number fields collection`.
       * @private
       */
      get: function() {
        return this.automaticFieldsInformation;
      },
      enumerable: true,
      configurable: true
    });
    PdfAutomaticFieldInfoCollection2.prototype.add = function(fieldInfo) {
      return this.automaticFields.push(fieldInfo);
    };
    return PdfAutomaticFieldInfoCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/graphics-element.js
var PdfGraphicsElement = (
  /** @class */
  function() {
    function PdfGraphicsElement2() {
    }
    PdfGraphicsElement2.prototype.drawHelper = function(graphics, x, y) {
      var bNeedSave = x !== 0 || y !== 0;
      var gState = null;
      if (bNeedSave) {
        gState = graphics.save();
        graphics.translateTransform(x, y);
      }
      this.drawInternal(graphics);
      if (bNeedSave) {
        graphics.restore(gState);
      }
    };
    return PdfGraphicsElement2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field.js
var __extends45 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfAutomaticField = (
  /** @class */
  function(_super) {
    __extends45(PdfAutomaticField2, _super);
    function PdfAutomaticField2() {
      var _this = _super.call(this) || this;
      _this.internalBounds = new RectangleF(0, 0, 0, 0);
      _this.internalTemplateSize = new SizeF(0, 0);
      return _this;
    }
    Object.defineProperty(PdfAutomaticField2.prototype, "bounds", {
      // Properties
      get: function() {
        return this.internalBounds;
      },
      set: function(value) {
        this.internalBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "size", {
      get: function() {
        return new SizeF(this.bounds.width, this.bounds.height);
      },
      set: function(value) {
        this.bounds.width = value.width;
        this.bounds.height = value.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "location", {
      get: function() {
        return new PointF(this.bounds.x, this.bounds.y);
      },
      set: function(value) {
        this.bounds.x = value.x;
        this.bounds.y = value.y;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "font", {
      get: function() {
        return this.internalFont;
      },
      set: function(value) {
        this.internalFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "brush", {
      get: function() {
        return this.internalBrush;
      },
      set: function(value) {
        this.internalBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "pen", {
      get: function() {
        return this.internalPen;
      },
      set: function(value) {
        this.internalPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticField2.prototype, "stringFormat", {
      get: function() {
        return this.internalStringFormat;
      },
      set: function(value) {
        this.internalStringFormat = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfAutomaticField2.prototype.performDrawHelper = function(graphics, location, scalingX, scalingY) {
      if (this.bounds.height === 0 || this.bounds.width === 0) {
        var text = this.getValue(graphics);
        this.internalTemplateSize = this.getFont().measureString(text, this.size, this.stringFormat);
      }
    };
    PdfAutomaticField2.prototype.draw = function(arg1, arg2, arg3) {
      if (typeof arg2 === "undefined") {
        var location_1 = new PointF(0, 0);
        this.draw(arg1, location_1);
      } else if (arg2 instanceof PointF) {
        this.draw(arg1, arg2.x, arg2.y);
      } else {
        this.drawHelper(arg1, arg2, arg3);
        var info = new PdfAutomaticFieldInfo(this, new PointF(arg2, arg3));
        arg1.automaticFields.add(info);
      }
    };
    PdfAutomaticField2.prototype.getSize = function() {
      if (this.bounds.height === 0 || this.bounds.width === 0) {
        return this.internalTemplateSize;
      } else {
        return this.size;
      }
    };
    PdfAutomaticField2.prototype.drawInternal = function(graphics) {
    };
    PdfAutomaticField2.prototype.getBrush = function() {
      return typeof this.internalBrush === "undefined" || this.internalBrush == null ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.internalBrush;
    };
    PdfAutomaticField2.prototype.getFont = function() {
      return typeof this.internalFont === "undefined" || this.internalFont == null ? PdfDocument.defaultFont : this.internalFont;
    };
    PdfAutomaticField2.prototype.getPageFromGraphics = function(graphics) {
      if (typeof graphics.page !== "undefined" && graphics.page !== null) {
        var page = graphics.page;
        return page;
      } else {
        var page = graphics.currentPage;
        return page;
      }
    };
    return PdfAutomaticField2;
  }(PdfGraphicsElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field-info.js
var PdfAutomaticFieldInfo = (
  /** @class */
  function() {
    function PdfAutomaticFieldInfo2(field, location, scaleX, scaleY) {
      this.pageNumberFieldLocation = new PointF();
      this.pageNumberField = null;
      this.scaleX = 1;
      this.scaleY = 1;
      if (typeof location === "undefined" && field instanceof PdfAutomaticFieldInfo2) {
        this.pageNumberField = field.field;
        this.pageNumberFieldLocation = field.location;
        this.scaleX = field.scalingX;
        this.scaleY = field.scalingY;
      } else if (typeof scaleX === "undefined" && location instanceof PointF && field instanceof PdfAutomaticField) {
        this.pageNumberField = field;
        this.pageNumberFieldLocation = location;
      } else {
        this.pageNumberField = field;
        this.pageNumberFieldLocation = location;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
      }
    }
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "location", {
      /* tslint:enable */
      // Properties
      /**
       * Gets or sets the location.
       * @private
       */
      get: function() {
        return this.pageNumberFieldLocation;
      },
      set: function(value) {
        this.pageNumberFieldLocation = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "field", {
      /**
       * Gets or sets the field.
       * @private
       */
      get: function() {
        return this.pageNumberField;
      },
      set: function(value) {
        this.pageNumberField = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "scalingX", {
      /**
       * Gets or sets the scaling X factor.
       * @private
       */
      get: function() {
        return this.scaleX;
      },
      set: function(value) {
        this.scaleX = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAutomaticFieldInfo2.prototype, "scalingY", {
      /**
       * Gets or sets the scaling Y factor.
       * @private
       */
      get: function() {
        return this.scaleY;
      },
      set: function(value) {
        this.scaleY = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAutomaticFieldInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/byte-array.js
var ByteArray = (
  /** @class */
  function() {
    function ByteArray2(length) {
      this.mPosition = 0;
      this.buffer = new Uint8Array(length);
      this.dataView = new DataView(this.buffer.buffer);
    }
    Object.defineProperty(ByteArray2.prototype, "position", {
      /**
       * Gets and Sets a current `position` of byte array.
       * @hidden
       * @private
       */
      get: function() {
        return this.mPosition;
      },
      set: function(value) {
        this.mPosition = value;
      },
      enumerable: true,
      configurable: true
    });
    ByteArray2.prototype.read = function(buffer, offset, count2) {
      for (var index = offset; index < count2; index++) {
        var position = this.position;
        buffer.buffer[index] = this.readByte(position);
        this.position++;
      }
    };
    ByteArray2.prototype.getBuffer = function(index) {
      return this.buffer[index];
    };
    ByteArray2.prototype.writeFromBase64String = function(base64) {
      var arr = this.encodedString(base64);
      this.buffer = arr;
    };
    ByteArray2.prototype.encodedString = function(input2) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var chr1;
      var chr2;
      var chr3;
      var enc1;
      var enc2;
      var enc3;
      var enc4;
      var i = 0;
      var resultIndex = 0;
      var dataUrlPrefix = "data:";
      input2 = input2.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      var totalLength = input2.length * 3 / 4;
      if (input2.charAt(input2.length - 1) === keyStr.charAt(64)) {
        totalLength--;
      }
      var output = new Uint8Array(totalLength | 0);
      while (i < input2.length) {
        enc1 = keyStr.indexOf(input2.charAt(i++));
        enc2 = keyStr.indexOf(input2.charAt(i++));
        enc3 = keyStr.indexOf(input2.charAt(i++));
        enc4 = keyStr.indexOf(input2.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output[resultIndex++] = chr1;
        output[resultIndex++] = chr2;
        output[resultIndex++] = chr3;
      }
      return output;
    };
    ByteArray2.prototype.readByte = function(offset) {
      return this.buffer[offset];
    };
    Object.defineProperty(ByteArray2.prototype, "internalBuffer", {
      /**
       * @hidden
       */
      get: function() {
        return this.buffer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ByteArray2.prototype, "count", {
      /**
       * @hidden
       */
      get: function() {
        return this.buffer.byteLength;
      },
      enumerable: true,
      configurable: true
    });
    ByteArray2.prototype.readNextTwoBytes = function(stream) {
      var data = stream.readByte(this.position);
      this.position++;
      data <<= 8;
      data |= stream.readByte(this.position);
      this.position++;
      return data;
    };
    return ByteArray2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/image-decoder.js
var ImageFormat;
(function(ImageFormat2) {
  ImageFormat2[ImageFormat2["Unknown"] = 0] = "Unknown";
  ImageFormat2[ImageFormat2["Bmp"] = 1] = "Bmp";
  ImageFormat2[ImageFormat2["Emf"] = 2] = "Emf";
  ImageFormat2[ImageFormat2["Gif"] = 3] = "Gif";
  ImageFormat2[ImageFormat2["Jpeg"] = 4] = "Jpeg";
  ImageFormat2[ImageFormat2["Png"] = 5] = "Png";
  ImageFormat2[ImageFormat2["Wmf"] = 6] = "Wmf";
  ImageFormat2[ImageFormat2["Icon"] = 7] = "Icon";
})(ImageFormat || (ImageFormat = {}));
var ImageDecoder = (
  /** @class */
  function() {
    function ImageDecoder2(stream) {
      this.sof1Marker = 193;
      this.sof2Marker = 194;
      this.sof3Marker = 195;
      this.sof5Marker = 197;
      this.sof6Marker = 198;
      this.sof7Marker = 199;
      this.sof9Marker = 201;
      this.sof10Marker = 202;
      this.sof11Marker = 203;
      this.sof13Marker = 205;
      this.sof14Marker = 206;
      this.sof15Marker = 207;
      this.mFormat = ImageFormat.Unknown;
      this.mbitsPerComponent = 8;
      this.dictionaryProperties = new DictionaryProperties();
      this.mStream = stream;
      this.initialize();
    }
    Object.defineProperty(ImageDecoder2.prototype, "height", {
      /**
       * Gets the `height` of image.
       * @hidden
       * @private
       */
      get: function() {
        return this.mHeight;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "width", {
      /**
       * Gets the `width` of image.
       * @hidden
       * @private
       */
      get: function() {
        return this.mWidth;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "bitsPerComponent", {
      /**
       * Gets `bits per component`.
       * @hidden
       * @private
       */
      get: function() {
        return this.mbitsPerComponent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "size", {
      /**
       * Gets the `size` of an image data.
       * @hidden
       * @private
       */
      get: function() {
        return this.mImageData.count;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "imageData", {
      /**
       * Gets the value of an `image data`.
       * @hidden
       * @private
       */
      get: function() {
        return this.mImageData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ImageDecoder2.prototype, "imageDataAsNumberArray", {
      /**
       * Gets the value of an `image data as number array`.
       * @hidden
       * @private
       */
      get: function() {
        return this.mImageData.internalBuffer.buffer;
      },
      enumerable: true,
      configurable: true
    });
    ImageDecoder2.prototype.initialize = function() {
      if (this.mFormat === ImageFormat.Unknown && this.checkIfJpeg()) {
        this.mFormat = ImageFormat.Jpeg;
        this.parseJpegImage();
      } else {
        throw new TypeError("Only the JPEG format is supported");
      }
      this.reset();
      this.mImageData = new ByteArray(this.mStream.count);
      this.mStream.read(this.mImageData, 0, this.mImageData.count);
    };
    ImageDecoder2.prototype.reset = function() {
      this.mStream.position = 0;
    };
    ImageDecoder2.prototype.parseJpegImage = function() {
      this.reset();
      var imgData = new ByteArray(this.mStream.count);
      this.mStream.read(imgData, 0, imgData.count);
      var i = 4;
      var isLengthExceed = false;
      var length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);
      while (i < imgData.count) {
        i += length;
        if (i < imgData.count) {
          if (imgData.getBuffer(i + 1) === 192) {
            this.mHeight = imgData.getBuffer(i + 5) * 256 + imgData.getBuffer(i + 6);
            this.mWidth = imgData.getBuffer(i + 7) * 256 + imgData.getBuffer(i + 8);
            return;
          } else {
            i += 2;
            length = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);
          }
        } else {
          isLengthExceed = true;
          break;
        }
      }
      if (isLengthExceed) {
        this.mStream.position = 0;
        this.skip(this.mStream, 2);
        this.readExceededJPGImage(this.mStream);
      }
    };
    Object.defineProperty(ImageDecoder2.prototype, "format", {
      /**
       * Gets the image `format`.
       * @private
       * @hidden
       */
      get: function() {
        return this.mFormat;
      },
      enumerable: true,
      configurable: true
    });
    ImageDecoder2.prototype.checkIfJpeg = function() {
      this.reset();
      for (var i = 0; i < ImageDecoder2.mJpegHeader.length; i++) {
        if (ImageDecoder2.mJpegHeader[i] !== this.mStream.readByte(i)) {
          return false;
        }
        this.mStream.position++;
      }
      return true;
    };
    ImageDecoder2.prototype.getImageDictionary = function() {
      if (this.mFormat === ImageFormat.Jpeg) {
        var tempArrayBuffer = this.imageData.internalBuffer.length;
        this.imageStream = new PdfStream();
        this.imageStream.isResource = true;
        var tempString = "";
        var decodedString = "";
        for (var i = 0; i < this.imageDataAsNumberArray.byteLength; i++) {
          tempString += String.fromCharCode(null, this.mStream.readByte(i));
        }
        for (var i = 0; i < tempString.length; i++) {
          if (i % 2 !== 0) {
            decodedString += tempString[i];
          }
        }
        this.imageStream.data = [decodedString];
        this.imageStream.compress = false;
        this.imageStream.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.xObject));
        this.imageStream.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.image));
        this.imageStream.items.setValue(this.dictionaryProperties.width, new PdfNumber(this.width));
        this.imageStream.items.setValue(this.dictionaryProperties.height, new PdfNumber(this.height));
        this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));
        this.imageStream.items.setValue(this.dictionaryProperties.filter, new PdfName(this.dictionaryProperties.dctdecode));
        this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(this.getColorSpace()));
        this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams());
        return this.imageStream;
      } else {
        return this.imageStream;
      }
    };
    ImageDecoder2.prototype.getColorSpace = function() {
      return this.dictionaryProperties.deviceRgb;
    };
    ImageDecoder2.prototype.getDecodeParams = function() {
      var decodeParams = new PdfDictionary();
      decodeParams.items.setValue(this.dictionaryProperties.columns, new PdfNumber(this.width));
      decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new PdfBoolean(true));
      decodeParams.items.setValue(this.dictionaryProperties.k, new PdfNumber(-1));
      decodeParams.items.setValue(this.dictionaryProperties.predictor, new PdfNumber(15));
      decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));
      return decodeParams;
    };
    ImageDecoder2.prototype.readExceededJPGImage = function(stream) {
      this.mStream = stream;
      var isContinueReading = true;
      while (isContinueReading) {
        var marker = this.getMarker(stream);
        switch (marker) {
          case this.sof1Marker:
          case this.sof2Marker:
          case this.sof3Marker:
          case this.sof5Marker:
          case this.sof6Marker:
          case this.sof7Marker:
          case this.sof9Marker:
          case this.sof10Marker:
          case this.sof11Marker:
          case this.sof13Marker:
          case this.sof14Marker:
          case this.sof15Marker:
            stream.position += 3;
            this.mHeight = this.mStream.readNextTwoBytes(stream);
            this.mWidth = this.mStream.readNextTwoBytes(stream);
            isContinueReading = false;
            break;
          default:
            this.skipStream(stream);
            break;
        }
      }
    };
    ImageDecoder2.prototype.skip = function(stream, noOfBytes) {
      this.mStream = stream;
      var temp = new ByteArray(noOfBytes);
      this.mStream.read(temp, 0, temp.count);
    };
    ImageDecoder2.prototype.getMarker = function(stream) {
      var skippedByte = 0;
      var marker = 32;
      marker = stream.readByte(this.mStream.position);
      stream.position++;
      while (marker !== 255) {
        skippedByte++;
        marker = stream.readByte(this.mStream.position);
        stream.position++;
      }
      do {
        marker = stream.readByte(this.mStream.position);
        stream.position++;
      } while (marker === 255);
      return marker;
    };
    ImageDecoder2.prototype.skipStream = function(stream) {
      var markerLength = this.mStream.readNextTwoBytes(stream) - 2;
      if (markerLength > 0) {
        stream.position += markerLength;
      }
    };
    ImageDecoder2.mPngHeader = [137, 80, 78, 71, 13, 10, 26, 10];
    ImageDecoder2.mJpegHeader = [255, 216];
    ImageDecoder2.GIF_HEADER = "G,I,F,8";
    ImageDecoder2.BMP_HEADER = "B,M";
    return ImageDecoder2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/unit-convertor.js
var PdfUnitConverter = (
  /** @class */
  function() {
    function PdfUnitConverter2(dpi) {
      this.updateProportionsHelper(dpi);
    }
    PdfUnitConverter2.prototype.convertUnits = function(value, from, to) {
      return this.convertFromPixels(this.convertToPixels(value, from), to);
    };
    PdfUnitConverter2.prototype.convertToPixels = function(value, from) {
      var index = from;
      var result = value * this.proportions[index];
      return result;
    };
    PdfUnitConverter2.prototype.convertFromPixels = function(value, to) {
      var index = to;
      var result = value / this.proportions[index];
      return result;
    };
    PdfUnitConverter2.prototype.updateProportionsHelper = function(pixelPerInch) {
      this.proportions = [
        pixelPerInch / 2.54,
        pixelPerInch / 6,
        1,
        pixelPerInch / 72,
        pixelPerInch,
        pixelPerInch / 300,
        pixelPerInch / 25.4
        // Millimeter
      ];
    };
    PdfUnitConverter2.horizontalResolution = 96;
    PdfUnitConverter2.verticalResolution = 96;
    return PdfUnitConverter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-image.js
var PdfImage = (
  /** @class */
  function() {
    function PdfImage2() {
    }
    Object.defineProperty(PdfImage2.prototype, "width", {
      /**
       * Gets and Sets the `width` of an image.
       * @private
       */
      get: function() {
        return this.imageWidth;
      },
      set: function(value) {
        this.imageWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "height", {
      /**
       * Gets and Sets the `height` of an image.
       * @private
       */
      get: function() {
        return this.imageHeight;
      },
      set: function(value) {
        this.imageHeight = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "size", {
      /**
       * Gets or sets the size of the image.
       * @private
       */
      set: function(value) {
        this.width = value.width;
        this.height = value.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "physicalDimension", {
      /**
       * Gets the `physical dimension` of an image.
       * @private
       */
      get: function() {
        this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);
        return new SizeF(this.width, this.height);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfImage2.prototype, "element", {
      // /**
      //  * Gets the `image stream as string`.
      //  * @private
      //  */
      // public static fromString(string : string) : PdfImage {
      //     let image : PdfImage = new PdfBitmap(string);
      //     return image;
      // }
      /**
       * Gets the `element` image stream.
       * @private
       */
      get: function() {
        return this.imageStream;
      },
      enumerable: true,
      configurable: true
    });
    PdfImage2.prototype.getPointSize = function(width, height, horizontalResolution, verticalResolution) {
      if (typeof horizontalResolution === "undefined") {
        var dpiX = PdfUnitConverter.horizontalResolution;
        var dpiY = PdfUnitConverter.verticalResolution;
        var size = this.getPointSize(width, height, dpiX, dpiY);
        return size;
      } else {
        var ucX = new PdfUnitConverter(horizontalResolution);
        var ucY = new PdfUnitConverter(verticalResolution);
        var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);
        var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);
        var size = new SizeF(ptWidth, ptHeight);
        return size;
      }
    };
    return PdfImage2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-bitmap.js
var __extends46 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfBitmap = (
  /** @class */
  function(_super) {
    __extends46(PdfBitmap2, _super);
    function PdfBitmap2(encodedString) {
      var _this = _super.call(this) || this;
      _this.imageStatus = true;
      _this.dictionaryProperties = new DictionaryProperties();
      _this.loadImage(encodedString);
      return _this;
    }
    PdfBitmap2.prototype.loadImage = function(encodedString) {
      var task = this.initializeAsync(encodedString);
    };
    PdfBitmap2.prototype.initializeAsync = function(encodedString) {
      var byteArray = new ByteArray(encodedString.length);
      byteArray.writeFromBase64String(encodedString);
      this.decoder = new ImageDecoder(byteArray);
      this.height = this.decoder.height;
      this.width = this.decoder.width;
      this.bitsPerComponent = this.decoder.bitsPerComponent;
    };
    PdfBitmap2.prototype.save = function() {
      this.imageStatus = true;
      this.imageStream = this.decoder.getImageDictionary();
    };
    return PdfBitmap2;
  }(PdfImage)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-table-info.js
var TtfTableInfo = (
  /** @class */
  function() {
    function TtfTableInfo2() {
    }
    Object.defineProperty(TtfTableInfo2.prototype, "empty", {
      //Properties
      /**
       * Gets a value indicating whether this table is empty.
       * @private
       */
      get: function() {
        var empty = this.offset === this.length && this.length === this.checksum && this.checksum === 0;
        return empty;
      },
      enumerable: true,
      configurable: true
    });
    return TtfTableInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-name-table.js
var TtfNameTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfNameTable2() {
    }
    return TtfNameTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-name-record.js
var TtfNameRecord = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfNameRecord2() {
    }
    return TtfNameRecord2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-head-table.js
var TtfHeadTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfHeadTable2() {
    }
    return TtfHeadTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-metrics.js
var TtfMetrics = (
  /** @class */
  function() {
    function TtfMetrics2() {
    }
    Object.defineProperty(TtfMetrics2.prototype, "isItalic", {
      //Properties
      /**
       * Gets a value indicating whether this instance is italic.
       */
      get: function() {
        return (this.macStyle & 2) !== 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfMetrics2.prototype, "isBold", {
      /**
       * Gets a value indicating whether this instance is bold.
       */
      get: function() {
        return (this.macStyle & 1) !== 0;
      },
      enumerable: true,
      configurable: true
    });
    return TtfMetrics2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-horizontal-header-table.js
var TtfHorizontalHeaderTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfHorizontalHeaderTable2() {
    }
    return TtfHorizontalHeaderTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-OS2-Table.js
var TtfOS2Table = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfOS2Table2() {
    }
    return TtfOS2Table2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-post-table.js
var TtfPostTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfPostTable2() {
    }
    return TtfPostTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-long-hor-metric.js
var TtfLongHorMetric = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfLongHorMetric2() {
    }
    return TtfLongHorMetric2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-cmap-sub-table.js
var TtfCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfCmapSubTable2() {
    }
    return TtfCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-cmap-table.js
var TtfCmapTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfCmapTable2() {
    }
    return TtfCmapTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-glyph-info.js
var TtfGlyphInfo = (
  /** @class */
  function() {
    function TtfGlyphInfo2() {
    }
    Object.defineProperty(TtfGlyphInfo2.prototype, "empty", {
      //Properties
      /**
       * Gets a value indicating whether this TtfGlyphInfo is empty.
       */
      get: function() {
        var empty = this.index === this.width && this.width === this.charCode && this.charCode === 0;
        return empty;
      },
      enumerable: true,
      configurable: true
    });
    TtfGlyphInfo2.prototype.compareTo = function(obj) {
      var glyph = obj;
      return this.index - glyph.index;
    };
    return TtfGlyphInfo2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-loca-table.js
var TtfLocaTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfLocaTable2() {
    }
    return TtfLocaTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-apple-cmap-sub-table.js
var TtfAppleCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfAppleCmapSubTable2() {
    }
    return TtfAppleCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-microsoft-cmap-sub-table.js
var TtfMicrosoftCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfMicrosoftCmapSubTable2() {
    }
    return TtfMicrosoftCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-trimmed-cmap-sub-table.js
var TtfTrimmedCmapSubTable = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfTrimmedCmapSubTable2() {
    }
    return TtfTrimmedCmapSubTable2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-glyph-header.js
var TtfGlyphHeader = (
  /** @class */
  /* @__PURE__ */ function() {
    function TtfGlyphHeader2() {
    }
    return TtfGlyphHeader2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/big-endian-writer.js
var BigEndianWriter = (
  /** @class */
  function() {
    function BigEndianWriter2(capacity) {
      this.int32Size = 4;
      this.int16Size = 2;
      this.int64Size = 8;
      this.bufferLength = capacity;
      this.buffer = [];
    }
    Object.defineProperty(BigEndianWriter2.prototype, "data", {
      //Properties
      /**
       * Gets data written to the writer.
       */
      get: function() {
        if (this.buffer.length < this.bufferLength) {
          var length_1 = this.bufferLength - this.buffer.length;
          for (var i = 0; i < length_1; i++) {
            this.buffer.push(0);
          }
        }
        return this.buffer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BigEndianWriter2.prototype, "position", {
      /// <summary>
      /// Gets position of the internal buffer.
      /// </summary>
      get: function() {
        if (this.internalPosition === void 0 || this.internalPosition === null) {
          this.internalPosition = 0;
        }
        return this.internalPosition;
      },
      enumerable: true,
      configurable: true
    });
    BigEndianWriter2.prototype.writeShort = function(value) {
      var bytes = [(value & 65280) >> 8, value & 255];
      this.flush(bytes);
    };
    BigEndianWriter2.prototype.writeInt = function(value) {
      var i1 = (value & 4278190080) >> 24;
      i1 = i1 < 0 ? 256 + i1 : i1;
      var i2 = (value & 16711680) >> 16;
      i2 = i2 < 0 ? 256 + i2 : i2;
      var i3 = (value & 65280) >> 8;
      i3 = i3 < 0 ? 256 + i3 : i3;
      var i4 = value & 255;
      i4 = i4 < 0 ? 256 + i4 : i4;
      var bytes = [(value & 4278190080) >> 24, (value & 16711680) >> 16, (value & 65280) >> 8, value & 255];
      this.flush(bytes);
    };
    BigEndianWriter2.prototype.writeUInt = function(value) {
      var buff = [(value & 4278190080) >> 24, (value & 16711680) >> 16, (value & 65280) >> 8, value & 255];
      this.flush(buff);
    };
    BigEndianWriter2.prototype.writeString = function(value) {
      if (value == null) {
        throw new Error("Argument Null Exception : value");
      }
      var bytes = [];
      for (var i = 0; i < value.length; i++) {
        bytes.push(value.charCodeAt(i));
      }
      this.flush(bytes);
    };
    BigEndianWriter2.prototype.writeBytes = function(value) {
      this.flush(value);
    };
    BigEndianWriter2.prototype.flush = function(buff) {
      if (buff === null) {
        throw new Error("Argument Null Exception : buff");
      }
      var position = this.position;
      for (var i = 0; i < buff.length; i++) {
        this.buffer[position] = buff[i];
        position++;
      }
      this.internalPosition += buff.length;
    };
    return BigEndianWriter2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js
var TtfReader = (
  /** @class */
  function() {
    function TtfReader2(fontData) {
      this.int32Size = 4;
      this.isTtcFont = false;
      this.isMacTtf = false;
      this.metricsName = "";
      this.isMacTTF = false;
      this.missedGlyphs = 0;
      this.tableNames = ["cvt ", "fpgm", "glyf", "head", "hhea", "hmtx", "loca", "maxp", "prep"];
      this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];
      this.fontData = fontData;
      this.initialize();
    }
    Object.defineProperty(TtfReader2.prototype, "macintosh", {
      //Properties
      /**
       * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).
       */
      get: function() {
        if (this.macintoshDictionary === null || this.macintoshDictionary === void 0) {
          this.macintoshDictionary = new Dictionary();
        }
        return this.macintoshDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfReader2.prototype, "microsoft", {
      /**
       * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).
       */
      get: function() {
        if (this.microsoftDictionary === null || this.microsoftDictionary === void 0) {
          this.microsoftDictionary = new Dictionary();
        }
        return this.microsoftDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfReader2.prototype, "macintoshGlyphs", {
      /**
       * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).
       */
      get: function() {
        if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === void 0) {
          this.internalMacintoshGlyphs = new Dictionary();
        }
        return this.internalMacintoshGlyphs;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TtfReader2.prototype, "microsoftGlyphs", {
      /**
       * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).
       */
      get: function() {
        if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === void 0) {
          this.internalMicrosoftGlyphs = new Dictionary();
        }
        return this.internalMicrosoftGlyphs;
      },
      enumerable: true,
      configurable: true
    });
    TtfReader2.prototype.initialize = function() {
      if (this.metrics === void 0) {
        this.metrics = new TtfMetrics();
      }
      this.readFontDictionary();
      var nameTable = this.readNameTable();
      var headTable = this.readHeadTable();
      this.initializeFontName(nameTable);
      this.metrics.macStyle = headTable.macStyle;
    };
    TtfReader2.prototype.readFontDictionary = function() {
      this.offset = 0;
      var version = this.checkPreambula();
      var numTables = this.readInt16(this.offset);
      var searchRange = this.readInt16(this.offset);
      var entrySelector = this.readInt16(this.offset);
      var rangeShift = this.readInt16(this.offset);
      if (this.tableDirectory === void 0) {
        this.tableDirectory = new Dictionary();
      }
      for (var i = 0; i < numTables; ++i) {
        var table2 = new TtfTableInfo();
        var tableKey = this.readString(this.int32Size);
        table2.checksum = this.readInt32(this.offset);
        table2.offset = this.readInt32(this.offset);
        table2.length = this.readInt32(this.offset);
        this.tableDirectory.setValue(tableKey, table2);
      }
      this.lowestPosition = this.offset;
      if (!this.isTtcFont) {
        this.fixOffsets();
      }
    };
    TtfReader2.prototype.fixOffsets = function() {
      var minOffset = Number.MAX_VALUE;
      var tableKeys = this.tableDirectory.keys();
      for (var i = 0; i < tableKeys.length; i++) {
        var value = this.tableDirectory.getValue(tableKeys[i]);
        var offset = value.offset;
        if (minOffset > offset) {
          minOffset = offset;
          if (minOffset <= this.lowestPosition) {
            break;
          }
        }
      }
      var shift = minOffset - this.lowestPosition;
      if (shift !== 0) {
        var table2 = new Dictionary();
        for (var i = 0; i < tableKeys.length; i++) {
          var value = this.tableDirectory.getValue(tableKeys[i]);
          value.offset -= shift;
          table2.setValue(tableKeys[i], value);
        }
        this.tableDirectory = table2;
      }
    };
    TtfReader2.prototype.checkPreambula = function() {
      var version = this.readInt32(this.offset);
      this.isMacTtf = version === 1953658213 ? true : false;
      if (version !== 65536 && version !== 1953658213 && version !== 1330926671) {
        this.isTtcFont = true;
        this.offset = 0;
        var fontTag = this.readString(4);
        if (fontTag !== "ttcf") {
          throw new Error("Can not read TTF font data");
        }
        this.offset += 4;
        var ttcIdentificationNumber = this.readInt32(this.offset);
        if (ttcIdentificationNumber < 0) {
          throw new Error("Can not read TTF font data");
        }
        this.offset = this.readInt32(this.offset);
        version = this.readInt32(this.offset);
      }
      return version;
    };
    TtfReader2.prototype.readNameTable = function() {
      var tableInfo = this.getTable("name");
      this.offset = tableInfo.offset;
      var table2 = new TtfNameTable();
      table2.formatSelector = this.readUInt16(this.offset);
      table2.recordsCount = this.readUInt16(this.offset);
      table2.offset = this.readUInt16(this.offset);
      table2.nameRecords = [];
      var recordSize = 12;
      var position = this.offset;
      for (var i = 0; i < table2.recordsCount; i++) {
        this.offset = position;
        var record = new TtfNameRecord();
        record.platformID = this.readUInt16(this.offset);
        record.encodingID = this.readUInt16(this.offset);
        record.languageID = this.readUInt16(this.offset);
        record.nameID = this.readUInt16(this.offset);
        record.length = this.readUInt16(this.offset);
        record.offset = this.readUInt16(this.offset);
        this.offset = tableInfo.offset + table2.offset + record.offset;
        var unicode = record.platformID === 0 || record.platformID === 3;
        record.name = this.readString(record.length, unicode);
        table2.nameRecords[i] = record;
        position += recordSize;
      }
      return table2;
    };
    TtfReader2.prototype.readHeadTable = function() {
      var tableInfo = this.getTable("head");
      this.offset = tableInfo.offset;
      var table2 = new TtfHeadTable();
      table2.version = this.readFixed(this.offset);
      table2.fontRevision = this.readFixed(this.offset);
      table2.checkSumAdjustment = this.readUInt32(this.offset);
      table2.magicNumber = this.readUInt32(this.offset);
      table2.flags = this.readUInt16(this.offset);
      table2.unitsPerEm = this.readUInt16(this.offset);
      table2.created = this.readInt64(this.offset);
      table2.modified = this.readInt64(this.offset);
      table2.xMin = this.readInt16(this.offset);
      table2.yMin = this.readInt16(this.offset);
      table2.xMax = this.readInt16(this.offset);
      table2.yMax = this.readInt16(this.offset);
      table2.macStyle = this.readUInt16(this.offset);
      table2.lowestReadableSize = this.readUInt16(this.offset);
      table2.fontDirectionHint = this.readInt16(this.offset);
      table2.indexToLocalFormat = this.readInt16(this.offset);
      table2.glyphDataFormat = this.readInt16(this.offset);
      return table2;
    };
    TtfReader2.prototype.readHorizontalHeaderTable = function() {
      var tableInfo = this.getTable("hhea");
      this.offset = tableInfo.offset;
      var table2 = new TtfHorizontalHeaderTable();
      table2.version = this.readFixed(this.offset);
      table2.ascender = this.readInt16(this.offset);
      table2.descender = this.readInt16(this.offset);
      table2.lineGap = this.readInt16(this.offset);
      table2.advanceWidthMax = this.readUInt16(this.offset);
      table2.minLeftSideBearing = this.readInt16(this.offset);
      table2.minRightSideBearing = this.readInt16(this.offset);
      table2.xMaxExtent = this.readInt16(this.offset);
      table2.caretSlopeRise = this.readInt16(this.offset);
      table2.caretSlopeRun = this.readInt16(this.offset);
      this.offset += 10;
      table2.metricDataFormat = this.readInt16(this.offset);
      table2.numberOfHMetrics = this.readUInt16(this.offset);
      return table2;
    };
    TtfReader2.prototype.readOS2Table = function() {
      var tableInfo = this.getTable("OS/2");
      this.offset = tableInfo.offset;
      var table2 = new TtfOS2Table();
      table2.version = this.readUInt16(this.offset);
      table2.xAvgCharWidth = this.readInt16(this.offset);
      table2.usWeightClass = this.readUInt16(this.offset);
      table2.usWidthClass = this.readUInt16(this.offset);
      table2.fsType = this.readInt16(this.offset);
      table2.ySubscriptXSize = this.readInt16(this.offset);
      table2.ySubscriptYSize = this.readInt16(this.offset);
      table2.ySubscriptXOffset = this.readInt16(this.offset);
      table2.ySubscriptYOffset = this.readInt16(this.offset);
      table2.ySuperscriptXSize = this.readInt16(this.offset);
      table2.ySuperscriptYSize = this.readInt16(this.offset);
      table2.ySuperscriptXOffset = this.readInt16(this.offset);
      table2.ySuperscriptYOffset = this.readInt16(this.offset);
      table2.yStrikeoutSize = this.readInt16(this.offset);
      table2.yStrikeoutPosition = this.readInt16(this.offset);
      table2.sFamilyClass = this.readInt16(this.offset);
      table2.panose = this.readBytes(10);
      table2.ulUnicodeRange1 = this.readUInt32(this.offset);
      table2.ulUnicodeRange2 = this.readUInt32(this.offset);
      table2.ulUnicodeRange3 = this.readUInt32(this.offset);
      table2.ulUnicodeRange4 = this.readUInt32(this.offset);
      table2.vendorIdentifier = this.readBytes(4);
      table2.fsSelection = this.readUInt16(this.offset);
      table2.usFirstCharIndex = this.readUInt16(this.offset);
      table2.usLastCharIndex = this.readUInt16(this.offset);
      table2.sTypoAscender = this.readInt16(this.offset);
      table2.sTypoDescender = this.readInt16(this.offset);
      table2.sTypoLineGap = this.readInt16(this.offset);
      table2.usWinAscent = this.readUInt16(this.offset);
      table2.usWinDescent = this.readUInt16(this.offset);
      table2.ulCodePageRange1 = this.readUInt32(this.offset);
      table2.ulCodePageRange2 = this.readUInt32(this.offset);
      if (table2.version > 1) {
        table2.sxHeight = this.readInt16(this.offset);
        table2.sCapHeight = this.readInt16(this.offset);
        table2.usDefaultChar = this.readUInt16(this.offset);
        table2.usBreakChar = this.readUInt16(this.offset);
        table2.usMaxContext = this.readUInt16(this.offset);
      } else {
        table2.sxHeight = 0;
        table2.sCapHeight = 0;
        table2.usDefaultChar = 0;
        table2.usBreakChar = 0;
        table2.usMaxContext = 0;
      }
      return table2;
    };
    TtfReader2.prototype.readPostTable = function() {
      var tableInfo = this.getTable("post");
      this.offset = tableInfo.offset;
      var table2 = new TtfPostTable();
      table2.formatType = this.readFixed(this.offset);
      table2.italicAngle = this.readFixed(this.offset);
      table2.underlinePosition = this.readInt16(this.offset);
      table2.underlineThickness = this.readInt16(this.offset);
      table2.isFixedPitch = this.readUInt32(this.offset);
      table2.minType42 = this.readUInt32(this.offset);
      table2.maxType42 = this.readUInt32(this.offset);
      table2.minType1 = this.readUInt32(this.offset);
      table2.maxType1 = this.readUInt32(this.offset);
      return table2;
    };
    TtfReader2.prototype.readWidthTable = function(glyphCount, unitsPerEm) {
      var tableInfo = this.getTable("hmtx");
      this.offset = tableInfo.offset;
      var width = [];
      for (var i = 0; i < glyphCount; i++) {
        var glyph = new TtfLongHorMetric();
        glyph.advanceWidth = this.readUInt16(this.offset);
        glyph.lsb = this.readInt16(this.offset);
        var glyphWidth = glyph.advanceWidth * 1e3 / unitsPerEm;
        width.push(Math.floor(glyphWidth));
      }
      return width;
    };
    TtfReader2.prototype.readCmapTable = function() {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset;
      var table2 = new TtfCmapTable();
      table2.version = this.readUInt16(this.offset);
      table2.tablesCount = this.readUInt16(this.offset);
      var position = this.offset;
      var subTables = [];
      for (var i = 0; i < table2.tablesCount; i++) {
        this.offset = position;
        var subTable = new TtfCmapSubTable();
        subTable.platformID = this.readUInt16(this.offset);
        subTable.encodingID = this.readUInt16(this.offset);
        subTable.offset = this.readUInt32(this.offset);
        position = this.offset;
        this.readCmapSubTable(subTable);
        subTables[i] = subTable;
      }
      return subTables;
    };
    TtfReader2.prototype.readCmapSubTable = function(subTable) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var format = this.readUInt16(this.offset);
      var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);
      var platform = encoding === TtfCmapEncoding.Macintosh ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;
      if (encoding !== TtfCmapEncoding.Unknown) {
        switch (format) {
          case TtfCmapFormat.Apple:
            this.readAppleCmapTable(subTable, encoding);
            break;
          case TtfCmapFormat.Microsoft:
            this.readMicrosoftCmapTable(subTable, encoding);
            break;
          case TtfCmapFormat.Trimmed:
            this.readTrimmedCmapTable(subTable, encoding);
            break;
        }
      }
    };
    TtfReader2.prototype.readAppleCmapTable = function(subTable, encoding) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var table2 = new TtfAppleCmapSubTable();
      table2.format = this.readUInt16(this.offset);
      table2.length = this.readUInt16(this.offset);
      table2.version = this.readUInt16(this.offset);
      if (this.maxMacIndex === null || this.maxMacIndex === void 0) {
        this.maxMacIndex = 0;
      }
      for (var i = 0; i < 256; ++i) {
        var glyphInfo = new TtfGlyphInfo();
        glyphInfo.index = this.readByte(this.offset);
        glyphInfo.width = this.getWidth(glyphInfo.index);
        glyphInfo.charCode = i;
        this.macintosh.setValue(i, glyphInfo);
        this.addGlyph(glyphInfo, encoding);
        this.maxMacIndex = Math.max(i, this.maxMacIndex);
      }
    };
    TtfReader2.prototype.readMicrosoftCmapTable = function(subTable, encoding) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var collection = encoding === TtfCmapEncoding.Unicode ? this.microsoft : this.macintosh;
      var table2 = new TtfMicrosoftCmapSubTable();
      table2.format = this.readUInt16(this.offset);
      table2.length = this.readUInt16(this.offset);
      table2.version = this.readUInt16(this.offset);
      table2.segCountX2 = this.readUInt16(this.offset);
      table2.searchRange = this.readUInt16(this.offset);
      table2.entrySelector = this.readUInt16(this.offset);
      table2.rangeShift = this.readUInt16(this.offset);
      var segCount = table2.segCountX2 / 2;
      table2.endCount = this.readUshortArray(segCount);
      table2.reservedPad = this.readUInt16(this.offset);
      table2.startCount = this.readUshortArray(segCount);
      table2.idDelta = this.readUshortArray(segCount);
      table2.idRangeOffset = this.readUshortArray(segCount);
      var length = table2.length / 2 - 8 - segCount * 4;
      table2.glyphID = this.readUshortArray(length);
      var codeOffset = 0;
      var index = 0;
      for (var j = 0; j < segCount; j++) {
        for (var k = table2.startCount[j]; k <= table2.endCount[j] && k !== 65535; k++) {
          if (table2.idRangeOffset[j] === 0) {
            codeOffset = k + table2.idDelta[j] & 65535;
          } else {
            index = j + table2.idRangeOffset[j] / 2 - segCount + k - table2.startCount[j];
            if (index >= table2.glyphID.length) {
              continue;
            }
            codeOffset = table2.glyphID[index] + table2.idDelta[j] & 65535;
          }
          var glyph = new TtfGlyphInfo();
          glyph.index = codeOffset;
          glyph.width = this.getWidth(glyph.index);
          var id = encoding === TtfCmapEncoding.Symbol ? (k & 65280) === 61440 ? k & 255 : k : k;
          glyph.charCode = id;
          collection.setValue(id, glyph);
          this.addGlyph(glyph, encoding);
        }
      }
    };
    TtfReader2.prototype.readTrimmedCmapTable = function(subTable, encoding) {
      var tableInfo = this.getTable("cmap");
      this.offset = tableInfo.offset + subTable.offset;
      var table2 = new TtfTrimmedCmapSubTable();
      table2.format = this.readUInt16(this.offset);
      table2.length = this.readUInt16(this.offset);
      table2.version = this.readUInt16(this.offset);
      table2.firstCode = this.readUInt16(this.offset);
      table2.entryCount = this.readUInt16(this.offset);
      for (var i = 0; i < table2.entryCount; ++i) {
        var glyphInfo = new TtfGlyphInfo();
        glyphInfo.index = this.readUInt16(this.offset);
        glyphInfo.width = this.getWidth(glyphInfo.index);
        glyphInfo.charCode = i + table2.firstCode;
        this.macintosh.setValue(i, glyphInfo);
        this.addGlyph(glyphInfo, encoding);
        this.maxMacIndex = Math.max(i, this.maxMacIndex);
      }
    };
    TtfReader2.prototype.initializeFontName = function(nameTable) {
      for (var i = 0; i < nameTable.recordsCount; i++) {
        var record = nameTable.nameRecords[i];
        if (record.nameID === 1) {
          this.metrics.fontFamily = record.name;
        } else if (record.nameID === 6) {
          this.metrics.postScriptName = record.name;
        }
        if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== void 0 && this.metrics.postScriptName !== null && this.metrics.postScriptName !== void 0) {
          break;
        }
      }
    };
    TtfReader2.prototype.getTable = function(name) {
      var table2 = new TtfTableInfo();
      var obj;
      if (this.tableDirectory.containsKey(name)) {
        obj = this.tableDirectory.getValue(name);
      }
      if (obj !== null && obj !== void 0) {
        table2 = obj;
      }
      return table2;
    };
    TtfReader2.prototype.getWidth = function(glyphCode) {
      glyphCode = glyphCode < this.width.length ? glyphCode : this.width.length - 1;
      return this.width[glyphCode];
    };
    TtfReader2.prototype.getCmapEncoding = function(platformID, encodingID) {
      var format = TtfCmapEncoding.Unknown;
      if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {
        format = TtfCmapEncoding.Symbol;
      } else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {
        format = TtfCmapEncoding.Unicode;
      } else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {
        format = TtfCmapEncoding.Macintosh;
      }
      return format;
    };
    TtfReader2.prototype.addGlyph = function(glyph, encoding) {
      var collection = null;
      switch (encoding) {
        case TtfCmapEncoding.Unicode:
          collection = this.microsoftGlyphs;
          break;
        case TtfCmapEncoding.Macintosh:
        case TtfCmapEncoding.Symbol:
          collection = this.macintoshGlyphs;
          break;
      }
      collection.setValue(glyph.index, glyph);
    };
    TtfReader2.prototype.initializeMetrics = function(nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {
      this.initializeFontName(nameTable);
      var bSymbol = false;
      for (var i = 0; i < cmapTables.length; i++) {
        var subTable = cmapTables[i];
        var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);
        if (encoding === TtfCmapEncoding.Symbol) {
          bSymbol = true;
          break;
        }
      }
      this.metrics.isSymbol = bSymbol;
      this.metrics.macStyle = headTable.macStyle;
      this.metrics.isFixedPitch = postTable.isFixedPitch !== 0;
      this.metrics.italicAngle = postTable.italicAngle;
      var factor = 1e3 / headTable.unitsPerEm;
      this.metrics.winAscent = os2Table.sTypoAscender * factor;
      this.metrics.macAscent = horizontalHeadTable.ascender * factor;
      this.metrics.capHeight = os2Table.sCapHeight !== 0 ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;
      this.metrics.winDescent = os2Table.sTypoDescender * factor;
      this.metrics.macDescent = horizontalHeadTable.descender * factor;
      this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;
      this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);
      var left = headTable.xMin * factor;
      var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);
      var right = headTable.xMax * factor;
      var bottom = this.metrics.macDescent;
      this.metrics.fontBox = new Rectangle(left, top, right, bottom);
      this.metrics.stemV = 80;
      this.metrics.widthTable = this.updateWidth();
      this.metrics.contains = this.tableDirectory.containsKey("CFF");
      this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;
      this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;
    };
    TtfReader2.prototype.updateWidth = function() {
      var count2 = 256;
      var bytes = [];
      if (this.metrics.isSymbol) {
        for (var i = 0; i < count2; i++) {
          var glyphInfo = this.getGlyph(String.fromCharCode(i));
          bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;
        }
      } else {
        var byteToProcess = [];
        var unknown = "?";
        var space = String.fromCharCode(32);
        for (var i = 0; i < count2; i++) {
          byteToProcess[0] = i;
          var text = this.getString(byteToProcess, 0, byteToProcess.length);
          var ch = text.length > 0 ? text[0] : unknown;
          var glyphInfo = this.getGlyph(ch);
          if (!glyphInfo.empty) {
            bytes[i] = glyphInfo.width;
          } else {
            glyphInfo = this.getGlyph(space);
            bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;
          }
        }
      }
      return bytes;
    };
    TtfReader2.prototype.getDefaultGlyph = function() {
      var glyph = this.getGlyph(StringTokenizer.whiteSpace);
      return glyph;
    };
    TtfReader2.prototype.getString = function(byteToProcess, start, length) {
      var result = "";
      for (var index = 0; index < length; index++) {
        result += String.fromCharCode(byteToProcess[index + start]);
      }
      return result;
    };
    TtfReader2.prototype.readLocaTable = function(bShort) {
      var tableInfo = this.getTable("loca");
      this.offset = tableInfo.offset;
      var table2 = new TtfLocaTable();
      var buffer = null;
      if (bShort) {
        var len = tableInfo.length / 2;
        buffer = [];
        for (var i = 0; i < len; i++) {
          buffer[i] = this.readUInt16(this.offset) * 2;
        }
      } else {
        var len = tableInfo.length / 4;
        buffer = [];
        for (var i = 0; i < len; i++) {
          buffer[i] = this.readUInt32(this.offset);
        }
      }
      table2.offsets = buffer;
      return table2;
    };
    TtfReader2.prototype.updateGlyphChars = function(glyphChars, locaTable) {
      if (!glyphChars.containsKey(0)) {
        glyphChars.setValue(0, 0);
      }
      var clone = new Dictionary();
      var glyphCharKeys = glyphChars.keys();
      for (var i = 0; i < glyphCharKeys.length; i++) {
        clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));
      }
      for (var i = 0; i < glyphCharKeys.length; i++) {
        var nextKey = glyphCharKeys[i];
        this.processCompositeGlyph(glyphChars, nextKey, locaTable);
      }
    };
    TtfReader2.prototype.processCompositeGlyph = function(glyphChars, glyph, locaTable) {
      if (glyph < locaTable.offsets.length - 1) {
        var glyphOffset = locaTable.offsets[glyph];
        if (glyphOffset !== locaTable.offsets[glyph + 1]) {
          var tableInfo = this.getTable("glyf");
          this.offset = tableInfo.offset + glyphOffset;
          var glyphHeader = new TtfGlyphHeader();
          glyphHeader.numberOfContours = this.readInt16(this.offset);
          glyphHeader.xMin = this.readInt16(this.offset);
          glyphHeader.yMin = this.readInt16(this.offset);
          glyphHeader.xMax = this.readInt16(this.offset);
          glyphHeader.yMax = this.readInt16(this.offset);
          if (glyphHeader.numberOfContours < 0) {
            var skipBytes = 0;
            var entry = true;
            while (entry) {
              var flags = this.readUInt16(this.offset);
              var glyphIndex = this.readUInt16(this.offset);
              if (!glyphChars.containsKey(glyphIndex)) {
                glyphChars.setValue(glyphIndex, 0);
              }
              if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {
                break;
              }
              skipBytes = (flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0 ? 4 : 2;
              if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {
                skipBytes += 2;
              } else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {
                skipBytes += 4;
              } else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {
                skipBytes += 2 * 4;
              }
              this.offset += skipBytes;
            }
          }
        }
      }
    };
    TtfReader2.prototype.generateGlyphTable = function(glyphChars, locaTable, newLocaTable, newGlyphTable) {
      newLocaTable = [];
      var activeGlyphs = glyphChars.keys();
      activeGlyphs.sort(function(a, b) {
        return a - b;
      });
      var glyphSize = 0;
      for (var i = 0; i < activeGlyphs.length; i++) {
        var glyphIndex = activeGlyphs[i];
        if (locaTable.offsets.length > 0) {
          glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];
        }
      }
      var glyphSizeAligned = this.align(glyphSize);
      newGlyphTable = [];
      for (var i = 0; i < glyphSizeAligned; i++) {
        newGlyphTable.push(0);
      }
      var nextGlyphOffset = 0;
      var nextGlyphIndex = 0;
      var table2 = this.getTable("glyf");
      for (var i = 0; i < locaTable.offsets.length; i++) {
        newLocaTable.push(nextGlyphOffset);
        if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {
          ++nextGlyphIndex;
          newLocaTable[i] = nextGlyphOffset;
          var oldGlyphOffset = locaTable.offsets[i];
          var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;
          if (oldNextGlyphOffset > 0) {
            this.offset = table2.offset + oldGlyphOffset;
            var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);
            newGlyphTable = result.buffer;
            nextGlyphOffset += oldNextGlyphOffset;
          }
        }
      }
      return {
        glyphTableSize: glyphSize,
        newLocaTable,
        newGlyphTable
      };
    };
    TtfReader2.prototype.updateLocaTable = function(newLocaTable, bLocaIsShort, newLocaTableOut) {
      if (newLocaTable === null) {
        throw new Error("Argument Null Exception : newLocaTable");
      }
      var size = bLocaIsShort ? newLocaTable.length * 2 : newLocaTable.length * 4;
      var count2 = this.align(size);
      var writer = new BigEndianWriter(count2);
      for (var i = 0; i < newLocaTable.length; i++) {
        var value = newLocaTable[i];
        if (bLocaIsShort) {
          value /= 2;
          writer.writeShort(value);
        } else {
          writer.writeInt(value);
        }
      }
      return {
        newLocaUpdated: writer.data,
        newLocaSize: size
      };
    };
    TtfReader2.prototype.align = function(value) {
      return value + 3 & ~3;
    };
    TtfReader2.prototype.getFontProgram = function(newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {
      if (newLocaTableOut === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      var tableNames = this.tableNames;
      var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);
      var fontProgramLength = result.fontProgramLength;
      var numTables = result.numTables;
      var writer = new BigEndianWriter(fontProgramLength);
      writer.writeInt(65536);
      writer.writeShort(numTables);
      var entrySelector = this.entrySelectors[numTables];
      writer.writeShort((1 << (entrySelector & 31)) * 16);
      writer.writeShort(entrySelector);
      writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);
      this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);
      this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);
      return writer.data;
    };
    TtfReader2.prototype.getFontProgramLength = function(newLocaTableOut, newGlyphTable, numTables) {
      if (newLocaTableOut === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      numTables = 2;
      var tableNames = this.tableNames;
      var fontProgramLength = 0;
      for (var i = 0; i < tableNames.length; i++) {
        var tableName = tableNames[i];
        if (tableName !== "glyf" && tableName !== "loca") {
          var table2 = this.getTable(tableName);
          if (!table2.empty) {
            ++numTables;
            fontProgramLength += this.align(table2.length);
          }
        }
      }
      fontProgramLength += newLocaTableOut.length;
      fontProgramLength += newGlyphTable.length;
      var usedTablesSize = numTables * 16 + 3 * 4;
      fontProgramLength += usedTablesSize;
      return {
        fontProgramLength,
        numTables
      };
    };
    TtfReader2.prototype.writeCheckSums = function(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {
      if (writer === null) {
        throw new Error("Argument Null Exception : writer");
      }
      if (newLocaTableOut === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      var tableNames = this.tableNames;
      var usedTablesSize = numTables * 16 + 3 * 4;
      var nextTableSize = 0;
      for (var i = 0; i < tableNames.length; i++) {
        var tableName = tableNames[i];
        var tableInfo = this.getTable(tableName);
        if (tableInfo.empty) {
          continue;
        }
        writer.writeString(tableName);
        if (tableName === "glyf") {
          var checksum = this.calculateCheckSum(newGlyphTable);
          writer.writeInt(checksum);
          nextTableSize = glyphTableSize;
        } else if (tableName === "loca") {
          var checksum = this.calculateCheckSum(newLocaTableOut);
          writer.writeInt(checksum);
          nextTableSize = locaTableSize;
        } else {
          writer.writeInt(tableInfo.checksum);
          nextTableSize = tableInfo.length;
        }
        writer.writeUInt(usedTablesSize);
        writer.writeUInt(nextTableSize);
        usedTablesSize += this.align(nextTableSize);
      }
    };
    TtfReader2.prototype.calculateCheckSum = function(bytes) {
      if (bytes === null) {
        throw new Error("Argument Null Exception : bytes");
      }
      var pos = 0;
      var byte1 = 0;
      var byte2 = 0;
      var byte3 = 0;
      var byte4 = 0;
      for (var i = 0; i < (bytes.length + 1) / 4; i++) {
        byte4 += bytes[pos++] & 255;
        byte3 += bytes[pos++] & 255;
        byte2 += bytes[pos++] & 255;
        byte1 += bytes[pos++] & 255;
      }
      var result = byte1;
      result += byte2 << 8;
      result += byte3 << 16;
      result += byte4 << 24;
      return result;
    };
    TtfReader2.prototype.writeGlyphs = function(writer, newLocaTable, newGlyphTable) {
      if (writer === null) {
        throw new Error("Argument Null Exception : writer");
      }
      if (newLocaTable === null) {
        throw new Error("Argument Null Exception : newLocaTableOut");
      }
      if (newGlyphTable === null) {
        throw new Error("Argument Null Exception : newGlyphTable");
      }
      var tableNames = this.tableNames;
      for (var i = 0; i < tableNames.length; i++) {
        var tableName = tableNames[i];
        var tableInfo = this.getTable(tableName);
        if (tableInfo.empty) {
          continue;
        }
        if (tableName === "glyf") {
          writer.writeBytes(newGlyphTable);
        } else if (tableName === "loca") {
          writer.writeBytes(newLocaTable);
        } else {
          var count2 = this.align(tableInfo.length);
          var buff = [];
          for (var i_1 = 0; i_1 < count2; i_1++) {
            buff.push(0);
          }
          this.offset = tableInfo.offset;
          var result = this.read(buff, 0, tableInfo.length);
          writer.writeBytes(result.buffer);
        }
      }
    };
    TtfReader2.prototype.setOffset = function(offset) {
      this.offset = offset;
    };
    TtfReader2.prototype.createInternals = function() {
      this.metrics = new TtfMetrics();
      var nameTable = this.readNameTable();
      var headTable = this.readHeadTable();
      this.bIsLocaShort = headTable.indexToLocalFormat === 0;
      var horizontalHeadTable = this.readHorizontalHeaderTable();
      var os2Table = this.readOS2Table();
      var postTable = this.readPostTable();
      this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);
      var subTables = this.readCmapTable();
      this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);
    };
    TtfReader2.prototype.getGlyph = function(charCode) {
      if (typeof charCode === "number") {
        var obj1 = null;
        if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {
          if (this.microsoftGlyphs.containsKey(charCode)) {
            obj1 = this.microsoftGlyphs.getValue(charCode);
          }
        } else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {
          if (this.macintoshGlyphs.containsKey(charCode)) {
            obj1 = this.macintoshGlyphs.getValue(charCode);
          }
        }
        var glyph = obj1 != null ? obj1 : this.getDefaultGlyph();
        return glyph;
      } else {
        var obj = null;
        var code = charCode.charCodeAt(0);
        if (!this.metrics.isSymbol && this.microsoft !== null) {
          if (this.microsoft.containsKey(code)) {
            obj = this.microsoft.getValue(code);
            if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {
              this.isFontPresent = true;
            }
          } else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {
            this.isFontPresent = false;
          }
        } else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {
          if (this.maxMacIndex !== 0) {
            code %= this.maxMacIndex + 1;
          } else {
            code = (code & 65280) === 61440 ? code & 255 : code;
          }
          if (this.macintosh.containsKey(code)) {
            obj = this.macintosh.getValue(code);
            this.isFontPresent = true;
          }
        }
        if (charCode === StringTokenizer.whiteSpace && obj === null) {
          obj = new TtfGlyphInfo();
        }
        var glyph = obj !== null ? obj : this.getDefaultGlyph();
        return glyph;
      }
    };
    TtfReader2.prototype.getGlyphChars = function(chars) {
      if (chars === null || chars === void 0) {
        throw new Error("Argument Null Exception : chars");
      }
      var dictionary = new Dictionary();
      var charKeys = chars.keys();
      for (var i = 0; i < charKeys.length; i++) {
        var ch = charKeys[i];
        var glyph = this.getGlyph(ch);
        if (!glyph.empty) {
          dictionary.setValue(glyph.index, ch.charCodeAt(0));
        }
      }
      return dictionary;
    };
    TtfReader2.prototype.getAllGlyphs = function() {
      var allGlyphInfo = [];
      var info = new TtfGlyphInfo();
      var index = 0;
      for (var i = 0; i < this.width.length; i++) {
        var width = this.width[i];
        info.index = index;
        info.width = width;
        allGlyphInfo.push(info);
        index++;
      }
      return allGlyphInfo;
    };
    TtfReader2.prototype.readFontProgram = function(chars) {
      var glyphChars = this.getGlyphChars(chars);
      var locaTable = this.readLocaTable(this.bIsLocaShort);
      if (glyphChars.size() < chars.size()) {
        this.missedGlyphs = chars.size() - glyphChars.size();
      }
      this.updateGlyphChars(glyphChars, locaTable);
      var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);
      var glyphTableSize = result1.glyphTableSize;
      var newLocaTable = result1.newLocaTable;
      var newGlyphTable = result1.newGlyphTable;
      var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);
      var newLocaSize = result2.newLocaSize;
      var newLocaUpdated = result2.newLocaUpdated;
      var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);
      return fontProgram;
    };
    TtfReader2.prototype.convertString = function(text) {
      if (text === null) {
        throw new Error("Argument Null Exception : text");
      }
      var glyph = "";
      var i = 0;
      for (var k = 0; k < text.length; k++) {
        var ch = text[k];
        var glyphInfo = this.getGlyph(ch);
        if (!glyphInfo.empty) {
          glyph += String.fromCharCode(glyphInfo.index);
          i++;
        }
      }
      return glyph;
    };
    TtfReader2.prototype.getCharWidth = function(code) {
      var glyphInfo = this.getGlyph(code);
      glyphInfo = !glyphInfo.empty ? glyphInfo : this.getDefaultGlyph();
      var codeWidth = !glyphInfo.empty ? glyphInfo.width : 0;
      return codeWidth;
    };
    TtfReader2.prototype.readString = function(length, isUnicode) {
      if (isUnicode === void 0) {
        return this.readString(length, false);
      } else {
        var result = "";
        if (isUnicode) {
          for (var i = 0; i < length; i++) {
            if (i % 2 !== 0) {
              result += String.fromCharCode(this.fontData[this.offset]);
            }
            this.offset += 1;
          }
        } else {
          for (var i = 0; i < length; i++) {
            result += String.fromCharCode(this.fontData[this.offset]);
            this.offset += 1;
          }
        }
        return result;
      }
    };
    TtfReader2.prototype.readFixed = function(offset) {
      var integer = this.readInt16(offset);
      var sFraction = this.readInt16(offset + 2);
      var fraction = sFraction / 16384;
      return integer + fraction;
    };
    TtfReader2.prototype.readInt32 = function(offset) {
      var i1 = this.fontData[offset + 3];
      var i2 = this.fontData[offset + 2];
      var i3 = this.fontData[offset + 1];
      var i4 = this.fontData[offset];
      this.offset += 4;
      return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);
    };
    TtfReader2.prototype.readUInt32 = function(offset) {
      var i1 = this.fontData[offset + 3];
      var i2 = this.fontData[offset + 2];
      var i3 = this.fontData[offset + 1];
      var i4 = this.fontData[offset];
      this.offset += 4;
      return i1 | i2 << 8 | i3 << 16 | i4 << 24;
    };
    TtfReader2.prototype.readInt16 = function(offset) {
      var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];
      result = result & 1 << 15 ? result - 65536 : result;
      this.offset += 2;
      return result;
    };
    TtfReader2.prototype.readInt64 = function(offset) {
      var low = this.readInt32(offset + 4);
      var n = this.readInt32(offset) * 4294967296 + low;
      if (low < 0) {
        n += 4294967296;
      }
      return n;
    };
    TtfReader2.prototype.readUInt16 = function(offset) {
      var result = this.fontData[offset] << 8 | this.fontData[offset + 1];
      this.offset += 2;
      return result;
    };
    TtfReader2.prototype.readUshortArray = function(length) {
      var buffer = [];
      for (var i = 0; i < length; i++) {
        buffer[i] = this.readUInt16(this.offset);
      }
      return buffer;
    };
    TtfReader2.prototype.readBytes = function(length) {
      var result = [];
      for (var i = 0; i < length; i++) {
        result.push(this.fontData[this.offset]);
        this.offset += 1;
      }
      return result;
    };
    TtfReader2.prototype.readByte = function(offset) {
      var result = this.fontData[offset];
      this.offset += 1;
      return result;
    };
    TtfReader2.prototype.read = function(buffer, index, count2) {
      if (buffer === null) {
        throw new Error("Argument Null Exception : buffer");
      }
      var written = 0;
      var read = 0;
      do {
        for (var i = 0; i < count2 - written && this.offset + i < this.fontData.length; i++) {
          buffer[index + i] = this.fontData[this.offset + i];
        }
        read = count2 - written;
        this.offset += read;
        written += read;
      } while (written < count2);
      return {
        buffer,
        written
      };
    };
    return TtfReader2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font-metrics.js
var __extends47 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfFontMetrics = (
  /** @class */
  function() {
    function PdfFontMetrics2() {
      this.lineGap = 0;
    }
    PdfFontMetrics2.prototype.getAscent = function(format) {
      var returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);
      return returnValue;
    };
    PdfFontMetrics2.prototype.getDescent = function(format) {
      var returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);
      return returnValue;
    };
    PdfFontMetrics2.prototype.getLineGap = function(format) {
      var returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);
      return returnValue;
    };
    PdfFontMetrics2.prototype.getHeight = function(format) {
      var height;
      var clearTypeFonts = ["cambria", "candara", "constantia", "corbel", "cariadings"];
      var clearTypeFontCollection = [];
      for (var index = 0; index < clearTypeFonts.length; index++) {
        var font = clearTypeFonts[index];
        clearTypeFontCollection.push(font);
      }
      if (this.getDescent(format) < 0) {
        height = this.getAscent(format) - this.getDescent(format) + this.getLineGap(format);
      } else {
        height = this.getAscent(format) + this.getDescent(format) + this.getLineGap(format);
      }
      return height;
    };
    PdfFontMetrics2.prototype.getSize = function(format) {
      var size = this.size;
      if (format != null) {
        switch (format.subSuperScript) {
          case PdfSubSuperScript.SubScript:
            size /= this.subScriptSizeFactor;
            break;
          case PdfSubSuperScript.SuperScript:
            size /= this.superscriptSizeFactor;
            break;
        }
      }
      return size;
    };
    PdfFontMetrics2.prototype.clone = function() {
      var metrics = this;
      metrics.widthTable = WidthTable.clone();
      return metrics;
    };
    Object.defineProperty(PdfFontMetrics2.prototype, "widthTable", {
      //  Properies
      /**
       * Gets or sets the `width table`.
       * @private
       */
      get: function() {
        return this.internalWidthTable;
      },
      set: function(value) {
        this.internalWidthTable = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfFontMetrics2;
  }()
);
var WidthTable = (
  /** @class */
  function() {
    function WidthTable2() {
    }
    WidthTable2.clone = function() {
      return null;
    };
    return WidthTable2;
  }()
);
var StandardWidthTable = (
  /** @class */
  function(_super) {
    __extends47(StandardWidthTable2, _super);
    function StandardWidthTable2(widths) {
      var _this = _super.call(this) || this;
      if (widths == null) {
        throw new Error("ArgumentNullException:widths");
      }
      _this.widths = widths;
      return _this;
    }
    StandardWidthTable2.prototype.items = function(index) {
      if (index < 0 || index >= this.widths.length) {
        throw new Error("ArgumentOutOfRangeException:index, The character is not supported by the font.");
      }
      var result = this.widths[index];
      return result;
    };
    Object.defineProperty(StandardWidthTable2.prototype, "length", {
      /**
       * Gets the `length` of the internal array.
       * @private
       */
      get: function() {
        return this.widths.length;
      },
      enumerable: true,
      configurable: true
    });
    StandardWidthTable2.prototype.clone = function() {
      var swt = this;
      swt.widths = this.widths;
      return swt;
    };
    StandardWidthTable2.prototype.toArray = function() {
      var arr = new PdfArray(this.widths);
      return arr;
    };
    return StandardWidthTable2;
  }(WidthTable)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js
var UnicodeTrueTypeFont = (
  /** @class */
  function() {
    function UnicodeTrueTypeFont2(base64String, size) {
      this.nameString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      this.dictionaryProperties = new DictionaryProperties();
      this.isCompress = false;
      this.isEmbedFont = false;
      this.cmapPrefix = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap" + Operators.newLine + "/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange" + Operators.newLine;
      this.cmapEndCodespaceRange = "endcodespacerange" + Operators.newLine;
      this.cmapBeginRange = "beginbfrange" + Operators.newLine;
      this.cmapEndRange = "endbfrange" + Operators.newLine;
      this.cmapSuffix = "endbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend end" + Operators.newLine;
      if (base64String === null || base64String === void 0) {
        throw new Error("ArgumentNullException:base64String");
      }
      this.fontSize = size;
      this.fontString = base64String;
      this.Initialize();
    }
    UnicodeTrueTypeFont2.prototype.getCharWidth = function(charCode) {
      var codeWidth = this.ttfReader.getCharWidth(charCode);
      return codeWidth;
    };
    UnicodeTrueTypeFont2.prototype.getLineWidth = function(line) {
      var width = 0;
      for (var i = 0, len = line.length; i < len; i++) {
        var ch = line[i];
        var charWidth = this.getCharWidth(ch);
        width += charWidth;
      }
      return width;
    };
    UnicodeTrueTypeFont2.prototype.Initialize = function() {
      var byteArray = new ByteArray(this.fontString.length);
      byteArray.writeFromBase64String(this.fontString);
      this.fontData = byteArray.internalBuffer;
      this.ttfReader = new TtfReader(this.fontData);
      this.ttfMetrics = this.ttfReader.metrics;
    };
    UnicodeTrueTypeFont2.prototype.createInternals = function() {
      this.fontDictionary = new PdfDictionary();
      this.fontProgram = new PdfStream();
      this.cmap = new PdfStream();
      this.descendantFont = new PdfDictionary();
      this.metrics = new PdfFontMetrics();
      this.ttfReader.createInternals();
      this.ttfMetrics = this.ttfReader.metrics;
      this.initializeMetrics();
      this.subsetName = this.getFontName();
      this.createDescendantFont();
      this.createCmap();
      this.createFontDictionary();
      this.createFontProgram();
    };
    UnicodeTrueTypeFont2.prototype.getInternals = function() {
      return this.fontDictionary;
    };
    UnicodeTrueTypeFont2.prototype.initializeMetrics = function() {
      var ttfMetrics = this.ttfReader.metrics;
      this.metrics.ascent = ttfMetrics.macAscent;
      this.metrics.descent = ttfMetrics.macDescent;
      this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;
      this.metrics.name = ttfMetrics.fontFamily;
      this.metrics.postScriptName = ttfMetrics.postScriptName;
      this.metrics.size = this.fontSize;
      this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);
      this.metrics.lineGap = ttfMetrics.lineGap;
      this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;
      this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;
      this.metrics.isBold = ttfMetrics.isBold;
    };
    UnicodeTrueTypeFont2.prototype.getFontName = function() {
      var builder = "";
      var name;
      for (var i = 0; i < 6; i++) {
        var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;
        builder += this.nameString[index];
      }
      builder += "+";
      builder += this.ttfReader.metrics.postScriptName;
      name = builder.toString();
      name = this.formatName(name);
      return name;
    };
    UnicodeTrueTypeFont2.prototype.formatName = function(fontName) {
      var ret = fontName.replace("(", "#28");
      ret = ret.replace(")", "#29");
      ret = ret.replace("[", "#5B");
      ret = ret.replace("]", "#5D");
      ret = ret.replace("<", "#3C");
      ret = ret.replace(">", "#3E");
      ret = ret.replace("{", "#7B");
      ret = ret.replace("}", "#7D");
      ret = ret.replace("/", "#2F");
      ret = ret.replace("%", "#25");
      return ret.replace(" ", "#20");
    };
    UnicodeTrueTypeFont2.prototype.createDescendantFont = function() {
      this.descendantFont.isResource = true;
      this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);
      this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));
      this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));
      this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));
      this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));
      this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1e3));
      this.fontDescriptor = this.createFontDescriptor();
      this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));
      var systemInfo = this.createSystemInfo();
      this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);
    };
    UnicodeTrueTypeFont2.prototype.createFontDescriptor = function() {
      var descriptor = new PdfDictionary();
      var metrics = this.ttfReader.metrics;
      descriptor.isResource = true;
      descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));
      descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));
      descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));
      descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));
      descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));
      descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));
      descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));
      descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));
      descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));
      descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));
      descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));
      descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));
      descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));
      descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));
      descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));
      descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));
      return descriptor;
    };
    UnicodeTrueTypeFont2.prototype.createCmap = function() {
      this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);
    };
    UnicodeTrueTypeFont2.prototype.createFontDictionary = function() {
      this.fontDictionary.isResource = true;
      this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);
      this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));
      this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));
      this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));
      this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));
      var descFonts = new PdfArray();
      var reference = new PdfReferenceHolder(this.descendantFont);
      descFonts.isFont = true;
      descFonts.add(reference);
      this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);
    };
    UnicodeTrueTypeFont2.prototype.createFontProgram = function() {
      this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);
    };
    UnicodeTrueTypeFont2.prototype.createSystemInfo = function() {
      var systemInfo = new PdfDictionary();
      systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString("Adobe"));
      systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));
      systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));
      return systemInfo;
    };
    UnicodeTrueTypeFont2.prototype.descendantFontBeginSave = function() {
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0) {
        var width = this.getDescendantWidth();
        if (width !== null) {
          this.descendantFont.items.setValue(this.dictionaryProperties.w, width);
        }
      }
    };
    UnicodeTrueTypeFont2.prototype.cmapBeginSave = function() {
      this.generateCmap();
    };
    UnicodeTrueTypeFont2.prototype.fontDictionaryBeginSave = function() {
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {
        this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));
      }
    };
    UnicodeTrueTypeFont2.prototype.fontProgramBeginSave = function() {
      this.isCompress = true;
      this.generateFontProgram();
    };
    UnicodeTrueTypeFont2.prototype.getDescendantWidth = function() {
      var array = new PdfArray();
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0) {
        var glyphInfo = [];
        var keys = this.usedChars.keys();
        for (var i = 0; i < keys.length; i++) {
          var chLen = keys[i];
          var glyph = this.ttfReader.getGlyph(chLen);
          if (glyph.empty) {
            continue;
          }
          glyphInfo.push(glyph);
        }
        glyphInfo.sort(function(a, b) {
          return a.index - b.index;
        });
        var firstGlyphIndex = 0;
        var lastGlyphIndex = 0;
        var firstGlyphIndexWasSet = false;
        var widthDetails = new PdfArray();
        for (var i = 0; i < glyphInfo.length; i++) {
          var glyph = glyphInfo[i];
          if (!firstGlyphIndexWasSet) {
            firstGlyphIndexWasSet = true;
            firstGlyphIndex = glyph.index;
            lastGlyphIndex = glyph.index - 1;
          }
          if ((lastGlyphIndex + 1 !== glyph.index || i + 1 === glyphInfo.length) && glyphInfo.length > 1) {
            array.add(new PdfNumber(firstGlyphIndex));
            if (i !== 0) {
              array.add(widthDetails);
            }
            firstGlyphIndex = glyph.index;
            widthDetails = new PdfArray();
          }
          widthDetails.add(new PdfNumber(glyph.width));
          if (i + 1 === glyphInfo.length) {
            array.add(new PdfNumber(firstGlyphIndex));
            array.add(widthDetails);
          }
          lastGlyphIndex = glyph.index;
        }
      }
      return array;
    };
    UnicodeTrueTypeFont2.prototype.generateCmap = function() {
      if (this.usedChars !== null && this.usedChars !== void 0 && this.usedChars.size() > 0) {
        var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);
        if (glyphChars.size() > 0) {
          var keys = glyphChars.keys().sort();
          var first = keys[0];
          var last = keys[keys.length - 1];
          var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;
          var builder = "";
          builder += this.cmapPrefix;
          builder += middlePart;
          builder += this.cmapEndCodespaceRange;
          var nextRange = 0;
          for (var i = 0; i < keys.length; i++) {
            if (nextRange === 0) {
              if (i !== 0) {
                builder += this.cmapEndRange;
              }
              nextRange = Math.min(100, keys.length - i);
              builder += nextRange;
              builder += Operators.whiteSpace;
              builder += this.cmapBeginRange;
            }
            nextRange -= 1;
            var key = keys[i];
            builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + "\n";
          }
          builder += this.cmapSuffix;
          this.cmap.clearStream();
          this.cmap.isResource = true;
          this.cmap.write(builder);
        }
      }
    };
    UnicodeTrueTypeFont2.prototype.generateFontProgram = function() {
      var fontProgram = null;
      this.usedChars = this.usedChars === null || this.usedChars === void 0 ? new Dictionary() : this.usedChars;
      this.ttfReader.setOffset(0);
      fontProgram = this.ttfReader.readFontProgram(this.usedChars);
      this.fontProgram.clearStream();
      this.fontProgram.isResource = true;
      this.fontProgram.writeBytes(fontProgram);
    };
    UnicodeTrueTypeFont2.prototype.getDescriptorFlags = function() {
      var flags = 0;
      var metrics = this.ttfReader.metrics;
      if (metrics.isFixedPitch) {
        flags |= FontDescriptorFlags.FixedPitch;
      }
      if (metrics.isSymbol) {
        flags |= FontDescriptorFlags.Symbolic;
      } else {
        flags |= FontDescriptorFlags.Nonsymbolic;
      }
      if (metrics.isItalic) {
        flags |= FontDescriptorFlags.Italic;
      }
      if (metrics.isBold) {
        flags |= FontDescriptorFlags.ForceBold;
      }
      return flags;
    };
    UnicodeTrueTypeFont2.prototype.getBoundBox = function() {
      var rect = this.ttfReader.metrics.fontBox;
      var width = Math.abs(rect.right - rect.left);
      var height = Math.abs(rect.top - rect.bottom);
      var rectangle = new RectangleF(rect.left, rect.bottom, width, height);
      return rectangle;
    };
    UnicodeTrueTypeFont2.prototype.toHexString = function(n, isCaseChange) {
      var s = n.toString(16);
      if (isCaseChange) {
        s = s.toUpperCase();
      }
      return "<0000".substring(0, 5 - s.length) + s + ">";
    };
    UnicodeTrueTypeFont2.prototype.setSymbols = function(text) {
      if (text === null) {
        throw new Error("Argument Null Exception : text");
      }
      if (this.usedChars === null || this.usedChars === void 0) {
        this.usedChars = new Dictionary();
      }
      for (var i = 0; i < text.length; i++) {
        var ch = text[i];
        this.usedChars.setValue(ch, String.fromCharCode(0));
      }
      if (this.isEmbedFont === false) {
        this.getDescendantWidth();
      }
    };
    return UnicodeTrueTypeFont2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl/rtl-text-shape.js
var ArabicShapeRenderer = (
  /** @class */
  function() {
    function ArabicShapeRenderer2() {
      this.arabicCharTable = [["ء", "ﺀ"], ["آ", "ﺁ", "ﺂ"], ["أ", "ﺃ", "ﺄ"], ["ؤ", "ﺅ", "ﺆ"], ["إ", "ﺇ", "ﺈ"], ["ئ", "ﺉ", "ﺊ", "ﺋ", "ﺌ"], ["ا", "ﺍ", "ﺎ"], ["ب", "ﺏ", "ﺐ", "ﺑ", "ﺒ"], ["ة", "ﺓ", "ﺔ"], ["ت", "ﺕ", "ﺖ", "ﺗ", "ﺘ"], ["ث", "ﺙ", "ﺚ", "ﺛ", "ﺜ"], ["ج", "ﺝ", "ﺞ", "ﺟ", "ﺠ"], ["ح", "ﺡ", "ﺢ", "ﺣ", "ﺤ"], ["خ", "ﺥ", "ﺦ", "ﺧ", "ﺨ"], ["د", "ﺩ", "ﺪ"], ["ذ", "ﺫ", "ﺬ"], ["ر", "ﺭ", "ﺮ"], ["ز", "ﺯ", "ﺰ"], ["س", "ﺱ", "ﺲ", "ﺳ", "ﺴ"], ["ش", "ﺵ", "ﺶ", "ﺷ", "ﺸ"], ["ص", "ﺹ", "ﺺ", "ﺻ", "ﺼ"], ["ض", "ﺽ", "ﺾ", "ﺿ", "ﻀ"], ["ط", "ﻁ", "ﻂ", "ﻃ", "ﻄ"], ["ظ", "ﻅ", "ﻆ", "ﻇ", "ﻈ"], ["ع", "ﻉ", "ﻊ", "ﻋ", "ﻌ"], ["غ", "ﻍ", "ﻎ", "ﻏ", "ﻐ"], ["ـ", "ـ", "ـ", "ـ", "ـ"], ["ف", "ﻑ", "ﻒ", "ﻓ", "ﻔ"], ["ق", "ﻕ", "ﻖ", "ﻗ", "ﻘ"], ["ك", "ﻙ", "ﻚ", "ﻛ", "ﻜ"], ["ل", "ﻝ", "ﻞ", "ﻟ", "ﻠ"], ["م", "ﻡ", "ﻢ", "ﻣ", "ﻤ"], ["ن", "ﻥ", "ﻦ", "ﻧ", "ﻨ"], ["ه", "ﻩ", "ﻪ", "ﻫ", "ﻬ"], ["و", "ﻭ", "ﻮ"], ["ى", "ﻯ", "ﻰ", "ﯨ", "ﯩ"], ["ي", "ﻱ", "ﻲ", "ﻳ", "ﻴ"], ["ٱ", "ﭐ", "ﭑ"], ["ٹ", "ﭦ", "ﭧ", "ﭨ", "ﭩ"], ["ٺ", "ﭞ", "ﭟ", "ﭠ", "ﭡ"], ["ٻ", "ﭒ", "ﭓ", "ﭔ", "ﭕ"], ["پ", "ﭖ", "ﭗ", "ﭘ", "ﭙ"], ["ٿ", "ﭢ", "ﭣ", "ﭤ", "ﭥ"], ["ڀ", "ﭚ", "ﭛ", "ﭜ", "ﭝ"], ["ڃ", "ﭶ", "ﭷ", "ﭸ", "ﭹ"], ["ڄ", "ﭲ", "ﭳ", "ﭴ", "ﭵ"], ["چ", "ﭺ", "ﭻ", "ﭼ", "ﭽ"], ["ڇ", "ﭾ", "ﭿ", "ﮀ", "ﮁ"], ["ڈ", "ﮈ", "ﮉ"], ["ڌ", "ﮄ", "ﮅ"], ["ڍ", "ﮂ", "ﮃ"], ["ڎ", "ﮆ", "ﮇ"], ["ڑ", "ﮌ", "ﮍ"], ["ژ", "ﮊ", "ﮋ"], ["ڤ", "ﭪ", "ﭫ", "ﭬ", "ﭭ"], ["ڦ", "ﭮ", "ﭯ", "ﭰ", "ﭱ"], ["ک", "ﮎ", "ﮏ", "ﮐ", "ﮑ"], ["ڭ", "ﯓ", "ﯔ", "ﯕ", "ﯖ"], ["گ", "ﮒ", "ﮓ", "ﮔ", "ﮕ"], ["ڱ", "ﮚ", "ﮛ", "ﮜ", "ﮝ"], ["ڳ", "ﮖ", "ﮗ", "ﮘ", "ﮙ"], ["ں", "ﮞ", "ﮟ"], ["ڻ", "ﮠ", "ﮡ", "ﮢ", "ﮣ"], ["ھ", "ﮪ", "ﮫ", "ﮬ", "ﮭ"], ["ۀ", "ﮤ", "ﮥ"], ["ہ", "ﮦ", "ﮧ", "ﮨ", "ﮩ"], ["ۅ", "ﯠ", "ﯡ"], ["ۆ", "ﯙ", "ﯚ"], ["ۇ", "ﯗ", "ﯘ"], ["ۈ", "ﯛ", "ﯜ"], ["ۉ", "ﯢ", "ﯣ"], ["ۋ", "ﯞ", "ﯟ"], ["ی", "ﯼ", "ﯽ", "ﯾ", "ﯿ"], ["ې", "ﯤ", "ﯥ", "ﯦ", "ﯧ"], ["ے", "ﮮ", "ﮯ"], ["ۓ", "ﮰ", "ﮱ"]];
      this.alef = "ا";
      this.alefHamza = "أ";
      this.alefHamzaBelow = "إ";
      this.alefMadda = "آ";
      this.lam = "ل";
      this.hamza = "ء";
      this.zeroWidthJoiner = "‍";
      this.hamzaAbove = "ٔ";
      this.hamzaBelow = "ٕ";
      this.wawHamza = "ؤ";
      this.yehHamza = "ئ";
      this.waw = "و";
      this.alefMaksura = "ى";
      this.yeh = "ي";
      this.farsiYeh = "ی";
      this.shadda = "ّ";
      this.madda = "ٓ";
      this.lwa = "ﻻ";
      this.lwawh = "ﻷ";
      this.lwawhb = "ﻹ";
      this.lwawm = "ﻵ";
      this.bwhb = "ۓ";
      this.fathatan = "ً";
      this.superScriptalef = "ٰ";
      this.vowel = 1;
      this.arabicMapTable = new Dictionary();
      for (var i = 0; i < this.arabicCharTable.length; i++) {
        this.arabicMapTable.setValue(this.arabicCharTable[i][0], this.arabicCharTable[i]);
      }
    }
    ArabicShapeRenderer2.prototype.getCharacterShape = function(input2, index) {
      if (input2 >= this.hamza && input2 <= this.bwhb) {
        var value = [];
        if (this.arabicMapTable.getValue(input2)) {
          value = this.arabicMapTable.getValue(input2);
          return value[index + 1];
        }
      } else if (input2 >= this.lwawm && input2 <= this.lwa) {
        return input2;
      }
      return input2;
    };
    ArabicShapeRenderer2.prototype.shape = function(text, level) {
      var builder = "";
      var str2 = "";
      for (var i = 0; i < text.length; i++) {
        var c = text[i];
        if (c >= "؀" && c <= "ۿ") {
          str2 = str2 + c;
        } else {
          if (str2.length > 0) {
            var st = this.doShape(str2.toString(), 0);
            builder = builder + st;
            str2 = "";
          }
          builder = builder + c;
        }
      }
      if (str2.length > 0) {
        var st = this.doShape(str2.toString(), 0);
        builder = builder + st;
      }
      return builder.toString();
    };
    ArabicShapeRenderer2.prototype.doShape = function(input2, level) {
      var str = "";
      var ligature = 0;
      var len = 0;
      var i = 0;
      var next = "";
      var previous = new ArabicShape();
      var present = new ArabicShape();
      while (i < input2.length) {
        next = input2[i++];
        ligature = this.ligature(next, present);
        if (ligature === 0) {
          var shapeCount = this.getShapeCount(next);
          len = shapeCount === 1 ? 0 : 2;
          if (previous.Shapes > 2) {
            len += 1;
          }
          len = len % present.Shapes;
          present.Value = this.getCharacterShape(present.Value, len);
          str = this.append(str, previous, level);
          previous = present;
          present = new ArabicShape();
          present.Value = next;
          present.Shapes = shapeCount;
          present.Ligature++;
        }
      }
      len = previous.Shapes > 2 ? 1 : 0;
      len = len % present.Shapes;
      present.Value = this.getCharacterShape(present.Value, len);
      str = this.append(str, previous, level);
      str = this.append(str, present, level);
      return str.toString();
    };
    ArabicShapeRenderer2.prototype.append = function(builder, shape, level) {
      if (shape.Value !== "") {
        builder = builder + shape.Value;
        shape.Ligature -= 1;
        if (shape.Type !== "") {
          if ((level & this.vowel) === 0) {
            builder = builder + shape.Type;
            shape.Ligature -= 1;
          } else {
            shape.Ligature -= 1;
          }
        }
        if (shape.vowel !== "") {
          if ((level & this.vowel) === 0) {
            builder = builder + shape.vowel;
            shape.Ligature -= 1;
          } else {
            shape.Ligature -= 1;
          }
        }
      }
      return builder;
    };
    ArabicShapeRenderer2.prototype.ligature = function(value, shape) {
      if (shape.Value !== "") {
        var result = 0;
        if (value >= this.fathatan && value <= this.hamzaBelow || value === this.superScriptalef) {
          result = 1;
          if (shape.vowel !== "" && value !== this.shadda) {
            result = 2;
          }
          if (value === this.shadda) {
            if (shape.Type == null) {
              shape.Type = this.shadda;
            } else {
              return 0;
            }
          } else if (value === this.hamzaBelow) {
            if (shape.Value === this.alef) {
              shape.Value = this.alefHamzaBelow;
              result = 2;
            } else if (value === this.lwa) {
              shape.Value = this.lwawhb;
              result = 2;
            } else {
              shape.Type = this.hamzaBelow;
            }
          } else if (value === this.hamzaAbove) {
            if (shape.Value === this.alef) {
              shape.Value = this.alefHamza;
              result = 2;
            } else if (shape.Value === this.lwa) {
              shape.Value = this.lwawh;
              result = 2;
            } else if (shape.Value === this.waw) {
              shape.Value = this.wawHamza;
              result = 2;
            } else if (shape.Value === this.yeh || shape.Value === this.alefMaksura || shape.Value === this.farsiYeh) {
              shape.Value = this.yehHamza;
              result = 2;
            } else {
              shape.Type = this.hamzaAbove;
            }
          } else if (value === this.madda) {
            if (shape.Value === this.alef) {
              shape.Value = this.alefMadda;
              result = 2;
            }
          } else {
            shape.vowel = value;
          }
          if (result === 1) {
            shape.Ligature++;
          }
          return result;
        }
        if (shape.vowel !== "") {
          return 0;
        }
        if (shape.Value === this.lam) {
          if (value === this.alef) {
            shape.Value = this.lwa;
            shape.Shapes = 2;
            result = 3;
          } else if (value === this.alefHamza) {
            shape.Value = this.lwawh;
            shape.Shapes = 2;
            result = 3;
          } else if (value === this.alefHamzaBelow) {
            shape.Value = this.lwawhb;
            shape.Shapes = 2;
            result = 3;
          } else if (value === this.alefMadda) {
            shape.Value = this.lwawm;
            shape.Shapes = 2;
            result = 3;
          }
        }
        return result;
      } else {
        return 0;
      }
    };
    ArabicShapeRenderer2.prototype.getShapeCount = function(shape) {
      if (shape >= this.hamza && shape <= this.bwhb && !(shape >= this.fathatan && shape <= this.hamzaBelow || shape === this.superScriptalef)) {
        var c = [];
        if (this.arabicMapTable.getValue(shape)) {
          c = this.arabicMapTable.getValue(shape);
          return c.length - 1;
        }
      } else if (shape === this.zeroWidthJoiner) {
        return 4;
      }
      return 1;
    };
    return ArabicShapeRenderer2;
  }()
);
var ArabicShape = (
  /** @class */
  function() {
    function ArabicShape2() {
      this.shapeValue = "";
      this.shapeType = "";
      this.shapeVowel = "";
      this.shapeLigature = 0;
      this.shapeShapes = 1;
    }
    Object.defineProperty(ArabicShape2.prototype, "Value", {
      //#endregion
      //#region Properties 
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeValue;
      },
      set: function(value) {
        this.shapeValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "Type", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeType;
      },
      set: function(value) {
        this.shapeType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "vowel", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeVowel;
      },
      set: function(value) {
        this.shapeVowel = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "Ligature", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeLigature;
      },
      set: function(value) {
        this.shapeLigature = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ArabicShape2.prototype, "Shapes", {
      /**
       * Gets or sets the values.
       * @private
       */
      get: function() {
        return this.shapeShapes;
      },
      set: function(value) {
        this.shapeShapes = value;
      },
      enumerable: true,
      configurable: true
    });
    return ArabicShape2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl/rtl-bidirectional.js
var Bidi = (
  /** @class */
  function() {
    function Bidi2() {
      this.indexes = [];
      this.indexLevels = [];
      this.mirroringShapeCharacters = new Dictionary();
      this.update();
    }
    Bidi2.prototype.doMirrorShaping = function(text) {
      var result = [];
      for (var i = 0; i < text.length; i++) {
        if ((this.indexLevels[i] & 1) === 1 && this.mirroringShapeCharacters.containsKey(text[i].charCodeAt(0))) {
          result[i] = String.fromCharCode(this.mirroringShapeCharacters.getValue(text[i].charCodeAt(0)));
        } else {
          result[i] = text[i].toString();
        }
      }
      var res = "";
      for (var j = 0; j < result.length; j++) {
        res = res + result[j];
      }
      return res;
    };
    Bidi2.prototype.getLogicalToVisualString = function(inputText, isRtl) {
      var rtlCharacters = new RtlCharacters();
      this.indexLevels = rtlCharacters.getVisualOrder(inputText, isRtl);
      this.setDefaultIndexLevel();
      this.doOrder(0, this.indexLevels.length - 1);
      var text = this.doMirrorShaping(inputText);
      var resultBuilder = "";
      for (var i = 0; i < this.indexes.length; i++) {
        var index = this.indexes[i];
        resultBuilder += text[index];
      }
      return resultBuilder.toString();
    };
    Bidi2.prototype.setDefaultIndexLevel = function() {
      for (var i = 0; i < this.indexLevels.length; i++) {
        this.indexes[i] = i;
      }
    };
    Bidi2.prototype.doOrder = function(sIndex, eIndex) {
      var max = this.indexLevels[sIndex];
      var min = max;
      var odd = max;
      var even = max;
      for (var i = sIndex + 1; i <= eIndex; ++i) {
        var data = this.indexLevels[i];
        if (data > max) {
          max = data;
        } else if (data < min) {
          min = data;
        }
        odd &= data;
        even |= data;
      }
      if ((even & 1) === 0) {
        return;
      }
      if ((odd & 1) === 1) {
        this.reArrange(sIndex, eIndex + 1);
        return;
      }
      min |= 1;
      while (max >= min) {
        var pstart = sIndex;
        while (true) {
          while (pstart <= eIndex) {
            if (this.indexLevels[pstart] >= max) {
              break;
            }
            pstart += 1;
          }
          if (pstart > eIndex) {
            break;
          }
          var pend = pstart + 1;
          while (pend <= eIndex) {
            if (this.indexLevels[pend] < max) {
              break;
            }
            pend += 1;
          }
          this.reArrange(pstart, pend);
          pstart = pend + 1;
        }
        max -= 1;
      }
    };
    Bidi2.prototype.reArrange = function(i, j) {
      var length = (i + j) / 2;
      --j;
      for (; i < length; ++i, --j) {
        var temp = this.indexes[i];
        this.indexes[i] = this.indexes[j];
        this.indexes[j] = temp;
      }
    };
    Bidi2.prototype.update = function() {
      this.mirroringShapeCharacters.setValue(40, 41);
      this.mirroringShapeCharacters.setValue(41, 40);
      this.mirroringShapeCharacters.setValue(60, 62);
      this.mirroringShapeCharacters.setValue(62, 60);
      this.mirroringShapeCharacters.setValue(91, 93);
      this.mirroringShapeCharacters.setValue(93, 91);
      this.mirroringShapeCharacters.setValue(123, 125);
      this.mirroringShapeCharacters.setValue(125, 123);
      this.mirroringShapeCharacters.setValue(171, 187);
      this.mirroringShapeCharacters.setValue(187, 171);
      this.mirroringShapeCharacters.setValue(8249, 8250);
      this.mirroringShapeCharacters.setValue(8250, 8249);
      this.mirroringShapeCharacters.setValue(8261, 8262);
      this.mirroringShapeCharacters.setValue(8262, 8261);
      this.mirroringShapeCharacters.setValue(8317, 8318);
      this.mirroringShapeCharacters.setValue(8318, 8317);
      this.mirroringShapeCharacters.setValue(8333, 8334);
      this.mirroringShapeCharacters.setValue(8334, 8333);
      this.mirroringShapeCharacters.setValue(8712, 8715);
      this.mirroringShapeCharacters.setValue(8713, 8716);
      this.mirroringShapeCharacters.setValue(8714, 8717);
      this.mirroringShapeCharacters.setValue(8715, 8712);
      this.mirroringShapeCharacters.setValue(8716, 8713);
      this.mirroringShapeCharacters.setValue(8717, 8714);
      this.mirroringShapeCharacters.setValue(8725, 10741);
      this.mirroringShapeCharacters.setValue(8764, 8765);
      this.mirroringShapeCharacters.setValue(8765, 8764);
      this.mirroringShapeCharacters.setValue(8771, 8909);
      this.mirroringShapeCharacters.setValue(8786, 8787);
      this.mirroringShapeCharacters.setValue(8787, 8786);
      this.mirroringShapeCharacters.setValue(8788, 8789);
      this.mirroringShapeCharacters.setValue(8789, 8788);
      this.mirroringShapeCharacters.setValue(8804, 8805);
      this.mirroringShapeCharacters.setValue(8805, 8804);
      this.mirroringShapeCharacters.setValue(8806, 8807);
      this.mirroringShapeCharacters.setValue(8807, 8806);
      this.mirroringShapeCharacters.setValue(8808, 8809);
      this.mirroringShapeCharacters.setValue(8809, 8808);
      this.mirroringShapeCharacters.setValue(8810, 8811);
      this.mirroringShapeCharacters.setValue(8811, 8810);
      this.mirroringShapeCharacters.setValue(8814, 8815);
      this.mirroringShapeCharacters.setValue(8815, 8814);
      this.mirroringShapeCharacters.setValue(8816, 8817);
      this.mirroringShapeCharacters.setValue(8817, 8816);
      this.mirroringShapeCharacters.setValue(8818, 8819);
      this.mirroringShapeCharacters.setValue(8819, 8818);
      this.mirroringShapeCharacters.setValue(8820, 8821);
      this.mirroringShapeCharacters.setValue(8821, 8820);
      this.mirroringShapeCharacters.setValue(8822, 8823);
      this.mirroringShapeCharacters.setValue(8823, 8822);
      this.mirroringShapeCharacters.setValue(8824, 8825);
      this.mirroringShapeCharacters.setValue(8825, 8824);
      this.mirroringShapeCharacters.setValue(8826, 8827);
      this.mirroringShapeCharacters.setValue(8827, 8826);
      this.mirroringShapeCharacters.setValue(8828, 8829);
      this.mirroringShapeCharacters.setValue(8829, 8828);
      this.mirroringShapeCharacters.setValue(8830, 8831);
      this.mirroringShapeCharacters.setValue(8831, 8830);
      this.mirroringShapeCharacters.setValue(8832, 8833);
      this.mirroringShapeCharacters.setValue(8833, 8832);
      this.mirroringShapeCharacters.setValue(8834, 8835);
      this.mirroringShapeCharacters.setValue(8835, 8834);
      this.mirroringShapeCharacters.setValue(8836, 8837);
      this.mirroringShapeCharacters.setValue(8837, 8836);
      this.mirroringShapeCharacters.setValue(8838, 8839);
      this.mirroringShapeCharacters.setValue(8839, 8838);
      this.mirroringShapeCharacters.setValue(8840, 8841);
      this.mirroringShapeCharacters.setValue(8841, 8840);
      this.mirroringShapeCharacters.setValue(8842, 8843);
      this.mirroringShapeCharacters.setValue(8843, 8842);
      this.mirroringShapeCharacters.setValue(8847, 8848);
      this.mirroringShapeCharacters.setValue(8848, 8847);
      this.mirroringShapeCharacters.setValue(8849, 8850);
      this.mirroringShapeCharacters.setValue(8850, 8849);
      this.mirroringShapeCharacters.setValue(8856, 10680);
      this.mirroringShapeCharacters.setValue(8866, 8867);
      this.mirroringShapeCharacters.setValue(8867, 8866);
      this.mirroringShapeCharacters.setValue(8870, 10974);
      this.mirroringShapeCharacters.setValue(8872, 10980);
      this.mirroringShapeCharacters.setValue(8873, 10979);
      this.mirroringShapeCharacters.setValue(8875, 10981);
      this.mirroringShapeCharacters.setValue(8880, 8881);
      this.mirroringShapeCharacters.setValue(8881, 8880);
      this.mirroringShapeCharacters.setValue(8882, 8883);
      this.mirroringShapeCharacters.setValue(8883, 8882);
      this.mirroringShapeCharacters.setValue(8884, 8885);
      this.mirroringShapeCharacters.setValue(8885, 8884);
      this.mirroringShapeCharacters.setValue(8886, 8887);
      this.mirroringShapeCharacters.setValue(8887, 8886);
      this.mirroringShapeCharacters.setValue(8905, 8906);
      this.mirroringShapeCharacters.setValue(8906, 8905);
      this.mirroringShapeCharacters.setValue(8907, 8908);
      this.mirroringShapeCharacters.setValue(8908, 8907);
      this.mirroringShapeCharacters.setValue(8909, 8771);
      this.mirroringShapeCharacters.setValue(8912, 8913);
      this.mirroringShapeCharacters.setValue(8913, 8912);
      this.mirroringShapeCharacters.setValue(8918, 8919);
      this.mirroringShapeCharacters.setValue(8919, 8918);
      this.mirroringShapeCharacters.setValue(8920, 8921);
      this.mirroringShapeCharacters.setValue(8921, 8920);
      this.mirroringShapeCharacters.setValue(8922, 8923);
      this.mirroringShapeCharacters.setValue(8923, 8922);
      this.mirroringShapeCharacters.setValue(8924, 8925);
      this.mirroringShapeCharacters.setValue(8925, 8924);
      this.mirroringShapeCharacters.setValue(8926, 8927);
      this.mirroringShapeCharacters.setValue(8927, 8926);
      this.mirroringShapeCharacters.setValue(8928, 8929);
      this.mirroringShapeCharacters.setValue(8929, 8928);
      this.mirroringShapeCharacters.setValue(8930, 8931);
      this.mirroringShapeCharacters.setValue(8931, 8930);
      this.mirroringShapeCharacters.setValue(8932, 8933);
      this.mirroringShapeCharacters.setValue(8933, 8932);
      this.mirroringShapeCharacters.setValue(8934, 8935);
      this.mirroringShapeCharacters.setValue(8935, 8934);
      this.mirroringShapeCharacters.setValue(8936, 8937);
      this.mirroringShapeCharacters.setValue(8937, 8936);
      this.mirroringShapeCharacters.setValue(8938, 8939);
      this.mirroringShapeCharacters.setValue(8939, 8938);
      this.mirroringShapeCharacters.setValue(8940, 8941);
      this.mirroringShapeCharacters.setValue(8941, 8940);
      this.mirroringShapeCharacters.setValue(8944, 8945);
      this.mirroringShapeCharacters.setValue(8945, 8944);
      this.mirroringShapeCharacters.setValue(8946, 8954);
      this.mirroringShapeCharacters.setValue(8947, 8955);
      this.mirroringShapeCharacters.setValue(8948, 8956);
      this.mirroringShapeCharacters.setValue(8950, 8957);
      this.mirroringShapeCharacters.setValue(8951, 8958);
      this.mirroringShapeCharacters.setValue(8954, 8946);
      this.mirroringShapeCharacters.setValue(8955, 8947);
      this.mirroringShapeCharacters.setValue(8956, 8948);
      this.mirroringShapeCharacters.setValue(8957, 8950);
      this.mirroringShapeCharacters.setValue(8958, 8951);
      this.mirroringShapeCharacters.setValue(8968, 8969);
      this.mirroringShapeCharacters.setValue(8969, 8968);
      this.mirroringShapeCharacters.setValue(8970, 8971);
      this.mirroringShapeCharacters.setValue(8971, 8970);
      this.mirroringShapeCharacters.setValue(9001, 9002);
      this.mirroringShapeCharacters.setValue(9002, 9001);
      this.mirroringShapeCharacters.setValue(10088, 10089);
      this.mirroringShapeCharacters.setValue(10089, 10088);
      this.mirroringShapeCharacters.setValue(10090, 10091);
      this.mirroringShapeCharacters.setValue(10091, 10090);
      this.mirroringShapeCharacters.setValue(10092, 10093);
      this.mirroringShapeCharacters.setValue(10093, 10092);
      this.mirroringShapeCharacters.setValue(10094, 10095);
      this.mirroringShapeCharacters.setValue(10095, 10094);
      this.mirroringShapeCharacters.setValue(10096, 10097);
      this.mirroringShapeCharacters.setValue(10097, 10096);
      this.mirroringShapeCharacters.setValue(10098, 10099);
      this.mirroringShapeCharacters.setValue(10099, 10098);
      this.mirroringShapeCharacters.setValue(10100, 10101);
      this.mirroringShapeCharacters.setValue(10101, 10100);
      this.mirroringShapeCharacters.setValue(10197, 10198);
      this.mirroringShapeCharacters.setValue(10198, 10197);
      this.mirroringShapeCharacters.setValue(10205, 10206);
      this.mirroringShapeCharacters.setValue(10206, 10205);
      this.mirroringShapeCharacters.setValue(10210, 10211);
      this.mirroringShapeCharacters.setValue(10211, 10210);
      this.mirroringShapeCharacters.setValue(10212, 10213);
      this.mirroringShapeCharacters.setValue(10213, 10212);
      this.mirroringShapeCharacters.setValue(10214, 10215);
      this.mirroringShapeCharacters.setValue(10215, 10214);
      this.mirroringShapeCharacters.setValue(10216, 10217);
      this.mirroringShapeCharacters.setValue(10217, 10216);
      this.mirroringShapeCharacters.setValue(10218, 10219);
      this.mirroringShapeCharacters.setValue(10219, 10218);
      this.mirroringShapeCharacters.setValue(10627, 10628);
      this.mirroringShapeCharacters.setValue(10628, 10627);
      this.mirroringShapeCharacters.setValue(10629, 10630);
      this.mirroringShapeCharacters.setValue(10630, 10629);
      this.mirroringShapeCharacters.setValue(10631, 10632);
      this.mirroringShapeCharacters.setValue(10632, 10631);
      this.mirroringShapeCharacters.setValue(10633, 10634);
      this.mirroringShapeCharacters.setValue(10634, 10633);
      this.mirroringShapeCharacters.setValue(10635, 10636);
      this.mirroringShapeCharacters.setValue(10636, 10635);
      this.mirroringShapeCharacters.setValue(10637, 10640);
      this.mirroringShapeCharacters.setValue(10638, 10639);
      this.mirroringShapeCharacters.setValue(10639, 10638);
      this.mirroringShapeCharacters.setValue(10640, 10637);
      this.mirroringShapeCharacters.setValue(10641, 10642);
      this.mirroringShapeCharacters.setValue(10642, 10641);
      this.mirroringShapeCharacters.setValue(10643, 10644);
      this.mirroringShapeCharacters.setValue(10644, 10643);
      this.mirroringShapeCharacters.setValue(10645, 10646);
      this.mirroringShapeCharacters.setValue(10646, 10645);
      this.mirroringShapeCharacters.setValue(10647, 10648);
      this.mirroringShapeCharacters.setValue(10648, 10647);
      this.mirroringShapeCharacters.setValue(10680, 8856);
      this.mirroringShapeCharacters.setValue(10688, 10689);
      this.mirroringShapeCharacters.setValue(10689, 10688);
      this.mirroringShapeCharacters.setValue(10692, 10693);
      this.mirroringShapeCharacters.setValue(10693, 10692);
      this.mirroringShapeCharacters.setValue(10703, 10704);
      this.mirroringShapeCharacters.setValue(10704, 10703);
      this.mirroringShapeCharacters.setValue(10705, 10706);
      this.mirroringShapeCharacters.setValue(10706, 10705);
      this.mirroringShapeCharacters.setValue(10708, 10709);
      this.mirroringShapeCharacters.setValue(10709, 10708);
      this.mirroringShapeCharacters.setValue(10712, 10713);
      this.mirroringShapeCharacters.setValue(10713, 10712);
      this.mirroringShapeCharacters.setValue(10714, 10715);
      this.mirroringShapeCharacters.setValue(10715, 10714);
      this.mirroringShapeCharacters.setValue(10741, 8725);
      this.mirroringShapeCharacters.setValue(10744, 10745);
      this.mirroringShapeCharacters.setValue(10745, 10744);
      this.mirroringShapeCharacters.setValue(10748, 10749);
      this.mirroringShapeCharacters.setValue(10749, 10748);
      this.mirroringShapeCharacters.setValue(10795, 10796);
      this.mirroringShapeCharacters.setValue(10796, 10795);
      this.mirroringShapeCharacters.setValue(10797, 10796);
      this.mirroringShapeCharacters.setValue(10798, 10797);
      this.mirroringShapeCharacters.setValue(10804, 10805);
      this.mirroringShapeCharacters.setValue(10805, 10804);
      this.mirroringShapeCharacters.setValue(10812, 10813);
      this.mirroringShapeCharacters.setValue(10813, 10812);
      this.mirroringShapeCharacters.setValue(10852, 10853);
      this.mirroringShapeCharacters.setValue(10853, 10852);
      this.mirroringShapeCharacters.setValue(10873, 10874);
      this.mirroringShapeCharacters.setValue(10874, 10873);
      this.mirroringShapeCharacters.setValue(10877, 10878);
      this.mirroringShapeCharacters.setValue(10878, 10877);
      this.mirroringShapeCharacters.setValue(10879, 10880);
      this.mirroringShapeCharacters.setValue(10880, 10879);
      this.mirroringShapeCharacters.setValue(10881, 10882);
      this.mirroringShapeCharacters.setValue(10882, 10881);
      this.mirroringShapeCharacters.setValue(10883, 10884);
      this.mirroringShapeCharacters.setValue(10884, 10883);
      this.mirroringShapeCharacters.setValue(10891, 10892);
      this.mirroringShapeCharacters.setValue(10892, 10891);
      this.mirroringShapeCharacters.setValue(10897, 10898);
      this.mirroringShapeCharacters.setValue(10898, 10897);
      this.mirroringShapeCharacters.setValue(10899, 10900);
      this.mirroringShapeCharacters.setValue(10900, 10899);
      this.mirroringShapeCharacters.setValue(10901, 10902);
      this.mirroringShapeCharacters.setValue(10902, 10901);
      this.mirroringShapeCharacters.setValue(10903, 10904);
      this.mirroringShapeCharacters.setValue(10904, 10903);
      this.mirroringShapeCharacters.setValue(10905, 10906);
      this.mirroringShapeCharacters.setValue(10906, 10905);
      this.mirroringShapeCharacters.setValue(10907, 10908);
      this.mirroringShapeCharacters.setValue(10908, 10907);
      this.mirroringShapeCharacters.setValue(10913, 10914);
      this.mirroringShapeCharacters.setValue(10914, 10913);
      this.mirroringShapeCharacters.setValue(10918, 10919);
      this.mirroringShapeCharacters.setValue(10919, 10918);
      this.mirroringShapeCharacters.setValue(10920, 10921);
      this.mirroringShapeCharacters.setValue(10921, 10920);
      this.mirroringShapeCharacters.setValue(10922, 10923);
      this.mirroringShapeCharacters.setValue(10923, 10922);
      this.mirroringShapeCharacters.setValue(10924, 10925);
      this.mirroringShapeCharacters.setValue(10925, 10924);
      this.mirroringShapeCharacters.setValue(10927, 10928);
      this.mirroringShapeCharacters.setValue(10928, 10927);
      this.mirroringShapeCharacters.setValue(10931, 10932);
      this.mirroringShapeCharacters.setValue(10932, 10931);
      this.mirroringShapeCharacters.setValue(10939, 10940);
      this.mirroringShapeCharacters.setValue(10940, 10939);
      this.mirroringShapeCharacters.setValue(10941, 10942);
      this.mirroringShapeCharacters.setValue(10942, 10941);
      this.mirroringShapeCharacters.setValue(10943, 10944);
      this.mirroringShapeCharacters.setValue(10944, 10943);
      this.mirroringShapeCharacters.setValue(10945, 10946);
      this.mirroringShapeCharacters.setValue(10946, 10945);
      this.mirroringShapeCharacters.setValue(10947, 10948);
      this.mirroringShapeCharacters.setValue(10948, 10947);
      this.mirroringShapeCharacters.setValue(10949, 10950);
      this.mirroringShapeCharacters.setValue(10950, 10949);
      this.mirroringShapeCharacters.setValue(10957, 10958);
      this.mirroringShapeCharacters.setValue(10958, 10957);
      this.mirroringShapeCharacters.setValue(10959, 10960);
      this.mirroringShapeCharacters.setValue(10960, 10959);
      this.mirroringShapeCharacters.setValue(10961, 10962);
      this.mirroringShapeCharacters.setValue(10962, 10961);
      this.mirroringShapeCharacters.setValue(10963, 10964);
      this.mirroringShapeCharacters.setValue(10964, 10963);
      this.mirroringShapeCharacters.setValue(10965, 10966);
      this.mirroringShapeCharacters.setValue(10966, 10965);
      this.mirroringShapeCharacters.setValue(10974, 8870);
      this.mirroringShapeCharacters.setValue(10979, 8873);
      this.mirroringShapeCharacters.setValue(10980, 8872);
      this.mirroringShapeCharacters.setValue(10981, 8875);
      this.mirroringShapeCharacters.setValue(10988, 10989);
      this.mirroringShapeCharacters.setValue(10989, 10988);
      this.mirroringShapeCharacters.setValue(10999, 11e3);
      this.mirroringShapeCharacters.setValue(11e3, 10999);
      this.mirroringShapeCharacters.setValue(11001, 11002);
      this.mirroringShapeCharacters.setValue(11002, 11001);
      this.mirroringShapeCharacters.setValue(12296, 12297);
      this.mirroringShapeCharacters.setValue(12297, 12296);
      this.mirroringShapeCharacters.setValue(12298, 12299);
      this.mirroringShapeCharacters.setValue(12299, 12298);
      this.mirroringShapeCharacters.setValue(12300, 12301);
      this.mirroringShapeCharacters.setValue(12301, 12300);
      this.mirroringShapeCharacters.setValue(12302, 12303);
      this.mirroringShapeCharacters.setValue(12303, 12302);
      this.mirroringShapeCharacters.setValue(12304, 12305);
      this.mirroringShapeCharacters.setValue(12305, 12304);
      this.mirroringShapeCharacters.setValue(12308, 12309);
      this.mirroringShapeCharacters.setValue(12309, 12308);
      this.mirroringShapeCharacters.setValue(12310, 12311);
      this.mirroringShapeCharacters.setValue(12311, 12310);
      this.mirroringShapeCharacters.setValue(12312, 12313);
      this.mirroringShapeCharacters.setValue(12313, 12312);
      this.mirroringShapeCharacters.setValue(12314, 12315);
      this.mirroringShapeCharacters.setValue(12315, 12314);
      this.mirroringShapeCharacters.setValue(65288, 65289);
      this.mirroringShapeCharacters.setValue(65289, 65288);
      this.mirroringShapeCharacters.setValue(65308, 65310);
      this.mirroringShapeCharacters.setValue(65310, 65308);
      this.mirroringShapeCharacters.setValue(65339, 65341);
      this.mirroringShapeCharacters.setValue(65341, 65339);
      this.mirroringShapeCharacters.setValue(65371, 65373);
      this.mirroringShapeCharacters.setValue(65373, 65371);
      this.mirroringShapeCharacters.setValue(65375, 65376);
      this.mirroringShapeCharacters.setValue(65376, 65375);
      this.mirroringShapeCharacters.setValue(65378, 65379);
      this.mirroringShapeCharacters.setValue(65379, 65378);
    };
    return Bidi2;
  }()
);
var RtlCharacters = (
  /** @class */
  function() {
    function RtlCharacters2() {
      this.types = [];
      this.textOrder = -1;
      this.rtlCharacterTypes = new Array(65536);
      this.L = 0;
      this.LRE = 1;
      this.LRO = 2;
      this.R = 3;
      this.AL = 4;
      this.RLE = 5;
      this.RLO = 6;
      this.PDF = 7;
      this.EN = 8;
      this.ES = 9;
      this.ET = 10;
      this.AN = 11;
      this.CS = 12;
      this.NSM = 13;
      this.BN = 14;
      this.B = 15;
      this.S = 16;
      this.WS = 17;
      this.ON = 18;
      this.charTypes = [this.L, this.EN, this.BN, this.ES, this.ES, this.S, this.ET, this.ET, this.B, this.AN, this.AN, this.S, this.CS, this.CS, this.WS, this.NSM, this.NSM, this.B, this.BN, 27, this.BN, 28, 30, this.B, 31, 31, this.S, 32, 32, this.WS, 33, 34, this.ON, 35, 37, this.ET, 38, 42, this.ON, 43, 43, this.ET, 44, 44, this.CS, 45, 45, this.ET, 46, 46, this.CS, 47, 47, this.CS, 48, 57, this.EN, 58, 58, this.CS, 59, 64, this.ON, 65, 90, this.L, 91, 96, this.ON, 97, 122, this.L, 123, 126, this.ON, 127, 132, this.BN, 133, 133, this.B, 134, 159, this.BN, 160, 160, this.CS, 161, 161, this.ON, 162, 165, this.ET, 166, 169, this.ON, 170, 170, this.L, 171, 175, this.ON, 176, 177, this.ET, 178, 179, this.EN, 180, 180, this.ON, 181, 181, this.L, 182, 184, this.ON, 185, 185, this.EN, 186, 186, this.L, 187, 191, this.ON, 192, 214, this.L, 215, 215, this.ON, 216, 246, this.L, 247, 247, this.ON, 248, 696, this.L, 697, 698, this.ON, 699, 705, this.L, 706, 719, this.ON, 720, 721, this.L, 722, 735, this.ON, 736, 740, this.L, 741, 749, this.ON, 750, 750, this.L, 751, 767, this.ON, 768, 855, this.NSM, 856, 860, this.L, 861, 879, this.NSM, 880, 883, this.L, 884, 885, this.ON, 886, 893, this.L, 894, 894, this.ON, 895, 899, this.L, 900, 901, this.ON, 902, 902, this.L, 903, 903, this.ON, 904, 1013, this.L, 1014, 1014, this.ON, 1015, 1154, this.L, 1155, 1158, this.NSM, 1159, 1159, this.L, 1160, 1161, this.NSM, 1162, 1417, this.L, 1418, 1418, this.ON, 1419, 1424, this.L, 1425, 1441, this.NSM, 1442, 1442, this.L, 1443, 1465, this.NSM, 1466, 1466, this.L, 1467, 1469, this.NSM, 1470, 1470, this.R, 1471, 1471, this.NSM, 1472, 1472, this.R, 1473, 1474, this.NSM, 1475, 1475, this.R, 1476, 1476, this.NSM, 1477, 1487, this.L, 1488, 1514, this.R, 1515, 1519, this.L, 1520, 1524, this.R, 1525, 1535, this.L, 1536, 1539, this.AL, 1540, 1547, this.L, 1548, 1548, this.CS, 1549, 1549, this.AL, 1550, 1551, this.ON, 1552, 1557, this.NSM, 1558, 1562, this.L, 1563, 1563, this.AL, 1564, 1566, this.L, 1567, 1567, this.AL, 1568, 1568, this.L, 1569, 1594, this.AL, 1595, 1599, this.L, 1600, 1610, this.AL, 1611, 1624, this.NSM, 1625, 1631, this.L, 1632, 1641, this.AN, 1642, 1642, this.ET, 1643, 1644, this.AN, 1645, 1647, this.AL, 1648, 1648, this.NSM, 1649, 1749, this.AL, 1750, 1756, this.NSM, 1757, 1757, this.AL, 1758, 1764, this.NSM, 1765, 1766, this.AL, 1767, 1768, this.NSM, 1769, 1769, this.ON, 1770, 1773, this.NSM, 1774, 1775, this.AL, 1776, 1785, this.EN, 1786, 1805, this.AL, 1806, 1806, this.L, 1807, 1807, this.BN, 1808, 1808, this.AL, 1809, 1809, this.NSM, 1810, 1839, this.AL, 1840, 1866, this.NSM, 1867, 1868, this.L, 1869, 1871, this.AL, 1872, 1919, this.L, 1920, 1957, this.AL, 1958, 1968, this.NSM, 1969, 1969, this.AL, 1970, 2304, this.L, 2305, 2306, this.NSM, 2307, 2363, this.L, 2364, 2364, this.NSM, 2365, 2368, this.L, 2369, 2376, this.NSM, 2377, 2380, this.L, 2381, 2381, this.NSM, 2382, 2384, this.L, 2385, 2388, this.NSM, 2389, 2401, this.L, 2402, 2403, this.NSM, 2404, 2432, this.L, 2433, 2433, this.NSM, 2434, 2491, this.L, 2492, 2492, this.NSM, 2493, 2496, this.L, 2497, 2500, this.NSM, 2501, 2508, this.L, 2509, 2509, this.NSM, 2510, 2529, this.L, 2530, 2531, this.NSM, 2532, 2545, this.L, 2546, 2547, this.ET, 2548, 2560, this.L, 2561, 2562, this.NSM, 2563, 2619, this.L, 2620, 2620, this.NSM, 2621, 2624, this.L, 2625, 2626, this.NSM, 2627, 2630, this.L, 2631, 2632, this.NSM, 2633, 2634, this.L, 2635, 2637, this.NSM, 2638, 2671, this.L, 2672, 2673, this.NSM, 2674, 2688, this.L, 2689, 2690, this.NSM, 2691, 2747, this.L, 2748, 2748, this.NSM, 2749, 2752, this.L, 2753, 2757, this.NSM, 2758, 2758, this.L, 2759, 2760, this.NSM, 2761, 2764, this.L, 2765, 2765, this.NSM, 2766, 2785, this.L, 2786, 2787, this.NSM, 2788, 2800, this.L, 2801, 2801, this.ET, 2802, 2816, this.L, 2817, 2817, this.NSM, 2818, 2875, this.L, 2876, 2876, this.NSM, 2877, 2878, this.L, 2879, 2879, this.NSM, 2880, 2880, this.L, 2881, 2883, this.NSM, 2884, 2892, this.L, 2893, 2893, this.NSM, 2894, 2901, this.L, 2902, 2902, this.NSM, 2903, 2945, this.L, 2946, 2946, this.NSM, 2947, 3007, this.L, 3008, 3008, this.NSM, 3009, 3020, this.L, 3021, 3021, this.NSM, 3022, 3058, this.L, 3059, 3064, this.ON, 3065, 3065, this.ET, 3066, 3066, this.ON, 3067, 3133, this.L, 3134, 3136, this.NSM, 3137, 3141, this.L, 3142, 3144, this.NSM, 3145, 3145, this.L, 3146, 3149, this.NSM, 3150, 3156, this.L, 3157, 3158, this.NSM, 3159, 3259, this.L, 3260, 3260, this.NSM, 3261, 3275, this.L, 3276, 3277, this.NSM, 3278, 3392, this.L, 3393, 3395, this.NSM, 3396, 3404, this.L, 3405, 3405, this.NSM, 3406, 3529, this.L, 3530, 3530, this.NSM, 3531, 3537, this.L, 3538, 3540, this.NSM, 3541, 3541, this.L, 3542, 3542, this.NSM, 3543, 3632, this.L, 3633, 3633, this.NSM, 3634, 3635, this.L, 3636, 3642, this.NSM, 3643, 3646, this.L, 3647, 3647, this.ET, 3648, 3654, this.L, 3655, 3662, this.NSM, 3663, 3760, this.L, 3761, 3761, this.NSM, 3762, 3763, this.L, 3764, 3769, this.NSM, 3770, 3770, this.L, 3771, 3772, this.NSM, 3773, 3783, this.L, 3784, 3789, this.NSM, 3790, 3863, this.L, 3864, 3865, this.NSM, 3866, 3892, this.L, 3893, 3893, this.NSM, 3894, 3894, this.L, 3895, 3895, this.NSM, 3896, 3896, this.L, 3897, 3897, this.NSM, 3898, 3901, this.ON, 3902, 3952, this.L, 3953, 3966, this.NSM, 3967, 3967, this.L, 3968, 3972, this.NSM, 3973, 3973, this.L, 3974, 3975, this.NSM, 3976, 3983, this.L, 3984, 3991, this.NSM, 3992, 3992, this.L, 3993, 4028, this.NSM, 4029, 4037, this.L, 4038, 4038, this.NSM, 4039, 4140, this.L, 4141, 4144, this.NSM, 4145, 4145, this.L, 4146, 4146, this.NSM, 4147, 4149, this.L, 4150, 4151, this.NSM, 4152, 4152, this.L, 4153, 4153, this.NSM, 4154, 4183, this.L, 4184, 4185, this.NSM, 4186, 5759, this.L, 5760, 5760, this.WS, 5761, 5786, this.L, 5787, 5788, this.ON, 5789, 5905, this.L, 5906, 5908, this.NSM, 5909, 5937, this.L, 5938, 5940, this.NSM, 5941, 5969, this.L, 5970, 5971, this.NSM, 5972, 6001, this.L, 6002, 6003, this.NSM, 6004, 6070, this.L, 6071, 6077, this.NSM, 6078, 6085, this.L, 6086, 6086, this.NSM, 6087, 6088, this.L, 6089, 6099, this.NSM, 6100, 6106, this.L, 6107, 6107, this.ET, 6108, 6108, this.L, 6109, 6109, this.NSM, 6110, 6127, this.L, 6128, 6137, this.ON, 6138, 6143, this.L, 6144, 6154, this.ON, 6155, 6157, this.NSM, 6158, 6158, this.WS, 6159, 6312, this.L, 6313, 6313, this.NSM, 6314, 6431, this.L, 6432, 6434, this.NSM, 6435, 6438, this.L, 6439, 6443, this.NSM, 6444, 6449, this.L, 6450, 6450, this.NSM, 6451, 6456, this.L, 6457, 6459, this.NSM, 6460, 6463, this.L, 6464, 6464, this.ON, 6465, 6467, this.L, 6468, 6469, this.ON, 6470, 6623, this.L, 6624, 6655, this.ON, 6656, 8124, this.L, 8125, 8125, this.ON, 8126, 8126, this.L, 8127, 8129, this.ON, 8130, 8140, this.L, 8141, 8143, this.ON, 8144, 8156, this.L, 8157, 8159, this.ON, 8160, 8172, this.L, 8173, 8175, this.ON, 8176, 8188, this.L, 8189, 8190, this.ON, 8191, 8191, this.L, 8192, 8202, this.WS, 8203, 8205, this.BN, 8206, 8206, this.L, 8207, 8207, this.R, 8208, 8231, this.ON, 8232, 8232, this.WS, 8233, 8233, this.B, 8234, 8234, this.LRE, 8235, 8235, this.RLE, 8236, 8236, this.PDF, 8237, 8237, this.LRO, 8238, 8238, this.RLO, 8239, 8239, this.WS, 8240, 8244, this.ET, 8245, 8276, this.ON, 8277, 8278, this.L, 8279, 8279, this.ON, 8280, 8286, this.L, 8287, 8287, this.WS, 8288, 8291, this.BN, 8292, 8297, this.L, 8298, 8303, this.BN, 8304, 8304, this.EN, 8305, 8307, this.L, 8308, 8313, this.EN, 8314, 8315, this.ET, 8316, 8318, this.ON, 8319, 8319, this.L, 8320, 8329, this.EN, 8330, 8331, this.ET, 8332, 8334, this.ON, 8335, 8351, this.L, 8352, 8369, this.ET, 8370, 8399, this.L, 8400, 8426, this.NSM, 8427, 8447, this.L, 8448, 8449, this.ON, 8450, 8450, this.L, 8451, 8454, this.ON, 8455, 8455, this.L, 8456, 8457, this.ON, 8458, 8467, this.L, 8468, 8468, this.ON, 8469, 8469, this.L, 8470, 8472, this.ON, 8473, 8477, this.L, 8478, 8483, this.ON, 8484, 8484, this.L, 8485, 8485, this.ON, 8486, 8486, this.L, 8487, 8487, this.ON, 8488, 8488, this.L, 8489, 8489, this.ON, 8490, 8493, this.L, 8494, 8494, this.ET, 8495, 8497, this.L, 8498, 8498, this.ON, 8499, 8505, this.L, 8506, 8507, this.ON, 8508, 8511, this.L, 8512, 8516, this.ON, 8517, 8521, this.L, 8522, 8523, this.ON, 8524, 8530, this.L, 8531, 8543, this.ON, 8544, 8591, this.L, 8592, 8721, this.ON, 8722, 8723, this.ET, 8724, 9013, this.ON, 9014, 9082, this.L, 9083, 9108, this.ON, 9109, 9109, this.L, 9110, 9168, this.ON, 9169, 9215, this.L, 9216, 9254, this.ON, 9255, 9279, this.L, 9280, 9290, this.ON, 9291, 9311, this.L, 9312, 9371, this.EN, 9372, 9449, this.L, 9450, 9450, this.EN, 9451, 9751, this.ON, 9752, 9752, this.L, 9753, 9853, this.ON, 9854, 9855, this.L, 9856, 9873, this.ON, 9874, 9887, this.L, 9888, 9889, this.ON, 9890, 9984, this.L, 9985, 9988, this.ON, 9989, 9989, this.L, 9990, 9993, this.ON, 9994, 9995, this.L, 9996, 10023, this.ON, 10024, 10024, this.L, 10025, 10059, this.ON, 10060, 10060, this.L, 10061, 10061, this.ON, 10062, 10062, this.L, 10063, 10066, this.ON, 10067, 10069, this.L, 10070, 10070, this.ON, 10071, 10071, this.L, 10072, 10078, this.ON, 10079, 10080, this.L, 10081, 10132, this.ON, 10133, 10135, this.L, 10136, 10159, this.ON, 10160, 10160, this.L, 10161, 10174, this.ON, 10175, 10191, this.L, 10192, 10219, this.ON, 10220, 10223, this.L, 10224, 11021, this.ON, 11022, 11903, this.L, 11904, 11929, this.ON, 11930, 11930, this.L, 11931, 12019, this.ON, 12020, 12031, this.L, 12032, 12245, this.ON, 12246, 12271, this.L, 12272, 12283, this.ON, 12284, 12287, this.L, 12288, 12288, this.WS, 12289, 12292, this.ON, 12293, 12295, this.L, 12296, 12320, this.ON, 12321, 12329, this.L, 12330, 12335, this.NSM, 12336, 12336, this.ON, 12337, 12341, this.L, 12342, 12343, this.ON, 12344, 12348, this.L, 12349, 12351, this.ON, 12352, 12440, this.L, 12441, 12442, this.NSM, 12443, 12444, this.ON, 12445, 12447, this.L, 12448, 12448, this.ON, 12449, 12538, this.L, 12539, 12539, this.ON, 12540, 12828, this.L, 12829, 12830, this.ON, 12831, 12879, this.L, 12880, 12895, this.ON, 12896, 12923, this.L, 12924, 12925, this.ON, 12926, 12976, this.L, 12977, 12991, this.ON, 12992, 13003, this.L, 13004, 13007, this.ON, 13008, 13174, this.L, 13175, 13178, this.ON, 13179, 13277, this.L, 13278, 13279, this.ON, 13280, 13310, this.L, 13311, 13311, this.ON, 13312, 19903, this.L, 19904, 19967, this.ON, 19968, 42127, this.L, 42128, 42182, this.ON, 42183, 64284, this.L, 64285, 64285, this.R, 64286, 64286, this.NSM, 64287, 64296, this.R, 64297, 64297, this.ET, 64298, 64310, this.R, 64311, 64311, this.L, 64312, 64316, this.R, 64317, 64317, this.L, 64318, 64318, this.R, 64319, 64319, this.L, 64320, 64321, this.R, 64322, 64322, this.L, 64323, 64324, this.R, 64325, 64325, this.L, 64326, 64335, this.R, 64336, 64433, this.AL, 64434, 64466, this.L, 64467, 64829, this.AL, 64830, 64831, this.ON, 64832, 64847, this.L, 64848, 64911, this.AL, 64912, 64913, this.L, 64914, 64967, this.AL, 64968, 65007, this.L, 65008, 65020, this.AL, 65021, 65021, this.ON, 65022, 65023, this.L, 65024, 65039, this.NSM, 65040, 65055, this.L, 65056, 65059, this.NSM, 65060, 65071, this.L, 65072, 65103, this.ON, 65104, 65104, this.CS, 65105, 65105, this.ON, 65106, 65106, this.CS, 65107, 65107, this.L, 65108, 65108, this.ON, 65109, 65109, this.CS, 65110, 65118, this.ON, 65119, 65119, this.ET, 65120, 65121, this.ON, 65122, 65123, this.ET, 65124, 65126, this.ON, 65127, 65127, this.L, 65128, 65128, this.ON, 65129, 65130, this.ET, 65131, 65131, this.ON, 65132, 65135, this.L, 65136, 65140, this.AL, 65141, 65141, this.L, 65142, 65276, this.AL, 65277, 65278, this.L, 65279, 65279, this.BN, 65280, 65280, this.L, 65281, 65282, this.ON, 65283, 65285, this.ET, 65286, 65290, this.ON, 65291, 65291, this.ET, 65292, 65292, this.CS, 65293, 65293, this.ET, 65294, 65294, this.CS, 65295, 65295, this.ES, 65296, 65305, this.EN, 65306, 65306, this.CS, 65307, 65312, this.ON, 65313, 65338, this.L, 65339, 65344, this.ON, 65345, 65370, this.L, 65371, 65381, this.ON, 65382, 65503, this.L, 65504, 65505, this.ET, 65506, 65508, this.ON, 65509, 65510, this.ET, 65511, 65511, this.L, 65512, 65518, this.ON, 65519, 65528, this.L, 65529, 65531, this.BN, 65532, 65533, this.ON, 65534, 65535, this.L];
      for (var i = 0; i < this.charTypes.length; ++i) {
        var start = this.charTypes[i];
        var end = this.charTypes[++i];
        var b = this.charTypes[++i];
        while (start <= end) {
          this.rtlCharacterTypes[start++] = b;
        }
      }
    }
    RtlCharacters2.prototype.getVisualOrder = function(inputText, isRtl) {
      this.types = this.getCharacterCode(inputText);
      this.textOrder = isRtl ? this.LRE : this.L;
      this.doVisualOrder();
      var result = [];
      for (var i = 0; i < this.levels.length; i++) {
        result[i] = this.levels[i];
      }
      return result;
    };
    RtlCharacters2.prototype.getCharacterCode = function(text) {
      var characterCodes = [];
      for (var i = 0; i < text.length; i++) {
        characterCodes[i] = this.rtlCharacterTypes[text[i].charCodeAt(0)];
      }
      return characterCodes;
    };
    RtlCharacters2.prototype.setDefaultLevels = function() {
      for (var i = 0; i < this.length; i++) {
        this.levels[i] = this.textOrder;
      }
    };
    RtlCharacters2.prototype.setLevels = function() {
      this.setDefaultLevels();
      for (var n = 0; n < this.length; ++n) {
        var level = this.levels[n];
        if ((level & 128) !== 0) {
          level &= 127;
          this.result[n] = (level & 1) === 0 ? this.L : this.R;
        }
        this.levels[n] = level;
      }
    };
    RtlCharacters2.prototype.updateLevels = function(index, level, length) {
      if ((level & 1) === 0) {
        for (var i = index; i < length; ++i) {
          if (this.result[i] === this.R) {
            this.levels[i] += 1;
          } else if (this.result[i] !== this.L) {
            this.levels[i] += 2;
          }
        }
      } else {
        for (var i = index; i < length; ++i) {
          if (this.result[i] !== this.R) {
            this.levels[i] += 1;
          }
        }
      }
    };
    RtlCharacters2.prototype.doVisualOrder = function() {
      this.length = this.types.length;
      this.result = this.types;
      this.levels = [];
      this.setLevels();
      this.length = this.getEmbeddedCharactersLength();
      var preview = this.textOrder;
      var i = 0;
      while (i < this.length) {
        var level = this.levels[i];
        var preType = (Math.max(preview, level) & 1) === 0 ? this.L : this.R;
        var length_1 = i + 1;
        while (length_1 < this.length && this.levels[length_1] === level) {
          ++length_1;
        }
        var success = length_1 < this.length ? this.levels[length_1] : this.textOrder;
        var type = (Math.max(success, level) & 1) === 0 ? this.L : this.R;
        this.checkNSM(i, length_1, level, preType, type);
        this.updateLevels(i, level, length_1);
        preview = level;
        i = length_1;
      }
      this.checkEmbeddedCharacters(this.length);
    };
    RtlCharacters2.prototype.getEmbeddedCharactersLength = function() {
      var index = 0;
      for (var i = 0; i < this.length; ++i) {
        if (!(this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO || this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN)) {
          this.result[index] = this.result[i];
          this.levels[index] = this.levels[i];
          index++;
        }
      }
      return index;
    };
    RtlCharacters2.prototype.checkEmbeddedCharacters = function(length) {
      for (var i = this.types.length - 1; i >= 0; --i) {
        if (this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO || this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN) {
          this.result[i] = this.types[i];
          this.levels[i] = -1;
        } else {
          length -= 1;
          this.result[i] = this.result[length];
          this.levels[i] = this.levels[length];
        }
      }
      for (var i = 0; i < this.types.length; i++) {
        if (this.levels[i] === -1) {
          if (i === 0) {
            this.levels[i] = this.textOrder;
          } else {
            this.levels[i] = this.levels[i - 1];
          }
        }
      }
    };
    RtlCharacters2.prototype.checkNSM = function(index, length, level, startType, endType) {
      var charType = startType;
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.NSM) {
          this.result[i] = charType;
        } else {
          charType = this.result[i];
        }
      }
      this.checkEuropeanDigits(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkEuropeanDigits = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.EN) {
          for (var j = i - 1; j >= index; --j) {
            if (this.result[j] === this.L || this.result[j] === this.R || this.result[j] === this.AL) {
              if (this.result[j] === this.AL) {
                this.result[i] = this.AN;
              }
              break;
            }
          }
        }
      }
      this.checkArabicCharacters(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkArabicCharacters = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.AL) {
          this.result[i] = this.R;
        }
      }
      this.checkEuropeanNumberSeparator(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkEuropeanNumberSeparator = function(index, length, level, startType, endType) {
      for (var i = index + 1; i < length - 1; ++i) {
        if (this.result[i] === this.ES || this.result[i] === this.CS) {
          var preview = this.result[i - 1];
          var success = this.result[i + 1];
          if (preview === this.EN && success === this.EN) {
            this.result[i] = this.EN;
          } else if (this.result[i] === this.CS && preview === this.AN && success === this.AN) {
            this.result[i] = this.AN;
          }
        }
      }
      this.checkEuropeanNumberTerminator(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkEuropeanNumberTerminator = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.ET) {
          var s = i;
          var b = [];
          b.push(this.ET);
          var l = this.getLength(s, length, b);
          var data = s === index ? startType : this.result[s - 1];
          if (data !== this.EN) {
            data = l === length ? endType : this.result[l];
          }
          if (data === this.EN) {
            for (var j = s; j < l; ++j) {
              this.result[j] = this.EN;
            }
          }
          i = l;
        }
      }
      this.checkOtherNeutrals(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkOtherNeutrals = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.ES || this.result[i] === this.ET || this.result[i] === this.CS) {
          this.result[i] = this.ON;
        }
      }
      this.checkOtherCharacters(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.checkOtherCharacters = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.EN) {
          var pst = startType;
          for (var j = i - 1; j >= index; --j) {
            if (this.result[j] === this.L || this.result[j] === this.R) {
              pst = this.result[j];
              break;
            }
          }
          if (pst === this.L) {
            this.result[i] = this.L;
          }
        }
      }
      this.checkCommanCharacters(index, length, level, startType, endType);
    };
    RtlCharacters2.prototype.getLength = function(index, length, validSet) {
      --index;
      while (++index < length) {
        var t = this.result[index];
        for (var i = 0; i < validSet.length; ++i) {
          if (t === validSet[i]) {
            index = this.getLength(++index, length, validSet);
          }
        }
        return index;
      }
      return length;
    };
    RtlCharacters2.prototype.checkCommanCharacters = function(index, length, level, startType, endType) {
      for (var i = index; i < length; ++i) {
        if (this.result[i] === this.WS || this.result[i] === this.ON || this.result[i] === this.B || this.result[i] === this.S) {
          var s = i;
          var byte = [this.B, this.S, this.WS, this.ON];
          var l = this.getLength(s, length, byte);
          var lt = 0;
          var tt = 0;
          var rt = 0;
          if (s === index) {
            lt = startType;
          } else {
            lt = this.result[s - 1];
            if (lt === this.AN) {
              lt = this.R;
            } else if (lt === this.EN) {
              lt = this.R;
            }
          }
          if (l === length) {
            tt = endType;
          } else {
            tt = this.result[l];
            if (tt === this.AN) {
              tt = this.R;
            } else if (tt === this.EN) {
              tt = this.R;
            }
          }
          if (lt === tt) {
            rt = lt;
          } else {
            rt = (level & 1) === 0 ? this.L : this.R;
          }
          for (var j = s; j < l; ++j) {
            this.result[j] = rt;
          }
          i = l;
        }
      }
    };
    return RtlCharacters2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl-renderer.js
var RtlRenderer = (
  /** @class */
  function() {
    function RtlRenderer2() {
      this.openBracket = "(";
      this.closeBracket = ")";
    }
    RtlRenderer2.prototype.layout = function(line, font, rtl, wordSpace, format) {
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      var result = [];
      if (font.Unicode) {
        result = this.customLayout(line, rtl, format, font, wordSpace);
      } else {
        result = [];
        result[0] = line;
      }
      return result;
    };
    RtlRenderer2.prototype.splitLayout = function(line, font, rtl, wordSpace, format) {
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      var words = [];
      var system = false;
      if (!system || words == null) {
        words = this.customSplitLayout(line, font, rtl, wordSpace, format);
      }
      return words;
    };
    RtlRenderer2.prototype.getGlyphIndex = function(line, font, rtl, glyphs, custom) {
      var success = true;
      var fail = false;
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      glyphs = null;
      if (line.length === 0) {
        return {
          success: fail,
          glyphs
        };
      }
      var renderer = new ArabicShapeRenderer();
      var text = renderer.shape(line, 0);
      var internalFont = font.fontInternal;
      var ttfReader = internalFont.ttfReader;
      glyphs = new Uint16Array(text.length);
      var i = 0;
      for (var k = 0, len = text.length; k < len; k++) {
        var ch = text[k];
        var glyphInfo = ttfReader.getGlyph(ch);
        if (glyphInfo !== null && typeof glyphInfo !== "undefined") {
          glyphs[i++] = glyphInfo.index;
        }
      }
      return {
        success,
        glyphs
      };
    };
    RtlRenderer2.prototype.customLayout = function(line, rtl, format, font, wordSpace) {
      if (wordSpace === null || typeof wordSpace === "undefined") {
        if (line == null) {
          throw new Error("ArgumentNullException : line");
        }
        var result = null;
        if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
          var bidi = new Bidi();
          result = bidi.getLogicalToVisualString(line, rtl);
        }
        return result;
      } else {
        if (line == null) {
          throw new Error("ArgumentNullException : line");
        }
        if (font == null) {
          throw new Error("ArgumentNullException : font");
        }
        var layouted = null;
        if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
          var renderer = new ArabicShapeRenderer();
          var txt = renderer.shape(line, 0);
          layouted = this.customLayout(txt, rtl, format);
        }
        var result = [];
        if (wordSpace) {
          var words = layouted.split("");
          var count2 = words.length;
          for (var i = 0; i < count2; i++) {
            words[i] = this.addChars(font, words[i]);
          }
          result = words;
        } else {
          result = [];
          result[0] = this.addChars(font, layouted);
        }
        return result;
      }
    };
    RtlRenderer2.prototype.addChars = function(font, glyphs) {
      var line = glyphs;
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      var text = line;
      var internalFont = font.fontInternal;
      var ttfReader = internalFont.ttfReader;
      font.setSymbols(text);
      text = ttfReader.convertString(text);
      var bytes = PdfString.toUnicodeArray(text, false);
      text = PdfString.byteToString(bytes);
      return text;
    };
    RtlRenderer2.prototype.customSplitLayout = function(line, font, rtl, wordSpace, format) {
      if (line == null) {
        throw new Error("ArgumentNullException : line");
      }
      if (font == null) {
        throw new Error("ArgumentNullException : font");
      }
      var reversedLine = this.customLayout(line, rtl, format);
      var words = reversedLine.split("");
      return words;
    };
    return RtlRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/enum.js
var PdfLayoutType;
(function(PdfLayoutType2) {
  PdfLayoutType2[PdfLayoutType2["Paginate"] = 0] = "Paginate";
  PdfLayoutType2[PdfLayoutType2["OnePage"] = 1] = "OnePage";
})(PdfLayoutType || (PdfLayoutType = {}));
var PdfLayoutBreakType;
(function(PdfLayoutBreakType2) {
  PdfLayoutBreakType2[PdfLayoutBreakType2["FitPage"] = 0] = "FitPage";
  PdfLayoutBreakType2[PdfLayoutBreakType2["FitElement"] = 1] = "FitElement";
  PdfLayoutBreakType2[PdfLayoutBreakType2["FitColumnsToPage"] = 2] = "FitColumnsToPage";
})(PdfLayoutBreakType || (PdfLayoutBreakType = {}));
var PathPointType;
(function(PathPointType2) {
  PathPointType2[PathPointType2["Start"] = 0] = "Start";
  PathPointType2[PathPointType2["Line"] = 1] = "Line";
  PathPointType2[PathPointType2["Bezier3"] = 3] = "Bezier3";
  PathPointType2[PathPointType2["Bezier"] = 3] = "Bezier";
  PathPointType2[PathPointType2["PathTypeMask"] = 7] = "PathTypeMask";
  PathPointType2[PathPointType2["DashMode"] = 16] = "DashMode";
  PathPointType2[PathPointType2["PathMarker"] = 32] = "PathMarker";
  PathPointType2[PathPointType2["CloseSubpath"] = 128] = "CloseSubpath";
})(PathPointType || (PathPointType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-gradient-brush.js
var __extends48 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGradientBrush = (
  /** @class */
  function(_super) {
    __extends48(PdfGradientBrush2, _super);
    function PdfGradientBrush2(shading) {
      var _this = _super.call(this) || this;
      _this.mbackground = new PdfColor(255, 255, 255);
      _this.mbStroking = false;
      _this.mfunction = null;
      _this.dictionaryProperties = new DictionaryProperties();
      _this.mpatternDictionary = new PdfDictionary();
      _this.mpatternDictionary.items.setValue(_this.dictionaryProperties.type, new PdfName(_this.dictionaryProperties.pattern));
      _this.mpatternDictionary.items.setValue(_this.dictionaryProperties.patternType, new PdfNumber(2));
      _this.shading = shading;
      _this.colorSpace = PdfColorSpace.Rgb;
      return _this;
    }
    Object.defineProperty(PdfGradientBrush2.prototype, "background", {
      //Properties
      /**
       * Gets or sets the background color of the brush.
       * @public
       */
      get: function() {
        return this.mbackground;
      },
      set: function(value) {
        this.mbackground = value;
        var sh = this.shading;
        if (value.isEmpty) {
          sh.remove(this.dictionaryProperties.background);
        } else {
          sh.items.setValue(this.dictionaryProperties.background, value.toArray(this.colorSpace));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "antiAlias", {
      /**
       * Gets or sets a value indicating whether use anti aliasing algorithm.
       * @public
       */
      get: function() {
        var sh = this.shading;
        var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);
        return aa.value;
      },
      set: function(value) {
        var sh = this.shading;
        var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);
        if (aa == null && typeof aa === "undefined") {
          aa = new PdfBoolean(value);
          sh.items.setValue(this.dictionaryProperties.antiAlias, aa);
        } else {
          aa.value = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "function", {
      /**
       * Gets or sets the function of the brush.
       * @protected
       */
      get: function() {
        return this.mfunction;
      },
      set: function(value) {
        this.mfunction = value;
        if (value != null && typeof value !== "undefined") {
          this.shading.items.setValue(this.dictionaryProperties.function, new PdfReferenceHolder(this.mfunction));
        } else {
          this.shading.remove(this.dictionaryProperties.function);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "bBox", {
      /**
       * Gets or sets the boundary box of the brush.
       * @protected
       */
      get: function() {
        var sh = this.shading;
        var box = sh.items.getValue(this.dictionaryProperties.bBox);
        return box;
      },
      set: function(value) {
        var sh = this.shading;
        if (value == null && typeof value === "undefined") {
          sh.remove(this.dictionaryProperties.bBox);
        } else {
          sh.items.setValue(this.dictionaryProperties.bBox, value);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "colorSpace", {
      /**
       * Gets or sets the color space of the brush.
       * @public
       */
      get: function() {
        return this.mcolorSpace;
      },
      set: function(value) {
        var colorSpace = this.shading.items.getValue(this.dictionaryProperties.colorSpace);
        if (value !== this.mcolorSpace || colorSpace == null) {
          this.mcolorSpace = value;
          var csValue = this.colorSpaceToDeviceName(value);
          this.shading.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(csValue));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "stroking", {
      /**
       * Gets or sets a value indicating whether this PdfGradientBrush is stroking.
       * @public
       */
      get: function() {
        return this.mbStroking;
      },
      set: function(value) {
        this.mbStroking = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "patternDictionary", {
      /**
       * Gets the pattern dictionary.
       * @protected
       */
      get: function() {
        if (this.mpatternDictionary == null) {
          this.mpatternDictionary = new PdfDictionary();
        }
        return this.mpatternDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "shading", {
      /**
       * Gets or sets the shading dictionary.
       * @protected
       */
      get: function() {
        return this.mshading;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Shading");
        }
        if (value !== this.mshading) {
          this.mshading = value;
          this.patternDictionary.items.setValue(this.dictionaryProperties.shading, new PdfReferenceHolder(this.mshading));
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGradientBrush2.prototype, "matrix", {
      /**
       * Gets or sets the transformation matrix.
       * @public
       */
      get: function() {
        return this.mmatrix;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Matrix");
        }
        if (value !== this.mmatrix) {
          this.mmatrix = value.clone();
          var m = new PdfArray(this.mmatrix.matrix.elements);
          this.mpatternDictionary.items.setValue(this.dictionaryProperties.matrix, m);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfGradientBrush2.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
      var diff = false;
      if (brush instanceof PdfGradientBrush2) {
        if (this.colorSpace !== currentColorSpace) {
          this.colorSpace = currentColorSpace;
          this.resetFunction();
        }
        streamWriter.setColorSpace("Pattern", this.mbStroking);
        var resources = getResources.getResources();
        var name_1 = resources.getName(this);
        streamWriter.setColourWithPattern(null, name_1, this.mbStroking);
        diff = true;
      }
      return diff;
    };
    PdfGradientBrush2.prototype.resetChanges = function(streamWriter) {
    };
    PdfGradientBrush2.prototype.colorSpaceToDeviceName = function(colorSpace) {
      var result;
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          result = "DeviceRGB";
          break;
      }
      return result;
    };
    PdfGradientBrush2.prototype.resetPatternDictionary = function(dictionary) {
      this.mpatternDictionary = dictionary;
    };
    PdfGradientBrush2.prototype.cloneAntiAliasingValue = function(brush) {
      if (brush == null) {
        throw new Error("ArgumentNullException : brush");
      }
      var sh = this.shading;
      var aa = sh.items.getValue(this.dictionaryProperties.antiAlias);
      if (aa != null) {
        brush.shading.items.setValue(this.dictionaryProperties.antiAlias, new PdfBoolean(aa.value));
      }
    };
    PdfGradientBrush2.prototype.cloneBackgroundValue = function(brush) {
      var background = this.background;
      if (!background.isEmpty) {
        brush.background = background;
      }
    };
    Object.defineProperty(PdfGradientBrush2.prototype, "element", {
      /* tslint:enable */
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.patternDictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGradientBrush2;
  }(PdfBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/pdf-template.js
var PdfTemplate = (
  /** @class */
  function() {
    function PdfTemplate2(arg1, arg2) {
      this.dictionaryProperties = new DictionaryProperties();
      this.writeTransformation = true;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof SizeF && typeof arg2 === "undefined") {
        this.content = new PdfStream();
        var tempSize = new SizeF(arg1.width, arg1.height);
        this.setSize(tempSize);
        this.initialize();
      } else {
        this.content = new PdfStream();
        this.setSize(new SizeF(arg1, arg2));
        this.initialize();
      }
    }
    Object.defineProperty(PdfTemplate2.prototype, "size", {
      //Properties
      /**
       * Gets the size of the 'PdfTemplate'.
       */
      get: function() {
        return this.templateSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplate2.prototype, "width", {
      /**
       * Gets the width of the 'PdfTemplate'.
       */
      get: function() {
        return this.size.width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplate2.prototype, "height", {
      /**
       * Gets the height of the 'PdfTemplate'.
       */
      get: function() {
        return this.size.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplate2.prototype, "graphics", {
      /**
       * Gets the `graphics` of the 'PdfTemplate'.
       */
      get: function() {
        if (this.pdfGraphics == null || typeof this.pdfGraphics === "undefined") {
          var gr = new GetResourceEventHandler(this);
          var g = new PdfGraphics(this.size, gr, this.content);
          this.pdfGraphics = g;
          this.pdfGraphics.initializeCoordinates();
        }
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    PdfTemplate2.prototype.getResources = function() {
      if (this.resources == null) {
        this.resources = new PdfResources();
        this.content.items.setValue(this.dictionaryProperties.resources, this.resources);
      }
      return this.resources;
    };
    PdfTemplate2.prototype.initialize = function() {
      this.addType();
      this.addSubType();
    };
    PdfTemplate2.prototype.addType = function() {
      var value = new PdfName(this.dictionaryProperties.xObject);
      this.content.items.setValue(this.dictionaryProperties.type, value);
    };
    PdfTemplate2.prototype.addSubType = function() {
      var value = new PdfName(this.dictionaryProperties.form);
      this.content.items.setValue(this.dictionaryProperties.subtype, value);
    };
    PdfTemplate2.prototype.reset = function(size) {
      if (typeof size === "undefined") {
        if (this.resources != null) {
          this.resources = null;
          this.content.remove(this.dictionaryProperties.resources);
        }
        if (this.graphics != null) {
          this.graphics.reset(this.size);
        }
      } else {
        this.setSize(size);
        this.reset();
      }
    };
    PdfTemplate2.prototype.setSize = function(size) {
      var rect = new RectangleF(new PointF(0, 0), size);
      var val = PdfArray.fromRectangle(rect);
      this.content.items.setValue(this.dictionaryProperties.bBox, val);
      this.templateSize = size;
    };
    Object.defineProperty(PdfTemplate2.prototype, "element", {
      // /**
      //  * Returns the value of current graphics.
      //  * @private
      //  */
      // public GetGraphics(g : PdfGraphics) : PdfGraphics {
      //     if (this.graphics == null || typeof this.graphics === 'undefined') {
      //         this.graphics = g;
      //         this.graphics.Size = this.Size;
      //         this.graphics.StreamWriter = new PdfStreamWriter(this.content)
      //         this.graphics.Initialize();
      //         if(this.writeTransformation) {
      //             this.graphics.InitializeCoordinates();
      //         }
      //     }
      //     return this.graphics;
      // }
      // IPdfWrapper Members
      /**
       * Gets the `content stream` of 'PdfTemplate' class.
       * @private
       */
      get: function() {
        return this.content;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTemplate2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-resources.js
var __extends49 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfResources = (
  /** @class */
  function(_super) {
    __extends49(PdfResources2, _super);
    function PdfResources2(baseDictionary) {
      var _this = _super.call(this, baseDictionary) || this;
      _this.properties = new PdfDictionary();
      return _this;
    }
    Object.defineProperty(PdfResources2.prototype, "names", {
      //Properties
      /**
       * Gets the `font names`.
       * @private
       */
      get: function() {
        return this.getNames();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfResources2.prototype, "document", {
      /**
       * Get or set the `page document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      set: function(value) {
        this.pdfDocument = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfResources2.prototype.getName = function(obj) {
      var primitive = obj.element;
      var name = null;
      if (this.names.containsKey(primitive)) {
        name = this.names.getValue(primitive);
      }
      if (name == null) {
        var sName = this.generateName();
        name = new PdfName(sName);
        this.names.setValue(primitive, name);
        if (obj instanceof PdfFont) {
          this.add(obj, name);
        } else if (obj instanceof PdfTemplate) {
          this.add(obj, name);
        } else if (obj instanceof PdfGradientBrush || obj instanceof PdfTilingBrush) {
          this.add(obj, name);
        } else if (obj instanceof PdfTransparency) {
          this.add(obj, name);
        } else if (obj instanceof PdfImage || obj instanceof PdfBitmap) {
          this.add(obj, name);
        }
      }
      return name;
    };
    PdfResources2.prototype.getNames = function() {
      if (this.pdfNames == null) {
        this.pdfNames = new TemporaryDictionary();
      }
      var fonts = this.items.getValue(this.dictionaryProperties.font);
      if (fonts != null) {
        var reference = fonts;
        var dictionary = fonts;
        dictionary = PdfCrossTable.dereference(fonts);
      }
      return this.pdfNames;
    };
    PdfResources2.prototype.requireProcedureSet = function(procedureSetName) {
      if (procedureSetName == null) {
        throw new Error("ArgumentNullException:procedureSetName");
      }
      var procSets = this.items.getValue(this.dictionaryProperties.procset);
      if (procSets == null) {
        procSets = new PdfArray();
        this.items.setValue(this.dictionaryProperties.procset, procSets);
      }
      var name = new PdfName(procedureSetName);
      if (!procSets.contains(name)) {
        procSets.add(name);
      }
    };
    PdfResources2.prototype.removeFont = function(name) {
      var key = null;
      var keys = this.pdfNames.keys();
      for (var index = 0; index < this.pdfNames.size(); index++) {
        if (this.pdfNames.getValue(keys[index]) === new PdfName(name)) {
          key = keys[index];
          break;
        }
      }
      if (key != null) {
        this.pdfNames.remove(key);
      }
    };
    PdfResources2.prototype.generateName = function() {
      var name = Guid.getNewGuidString();
      return name;
    };
    PdfResources2.prototype.add = function(arg1, arg2) {
      if (arg1 instanceof PdfFont) {
        var dictionary = null;
        var fonts = this.items.getValue(this.dictionaryProperties.font);
        if (fonts != null) {
          var reference = fonts;
          dictionary = fonts;
          dictionary = fonts;
        } else {
          dictionary = new PdfDictionary();
          this.items.setValue(this.dictionaryProperties.font, dictionary);
        }
        dictionary.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));
      } else if (arg1 instanceof PdfTemplate) {
        var xobjects = void 0;
        xobjects = this.items.getValue(this.dictionaryProperties.xObject);
        if (xobjects == null) {
          xobjects = new PdfDictionary();
          this.items.setValue(this.dictionaryProperties.xObject, xobjects);
        }
        xobjects.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));
      } else if (arg1 instanceof PdfBrush) {
        if (arg1 instanceof PdfGradientBrush || arg1 instanceof PdfTilingBrush) {
          var savable = arg1.element;
          if (savable != null) {
            var pattern = this.items.getValue(this.dictionaryProperties.pattern);
            if (pattern == null) {
              pattern = new PdfDictionary();
              this.items.setValue(this.dictionaryProperties.pattern, pattern);
            }
            pattern.items.setValue(arg2.value, new PdfReferenceHolder(savable));
          }
        }
      } else if (arg1 instanceof PdfTransparency) {
        var savable = arg1.element;
        var transDic = null;
        transDic = this.items.getValue(this.dictionaryProperties.extGState);
        if (transDic == null) {
          transDic = new PdfDictionary();
          this.items.setValue(this.dictionaryProperties.extGState, transDic);
        }
        transDic.items.setValue(arg2.value, new PdfReferenceHolder(savable));
      } else {
        var xobjects = this.Dictionary.items.getValue(this.dictionaryProperties.xObject);
        var parentXObjects = void 0;
        if (typeof this.pdfDocument !== "undefined") {
          parentXObjects = this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.getValue(this.dictionaryProperties.xObject);
        }
        var values = this.Dictionary.items.values();
        var hasSameImageStream = false;
        var oldReference = void 0;
        if (typeof this.pdfDocument !== "undefined" && (typeof parentXObjects === void 0 || parentXObjects == null)) {
          parentXObjects = new PdfDictionary();
          this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.setValue(this.dictionaryProperties.xObject, parentXObjects);
        } else if (typeof this.pdfDocument !== "undefined") {
          var values_1 = parentXObjects.items.values();
          for (var i = 0; i < values_1.length; i++) {
            if (typeof values_1[i] !== "undefined" && typeof values_1[i].element !== "undefined") {
              if (values_1[i].element.data[0] === arg1.element.data[0]) {
                oldReference = values_1[i];
                hasSameImageStream = true;
              }
            }
          }
        }
        if (xobjects == null) {
          xobjects = new PdfDictionary();
          this.Dictionary.items.setValue(this.dictionaryProperties.xObject, xobjects);
        }
        if (hasSameImageStream && typeof oldReference !== "undefined") {
          xobjects.items.setValue(arg2.value, oldReference);
        } else {
          var reference = new PdfReferenceHolder(arg1.element);
          xobjects.items.setValue(arg2.value, reference);
          if (typeof this.pdfDocument !== "undefined") {
            parentXObjects.items.setValue(arg2.value, reference);
          }
        }
      }
    };
    return PdfResources2;
  }(PdfDictionary)
);
var Guid = (
  /** @class */
  function() {
    function Guid2() {
    }
    Guid2.getNewGuidString = function() {
      return "aaaaaaaa-aaaa-4aaa-baaa-aaaaaaaaaaaa".replace(/[ab]/g, function(c) {
        var random = Math.random() * 16 | 0;
        var result = c === "a" ? random : random & 3 | 8;
        return result.toString(16);
      });
    };
    return Guid2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-tiling-brush.js
var __extends50 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTilingBrush = (
  /** @class */
  function(_super) {
    __extends50(PdfTilingBrush2, _super);
    function PdfTilingBrush2(arg1, arg2) {
      var _this = _super.call(this) || this;
      _this.mStroking = false;
      _this.mLocation = new PointF(0, 0);
      _this.mDictionaryProperties = new DictionaryProperties();
      var rect = null;
      if (arg1 instanceof Rectangle) {
        rect = arg1;
      } else if (arg1 instanceof SizeF) {
        rect = new Rectangle(0, 0, arg1.width, arg1.height);
      }
      if (arg2 !== null && arg2 instanceof PdfPage) {
        _this.mPage = arg2;
      }
      _this.brushStream = new PdfStream();
      _this.mResources = new PdfResources();
      _this.brushStream.items.setValue(_this.mDictionaryProperties.resources, _this.mResources);
      _this.setBox(rect);
      _this.setObligatoryFields();
      if (arg2 !== null && arg2 instanceof PdfPage) {
        _this.mPage = arg2;
        _this.graphics.colorSpace = arg2.document.colorSpace;
      }
      return _this;
    }
    PdfTilingBrush2.prototype.initialize = function(rectangle, page, location, matrix) {
      this.mPage = page;
      this.mLocation = location;
      this.mTransformationMatrix = matrix;
      this.tempBrushStream = this.brushStream;
      this.brushStream = new PdfStream();
      var tempResource = new PdfResources();
      this.brushStream.items.setValue(this.mDictionaryProperties.resources, tempResource);
      this.setBox(rectangle);
      this.setObligatoryFields();
      return this;
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "location", {
      //Properties
      /**
       * Location representing the start position of the tiles.
       * @public
       */
      get: function() {
        return this.mLocation;
      },
      set: function(value) {
        this.mLocation = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTilingBrush2.prototype.setObligatoryFields = function() {
      this.brushStream.items.setValue(this.mDictionaryProperties.patternType, new PdfNumber(1));
      this.brushStream.items.setValue(this.mDictionaryProperties.paintType, new PdfNumber(1));
      this.brushStream.items.setValue(this.mDictionaryProperties.tilingType, new PdfNumber(1));
      this.brushStream.items.setValue(this.mDictionaryProperties.xStep, new PdfNumber(this.mBox.right - this.mBox.left));
      this.brushStream.items.setValue(this.mDictionaryProperties.yStep, new PdfNumber(this.mBox.bottom - this.mBox.top));
      if (this.mPage != null && this.mLocation != null) {
        if (this.mTransformationMatrix == null && typeof this.mTransformationMatrix === "undefined") {
          var tileTransform = this.mPage.size.height % this.rectangle.size.height - this.mLocation.y;
          this.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray([1, 0, 0, 1, this.mLocation.x, tileTransform]));
        } else {
          var tileTransform = 0;
          var elements = this.mTransformationMatrix.matrix.elements;
          if (this.mPage.size.height > this.rectangle.size.height) {
            tileTransform = this.mTransformationMatrix.matrix.offsetY - this.mPage.size.height % this.rectangle.size.height;
          } else {
            tileTransform = this.mPage.size.height % this.rectangle.size.height + this.mTransformationMatrix.matrix.offsetY;
          }
          this.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray([elements[0], elements[1], elements[2], elements[3], elements[4], tileTransform]));
        }
      }
    };
    PdfTilingBrush2.prototype.setBox = function(box) {
      this.mBox = box;
      var rect = new RectangleF(this.mBox.left, this.mBox.top, this.mBox.right, this.mBox.bottom);
      this.brushStream.items.setValue(this.mDictionaryProperties.bBox, PdfArray.fromRectangle(rect));
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "rectangle", {
      //Properties
      /**
       * Gets the boundary box of the smallest brush cell.
       * @public
       */
      get: function() {
        return this.mBox;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTilingBrush2.prototype, "size", {
      /**
       * Gets the size of the smallest brush cell.
       * @public
       */
      get: function() {
        return this.mBox.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTilingBrush2.prototype, "graphics", {
      /**
       * Gets Graphics context of the brush.
       */
      get: function() {
        if (this.mGraphics == null && typeof this.mGraphics === "undefined") {
          var gr = new GetResourceEventHandler(this);
          var g = new PdfGraphics(this.size, gr, this.brushStream);
          this.mGraphics = g;
          this.mResources = this.getResources();
          this.mGraphics.initializeCoordinates();
        }
        return this.mGraphics;
      },
      enumerable: true,
      configurable: true
    });
    PdfTilingBrush2.prototype.getResources = function() {
      return this.mResources;
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "stroking", {
      /**
       * Gets or sets a value indicating whether this PdfTilingBrush
       * is used for stroking operations.
       */
      get: function() {
        return this.mStroking;
      },
      set: function(value) {
        this.mStroking = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTilingBrush2.prototype.clone = function() {
      var brush = this.initialize(this.rectangle, this.mPage, this.location, this.mTransformationMatrix);
      if (this.mTransformationMatrix != null && this.mTransformationMatrix.matrix != null) {
        brush.brushStream.items.setValue(this.mDictionaryProperties.matrix, new PdfArray(this.mTransformationMatrix.matrix.elements));
      }
      brush.brushStream.data = this.tempBrushStream.data;
      brush.mResources = new PdfResources(this.mResources);
      brush.brushStream.items.setValue(this.mDictionaryProperties.resources, brush.mResources);
      return brush;
    };
    PdfTilingBrush2.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
      var diff = false;
      if (brush !== this) {
        streamWriter.setColorSpace("Pattern", this.mStroking);
        var resources1 = getResources.getResources();
        var name1 = resources1.getName(this);
        streamWriter.setColourWithPattern(null, name1, this.mStroking);
        diff = true;
      } else if (brush instanceof PdfTilingBrush2) {
        streamWriter.setColorSpace("Pattern", this.mStroking);
        var resources = getResources.getResources();
        var name_1 = resources.getName(this);
        streamWriter.setColourWithPattern(null, name_1, this.mStroking);
        diff = true;
      }
      return diff;
    };
    PdfTilingBrush2.prototype.resetChanges = function(streamWriter) {
    };
    Object.defineProperty(PdfTilingBrush2.prototype, "element", {
      /* tslint:enable */
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @public
       */
      get: function() {
        return this.brushStream;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTilingBrush2;
  }(PdfBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-graphics.js
var PdfGraphics = (
  /** @class */
  function() {
    function PdfGraphics2(arg1, arg2, arg3) {
      this.currentColorSpace = PdfColorSpace.Rgb;
      this.previousTextRenderingMode = TextRenderingMode.Fill;
      this.previousCharacterSpacing = 0;
      this.previousWordSpacing = 0;
      this.previousTextScaling = 100;
      this.procedureSets = new ProcedureSets();
      this.isNormalRender = true;
      this.isUseFontSize = false;
      this.isItalic = false;
      this.isEmfTextScaled = false;
      this.isEmf = false;
      this.isEmfPlus = false;
      this.isBaselineFormat = true;
      this.emfScalingFactor = new SizeF(0, 0);
      this.colorSpaceChanged = false;
      this.dictionaryProperties = new DictionaryProperties();
      this.isOverloadWithPosition = false;
      this.isPointOverload = false;
      this.currentColorSpaces = ["RGB", "CMYK", "GrayScale", "Indexed"];
      this.isImageOptimized = false;
      this.graphicsState = [];
      this.istransparencySet = false;
      this.internalAutomaticFields = null;
      this.startCutIndex = -1;
      this.getResources = arg2;
      this.canvasSize = arg1;
      if (arg3 instanceof PdfStreamWriter) {
        this.pdfStreamWriter = arg3;
      } else {
        this.pdfStreamWriter = new PdfStreamWriter(arg3);
      }
      this.initialize();
    }
    Object.defineProperty(PdfGraphics2.prototype, "stringLayoutResult", {
      //  Properties
      /**
       * Returns the `result` after drawing string.
       * @private
       */
      get: function() {
        return this.pdfStringLayoutResult;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "size", {
      /**
       * Gets the `size` of the canvas.
       * @private
       */
      get: function() {
        return this.canvasSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "mediaBoxUpperRightBound", {
      /**
       * Gets and Sets the value of `MediaBox upper right bound`.
       * @private
       */
      get: function() {
        if (typeof this.internalMediaBoxUpperRightBound === "undefined") {
          this.internalMediaBoxUpperRightBound = 0;
        }
        return this.internalMediaBoxUpperRightBound;
      },
      set: function(value) {
        this.internalMediaBoxUpperRightBound = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "clientSize", {
      /**
       * Gets the `size` of the canvas reduced by margins and page templates.
       * @private
       */
      get: function() {
        return new SizeF(this.clipBounds.width, this.clipBounds.height);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "colorSpace", {
      /**
       * Gets or sets the current `color space` of the document
       * @private
       */
      get: function() {
        return this.currentColorSpace;
      },
      set: function(value) {
        this.currentColorSpace = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "streamWriter", {
      /**
       * Gets the `stream writer`.
       * @private
       */
      get: function() {
        return this.pdfStreamWriter;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "matrix", {
      /**
       * Gets the `transformation matrix` reflecting current transformation.
       * @private
       */
      get: function() {
        if (this.transformationMatrix == null) {
          this.transformationMatrix = new PdfTransformationMatrix();
        }
        return this.transformationMatrix;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "layer", {
      /**
       * Gets the `layer` for the graphics, if exists.
       * @private
       */
      get: function() {
        return this.pageLayer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "page", {
      /**
       * Gets the `page` for this graphics, if exists.
       * @private
       */
      get: function() {
        return this.pageLayer.page;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphics2.prototype, "automaticFields", {
      get: function() {
        if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === "undefined") {
          this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();
        }
        return this.internalAutomaticFields;
      },
      enumerable: true,
      configurable: true
    });
    PdfGraphics2.prototype.initialize = function() {
      this.bStateSaved = false;
      this.currentPen = null;
      this.currentBrush = null;
      this.currentFont = null;
      this.currentColorSpace = PdfColorSpace.Rgb;
      this.bCSInitialized = false;
      this.transformationMatrix = null;
      this.previousTextRenderingMode = -1;
      this.previousCharacterSpacing = -1;
      this.previousWordSpacing = -1;
      this.previousTextScaling = -100;
      this.currentStringFormat = null;
      this.clipBounds = new RectangleF(new PointF(0, 0), this.size);
      this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);
    };
    PdfGraphics2.prototype.drawPdfTemplate = function(template, location, size) {
      if (typeof size === "undefined") {
        if (template == null) {
          throw Error("ArgumentNullException-template");
        }
        this.drawPdfTemplate(template, location, template.size);
      } else {
        if (template == null) {
          throw Error("ArgumentNullException-template");
        }
        var scaleX = template.width > 0 ? size.width / template.width : 1;
        var scaleY = template.height > 0 ? size.height / template.height : 1;
        var bNeedScale = !(scaleX === 1 && scaleY === 1);
        var state = this.save();
        var matrix = new PdfTransformationMatrix();
        if (this.pageLayer != null) {
          this.getTranslateTransform(location.x, location.y + size.height, matrix);
        }
        if (bNeedScale) {
          this.getScaleTransform(scaleX, scaleY, matrix);
        }
        this.pdfStreamWriter.modifyCtm(matrix);
        var resources = this.getResources.getResources();
        var name_1 = resources.getName(template);
        this.pdfStreamWriter.executeObject(name_1);
        this.restore(state);
        var g = template.graphics;
        if (g != null) {
          for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {
            var fieldInfo = g.automaticFields.automaticFields[index];
            var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);
            var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;
            var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;
            this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));
            this.page.dictionary.modify();
          }
        }
        this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);
        this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);
        this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);
        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
      }
    };
    PdfGraphics2.prototype.drawString = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
      if (typeof arg1 === "string" && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === "number" && typeof arg6 === "number" && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === "undefined") {
        this.isOverloadWithPosition = true;
        this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7);
      } else {
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        var temparg6 = arg6;
        var temparg7 = arg7;
        var temparg8 = arg8;
        var temparg9 = arg9;
        var layouter = new PdfStringLayouter();
        var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);
        if (!result.empty) {
          var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);
          if (temparg7 <= 0) {
            temparg5 = rect.x;
            temparg7 = rect.width;
          }
          if (temparg8 <= 0) {
            temparg6 = rect.y;
            temparg8 = rect.height;
          }
          this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);
          this.isEmfTextScaled = false;
          this.emfScalingFactor = new SizeF(0, 0);
        }
        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
        this.isNormalRender = true;
        this.pdfStringLayoutResult = result;
        this.isUseFontSize = false;
      }
    };
    PdfGraphics2.prototype.drawLine = function(arg1, arg2, arg3, arg4, arg5) {
      if (arg2 instanceof PointF) {
        var temparg2 = arg2;
        var temparg3 = arg3;
        this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);
      } else {
        var temparg2 = arg2;
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        this.stateControl(arg1, null, null);
        var sw = this.streamWriter;
        sw.beginPath(temparg2, temparg3);
        sw.appendLineSegment(temparg4, temparg5);
        sw.strokePath();
        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);
      }
    };
    PdfGraphics2.prototype.drawRectangle = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof PdfPen && typeof arg2 === "number") {
        var temparg3 = arg3;
        this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);
      } else if (arg1 instanceof PdfBrush && typeof arg2 === "number") {
        var temparg3 = arg3;
        this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);
      } else {
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        var temparg6 = arg6;
        if (arg2 instanceof PdfTilingBrush) {
          this.bCSInitialized = false;
          var xOffset = this.matrix.matrix.offsetX + temparg3;
          var yOffset = void 0;
          if (this.layer != null && this.layer.page != null) {
            yOffset = this.layer.page.size.height - this.matrix.matrix.offsetY + temparg4;
          } else {
            yOffset = this.clientSize.height - this.matrix.matrix.offsetY + temparg4;
          }
          arg2.location = new PointF(xOffset, yOffset);
          arg2.graphics.colorSpace = this.colorSpace;
        } else if (arg2 instanceof PdfGradientBrush) {
          arg2.colorSpace = this.colorSpace;
        }
        if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {
          arg2 = null;
        }
        var temparg1 = arg1;
        var temparg2 = arg2;
        this.stateControl(temparg1, temparg2, null);
        this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);
        this.drawPathHelper(temparg1, temparg2, false);
      }
    };
    PdfGraphics2.prototype.drawRoundedRectangle = function(pen, brush, x, y, width, height, radius) {
      if (pen === null) {
        throw new Error("pen");
      }
      if (brush === null) {
        throw new Error("brush");
      }
      if (radius === 0) {
        this.drawRectangle(pen, brush, x, y, width, height);
      } else {
        var bounds = [x, y, width, height];
        var diameter = radius * 2;
        var size = [diameter, diameter];
        var arc = [bounds[0], bounds[1], size[0], size[1]];
        this._pathPoints = [];
        this._pathTypes = [];
        var startFigure = true;
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 180, 90, startFigure);
        arc[0] = bounds[0] + bounds[2] - diameter;
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 270, 90, startFigure);
        arc[1] = bounds[1] + bounds[3] - diameter;
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 0, 90, startFigure);
        arc[0] = bounds[0];
        startFigure = this._addArc(arc[0], arc[1], arc[2], arc[3], 90, 90, startFigure);
        var index = this._pathPoints.length - 1;
        var type = this._pathTypes[index];
        type = type | PathPointType.CloseSubpath;
        this._pathTypes[index] = type;
        this._drawPath(pen, brush, this._pathPoints, this._pathTypes, PdfFillMode.Alternate);
        this._pathPoints = [];
        this._pathTypes = [];
      }
    };
    PdfGraphics2.prototype._addArc = function(x, y, width, height, startAngle, sweepAngle, startFigure) {
      var points = this._getBezierArcPoints(x, y, x + width, y + height, startAngle, sweepAngle);
      for (var i = 0; i < points.length; i = i + 8) {
        var point = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];
        startFigure = this._addArcPoints(point, PathPointType.Bezier3, startFigure);
      }
      return startFigure;
    };
    PdfGraphics2.prototype._addArcPoints = function(points, pointType, startFigure) {
      for (var i = 0; i < points.length; i++) {
        var point = new PointF(points[i], points[i + 1]);
        if (i === 0) {
          if (this._pathPoints.length === 0 || startFigure) {
            this._addPoint(point, PathPointType.Start);
            startFigure = false;
          } else if (point.x !== this._getLastPoint().x || point.y !== this._getLastPoint().y) {
            this._addPoint(point, PathPointType.Line);
          }
        } else {
          this._addPoint(point, pointType);
        }
        i++;
      }
      return startFigure;
    };
    PdfGraphics2.prototype._getLastPoint = function() {
      var lastPoint = new PointF(0, 0);
      var count2 = this._pathPoints.length;
      if (count2 > 0) {
        lastPoint.x = this._pathPoints[count2 - 1].x;
        lastPoint.y = this._pathPoints[count2 - 1].y;
      }
      return lastPoint;
    };
    PdfGraphics2.prototype._addPoint = function(point, type) {
      this._pathPoints.push(point);
      this._pathTypes.push(type);
    };
    PdfGraphics2.prototype._getBezierArcPoints = function(x1, y1, x2, y2, s1, e1) {
      if (x1 > x2) {
        var tmp = void 0;
        tmp = x1;
        x1 = x2;
        x2 = tmp;
      }
      if (y2 > y1) {
        var tmp = void 0;
        tmp = y1;
        y1 = y2;
        y2 = tmp;
      }
      var fragAngle;
      var numFragments;
      if (Math.abs(e1) <= 90) {
        fragAngle = e1;
        numFragments = 1;
      } else {
        numFragments = Math.ceil(Math.abs(e1) / 90);
        fragAngle = e1 / numFragments;
      }
      var xcen = (x1 + x2) / 2;
      var ycen = (y1 + y2) / 2;
      var rx = (x2 - x1) / 2;
      var ry = (y2 - y1) / 2;
      var halfAng = fragAngle * (Math.PI / 360);
      var kappa = Math.abs(4 / 3 * (1 - Math.cos(halfAng)) / Math.sin(halfAng));
      var pointList = [];
      for (var i = 0; i < numFragments; i++) {
        var theta0 = (s1 + i * fragAngle) * (Math.PI / 180);
        var theta1 = (s1 + (i + 1) * fragAngle) * (Math.PI / 180);
        var cos0 = Math.cos(theta0);
        var cos1 = Math.cos(theta1);
        var sin0 = Math.sin(theta0);
        var sin1 = Math.sin(theta1);
        if (fragAngle > 0) {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        } else {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        }
      }
      return pointList;
    };
    PdfGraphics2.prototype.drawPathHelper = function(arg1, arg2, arg3, arg4) {
      if (typeof arg3 === "boolean") {
        var temparg3 = arg3;
        this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);
      } else {
        var temparg3 = arg3;
        var temparg4 = arg4;
        var isPen = arg1 != null;
        var isBrush = arg2 != null;
        var isEvenOdd = temparg3 === PdfFillMode.Alternate;
        if (isPen && isBrush) {
          this.streamWriter.fillStrokePath(isEvenOdd);
        } else if (!isPen && !isBrush) {
          this.streamWriter.endPath();
        } else if (isPen) {
          this.streamWriter.strokePath();
        } else {
          this.streamWriter.fillPath(isEvenOdd);
        }
      }
    };
    PdfGraphics2.prototype.drawImage = function(arg1, arg2, arg3, arg4, arg5) {
      if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        var size = arg1.physicalDimension;
        this.drawImage(arg1, arg2, arg3, size.width, size.height);
      } else {
        var temparg2 = arg2;
        var temparg3 = arg3;
        var temparg4 = arg4;
        var temparg5 = arg5;
        arg1.save();
        var matrix = new PdfTransformationMatrix();
        this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix);
        this.getScaleTransform(arg4, arg5, matrix);
        this.pdfStreamWriter.write("q");
        this.pdfStreamWriter.modifyCtm(matrix);
        var resources = this.getResources.getResources();
        if (typeof this.pageLayer !== "undefined" && this.page != null) {
          resources.document = this.page.document;
        }
        var name_2 = resources.getName(arg1);
        if (typeof this.pageLayer !== "undefined") {
          this.page.setResources(resources);
        }
        this.pdfStreamWriter.executeObject(name_2);
        this.pdfStreamWriter.write(Operators.restoreState);
        this.pdfStreamWriter.write(Operators.newLine);
        var resource = this.getResources.getResources();
        resource.requireProcedureSet(this.procedureSets.imageB);
        resource.requireProcedureSet(this.procedureSets.imageC);
        resource.requireProcedureSet(this.procedureSets.imageI);
        resource.requireProcedureSet(this.procedureSets.text);
      }
    };
    PdfGraphics2.prototype.getLineBounds = function(lineIndex, result, font, layoutRectangle, format) {
      var bounds;
      if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {
        var line = result.lines[lineIndex];
        var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
        var y = vShift + layoutRectangle.y + result.lineHeight * lineIndex;
        var lineWidth = line.width;
        var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);
        var lineIndent = this.getLineIndent(line, format, layoutRectangle, lineIndex === 0);
        hShift += !this.rightToLeft(format) ? lineIndent : 0;
        var x = layoutRectangle.x + hShift;
        var width = !this.shouldJustify(line, layoutRectangle.width, format) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent;
        var height = result.lineHeight;
        bounds = new RectangleF(x, y, width, height);
      } else {
        bounds = new RectangleF(0, 0, 0, 0);
      }
      return bounds;
    };
    PdfGraphics2.prototype.checkCorrectLayoutRectangle = function(textSize, x, y, format) {
      var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);
      if (format != null) {
        switch (format.alignment) {
          case PdfTextAlignment.Center:
            layoutedRectangle.x -= layoutedRectangle.width / 2;
            break;
          case PdfTextAlignment.Right:
            layoutedRectangle.x -= layoutedRectangle.width;
            break;
        }
        switch (format.lineAlignment) {
          case PdfVerticalAlignment.Middle:
            layoutedRectangle.y -= layoutedRectangle.height / 2;
            break;
          case PdfVerticalAlignment.Bottom:
            layoutedRectangle.y -= layoutedRectangle.height;
            break;
        }
      }
      return layoutedRectangle;
    };
    PdfGraphics2.prototype.setLayer = function(layer) {
      this.pageLayer = layer;
      var page = layer.page;
      if (page != null && typeof page !== "undefined") {
        page.beginSave = this.pageSave;
      }
    };
    PdfGraphics2.prototype.pageSave = function(page) {
      if (page.graphics.automaticFields != null) {
        for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {
          var fieldInfo = page.graphics.automaticFields.automaticFields[i];
          fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);
        }
      }
    };
    PdfGraphics2.prototype.drawStringLayoutResult = function(result, font, pen, brush, layoutRectangle, format) {
      if (!result.empty) {
        this.applyStringSettings(font, pen, brush, format, layoutRectangle);
        var textScaling = format != null ? format.horizontalScalingFactor : 100;
        if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {
          this.pdfStreamWriter.setTextScaling(textScaling);
          this.previousTextScaling = textScaling;
        }
        var height = format == null || format.lineSpacing === 0 ? font.height : format.lineSpacing + font.height;
        var subScript = format != null && format.subSuperScript === PdfSubSuperScript.SubScript;
        var shift = 0;
        shift = subScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format);
        this.shift = shift;
        this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);
        this.pdfStreamWriter.setLeading(+height);
        var resultHeight = 0;
        var remainingString = "";
        for (var i = 0; i < result.lines.length; i++) {
          resultHeight += result.lineHeight;
          if (layoutRectangle.y + resultHeight > this.clientSize.height) {
            this.startCutIndex = i;
            break;
          }
        }
        for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) {
          remainingString += result.lines[j].text;
        }
        var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);
        this.drawLayoutResult(result, font, format, layoutRectangle);
        this.underlineStrikeoutText(pen, brush, result, font, bounds, format);
        this.isEmfPlus = false;
        this.isUseFontSize = false;
        if (this.startCutIndex !== -1) {
          var page = this.getNextPage();
          page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);
        }
      } else {
        throw new Error("ArgumentNullException:result");
      }
    };
    PdfGraphics2.prototype.getNextPage = function() {
      var section = this.currentPage.section;
      var nextPage = null;
      var index = section.indexOf(this.currentPage);
      if (index === section.count - 1) {
        nextPage = section.add();
      } else {
        nextPage = section.getPages()[index + 1];
      }
      return nextPage;
    };
    PdfGraphics2.prototype.setClip = function(rectangle, mode) {
      if (typeof mode === "undefined") {
        this.setClip(rectangle, PdfFillMode.Winding);
      } else {
        this.pdfStreamWriter.appendRectangle(rectangle);
        this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate);
      }
    };
    PdfGraphics2.prototype.applyStringSettings = function(font, pen, brush, format, bounds) {
      if (brush instanceof PdfTilingBrush) {
        this.bCSInitialized = false;
        brush.graphics.colorSpace = this.colorSpace;
      } else if (brush instanceof PdfGradientBrush) {
        this.bCSInitialized = false;
        brush.colorSpace = this.colorSpace;
      }
      var setLineWidth = false;
      var tm = this.getTextRenderingMode(pen, brush, format);
      this.stateControl(pen, brush, font, format);
      this.pdfStreamWriter.beginText();
      if (tm !== this.previousTextRenderingMode) {
        this.pdfStreamWriter.setTextRenderingMode(tm);
        this.previousTextRenderingMode = tm;
      }
      var cs = format != null ? format.characterSpacing : 0;
      if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {
        this.pdfStreamWriter.setCharacterSpacing(cs);
        this.previousCharacterSpacing = cs;
      }
      var ws = format != null ? format.wordSpacing : 0;
      if (ws !== this.previousWordSpacing) {
        this.pdfStreamWriter.setWordSpacing(ws);
        this.previousWordSpacing = ws;
      }
    };
    PdfGraphics2.prototype.getTextVerticalAlignShift = function(textHeight, boundsHeight, format) {
      var shift = 0;
      if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {
        switch (format.lineAlignment) {
          case PdfVerticalAlignment.Middle:
            shift = (boundsHeight - textHeight) / 2;
            break;
          case PdfVerticalAlignment.Bottom:
            shift = boundsHeight - textHeight;
            break;
        }
      }
      return shift;
    };
    PdfGraphics2.prototype.drawLayoutResult = function(result, font, format, layoutRectangle) {
      var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
      if (vAlignShift !== 0) {
        this.pdfStreamWriter.startNextLine(0, vAlignShift);
      }
      var ttfFont = font;
      var unicode = ttfFont != null && ttfFont.isUnicode;
      var embed = ttfFont != null && ttfFont.isEmbedFont;
      var lines = result.lines;
      for (var i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {
        var lineInfo = lines[i];
        var line = lineInfo.text;
        var lineWidth = lineInfo.width;
        var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);
        var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);
        hAlignShift += !this.rightToLeft(format) ? lineIndent : 0;
        if (hAlignShift !== 0 && !this.isEmfTextScaled) {
          this.pdfStreamWriter.startNextLine(hAlignShift, 0);
        }
        if (unicode) {
          this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);
        } else {
          this.drawAsciiLine(lineInfo, layoutRectangle, font, format);
        }
        if (hAlignShift !== 0 && !this.isEmfTextScaled) {
          this.pdfStreamWriter.startNextLine(-hAlignShift, 0);
        }
        if (this.isOverloadWithPosition && lines.length > 1) {
          this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0);
          layoutRectangle.x = 0;
          layoutRectangle.width = this.clientSize.width;
          this.isOverloadWithPosition = false;
          this.isPointOverload = true;
        }
      }
      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
      if (vAlignShift !== 0) {
        this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));
      }
      this.pdfStreamWriter.endText();
    };
    PdfGraphics2.prototype.drawAsciiLine = function(lineInfo, layoutRectangle, font, format) {
      this.justifyLine(lineInfo, layoutRectangle.width, format);
      var value = "";
      if (lineInfo.text.indexOf("(") !== -1 || lineInfo.text.indexOf(")") !== -1) {
        for (var i = 0; i < lineInfo.text.length; i++) {
          if (lineInfo.text[i] === "(") {
            value += "\\(";
          } else if (lineInfo.text[i] === ")") {
            value += "\\)";
          } else {
            value += lineInfo.text[i];
          }
        }
      }
      if (value === "") {
        value = lineInfo.text;
      }
      var line = "(" + value + ")";
      this.pdfStreamWriter.showNextLineText(new PdfString(line));
    };
    PdfGraphics2.prototype.drawUnicodeLine = function(lineInfo, layoutRectangle, font, format) {
      var line = lineInfo.text;
      var lineWidth = lineInfo.width;
      var rtl = format !== null && typeof format !== "undefined" && format.rightToLeft;
      var useWordSpace = format !== null && typeof format !== "undefined" && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify);
      var ttfFont = font;
      var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);
      var rtlRender = new RtlRenderer();
      if (rtl || format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
        var blocks = null;
        var rightAlign = format !== null && typeof format !== "undefined" && format.alignment === PdfTextAlignment.Right;
        if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
          blocks = rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);
        } else {
          blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);
        }
        var words = null;
        if (blocks.length > 1) {
          if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
            words = rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);
          } else {
            words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);
          }
        } else {
          words = [line];
        }
        this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);
      } else {
        if (useWordSpace) {
          var result = this.breakUnicodeLine(line, ttfFont, null);
          var blocks = result.tokens;
          var words = result.words;
          this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);
        } else {
          var token = this.convertToUnicode(line, ttfFont);
          var value = this.getUnicodeString(token);
          this.streamWriter.showNextLineText(value);
        }
      }
    };
    PdfGraphics2.prototype.drawUnicodeBlocks = function(blocks, words, font, format, wordSpacing) {
      if (blocks == null) {
        throw new Error("Argument Null Exception : blocks");
      }
      if (words == null) {
        throw new Error("Argument Null Exception : words");
      }
      if (font == null) {
        throw new Error("Argument Null Exception : font");
      }
      this.streamWriter.startNextLine();
      var x = 0;
      var xShift = 0;
      var firstLineIndent = 0;
      var paragraphIndent = 0;
      try {
        if (format !== null && typeof format !== "undefined") {
          firstLineIndent = format.firstLineIndent;
          paragraphIndent = format.paragraphIndent;
          format.firstLineIndent = 0;
          format.paragraphIndent = 0;
        }
        var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;
        var characterSpacing = format != null ? format.characterSpacing : 0;
        var wordSpace = format !== null && typeof format !== "undefined" && wordSpacing === 0 ? format.wordSpacing : 0;
        spaceWidth += characterSpacing + wordSpace;
        for (var i = 0; i < blocks.length; i++) {
          var token = blocks[i];
          var word = words[i];
          var tokenWidth = 0;
          if (x !== 0) {
            this.streamWriter.startNextLine(x, 0);
          }
          if (word.length > 0) {
            tokenWidth += /*Utils.Round(*/
            font.measureString(word, format).width;
            tokenWidth += characterSpacing;
            var val = this.getUnicodeString(token);
            this.streamWriter.showText(val);
          }
          if (i !== blocks.length - 1) {
            x = tokenWidth + spaceWidth;
            xShift += x;
          }
        }
        if (xShift > 0) {
          this.streamWriter.startNextLine(-xShift, 0);
        }
      } finally {
        if (format !== null && typeof format !== "undefined") {
          format.firstLineIndent = firstLineIndent;
          format.paragraphIndent = paragraphIndent;
        }
      }
    };
    PdfGraphics2.prototype.breakUnicodeLine = function(line, ttfFont, words) {
      if (line === null) {
        throw new Error("Argument Null Exception : line");
      }
      words = line.split(null);
      var tokens = [];
      for (var i = 0; i < words.length; i++) {
        var word = words[i];
        var token = this.convertToUnicode(word, ttfFont);
        tokens[i] = token;
      }
      return {
        tokens,
        words
      };
    };
    PdfGraphics2.prototype.getUnicodeString = function(token) {
      if (token === null) {
        throw new Error("Argument Null Exception : token");
      }
      var val = new PdfString(token);
      val.converted = true;
      val.encode = InternalEnum.ForceEncoding.Ascii;
      return val;
    };
    PdfGraphics2.prototype.convertToUnicode = function(text, ttfFont) {
      var token = null;
      if (text == null) {
        throw new Error("Argument Null Exception : text");
      }
      if (ttfFont == null) {
        throw new Error("Argument Null Exception : ttfFont");
      }
      if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {
        var ttfReader = ttfFont.fontInternal.ttfReader;
        ttfFont.setSymbols(text);
        token = ttfReader.convertString(text);
        var bytes = PdfString.toUnicodeArray(token, false);
        token = PdfString.byteToString(bytes);
      }
      return token;
    };
    PdfGraphics2.prototype.justifyLine = function(lineInfo, boundsWidth, format) {
      var line = lineInfo.text;
      var lineWidth = lineInfo.width;
      var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);
      var hasWordSpacing = format != null && format.wordSpacing !== 0;
      var symbols = StringTokenizer.spaces;
      var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);
      var wordSpace = 0;
      if (shouldJustify) {
        if (hasWordSpacing) {
          lineWidth -= whitespacesCount * format.wordSpacing;
        }
        var difference = boundsWidth - lineWidth;
        wordSpace = difference / whitespacesCount;
        this.pdfStreamWriter.setWordSpacing(wordSpace);
      } else {
        if (hasWordSpacing) {
          this.pdfStreamWriter.setWordSpacing(format.wordSpacing);
        } else {
          this.pdfStreamWriter.setWordSpacing(0);
        }
      }
      return wordSpace;
    };
    PdfGraphics2.prototype.reset = function(size) {
      this.canvasSize = size;
      this.streamWriter.clear();
      this.initialize();
      this.initializeCoordinates();
    };
    PdfGraphics2.prototype.shouldJustify = function(lineInfo, boundsWidth, format) {
      var line = lineInfo.text;
      var lineWidth = lineInfo.width;
      var justifyStyle = format != null && format.alignment === PdfTextAlignment.Justify;
      var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;
      var symbols = StringTokenizer.spaces;
      var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);
      var hasSpaces = whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace;
      var goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0;
      var shouldJustify = justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify);
      return shouldJustify;
    };
    PdfGraphics2.prototype.underlineStrikeoutText = function(pen, brush, result, font, layoutRectangle, format) {
      if (font.underline || font.strikeout) {
        var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);
        if (linePen != null) {
          var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
          var underlineYOffset = 0;
          underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;
          var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;
          var lines = result.lines;
          for (var i = 0, len = result.lineCount; i < len; i++) {
            var lineInfo = lines[i];
            var line = lineInfo.text;
            var lineWidth = lineInfo.width;
            var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);
            var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);
            hShift += !this.rightToLeft(format) ? lineIndent : 0;
            var x1 = layoutRectangle.x + hShift;
            var x2 = !this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;
            if (font.underline) {
              var y = underlineYOffset;
              this.drawLine(linePen, x1, y, x2, y);
              underlineYOffset += result.lineHeight;
            }
            if (font.strikeout) {
              var y = strikeoutYOffset;
              this.drawLine(linePen, x1, y, x2, y);
              strikeoutYOffset += result.lineHeight;
            }
            if (this.isPointOverload && lines.length > 1) {
              layoutRectangle.x = 0;
              layoutRectangle.width = this.clientSize.width;
            }
          }
          this.isPointOverload = false;
        }
      }
    };
    PdfGraphics2.prototype.createUnderlineStikeoutPen = function(pen, brush, font, format) {
      var lineWidth = font.metrics.getSize(format) / 20;
      var linePen = null;
      if (pen != null) {
        linePen = new PdfPen(pen.color, lineWidth);
      } else if (brush != null) {
        linePen = new PdfPen(brush, lineWidth);
      }
      return linePen;
    };
    PdfGraphics2.prototype.getTextRenderingMode = function(pen, brush, format) {
      var tm = TextRenderingMode.None;
      if (pen != null && brush != null) {
        tm = TextRenderingMode.FillStroke;
      } else if (pen != null) {
        tm = TextRenderingMode.Stroke;
      } else {
        tm = TextRenderingMode.Fill;
      }
      if (format != null && format.clipPath) {
        tm |= TextRenderingMode.ClipFlag;
      }
      return tm;
    };
    PdfGraphics2.prototype.getLineIndent = function(lineInfo, format, layoutBounds, firstLine) {
      var lineIndent = 0;
      var firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;
      if (format != null && firstParagraphLine) {
        lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;
        lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent;
      }
      return lineIndent;
    };
    PdfGraphics2.prototype.getHorizontalAlignShift = function(lineWidth, boundsWidth, format) {
      var shift = 0;
      if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {
        switch (format.alignment) {
          case PdfTextAlignment.Center:
            shift = (boundsWidth - lineWidth) / 2;
            break;
          case PdfTextAlignment.Right:
            shift = boundsWidth - lineWidth;
            break;
        }
      }
      return shift;
    };
    PdfGraphics2.prototype.rightToLeft = function(format) {
      var rtl = format !== null && typeof format !== "undefined" && format.rightToLeft;
      if (format !== null && typeof format !== "undefined") {
        if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== "undefined") {
          rtl = true;
        }
      }
      return rtl;
    };
    PdfGraphics2.prototype.stateControl = function(pen, brush, font, format) {
      if (typeof format === "undefined") {
        this.stateControl(pen, brush, font, null);
      } else {
        if (brush instanceof PdfGradientBrush) {
          this.bCSInitialized = false;
          brush.colorSpace = this.colorSpace;
        }
        if (brush instanceof PdfTilingBrush) {
          this.bCSInitialized = false;
          brush.graphics.colorSpace = this.colorSpace;
        }
        var saveState = false;
        if (brush !== null) {
          var solidBrush = brush;
          if (typeof this.pageLayer !== "undefined" && this.pageLayer != null) {
            if (this.colorSpaceChanged === false) {
              this.lastDocumentCS = this.pageLayer.page.document.colorSpace;
              this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;
              this.colorSpace = this.pageLayer.page.document.colorSpace;
              this.currentColorSpace = this.pageLayer.page.document.colorSpace;
              this.colorSpaceChanged = true;
            }
          }
          this.initCurrentColorSpace(this.currentColorSpace);
        } else if (pen != null) {
          var pdfPen = pen;
          if (typeof this.pageLayer !== "undefined" && this.pageLayer != null) {
            this.colorSpace = this.pageLayer.page.document.colorSpace;
            this.currentColorSpace = this.pageLayer.page.document.colorSpace;
          }
          this.initCurrentColorSpace(this.currentColorSpace);
        }
        this.penControl(pen, saveState);
        this.brushControl(brush, saveState);
        this.fontControl(font, format, saveState);
      }
    };
    PdfGraphics2.prototype.initCurrentColorSpace = function(colorspace) {
      var re = this.getResources.getResources();
      if (!this.bCSInitialized) {
        if (this.currentColorSpace != PdfColorSpace.GrayScale) {
          this.pdfStreamWriter.setColorSpace("Device" + this.currentColorSpaces[this.currentColorSpace], true);
          this.pdfStreamWriter.setColorSpace("Device" + this.currentColorSpaces[this.currentColorSpace], false);
          this.bCSInitialized = true;
        } else {
          this.pdfStreamWriter.setColorSpace("DeviceGray", true);
          this.pdfStreamWriter.setColorSpace("DeviceGray", false);
          this.bCSInitialized = true;
        }
      }
    };
    PdfGraphics2.prototype.penControl = function(pen, saveState) {
      if (pen != null) {
        this.currentPen = pen;
        pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());
        this.currentPen = pen.clone();
      }
    };
    PdfGraphics2.prototype.brushControl = function(brush, saveState) {
      if (brush != null && typeof brush !== "undefined") {
        var b = brush.clone();
        var lgb = b;
        if (lgb !== null && typeof lgb !== "undefined" && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {
          var m = lgb.matrix;
          var matrix = this.matrix.clone();
          if (m != null) {
            m.multiply(matrix);
            matrix = m;
          }
          lgb.matrix = matrix;
        }
        this.currentBrush = lgb;
        var br = brush;
        b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);
        this.currentBrush = brush;
        brush = null;
      }
    };
    PdfGraphics2.prototype.fontControl = function(font, format, saveState) {
      if (font != null) {
        var curSubSuper = format != null ? format.subSuperScript : PdfSubSuperScript.None;
        var prevSubSuper = this.currentStringFormat != null ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None;
        if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {
          var resources = this.getResources.getResources();
          this.currentFont = font;
          this.currentStringFormat = format;
          var size = font.metrics.getSize(format);
          this.isEmfTextScaled = false;
          var fontName = resources.getName(font);
          this.pdfStreamWriter.setFont(font, fontName, size);
        }
      }
    };
    PdfGraphics2.prototype.setTransparency = function(arg1, arg2, arg3) {
      if (typeof arg2 === "undefined") {
        this.istransparencySet = true;
        this.setTransparency(arg1, arg1, PdfBlendMode.Normal);
      } else if (typeof arg2 === "number" && typeof arg3 === "undefined") {
        this.setTransparency(arg1, arg2, PdfBlendMode.Normal);
      } else {
        if (this.trasparencies == null) {
          this.trasparencies = new TemporaryDictionary();
        }
        var transp = null;
        var td = new TransparencyData(arg1, arg2, arg3);
        if (this.trasparencies.containsKey(td)) {
          transp = this.trasparencies.getValue(td);
        }
        if (transp == null) {
          transp = new PdfTransparency(arg1, arg2, arg3);
          this.trasparencies.setValue(td, transp);
        }
        var resources = this.getResources.getResources();
        var name_3 = resources.getName(transp);
        var sw = this.streamWriter;
        sw.setGraphicsState(name_3);
      }
    };
    PdfGraphics2.prototype.clipTranslateMargins = function(x, y, left, top, right, bottom) {
      if (x instanceof RectangleF && typeof y === "undefined") {
        this.clipBounds = x;
        this.pdfStreamWriter.writeComment("Clip margins.");
        this.pdfStreamWriter.appendRectangle(x);
        this.pdfStreamWriter.closePath();
        this.pdfStreamWriter.clipPath(false);
        this.pdfStreamWriter.writeComment("Translate co-ordinate system.");
        this.translateTransform(x.x, x.y);
      } else if (typeof x === "number") {
        var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);
        this.clipBounds = clipArea;
        this.pdfStreamWriter.writeComment("Clip margins.");
        this.pdfStreamWriter.appendRectangle(clipArea);
        this.pdfStreamWriter.closePath();
        this.pdfStreamWriter.clipPath(false);
        this.pdfStreamWriter.writeComment("Translate co-ordinate system.");
        this.translateTransform(x, y);
      }
    };
    PdfGraphics2.prototype.updateY = function(y) {
      return -y;
    };
    PdfGraphics2.prototype.translateTransform = function(offsetX, offsetY) {
      var matrix = new PdfTransformationMatrix();
      this.getTranslateTransform(offsetX, offsetY, matrix);
      this.pdfStreamWriter.modifyCtm(matrix);
      this.matrix.multiply(matrix);
    };
    PdfGraphics2.prototype.getTranslateTransform = function(x, y, input2) {
      input2.translate(x, this.updateY(y));
      return input2;
    };
    PdfGraphics2.prototype.scaleTransform = function(scaleX, scaleY) {
      var matrix = new PdfTransformationMatrix();
      this.getScaleTransform(scaleX, scaleY, matrix);
      this.pdfStreamWriter.modifyCtm(matrix);
      this.matrix.multiply(matrix);
    };
    PdfGraphics2.prototype.getScaleTransform = function(x, y, input2) {
      if (input2 == null) {
        input2 = new PdfTransformationMatrix();
      }
      input2.scale(x, y);
      return input2;
    };
    PdfGraphics2.prototype.rotateTransform = function(angle) {
      var matrix = new PdfTransformationMatrix();
      this.getRotateTransform(angle, matrix);
      this.pdfStreamWriter.modifyCtm(matrix);
      this.matrix.multiply(matrix);
    };
    PdfGraphics2.prototype.initializeCoordinates = function() {
      this.pdfStreamWriter.writeComment("Change co-ordinate system to left/top.");
      if (this.mediaBoxUpperRightBound !== -this.size.height) {
        if (this.cropBox == null) {
          if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {
            this.translateTransform(0, this.updateY(this.size.height));
          } else {
            this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));
          }
        }
      }
    };
    PdfGraphics2.prototype.getRotateTransform = function(angle, input2) {
      if (input2 == null || typeof input2 === "undefined") {
        input2 = new PdfTransformationMatrix();
      }
      input2.rotate(this.updateY(angle));
      return input2;
    };
    PdfGraphics2.prototype.save = function() {
      var state = new PdfGraphicsState(this, this.matrix.clone());
      state.brush = this.currentBrush;
      state.pen = this.currentPen;
      state.font = this.currentFont;
      state.colorSpace = this.currentColorSpace;
      state.characterSpacing = this.previousCharacterSpacing;
      state.wordSpacing = this.previousWordSpacing;
      state.textScaling = this.previousTextScaling;
      state.textRenderingMode = this.previousTextRenderingMode;
      this.graphicsState.push(state);
      this.pdfStreamWriter.saveGraphicsState();
      return state;
    };
    PdfGraphics2.prototype.restore = function(state) {
      if (typeof state === "undefined") {
        if (this.graphicsState.length > 0) {
          this.doRestoreState();
        }
      } else {
        if (this.graphicsState.indexOf(state) !== -1) {
          for (; ; ) {
            if (this.graphicsState.length === 0) {
              break;
            }
            var popState = this.doRestoreState();
            if (popState === state) {
              break;
            }
          }
        }
      }
    };
    PdfGraphics2.prototype.doRestoreState = function() {
      var state = this.graphicsState.pop();
      this.transformationMatrix = state.matrix;
      this.currentBrush = state.brush;
      this.currentPen = state.pen;
      this.currentFont = state.font;
      this.currentColorSpace = state.colorSpace;
      this.previousCharacterSpacing = state.characterSpacing;
      this.previousWordSpacing = state.wordSpacing;
      this.previousTextScaling = state.textScaling;
      this.previousTextRenderingMode = state.textRenderingMode;
      this.pdfStreamWriter.restoreGraphicsState();
      return state;
    };
    PdfGraphics2.prototype.drawPath = function(pen, brush, path) {
      this._drawPath(pen, brush, path.pathPoints, path.pathTypes, path.fillMode);
    };
    PdfGraphics2.prototype._drawPath = function(pen, brush, pathPoints, pathTypes, fillMode) {
      if (brush instanceof PdfTilingBrush) {
        this.bCSInitialized = false;
        brush.graphics.colorSpace = this.colorSpace;
      } else if (brush instanceof PdfGradientBrush) {
        this.bCSInitialized = false;
        brush.colorSpace = this.colorSpace;
      }
      this.stateControl(pen, brush, null);
      this.buildUpPath(pathPoints, pathTypes);
      this.drawPathHelper(pen, brush, fillMode, false);
    };
    PdfGraphics2.prototype.drawArc = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      if (arg2 instanceof RectangleF) {
        this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);
      } else {
        if (arg7 !== 0) {
          this.stateControl(arg1, null, null);
          this.constructArcPath(arg2, arg3, arg2 + arg4, arg3 + arg5, arg6, arg7);
          this.drawPathHelper(arg1, null, false);
        }
      }
    };
    PdfGraphics2.prototype.buildUpPath = function(arg1, arg2) {
      var cnt = arg1.length;
      for (var i = 0; i < cnt; ++i) {
        var typeValue = 0;
        var point = arg1[i];
        switch (arg2[i] & PdfGraphics2.pathTypesValuesMask) {
          case PathPointType.Start:
            this.pdfStreamWriter.beginPath(point.x, point.y);
            break;
          case PathPointType.Bezier3:
            var p2 = new PointF(0, 0);
            var p3 = new PointF(0, 0);
            var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);
            this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);
            i = result1.i;
            break;
          case PathPointType.Line:
            this.pdfStreamWriter.appendLineSegment(point);
            break;
          default:
            throw new Error("ArithmeticException - Incorrect path formation.");
        }
        typeValue = arg2[i];
        this.checkFlags(typeValue);
      }
    };
    PdfGraphics2.prototype.getBezierPoints = function(points, types, i, p2, p3) {
      var errorMsg = "Malforming path.";
      ++i;
      if ((types[i] & PdfGraphics2.pathTypesValuesMask) === PathPointType.Bezier3) {
        p2 = points[i];
        ++i;
        if ((types[i] & PdfGraphics2.pathTypesValuesMask) === PathPointType.Bezier3) {
          p3 = points[i];
        } else {
          throw new Error("ArgumentException : errorMsg");
        }
      } else {
        throw new Error("ArgumentException : errorMsg");
      }
      return {
        i,
        p2,
        p3
      };
    };
    PdfGraphics2.prototype.checkFlags = function(type) {
      if ((type & PathPointType.CloseSubpath) === PathPointType.CloseSubpath) {
        this.pdfStreamWriter.closePath();
      }
    };
    PdfGraphics2.prototype.constructArcPath = function(x1, y1, x2, y2, startAng, sweepAngle) {
      var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);
      if (points.length === 0) {
        return;
      }
      var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];
      this.pdfStreamWriter.beginPath(pt[0], pt[1]);
      var i = 0;
      for (i = 0; i < points.length; i = i + 8) {
        pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];
        this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
      }
    };
    PdfGraphics2.prototype.getBezierArc = function(numX1, numY1, numX2, numY2, s1, e1) {
      if (numX1 > numX2) {
        var tmp = void 0;
        tmp = numX1;
        numX1 = numX2;
        numX2 = tmp;
      }
      if (numY2 > numY1) {
        var tmp = void 0;
        tmp = numY1;
        numY1 = numY2;
        numY2 = tmp;
      }
      var fragAngle1;
      var numFragments;
      if (Math.abs(e1) <= 90) {
        fragAngle1 = e1;
        numFragments = 1;
      } else {
        numFragments = Math.ceil(Math.abs(e1) / 90);
        fragAngle1 = e1 / numFragments;
      }
      var xcen = (numX1 + numX2) / 2;
      var ycen = (numY1 + numY2) / 2;
      var rx = (numX2 - numX1) / 2;
      var ry = (numY2 - numY1) / 2;
      var halfAng = fragAngle1 * (Math.PI / 360);
      var kappa = Math.abs(4 / 3 * (1 - Math.cos(halfAng)) / Math.sin(halfAng));
      var pointsList = [];
      for (var i = 0; i < numFragments; i++) {
        var thetaValue0 = (s1 + i * fragAngle1) * (Math.PI / 180);
        var thetaValue1 = (s1 + (i + 1) * fragAngle1) * (Math.PI / 180);
        var cos0 = Math.cos(thetaValue0);
        var cos1 = Math.cos(thetaValue1);
        var sin0 = Math.sin(thetaValue0);
        var sin1 = Math.sin(thetaValue1);
        if (fragAngle1 > 0) {
          pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        } else {
          pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        }
      }
      return pointsList;
    };
    PdfGraphics2.pathTypesValuesMask = 15;
    PdfGraphics2.transparencyObject = false;
    return PdfGraphics2;
  }()
);
var GetResourceEventHandler = (
  /** @class */
  function() {
    function GetResourceEventHandler2(sender) {
      this.sender = sender;
    }
    GetResourceEventHandler2.prototype.getResources = function() {
      return this.sender.getResources();
    };
    return GetResourceEventHandler2;
  }()
);
var PdfGraphicsState = (
  /** @class */
  function() {
    function PdfGraphicsState2(graphics, matrix) {
      this.internalTextRenderingMode = TextRenderingMode.Fill;
      this.internalCharacterSpacing = 0;
      this.internalWordSpacing = 0;
      this.internalTextScaling = 100;
      this.pdfColorSpace = PdfColorSpace.Rgb;
      if (typeof graphics !== "undefined") {
        this.pdfGraphics = graphics;
        var elements_1 = [];
        graphics.matrix.matrix.elements.forEach(function(element) {
          elements_1.push(element);
        });
        this.transformationMatrix = new PdfTransformationMatrix();
        this.transformationMatrix.matrix = new Matrix2(elements_1);
      }
    }
    Object.defineProperty(PdfGraphicsState2.prototype, "graphics", {
      // Properties
      /**
       * Gets the parent `graphics object`.
       * @private
       */
      get: function() {
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "matrix", {
      /**
       * Gets the `current matrix`.
       * @private
       */
      get: function() {
        return this.transformationMatrix;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "characterSpacing", {
      /**
       * Gets or sets the `current character spacing`.
       * @private
       */
      get: function() {
        return this.internalCharacterSpacing;
      },
      set: function(value) {
        this.internalCharacterSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "wordSpacing", {
      /**
       * Gets or sets the `word spacing` value.
       * @private
       */
      get: function() {
        return this.internalWordSpacing;
      },
      set: function(value) {
        this.internalWordSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "textScaling", {
      /**
       * Gets or sets the `text scaling` value.
       * @private
       */
      get: function() {
        return this.internalTextScaling;
      },
      set: function(value) {
        this.internalTextScaling = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "pen", {
      /**
       * Gets or sets the `current pen` object.
       * @private
       */
      get: function() {
        return this.pdfPen;
      },
      set: function(value) {
        this.pdfPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "brush", {
      /**
       * Gets or sets the `brush`.
       * @private
       */
      get: function() {
        return this.pdfBrush;
      },
      set: function(value) {
        this.pdfBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "font", {
      /**
       * Gets or sets the `current font` object.
       * @private
       */
      get: function() {
        return this.pdfFont;
      },
      set: function(value) {
        this.pdfFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "colorSpace", {
      /**
       * Gets or sets the `current color space` value.
       * @private
       */
      get: function() {
        return this.pdfColorSpace;
      },
      set: function(value) {
        this.pdfColorSpace = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGraphicsState2.prototype, "textRenderingMode", {
      /**
       * Gets or sets the `text rendering mode`.
       * @private
       */
      get: function() {
        return this.internalTextRenderingMode;
      },
      set: function(value) {
        this.internalTextRenderingMode = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGraphicsState2;
  }()
);
var TransparencyData = (
  /** @class */
  /* @__PURE__ */ function() {
    function TransparencyData2(alphaPen, alphaBrush, blendMode) {
      this.alphaPen = alphaPen;
      this.alphaBrush = alphaBrush;
      this.blendMode = blendMode;
    }
    return TransparencyData2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer.js
var PdfPageLayer = (
  /** @class */
  function() {
    function PdfPageLayer2(page, streamClipPageTemplates) {
      this.pdfColorSpace = PdfColorSpace.Rgb;
      this.isVisible = true;
      this.sublayer = false;
      this.contentLength = 0;
      this.dictionaryProperties = new DictionaryProperties();
      if (page === null) {
        throw new Error("ArgumentNullException:page");
      }
      this.pdfPage = page;
      this.clipPageTemplates = true;
      if (typeof streamClipPageTemplates === "undefined") {
        this.content = new PdfStream();
      } else if (streamClipPageTemplates instanceof PdfStream || streamClipPageTemplates === null) {
        if (streamClipPageTemplates === null) {
          throw new Error("ArgumentNullException:stream");
        }
        this.content = streamClipPageTemplates;
      } else {
        this.content = new PdfStream();
        this.clipPageTemplates = streamClipPageTemplates;
      }
    }
    Object.defineProperty(PdfPageLayer2.prototype, "colorSpace", {
      // Properties
      /**
       * Get or set the `color space`.
       * @private
       */
      get: function() {
        return this.pdfColorSpace;
      },
      set: function(value) {
        this.pdfColorSpace = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "page", {
      /**
       * Gets parent `page` of the layer.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "layerId", {
      /**
       * Gets and Sets the `id of the layer`.
       * @private
       */
      get: function() {
        return this.layerid;
      },
      set: function(value) {
        this.layerid = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "name", {
      /**
       * Gets or sets the `name` of the layer.
       * @private
       */
      get: function() {
        return this.layerName;
      },
      set: function(value) {
        this.layerName = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "visible", {
      /**
       * Gets or sets the `visibility` of the layer.
       * @private
       */
      get: function() {
        return this.isVisible;
      },
      set: function(value) {
        this.isVisible = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "graphics", {
      /**
       * Gets `Graphics` context of the layer, used to draw various graphical content on layer.
       * @private
       */
      get: function() {
        if (this.pdfGraphics == null) {
          this.initializeGraphics(this.page);
        }
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageLayer2.prototype, "layers", {
      /**
       * Gets the collection of `PdfPageLayer`, this collection handle by the class 'PdfPageLayerCollection'.
       * @private
       */
      get: function() {
        if (this.layer == null) {
          this.layer = new PdfPageLayerCollection(this.page);
          this.layer.sublayer = true;
          return this.layer;
        } else {
          return this.layer;
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfPageLayer2.prototype.add = function() {
      var layer = new PdfPageLayer2(this.pdfPage);
      layer.name = "";
      return layer;
    };
    PdfPageLayer2.prototype.sign = function(number) {
      if (number === 0) {
        return 0;
      } else if (number > 0) {
        return 1;
      } else {
        return -1;
      }
    };
    PdfPageLayer2.prototype.initializeGraphics = function(page) {
      var oPage = page;
      var gr = new GetResourceEventHandler(this.page);
      var cropBox = null;
      this.pdfGraphics = new PdfGraphics(page.size, gr, this.content);
      this.pdfGraphics.mediaBoxUpperRightBound = 0;
      if (oPage != null) {
        var sc = oPage.section.parent;
        if (sc != null) {
          this.pdfGraphics.colorSpace = sc.document.colorSpace;
          this.colorSpace = sc.document.colorSpace;
        }
      }
      var isSame = this.sign(page.origin.y) === this.sign(page.origin.x);
      if (page.origin.x >= 0 && page.origin.y >= 0 || !isSame) {
        this.pdfGraphics.initializeCoordinates();
      } else {
      }
      var clipRect = oPage.section.getActualBounds(oPage, true);
      var margins = oPage.section.pageSettings.margins;
      if (this.clipPageTemplates) {
        if (page.origin.x >= 0 && page.origin.y >= 0) {
          this.pdfGraphics.clipTranslateMargins(clipRect);
        }
      } else {
        this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom);
      }
      this.pdfGraphics.setLayer(this);
    };
    Object.defineProperty(PdfPageLayer2.prototype, "element", {
      // IPdfWrapper Members
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.content;
      },
      enumerable: true,
      configurable: true
    });
    return PdfPageLayer2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-collection.js
var PdfCollection = (
  /** @class */
  function() {
    function PdfCollection2() {
    }
    Object.defineProperty(PdfCollection2.prototype, "count", {
      // Properties
      /**
       * Gets the `Count` of stored objects.
       * @private
       */
      get: function() {
        if (typeof this.collection === "undefined") {
          this.collection = [];
        }
        return this.collection.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCollection2.prototype, "list", {
      /**
       * Gets the `list` of stored objects.
       * @private
       */
      get: function() {
        if (typeof this.collection === "undefined") {
          this.collection = [];
        }
        return this.collection;
      },
      enumerable: true,
      configurable: true
    });
    return PdfCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer-collection.js
var __extends51 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPageLayerCollection = (
  /** @class */
  function(_super) {
    __extends51(PdfPageLayerCollection2, _super);
    function PdfPageLayerCollection2(page) {
      var _this = _super.call(this) || this;
      _this.parentLayerCount = 0;
      _this.sublayer = false;
      _this.optionalContent = new PdfDictionary();
      if (page instanceof PdfPageBase) {
        _this.page = page;
        var lPage = page;
        _this.parseLayers(lPage);
      }
      return _this;
    }
    PdfPageLayerCollection2.prototype.items = function(index, value) {
      if (typeof index === "number" && typeof value === "undefined") {
        var obj = this.list[index];
        return obj;
      } else {
        if (value == null) {
          throw new Error("ArgumentNullException: layer");
        }
        if (value.page !== this.page) {
          throw new Error("ArgumentException: The layer belongs to another page");
        }
      }
    };
    PdfPageLayerCollection2.prototype.add = function(firstArgument, secondArgument) {
      if (typeof firstArgument === "undefined") {
        var layer = new PdfPageLayer(this.page);
        layer.name = "";
        this.add(layer);
        return layer;
      } else if (firstArgument instanceof PdfPageLayer) {
        var index = this.list.push(firstArgument);
        this.addLayer(index, firstArgument);
        return index;
      } else {
        return 0;
      }
    };
    PdfPageLayerCollection2.prototype.addLayer = function(index, layer) {
      var reference = new PdfReferenceHolder(layer);
      this.page.contents.add(reference);
    };
    PdfPageLayerCollection2.prototype.insert = function(index, layer) {
      var list = [];
      var length = this.list.length;
      for (var i = index; i < length; i++) {
        list.push(this.list.pop());
      }
      this.list.push(layer);
      for (var i = 0; i < list.length; i++) {
        this.list.push(list[i]);
      }
      this.insertLayer(index, layer);
    };
    PdfPageLayerCollection2.prototype.insertLayer = function(index, layer) {
      if (layer == null) {
        throw new Error("ArgumentNullException:layer");
      }
      var reference = new PdfReferenceHolder(layer);
      this.page.contents.insert(index, reference);
    };
    PdfPageLayerCollection2.prototype.parseLayers = function(loadedPage) {
      var contents = this.page.contents;
      var resource = this.page.getResources();
      var crossTable = null;
      var ocproperties = null;
      var propertie = null;
      var isLayerAdded = false;
      crossTable = loadedPage.crossTable;
      var saveStream = new PdfStream();
      var restoreStream = new PdfStream();
      var saveState = "q";
      var newLine = "\n";
      var restoreState = "Q";
      var saveData = [];
      saveData.push(saveState);
      saveStream.data = saveData;
      contents.insert(0, new PdfReferenceHolder(saveStream));
      saveData = [];
      saveData.push(restoreState);
      restoreStream.data = saveData;
      contents.insert(contents.count, new PdfReferenceHolder(restoreStream));
    };
    PdfPageLayerCollection2.prototype.indexOf = function(layer) {
      if (layer == null) {
        throw new Error("ArgumentNullException: layer");
      }
      var index = this.list.indexOf(layer);
      return index;
    };
    return PdfPageLayerCollection2;
  }(PdfCollection)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-base.js
var PdfPageBase = (
  /** @class */
  function() {
    function PdfPageBase2(dictionary) {
      this.defLayerIndex = -1;
      this.modified = false;
      this.dictionaryProperties = new DictionaryProperties();
      this.pageDictionary = dictionary;
    }
    Object.defineProperty(PdfPageBase2.prototype, "section", {
      //Properties
      /**
       * Gets the `section` of a page.
       * @private
       */
      get: function() {
        return this.pdfSection;
      },
      set: function(value) {
        this.pdfSection = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "dictionary", {
      /**
       * Gets the page `dictionary`.
       * @private
       */
      get: function() {
        return this.pageDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "element", {
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.pageDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "defaultLayer", {
      /**
       * Gets the `default layer` of the page (Read only).
       * @private
       */
      get: function() {
        var layer = this.layers;
        var index = this.defaultLayerIndex;
        var returnlayer = layer.items(index);
        return returnlayer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "defaultLayerIndex", {
      /**
       * Gets or sets `index of the default layer`.
       * @private
       */
      get: function() {
        if (this.layerCollection.count === 0 || this.defLayerIndex === -1) {
          var layer = this.layerCollection.add();
          this.defLayerIndex = this.layerCollection.indexOf(layer);
        }
        return this.defLayerIndex;
      },
      /**
       * Gets or sets` index of the default layer`.
       * @private
       */
      set: function(value) {
        if (value < 0 || value > this.layers.count - 1) {
          throw new Error("ArgumentOutOfRangeException : value, Index can not be less 0 and greater Layers.Count - 1");
        } else {
          this.defLayerIndex = value;
          this.modified = true;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageBase2.prototype, "layers", {
      /**
       * Gets the collection of the page's `layers` (Read only).
       * @private
       */
      get: function() {
        if (this.layerCollection == null || typeof this.layerCollection === "undefined") {
          this.layerCollection = new PdfPageLayerCollection(this);
        }
        return this.layerCollection;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageBase2.prototype.getResources = function() {
      if (this.resources == null) {
        this.resources = new PdfResources();
        this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);
      }
      return this.resources;
    };
    Object.defineProperty(PdfPageBase2.prototype, "contents", {
      /**
       * Gets `array of page's content`.
       * @private
       */
      get: function() {
        var obj = this.pageDictionary.items.getValue(this.dictionaryProperties.contents);
        var contents = obj;
        var rh = obj;
        if (contents == null) {
          contents = new PdfArray();
          this.pageDictionary.items.setValue(this.dictionaryProperties.contents, contents);
        }
        return contents;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageBase2.prototype.setResources = function(res) {
      this.resources = res;
      this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);
      this.modified = true;
    };
    return PdfPageBase2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/annotation-collection.js
var PdfAnnotationCollection = (
  /** @class */
  function() {
    function PdfAnnotationCollection2(page) {
      this.alreadyExistsAnnotationError = "This annotatation had been already added to page";
      this.missingAnnotationException = "Annotation is not contained in collection.";
      this.dictionaryProperties = new DictionaryProperties();
      this.internalAnnotations = new PdfArray();
      this.lists = [];
      if (typeof page !== "undefined") {
        this.page = page;
      }
    }
    Object.defineProperty(PdfAnnotationCollection2.prototype, "annotations", {
      /**
       * Gets the `PdfAnnotation` object at the specified index. Read-Only.
       * @private
       */
      get: function() {
        return this.internalAnnotations;
      },
      set: function(value) {
        this.internalAnnotations = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfAnnotationCollection2.prototype.add = function(annotation) {
      this.doAdd(annotation);
    };
    PdfAnnotationCollection2.prototype.doAdd = function(annotation) {
      if (typeof annotation.destination !== "undefined") {
        var layout = new PdfStringLayouter();
        var layoutResult = layout.layout(annotation.text, annotation.font, annotation.stringFormat, new SizeF(annotation.bounds.width, 0), false, new SizeF(0, 0));
        var lastPosition = annotation.bounds.y;
        if (layoutResult.lines.length === 1) {
          var size = annotation.font.measureString(layoutResult.lines[0].text);
          annotation.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);
          annotation.text = layoutResult.lines[0].text;
          this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, annotation.bounds.y, annotation.bounds.width, annotation.bounds.height, null);
          annotation.setPage(this.page);
          this.setColor(annotation);
          this.internalAnnotations.add(new PdfReferenceHolder(annotation));
          this.lists.push(annotation);
        } else {
          for (var i = 0; i < layoutResult.lines.length; i++) {
            var size = annotation.font.measureString(layoutResult.lines[i].text);
            if (i === 0) {
              annotation.bounds = new RectangleF(annotation.bounds.x, lastPosition, size.width, size.height);
              annotation.text = layoutResult.lines[i].text;
              this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, lastPosition, size.width, size.height, null);
              annotation.setPage(this.page);
              this.setColor(annotation);
              this.internalAnnotations.add(new PdfReferenceHolder(annotation));
              this.lists.push(annotation);
              lastPosition += annotation.bounds.height;
            } else {
              var annot = annotation.clone();
              annot.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);
              annot.text = layoutResult.lines[i].text;
              this.page.graphics.drawString(annot.text, annot.font, null, annot.brush, annot.bounds.x, annot.bounds.y, annot.bounds.width, annot.bounds.height, null);
              annot.setPage(this.page);
              this.setColor(annot);
              this.internalAnnotations.add(new PdfReferenceHolder(annot));
              this.lists.push(annot);
              lastPosition += annot.bounds.height;
            }
          }
        }
      } else {
        annotation.setPage(this.page);
        this.internalAnnotations.add(new PdfReferenceHolder(annotation));
        return this.lists.push(annotation);
      }
    };
    PdfAnnotationCollection2.prototype.setColor = function(annotation) {
      var cs = PdfColorSpace.Rgb;
      var colours = annotation.color.toArray(cs);
      annotation.dictionary.items.setValue(this.dictionaryProperties.c, colours);
    };
    Object.defineProperty(PdfAnnotationCollection2.prototype, "element", {
      // IPdfWrapper Members
      /**
       * Gets the `Element` representing this object.
       * @private
       */
      get: function() {
        return this.internalAnnotations;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAnnotationCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page.js
var __extends52 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPage = (
  /** @class */
  function(_super) {
    __extends52(PdfPage2, _super);
    function PdfPage2() {
      var _this = _super.call(this, new PdfDictionary()) || this;
      _this.annotationCollection = null;
      _this.beginSave = null;
      _this.initialize();
      return _this;
    }
    Object.defineProperty(PdfPage2.prototype, "document", {
      //Properties
      /**
       * Gets current `document`.
       * @private
       */
      get: function() {
        if (this.section !== null && this.section.parent !== null) {
          return this.section.parent.document;
        } else {
          return null;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "graphics", {
      /**
       * Get the current `graphics`.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // add a new page to the document
       * let page1 : PdfPage = document.pages.add();
       * //
       * // get graphics
       * let graphics : PdfGraphics = page1.graphics;
       * //
       * // set the font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // create black brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * // draw the text
       * graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        var result = this.defaultLayer.graphics;
        result.currentPage = this;
        return result;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "crossTable", {
      /**
       * Gets the `cross table`.
       * @private
       */
      get: function() {
        if (this.section === null) {
          throw new Error("PdfDocumentException : Page is not created");
        }
        return this.section.parent === null ? this.section.parentDocument.crossTable : this.section.parent.document.crossTable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "size", {
      /**
       * Gets the size of the PDF page- Read only.
       * @public
       */
      get: function() {
        return this.section.pageSettings.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "origin", {
      /**
       * Gets the `origin` of the page.
       * @private
       */
      get: function() {
        return this.section.pageSettings.origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPage2.prototype, "annotations", {
      /**
       * Gets a collection of the `annotations` of the page- Read only.
       * @private
       */
      get: function() {
        if (this.annotationCollection == null) {
          this.annotationCollection = new PdfAnnotationCollection(this);
          this.dictionary.items.setValue(this.dictionaryProperties.annots, this.annotationCollection.element);
          this.annotationCollection.annotations = this.dictionary.items.getValue(this.dictionaryProperties.annots);
        }
        return this.annotationCollection;
      },
      enumerable: true,
      configurable: true
    });
    PdfPage2.prototype.initialize = function() {
      this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName("Page"));
      this.dictionary.pageBeginDrawTemplate = new SaveTemplateEventHandler(this);
    };
    PdfPage2.prototype.setSection = function(section) {
      this.section = section;
      this.dictionary.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(section));
    };
    PdfPage2.prototype.resetProgress = function() {
      this.isProgressOn = false;
    };
    PdfPage2.prototype.getClientSize = function() {
      var returnValue = this.section.getActualBounds(this, true);
      return new SizeF(returnValue.width, returnValue.height);
    };
    PdfPage2.prototype.pageBeginSave = function() {
      var doc = this.document;
      if (typeof doc !== void 0 && doc != null) {
        this.drawPageTemplates(doc);
      }
      if (this.beginSave != null && typeof this.beginSave !== "undefined") {
        this.beginSave(this);
      }
    };
    PdfPage2.prototype.drawPageTemplates = function(document2) {
      var hasBackTemplates = this.section.containsTemplates(document2, this, false);
      if (hasBackTemplates) {
        var backLayer = new PdfPageLayer(this, false);
        this.layers.insert(0, backLayer);
        this.section.drawTemplates(this, backLayer, document2, false);
        if (backLayer.graphics !== null && typeof backLayer.graphics !== "undefined") {
          for (var i = 0; i < backLayer.graphics.automaticFields.automaticFields.length; i++) {
            var fieldInfo = backLayer.graphics.automaticFields.automaticFields[i];
            fieldInfo.field.performDraw(backLayer.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);
          }
        }
      }
      var hasFrontTemplates = this.section.containsTemplates(document2, this, true);
      if (hasFrontTemplates) {
        var frontLayer = new PdfPageLayer(this, false);
        this.layers.add(frontLayer);
        this.section.drawTemplates(this, frontLayer, document2, true);
      }
    };
    return PdfPage2;
  }(PdfPageBase)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/page-added-event-arguments.js
var PageAddedEventArgs = (
  /** @class */
  function() {
    function PageAddedEventArgs2(page) {
      if (typeof page !== "undefined") {
        this.pdfPage = page;
      } else {
        this.pdfPage = null;
      }
    }
    Object.defineProperty(PageAddedEventArgs2.prototype, "page", {
      /**
       * Gets the `newly added page`.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    return PageAddedEventArgs2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-page-collection.js
var PdfSectionPageCollection = (
  /** @class */
  function() {
    function PdfSectionPageCollection2(section) {
      this.pdfSection = null;
      if (section == null) {
        throw Error('ArgumentNullException("section")');
      }
      this.section = section;
    }
    Object.defineProperty(PdfSectionPageCollection2.prototype, "section", {
      // Properties
      /**
       * Gets the `PdfPage` at the specified index.
       * @private
       */
      get: function() {
        return this.pdfSection;
      },
      set: function(value) {
        this.pdfSection = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfSectionPageCollection2.prototype.contains = function(page) {
      return this.section.contains(page);
    };
    PdfSectionPageCollection2.prototype.remove = function(page) {
      this.section.remove(page);
    };
    PdfSectionPageCollection2.prototype.add = function() {
      return this.section.add();
    };
    return PdfSectionPageCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-template.js
var PdfDocumentTemplate = (
  /** @class */
  function() {
    function PdfDocumentTemplate2() {
    }
    Object.defineProperty(PdfDocumentTemplate2.prototype, "left", {
      // private m_stamps : PdfStampCollection;
      // Properties
      /**
       * `Left` page template object.
       * @public
       */
      get: function() {
        return this.leftTemplate;
      },
      set: function(value) {
        this.leftTemplate = this.checkElement(value, TemplateType.Left);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "top", {
      /**
       * `Top` page template object.
       * @public
       */
      get: function() {
        return this.topTemplate;
      },
      set: function(value) {
        this.topTemplate = this.checkElement(value, TemplateType.Top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "right", {
      /**
       * `Right` page template object.
       * @public
       */
      get: function() {
        return this.rightTemplate;
      },
      set: function(value) {
        this.rightTemplate = this.checkElement(value, TemplateType.Right);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "bottom", {
      /**
       * `Bottom` page template object.
       * @public
       */
      get: function() {
        return this.bottomTemplate;
      },
      set: function(value) {
        this.bottomTemplate = this.checkElement(value, TemplateType.Bottom);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenLeft", {
      /**
       * `EvenLeft` page template object.
       * @public
       */
      get: function() {
        return this.evenLeft;
      },
      set: function(value) {
        this.evenLeft = this.checkElement(value, TemplateType.Left);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenTop", {
      /**
       * `EvenTop` page template object.
       * @public
       */
      get: function() {
        return this.evenTop;
      },
      set: function(value) {
        this.evenTop = this.checkElement(value, TemplateType.Top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenRight", {
      /**
       * `EvenRight` page template object.
       * @public
       */
      get: function() {
        return this.evenRight;
      },
      set: function(value) {
        this.evenRight = this.checkElement(value, TemplateType.Right);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "EvenBottom", {
      /**
       * `EvenBottom` page template object.
       * @public
       */
      get: function() {
        return this.evenBottom;
      },
      set: function(value) {
        this.evenBottom = this.checkElement(value, TemplateType.Bottom);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddLeft", {
      /**
       * `OddLeft` page template object.
       * @public
       */
      get: function() {
        return this.oddLeft;
      },
      set: function(value) {
        this.oddLeft = this.checkElement(value, TemplateType.Left);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddTop", {
      /**
       * `OddTop` page template object.
       * @public
       */
      get: function() {
        return this.oddTop;
      },
      set: function(value) {
        this.oddTop = this.checkElement(value, TemplateType.Top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddRight", {
      /**
       * `OddRight` page template object.
       * @public
       */
      get: function() {
        return this.oddRight;
      },
      set: function(value) {
        this.oddRight = this.checkElement(value, TemplateType.Right);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentTemplate2.prototype, "OddBottom", {
      /**
       * `OddBottom` page template object.
       * @public
       */
      get: function() {
        return this.oddBottom;
      },
      set: function(value) {
        this.oddBottom = this.checkElement(value, TemplateType.Bottom);
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentTemplate2.prototype.getLeft = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenLeft != null ? this.EvenLeft : this.left;
      } else {
        template = this.OddLeft != null ? this.OddLeft : this.left;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.getTop = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenTop != null ? this.EvenTop : this.top;
      } else {
        template = this.OddTop != null ? this.OddTop : this.top;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.getRight = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenRight != null ? this.EvenRight : this.right;
      } else {
        template = this.OddRight != null ? this.OddRight : this.right;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.getBottom = function(page) {
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var template = null;
      var even = this.isEven(page);
      if (even) {
        template = this.EvenBottom != null ? this.EvenBottom : this.bottom;
      } else {
        template = this.OddBottom != null ? this.OddBottom : this.bottom;
      }
      return template;
    };
    PdfDocumentTemplate2.prototype.isEven = function(page) {
      var pages = page.section.document.pages;
      var index = 0;
      if (pages.pageCollectionIndex.containsKey(page)) {
        index = pages.pageCollectionIndex.getValue(page) + 1;
      } else {
        index = pages.indexOf(page) + 1;
      }
      var even = index % 2 === 0;
      return even;
    };
    PdfDocumentTemplate2.prototype.checkElement = function(templateElement, type) {
      if (templateElement != null) {
        if (typeof templateElement.type !== "undefined" && templateElement.type !== TemplateType.None) {
          throw new Error("NotSupportedException:Can not reassign the template element. Please, create new one.");
        }
        templateElement.type = type;
      }
      return templateElement;
    };
    return PdfDocumentTemplate2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-templates.js
var __extends53 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSectionTemplate = (
  /** @class */
  function(_super) {
    __extends53(PdfSectionTemplate2, _super);
    function PdfSectionTemplate2() {
      var _this = _super.call(this) || this;
      _this.leftValue = _this.topValue = _this.rightValue = _this.bottomValue = _this.stampValue = true;
      return _this;
    }
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentLeftTemplate", {
      // Properties
      /**
       * Gets or sets value indicating whether parent `Left page template should be used or not`.
       * @private
       */
      get: function() {
        return this.leftValue;
      },
      set: function(value) {
        this.leftValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentTopTemplate", {
      /**
       * Gets or sets value indicating whether parent `Top page template should be used or not`.
       * @private
       */
      get: function() {
        return this.topValue;
      },
      set: function(value) {
        this.topValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentRightTemplate", {
      /**
       * Gets or sets value indicating whether parent `Right page template should be used or not`.
       * @private
       */
      get: function() {
        return this.rightValue;
      },
      set: function(value) {
        this.rightValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentBottomTemplate", {
      /**
       * Gets or sets value indicating whether parent `Bottom page template should be used or not`.
       * @private
       */
      get: function() {
        return this.bottomValue;
      },
      set: function(value) {
        this.bottomValue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionTemplate2.prototype, "applyDocumentStamps", {
      /**
       * Gets or sets value indicating whether the `stamp value` is true or not.
       * @private
       */
      get: function() {
        return this.stampValue;
      },
      set: function(value) {
        this.stampValue = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfSectionTemplate2;
  }(PdfDocumentTemplate)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section.js
var PdfSection = (
  /** @class */
  function() {
    function PdfSection2(document2, pageSettings) {
      this.pageAdded = new PageAddedEventArgs();
      this.pdfPages = [];
      this.dictionaryProperties = new DictionaryProperties();
      this.pdfDocument = document2;
      if (typeof pageSettings === "undefined") {
        this.settings = document2.pageSettings.clone();
        this.initialSettings = this.settings.clone();
      } else {
        this.settings = pageSettings.clone();
        this.initialSettings = this.settings.clone();
      }
      this.initialize();
    }
    Object.defineProperty(PdfSection2.prototype, "parent", {
      //Property
      /**
       * Gets or sets the `parent`.
       * @private
       */
      get: function() {
        return this.sectionCollection;
      },
      set: function(value) {
        this.sectionCollection = value;
        this.section.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(value));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "parentDocument", {
      /**
       * Gets the `parent document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "pageSettings", {
      /**
       * Gets or sets the `page settings` of the section.
       * @private
       */
      get: function() {
        return this.settings;
      },
      set: function(value) {
        if (value != null) {
          this.settings = value;
        } else {
          throw Error("Value can not be null.");
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "element", {
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.section;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "count", {
      /**
       * Gets the `count` of the pages in the section.
       * @private
       */
      get: function() {
        return this.pagesReferences.count;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "template", {
      /**
       * Gets or sets a `template` for the pages in the section.
       * @private
       */
      get: function() {
        if (this.pageTemplate == null) {
          this.pageTemplate = new PdfSectionTemplate();
        }
        return this.pageTemplate;
      },
      set: function(value) {
        this.pageTemplate = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "document", {
      /**
       * Gets the `document`.
       * @private
       */
      get: function() {
        return this.sectionCollection.document;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSection2.prototype, "pages", {
      /**
       * Gets the collection of `pages` in a section (Read only)
       * @private
       */
      get: function() {
        if (this.pagesCollection == null || typeof this.pagesCollection === "undefined") {
          this.pagesCollection = new PdfSectionPageCollection(this);
        }
        return this.pagesCollection;
      },
      enumerable: true,
      configurable: true
    });
    PdfSection2.prototype.getPages = function() {
      return this.pdfPages;
    };
    PdfSection2.prototype.pointToNativePdf = function(page, point) {
      var bounds = this.getActualBounds(page, true);
      point.x += bounds.x;
      point.y = this.pageSettings.height - point.y;
      return point;
    };
    PdfSection2.prototype.setPageSettings = function(settings) {
      this.settings = settings;
      this.state.orientation = settings.orientation;
      this.state.rotate = settings.rotate;
      this.state.size = settings.size;
      this.state.origin = settings.origin;
    };
    PdfSection2.prototype.initialize = function() {
      this.pagesReferences = new PdfArray();
      this.section = new PdfDictionary();
      this.state = new PageSettingsState(this.pdfDocument);
      this.section.sectionBeginSave = new SaveSectionEventHandler(this, this.state);
      this.pageCount = new PdfNumber(0);
      this.section.items.setValue(this.dictionaryProperties.count, this.pageCount);
      this.section.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.pages));
      this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);
    };
    PdfSection2.prototype.containsTemplates = function(document2, page, foreground) {
      var documentHeaders = this.getDocumentTemplates(document2, page, foreground);
      var sectionTemplates = this.getSectionTemplates(page, foreground);
      return documentHeaders.length > 0 || sectionTemplates.length > 0;
    };
    PdfSection2.prototype.getDocumentTemplates = function(document2, page, foreground) {
      var templates = [];
      if (this.template.applyDocumentTopTemplate && document2.template.getTop(page) != null) {
        if (!(document2.template.getTop(page).foreground || foreground) || document2.template.getTop(page).foreground && foreground) {
          templates.push(document2.template.getTop(page));
        }
      }
      if (this.template.applyDocumentBottomTemplate && document2.template.getBottom(page) != null) {
        if (!(document2.template.getBottom(page).foreground || foreground) || document2.template.getBottom(page).foreground && foreground) {
          templates.push(document2.template.getBottom(page));
        }
      }
      if (this.template.applyDocumentLeftTemplate && document2.template.getLeft(page) != null) {
        if (!(document2.template.getLeft(page).foreground || foreground) || document2.template.getLeft(page).foreground && foreground) {
          templates.push(document2.template.getLeft(page));
        }
      }
      if (this.template.applyDocumentRightTemplate && document2.template.getRight(page) != null) {
        if (!(document2.template.getRight(page).foreground || foreground) || document2.template.getRight(page).foreground && foreground) {
          templates.push(document2.template.getRight(page));
        }
      }
      return templates;
    };
    PdfSection2.prototype.getSectionTemplates = function(page, foreground) {
      var templates = [];
      if (this.template.getTop(page) != null) {
        var pageTemplate = this.template.getTop(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      if (this.template.getBottom(page) != null) {
        var pageTemplate = this.template.getBottom(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      if (this.template.getLeft(page) != null) {
        var pageTemplate = this.template.getLeft(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      if (this.template.getRight(page) != null) {
        var pageTemplate = this.template.getRight(page);
        if (!(pageTemplate.foreground || foreground) || pageTemplate.foreground && foreground) {
          templates.push(pageTemplate);
        }
      }
      return templates;
    };
    PdfSection2.prototype.add = function(page) {
      if (typeof page === "undefined") {
        var page_1 = new PdfPage();
        this.add(page_1);
        return page_1;
      } else {
        var r = this.checkPresence(page);
        this.pdfPages.push(page);
        this.pagesReferences.add(r);
        page.setSection(this);
        page.resetProgress();
        this.pageAddedMethod(page);
      }
    };
    PdfSection2.prototype.checkPresence = function(page) {
      var rh = new PdfReferenceHolder(page);
      var contains = false;
      var sc = this.parent;
      for (var index = 0; index < sc.section.length; index++) {
        var section = sc.section[index];
        contains = contains || section.contains(page);
      }
      return rh;
    };
    PdfSection2.prototype.contains = function(page) {
      var index = this.indexOf(page);
      return 0 <= index;
    };
    PdfSection2.prototype.indexOf = function(page) {
      for (var index = 0; index < this.pdfPages.length; index++) {
        if (this.pdfPages[index] === page) {
          return this.pdfPages.indexOf(page);
        }
      }
      var r = new PdfReferenceHolder(page);
      return this.pagesReferences.indexOf(r);
    };
    PdfSection2.prototype.pageAddedMethod = function(page) {
      var args = new PageAddedEventArgs(page);
      this.onPageAdded(args);
      var parent = this.parent;
      parent.document.pages.onPageAdded(args);
      this.pageCount.intValue = this.count;
    };
    PdfSection2.prototype.onPageAdded = function(args) {
    };
    PdfSection2.prototype.getActualBounds = function(arg1, arg2, arg3) {
      if (arg1 instanceof PdfPage && typeof arg2 === "boolean") {
        var result = void 0;
        var document_1 = this.parent.document;
        result = this.getActualBounds(document_1, arg1, arg2);
        return result;
      } else {
        arg1 = arg1;
        arg2 = arg2;
        arg3 = arg3;
        var bounds = new RectangleF(0, 0, 0, 0);
        bounds.height = arg3 ? this.pageSettings.size.height : this.pageSettings.getActualSize().height;
        bounds.width = arg3 ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;
        var left = this.getLeftIndentWidth(arg1, arg2, arg3);
        var top_1 = this.getTopIndentHeight(arg1, arg2, arg3);
        var right = this.getRightIndentWidth(arg1, arg2, arg3);
        var bottom = this.getBottomIndentHeight(arg1, arg2, arg3);
        bounds.x += left;
        bounds.y += top_1;
        bounds.width -= left + right;
        bounds.height -= top_1 + bottom;
        return bounds;
      }
    };
    PdfSection2.prototype.getLeftIndentWidth = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.left : 0;
      var templateWidth = this.template.getLeft(page) != null ? this.template.getLeft(page).width : 0;
      var docTemplateWidth = document2.template.getLeft(page) != null ? document2.template.getLeft(page).width : 0;
      value += this.template.applyDocumentLeftTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
      return value;
    };
    PdfSection2.prototype.getTopIndentHeight = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.top : 0;
      var templateHeight = this.template.getTop(page) != null ? this.template.getTop(page).height : 0;
      var docTemplateHeight = document2.template.getTop(page) != null ? document2.template.getTop(page).height : 0;
      value += this.template.applyDocumentTopTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
      return value;
    };
    PdfSection2.prototype.getRightIndentWidth = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.right : 0;
      var templateWidth = this.template.getRight(page) != null ? this.template.getRight(page).width : 0;
      var docTemplateWidth = document2.template.getRight(page) != null ? document2.template.getRight(page).width : 0;
      value += this.template.applyDocumentRightTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
      return value;
    };
    PdfSection2.prototype.getBottomIndentHeight = function(document2, page, includeMargins) {
      if (document2 == null) {
        throw new Error("ArgumentNullException:document");
      }
      if (page == null) {
        throw new Error("ArgumentNullException:page");
      }
      var value = includeMargins ? this.pageSettings.margins.bottom : 0;
      var templateHeight = this.template.getBottom(page) != null ? this.template.getBottom(page).height : 0;
      var docTemplateHeight = document2.template.getBottom(page) != null ? document2.template.getBottom(page).height : 0;
      value += this.template.applyDocumentBottomTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
      return value;
    };
    PdfSection2.prototype.remove = function(page) {
      if (page == null) {
        throw Error('ArgumentNullException("page")');
      }
      var index = this.pdfPages.indexOf(page);
      this.pagesReferences.removeAt(index);
      var temproaryPages = [];
      for (var j = 0; j < index; j++) {
        temproaryPages.push(this.pdfPages[j]);
      }
      for (var j = index + 1; j < this.pdfPages.length; j++) {
        temproaryPages.push(this.pdfPages[j]);
      }
      this.pdfPages = temproaryPages;
    };
    PdfSection2.prototype.applyPageSettings = function(container, parentSettings, state) {
      var bounds = new RectangleF(state.origin, state.size);
      container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));
      var rotate = 0;
      rotate = PdfSectionCollection.rotateFactor * state.rotate;
      var angle = new PdfNumber(rotate);
      container.items.setValue(this.dictionaryProperties.rotate, angle);
    };
    PdfSection2.prototype.beginSave = function(state, writer) {
      var doc = writer.document;
      this.applyPageSettings(this.section, doc.pageSettings, state);
    };
    PdfSection2.prototype.drawTemplates = function(page, layer, document2, foreground) {
      var documentHeaders = this.getDocumentTemplates(document2, page, foreground);
      var sectionHeaders = this.getSectionTemplates(page, foreground);
      this.drawTemplatesHelper(layer, document2, documentHeaders);
      this.drawTemplatesHelper(layer, document2, sectionHeaders);
    };
    PdfSection2.prototype.drawTemplatesHelper = function(layer, document2, templates) {
      if (templates != null && templates.length > 0) {
        var len = templates.length;
        for (var i = 0; i < len; i++) {
          var template = templates[i];
          template.draw(layer, document2);
        }
      }
    };
    return PdfSection2;
  }()
);
var PageSettingsState = (
  /** @class */
  function() {
    function PageSettingsState2(document2) {
      this.pageOrientation = document2.pageSettings.orientation;
      this.pageRotate = document2.pageSettings.rotate;
      this.pageSize = document2.pageSettings.size;
      this.pageOrigin = document2.pageSettings.origin;
    }
    Object.defineProperty(PageSettingsState2.prototype, "orientation", {
      //public Properties
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageOrientation;
      },
      set: function(value) {
        this.pageOrientation = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PageSettingsState2.prototype, "rotate", {
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageRotate;
      },
      set: function(value) {
        this.pageRotate = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PageSettingsState2.prototype, "size", {
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageSize;
      },
      set: function(value) {
        this.pageSize = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PageSettingsState2.prototype, "origin", {
      /**
       * @hidden
       * @private
       */
      get: function() {
        return this.pageOrigin;
      },
      set: function(value) {
        this.pageOrigin = value;
      },
      enumerable: true,
      configurable: true
    });
    return PageSettingsState2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-collection.js
var PdfSectionCollection = (
  /** @class */
  function() {
    function PdfSectionCollection2(document2) {
      this.sections = [];
      this.dictionaryProperties = new DictionaryProperties();
      this.pdfDocument = document2.clone();
      this.initialize();
    }
    Object.defineProperty(PdfSectionCollection2.prototype, "section", {
      //Properties
      /**
       * Gets the `Section` collection.
       */
      get: function() {
        return this.sections;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionCollection2.prototype, "document", {
      /**
       * Gets a parent `document`.
       * @private
       */
      get: function() {
        return this.pdfDocument;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionCollection2.prototype, "count", {
      /**
       * Gets the `number of sections` in a document.
       * @private
       */
      get: function() {
        return this.sections.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfSectionCollection2.prototype, "element", {
      /**
       * Gets the wrapped `element`.
       * @private
       */
      get: function() {
        return this.pages;
      },
      enumerable: true,
      configurable: true
    });
    PdfSectionCollection2.prototype.initialize = function() {
      this.sectionCount = new PdfNumber(0);
      this.sectionCollection = new PdfArray();
      this.pages = new PdfDictionary();
      this.pages.beginSave = new SaveSectionCollectionEventHandler(this);
      this.pages.items.setValue(this.dictionaryProperties.type, new PdfName("Pages"));
      this.pages.items.setValue(this.dictionaryProperties.kids, this.sectionCollection);
      this.pages.items.setValue(this.dictionaryProperties.count, this.sectionCount);
      this.pages.items.setValue(this.dictionaryProperties.resources, new PdfDictionary());
      this.setPageSettings(this.pages, this.pdfDocument.pageSettings);
    };
    PdfSectionCollection2.prototype.pdfSectionCollection = function(index) {
      if (index < 0 || index >= this.count) {
        throw new Error("IndexOutOfRangeException()");
      }
      return this.sections[index];
    };
    PdfSectionCollection2.prototype.setPageSettings = function(container, pageSettings) {
      var bounds = new RectangleF(new PointF(), pageSettings.size);
      container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));
    };
    PdfSectionCollection2.prototype.add = function(section) {
      if (typeof section === "undefined") {
        var section_1 = new PdfSection(this.pdfDocument);
        this.add(section_1);
        return section_1;
      } else {
        var r = this.checkSection(section);
        this.sections.push(section);
        section.parent = this;
        this.sectionCollection.add(r);
        return this.sections.indexOf(section);
      }
    };
    PdfSectionCollection2.prototype.checkSection = function(section) {
      var r = new PdfReferenceHolder(section);
      var contains = this.sectionCollection.contains(r);
      return r;
    };
    PdfSectionCollection2.prototype.countPages = function() {
      var count2 = 0;
      this.sections.forEach(function(n) {
        return count2 += n.count;
      });
      return count2;
    };
    PdfSectionCollection2.prototype.beginSave = function() {
      this.sectionCount.intValue = this.countPages();
    };
    PdfSectionCollection2.rotateFactor = 90;
    return PdfSectionCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-document-page-collection.js
var PdfDocumentPageCollection = (
  /** @class */
  function() {
    function PdfDocumentPageCollection2(document2) {
      this.pdfPageCollectionIndex = new Dictionary();
      this.document = document2;
    }
    Object.defineProperty(PdfDocumentPageCollection2.prototype, "count", {
      //Property
      /**
       * Gets the total `number of the pages`.
       * @private
       */
      get: function() {
        return this.countPages();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocumentPageCollection2.prototype, "pageCollectionIndex", {
      /**
       * Gets a `page index` from the document.
       * @private
       */
      get: function() {
        return this.pdfPageCollectionIndex;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentPageCollection2.prototype.add = function(page) {
      if (typeof page === "undefined") {
        var page_1 = new PdfPage();
        this.add(page_1);
        return page_1;
      } else {
        var section = this.getLastSection();
        section.add(page);
      }
    };
    PdfDocumentPageCollection2.prototype.getLastSection = function() {
      var sc = this.document.sections;
      if (sc.section.length === 0) {
        sc.add();
      }
      var section = sc.section[sc.section.length - 1];
      return section;
    };
    PdfDocumentPageCollection2.prototype.onPageAdded = function(args) {
    };
    PdfDocumentPageCollection2.prototype.countPages = function() {
      var sc = this.document.sections;
      var count2 = 0;
      for (var index = 0; index < sc.section.length; index++) {
        count2 += sc.section[index].count;
      }
      return count2;
    };
    PdfDocumentPageCollection2.prototype.getPageByIndex = function(index) {
      return this.getPage(index);
    };
    PdfDocumentPageCollection2.prototype.getPage = function(index) {
      if (index < 0 || index >= this.count) {
        throw Error('ArgumentOutOfRangeException("index", "Value can not be less 0")');
      }
      var page = null;
      var sectionStartIndex = 0;
      var sectionCount = 0;
      var pageIndex = 0;
      var length = this.document.sections.count;
      for (var i = 0; i < length; i++) {
        var section = this.document.sections.section[i];
        sectionCount = section.count;
        pageIndex = index - sectionStartIndex;
        if (index >= sectionStartIndex && pageIndex < sectionCount) {
          page = section.getPages()[pageIndex];
          break;
        }
        sectionStartIndex += sectionCount;
      }
      return page;
    };
    PdfDocumentPageCollection2.prototype.indexOf = function(page) {
      var index = -1;
      if (page == null) {
        throw new Error("ArgumentNullException: page");
      } else {
        var numPages = 0;
        for (var i = 0, len = this.document.sections.count; i < len; i++) {
          var section = this.document.sections.pdfSectionCollection(i);
          index = section.indexOf(page);
          if (index >= 0) {
            index += numPages;
            break;
          } else {
            index = -1;
          }
          numPages += section.count;
        }
      }
      return index;
    };
    PdfDocumentPageCollection2.prototype.remove = function(page) {
      if (page == null) {
        throw Error('ArgumentNullException("page")');
      }
      var section = null;
      var len;
      for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {
        section = this.document.sections.pdfSectionCollection(i);
        if (section.pages.contains(page)) {
          section.pages.remove(page);
          break;
        }
      }
      return section;
    };
    return PdfDocumentPageCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-cache-collection.js
var PdfCacheCollection = (
  /** @class */
  function() {
    function PdfCacheCollection2() {
      this.referenceObjects = [];
      this.pdfFontCollection = new Dictionary();
    }
    PdfCacheCollection2.prototype.search = function(obj) {
      var result = null;
      var group = this.getGroup(obj);
      if (group == null) {
        group = this.createNewGroup();
      } else if (group.length > 0) {
        result = group[0];
      }
      group.push(obj);
      return result;
    };
    PdfCacheCollection2.prototype.createNewGroup = function() {
      var group = [];
      this.referenceObjects.push(group);
      return group;
    };
    PdfCacheCollection2.prototype.getGroup = function(result) {
      var group = null;
      if (result !== null) {
        var len = this.referenceObjects.length;
        for (var i = 0; i < len; i++) {
          if (this.referenceObjects.length > 0) {
            var tGroup = this.referenceObjects[i];
            if (tGroup.length > 0) {
              var representative = tGroup[0];
              if (result.equalsTo(representative)) {
                group = tGroup;
                break;
              }
            } else {
              this.removeGroup(tGroup);
            }
          }
          len = this.referenceObjects.length;
        }
      }
      return group;
    };
    PdfCacheCollection2.prototype.removeGroup = function(group) {
      if (group !== null) {
        var index = this.referenceObjects.indexOf(group);
        this.referenceObjects.slice(index, index + 1);
      }
    };
    PdfCacheCollection2.prototype.destroy = function() {
      this.pdfFontCollection = void 0;
      this.referenceObjects = void 0;
    };
    return PdfCacheCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document.js
var __extends54 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfDocument = (
  /** @class */
  function(_super) {
    __extends54(PdfDocument2, _super);
    function PdfDocument2(isMerging) {
      var _this = _super.call(this) || this;
      _this.defaultMargin = 40;
      _this.streamWriter = null;
      _this.document = _this;
      var isMerge = false;
      if (typeof isMerging === "undefined") {
        PdfDocument2.cacheCollection = new PdfCacheCollection();
        isMerge = false;
      } else {
        isMerge = isMerging;
      }
      var objects = new PdfMainObjectCollection();
      _this.setMainObjectCollection(objects);
      var crossTable = new PdfCrossTable();
      crossTable.isMerging = isMerge;
      crossTable.document = _this;
      _this.setCrossTable(crossTable);
      var catalog = new PdfCatalog();
      _this.setCatalog(catalog);
      objects.add(catalog);
      catalog.position = -1;
      _this.sectionCollection = new PdfSectionCollection(_this);
      _this.documentPageCollection = new PdfDocumentPageCollection(_this);
      catalog.pages = _this.sectionCollection;
      return _this;
    }
    Object.defineProperty(PdfDocument2, "defaultFont", {
      //Properties
      /**
       * Gets the `default font`. It is used for complex objects when font is not explicitly defined.
       * @private
       */
      get: function() {
        if (this.defaultStandardFont == null) {
          this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
        }
        return this.defaultStandardFont;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "sections", {
      /**
       * Gets the collection of the `sections` in the document.
       * @private
       */
      get: function() {
        return this.sectionCollection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "pageSettings", {
      /**
       * Gets the document's page setting.
       * @public
       */
      get: function() {
        if (this.settings == null) {
          this.settings = new PdfPageSettings(this.defaultMargin);
        }
        return this.settings;
      },
      /**
       * Sets the document's page setting.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       *
       * // sets the right margin of the page
       * document.pageSettings.margins.right = 0;
       * // set the page size.
       * document.pageSettings.size = new SizeF(500, 500);
       * // change the page orientation to landscape
       * document.pageSettings.orientation = PdfPageOrientation.Landscape;
       * // apply 90 degree rotation on the page
       * document.pageSettings.rotate = PdfPageRotateAngle.RotateAngle90;
       *
       * // add a pages to the document
       * let page1 : PdfPage = document.pages.add();
       * // set font
       * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);
       * // set brush
       * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
       * // set the specified Point
       * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);
       * // draw the text
       * page1.graphics.drawString('Hello World', font, blackBrush, point);
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      set: function(value) {
        this.settings = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "pages", {
      /**
       * Represents the collection of pages in the PDF document.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * //
       * // get the collection of pages in the document
       * let pageCollection : PdfDocumentPageCollection  = document.pages;
       * //
       * // add pages
       * let page1 : PdfPage = pageCollection.add();
       * // save the document
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.documentPageCollection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2, "cache", {
      /**
       * Gets collection of the `cached objects`.
       * @private
       */
      get: function() {
        if (typeof PdfDocument2.cacheCollection === "undefined" || PdfDocument2.cacheCollection == null) {
          return new PdfCacheCollection();
        }
        return PdfDocument2.cacheCollection;
      },
      /**
       * Sets collection of the `cached objects`.
       * @private
       */
      set: function(value) {
        this.cacheCollection = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2, "enableCache", {
      /**
       * Gets the value of enable cache.
       * @private
       */
      get: function() {
        return this.isCacheEnabled;
      },
      /**
       * Sets thie value of enable cache.
       * @private
       */
      set: function(value) {
        this.isCacheEnabled = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "colorSpace", {
      /* tslint:disable */
      /**
       * Gets or sets the `color space` of the document. This property can be used to create PDF document in RGB, Gray scale or CMYK color spaces.
       * @private
       */
      get: function() {
        if (this.pdfColorSpace === PdfColorSpace.Rgb || this.pdfColorSpace === PdfColorSpace.Cmyk || this.pdfColorSpace === PdfColorSpace.GrayScale) {
          return this.pdfColorSpace;
        } else {
          return PdfColorSpace.Rgb;
        }
      },
      set: function(value) {
        if (value === PdfColorSpace.Rgb || value === PdfColorSpace.Cmyk || value === PdfColorSpace.GrayScale) {
          this.pdfColorSpace = value;
        } else {
          this.pdfColorSpace = PdfColorSpace.Rgb;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDocument2.prototype, "template", {
      /* tslint:enable */
      /**
       * Gets or sets a `template` to all pages in the document.
       * @private
       */
      get: function() {
        if (this.pageTemplate == null) {
          this.pageTemplate = new PdfDocumentTemplate();
        }
        return this.pageTemplate;
      },
      set: function(value) {
        this.pageTemplate = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocument2.prototype.docSave = function(stream, arg2, arg3) {
      this.checkPagesPresence();
      if (stream === null) {
        throw new Error("ArgumentNullException : stream");
      }
      this.streamWriter = stream;
      var writer = new PdfWriter(stream);
      writer.document = this;
      if (typeof arg2 === "boolean" && typeof arg3 === "undefined") {
        return this.crossTable.save(writer);
      } else {
        this.crossTable.save(writer, arg2);
      }
    };
    PdfDocument2.prototype.checkPagesPresence = function() {
      if (this.pages.count === 0) {
        this.pages.add();
      }
    };
    PdfDocument2.prototype.destroy = function() {
      this.catalog = void 0;
      this.colorSpace = void 0;
      this.currentSavingObj = void 0;
      this.documentPageCollection = void 0;
      this.isStreamCopied = void 0;
      this.pageSettings = void 0;
      this.pageTemplate = void 0;
      this.pdfColorSpace = void 0;
      this.sectionCollection = void 0;
      PdfDocument2.cache.destroy();
      this.crossTable.pdfObjects.destroy();
      PdfDocument2.cache = void 0;
      this.streamWriter.destroy();
    };
    PdfDocument2.defaultStandardFont = null;
    PdfDocument2.isCacheEnabled = true;
    return PdfDocument2;
  }(PdfDocumentBase)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font-metrics-factory.js
var PdfStandardFontMetricsFactory = (
  /** @class */
  function() {
    function PdfStandardFontMetricsFactory2() {
    }
    PdfStandardFontMetricsFactory2.getMetrics = function(fontFamily, fontStyle, size) {
      var metrics = null;
      switch (fontFamily) {
        case PdfFontFamily.Helvetica:
          metrics = this.getHelveticaMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.Courier:
          metrics = this.getCourierMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.TimesRoman:
          metrics = this.getTimesMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.Symbol:
          metrics = this.getSymbolMetrics(fontFamily, fontStyle, size);
          break;
        case PdfFontFamily.ZapfDingbats:
          metrics = this.getZapfDingbatsMetrics(fontFamily, fontStyle, size);
          break;
        default:
          metrics = this.getHelveticaMetrics(PdfFontFamily.Helvetica, fontStyle, size);
          break;
      }
      metrics.name = fontFamily.toString();
      metrics.subScriptSizeFactor = this.subSuperScriptFactor;
      metrics.superscriptSizeFactor = this.subSuperScriptFactor;
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getHelveticaMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.helveticaBoldItalicAscent;
        metrics.descent = this.helveticaBoldItalicDescent;
        metrics.postScriptName = this.helveticaBoldItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Bold) > 0) {
        metrics.ascent = this.helveticaBoldAscent;
        metrics.descent = this.helveticaBoldDescent;
        metrics.postScriptName = this.helveticaBoldName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.helveticaItalicAscent;
        metrics.descent = this.helveticaItalicDescent;
        metrics.postScriptName = this.helveticaItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else {
        metrics.ascent = this.helveticaAscent;
        metrics.descent = this.helveticaDescent;
        metrics.postScriptName = this.helveticaName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.arialWidth);
        metrics.height = metrics.ascent - metrics.descent;
      }
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getCourierMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.courierBoldItalicAscent;
        metrics.descent = this.courierBoldItalicDescent;
        metrics.postScriptName = this.courierBoldItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Bold) > 0) {
        metrics.ascent = this.courierBoldAscent;
        metrics.descent = this.courierBoldDescent;
        metrics.postScriptName = this.courierBoldName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.courierItalicAscent;
        metrics.descent = this.courierItalicDescent;
        metrics.postScriptName = this.courierItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else {
        metrics.ascent = this.courierAscent;
        metrics.descent = this.courierDescent;
        metrics.postScriptName = this.courierName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.fixedWidth);
        metrics.height = metrics.ascent - metrics.descent;
      }
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getTimesMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.timesBoldItalicAscent;
        metrics.descent = this.timesBoldItalicDescent;
        metrics.postScriptName = this.timesBoldItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanBoldItalicWidths);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Bold) > 0) {
        metrics.ascent = this.timesBoldAscent;
        metrics.descent = this.timesBoldDescent;
        metrics.postScriptName = this.timesBoldName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanBoldWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else if ((fontStyle & PdfFontStyle.Italic) > 0) {
        metrics.ascent = this.timesItalicAscent;
        metrics.descent = this.timesItalicDescent;
        metrics.postScriptName = this.timesItalicName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanItalicWidth);
        metrics.height = metrics.ascent - metrics.descent;
      } else {
        metrics.ascent = this.timesAscent;
        metrics.descent = this.timesDescent;
        metrics.postScriptName = this.timesName;
        metrics.size = size;
        metrics.widthTable = new StandardWidthTable(this.timesRomanWidth);
        metrics.height = metrics.ascent - metrics.descent;
      }
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getSymbolMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      metrics.ascent = this.symbolAscent;
      metrics.descent = this.symbolDescent;
      metrics.postScriptName = this.symbolName;
      metrics.size = size;
      metrics.widthTable = new StandardWidthTable(this.symbolWidth);
      metrics.height = metrics.ascent - metrics.descent;
      return metrics;
    };
    PdfStandardFontMetricsFactory2.getZapfDingbatsMetrics = function(fontFamily, fontStyle, size) {
      var metrics = new PdfFontMetrics();
      metrics.ascent = this.zapfDingbatsAscent;
      metrics.descent = this.zapfDingbatsDescent;
      metrics.postScriptName = this.zapfDingbatsName;
      metrics.size = size;
      metrics.widthTable = new StandardWidthTable(this.zapfDingbatsWidth);
      metrics.height = metrics.ascent - metrics.descent;
      return metrics;
    };
    PdfStandardFontMetricsFactory2.subSuperScriptFactor = 1.52;
    PdfStandardFontMetricsFactory2.helveticaAscent = 931;
    PdfStandardFontMetricsFactory2.helveticaDescent = -225;
    PdfStandardFontMetricsFactory2.helveticaName = "Helvetica";
    PdfStandardFontMetricsFactory2.helveticaBoldAscent = 962;
    PdfStandardFontMetricsFactory2.helveticaBoldDescent = -228;
    PdfStandardFontMetricsFactory2.helveticaBoldName = "Helvetica-Bold";
    PdfStandardFontMetricsFactory2.helveticaItalicAscent = 931;
    PdfStandardFontMetricsFactory2.helveticaItalicDescent = -225;
    PdfStandardFontMetricsFactory2.helveticaItalicName = "Helvetica-Oblique";
    PdfStandardFontMetricsFactory2.helveticaBoldItalicAscent = 962;
    PdfStandardFontMetricsFactory2.helveticaBoldItalicDescent = -228;
    PdfStandardFontMetricsFactory2.helveticaBoldItalicName = "Helvetica-BoldOblique";
    PdfStandardFontMetricsFactory2.courierAscent = 805;
    PdfStandardFontMetricsFactory2.courierDescent = -250;
    PdfStandardFontMetricsFactory2.courierName = "Courier";
    PdfStandardFontMetricsFactory2.courierBoldAscent = 801;
    PdfStandardFontMetricsFactory2.courierBoldDescent = -250;
    PdfStandardFontMetricsFactory2.courierBoldName = "Courier-Bold";
    PdfStandardFontMetricsFactory2.courierItalicAscent = 805;
    PdfStandardFontMetricsFactory2.courierItalicDescent = -250;
    PdfStandardFontMetricsFactory2.courierItalicName = "Courier-Oblique";
    PdfStandardFontMetricsFactory2.courierBoldItalicAscent = 801;
    PdfStandardFontMetricsFactory2.courierBoldItalicDescent = -250;
    PdfStandardFontMetricsFactory2.courierBoldItalicName = "Courier-BoldOblique";
    PdfStandardFontMetricsFactory2.timesAscent = 898;
    PdfStandardFontMetricsFactory2.timesDescent = -218;
    PdfStandardFontMetricsFactory2.timesName = "Times-Roman";
    PdfStandardFontMetricsFactory2.timesBoldAscent = 935;
    PdfStandardFontMetricsFactory2.timesBoldDescent = -218;
    PdfStandardFontMetricsFactory2.timesBoldName = "Times-Bold";
    PdfStandardFontMetricsFactory2.timesItalicAscent = 883;
    PdfStandardFontMetricsFactory2.timesItalicDescent = -217;
    PdfStandardFontMetricsFactory2.timesItalicName = "Times-Italic";
    PdfStandardFontMetricsFactory2.timesBoldItalicAscent = 921;
    PdfStandardFontMetricsFactory2.timesBoldItalicDescent = -218;
    PdfStandardFontMetricsFactory2.timesBoldItalicName = "Times-BoldItalic";
    PdfStandardFontMetricsFactory2.symbolAscent = 1010;
    PdfStandardFontMetricsFactory2.symbolDescent = -293;
    PdfStandardFontMetricsFactory2.symbolName = "Symbol";
    PdfStandardFontMetricsFactory2.zapfDingbatsAscent = 820;
    PdfStandardFontMetricsFactory2.zapfDingbatsDescent = -143;
    PdfStandardFontMetricsFactory2.zapfDingbatsName = "ZapfDingbats";
    PdfStandardFontMetricsFactory2.arialWidth = [278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 0, 556, 0, 222, 556, 333, 1e3, 556, 556, 333, 1e3, 667, 333, 1e3, 0, 611, 0, 0, 222, 222, 333, 333, 350, 556, 1e3, 333, 1e3, 500, 333, 944, 0, 500, 667, 0, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 0, 737, 333, 400, 584, 333, 333, 333, 556, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 584, 611, 556, 556, 556, 556, 500, 556, 500];
    PdfStandardFontMetricsFactory2.arialBoldWidth = [278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 0, 556, 0, 278, 556, 500, 1e3, 556, 556, 333, 1e3, 667, 333, 1e3, 0, 611, 0, 0, 278, 278, 500, 500, 350, 556, 1e3, 333, 1e3, 556, 333, 944, 0, 500, 667, 0, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 0, 737, 333, 400, 584, 333, 333, 333, 611, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 584, 611, 611, 611, 611, 611, 556, 611, 556];
    PdfStandardFontMetricsFactory2.fixedWidth
    PdfStandardFontMetricsFactory2.timesRomanWidth = [250, 333, 408, 500, 500, 833, 778, 180, 333, 333, 500, 564, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 564, 564, 564, 444, 921, 722, 667, 667, 722, 611, 556, 722, 722, 333, 389, 722, 611, 889, 722, 722, 556, 722, 667, 556, 611, 722, 722, 944, 722, 722, 611, 333, 278, 333, 469, 500, 333, 444, 500, 444, 500, 444, 333, 500, 500, 278, 278, 500, 278, 778, 500, 500, 500, 500, 333, 389, 278, 500, 500, 722, 500, 500, 444, 480, 200, 480, 541, 0, 500, 0, 333, 500, 444, 1e3, 500, 500, 333, 1e3, 556, 333, 889, 0, 611, 0, 0, 333, 333, 444, 444, 350, 500, 1e3, 333, 980, 389, 333, 722, 0, 444, 722, 0, 333, 500, 500, 500, 500, 200, 500, 333, 760, 276, 500, 564, 0, 760, 333, 400, 564, 300, 300, 333, 500, 453, 250, 333, 300, 310, 500, 750, 750, 750, 444, 722, 722, 722, 722, 722, 722, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333, 722, 722, 722, 722, 722, 722, 722, 564, 722, 722, 722, 722, 722, 722, 556, 500, 444, 444, 444, 444, 444, 444, 667, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 500, 500, 500, 500, 500, 500, 564, 500, 500, 500, 500, 500, 500, 500, 500];
    PdfStandardFontMetricsFactory2.timesRomanBoldWidth = [250, 333, 555, 500, 500, 1e3, 833, 278, 333, 333, 500, 570, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570, 570, 500, 930, 722, 667, 722, 722, 667, 611, 778, 778, 389, 500, 778, 667, 944, 722, 778, 611, 778, 722, 556, 667, 722, 722, 1e3, 722, 722, 667, 333, 278, 333, 581, 500, 333, 500, 556, 444, 556, 444, 333, 500, 556, 278, 333, 556, 278, 833, 556, 500, 556, 556, 444, 389, 333, 556, 500, 722, 500, 500, 444, 394, 220, 394, 520, 0, 500, 0, 333, 500, 500, 1e3, 500, 500, 333, 1e3, 556, 333, 1e3, 0, 667, 0, 0, 333, 333, 500, 500, 350, 500, 1e3, 333, 1e3, 389, 333, 722, 0, 444, 722, 0, 333, 500, 500, 500, 500, 220, 500, 333, 747, 300, 500, 570, 0, 747, 333, 400, 570, 300, 300, 333, 556, 540, 250, 333, 300, 330, 500, 750, 750, 750, 500, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 389, 389, 389, 389, 722, 722, 778, 778, 778, 778, 778, 570, 778, 722, 722, 722, 722, 722, 611, 556, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 500, 556, 500];
    PdfStandardFontMetricsFactory2.timesRomanItalicWidth = [250, 333, 420, 500, 500, 833, 778, 214, 333, 333, 500, 675, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 675, 675, 675, 500, 920, 611, 611, 667, 722, 611, 611, 722, 722, 333, 444, 667, 556, 833, 667, 722, 611, 722, 611, 500, 556, 722, 611, 833, 611, 556, 556, 389, 278, 389, 422, 500, 333, 500, 500, 444, 500, 444, 278, 500, 500, 278, 278, 444, 278, 722, 500, 500, 500, 500, 389, 389, 278, 500, 444, 667, 444, 444, 389, 400, 275, 400, 541, 0, 500, 0, 333, 500, 556, 889, 500, 500, 333, 1e3, 500, 333, 944, 0, 556, 0, 0, 333, 333, 556, 556, 350, 500, 889, 333, 980, 389, 333, 667, 0, 389, 556, 0, 389, 500, 500, 500, 500, 275, 500, 333, 760, 276, 500, 675, 0, 760, 333, 400, 675, 300, 300, 333, 500, 523, 250, 333, 300, 310, 500, 750, 750, 750, 500, 611, 611, 611, 611, 611, 611, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333, 722, 667, 722, 722, 722, 722, 722, 675, 722, 722, 722, 722, 722, 556, 611, 500, 500, 500, 500, 500, 500, 500, 667, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 500, 500, 500, 500, 500, 500, 675, 500, 500, 500, 500, 500, 444, 500, 444];
    PdfStandardFontMetricsFactory2.timesRomanBoldItalicWidths = [250, 389, 555, 500, 500, 833, 778, 278, 333, 333, 500, 570, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570, 570, 500, 832, 667, 667, 667, 722, 667, 667, 722, 778, 389, 500, 667, 611, 889, 722, 722, 611, 722, 667, 556, 611, 722, 667, 889, 667, 611, 611, 333, 278, 333, 570, 500, 333, 500, 500, 444, 500, 444, 333, 500, 556, 278, 278, 500, 278, 778, 556, 500, 500, 500, 389, 389, 278, 556, 444, 667, 500, 444, 389, 348, 220, 348, 570, 0, 500, 0, 333, 500, 500, 1e3, 500, 500, 333, 1e3, 556, 333, 944, 0, 611, 0, 0, 333, 333, 500, 500, 350, 500, 1e3, 333, 1e3, 389, 333, 722, 0, 389, 611, 0, 389, 500, 500, 500, 500, 220, 500, 333, 747, 266, 500, 606, 0, 747, 333, 400, 570, 300, 300, 333, 576, 500, 250, 333, 300, 300, 500, 750, 750, 750, 500, 667, 667, 667, 667, 667, 667, 944, 667, 667, 667, 667, 667, 389, 389, 389, 389, 722, 722, 722, 722, 722, 722, 722, 570, 722, 722, 722, 722, 722, 611, 611, 500, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 444, 500, 444];
    PdfStandardFontMetricsFactory2.symbolWidth = [250, 333, 713, 500, 549, 833, 778, 439, 333, 333, 500, 549, 250, 549, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 549, 549, 549, 444, 549, 722, 667, 722, 612, 611, 763, 603, 722, 333, 631, 722, 686, 889, 722, 722, 768, 741, 556, 592, 611, 690, 439, 768, 645, 795, 611, 333, 863, 333, 658, 500, 500, 631, 549, 549, 494, 439, 521, 411, 603, 329, 603, 549, 549, 576, 521, 549, 549, 521, 549, 603, 439, 576, 713, 686, 493, 686, 494, 480, 200, 480, 549, 750, 620, 247, 549, 167, 713, 500, 753, 753, 753, 753, 1042, 987, 603, 987, 603, 400, 549, 411, 549, 549, 713, 494, 460, 549, 549, 549, 549, 1e3, 603, 1e3, 658, 823, 686, 795, 987, 768, 768, 823, 768, 768, 713, 713, 713, 713, 713, 713, 713, 768, 713, 790, 790, 890, 823, 549, 250, 713, 603, 603, 1042, 987, 603, 987, 603, 494, 329, 790, 790, 786, 713, 384, 384, 384, 384, 384, 384, 494, 494, 494, 494, 329, 274, 686, 686, 686, 384, 384, 384, 384, 384, 384, 494, 494, 494, -1];
    PdfStandardFontMetricsFactory2.zapfDingbatsWidth = [278, 974, 961, 974, 980, 719, 789, 790, 791, 690, 960, 939, 549, 855, 911, 933, 911, 945, 974, 755, 846, 762, 761, 571, 677, 763, 760, 759, 754, 494, 552, 537, 577, 692, 786, 788, 788, 790, 793, 794, 816, 823, 789, 841, 823, 833, 816, 831, 923, 744, 723, 749, 790, 792, 695, 776, 768, 792, 759, 707, 708, 682, 701, 826, 815, 789, 789, 707, 687, 696, 689, 786, 787, 713, 791, 785, 791, 873, 761, 762, 762, 759, 759, 892, 892, 788, 784, 438, 138, 277, 415, 392, 392, 668, 668, 390, 390, 317, 317, 276, 276, 509, 509, 410, 410, 234, 234, 334, 334, 732, 544, 544, 910, 667, 760, 760, 776, 595, 694, 626, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 894, 838, 1016, 458, 748, 924, 748, 918, 927, 928, 928, 834, 873, 828, 924, 924, 917, 930, 931, 463, 883, 836, 836, 867, 867, 696, 696, 874, 874, 760, 946, 771, 865, 771, 888, 967, 888, 831, 873, 927, 970, 918];
    return PdfStandardFontMetricsFactory2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font.js
var __extends55 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfStandardFont = (
  /** @class */
  function(_super) {
    __extends55(PdfStandardFont2, _super);
    function PdfStandardFont2(fontFamilyPrototype, size, style) {
      var _this = _super.call(this, size, typeof style === "undefined" ? fontFamilyPrototype instanceof PdfStandardFont2 ? fontFamilyPrototype.style : PdfFontStyle.Regular : style) || this;
      _this.dictionaryProperties = new DictionaryProperties();
      _this.encodings = ["Unknown", "StandardEncoding", "MacRomanEncoding", "MacExpertEncoding", "WinAnsiEncoding", "PDFDocEncoding", "IdentityH"];
      if (typeof fontFamilyPrototype === "undefined") {
        _this.pdfFontFamily = PdfFontFamily.Helvetica;
      } else if (fontFamilyPrototype instanceof PdfStandardFont2) {
        _this.pdfFontFamily = fontFamilyPrototype.fontFamily;
      } else {
        _this.pdfFontFamily = fontFamilyPrototype;
      }
      _this.checkStyle();
      _this.initializeInternals();
      return _this;
    }
    Object.defineProperty(PdfStandardFont2.prototype, "fontFamily", {
      /* tslint:enable */
      //Properties
      /**
       * Gets the `FontFamily`.
       * @private
       */
      get: function() {
        return this.pdfFontFamily;
      },
      enumerable: true,
      configurable: true
    });
    PdfStandardFont2.prototype.checkStyle = function() {
      if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {
        var style = this.style;
        style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);
        this.setStyle(style);
      }
    };
    PdfStandardFont2.prototype.getLineWidth = function(line, format) {
      if (line == null) {
        throw new Error("ArgumentNullException:line");
      }
      var width = 0;
      var name = this.name;
      line = PdfStandardFont2.convert(line);
      for (var i = 0, len = line.length; i < len; i++) {
        var ch = line[i];
        var charWidth = this.getCharWidthInternal(ch, format);
        width += charWidth;
      }
      var size = this.metrics.getSize(format);
      width *= PdfFont.charSizeMultiplier * size;
      width = this.applyFormatSettings(line, format, width);
      return width;
    };
    PdfStandardFont2.prototype.equalsToFont = function(font) {
      var equal = false;
      var stFont = font;
      if (stFont != null) {
        var fontFamilyEqual = this.fontFamily === stFont.fontFamily;
        var lineReducer = ~(PdfFontStyle.Underline | PdfFontStyle.Strikeout);
        var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);
        equal = fontFamilyEqual && styleEqual;
      }
      return equal;
    };
    PdfStandardFont2.prototype.initializeInternals = function() {
      var equalFont = null;
      equalFont = PdfDocument.cache.search(this);
      var internals = null;
      var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);
      this.metrics = metrics;
      internals = this.createInternals();
      this.setInternals(internals);
    };
    PdfStandardFont2.prototype.createInternals = function() {
      var dictionary = new PdfDictionary();
      dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));
      dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));
      dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));
      if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {
        var encoding = this.encodings[FontEncoding.WinAnsiEncoding];
        dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));
      }
      return dictionary;
    };
    PdfStandardFont2.prototype.getCharWidthInternal = function(charCode, format) {
      var width = 0;
      var code = 0;
      code = charCode.charCodeAt(0);
      if (this.name === "0" || this.name === "1" || this.name === "2" || this.name === "3" || this.name === "4") {
        code = code - PdfStandardFont2.charOffset;
      }
      code = code >= 0 && code !== 128 ? code : 0;
      var metrics = this.metrics;
      var widthTable = metrics.widthTable;
      width = widthTable.items(code);
      return width;
    };
    PdfStandardFont2.convert = function(text) {
      return text;
    };
    PdfStandardFont2.charOffset = 32;
    return PdfStandardFont2;
  }(PdfFont)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/annotation.js
var PdfAnnotation = (
  /** @class */
  function() {
    function PdfAnnotation2(arg1) {
      this.dictionaryProperties = new DictionaryProperties();
      this.pdfColor = new PdfColor(255, 255, 255);
      this.rectangle = new RectangleF(0, 0, 0, 0);
      this.pdfPage = null;
      this.textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      this.textFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);
      this.format = new PdfStringFormat(PdfTextAlignment.Left);
      this.content = "";
      this.pdfDictionary = new PdfDictionary();
      this.internalColor = new PdfColor();
      this.darkness = 1;
      if (typeof arg1 === "undefined") {
        this.initialize();
      } else {
        this.initialize();
        this.bounds = arg1;
      }
    }
    Object.defineProperty(PdfAnnotation2.prototype, "color", {
      // Properties
      /**
       * `Color` of the annotation
       * @private
       */
      get: function() {
        return this.pdfColor;
      },
      set: function(value) {
        this.pdfColor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "innerColor", {
      /**
       * To specifying the `Inner color` with which to fill the annotation
       * @private
       */
      get: function() {
        return this.internalColor;
      },
      set: function(value) {
        this.internalColor = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "bounds", {
      /**
       * `bounds` of the annotation.
       * @private
       */
      get: function() {
        return this.rectangle;
      },
      set: function(value) {
        this.rectangle = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "page", {
      /**
       * Parent `page` of the annotation.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "font", {
      /**
       * To specifying the `Font of the text` in the annotation.
       * @private
       */
      get: function() {
        return this.textFont;
      },
      set: function(value) {
        this.textFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "stringFormat", {
      /**
       * To specifying the `StringFormat of the text` in the annotation.
       * @private
       */
      get: function() {
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "brush", {
      /**
       * To specifying the `Brush of the text` in the annotation.
       * @private
       */
      get: function() {
        return this.textBrush;
      },
      set: function(value) {
        this.textBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "text", {
      /**
       * `Text` of the annotation.
       * @private
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.content = value;
        this.dictionary.items.setValue(this.dictionaryProperties.contents, new PdfString(this.content));
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfAnnotation2.prototype, "dictionary", {
      /**
       * Internal variable to store `dictionary`.
       * @hidden
       */
      get: function() {
        return this.pdfDictionary;
      },
      set: function(value) {
        this.pdfDictionary = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfAnnotation2.prototype.initialize = function() {
      this.pdfDictionary.annotationBeginSave = new SaveAnnotationEventHandler(this);
      this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.annot));
    };
    PdfAnnotation2.prototype.setPage = function(page) {
      this.pdfPage = page;
      this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new PdfReferenceHolder(this.pdfPage));
    };
    PdfAnnotation2.prototype.beginSave = function() {
      this.save();
    };
    PdfAnnotation2.prototype.save = function() {
      var nativeRectangle = new RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);
      var section = this.pdfPage.section;
      var initialHeight = nativeRectangle.height;
      var tempLoacation = section.pointToNativePdf(this.page, new PointF(nativeRectangle.x, nativeRectangle.y));
      nativeRectangle.x = tempLoacation.x;
      nativeRectangle.width = tempLoacation.x + nativeRectangle.width;
      nativeRectangle.y = tempLoacation.y - this.page.document.pageSettings.margins.top;
      nativeRectangle.height = nativeRectangle.y - initialHeight;
      this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, PdfArray.fromRectangle(nativeRectangle));
      this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(this.darkness));
    };
    Object.defineProperty(PdfAnnotation2.prototype, "element", {
      /* tslint:enable */
      // IPdfWrapper Members
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.pdfDictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfAnnotation2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/link-annotation.js
var __extends56 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfLinkAnnotation = (
  /** @class */
  function(_super) {
    __extends56(PdfLinkAnnotation2, _super);
    function PdfLinkAnnotation2(rectangle) {
      return _super.call(this, rectangle) || this;
    }
    PdfLinkAnnotation2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));
    };
    return PdfLinkAnnotation2;
  }(PdfAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/action-link-annotation.js
var __extends57 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfActionLinkAnnotation = (
  /** @class */
  function(_super) {
    __extends57(PdfActionLinkAnnotation2, _super);
    function PdfActionLinkAnnotation2(rectangle) {
      var _this = _super.call(this, rectangle) || this;
      _this.pdfAction = null;
      return _this;
    }
    PdfActionLinkAnnotation2.prototype.getSetAction = function(value) {
      if (typeof value === "undefined") {
        return this.pdfAction;
      } else {
        this.pdfAction = value;
      }
    };
    return PdfActionLinkAnnotation2;
  }(PdfLinkAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/document-link-annotation.js
var __extends58 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfDocumentLinkAnnotation = (
  /** @class */
  function(_super) {
    __extends58(PdfDocumentLinkAnnotation2, _super);
    function PdfDocumentLinkAnnotation2(rectangle, destination) {
      var _this = _super.call(this, rectangle) || this;
      _this.pdfDestination = null;
      if (typeof destination !== "undefined") {
        _this.destination = destination;
      }
      return _this;
    }
    Object.defineProperty(PdfDocumentLinkAnnotation2.prototype, "destination", {
      // Properties
      /**
       * Gets or sets the `destination` of the annotation.
       * ```typescript
       * // create a new PDF document
       * let document : PdfDocument = new PdfDocument();
       * // create new pages
       * let page1 : PdfPage = document.pages.add();
       * let page2 : PdfPage = document.pages.add();
       * // create a new rectangle
       * let bounds : RectangleF = new RectangleF({x : 10, y : 200}, {width : 300, height : 25});
       * //
       * // create a new document link annotation
       * let documentLinkAnnotation : PdfDocumentLinkAnnotation = new PdfDocumentLinkAnnotation(bounds);
       * // set the annotation text
       * documentLinkAnnotation.text = 'Document link annotation';
       * // set the destination
       * documentLinkAnnotation.destination = new PdfDestination(page2);
       * // set the documentlink annotation location
       * documentLinkAnnotation.destination.location = new PointF(10, 0);
       * // add this annotation to a new page
       * page1.annotations.add(documentLinkAnnotation);
       * //
       * // save the document to disk
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       * @default null
       */
      get: function() {
        return this.pdfDestination;
      },
      set: function(value) {
        this.pdfDestination = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfDocumentLinkAnnotation2.prototype.save = function() {
      _super.prototype.save.call(this);
      if (this.pdfDestination != null) {
        this.dictionary.items.setValue(this.dictionaryProperties.dest, this.pdfDestination.element);
      }
    };
    PdfDocumentLinkAnnotation2.prototype.clone = function() {
      var annot = new PdfDocumentLinkAnnotation2(this.bounds, this.destination);
      annot.color = this.color;
      annot.brush = this.brush;
      annot.destination = this.destination;
      annot.font = this.font;
      return annot;
    };
    return PdfDocumentLinkAnnotation2;
  }(PdfLinkAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/element-layouter.js
var ElementLayouter = (
  /** @class */
  function() {
    function ElementLayouter2(element) {
      this.layoutElement = element;
    }
    Object.defineProperty(ElementLayouter2.prototype, "elements", {
      // Properties
      /**
       * Gets the `element`.
       * @private
       */
      get: function() {
        return this.layoutElement;
      },
      enumerable: true,
      configurable: true
    });
    ElementLayouter2.prototype.getElement = function() {
      return this.layoutElement;
    };
    ElementLayouter2.prototype.layout = function(param) {
      return this.layoutInternal(param);
    };
    ElementLayouter2.prototype.Layouter = function(param) {
      return this.layoutInternal(param);
    };
    ElementLayouter2.prototype.getNextPage = function(currentPage) {
      var section = currentPage.section;
      var nextPage = section.add();
      return nextPage;
    };
    ElementLayouter2.prototype.getPaginateBounds = function(param) {
      if (param == null) {
        throw new Error("ArgumentNullException : param");
      }
      var result = param.format.usePaginateBounds ? param.format.paginateBounds : new RectangleF(param.bounds.x, 0, param.bounds.width, param.bounds.height);
      return result;
    };
    return ElementLayouter2;
  }()
);
var PdfLayoutFormat = (
  /** @class */
  function() {
    function PdfLayoutFormat2(baseFormat) {
      if (typeof baseFormat === "undefined") {
      } else {
        this.break = baseFormat.break;
        this.layout = baseFormat.layout;
        this.paginateBounds = baseFormat.paginateBounds;
        this.boundsSet = baseFormat.usePaginateBounds;
      }
    }
    Object.defineProperty(PdfLayoutFormat2.prototype, "layout", {
      // Properties
      /**
       * Gets or sets `layout` type of the element.
       * @private
       */
      get: function() {
        return this.layoutType;
      },
      set: function(value) {
        this.layoutType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutFormat2.prototype, "break", {
      /**
       * Gets or sets `break` type of the element.
       * @private
       */
      get: function() {
        return this.breakType;
      },
      set: function(value) {
        this.breakType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutFormat2.prototype, "paginateBounds", {
      /**
       * Gets or sets the `bounds` on the next page.
       * @private
       */
      get: function() {
        if (typeof this.layoutPaginateBounds === "undefined" && this.layoutPaginateBounds == null) {
          this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0);
        }
        return this.layoutPaginateBounds;
      },
      set: function(value) {
        this.layoutPaginateBounds = value;
        this.boundsSet = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutFormat2.prototype, "usePaginateBounds", {
      /**
       * Gets a value indicating whether [`use paginate bounds`].
       * @private
       */
      get: function() {
        return this.boundsSet;
      },
      enumerable: true,
      configurable: true
    });
    return PdfLayoutFormat2;
  }()
);
var PdfLayoutParams = (
  /** @class */
  function() {
    function PdfLayoutParams2() {
    }
    Object.defineProperty(PdfLayoutParams2.prototype, "page", {
      // Properties
      /**
       * Gets or sets the layout `page` for the element.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      set: function(value) {
        this.pdfPage = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutParams2.prototype, "bounds", {
      /**
       * Gets or sets layout `bounds` for the element.
       * @private
       */
      get: function() {
        return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);
      },
      set: function(value) {
        this.layoutBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutParams2.prototype, "format", {
      /**
       * Gets or sets `layout settings` for the element.
       * @private
       */
      get: function() {
        return this.layoutFormat;
      },
      set: function(value) {
        this.layoutFormat = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfLayoutParams2;
  }()
);
var PdfLayoutResult = (
  /** @class */
  function() {
    function PdfLayoutResult2(page, bounds) {
      this.pdfPage = page;
      this.layoutBounds = bounds;
    }
    Object.defineProperty(PdfLayoutResult2.prototype, "page", {
      // Properties
      /**
       * Gets the last `page` where the element was drawn.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutResult2.prototype, "bounds", {
      /**
       * Gets the `bounds` of the element on the last page where it was drawn.
       * @private
       */
      get: function() {
        return this.layoutBounds;
      },
      enumerable: true,
      configurable: true
    });
    return PdfLayoutResult2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/pdf-borders.js
var PdfBorders = (
  /** @class */
  function() {
    function PdfBorders2() {
      var defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;
      var defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;
      var defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;
      var defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));
      defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid;
      this.leftPen = defaultBorderPenLeft;
      this.rightPen = defaultBorderPenRight;
      this.topPen = defaultBorderPenTop;
      this.bottomPen = defaultBorderPenBottom;
    }
    Object.defineProperty(PdfBorders2.prototype, "left", {
      // Properties
      /**
       * Gets or sets the `Left`.
       * @private
       */
      get: function() {
        return this.leftPen;
      },
      set: function(value) {
        this.leftPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "right", {
      /**
       * Gets or sets the `Right`.
       * @private
       */
      get: function() {
        return this.rightPen;
      },
      set: function(value) {
        this.rightPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "top", {
      /**
       * Gets or sets the `Top`.
       * @private
       */
      get: function() {
        return this.topPen;
      },
      set: function(value) {
        this.topPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "bottom", {
      /**
       * Gets or sets the `Bottom`.
       * @private
       */
      get: function() {
        return this.bottomPen;
      },
      set: function(value) {
        this.bottomPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "all", {
      /**
       * sets the `All`.
       * @private
       */
      set: function(value) {
        this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2.prototype, "isAll", {
      /**
       * Gets a value indicating whether this instance `is all`.
       * @private
       */
      get: function() {
        return this.leftPen === this.rightPen && this.leftPen === this.topPen && this.leftPen === this.bottomPen;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBorders2, "default", {
      /**
       * Gets the `default`.
       * @private
       */
      get: function() {
        return new PdfBorders2();
      },
      enumerable: true,
      configurable: true
    });
    return PdfBorders2;
  }()
);
var PdfPaddings = (
  /** @class */
  function() {
    function PdfPaddings2(left, right, top, bottom) {
      this.hasLeftPad = false;
      this.hasRightPad = false;
      this.hasTopPad = false;
      this.hasBottomPad = false;
      if (typeof left === "undefined") {
        this.leftPad = this.rightPad = 5.76;
        this.bottomPad = this.topPad = 0.5;
      } else {
        this.leftPad = left;
        this.rightPad = right;
        this.topPad = top;
        this.bottomPad = bottom;
        this.hasLeftPad = true;
        this.hasRightPad = true;
        this.hasTopPad = true;
        this.hasBottomPad = true;
      }
    }
    Object.defineProperty(PdfPaddings2.prototype, "left", {
      // Properties
      /**
       * Gets or sets the `left` value of the edge
       * @private
       */
      get: function() {
        return this.leftPad;
      },
      set: function(value) {
        this.leftPad = value;
        this.hasLeftPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "right", {
      /**
       * Gets or sets the `right` value of the edge.
       * @private
       */
      get: function() {
        return this.rightPad;
      },
      set: function(value) {
        this.rightPad = value;
        this.hasRightPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "top", {
      /**
       * Gets or sets the `top` value of the edge
       * @private
       */
      get: function() {
        return this.topPad;
      },
      set: function(value) {
        this.topPad = value;
        this.hasTopPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "bottom", {
      /**
       * Gets or sets the `bottom` value of the edge.
       * @private
       */
      get: function() {
        return this.bottomPad;
      },
      set: function(value) {
        this.bottomPad = value;
        this.hasBottomPad = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPaddings2.prototype, "all", {
      /**
       * Sets value to all sides `left,right,top and bottom`.s
       * @private
       */
      set: function(value) {
        this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;
        this.hasLeftPad = true;
        this.hasRightPad = true;
        this.hasTopPad = true;
        this.hasBottomPad = true;
      },
      enumerable: true,
      configurable: true
    });
    return PdfPaddings2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/layout-element.js
var PdfLayoutElement = (
  /** @class */
  function() {
    function PdfLayoutElement2() {
    }
    Object.defineProperty(PdfLayoutElement2.prototype, "raiseBeginPageLayout", {
      // Property
      /**
       * Gets a value indicating whether the `start page layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.beginPageLayout !== "undefined";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLayoutElement2.prototype, "raiseEndPageLayout", {
      /**
       * Gets a value indicating whether the `ending page layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.endPageLayout !== "undefined";
      },
      enumerable: true,
      configurable: true
    });
    PdfLayoutElement2.prototype.onBeginPageLayout = function(args) {
      if (this.beginPageLayout) {
        this.beginPageLayout(this, args);
      }
    };
    PdfLayoutElement2.prototype.onEndPageLayout = function(args) {
      if (this.endPageLayout) {
        this.endPageLayout(this, args);
      }
    };
    PdfLayoutElement2.prototype.drawHelper = function(arg2, arg3, arg4, arg5) {
      if (arg3 instanceof PointF && typeof arg3.width === "undefined" && typeof arg4 === "undefined") {
        return this.drawHelper(arg2, arg3.x, arg3.y);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "undefined") {
        return this.drawHelper(arg2, arg3, arg4, null);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "undefined") {
        return this.drawHelper(arg2, arg3, null);
      } else if (arg3 instanceof PointF && typeof arg3.width === "undefined" && arg4 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg2, arg3.x, arg3.y, arg4);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {
        var width = arg2.graphics.clientSize.width - arg3;
        var layoutRectangle = new RectangleF(arg3, arg4, width, 0);
        return this.drawHelper(arg2, layoutRectangle, arg5);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "boolean") {
        this.bEmbedFonts = arg4;
        return this.drawHelper(arg2, arg3, null);
      } else {
        var param = new PdfLayoutParams();
        var temparg3 = arg3;
        var temparg4 = arg4;
        param.page = arg2;
        param.bounds = temparg3;
        if (param != null) {
          var x = param.bounds.x;
          var y = param.bounds.y;
          if (param.bounds.x === 0) {
            x = PdfBorders.default.right.width / 2;
          }
          if (param.bounds.y === 0) {
            y = PdfBorders.default.top.width / 2;
          }
          var newBound = new RectangleF(x, y, param.bounds.width, param.bounds.height);
          param.bounds = newBound;
        }
        param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();
        var result = this.layout(param);
        return result;
      }
    };
    return PdfLayoutElement2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/text-layouter.js
var __extends59 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextLayouter = (
  /** @class */
  function(_super) {
    __extends59(TextLayouter2, _super);
    function TextLayouter2(element) {
      return _super.call(this, element) || this;
    }
    Object.defineProperty(TextLayouter2.prototype, "element", {
      /**
       * Gets the layout `element`.
       * @private
       */
      get: function() {
        return _super.prototype.getElement.call(this);
      },
      enumerable: true,
      configurable: true
    });
    TextLayouter2.prototype.layoutInternal = function(param) {
      this.format = this.element.stringFormat !== null && typeof this.element.stringFormat !== "undefined" ? this.element.stringFormat : null;
      var currentPage = param.page;
      var currentBounds = param.bounds;
      var text = this.element.value;
      var result = null;
      var pageResult = new TextPageLayoutResult();
      pageResult.page = currentPage;
      pageResult.remainder = text;
      for (; ; ) {
        pageResult = this.layoutOnPage(text, currentPage, currentBounds, param);
        result = this.getLayoutResult(pageResult);
        break;
      }
      return result;
    };
    TextLayouter2.prototype.getLayoutResult = function(pageResult) {
      var result = new PdfTextLayoutResult(pageResult.page, pageResult.bounds, pageResult.remainder, pageResult.lastLineBounds);
      return result;
    };
    TextLayouter2.prototype.layoutOnPage = function(text, currentPage, currentBounds, param) {
      var result = new TextPageLayoutResult();
      result.remainder = text;
      result.page = currentPage;
      currentBounds = this.checkCorrectBounds(currentPage, currentBounds);
      var layouter = new PdfStringLayouter();
      var stringResult = layouter.layout(text, this.element.font, this.format, currentBounds, currentPage.getClientSize().height, false, new SizeF(0, 0));
      var textFinished = stringResult.remainder == null;
      var doesntFit = param.format.break === PdfLayoutBreakType.FitElement;
      var canDraw = !(doesntFit || stringResult.empty);
      var graphics = currentPage.graphics;
      var brush = this.element.getBrush();
      if (this.element instanceof PdfTextWebLink) {
        brush.color = new PdfColor(0, 0, 255);
      }
      graphics.drawStringLayoutResult(stringResult, this.element.font, this.element.pen, brush, currentBounds, this.format);
      var lineInfo = stringResult.lines[stringResult.lineCount - 1];
      result.lastLineBounds = graphics.getLineBounds(stringResult.lineCount - 1, stringResult, this.element.font, currentBounds, this.format);
      result.bounds = this.getTextPageBounds(currentPage, currentBounds, stringResult);
      result.remainder = stringResult.remainder;
      result.end = textFinished;
      return result;
    };
    TextLayouter2.prototype.checkCorrectBounds = function(currentPage, currentBounds) {
      var pageSize = currentPage.graphics.clientSize;
      currentBounds.height = currentBounds.height > 0 ? currentBounds.height : pageSize.height - currentBounds.y;
      return currentBounds;
    };
    TextLayouter2.prototype.getTextPageBounds = function(currentPage, currentBounds, stringResult) {
      var textSize = stringResult.actualSize;
      var x = currentBounds.x;
      var y = currentBounds.y;
      var width = currentBounds.width > 0 ? currentBounds.width : textSize.width;
      var height = textSize.height;
      var shiftedRect = currentPage.graphics.checkCorrectLayoutRectangle(textSize, currentBounds.x, currentBounds.y, this.format);
      x = shiftedRect.x;
      var verticalShift = currentPage.graphics.getTextVerticalAlignShift(textSize.height, currentBounds.height, this.format);
      y += verticalShift;
      var bounds = new RectangleF(x, y, width, height);
      return bounds;
    };
    return TextLayouter2;
  }(ElementLayouter)
);
var TextPageLayoutResult = (
  /** @class */
  /* @__PURE__ */ function() {
    function TextPageLayoutResult2() {
    }
    return TextPageLayoutResult2;
  }()
);
var PdfTextLayoutResult = (
  /** @class */
  function(_super) {
    __extends59(PdfTextLayoutResult2, _super);
    function PdfTextLayoutResult2(page, bounds, remainder, lastLineBounds) {
      var _this = _super.call(this, page, bounds) || this;
      _this.remainderText = remainder;
      _this.lastLineTextBounds = lastLineBounds;
      return _this;
    }
    Object.defineProperty(PdfTextLayoutResult2.prototype, "remainder", {
      // Properties
      /**
       * Gets a value that contains the `text` that was not printed.
       * @private
       */
      get: function() {
        return this.remainderText;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextLayoutResult2.prototype, "lastLineBounds", {
      /**
       * Gets a value that indicates the `bounds` of the last line that was printed on the page.
       * @private
       */
      get: function() {
        return this.lastLineTextBounds;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTextLayoutResult2;
  }(PdfLayoutResult)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/text-element.js
var __extends60 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTextElement = (
  /** @class */
  function(_super) {
    __extends60(PdfTextElement2, _super);
    function PdfTextElement2(arg1, arg2, arg3, arg4, arg5) {
      var _this = _super.call(this) || this;
      _this.content = "";
      _this.elementValue = "";
      _this.hasPointOverload = false;
      _this.isPdfTextElement = false;
      if (typeof arg1 === "undefined") {
      } else if (typeof arg1 === "string" && typeof arg2 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
      } else if (typeof arg1 === "string" && arg2 instanceof PdfFont && typeof arg3 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
      } else if (typeof arg1 === "string" && arg2 instanceof PdfFont && arg3 instanceof PdfPen && typeof arg4 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
        _this.pdfPen = arg3;
      } else if (typeof arg1 === "string" && arg2 instanceof PdfFont && arg3 instanceof PdfBrush && typeof arg4 === "undefined") {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
        _this.pdfBrush = arg3;
      } else {
        _this.content = arg1;
        _this.elementValue = arg1;
        _this.pdfFont = arg2;
        _this.pdfPen = arg3;
        _this.pdfBrush = arg4;
        _this.format = arg5;
      }
      return _this;
    }
    Object.defineProperty(PdfTextElement2.prototype, "text", {
      // Properties
      /**
       * Gets or sets a value indicating the `text` that should be printed.
       * ```typescript
       * // create a new PDF document.
       * let document : PdfDocument = new PdfDocument();
       * // add a page to the document.
       * let page1 : PdfPage = document.pages.add();
       * // create the font
       * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
       * // create the Text Web Link
       * let textLink : PdfTextWebLink = new PdfTextWebLink();
       * // set the hyperlink
       * textLink.url = 'http://www.google.com';
       * //
       * // set the link text
       * textLink.text = 'Google';
       * //
       * // set the font
       * textLink.font = font;
       * // draw the hyperlink in PDF page
       * textLink.draw(page1, new PointF(10, 40));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.elementValue = value;
        this.content = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "value", {
      //get value
      /**
       * Gets or sets a `value` indicating the text that should be printed.
       * @private
       */
      get: function() {
        return this.elementValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "pen", {
      //get pen
      /**
       * Gets or sets a `PdfPen` that determines the color, width, and style of the text
       * @private
       */
      get: function() {
        return this.pdfPen;
      },
      //Set pen value
      set: function(value) {
        this.pdfPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "brush", {
      //get brush
      /**
       * Gets or sets the `PdfBrush` that will be used to draw the text with color and texture.
       * @private
       */
      get: function() {
        return this.pdfBrush;
      },
      //Set brush value
      set: function(value) {
        this.pdfBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "font", {
      //get font
      /**
       * Gets or sets a `PdfFont` that defines the text format.
       * ```typescript
       * // create a new PDF document.
       * let document : PdfDocument = new PdfDocument();
       * // add a page to the document.
       * let page1 : PdfPage = document.pages.add();
       * // create the font
       * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
       * // create the Text Web Link
       * let textLink : PdfTextWebLink = new PdfTextWebLink();
       * // set the hyperlink
       * textLink.url = 'http://www.google.com';
       * // set the link text
       * textLink.text = 'Google';
       * //
       * // set the font
       * textLink.font = font;
       * //
       * // draw the hyperlink in PDF page
       * textLink.draw(page1, new PointF(10, 40));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.pdfFont;
      },
      set: function(value) {
        this.pdfFont = value;
        if (this.pdfFont instanceof PdfStandardFont && this.content != null) {
          this.elementValue = PdfStandardFont.convert(this.content);
        } else {
          this.elementValue = this.content;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTextElement2.prototype, "stringFormat", {
      /**
       * Gets or sets the `PdfStringFormat` that will be used to set the string format
       * @private
       */
      get: function() {
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTextElement2.prototype.getBrush = function() {
      return this.pdfBrush == null || typeof this.pdfBrush === "undefined" ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.pdfBrush;
    };
    PdfTextElement2.prototype.layout = function(param) {
      var layouter = new TextLayouter(this);
      var result = layouter.layout(param);
      return result;
    };
    PdfTextElement2.prototype.drawText = function(arg2, arg3, arg4, arg5) {
      if (arg3 instanceof PointF && typeof arg3.width === "undefined" && typeof arg4 === "undefined") {
        this.hasPointOverload = true;
        return this.drawText(arg2, arg3.x, arg3.y);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "undefined") {
        this.hasPointOverload = true;
        return this.drawText(arg2, arg3, arg4, null);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "undefined") {
        return this.drawText(arg2, arg3, null);
      } else if (arg3 instanceof PointF && typeof arg3.width === "undefined" && arg4 instanceof PdfLayoutFormat) {
        this.hasPointOverload = true;
        return this.drawText(arg2, arg3.x, arg3.y, arg4);
      } else if (typeof arg3 === "number" && typeof arg4 === "number" && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {
        this.hasPointOverload = true;
        var width = arg2.graphics.clientSize.width - arg3;
        var layoutRectangle = new RectangleF(arg3, arg4, width, 0);
        return this.drawText(arg2, layoutRectangle, arg5);
      } else if (arg3 instanceof RectangleF && typeof arg3.width !== "undefined" && typeof arg4 === "boolean") {
        return this.drawText(arg2, arg3, null);
      } else {
        var layout = new PdfStringLayouter();
        if (this.hasPointOverload) {
          var stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.graphics.clientSize.width - arg3.x, 0), true, arg2.graphics.clientSize);
          var layoutResult = void 0;
          var param = new PdfLayoutParams();
          var temparg3 = arg3;
          var temparg4 = arg4;
          param.page = arg2;
          var previousPage = arg2;
          param.bounds = temparg3;
          param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();
          if (stringLayoutResult.lines.length > 1) {
            this.text = stringLayoutResult.layoutLines[0].text;
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              var previousPosition = new PointF(param.bounds.x, param.bounds.y);
              layoutResult = this.layout(param);
              var bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight);
              var isPaginate = false;
              for (var i = 1; i < stringLayoutResult.lines.length; i++) {
                param.page = layoutResult.page;
                param.bounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));
                this.text = stringLayoutResult.layoutLines[i].text;
                if (bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height) {
                  isPaginate = true;
                  param.page = param.page.graphics.getNextPage();
                  if (previousPosition.y > layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height) {
                    bounds = new RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                  } else {
                    bounds = new RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                  }
                  param.bounds = bounds;
                }
                layoutResult = this.layout(param);
                if (i !== stringLayoutResult.lines.length - 1) {
                  bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);
                } else {
                  var lineWidth = this.font.measureString(this.text, this.format).width;
                  layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);
                }
              }
            }
            return layoutResult;
          } else {
            var lineSize = this.font.measureString(this.text, this.format);
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              layoutResult = this.layout(param);
              layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0);
            }
            return layoutResult;
          }
        } else {
          var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg3.width, 0), false, arg2.graphics.clientSize);
          var result = void 0;
          var param = new PdfLayoutParams();
          var temparg3 = arg3;
          var temparg4 = arg4;
          param.page = arg2;
          param.bounds = temparg3;
          param.format = temparg4 != null ? temparg4 : new PdfLayoutFormat();
          if (layoutResult.lines.length > 1) {
            this.text = layoutResult.layoutLines[0].text;
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              var previousPosition = new PointF(param.bounds.x, param.bounds.y);
              result = this.layout(param);
              var bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
              var isPaginate = false;
              for (var i = 1; i < layoutResult.lines.length; i++) {
                param.page = result.page;
                param.bounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
                this.text = layoutResult.layoutLines[i].text;
                if (bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height) {
                  isPaginate = true;
                  param.page = param.page.graphics.getNextPage();
                  if (previousPosition.y > result.page.graphics.clientSize.height - result.bounds.height) {
                    bounds = new RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                  } else {
                    bounds = new RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight);
                  }
                  param.bounds = bounds;
                }
                result = this.layout(param);
                if (i !== layoutResult.lines.length - 1) {
                  bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);
                } else {
                  var lineWidth = this.font.measureString(this.text, this.format).width;
                  result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);
                }
              }
            }
            return result;
          } else {
            var lineSize = this.font.measureString(this.text, this.format);
            if (param.bounds.y <= param.page.graphics.clientSize.height) {
              result = this.layout(param);
              result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x);
            }
            return result;
          }
        }
      }
    };
    PdfTextElement2.prototype.calculateResultBounds = function(result, lineWidth, maximumWidth, startPosition) {
      var shift = 0;
      if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Center) {
        result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2;
        result.bounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Right) {
        result.bounds.x = startPosition + (maximumWidth - lineWidth);
        result.bounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Justify) {
        result.bounds.x = startPosition;
        result.bounds.width = maximumWidth;
      } else {
        result.bounds.width = startPosition;
        result.bounds.width = lineWidth;
      }
      return result;
    };
    return PdfTextElement2;
  }(PdfLayoutElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/uri-annotation.js
var __extends61 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfUriAnnotation = (
  /** @class */
  function(_super) {
    __extends61(PdfUriAnnotation2, _super);
    function PdfUriAnnotation2(rectangle, uri) {
      var _this = _super.call(this, rectangle) || this;
      if (typeof uri !== "undefined") {
        _this.uri = uri;
      }
      return _this;
    }
    Object.defineProperty(PdfUriAnnotation2.prototype, "uriAction", {
      /**
       * Get `action` of the annotation.
       * @private
       */
      get: function() {
        if (typeof this.pdfUriAction === "undefined") {
          this.pdfUriAction = new PdfUriAction();
        }
        return this.pdfUriAction;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfUriAnnotation2.prototype, "uri", {
      // Properties
      /**
       * Gets or sets the `Uri` address.
       * @private
       */
      get: function() {
        return this.uriAction.uri;
      },
      set: function(value) {
        if (this.uriAction.uri !== value) {
          this.uriAction.uri = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfUriAnnotation2.prototype, "action", {
      /**
       * Gets or sets the `action`.
       * @private
       */
      get: function() {
        return this.getSetAction();
      },
      set: function(value) {
        this.getSetAction(value);
        this.uriAction.next = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfUriAnnotation2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));
      var tempPrimitive = this.uriAction.element;
      this.dictionary.items.setValue(this.dictionaryProperties.a, this.uriAction.element);
    };
    return PdfUriAnnotation2;
  }(PdfActionLinkAnnotation)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/pdf-text-web-link.js
var __extends62 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTextWebLink = (
  /** @class */
  function(_super) {
    __extends62(PdfTextWebLink2, _super);
    function PdfTextWebLink2() {
      var _this = _super.call(this) || this;
      _this.uniformResourceLocator = "";
      _this.uriAnnotation = null;
      _this.recalculateBounds = false;
      _this.defaultBorder = new PdfArray();
      for (var i = 0; i < 3; i++) {
        _this.defaultBorder.add(new PdfNumber(0));
      }
      return _this;
    }
    Object.defineProperty(PdfTextWebLink2.prototype, "url", {
      // Properties
      /**
       * Gets or sets the `Uri address`.
       * ```typescript
       * // create a new PDF document.
       * let document : PdfDocument = new PdfDocument();
       * // add a page to the document.
       * let page1 : PdfPage = document.pages.add();
       * // create the font
       * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);
       * // create the Text Web Link
       * let textLink : PdfTextWebLink = new PdfTextWebLink();
       * //
       * // set the hyperlink
       * textLink.url = 'http://www.google.com';
       * //
       * // set the link text
       * textLink.text = 'Google';
       * // set the font
       * textLink.font = font;
       * // draw the hyperlink in PDF page
       * textLink.draw(page1, new PointF(10, 40));
       * // save the document.
       * document.save('output.pdf');
       * // destroy the document
       * document.destroy();
       * ```
       */
      get: function() {
        return this.uniformResourceLocator;
      },
      set: function(value) {
        if (value.length === 0) {
          throw new Error("ArgumentException : Url - string can not be empty");
        }
        this.uniformResourceLocator = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfTextWebLink2.prototype.draw = function(arg1, arg2) {
      if (arg1 instanceof PdfPage) {
        var layout = new PdfStringLayouter();
        var previousFontStyle = this.font.style;
        if (arg2 instanceof PointF) {
          this.recalculateBounds = true;
          this.font.style = PdfFontStyle.Underline;
          var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg1.graphics.clientSize.width - arg2.x, 0), true, arg1.graphics.clientSize);
          if (layoutResult.lines.length === 1) {
            var textSize = this.font.measureString(this.value);
            var rect = new RectangleF(arg2, textSize);
            rect = this.calculateBounds(rect, textSize.width, arg1.graphics.clientSize.width, arg2.x);
            this.uriAnnotation = new PdfUriAnnotation(rect, this.url);
            this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
            arg1.annotations.add(this.uriAnnotation);
            var result = this.drawText(arg1, arg2);
            this.font.style = previousFontStyle;
            return result;
          } else {
            var result = this.drawMultipleLineWithPoint(layoutResult, arg1, arg2);
            this.font.style = previousFontStyle;
            return result;
          }
        } else {
          var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.width, 0), false, new SizeF(0, 0));
          this.font.style = PdfFontStyle.Underline;
          if (layoutResult.lines.length === 1) {
            var textSize = this.font.measureString(this.value);
            var rect = new RectangleF(new PointF(arg2.x, arg2.y), textSize);
            rect = this.calculateBounds(rect, textSize.width, arg2.width, arg2.x);
            this.uriAnnotation = new PdfUriAnnotation(rect, this.url);
            this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
            arg1.annotations.add(this.uriAnnotation);
            var returnValue = this.drawText(arg1, arg2);
            this.font.style = previousFontStyle;
            return returnValue;
          } else {
            var returnValue = this.drawMultipleLineWithBounds(layoutResult, arg1, arg2);
            this.font.style = previousFontStyle;
            return returnValue;
          }
        }
      } else {
        var page = new PdfPage();
        page = arg1.page;
        return this.draw(page, arg2);
      }
    };
    PdfTextWebLink2.prototype.drawMultipleLineWithPoint = function(result, page, location) {
      var layoutResult;
      for (var i = 0; i < result.layoutLines.length; i++) {
        var size = this.font.measureString(result.lines[i].text);
        var bounds = new RectangleF(location, size);
        if (i !== 0) {
          bounds.x = 0;
        }
        this.text = result.lines[i].text;
        if (bounds.y + size.height > page.graphics.clientSize.height) {
          if (i !== 0) {
            page = page.graphics.getNextPage();
            bounds = new RectangleF(0, 0, page.graphics.clientSize.width, size.height);
            location.y = 0;
          } else {
            break;
          }
        }
        bounds = this.calculateBounds(bounds, size.width, page.graphics.clientSize.width, bounds.x);
        this.uriAnnotation = new PdfUriAnnotation(bounds, this.url);
        this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
        page.annotations.add(this.uriAnnotation);
        if (i !== 0) {
          layoutResult = this.drawText(page, new PointF(0, bounds.y));
        } else {
          layoutResult = this.drawText(page, bounds.x, bounds.y);
        }
        location.y += size.height;
      }
      return layoutResult;
    };
    PdfTextWebLink2.prototype.drawMultipleLineWithBounds = function(result, page, bounds) {
      var layoutResult;
      for (var i = 0; i < result.layoutLines.length; i++) {
        var size = this.font.measureString(result.lines[i].text);
        var internalBounds = new RectangleF(new PointF(bounds.x, bounds.y), size);
        internalBounds = this.calculateBounds(internalBounds, size.width, bounds.width, bounds.x);
        this.text = result.lines[i].text;
        if (bounds.y + size.height > page.graphics.clientSize.height) {
          if (i !== 0) {
            page = page.graphics.getNextPage();
            bounds = new RectangleF(bounds.x, 0, bounds.width, size.height);
            internalBounds.y = 0;
          } else {
            break;
          }
        }
        this.uriAnnotation = new PdfUriAnnotation(internalBounds, this.url);
        this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder);
        page.annotations.add(this.uriAnnotation);
        layoutResult = this.drawText(page, bounds);
        bounds.y += size.height;
      }
      return layoutResult;
    };
    PdfTextWebLink2.prototype.calculateBounds = function(currentBounds, lineWidth, maximumWidth, startPosition) {
      var shift = 0;
      if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Center) {
        currentBounds.x = startPosition + (maximumWidth - lineWidth) / 2;
        currentBounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Right) {
        currentBounds.x = startPosition + (maximumWidth - lineWidth);
        currentBounds.width = lineWidth;
      } else if (this.stringFormat != null && typeof this.stringFormat !== "undefined" && this.stringFormat.alignment === PdfTextAlignment.Justify) {
        currentBounds.x = startPosition;
        currentBounds.width = maximumWidth;
      } else {
        currentBounds.width = startPosition;
        currentBounds.width = lineWidth;
      }
      return currentBounds;
    };
    return PdfTextWebLink2;
  }(PdfTextElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-numbers-convertor.js
var PdfNumbersConvertor = (
  /** @class */
  function() {
    function PdfNumbersConvertor2() {
    }
    PdfNumbersConvertor2.convert = function(intArabic, numberStyle) {
      var result = "";
      switch (numberStyle) {
        case PdfNumberStyle.None:
          result = "";
          break;
        case PdfNumberStyle.Numeric:
          result = intArabic.toString();
          break;
        case PdfNumberStyle.LowerLatin:
          result = this.arabicToLetter(intArabic).toLowerCase();
          break;
        case PdfNumberStyle.LowerRoman:
          result = this.arabicToRoman(intArabic).toLowerCase();
          break;
        case PdfNumberStyle.UpperLatin:
          result = this.arabicToLetter(intArabic);
          break;
        case PdfNumberStyle.UpperRoman:
          result = this.arabicToRoman(intArabic);
          break;
      }
      return result;
    };
    PdfNumbersConvertor2.arabicToRoman = function(intArabic) {
      var retval = "";
      var retvalM = this.generateNumber(intArabic, 1e3, "M");
      retval += retvalM.returnValue;
      intArabic = retvalM.intArabic;
      var retvalCM = this.generateNumber(intArabic, 900, "CM");
      retval += retvalCM.returnValue;
      intArabic = retvalCM.intArabic;
      var retvalD = this.generateNumber(intArabic, 500, "D");
      retval += retvalD.returnValue;
      intArabic = retvalD.intArabic;
      var retvalCD = this.generateNumber(intArabic, 400, "CD");
      retval += retvalCD.returnValue;
      intArabic = retvalCD.intArabic;
      var retvalC = this.generateNumber(intArabic, 100, "C");
      retval += retvalC.returnValue;
      intArabic = retvalC.intArabic;
      var retvalXC = this.generateNumber(intArabic, 90, "XC");
      retval += retvalXC.returnValue;
      intArabic = retvalXC.intArabic;
      var retvalL = this.generateNumber(intArabic, 50, "L");
      retval += retvalL.returnValue;
      intArabic = retvalL.intArabic;
      var retvalXL = this.generateNumber(intArabic, 40, "XL");
      retval += retvalXL.returnValue;
      intArabic = retvalXL.intArabic;
      var retvalX = this.generateNumber(intArabic, 10, "X");
      retval += retvalX.returnValue;
      intArabic = retvalX.intArabic;
      var retvalIX = this.generateNumber(intArabic, 9, "IX");
      retval += retvalIX.returnValue;
      intArabic = retvalIX.intArabic;
      var retvalV = this.generateNumber(intArabic, 5, "V");
      retval += retvalV.returnValue;
      intArabic = retvalV.intArabic;
      var retvalIV = this.generateNumber(intArabic, 4, "IV");
      retval += retvalIV.returnValue;
      intArabic = retvalIV.intArabic;
      var retvalI = this.generateNumber(intArabic, 1, "I");
      retval += retvalI.returnValue;
      intArabic = retvalI.intArabic;
      return retval.toString();
    };
    PdfNumbersConvertor2.arabicToLetter = function(arabic) {
      var stack = this.convertToLetter(arabic);
      var result = "";
      while (stack.length > 0) {
        var num = stack.pop();
        result = this.appendChar(result, num);
      }
      return result.toString();
    };
    PdfNumbersConvertor2.generateNumber = function(value, magnitude, letter) {
      var numberstring = "";
      while (value >= magnitude) {
        value -= magnitude;
        numberstring += letter;
      }
      return {
        returnValue: numberstring.toString(),
        intArabic: value
      };
    };
    PdfNumbersConvertor2.convertToLetter = function(arabic) {
      if (arabic <= 0) {
        throw Error("ArgumentOutOfRangeException-arabic, Value can not be less 0");
      }
      var stack = [];
      while (arabic > this.letterLimit) {
        var remainder = arabic % this.letterLimit;
        if (remainder === 0) {
          arabic = arabic / this.letterLimit - 1;
          remainder = this.letterLimit;
        } else {
          arabic /= this.letterLimit;
        }
        stack.push(remainder);
      }
      stack.push(arabic);
      return stack;
    };
    PdfNumbersConvertor2.appendChar = function(builder, value) {
      var letter = String.fromCharCode(PdfNumbersConvertor2.acsiiStartIndex + value);
      builder += letter;
      return builder;
    };
    PdfNumbersConvertor2.letterLimit = 26;
    PdfNumbersConvertor2.acsiiStartIndex = 65 - 1;
    return PdfNumbersConvertor2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-template-value-pair.js
var PdfTemplateValuePair = (
  /** @class */
  function() {
    function PdfTemplateValuePair2(template, value) {
      this.pdfTemplate = null;
      this.content = "";
      if (typeof template === "undefined") {
      } else {
        this.template = template;
        this.value = value;
      }
    }
    Object.defineProperty(PdfTemplateValuePair2.prototype, "template", {
      // Properties
      /**
       * Gets or sets the template.
       * @private
       */
      get: function() {
        return this.pdfTemplate;
      },
      set: function(value) {
        this.pdfTemplate = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfTemplateValuePair2.prototype, "value", {
      /**
       * Gets or sets the value.
       * @private
       */
      get: function() {
        return this.content;
      },
      set: function(value) {
        this.content = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfTemplateValuePair2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/multiple-value-field.js
var __extends63 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfMultipleValueField = (
  /** @class */
  function(_super) {
    __extends63(PdfMultipleValueField2, _super);
    function PdfMultipleValueField2() {
      var _this = _super.call(this) || this;
      _this.list = new TemporaryDictionary();
      return _this;
    }
    PdfMultipleValueField2.prototype.performDraw = function(graphics, location, scalingX, scalingY) {
      _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);
      var value = this.getValue(graphics);
      var template = new PdfTemplate(this.getSize());
      this.list.setValue(graphics, new PdfTemplateValuePair(template, value));
      var g = template.graphics;
      var size = this.getSize();
      template.graphics.drawString(value, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);
      var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);
      graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));
    };
    return PdfMultipleValueField2;
  }(PdfAutomaticField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-page-number-field.js
var __extends64 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPageNumberField = (
  /** @class */
  function(_super) {
    __extends64(PdfPageNumberField2, _super);
    function PdfPageNumberField2(font, arg2) {
      var _this = _super.call(this) || this;
      _this.internalNumberStyle = PdfNumberStyle.Numeric;
      if (typeof arg2 === "undefined") {
        _this.font = font;
      } else if (arg2 instanceof PdfBrush) {
        _this.font = font;
        _this.brush = arg2;
      } else {
        _this.font = font;
        _this.bounds = arg2;
      }
      return _this;
    }
    Object.defineProperty(PdfPageNumberField2.prototype, "numberStyle", {
      // Properties
      /**
       * Gets and sets the number style of the page number field.
       * @private
       */
      get: function() {
        return this.internalNumberStyle;
      },
      set: function(value) {
        this.internalNumberStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageNumberField2.prototype.getValue = function(graphics) {
      var result = null;
      var page = this.getPageFromGraphics(graphics);
      result = this.internalGetValue(page);
      return result;
    };
    PdfPageNumberField2.prototype.internalGetValue = function(page) {
      var document2 = page.document;
      var pageIndex = document2.pages.indexOf(page) + 1;
      return PdfNumbersConvertor.convert(pageIndex, this.numberStyle);
    };
    return PdfPageNumberField2;
  }(PdfMultipleValueField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/composite-field.js
var __extends65 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfCompositeField = (
  /** @class */
  function(_super) {
    __extends65(PdfCompositeField2, _super);
    function PdfCompositeField2(font, brush, text) {
      var list = [];
      for (var _i = 3; _i < arguments.length; _i++) {
        list[_i - 3] = arguments[_i];
      }
      var _this = _super.call(this) || this;
      _this.internalAutomaticFields = null;
      _this.internalText = "";
      _this.font = font;
      _this.brush = brush;
      _this.text = text;
      _this.automaticFields = list;
      return _this;
    }
    Object.defineProperty(PdfCompositeField2.prototype, "text", {
      // Properties
      /**
       * Gets and sets the content of the field.
       * @public
       */
      get: function() {
        return this.internalText;
      },
      set: function(value) {
        this.internalText = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfCompositeField2.prototype, "automaticFields", {
      /**
       * Gets and sets the list of the field to drawn.
       * @public
       */
      get: function() {
        return this.internalAutomaticFields;
      },
      set: function(value) {
        this.internalAutomaticFields = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfCompositeField2.prototype.getValue = function(graphics) {
      var values = [];
      var text = this.text.toString();
      if (typeof this.automaticFields !== "undefined" && this.automaticFields != null && this.automaticFields.length > 0) {
        for (var i = 0; i < this.automaticFields.length; i++) {
          var automaticField = this.automaticFields[i];
          text = text.replace("{" + i + "}", automaticField.getValue(graphics));
        }
      }
      return text;
    };
    return PdfCompositeField2;
  }(PdfMultipleValueField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/single-value-field.js
var __extends66 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSingleValueField = (
  /** @class */
  function(_super) {
    __extends66(PdfSingleValueField2, _super);
    function PdfSingleValueField2() {
      var _this = _super.call(this) || this;
      _this.list = new TemporaryDictionary();
      _this.painterGraphics = [];
      return _this;
    }
    PdfSingleValueField2.prototype.performDraw = function(graphics, location, scalingX, scalingY) {
      _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);
      var page = this.getPageFromGraphics(graphics);
      var document2 = page.document;
      var textValue = this.getValue(graphics);
      if (this.list.containsKey(document2)) {
        var pair = this.list.getValue(document2);
        var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);
        graphics.drawPdfTemplate(pair.template, drawLocation, new SizeF(pair.template.width * scalingX, pair.template.height * scalingY));
        this.painterGraphics.push(graphics);
      } else {
        var size = this.getSize();
        var template = new PdfTemplate(size);
        this.list.setValue(document2, new PdfTemplateValuePair(template, textValue));
        template.graphics.drawString(textValue, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);
        var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);
        graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));
        this.painterGraphics.push(graphics);
      }
    };
    return PdfSingleValueField2;
  }(PdfAutomaticField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/page-count-field.js
var __extends67 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPageCountField = (
  /** @class */
  function(_super) {
    __extends67(PdfPageCountField2, _super);
    function PdfPageCountField2(font, arg2) {
      var _this = _super.call(this) || this;
      _this.internalNumberStyle = PdfNumberStyle.Numeric;
      if (typeof arg2 === "undefined") {
        _this.font = font;
      } else if (arg2 instanceof PdfBrush) {
        _this.font = font;
        _this.brush = arg2;
      } else {
        _this.font = font;
        _this.bounds = arg2;
      }
      return _this;
    }
    Object.defineProperty(PdfPageCountField2.prototype, "numberStyle", {
      // Properties
      /**
       * Gets and sets the number style of the field.
       * @public
       */
      get: function() {
        return this.internalNumberStyle;
      },
      set: function(value) {
        this.internalNumberStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfPageCountField2.prototype.getValue = function(graphics) {
      var result = null;
      var page = this.getPageFromGraphics(graphics);
      var document2 = page.section.parent.document;
      var count2 = document2.pages.count;
      result = PdfNumbersConvertor.convert(count2, this.numberStyle);
      return result;
    };
    return PdfPageCountField2;
  }(PdfSingleValueField)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/enum.js
var PdfDestinationMode;
(function(PdfDestinationMode2) {
  PdfDestinationMode2[PdfDestinationMode2["Location"] = 0] = "Location";
  PdfDestinationMode2[PdfDestinationMode2["FitToPage"] = 1] = "FitToPage";
  PdfDestinationMode2[PdfDestinationMode2["FitR"] = 2] = "FitR";
})(PdfDestinationMode || (PdfDestinationMode = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-destination.js
var PdfDestination = (
  /** @class */
  function() {
    function PdfDestination2(arg1, arg2) {
      this.dictionaryProperties = new DictionaryProperties();
      this.destinationMode = PdfDestinationMode.Location;
      this.zoomFactor = 0;
      this.destinationLocation = new PointF(0, 0);
      this.bounds = new RectangleF();
      this.array = new PdfArray();
      var angle = PdfPageRotateAngle.RotateAngle0;
      this.destinationLocation = new PointF(0, this.destinationLocation.y);
      this.pdfPage = arg1;
      if (arg2 instanceof PointF) {
        this.destinationLocation = arg2;
      } else {
        this.bounds = arg2;
      }
    }
    Object.defineProperty(PdfDestination2.prototype, "zoom", {
      // Properties
      /**
       * Gets and Sets the `zoom` factor.
       * @private
       */
      get: function() {
        return this.zoomFactor;
      },
      set: function(value) {
        this.zoomFactor = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDestination2.prototype, "page", {
      /**
       * Gets and Sets the `page` object.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      set: function(value) {
        this.pdfPage = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDestination2.prototype, "mode", {
      /**
       * Gets and Sets the destination `mode`.
       * @private
       */
      get: function() {
        return this.destinationMode;
      },
      set: function(value) {
        this.destinationMode = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfDestination2.prototype, "location", {
      /**
       * Gets and Sets the `location`.
       * @private
       */
      get: function() {
        return this.destinationLocation;
      },
      set: function(value) {
        this.destinationLocation = value;
        this.initializePrimitive();
      },
      enumerable: true,
      configurable: true
    });
    PdfDestination2.prototype.pointToNativePdf = function(page, point) {
      var section = page.section;
      return section.pointToNativePdf(page, point);
    };
    PdfDestination2.prototype.initializePrimitive = function() {
      this.array.clear();
      this.array.add(new PdfReferenceHolder(this.pdfPage));
      switch (this.destinationMode) {
        case PdfDestinationMode.Location:
          var simplePage = this.pdfPage;
          var point = new PointF();
          point = this.pointToNativePdf(simplePage, this.destinationLocation);
          this.array.add(new PdfName(this.dictionaryProperties.xyz));
          this.array.add(new PdfNumber(point.x));
          this.array.add(new PdfNumber(point.y));
          this.array.add(new PdfNumber(this.zoomFactor));
          break;
        case PdfDestinationMode.FitToPage:
          this.array.add(new PdfName(this.dictionaryProperties.fit));
          break;
      }
    };
    Object.defineProperty(PdfDestination2.prototype, "element", {
      /**
       * Gets the `element` representing this object.
       * @private
       */
      get: function() {
        this.initializePrimitive();
        return this.array;
      },
      enumerable: true,
      configurable: true
    });
    return PdfDestination2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/functions/pdf-function.js
var PdfFunction = (
  /** @class */
  function() {
    function PdfFunction2(dictionary) {
      this.mDictionary = null;
      this.mDictionaryProperties = new DictionaryProperties();
      this.mDictionary = dictionary;
    }
    Object.defineProperty(PdfFunction2.prototype, "domain", {
      //Properties
      /**
       * Gets or sets the domain of the function.
       * @public
       */
      get: function() {
        var domain = this.mDictionary.items.getValue(this.mDictionaryProperties.domain);
        return domain;
      },
      set: function(value) {
        this.mDictionary.items.setValue(this.mDictionaryProperties.domain, value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFunction2.prototype, "range", {
      /**
       * Gets or sets the range.
       * @public
       */
      get: function() {
        var range = this.mDictionary.items.getValue(this.mDictionaryProperties.range);
        return range;
      },
      set: function(value) {
        this.mDictionary.items.setValue(this.mDictionaryProperties.range, value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFunction2.prototype, "dictionary", {
      /**
       * Gets the dictionary.
       */
      get: function() {
        return this.mDictionary;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfFunction2.prototype, "element", {
      //IPdfWrapper Members
      /**
       * Gets the element.
       */
      get: function() {
        return this.mDictionary;
      },
      enumerable: true,
      configurable: true
    });
    return PdfFunction2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/functions/pdf-sampled-function.js
var __extends68 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfSampledFunction = (
  /** @class */
  function(_super) {
    __extends68(PdfSampledFunction2, _super);
    function PdfSampledFunction2(domain, range, sizes, samples) {
      var _this = _super.call(this, new PdfStream()) || this;
      if (typeof domain === "undefined") {
        _this.dictionary.items.setValue(_this.mDictionaryProperties.functionType, new PdfNumber(0));
      } else {
        _this.dictionary.items.setValue(_this.mDictionaryProperties.functionType, new PdfNumber(0));
        _this.checkParams(domain, range, sizes, samples);
        _this.setDomainAndRange(domain, range);
        _this.setSizeAndValues(sizes, samples);
      }
      return _this;
    }
    PdfSampledFunction2.prototype.checkParams = function(domain, range, sizes, samples) {
      var rLength = range.length;
      var dLength = domain.length;
      var sLength = samples.length;
      var frameLength = rLength * (dLength / 4);
    };
    PdfSampledFunction2.prototype.setDomainAndRange = function(domain, range) {
      this.domain = new PdfArray(domain);
      this.range = new PdfArray(range);
    };
    PdfSampledFunction2.prototype.setSizeAndValues = function(sizes, samples) {
      var s = this.dictionary;
      s.isResource = true;
      this.dictionary.items.setValue(this.mDictionaryProperties.size, new PdfArray(sizes));
      this.dictionary.items.setValue(this.mDictionaryProperties.bitsPerSample, new PdfNumber(8));
      s.writeBytes(samples);
    };
    return PdfSampledFunction2;
  }(PdfFunction)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/enum.js
var PdfExtend;
(function(PdfExtend2) {
  PdfExtend2[PdfExtend2["None"] = 0] = "None";
  PdfExtend2[PdfExtend2["Start"] = 1] = "Start";
  PdfExtend2[PdfExtend2["End"] = 2] = "End";
  PdfExtend2[PdfExtend2["Both"] = 3] = "Both";
})(PdfExtend || (PdfExtend = {}));
var PdfLinearGradientMode;
(function(PdfLinearGradientMode2) {
  PdfLinearGradientMode2[PdfLinearGradientMode2["BackwardDiagonal"] = 0] = "BackwardDiagonal";
  PdfLinearGradientMode2[PdfLinearGradientMode2["ForwardDiagonal"] = 1] = "ForwardDiagonal";
  PdfLinearGradientMode2[PdfLinearGradientMode2["Horizontal"] = 2] = "Horizontal";
  PdfLinearGradientMode2[PdfLinearGradientMode2["Vertical"] = 3] = "Vertical";
})(PdfLinearGradientMode || (PdfLinearGradientMode = {}));
var ShadingType;
(function(ShadingType2) {
  ShadingType2[ShadingType2["Function"] = 1] = "Function";
  ShadingType2[ShadingType2["Axial"] = 2] = "Axial";
  ShadingType2[ShadingType2["Radial"] = 3] = "Radial";
})(ShadingType || (ShadingType = {}));
var KnownColor;
(function(KnownColor2) {
  KnownColor2[KnownColor2["ActiveBorder"] = 1] = "ActiveBorder";
  KnownColor2[KnownColor2["ActiveCaption"] = 2] = "ActiveCaption";
  KnownColor2[KnownColor2["ActiveCaptionText"] = 3] = "ActiveCaptionText";
  KnownColor2[KnownColor2["AppWorkspace"] = 4] = "AppWorkspace";
  KnownColor2[KnownColor2["Control"] = 5] = "Control";
  KnownColor2[KnownColor2["ControlDark"] = 6] = "ControlDark";
  KnownColor2[KnownColor2["ControlDarkDark"] = 7] = "ControlDarkDark";
  KnownColor2[KnownColor2["ControlLight"] = 8] = "ControlLight";
  KnownColor2[KnownColor2["ControlLightLight"] = 9] = "ControlLightLight";
  KnownColor2[KnownColor2["ControlText"] = 10] = "ControlText";
  KnownColor2[KnownColor2["Desktop"] = 11] = "Desktop";
  KnownColor2[KnownColor2["GrayText"] = 12] = "GrayText";
  KnownColor2[KnownColor2["Highlight"] = 13] = "Highlight";
  KnownColor2[KnownColor2["HighlightText"] = 14] = "HighlightText";
  KnownColor2[KnownColor2["HotTrack"] = 15] = "HotTrack";
  KnownColor2[KnownColor2["InactiveBorder"] = 16] = "InactiveBorder";
  KnownColor2[KnownColor2["InactiveCaption"] = 17] = "InactiveCaption";
  KnownColor2[KnownColor2["InactiveCaptionText"] = 18] = "InactiveCaptionText";
  KnownColor2[KnownColor2["Info"] = 19] = "Info";
  KnownColor2[KnownColor2["InfoText"] = 20] = "InfoText";
  KnownColor2[KnownColor2["Menu"] = 21] = "Menu";
  KnownColor2[KnownColor2["MenuText"] = 22] = "MenuText";
  KnownColor2[KnownColor2["ScrollBar"] = 23] = "ScrollBar";
  KnownColor2[KnownColor2["Window"] = 24] = "Window";
  KnownColor2[KnownColor2["WindowFrame"] = 25] = "WindowFrame";
  KnownColor2[KnownColor2["WindowText"] = 26] = "WindowText";
  KnownColor2[KnownColor2["Transparent"] = 27] = "Transparent";
  KnownColor2[KnownColor2["AliceBlue"] = 28] = "AliceBlue";
  KnownColor2[KnownColor2["AntiqueWhite"] = 29] = "AntiqueWhite";
  KnownColor2[KnownColor2["Aqua"] = 30] = "Aqua";
  KnownColor2[KnownColor2["Aquamarine"] = 31] = "Aquamarine";
  KnownColor2[KnownColor2["Azure"] = 32] = "Azure";
  KnownColor2[KnownColor2["Beige"] = 33] = "Beige";
  KnownColor2[KnownColor2["Bisque"] = 34] = "Bisque";
  KnownColor2[KnownColor2["Black"] = 35] = "Black";
  KnownColor2[KnownColor2["BlanchedAlmond"] = 36] = "BlanchedAlmond";
  KnownColor2[KnownColor2["Blue"] = 37] = "Blue";
  KnownColor2[KnownColor2["BlueViolet"] = 38] = "BlueViolet";
  KnownColor2[KnownColor2["Brown"] = 39] = "Brown";
  KnownColor2[KnownColor2["BurlyWood"] = 40] = "BurlyWood";
  KnownColor2[KnownColor2["CadetBlue"] = 41] = "CadetBlue";
  KnownColor2[KnownColor2["Chartreuse"] = 42] = "Chartreuse";
  KnownColor2[KnownColor2["Chocolate"] = 43] = "Chocolate";
  KnownColor2[KnownColor2["Coral"] = 44] = "Coral";
  KnownColor2[KnownColor2["CornflowerBlue"] = 45] = "CornflowerBlue";
  KnownColor2[KnownColor2["Cornsilk"] = 46] = "Cornsilk";
  KnownColor2[KnownColor2["Crimson"] = 47] = "Crimson";
  KnownColor2[KnownColor2["Cyan"] = 48] = "Cyan";
  KnownColor2[KnownColor2["DarkBlue"] = 49] = "DarkBlue";
  KnownColor2[KnownColor2["DarkCyan"] = 50] = "DarkCyan";
  KnownColor2[KnownColor2["DarkGoldenrod"] = 51] = "DarkGoldenrod";
  KnownColor2[KnownColor2["DarkGray"] = 52] = "DarkGray";
  KnownColor2[KnownColor2["DarkGreen"] = 53] = "DarkGreen";
  KnownColor2[KnownColor2["DarkKhaki"] = 54] = "DarkKhaki";
  KnownColor2[KnownColor2["DarkMagenta"] = 55] = "DarkMagenta";
  KnownColor2[KnownColor2["DarkOliveGreen"] = 56] = "DarkOliveGreen";
  KnownColor2[KnownColor2["DarkOrange"] = 57] = "DarkOrange";
  KnownColor2[KnownColor2["DarkOrchid"] = 58] = "DarkOrchid";
  KnownColor2[KnownColor2["DarkRed"] = 59] = "DarkRed";
  KnownColor2[KnownColor2["DarkSalmon"] = 60] = "DarkSalmon";
  KnownColor2[KnownColor2["DarkSeaGreen"] = 61] = "DarkSeaGreen";
  KnownColor2[KnownColor2["DarkSlateBlue"] = 62] = "DarkSlateBlue";
  KnownColor2[KnownColor2["DarkSlateGray"] = 63] = "DarkSlateGray";
  KnownColor2[KnownColor2["DarkTurquoise"] = 64] = "DarkTurquoise";
  KnownColor2[KnownColor2["DarkViolet"] = 65] = "DarkViolet";
  KnownColor2[KnownColor2["DeepPink"] = 66] = "DeepPink";
  KnownColor2[KnownColor2["DeepSkyBlue"] = 67] = "DeepSkyBlue";
  KnownColor2[KnownColor2["DimGray"] = 68] = "DimGray";
  KnownColor2[KnownColor2["DodgerBlue"] = 69] = "DodgerBlue";
  KnownColor2[KnownColor2["Firebrick"] = 70] = "Firebrick";
  KnownColor2[KnownColor2["FloralWhite"] = 71] = "FloralWhite";
  KnownColor2[KnownColor2["ForestGreen"] = 72] = "ForestGreen";
  KnownColor2[KnownColor2["Fuchsia"] = 73] = "Fuchsia";
  KnownColor2[KnownColor2["Gainsboro"] = 74] = "Gainsboro";
  KnownColor2[KnownColor2["GhostWhite"] = 75] = "GhostWhite";
  KnownColor2[KnownColor2["Gold"] = 76] = "Gold";
  KnownColor2[KnownColor2["Goldenrod"] = 77] = "Goldenrod";
  KnownColor2[KnownColor2["Gray"] = 78] = "Gray";
  KnownColor2[KnownColor2["Green"] = 79] = "Green";
  KnownColor2[KnownColor2["GreenYellow"] = 80] = "GreenYellow";
  KnownColor2[KnownColor2["Honeydew"] = 81] = "Honeydew";
  KnownColor2[KnownColor2["HotPink"] = 82] = "HotPink";
  KnownColor2[KnownColor2["IndianRed"] = 83] = "IndianRed";
  KnownColor2[KnownColor2["Indigo"] = 84] = "Indigo";
  KnownColor2[KnownColor2["Ivory"] = 85] = "Ivory";
  KnownColor2[KnownColor2["Khaki"] = 86] = "Khaki";
  KnownColor2[KnownColor2["Lavender"] = 87] = "Lavender";
  KnownColor2[KnownColor2["LavenderBlush"] = 88] = "LavenderBlush";
  KnownColor2[KnownColor2["LawnGreen"] = 89] = "LawnGreen";
  KnownColor2[KnownColor2["LemonChiffon"] = 90] = "LemonChiffon";
  KnownColor2[KnownColor2["LightBlue"] = 91] = "LightBlue";
  KnownColor2[KnownColor2["LightCoral"] = 92] = "LightCoral";
  KnownColor2[KnownColor2["LightCyan"] = 93] = "LightCyan";
  KnownColor2[KnownColor2["LightGoldenrodYellow"] = 94] = "LightGoldenrodYellow";
  KnownColor2[KnownColor2["LightGray"] = 95] = "LightGray";
  KnownColor2[KnownColor2["LightGreen"] = 96] = "LightGreen";
  KnownColor2[KnownColor2["LightPink"] = 97] = "LightPink";
  KnownColor2[KnownColor2["LightSalmon"] = 98] = "LightSalmon";
  KnownColor2[KnownColor2["LightSeaGreen"] = 99] = "LightSeaGreen";
  KnownColor2[KnownColor2["LightSkyBlue"] = 100] = "LightSkyBlue";
  KnownColor2[KnownColor2["LightSlateGray"] = 101] = "LightSlateGray";
  KnownColor2[KnownColor2["LightSteelBlue"] = 102] = "LightSteelBlue";
  KnownColor2[KnownColor2["LightYellow"] = 103] = "LightYellow";
  KnownColor2[KnownColor2["Lime"] = 104] = "Lime";
  KnownColor2[KnownColor2["LimeGreen"] = 105] = "LimeGreen";
  KnownColor2[KnownColor2["Linen"] = 106] = "Linen";
  KnownColor2[KnownColor2["Magenta"] = 107] = "Magenta";
  KnownColor2[KnownColor2["Maroon"] = 108] = "Maroon";
  KnownColor2[KnownColor2["MediumAquamarine"] = 109] = "MediumAquamarine";
  KnownColor2[KnownColor2["MediumBlue"] = 110] = "MediumBlue";
  KnownColor2[KnownColor2["MediumOrchid"] = 111] = "MediumOrchid";
  KnownColor2[KnownColor2["MediumPurple"] = 112] = "MediumPurple";
  KnownColor2[KnownColor2["MediumSeaGreen"] = 113] = "MediumSeaGreen";
  KnownColor2[KnownColor2["MediumSlateBlue"] = 114] = "MediumSlateBlue";
  KnownColor2[KnownColor2["MediumSpringGreen"] = 115] = "MediumSpringGreen";
  KnownColor2[KnownColor2["MediumTurquoise"] = 116] = "MediumTurquoise";
  KnownColor2[KnownColor2["MediumVioletRed"] = 117] = "MediumVioletRed";
  KnownColor2[KnownColor2["MidnightBlue"] = 118] = "MidnightBlue";
  KnownColor2[KnownColor2["MintCream"] = 119] = "MintCream";
  KnownColor2[KnownColor2["MistyRose"] = 120] = "MistyRose";
  KnownColor2[KnownColor2["Moccasin"] = 121] = "Moccasin";
  KnownColor2[KnownColor2["NavajoWhite"] = 122] = "NavajoWhite";
  KnownColor2[KnownColor2["Navy"] = 123] = "Navy";
  KnownColor2[KnownColor2["OldLace"] = 124] = "OldLace";
  KnownColor2[KnownColor2["Olive"] = 125] = "Olive";
  KnownColor2[KnownColor2["OliveDrab"] = 126] = "OliveDrab";
  KnownColor2[KnownColor2["Orange"] = 127] = "Orange";
  KnownColor2[KnownColor2["OrangeRed"] = 128] = "OrangeRed";
  KnownColor2[KnownColor2["Orchid"] = 129] = "Orchid";
  KnownColor2[KnownColor2["PaleGoldenrod"] = 130] = "PaleGoldenrod";
  KnownColor2[KnownColor2["PaleGreen"] = 131] = "PaleGreen";
  KnownColor2[KnownColor2["PaleTurquoise"] = 132] = "PaleTurquoise";
  KnownColor2[KnownColor2["PaleVioletRed"] = 133] = "PaleVioletRed";
  KnownColor2[KnownColor2["PapayaWhip"] = 134] = "PapayaWhip";
  KnownColor2[KnownColor2["PeachPuff"] = 135] = "PeachPuff";
  KnownColor2[KnownColor2["Peru"] = 136] = "Peru";
  KnownColor2[KnownColor2["Pink"] = 137] = "Pink";
  KnownColor2[KnownColor2["Plum"] = 138] = "Plum";
  KnownColor2[KnownColor2["PowderBlue"] = 139] = "PowderBlue";
  KnownColor2[KnownColor2["Purple"] = 140] = "Purple";
  KnownColor2[KnownColor2["Red"] = 141] = "Red";
  KnownColor2[KnownColor2["RosyBrown"] = 142] = "RosyBrown";
  KnownColor2[KnownColor2["RoyalBlue"] = 143] = "RoyalBlue";
  KnownColor2[KnownColor2["SaddleBrown"] = 144] = "SaddleBrown";
  KnownColor2[KnownColor2["Salmon"] = 145] = "Salmon";
  KnownColor2[KnownColor2["SandyBrown"] = 146] = "SandyBrown";
  KnownColor2[KnownColor2["SeaGreen"] = 147] = "SeaGreen";
  KnownColor2[KnownColor2["SeaShell"] = 148] = "SeaShell";
  KnownColor2[KnownColor2["Sienna"] = 149] = "Sienna";
  KnownColor2[KnownColor2["Silver"] = 150] = "Silver";
  KnownColor2[KnownColor2["SkyBlue"] = 151] = "SkyBlue";
  KnownColor2[KnownColor2["SlateBlue"] = 152] = "SlateBlue";
  KnownColor2[KnownColor2["SlateGray"] = 153] = "SlateGray";
  KnownColor2[KnownColor2["Snow"] = 154] = "Snow";
  KnownColor2[KnownColor2["SpringGreen"] = 155] = "SpringGreen";
  KnownColor2[KnownColor2["SteelBlue"] = 156] = "SteelBlue";
  KnownColor2[KnownColor2["Tan"] = 157] = "Tan";
  KnownColor2[KnownColor2["Teal"] = 158] = "Teal";
  KnownColor2[KnownColor2["Thistle"] = 159] = "Thistle";
  KnownColor2[KnownColor2["Tomato"] = 160] = "Tomato";
  KnownColor2[KnownColor2["Turquoise"] = 161] = "Turquoise";
  KnownColor2[KnownColor2["Violet"] = 162] = "Violet";
  KnownColor2[KnownColor2["Wheat"] = 163] = "Wheat";
  KnownColor2[KnownColor2["White"] = 164] = "White";
  KnownColor2[KnownColor2["WhiteSmoke"] = 165] = "WhiteSmoke";
  KnownColor2[KnownColor2["Yellow"] = 166] = "Yellow";
  KnownColor2[KnownColor2["YellowGreen"] = 167] = "YellowGreen";
  KnownColor2[KnownColor2["ButtonFace"] = 168] = "ButtonFace";
  KnownColor2[KnownColor2["ButtonHighlight"] = 169] = "ButtonHighlight";
  KnownColor2[KnownColor2["ButtonShadow"] = 170] = "ButtonShadow";
  KnownColor2[KnownColor2["GradientActiveCaption"] = 171] = "GradientActiveCaption";
  KnownColor2[KnownColor2["GradientInactiveCaption"] = 172] = "GradientInactiveCaption";
  KnownColor2[KnownColor2["MenuBar"] = 173] = "MenuBar";
  KnownColor2[KnownColor2["MenuHighlight"] = 174] = "MenuHighlight";
})(KnownColor || (KnownColor = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-brushes.js
var PdfBrushes = (
  /** @class */
  function() {
    function PdfBrushes2() {
    }
    Object.defineProperty(PdfBrushes2, "AliceBlue", {
      //Static Properties
      /**
       * Gets the AliceBlue brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.AliceBlue)) {
          brush = this.sBrushes.getValue(KnownColor.AliceBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.AliceBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "AntiqueWhite", {
      /**
       * Gets the antique white brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.AntiqueWhite)) {
          brush = this.sBrushes.getValue(KnownColor.AntiqueWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.AntiqueWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Aqua", {
      /**
       * Gets the Aqua default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Aqua)) {
          brush = this.sBrushes.getValue(KnownColor.Aqua);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Aqua);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Aquamarine", {
      /**
       * Gets the Aquamarine default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Aquamarine)) {
          brush = this.sBrushes.getValue(KnownColor.Aquamarine);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Aquamarine);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Azure", {
      /**
       * Gets the Azure default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Azure)) {
          brush = this.sBrushes.getValue(KnownColor.Azure);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Azure);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Beige", {
      /**
       * Gets the Beige default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Beige)) {
          brush = this.sBrushes.getValue(KnownColor.Beige);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Beige);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Bisque", {
      /**
       * Gets the Bisque default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Bisque)) {
          brush = this.sBrushes.getValue(KnownColor.Bisque);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Bisque);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Black", {
      /**
       * Gets the Black default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Black)) {
          brush = this.sBrushes.getValue(KnownColor.Black);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Black);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "BlanchedAlmond", {
      /**
       * Gets the BlanchedAlmond default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.BlanchedAlmond)) {
          brush = this.sBrushes.getValue(KnownColor.BlanchedAlmond);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.BlanchedAlmond);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Blue", {
      /**
       * Gets the Blue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Blue)) {
          brush = this.sBrushes.getValue(KnownColor.Blue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Blue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "BlueViolet", {
      /**
       * Gets the BlueViolet default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.BlueViolet)) {
          brush = this.sBrushes.getValue(KnownColor.BlueViolet);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.BlueViolet);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Brown", {
      /**
       * Gets the Brown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Brown)) {
          brush = this.sBrushes.getValue(KnownColor.Brown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Brown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "BurlyWood", {
      /**
       * Gets the BurlyWood default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.BurlyWood)) {
          brush = this.sBrushes.getValue(KnownColor.BurlyWood);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.BurlyWood);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "CadetBlue", {
      /**
       * Gets the CadetBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.CadetBlue)) {
          brush = this.sBrushes.getValue(KnownColor.CadetBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.CadetBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Chartreuse", {
      /**
       * Gets the Chartreuse default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Chartreuse)) {
          brush = this.sBrushes.getValue(KnownColor.Chartreuse);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Chartreuse);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Chocolate", {
      /**
       * Gets the Chocolate default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Chocolate)) {
          brush = this.sBrushes.getValue(KnownColor.Chocolate);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Chocolate);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Coral", {
      /**
       * Gets the Coral default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Coral)) {
          brush = this.sBrushes.getValue(KnownColor.Coral);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Coral);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "CornflowerBlue", {
      /**
       * Gets the CornflowerBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.CornflowerBlue)) {
          brush = this.sBrushes.getValue(KnownColor.CornflowerBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.CornflowerBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Cornsilk", {
      /**
       * Gets the Corn silk default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Cornsilk)) {
          brush = this.sBrushes.getValue(KnownColor.Cornsilk);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Cornsilk);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Crimson", {
      /**
       *  Gets the Crimson default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Crimson)) {
          brush = this.sBrushes.getValue(KnownColor.Crimson);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Crimson);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Cyan", {
      /**
       * Gets the Cyan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Cyan)) {
          brush = this.sBrushes.getValue(KnownColor.Cyan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Cyan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkBlue", {
      /**
       * Gets the DarkBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DarkBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkCyan", {
      /**
       * Gets the DarkCyan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkCyan)) {
          brush = this.sBrushes.getValue(KnownColor.DarkCyan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkCyan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkGoldenrod", {
      /**
       * Gets the DarkGoldenrod default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkGoldenrod)) {
          brush = this.sBrushes.getValue(KnownColor.DarkGoldenrod);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkGoldenrod);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkGray", {
      /**
       * Gets the DarkGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkGray)) {
          brush = this.sBrushes.getValue(KnownColor.DarkGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkGreen", {
      /**
       * Gets the DarkGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkGreen)) {
          brush = this.sBrushes.getValue(KnownColor.DarkGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkKhaki", {
      /**
       * Gets the DarkKhaki default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkKhaki)) {
          brush = this.sBrushes.getValue(KnownColor.DarkKhaki);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkKhaki);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkMagenta", {
      /**
       * Gets the DarkMagenta default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkMagenta)) {
          brush = this.sBrushes.getValue(KnownColor.DarkMagenta);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkMagenta);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkOliveGreen", {
      /**
       * Gets the DarkOliveGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkOliveGreen)) {
          brush = this.sBrushes.getValue(KnownColor.DarkOliveGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkOliveGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkOrange", {
      /**
       * Gets the DarkOrange default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkOrange)) {
          brush = this.sBrushes.getValue(KnownColor.DarkOrange);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkOrange);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkOrchid", {
      /**
       * Gets the DarkOrchid default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkOrchid)) {
          brush = this.sBrushes.getValue(KnownColor.DarkOrchid);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkOrchid);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkRed", {
      /**
       * Gets the DarkRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkRed)) {
          brush = this.sBrushes.getValue(KnownColor.DarkRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSalmon", {
      /**
       * Gets the DarkSalmon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSalmon)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSalmon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSalmon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSeaGreen", {
      /**
       * Gets the DarkSeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSlateBlue", {
      /**
       * Gets the DarkSlateBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSlateBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSlateBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSlateBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkSlateGray", {
      /**
       * Gets the DarkSlateGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkSlateGray)) {
          brush = this.sBrushes.getValue(KnownColor.DarkSlateGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkSlateGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkTurquoise", {
      /**
       * Gets the DarkTurquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkTurquoise)) {
          brush = this.sBrushes.getValue(KnownColor.DarkTurquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkTurquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DarkViolet", {
      /**
       * Gets the DarkViolet default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DarkViolet)) {
          brush = this.sBrushes.getValue(KnownColor.DarkViolet);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DarkViolet);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DeepPink", {
      /**
       * Gets the DeepPink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DeepPink)) {
          brush = this.sBrushes.getValue(KnownColor.DeepPink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DeepPink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DeepSkyBlue", {
      /**
       * Gets the DeepSkyBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DeepSkyBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DeepSkyBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DeepSkyBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DimGray", {
      /**
       * Gets the DimGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DimGray)) {
          brush = this.sBrushes.getValue(KnownColor.DimGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DimGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "DodgerBlue", {
      /**
       * Gets the DodgerBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.DodgerBlue)) {
          brush = this.sBrushes.getValue(KnownColor.DodgerBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.DodgerBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Firebrick", {
      /**
       * Gets the Firebrick default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Firebrick)) {
          brush = this.sBrushes.getValue(KnownColor.Firebrick);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Firebrick);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "FloralWhite", {
      /**
       * Gets the FloralWhite default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.FloralWhite)) {
          brush = this.sBrushes.getValue(KnownColor.FloralWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.FloralWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "ForestGreen", {
      /**
       * Gets the ForestGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.ForestGreen)) {
          brush = this.sBrushes.getValue(KnownColor.ForestGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.ForestGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Fuchsia", {
      /**
       * Gets the Fuchsia default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Fuchsia)) {
          brush = this.sBrushes.getValue(KnownColor.Fuchsia);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Fuchsia);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Gainsboro", {
      /**
       * Gets the Gainsborough default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Gainsboro)) {
          brush = this.sBrushes.getValue(KnownColor.Gainsboro);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Gainsboro);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "GhostWhite", {
      /**
       * Gets the GhostWhite default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.GhostWhite)) {
          brush = this.sBrushes.getValue(KnownColor.GhostWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.GhostWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Gold", {
      /**
       * Gets the Gold default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Gold)) {
          brush = this.sBrushes.getValue(KnownColor.Gold);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Gold);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Goldenrod", {
      /**
       * Gets the Goldenrod default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Goldenrod)) {
          brush = this.sBrushes.getValue(KnownColor.Goldenrod);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Goldenrod);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Gray", {
      /**
       * Gets the Gray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Gray)) {
          brush = this.sBrushes.getValue(KnownColor.Gray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Gray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Green", {
      /**
       * Gets the Green default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Green)) {
          brush = this.sBrushes.getValue(KnownColor.Green);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Green);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "GreenYellow", {
      /**
       * Gets the GreenYellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.GreenYellow)) {
          brush = this.sBrushes.getValue(KnownColor.GreenYellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.GreenYellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Honeydew", {
      /**
       * Gets the Honeydew default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Honeydew)) {
          brush = this.sBrushes.getValue(KnownColor.Honeydew);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Honeydew);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "HotPink", {
      /**
       * Gets the HotPink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.HotPink)) {
          brush = this.sBrushes.getValue(KnownColor.HotPink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.HotPink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "IndianRed", {
      /**
       * Gets the IndianRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.IndianRed)) {
          brush = this.sBrushes.getValue(KnownColor.IndianRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.IndianRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Indigo", {
      /**
       * Gets the Indigo default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Indigo)) {
          brush = this.sBrushes.getValue(KnownColor.Indigo);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Indigo);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Ivory", {
      /**
       * Gets the Ivory default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Ivory)) {
          brush = this.sBrushes.getValue(KnownColor.Ivory);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Ivory);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Khaki", {
      /**
       * Gets the Khaki default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Khaki)) {
          brush = this.sBrushes.getValue(KnownColor.Khaki);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Khaki);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Lavender", {
      /**
       * Gets the Lavender default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Lavender)) {
          brush = this.sBrushes.getValue(KnownColor.Lavender);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Lavender);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LavenderBlush", {
      /**
       * Gets the LavenderBlush default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LavenderBlush)) {
          brush = this.sBrushes.getValue(KnownColor.LavenderBlush);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LavenderBlush);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LawnGreen", {
      /**
       * Gets the LawnGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LawnGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LawnGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LawnGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LemonChiffon", {
      /**
       * Gets the LemonChiffon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LemonChiffon)) {
          brush = this.sBrushes.getValue(KnownColor.LemonChiffon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LemonChiffon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightBlue", {
      /**
       * Gets the LightBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightBlue)) {
          brush = this.sBrushes.getValue(KnownColor.LightBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightCoral", {
      /**
       * Gets the LightCoral default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightCoral)) {
          brush = this.sBrushes.getValue(KnownColor.LightCoral);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightCoral);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightCyan", {
      /**
       * Gets the LightCyan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightCyan)) {
          brush = this.sBrushes.getValue(KnownColor.LightCyan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightCyan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightGoldenrodYellow", {
      /**
       * Gets the LightGoldenrodYellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightGoldenrodYellow)) {
          brush = this.sBrushes.getValue(KnownColor.LightGoldenrodYellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightGoldenrodYellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightGray", {
      /**
       * Gets the LightGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightGray)) {
          brush = this.sBrushes.getValue(KnownColor.LightGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightGreen", {
      /**
       * Gets the LightGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LightGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightPink", {
      /**
       * Gets the LightPink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightPink)) {
          brush = this.sBrushes.getValue(KnownColor.LightPink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightPink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSalmon", {
      /**
       * Gets the LightSalmon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSalmon)) {
          brush = this.sBrushes.getValue(KnownColor.LightSalmon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSalmon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSeaGreen", {
      /**
       * Gets the LightSeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LightSeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSkyBlue", {
      /**
       * Gets the LightSkyBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSkyBlue)) {
          brush = this.sBrushes.getValue(KnownColor.LightSkyBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSkyBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSlateGray", {
      /**
       * Gets the LightSlateGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSlateGray)) {
          brush = this.sBrushes.getValue(KnownColor.LightSlateGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSlateGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightSteelBlue", {
      /**
       * Gets the LightSteelBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightSteelBlue)) {
          brush = this.sBrushes.getValue(KnownColor.LightSteelBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightSteelBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LightYellow", {
      /**
       * Gets the LightYellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LightYellow)) {
          brush = this.sBrushes.getValue(KnownColor.LightYellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LightYellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Lime", {
      /**
       * Gets the Lime default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Lime)) {
          brush = this.sBrushes.getValue(KnownColor.Lime);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Lime);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "LimeGreen", {
      /**
       * Gets the LimeGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.LimeGreen)) {
          brush = this.sBrushes.getValue(KnownColor.LimeGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.LimeGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Linen", {
      /**
       * Gets the Linen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Linen)) {
          brush = this.sBrushes.getValue(KnownColor.Linen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Linen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Magenta", {
      /**
       * Gets the Magenta default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Magenta)) {
          brush = this.sBrushes.getValue(KnownColor.Magenta);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Magenta);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Maroon", {
      /**
       * Gets the Maroon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Maroon)) {
          brush = this.sBrushes.getValue(KnownColor.Maroon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Maroon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumAquamarine", {
      /**
       * Gets the MediumAquamarine default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumAquamarine)) {
          brush = this.sBrushes.getValue(KnownColor.MediumAquamarine);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumAquamarine);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumBlue", {
      /**
       * Gets the MediumBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumBlue)) {
          brush = this.sBrushes.getValue(KnownColor.MediumBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumOrchid", {
      /**
       * Gets the MediumOrchid default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumOrchid)) {
          brush = this.sBrushes.getValue(KnownColor.MediumOrchid);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumOrchid);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumPurple", {
      /**
       * Gets the MediumPurple default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumPurple)) {
          brush = this.sBrushes.getValue(KnownColor.MediumPurple);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumPurple);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumSeaGreen", {
      /**
       * Gets the MediumSeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumSeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.MediumSeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumSeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumSlateBlue", {
      /**
       * Gets the MediumSlateBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumSlateBlue)) {
          brush = this.sBrushes.getValue(KnownColor.MediumSlateBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumSlateBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumSpringGreen", {
      /**
       * Gets the MediumSpringGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumSpringGreen)) {
          brush = this.sBrushes.getValue(KnownColor.MediumSpringGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumSpringGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumTurquoise", {
      /**
       * Gets the MediumTurquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumTurquoise)) {
          brush = this.sBrushes.getValue(KnownColor.MediumTurquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumTurquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MediumVioletRed", {
      /**
       * Gets the MediumVioletRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MediumVioletRed)) {
          brush = this.sBrushes.getValue(KnownColor.MediumVioletRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MediumVioletRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MidnightBlue", {
      /**
       * Gets the MidnightBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MidnightBlue)) {
          brush = this.sBrushes.getValue(KnownColor.MidnightBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MidnightBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MintCream", {
      /**
       * Gets the MintCream default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MintCream)) {
          brush = this.sBrushes.getValue(KnownColor.MintCream);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MintCream);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "MistyRose", {
      /**
       * Gets the MistyRose default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.MistyRose)) {
          brush = this.sBrushes.getValue(KnownColor.MistyRose);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.MistyRose);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Moccasin", {
      /**
       * Gets the Moccasin default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Moccasin)) {
          brush = this.sBrushes.getValue(KnownColor.Moccasin);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Moccasin);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "NavajoWhite", {
      /**
       * Gets the NavajoWhite default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.NavajoWhite)) {
          brush = this.sBrushes.getValue(KnownColor.NavajoWhite);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.NavajoWhite);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Navy", {
      /**
       * Gets the Navy default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Navy)) {
          brush = this.sBrushes.getValue(KnownColor.Navy);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Navy);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "OldLace", {
      /**
       * Gets the OldLace default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.OldLace)) {
          brush = this.sBrushes.getValue(KnownColor.OldLace);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.OldLace);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Olive", {
      /**
       * Gets the Olive default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Olive)) {
          brush = this.sBrushes.getValue(KnownColor.Olive);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Olive);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "OliveDrab", {
      /**
       * Gets the OliveDrab default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.OliveDrab)) {
          brush = this.sBrushes.getValue(KnownColor.OliveDrab);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.OliveDrab);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Orange", {
      /**
       * Gets the Orange default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Orange)) {
          brush = this.sBrushes.getValue(KnownColor.Orange);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Orange);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "OrangeRed", {
      /**
       * Gets the OrangeRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.OrangeRed)) {
          brush = this.sBrushes.getValue(KnownColor.OrangeRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.OrangeRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Orchid", {
      /**
       * Gets the Orchid default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Orchid)) {
          brush = this.sBrushes.getValue(KnownColor.Orchid);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Orchid);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleGoldenrod", {
      /**
       * Gets the PaleGoldenrod default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleGoldenrod)) {
          brush = this.sBrushes.getValue(KnownColor.PaleGoldenrod);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleGoldenrod);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleGreen", {
      /**
       * Gets the PaleGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleGreen)) {
          brush = this.sBrushes.getValue(KnownColor.PaleGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleTurquoise", {
      /**
       * Gets the PaleTurquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleTurquoise)) {
          brush = this.sBrushes.getValue(KnownColor.PaleTurquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleTurquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PaleVioletRed", {
      /**
       * Gets the PaleVioletRed default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PaleVioletRed)) {
          brush = this.sBrushes.getValue(KnownColor.PaleVioletRed);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PaleVioletRed);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PapayaWhip", {
      /**
       * Gets the PapayaWhip default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PapayaWhip)) {
          brush = this.sBrushes.getValue(KnownColor.PapayaWhip);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PapayaWhip);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PeachPuff", {
      /**
       * Gets the PeachPuff default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PeachPuff)) {
          brush = this.sBrushes.getValue(KnownColor.PeachPuff);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PeachPuff);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Peru", {
      /**
       * Gets the Peru default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Peru)) {
          brush = this.sBrushes.getValue(KnownColor.Peru);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Peru);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Pink", {
      /**
       * Gets the Pink default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Pink)) {
          brush = this.sBrushes.getValue(KnownColor.Pink);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Pink);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Plum", {
      /**
       * Gets the Plum default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Plum)) {
          brush = this.sBrushes.getValue(KnownColor.Plum);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Plum);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "PowderBlue", {
      /**
       * Gets the PowderBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.PowderBlue)) {
          brush = this.sBrushes.getValue(KnownColor.PowderBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.PowderBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Purple", {
      /**
       * Gets the Purple default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Purple)) {
          brush = this.sBrushes.getValue(KnownColor.Purple);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Purple);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Red", {
      /**
       * Gets the Red default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Red)) {
          brush = this.sBrushes.getValue(KnownColor.Red);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Red);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "RosyBrown", {
      /**
       * Gets the RosyBrown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.RosyBrown)) {
          brush = this.sBrushes.getValue(KnownColor.RosyBrown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.RosyBrown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "RoyalBlue", {
      /**
       * Gets the RoyalBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.RoyalBlue)) {
          brush = this.sBrushes.getValue(KnownColor.RoyalBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.RoyalBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SaddleBrown", {
      /**
       * Gets the SaddleBrown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SaddleBrown)) {
          brush = this.sBrushes.getValue(KnownColor.SaddleBrown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SaddleBrown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Salmon", {
      /**
       * Gets the Salmon default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Salmon)) {
          brush = this.sBrushes.getValue(KnownColor.Salmon);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Salmon);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SandyBrown", {
      /**
       * Gets the SandyBrown default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SandyBrown)) {
          brush = this.sBrushes.getValue(KnownColor.SandyBrown);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SandyBrown);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SeaGreen", {
      /**
       * Gets the SeaGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SeaGreen)) {
          brush = this.sBrushes.getValue(KnownColor.SeaGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SeaGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SeaShell", {
      /**
       * Gets the SeaShell default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SeaShell)) {
          brush = this.sBrushes.getValue(KnownColor.SeaShell);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SeaShell);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Sienna", {
      /**
       * Gets the Sienna default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Sienna)) {
          brush = this.sBrushes.getValue(KnownColor.Sienna);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Sienna);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Silver", {
      /**
       * Gets the Silver default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Silver)) {
          brush = this.sBrushes.getValue(KnownColor.Silver);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Silver);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SkyBlue", {
      /**
       * Gets the SkyBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SkyBlue)) {
          brush = this.sBrushes.getValue(KnownColor.SkyBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SkyBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SlateBlue", {
      /**
       * Gets the SlateBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SlateBlue)) {
          brush = this.sBrushes.getValue(KnownColor.SlateBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SlateBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SlateGray", {
      /**
       * Gets the SlateGray default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SlateGray)) {
          brush = this.sBrushes.getValue(KnownColor.SlateGray);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SlateGray);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Snow", {
      /**
       * Gets the Snow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Snow)) {
          brush = this.sBrushes.getValue(KnownColor.Snow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Snow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SpringGreen", {
      /**
       * Gets the SpringGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SpringGreen)) {
          brush = this.sBrushes.getValue(KnownColor.SpringGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SpringGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "SteelBlue", {
      /**
       * Gets the SteelBlue default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.SteelBlue)) {
          brush = this.sBrushes.getValue(KnownColor.SteelBlue);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.SteelBlue);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Tan", {
      /**
       * Gets the Tan default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Tan)) {
          brush = this.sBrushes.getValue(KnownColor.Tan);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Tan);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Teal", {
      /**
       * Gets the Teal default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Teal)) {
          brush = this.sBrushes.getValue(KnownColor.Teal);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Teal);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Thistle", {
      /**
       * Gets the Thistle default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Thistle)) {
          brush = this.sBrushes.getValue(KnownColor.Thistle);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Thistle);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Tomato", {
      /**
       * Gets the Tomato default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Tomato)) {
          brush = this.sBrushes.getValue(KnownColor.Tomato);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Tomato);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Transparent", {
      /**
       * Gets the Transparent default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Transparent)) {
          brush = this.sBrushes.getValue(KnownColor.Transparent);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Transparent);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Turquoise", {
      /**
       * Gets the Turquoise default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Turquoise)) {
          brush = this.sBrushes.getValue(KnownColor.Turquoise);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Turquoise);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Violet", {
      /**
       * Gets the Violet default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Violet)) {
          brush = this.sBrushes.getValue(KnownColor.Violet);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Violet);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Wheat", {
      /**
       * Gets the Wheat default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Wheat)) {
          brush = this.sBrushes.getValue(KnownColor.Wheat);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Wheat);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "White", {
      /**
       * Gets the White default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.White)) {
          brush = this.sBrushes.getValue(KnownColor.White);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.White);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "WhiteSmoke", {
      /**
       * Gets the WhiteSmoke default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.WhiteSmoke)) {
          brush = this.sBrushes.getValue(KnownColor.WhiteSmoke);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.WhiteSmoke);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "Yellow", {
      /**
       * Gets the Yellow default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.Yellow)) {
          brush = this.sBrushes.getValue(KnownColor.Yellow);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.Yellow);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBrushes2, "YellowGreen", {
      /**
       * Gets the YellowGreen default brush.
       * @public
       */
      get: function() {
        var brush = null;
        if (this.sBrushes.containsKey(KnownColor.YellowGreen)) {
          brush = this.sBrushes.getValue(KnownColor.YellowGreen);
        }
        if (brush == null) {
          brush = this.getBrush(KnownColor.YellowGreen);
        }
        return brush;
      },
      enumerable: true,
      configurable: true
    });
    PdfBrushes2.getBrush = function(colorName) {
      var pdfColor = this.getColorValue(colorName);
      var brush = new PdfSolidBrush(pdfColor);
      this.sBrushes.setValue(colorName, brush);
      return brush;
    };
    PdfBrushes2.getColorValue = function(colorName) {
      var color = new PdfColor();
      switch (colorName) {
        case KnownColor.Transparent:
          color = new PdfColor(0, 255, 255, 255);
          break;
        case KnownColor.AliceBlue:
          color = new PdfColor(255, 240, 248, 255);
          break;
        case KnownColor.AntiqueWhite:
          color = new PdfColor(255, 250, 235, 215);
          break;
        case KnownColor.Aqua:
          color = new PdfColor(255, 0, 255, 255);
          break;
        case KnownColor.Aquamarine:
          color = new PdfColor(255, 127, 255, 212);
          break;
        case KnownColor.Azure:
          color = new PdfColor(255, 240, 255, 255);
          break;
        case KnownColor.Beige:
          color = new PdfColor(255, 245, 245, 220);
          break;
        case KnownColor.Bisque:
          color = new PdfColor(255, 255, 228, 196);
          break;
        case KnownColor.Black:
          color = new PdfColor(255, 0, 0, 0);
          break;
        case KnownColor.BlanchedAlmond:
          color = new PdfColor(255, 255, 235, 205);
          break;
        case KnownColor.Blue:
          color = new PdfColor(255, 0, 0, 255);
          break;
        case KnownColor.BlueViolet:
          color = new PdfColor(255, 138, 43, 226);
          break;
        case KnownColor.Brown:
          color = new PdfColor(255, 165, 42, 42);
          break;
        case KnownColor.BurlyWood:
          color = new PdfColor(255, 222, 184, 135);
          break;
        case KnownColor.CadetBlue:
          color = new PdfColor(255, 95, 158, 160);
          break;
        case KnownColor.Chartreuse:
          color = new PdfColor(255, 127, 255, 0);
          break;
        case KnownColor.Chocolate:
          color = new PdfColor(255, 210, 105, 30);
          break;
        case KnownColor.Coral:
          color = new PdfColor(255, 255, 127, 80);
          break;
        case KnownColor.CornflowerBlue:
          color = new PdfColor(255, 100, 149, 237);
          break;
        case KnownColor.Cornsilk:
          color = new PdfColor(255, 255, 248, 220);
          break;
        case KnownColor.Crimson:
          color = new PdfColor(255, 220, 20, 60);
          break;
        case KnownColor.Cyan:
          color = new PdfColor(255, 0, 255, 255);
          break;
        case KnownColor.DarkBlue:
          color = new PdfColor(255, 0, 0, 139);
          break;
        case KnownColor.DarkCyan:
          color = new PdfColor(255, 0, 139, 139);
          break;
        case KnownColor.DarkGoldenrod:
          color = new PdfColor(255, 184, 134, 11);
          break;
        case KnownColor.DarkGray:
          color = new PdfColor(255, 169, 169, 169);
          break;
        case KnownColor.DarkGreen:
          color = new PdfColor(255, 0, 100, 0);
          break;
        case KnownColor.DarkKhaki:
          color = new PdfColor(255, 189, 183, 107);
          break;
        case KnownColor.DarkMagenta:
          color = new PdfColor(255, 139, 0, 139);
          break;
        case KnownColor.DarkOliveGreen:
          color = new PdfColor(255, 85, 107, 47);
          break;
        case KnownColor.DarkOrange:
          color = new PdfColor(255, 255, 140, 0);
          break;
        case KnownColor.DarkOrchid:
          color = new PdfColor(255, 153, 50, 204);
          break;
        case KnownColor.DarkRed:
          color = new PdfColor(255, 139, 0, 0);
          break;
        case KnownColor.DarkSalmon:
          color = new PdfColor(255, 233, 150, 122);
          break;
        case KnownColor.DarkSeaGreen:
          color = new PdfColor(255, 143, 188, 139);
          break;
        case KnownColor.DarkSlateBlue:
          color = new PdfColor(255, 72, 61, 139);
          break;
        case KnownColor.DarkSlateGray:
          color = new PdfColor(255, 47, 79, 79);
          break;
        case KnownColor.DarkTurquoise:
          color = new PdfColor(255, 0, 206, 209);
          break;
        case KnownColor.DarkViolet:
          color = new PdfColor(255, 148, 0, 211);
          break;
        case KnownColor.DeepPink:
          color = new PdfColor(255, 255, 20, 147);
          break;
        case KnownColor.DeepSkyBlue:
          color = new PdfColor(255, 0, 191, 255);
          break;
        case KnownColor.DimGray:
          color = new PdfColor(255, 105, 105, 105);
          break;
        case KnownColor.DodgerBlue:
          color = new PdfColor(255, 30, 144, 255);
          break;
        case KnownColor.Firebrick:
          color = new PdfColor(255, 178, 34, 34);
          break;
        case KnownColor.FloralWhite:
          color = new PdfColor(255, 255, 250, 240);
          break;
        case KnownColor.ForestGreen:
          color = new PdfColor(255, 34, 139, 34);
          break;
        case KnownColor.Fuchsia:
          color = new PdfColor(255, 255, 0, 255);
          break;
        case KnownColor.Gainsboro:
          color = new PdfColor(255, 220, 220, 220);
          break;
        case KnownColor.GhostWhite:
          color = new PdfColor(255, 248, 248, 255);
          break;
        case KnownColor.Gold:
          color = new PdfColor(255, 255, 215, 0);
          break;
        case KnownColor.Goldenrod:
          color = new PdfColor(255, 218, 165, 32);
          break;
        case KnownColor.Gray:
          color = new PdfColor(255, 128, 128, 128);
          break;
        case KnownColor.Green:
          color = new PdfColor(255, 0, 128, 0);
          break;
        case KnownColor.GreenYellow:
          color = new PdfColor(255, 173, 255, 47);
          break;
        case KnownColor.Honeydew:
          color = new PdfColor(255, 240, 255, 240);
          break;
        case KnownColor.HotPink:
          color = new PdfColor(255, 255, 105, 180);
          break;
        case KnownColor.IndianRed:
          color = new PdfColor(255, 205, 92, 92);
          break;
        case KnownColor.Indigo:
          color = new PdfColor(255, 75, 0, 130);
          break;
        case KnownColor.Ivory:
          color = new PdfColor(255, 255, 255, 240);
          break;
        case KnownColor.Khaki:
          color = new PdfColor(255, 240, 230, 140);
          break;
        case KnownColor.Lavender:
          color = new PdfColor(255, 230, 230, 250);
          break;
        case KnownColor.LavenderBlush:
          color = new PdfColor(255, 255, 240, 245);
          break;
        case KnownColor.LawnGreen:
          color = new PdfColor(255, 124, 252, 0);
          break;
        case KnownColor.LemonChiffon:
          color = new PdfColor(255, 255, 250, 205);
          break;
        case KnownColor.LightBlue:
          color = new PdfColor(255, 173, 216, 230);
          break;
        case KnownColor.LightCoral:
          color = new PdfColor(255, 240, 128, 128);
          break;
        case KnownColor.LightCyan:
          color = new PdfColor(255, 224, 255, 255);
          break;
        case KnownColor.LightGoldenrodYellow:
          color = new PdfColor(255, 250, 250, 210);
          break;
        case KnownColor.LightGreen:
          color = new PdfColor(255, 144, 238, 144);
          break;
        case KnownColor.LightGray:
          color = new PdfColor(255, 211, 211, 211);
          break;
        case KnownColor.LightPink:
          color = new PdfColor(255, 255, 182, 193);
          break;
        case KnownColor.LightSalmon:
          color = new PdfColor(255, 255, 160, 122);
          break;
        case KnownColor.LightSeaGreen:
          color = new PdfColor(255, 32, 178, 170);
          break;
        case KnownColor.LightSkyBlue:
          color = new PdfColor(255, 135, 206, 250);
          break;
        case KnownColor.LightSlateGray:
          color = new PdfColor(255, 119, 136, 153);
          break;
        case KnownColor.LightSteelBlue:
          color = new PdfColor(255, 176, 196, 222);
          break;
        case KnownColor.LightYellow:
          color = new PdfColor(255, 255, 255, 224);
          break;
        case KnownColor.Lime:
          color = new PdfColor(255, 0, 255, 0);
          break;
        case KnownColor.LimeGreen:
          color = new PdfColor(255, 50, 205, 50);
          break;
        case KnownColor.Linen:
          color = new PdfColor(255, 250, 240, 230);
          break;
        case KnownColor.Magenta:
          color = new PdfColor(255, 255, 0, 255);
          break;
        case KnownColor.Maroon:
          color = new PdfColor(255, 128, 0, 0);
          break;
        case KnownColor.MediumAquamarine:
          color = new PdfColor(255, 102, 205, 170);
          break;
        case KnownColor.MediumBlue:
          color = new PdfColor(255, 0, 0, 205);
          break;
        case KnownColor.MediumOrchid:
          color = new PdfColor(255, 186, 85, 211);
          break;
        case KnownColor.MediumPurple:
          color = new PdfColor(255, 147, 112, 219);
          break;
        case KnownColor.MediumSeaGreen:
          color = new PdfColor(255, 60, 179, 113);
          break;
        case KnownColor.MediumSlateBlue:
          color = new PdfColor(255, 123, 104, 238);
          break;
        case KnownColor.MediumSpringGreen:
          color = new PdfColor(255, 0, 250, 154);
          break;
        case KnownColor.MediumTurquoise:
          color = new PdfColor(255, 72, 209, 204);
          break;
        case KnownColor.MediumVioletRed:
          color = new PdfColor(255, 199, 21, 133);
          break;
        case KnownColor.MidnightBlue:
          color = new PdfColor(255, 25, 25, 112);
          break;
        case KnownColor.MintCream:
          color = new PdfColor(255, 245, 255, 250);
          break;
        case KnownColor.MistyRose:
          color = new PdfColor(255, 255, 228, 225);
          break;
        case KnownColor.Moccasin:
          color = new PdfColor(255, 255, 228, 181);
          break;
        case KnownColor.NavajoWhite:
          color = new PdfColor(255, 255, 222, 173);
          break;
        case KnownColor.Navy:
          color = new PdfColor(255, 0, 0, 128);
          break;
        case KnownColor.OldLace:
          color = new PdfColor(255, 253, 245, 230);
          break;
        case KnownColor.Olive:
          color = new PdfColor(255, 128, 128, 0);
          break;
        case KnownColor.OliveDrab:
          color = new PdfColor(255, 107, 142, 35);
          break;
        case KnownColor.Orange:
          color = new PdfColor(255, 255, 165, 0);
          break;
        case KnownColor.OrangeRed:
          color = new PdfColor(255, 255, 69, 0);
          break;
        case KnownColor.Orchid:
          color = new PdfColor(255, 218, 112, 214);
          break;
        case KnownColor.PaleGoldenrod:
          color = new PdfColor(255, 238, 232, 170);
          break;
        case KnownColor.PaleGreen:
          color = new PdfColor(255, 152, 251, 152);
          break;
        case KnownColor.PaleTurquoise:
          color = new PdfColor(255, 175, 238, 238);
          break;
        case KnownColor.PaleVioletRed:
          color = new PdfColor(255, 219, 112, 147);
          break;
        case KnownColor.PapayaWhip:
          color = new PdfColor(255, 255, 239, 213);
          break;
        case KnownColor.PeachPuff:
          color = new PdfColor(255, 255, 218, 185);
          break;
        case KnownColor.Peru:
          color = new PdfColor(255, 205, 133, 63);
          break;
        case KnownColor.Pink:
          color = new PdfColor(255, 255, 192, 203);
          break;
        case KnownColor.Plum:
          color = new PdfColor(255, 221, 160, 221);
          break;
        case KnownColor.PowderBlue:
          color = new PdfColor(255, 176, 224, 230);
          break;
        case KnownColor.Purple:
          color = new PdfColor(255, 128, 0, 128);
          break;
        case KnownColor.Red:
          color = new PdfColor(255, 255, 0, 0);
          break;
        case KnownColor.RosyBrown:
          color = new PdfColor(255, 188, 143, 143);
          break;
        case KnownColor.RoyalBlue:
          color = new PdfColor(255, 65, 105, 225);
          break;
        case KnownColor.SaddleBrown:
          color = new PdfColor(255, 139, 69, 19);
          break;
        case KnownColor.Salmon:
          color = new PdfColor(255, 250, 128, 114);
          break;
        case KnownColor.SandyBrown:
          color = new PdfColor(255, 244, 164, 96);
          break;
        case KnownColor.SeaGreen:
          color = new PdfColor(255, 46, 139, 87);
          break;
        case KnownColor.SeaShell:
          color = new PdfColor(255, 255, 245, 238);
          break;
        case KnownColor.Sienna:
          color = new PdfColor(255, 160, 82, 45);
          break;
        case KnownColor.Silver:
          color = new PdfColor(255, 192, 192, 192);
          break;
        case KnownColor.SkyBlue:
          color = new PdfColor(255, 135, 206, 235);
          break;
        case KnownColor.SlateBlue:
          color = new PdfColor(255, 106, 90, 205);
          break;
        case KnownColor.SlateGray:
          color = new PdfColor(255, 112, 128, 144);
          break;
        case KnownColor.Snow:
          color = new PdfColor(255, 255, 250, 250);
          break;
        case KnownColor.SpringGreen:
          color = new PdfColor(255, 0, 255, 127);
          break;
        case KnownColor.SteelBlue:
          color = new PdfColor(255, 70, 130, 180);
          break;
        case KnownColor.Tan:
          color = new PdfColor(255, 210, 180, 140);
          break;
        case KnownColor.Teal:
          color = new PdfColor(255, 0, 128, 128);
          break;
        case KnownColor.Thistle:
          color = new PdfColor(255, 216, 191, 216);
          break;
        case KnownColor.Tomato:
          color = new PdfColor(255, 255, 99, 71);
          break;
        case KnownColor.Turquoise:
          color = new PdfColor(255, 64, 224, 208);
          break;
        case KnownColor.Violet:
          color = new PdfColor(255, 238, 130, 238);
          break;
        case KnownColor.Wheat:
          color = new PdfColor(255, 245, 222, 179);
          break;
        case KnownColor.White:
          color = new PdfColor(255, 255, 255, 255);
          break;
        case KnownColor.WhiteSmoke:
          color = new PdfColor(255, 245, 245, 245);
          break;
        case KnownColor.Yellow:
          color = new PdfColor(255, 255, 255, 0);
          break;
        case KnownColor.YellowGreen:
          color = new PdfColor(255, 154, 205, 50);
          break;
      }
      return color;
    };
    PdfBrushes2.sBrushes = new Dictionary();
    return PdfBrushes2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-blend.js
var PdfBlend = (
  /** @class */
  function() {
    function PdfBlend2(count2) {
      this.precision = 1e3;
    }
    Object.defineProperty(PdfBlend2.prototype, "factors", {
      //Properties
      /**
       * Gets or sets the array of factor to the blend.
       * @public
       */
      get: function() {
        return this.mFactors;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Factors");
        }
        this.mFactors = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBlend2.prototype, "positions", {
      /**
       * 'positions' Gets or sets the array of positions
       * @public
       */
      get: function() {
        return this.mPositions;
      },
      set: function(value) {
        var positionarray = value;
        for (var i = 0; i < positionarray.length; i++) {
          if (positionarray[i] < 0 || positionarray[i] > 1) {
            positionarray[i] = 0;
          }
        }
        this.mPositions = positionarray;
        this.mPositions = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfBlend2.prototype, "count", {
      /**
       * Gets the number of elements that specify the blend.
       * @protected
       */
      get: function() {
        return this.mCount;
      },
      enumerable: true,
      configurable: true
    });
    PdfBlend2.prototype.generateColorBlend = function(colours, colorSpace) {
      if (colours == null) {
        throw new Error("ArgumentNullException : colours");
      }
      if (this.positions == null) {
        this.positions = [0];
      }
      var cBlend = new PdfColorBlend(this.count);
      var positions = this.positions;
      var clrs = null;
      if (positions.length === 1) {
        positions = [3];
        positions[0] = 0;
        positions[1] = this.positions[0];
        positions[2] = 1;
        clrs = new Array(3);
        clrs[0] = colours[0];
        clrs[1] = colours[0];
        clrs[2] = colours[1];
      } else {
        var c1 = colours[0];
        var c2 = colours[1];
        clrs = new Array(this.count);
        var i = 0;
        var count2 = this.count;
        for (i = 0; i < count2; ++i) {
          clrs[i] = this.interpolate(this.mFactors[i], c1, c2, colorSpace);
        }
      }
      cBlend.positions = positions;
      cBlend.colors = clrs;
      return cBlend;
    };
    PdfBlend2.prototype.clonePdfBlend = function() {
      var blend = this;
      if (this.mFactors != null) {
        blend.factors = this.mFactors;
      }
      if (this.positions != null) {
        blend.positions = this.positions;
      }
      return blend;
    };
    PdfBlend2.prototype.gcd = function(u, v) {
      if (typeof u === "number" && typeof v === "number" && typeof v !== "undefined") {
        if (u < 0 || u > 1) {
          throw new Error("ArgumentOutOfRangeException : u");
        }
        if (v < 0 || v > 1) {
          throw new Error("ArgumentOutOfRangeException : v");
        }
        var iU = Math.max(1, u * this.precision);
        var iV = Math.max(1, v * this.precision);
        var iResult = this.gcdInt(iU, iV);
        var result = iResult / this.precision;
        return result;
      } else {
        var values = u;
        if (values == null) {
          throw new Error("ArgumentNullException : values");
        }
        if (values.length < 1) {
          throw new Error("ArgumentException : Not enough values in the array. - values");
        }
        var gcd = values[0];
        if (values.length > 1) {
          var count2 = values.length;
          for (var i = 1; i < count2; ++i) {
            gcd = this.gcd(values[i], gcd);
            if (gcd === 1 / this.precision) {
              break;
            }
          }
        }
        return gcd;
      }
    };
    PdfBlend2.prototype.gcdInt = function(u, v) {
      if (u <= 0) {
        throw new Error("ArgumentOutOfRangeException" + u + "The arguments cannot be less or equal to zero.");
      }
      if (v <= 0) {
        throw new Error("ArgumentOutOfRangeException" + v + "The arguments cannot be less or equal to zero.");
      }
      if (u === 1 || v === 1) {
        return 1;
      }
      var shift = 0;
      while (this.isEven(u, v)) {
        ++shift;
        u >>= 1;
        v >>= 1;
      }
      while ((u & 1) <= 0) {
        u >>= 1;
      }
      do {
        while ((v & 1) <= 0) {
          v >>= 1;
        }
        if (u > v) {
          var t = v;
          v = u;
          u = t;
        }
        v = v - u;
      } while (v !== 0);
      return u << shift;
    };
    PdfBlend2.prototype.isEven = function(arg1, arg2) {
      if (typeof arg2 === "number" && typeof arg2 !== "undefined") {
        var result = true;
        result = result && (arg1 & 1) <= 0;
        result = result && (arg2 & 1) <= 0;
        return result;
      } else {
        return (arg1 & 1) <= 0;
      }
    };
    PdfBlend2.prototype.interpolate = function(t, color1, color2, colorSpace) {
      if (color1 instanceof PdfColor) {
        var color = new PdfColor();
        switch (colorSpace) {
          case PdfColorSpace.Rgb:
            var red = this.interpolate(t, color1.red, color2.red);
            var green = this.interpolate(t, color1.green, color2.green);
            var blue = this.interpolate(t, color1.blue, color2.blue);
            color = new PdfColor(red, green, blue);
            break;
          case PdfColorSpace.GrayScale:
            var gray = this.interpolate(t, color1.gray, color2.gray);
            color = new PdfColor(gray);
            break;
          case PdfColorSpace.Cmyk:
            var cyan = this.interpolate(t, color1.c, color2.c);
            var magenta = this.interpolate(t, color1.m, color2.m);
            var yellow = this.interpolate(t, color1.y, color2.y);
            var black = this.interpolate(t, color1.k, color2.k);
            color = new PdfColor(cyan, magenta, yellow, black);
            break;
        }
        return color;
      } else {
        var t0 = 0;
        var t1 = 1;
        var result = 0;
        if (t === t0) {
          result = color1;
        } else if (t === t1) {
          result = color2;
        } else {
          result = color1 + (t - t0) * ((color2 - color1) / (t1 - t0));
        }
        return result;
      }
    };
    return PdfBlend2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-color-blend.js
var __extends69 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfColorBlend = (
  /** @class */
  function(_super) {
    __extends69(PdfColorBlend2, _super);
    function PdfColorBlend2(count2) {
      var _this = _super.call(this) || this;
      if (typeof count2 === "number") {
        _this = _super.call(this, count2) || this;
      }
      return _this;
    }
    Object.defineProperty(PdfColorBlend2.prototype, "colors", {
      //Properties
      /**
       * Gets or sets the array of colors.
       * @public
       */
      get: function() {
        return this.mcolors;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Colors");
        }
        this.mcolors = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfColorBlend2.prototype.getFunction = function(colorSpace) {
      var domain = [0, 1];
      var colourComponents = this.getColorComponentsCount(colorSpace);
      var maxComponentValue = this.getMaxComponentValue(colorSpace);
      var range = this.setRange(colourComponents, maxComponentValue);
      var func = null;
      if (this.mbrush == null && typeof this.mbrush === "undefined") {
        var sizes = [1];
        var samplesCount = void 0;
        var step = 1;
        if (this.positions.length === 2) {
          samplesCount = 2;
        } else {
          var positions = this.positions;
          var intervals = this.getIntervals(positions);
          var gcd = this.gcd(intervals);
          step = gcd;
          samplesCount = 1 / gcd + 1;
        }
        sizes[0] = samplesCount;
        var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);
        func = new PdfSampledFunction(domain, range, sizes, samples);
        return func;
      }
      return func;
    };
    PdfColorBlend2.prototype.cloneColorBlend = function() {
      var cBlend = this;
      if (this.mcolors != null && typeof this.mcolors !== "undefined") {
        cBlend.colors = this.mcolors;
      }
      if (this.positions != null && typeof this.positions !== "undefined") {
        cBlend.positions = this.positions;
      }
      return cBlend;
    };
    PdfColorBlend2.prototype.setRange = function(colourComponents, maxValue) {
      var range = [colourComponents * 2];
      for (var i = 0; i < colourComponents; ++i) {
        range[i * 2] = 0;
        range[i * 2 + 1] = 1;
      }
      return range;
    };
    PdfColorBlend2.prototype.getColorComponentsCount = function(colorSpace) {
      var count2 = 0;
      switch (colorSpace) {
        case PdfColorSpace.Rgb:
          count2 = 3;
          break;
        case PdfColorSpace.Cmyk:
          count2 = 4;
          break;
        case PdfColorSpace.GrayScale:
          count2 = 1;
          break;
        default:
          throw new Error("ArgumentException - Unsupported color space: " + colorSpace + " colorSpace");
      }
      return count2;
    };
    PdfColorBlend2.prototype.getSamplesValues = function(colorSpace, sampleCount, maxComponentValue, step) {
      var values;
      switch (colorSpace) {
        case PdfColorSpace.GrayScale:
          values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);
          break;
        case PdfColorSpace.Cmyk:
          values = this.getCmykSamples(sampleCount, maxComponentValue, step);
          break;
        case PdfColorSpace.Rgb:
          values = this.getRgbSamples(sampleCount, maxComponentValue, step);
          break;
        default:
          throw new Error("ArgumentException - Unsupported color space: " + colorSpace + " colorSpace");
      }
      return values;
    };
    PdfColorBlend2.prototype.getGrayscaleSamples = function(sampleCount, maxComponentValue, step) {
      var values = [sampleCount * 2];
      for (var i = 0; i < sampleCount; ++i) {
        var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);
        var index = i * 2;
      }
      return values;
    };
    PdfColorBlend2.prototype.getRgbSamples = function(sampleCount, maxComponentValue, step) {
      var values = [sampleCount * 3];
      for (var i = 0; i < sampleCount; ++i) {
        var color = this.getNextColor(i, step, PdfColorSpace.Rgb);
        var index = i * 3;
        values[index] = color.r;
        values[index + 1] = color.g;
        values[index + 2] = color.b;
      }
      return values;
    };
    PdfColorBlend2.prototype.getCmykSamples = function(sampleCount, maxComponentValue, step) {
      var values = [sampleCount * 4];
      for (var i = 0; i < sampleCount; i++) {
        var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);
        var index = i * 4;
        values[index] = color.c * maxComponentValue;
        values[index + 1] = color.m * maxComponentValue;
        values[index + 2] = color.y * maxComponentValue;
        values[index + 3] = color.k * maxComponentValue;
      }
      return values;
    };
    PdfColorBlend2.prototype.getNextColor = function(index, step, colorSpace) {
      var position = step * index;
      var indexHi;
      var indexLow;
      var result = this.getIndices(position, indexLow, indexHi);
      indexLow = result.indexLow;
      indexHi = result.indexHi;
      var color;
      if (indexLow === indexHi) {
        color = this.mcolors[indexLow];
      } else {
        var positionLow = this.positions[indexLow];
        var positionHi = this.positions[indexHi];
        var colorLow = this.mcolors[indexLow];
        var colorHi = this.mcolors[indexHi];
        var t = (position - positionLow) / (positionHi - positionLow);
        color = this.interpolate(t, colorLow, colorHi, colorSpace);
      }
      return color;
    };
    PdfColorBlend2.prototype.getIndices = function(position, indexLow, indexHi) {
      var positions = this.positions;
      indexLow = 0;
      indexHi = 0;
      for (var i = 0; i < this.mcolors.length; ++i) {
        var currPos = positions[i];
        if (currPos === position) {
          indexHi = i;
          indexLow = i;
          break;
        } else if (currPos > position) {
          indexHi = i;
          break;
        }
        indexLow = i;
        indexHi = i;
      }
      return {
        indexLow,
        indexHi
      };
    };
    PdfColorBlend2.prototype.getMaxComponentValue = function(colorSpace) {
      var result = 0;
      switch (colorSpace) {
        case PdfColorSpace.Cmyk:
        case PdfColorSpace.Rgb:
          result = 255;
          break;
        case PdfColorSpace.GrayScale:
          result = 65535;
          break;
        default:
          throw new Error("ArgumentException - Unsupported color space: " + colorSpace + "colorSpace");
      }
      return result;
    };
    PdfColorBlend2.prototype.getIntervals = function(positions) {
      var count2 = positions.length;
      var intervals = [count2 - 1];
      var prev = positions[0];
      for (var i = 1; i < count2; ++i) {
        var v = positions[i];
        intervals[i - 1] = v - prev;
        prev = v;
      }
      return intervals;
    };
    return PdfColorBlend2;
  }(PdfBlend)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-linear-gradient-brush.js
var __extends70 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfLinearGradientBrush = (
  /** @class */
  function(_super) {
    __extends70(PdfLinearGradientBrush2, _super);
    function PdfLinearGradientBrush2(arg1, arg2, arg3, arg4) {
      var _this = _super.call(this, new PdfDictionary()) || this;
      _this.mDictionaryProperties = new DictionaryProperties();
      if (arg1 instanceof PointF && arg2 instanceof PointF && arg3 instanceof PdfColor && arg4 instanceof PdfColor) {
        _this.initialize(arg3, arg4);
        _this.mPointStart = arg1;
        _this.mPointEnd = arg2;
        _this.setPoints(_this.mPointStart, _this.mPointEnd);
      } else if (arg1 instanceof Rectangle) {
        _this.initialize(arg2, arg3);
        if (arg4 === PdfLinearGradientMode.BackwardDiagonal || arg4 === PdfLinearGradientMode.ForwardDiagonal || arg4 === PdfLinearGradientMode.Horizontal || arg4 === PdfLinearGradientMode.Vertical) {
          _this.mBoundaries = arg1;
          switch (arg4) {
            case PdfLinearGradientMode.BackwardDiagonal:
              _this.mPointStart = new PointF(arg1.right, arg1.top);
              _this.mPointEnd = new PointF(arg1.left, arg1.bottom);
              break;
            case PdfLinearGradientMode.ForwardDiagonal:
              _this.mPointStart = new PointF(arg1.left, arg1.top);
              _this.mPointEnd = new PointF(arg1.right, arg1.bottom);
              break;
            case PdfLinearGradientMode.Horizontal:
              _this.mPointStart = new PointF(arg1.left, arg1.top);
              _this.mPointEnd = new PointF(arg1.right, arg1.top);
              break;
            case PdfLinearGradientMode.Vertical:
              _this.mPointStart = new PointF(arg1.left, arg1.top);
              _this.mPointEnd = new PointF(arg1.left, arg1.bottom);
              break;
            default:
              throw new Error("ArgumentException -- Unsupported linear gradient mode: " + arg4 + " mode");
          }
          _this.setPoints(_this.mPointStart, _this.mPointEnd);
        } else if (typeof arg4 === "number" && typeof arg4 !== "undefined") {
          _this.mBoundaries = arg1;
          arg4 = arg4 % 360;
          if (arg4 === 0) {
            _this.mPointStart = new PointF(arg1.left, arg1.top);
            _this.mPointEnd = new PointF(arg1.right, arg1.top);
          } else if (arg4 === 90) {
            _this.mPointStart = new PointF(arg1.left, arg1.top);
            _this.mPointEnd = new PointF(arg1.left, arg1.bottom);
          } else if (arg4 === 180) {
            _this.mPointEnd = new PointF(arg1.left, arg1.top);
            _this.mPointStart = new PointF(arg1.right, arg1.top);
          } else if (arg4 === 270) {
            _this.mPointEnd = new PointF(arg1.left, arg1.top);
            _this.mPointStart = new PointF(arg1.left, arg1.bottom);
          } else {
            var d2r = Math.PI / 180;
            var radAngle = arg4 * d2r;
            var k = Math.tan(radAngle);
            var x = _this.mBoundaries.left + (_this.mBoundaries.right - _this.mBoundaries.left) / 2;
            var y = _this.mBoundaries.top + (_this.mBoundaries.bottom - _this.mBoundaries.top) / 2;
            var centre = new PointF(x, y);
            x = _this.mBoundaries.width / (2 * Math.cos(radAngle));
            y = k * x;
            x = x + centre.x;
            y = y + centre.y;
            var p1 = new PointF(x, y);
            var cp1 = _this.subPoints(p1, centre);
            var p = _this.choosePoint(arg4);
            var coef = _this.mulPoints(_this.subPoints(p, centre), cp1) / _this.mulPoints(cp1, cp1);
            _this.mPointEnd = _this.addPoints(centre, _this.mulPoint(cp1, coef));
            _this.mPointStart = _this.addPoints(centre, _this.mulPoint(cp1, coef * -1));
          }
          _this.setPoints(_this.mPointEnd, _this.mPointStart);
        }
      }
      return _this;
    }
    PdfLinearGradientBrush2.prototype.initialize = function(color1, color2) {
      this.mColours = [color1, color2];
      this.mColourBlend = new PdfColorBlend(2);
      this.mColourBlend.positions = [0, 1];
      this.mColourBlend.colors = this.mColours;
      this.initShading();
    };
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "blend", {
      //Properties
      /**
       * Gets or sets a PdfBlend that specifies positions
       * and factors that define a custom falloff for the gradient.
       * @public
       */
      get: function() {
        return this.mBlend;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Blend");
        }
        if (this.mColours == null) {
          throw new Error("NotSupportedException : There is no starting and ending colours specified.");
        }
        this.mBlend = value;
        this.mColourBlend = this.mBlend.generateColorBlend(this.mColours, this.colorSpace);
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "interpolationColors", {
      /**
       * Gets or sets a ColorBlend that defines a multicolor linear gradient.
       * @public
       */
      get: function() {
        return this.mColourBlend;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : InterpolationColors");
        }
        this.mBlend = null;
        this.mColours = null;
        this.mColourBlend = value;
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "linearColors", {
      /**
       * Gets or sets the starting and ending colors of the gradient.
       * @public
       */
      get: function() {
        return this.mColours;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : LinearColors");
        }
        if (value.length < 2) {
          throw new Error("ArgumentException : The array is too small - LinearColors");
        }
        if (this.mColours == null && typeof this.mColours === "undefined") {
          this.mColours = [value[0], value[1]];
        } else {
          this.mColours[0] = value[0];
          this.mColours[1] = value[1];
        }
        if (this.mBlend == null && typeof this.mBlend === "undefined") {
          this.mColourBlend = new PdfColorBlend(2);
          this.mColourBlend.colors = this.mColours;
          this.mColourBlend.positions = [0, 1];
        } else {
          this.mColourBlend = this.mBlend.generateColorBlend(this.mColours, this.colorSpace);
        }
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "rectangle", {
      /**
       * Gets a rectangular region that defines the boundaries of the gradient.
       * @public
       */
      get: function() {
        return this.mBoundaries;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfLinearGradientBrush2.prototype, "extend", {
      /**
       * Gets or sets the value indicating whether the gradient should extend starting and ending points.
       * @public
       */
      get: function() {
        var result = PdfExtend.None;
        var extend3 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        if (extend3 != null) {
          var extStart = extend3.items(0);
          var extEnd = extend3.items(1);
          if (extStart.value) {
            result = result | PdfExtend.Start;
          }
          if (extEnd.value) {
            result = result | PdfExtend.End;
          }
        }
        return result;
      },
      set: function(value) {
        var extend3 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        var extStart;
        var extEnd;
        if (extend3 == null) {
          extStart = new PdfBoolean(false);
          extEnd = new PdfBoolean(false);
          extend3 = new PdfArray();
          extend3.add(extStart);
          extend3.add(extEnd);
          this.shading.items.setValue(this.mDictionaryProperties.extend, extend3);
        } else {
          extStart = extend3.items(0);
          extEnd = extend3.items(1);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfLinearGradientBrush2.prototype.addPoints = function(point1, point2) {
      var x = point1.x + point2.x;
      var y = point1.y + point2.y;
      var result = new PointF(x, y);
      return result;
    };
    PdfLinearGradientBrush2.prototype.subPoints = function(point1, point2) {
      var x = point1.x - point2.x;
      var y = point1.y - point2.y;
      var result = new PointF(x, y);
      return result;
    };
    PdfLinearGradientBrush2.prototype.mulPoints = function(point1, point2) {
      var result = point1.x * point2.x + point1.y * point2.y;
      return result;
    };
    PdfLinearGradientBrush2.prototype.mulPoint = function(point, value) {
      point.x = point.x * value;
      point.y = point.y * value;
      return point;
    };
    PdfLinearGradientBrush2.prototype.choosePoint = function(angle) {
      var point = new PointF(0, 0);
      if (angle < 90 && angle > 0) {
        point = new PointF(this.mBoundaries.right, this.mBoundaries.bottom);
      } else if (angle < 180 && angle > 90) {
        point = new PointF(this.mBoundaries.left, this.mBoundaries.bottom);
      } else if (angle < 270 && angle > 180) {
        point = new PointF(this.mBoundaries.left, this.mBoundaries.top);
      } else if (angle > 270) {
        point = new PointF(this.mBoundaries.right, this.mBoundaries.top);
      } else {
        throw new Error("PdfException - Internal error.");
      }
      return point;
    };
    PdfLinearGradientBrush2.prototype.setPoints = function(point1, point2) {
      var points = new PdfArray();
      points.add(new PdfNumber(point1.x));
      points.add(new PdfNumber(this.updateY(point1.y)));
      points.add(new PdfNumber(point2.x));
      points.add(new PdfNumber(this.updateY(point2.y)));
      this.shading.items.setValue(this.mDictionaryProperties.coords, points);
    };
    PdfLinearGradientBrush2.prototype.updateY = function(y) {
      if (y !== 0) {
        return -y;
      } else {
        return y;
      }
    };
    PdfLinearGradientBrush2.prototype.initShading = function() {
      this.colorSpace = PdfColorSpace.Rgb;
      this.function = this.mColourBlend.getFunction(this.colorSpace);
      this.shading.items.setValue(this.mDictionaryProperties.shadingType, new PdfNumber(ShadingType.Axial));
    };
    PdfLinearGradientBrush2.prototype.clone = function() {
      var brush = this;
      brush.resetPatternDictionary(new PdfDictionary(this.patternDictionary));
      brush.shading = new PdfDictionary();
      brush.initShading();
      brush.setPoints(brush.mPointStart, brush.mPointEnd);
      if (brush !== null && brush instanceof PdfLinearGradientBrush2) {
        if (this.matrix != null && typeof this.matrix !== "undefined") {
          brush.matrix = this.matrix.clone();
        }
      }
      if (this.mColours != null && typeof this.mColours !== "undefined") {
        brush.mColours = this.mColours;
      }
      if (this.blend != null && typeof this.blend !== "undefined") {
        brush.blend = this.blend.clonePdfBlend();
      } else if (this.interpolationColors != null && typeof this.interpolationColors !== "undefined") {
        brush.interpolationColors = this.interpolationColors.cloneColorBlend();
      }
      brush.extend = this.extend;
      this.cloneBackgroundValue(brush);
      this.cloneAntiAliasingValue(brush);
      return brush;
    };
    PdfLinearGradientBrush2.prototype.resetFunction = function() {
      this.function = this.mColourBlend.getFunction(this.colorSpace);
    };
    return PdfLinearGradientBrush2;
  }(PdfGradientBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-radial-gradient-brush.js
var __extends71 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfRadialGradientBrush = (
  /** @class */
  function(_super) {
    __extends71(PdfRadialGradientBrush2, _super);
    function PdfRadialGradientBrush2(centerStart, radiusStart, centerEnd, radiusEnd, colorStart, colorEnd) {
      var _this = _super.call(this, new PdfDictionary()) || this;
      _this.mDictionaryProperties = new DictionaryProperties();
      _this.initialize(colorStart, colorEnd);
      if (radiusStart < 0) {
        throw new Error("ArgumentOutOfRangeException : radiusStart - The radius cannot be less then zero.");
      }
      if (radiusEnd < 0) {
        throw new Error("ArgumentOutOfRangeException : radiusEnd - The radius cannpt be less then zero.");
      }
      _this.mPointEnd = centerEnd;
      _this.mPointStart = centerStart;
      _this.mRadiusStart = radiusStart;
      _this.mRadiusEnd = radiusEnd;
      _this.setPoints(_this.mPointStart, _this.mPointEnd, _this.mRadiusStart, _this.mRadiusEnd);
      return _this;
    }
    PdfRadialGradientBrush2.prototype.initialize = function(color1, color2) {
      this.mColour = [color1, color2];
      this.mColourBlends = new PdfColorBlend(2);
      this.mColourBlends.positions = [0, 1];
      this.mColourBlends.colors = this.mColour;
      this.initShading();
    };
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "blend", {
      //Properties
      /**
       * Gets or sets a PdfBlend that specifies positions and factors that define a custom falloff for the gradient.
       * @public
       */
      get: function() {
        return this.mBlend;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : Blend");
        }
        if (this.mColour == null && typeof this.mColour === "undefined") {
          throw new Error("NotSupportedException : There is no starting and ending colours specified.");
        }
        this.mBlend = value;
        this.mColourBlends = this.mBlend.generateColorBlend(this.mColour, this.colorSpace);
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "interpolationColors", {
      /**
       * Gets or sets a ColorBlend that defines a multicolor radial gradient.
       * @public
       */
      get: function() {
        return this.mColourBlends;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : InterpolationColors");
        }
        this.mBlend = null;
        this.mColour = null;
        this.mColourBlends = value;
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "linearColors", {
      /**
       * Gets or sets the starting and ending colors of the radial gradient.
       * @public
       */
      get: function() {
        return this.mColour;
      },
      set: function(value) {
        if (value == null) {
          throw new Error("ArgumentNullException : radial LinearColors");
        }
        if (value.length < 2) {
          throw new Error("ArgumentException : The array is too small LinearColors");
        }
        if (this.mColour == null && typeof this.mColour === "undefined") {
          this.mColour = [value[0], value[1]];
        } else {
          this.mColour[0] = value[0];
          this.mColour[1] = value[1];
        }
        if (this.mBlend == null && typeof this.mBlend === "undefined") {
          this.mColourBlends = new PdfColorBlend(2);
          this.mColourBlends.colors = this.mColour;
          this.mColourBlends.positions = [0, 1];
        } else {
          this.mColourBlends = this.mBlend.generateColorBlend(this.mColour, this.colorSpace);
        }
        this.resetFunction();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "rectangle", {
      /**
       * Gets or sets the rectangle.
       * @public
       */
      get: function() {
        return this.mBoundaries;
      },
      set: function(value) {
        this.mBoundaries = value;
        this.bBox = PdfArray.fromRectangle(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRadialGradientBrush2.prototype, "extend", {
      /**
       * Gets or sets the value indicating whether the gradient
       *  should extend starting and ending points.
       * @public
       */
      get: function() {
        var result1 = PdfExtend.None;
        var extend1 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        if (extend1 !== null && typeof extend1 !== "undefined") {
          var extStart = extend1.items(0);
          var extEnd = extend1.items(1);
          if (extStart.value) {
            result1 = result1 | PdfExtend.Start;
          }
          if (extEnd.value) {
            result1 = result1 | PdfExtend.End;
          }
        }
        return result1;
      },
      set: function(value) {
        var extend3 = this.shading.items.getValue(this.mDictionaryProperties.extend);
        var extStart;
        var extEnd1;
        if (extend3 == null && typeof extend3 === "undefined") {
          extStart = new PdfBoolean(false);
          extEnd1 = new PdfBoolean(false);
          extend3 = new PdfArray();
          extend3.add(extStart);
          extend3.add(extEnd1);
          this.shading.items.setValue(this.mDictionaryProperties.extend, extend3);
        } else {
          extStart = extend3.items(0);
          extEnd1 = extend3.items(1);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfRadialGradientBrush2.prototype.setPoints = function(pointStart, pointEnd, radiusStart, radiusEnd) {
      var points = new PdfArray();
      points.add(new PdfNumber(pointStart.x));
      points.add(new PdfNumber(this.updateY(pointStart.y)));
      points.add(new PdfNumber(radiusStart));
      points.add(new PdfNumber(pointEnd.x));
      points.add(new PdfNumber(this.updateY(pointEnd.y)));
      if (radiusStart !== radiusEnd) {
        points.add(new PdfNumber(radiusEnd));
      } else {
        points.add(new PdfNumber(0));
      }
      this.shading.items.setValue(this.mDictionaryProperties.coords, points);
    };
    PdfRadialGradientBrush2.prototype.updateY = function(y) {
      if (y !== 0) {
        return -y;
      } else {
        return y;
      }
    };
    PdfRadialGradientBrush2.prototype.initShading = function() {
      this.colorSpace = PdfColorSpace.Rgb;
      this.function = this.mColourBlends.getFunction(this.colorSpace);
      this.shading.items.setValue(this.mDictionaryProperties.shadingType, new PdfNumber(ShadingType.Radial));
    };
    PdfRadialGradientBrush2.prototype.clone = function() {
      var rBrush = this;
      rBrush.resetPatternDictionary(new PdfDictionary(this.patternDictionary));
      rBrush.shading = new PdfDictionary();
      rBrush.initShading();
      rBrush.setPoints(this.mPointStart, this.mPointEnd, this.mRadiusStart, this.mRadiusEnd);
      if (rBrush instanceof PdfRadialGradientBrush2) {
        if (this.matrix !== null && typeof this.matrix !== "undefined") {
          rBrush.matrix = this.matrix.clone();
        }
      }
      if (this.mColour !== null && typeof this.mColour !== "undefined") {
        rBrush.mColour = this.mColour;
      }
      if (this.blend !== null && typeof this.blend !== "undefined") {
        rBrush.blend = this.blend.clonePdfBlend();
      } else if (this.interpolationColors !== null && typeof this.interpolationColors !== "undefined") {
        rBrush.interpolationColors = this.interpolationColors.cloneColorBlend();
      }
      rBrush.extend = this.extend;
      this.cloneBackgroundValue(rBrush);
      this.cloneAntiAliasingValue(rBrush);
      return rBrush;
    };
    PdfRadialGradientBrush2.prototype.resetFunction = function() {
      this.function = this.mColourBlends.getFunction(this.colorSpace);
    };
    return PdfRadialGradientBrush2;
  }(PdfGradientBrush)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/tables/light-tables/enum.js
var PdfBorderOverlapStyle;
(function(PdfBorderOverlapStyle2) {
  PdfBorderOverlapStyle2[PdfBorderOverlapStyle2["Overlap"] = 0] = "Overlap";
  PdfBorderOverlapStyle2[PdfBorderOverlapStyle2["Inside"] = 1] = "Inside";
})(PdfBorderOverlapStyle || (PdfBorderOverlapStyle = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/style.js
var __extends72 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGridStyleBase = (
  /** @class */
  function() {
    function PdfGridStyleBase2() {
    }
    Object.defineProperty(PdfGridStyleBase2.prototype, "backgroundBrush", {
      // Properties
      /**
       * Gets or sets the `background brush`.
       * @private
       */
      get: function() {
        return this.gridBackgroundBrush;
      },
      set: function(value) {
        this.gridBackgroundBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "textBrush", {
      /**
       * Gets or sets the `text brush`.
       * @private
       */
      get: function() {
        return this.gridTextBrush;
      },
      set: function(value) {
        this.gridTextBrush = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "textPen", {
      /**
       * Gets or sets the `text pen`.
       * @private
       */
      get: function() {
        return this.gridTextPen;
      },
      set: function(value) {
        this.gridTextPen = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "font", {
      /**
       * Gets or sets the `font`.
       * @private
       */
      get: function() {
        return this.gridFont;
      },
      set: function(value) {
        this.gridFont = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyleBase2.prototype, "backgroundImage", {
      /**
       * Gets or sets the `background Image`.
       * @private
       */
      get: function() {
        return this.gridBackgroundImage;
      },
      set: function(value) {
        this.gridBackgroundImage = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridStyleBase2;
  }()
);
var PdfGridStyle = (
  /** @class */
  function(_super) {
    __extends72(PdfGridStyle2, _super);
    function PdfGridStyle2() {
      var _this = _super.call(this) || this;
      _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;
      _this.bAllowHorizontalOverflow = false;
      _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;
      return _this;
    }
    Object.defineProperty(PdfGridStyle2.prototype, "cellSpacing", {
      //Properties
      /**
       * Gets or sets the `cell spacing` of the 'PdfGrid'.
       * @private
       */
      get: function() {
        if (typeof this.gridCellSpacing === "undefined") {
          this.gridCellSpacing = 0;
        }
        return this.gridCellSpacing;
      },
      set: function(value) {
        this.gridCellSpacing = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "horizontalOverflowType", {
      /**
       * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.
       * @private
       */
      get: function() {
        return this.gridHorizontalOverflowType;
      },
      set: function(value) {
        this.gridHorizontalOverflowType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "allowHorizontalOverflow", {
      /**
       * Gets or sets a value indicating whether to `allow horizontal overflow`.
       * @private
       */
      get: function() {
        return this.bAllowHorizontalOverflow;
      },
      set: function(value) {
        this.bAllowHorizontalOverflow = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "cellPadding", {
      /**
       * Gets or sets the `cell padding`.
       * @private
       */
      get: function() {
        if (typeof this.gridCellPadding === "undefined") {
          this.gridCellPadding = new PdfPaddings();
        }
        return this.gridCellPadding;
      },
      set: function(value) {
        if (typeof this.gridCellPadding === "undefined") {
          this.gridCellPadding = new PdfPaddings();
          this.gridCellPadding = value;
        } else {
          this.gridCellPadding = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridStyle2.prototype, "borderOverlapStyle", {
      /**
       * Gets or sets the `border overlap style` of the 'PdfGrid'.
       * @private
       */
      get: function() {
        return this.gridBorderOverlapStyle;
      },
      set: function(value) {
        this.gridBorderOverlapStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridStyle2;
  }(PdfGridStyleBase)
);
var PdfGridCellStyle = (
  /** @class */
  function(_super) {
    __extends72(PdfGridCellStyle2, _super);
    function PdfGridCellStyle2() {
      var _this = _super.call(this) || this;
      _this.gridCellBorders = PdfBorders.default;
      return _this;
    }
    Object.defineProperty(PdfGridCellStyle2.prototype, "stringFormat", {
      //Properties
      /**
       * Gets the `string format` of the 'PdfGridCell'.
       * @private
       */
      get: function() {
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCellStyle2.prototype, "borders", {
      /**
       * Gets or sets the `border` of the 'PdfGridCell'.
       * @private
       */
      get: function() {
        return this.gridCellBorders;
      },
      set: function(value) {
        this.gridCellBorders = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCellStyle2.prototype, "cellPadding", {
      /**
       * Gets or sets the `cell padding`.
       * @private
       */
      get: function() {
        return this.gridCellPadding;
      },
      set: function(value) {
        if (this.gridCellPadding == null || typeof this.gridCellPadding === "undefined") {
          this.gridCellPadding = new PdfPaddings();
        }
        this.gridCellPadding = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridCellStyle2;
  }(PdfGridStyleBase)
);
var PdfGridRowStyle = (
  /** @class */
  function() {
    function PdfGridRowStyle2() {
    }
    Object.defineProperty(PdfGridRowStyle2.prototype, "backgroundBrush", {
      // Properties
      /**
       * Gets or sets the `background brush`.
       * @private
       */
      get: function() {
        return this.gridRowBackgroundBrush;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setBackgroundBrush = function(value) {
      this.gridRowBackgroundBrush = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.backgroundBrush = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "textBrush", {
      /**
       * Gets or sets the `text brush`.
       * @private
       */
      get: function() {
        return this.gridRowTextBrush;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setTextBrush = function(value) {
      this.gridRowTextBrush = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.textBrush = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "textPen", {
      /**
       * Gets or sets the `text pen`.
       * @private
       */
      get: function() {
        return this.gridRowTextPen;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setTextPen = function(value) {
      this.gridRowTextPen = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.textPen = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "font", {
      /**
       * Gets or sets the `font`.
       * @private
       */
      get: function() {
        return this.gridRowFont;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setFont = function(value) {
      this.gridRowFont = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.font = value;
        }
      }
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "border", {
      /**
       * Gets or sets the `border` of the current row.
       * @private
       */
      get: function() {
        if (typeof this.gridRowBorder === "undefined") {
          this.setBorder(new PdfBorders());
        }
        return this.gridRowBorder;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setBorder = function(value) {
      this.gridRowBorder = value;
      if (typeof this.parent !== "undefined") {
        for (var i = 0; i < this.parent.cells.count; i++) {
          this.parent.cells.getCell(i).style.borders = value;
        }
      }
    };
    PdfGridRowStyle2.prototype.setParent = function(parent) {
      this.parent = parent;
    };
    Object.defineProperty(PdfGridRowStyle2.prototype, "backgroundImage", {
      /**
       * Gets or sets the `backgroundImage` of the 'PdfGridCell'.
       * @private
       */
      get: function() {
        return this.gridRowBackgroundImage;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowStyle2.prototype.setBackgroundImage = function(value) {
      this.gridRowBackgroundImage = value;
    };
    return PdfGridRowStyle2;
  }()
);
var PdfHorizontalOverflowType;
(function(PdfHorizontalOverflowType2) {
  PdfHorizontalOverflowType2[PdfHorizontalOverflowType2["NextPage"] = 0] = "NextPage";
  PdfHorizontalOverflowType2[PdfHorizontalOverflowType2["LastPage"] = 1] = "LastPage";
})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-cell.js
var PdfGridCell = (
  /** @class */
  function() {
    function PdfGridCell2(row2) {
      this.cellWidth = 0;
      this.cellHeight = 0;
      this.tempval = 0;
      this.fontSpilt = false;
      this.finsh = true;
      this.rowSpanRemainingHeight = 0;
      this.hasRowSpan = false;
      this.hasColSpan = false;
      this.isFinish = true;
      this.present = false;
      this.gridRowSpan = 1;
      this.colSpan = 1;
      if (typeof row2 !== "undefined") {
        this.gridRow = row2;
      }
    }
    Object.defineProperty(PdfGridCell2.prototype, "isCellMergeContinue", {
      //Properties
      get: function() {
        return this.internalIsCellMergeContinue;
      },
      set: function(value) {
        this.internalIsCellMergeContinue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "isRowMergeContinue", {
      get: function() {
        return this.internalIsRowMergeContinue;
      },
      set: function(value) {
        this.internalIsRowMergeContinue = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "isCellMergeStart", {
      get: function() {
        return this.internalIsCellMergeStart;
      },
      set: function(value) {
        this.internalIsCellMergeStart = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "isRowMergeStart", {
      get: function() {
        return this.internalIsRowMergeStart;
      },
      set: function(value) {
        this.internalIsRowMergeStart = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "remainingString", {
      /**
       * Gets or sets the `remaining string` after the row split between pages.
       * @private
       */
      get: function() {
        return this.remaining;
      },
      set: function(value) {
        this.remaining = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "FinishedDrawingCell", {
      /**
       * Gets or sets the `FinishedDrawingCell` .
       * @private
       */
      get: function() {
        return this.isFinish;
      },
      set: function(value) {
        this.isFinish = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "stringFormat", {
      /**
       * Gets or sets the `string format`.
       * @private
       */
      get: function() {
        if (this.format == null) {
          this.format = new PdfStringFormat();
        }
        return this.format;
      },
      set: function(value) {
        this.format = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "row", {
      /**
       * Gets or sets the parent `row`.
       * @private
       */
      get: function() {
        return this.gridRow;
      },
      set: function(value) {
        this.gridRow = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "value", {
      /**
       * Gets or sets the `value` of the cell.
       * @private
       */
      get: function() {
        return this.objectValue;
      },
      set: function(value) {
        this.objectValue = value;
        if (this.objectValue instanceof PdfGrid) {
          this.row.grid.isSingleGrid = false;
          var grid = this.objectValue;
          grid.ParentCell = this;
          this.objectValue.isChildGrid = true;
          var rowCount = this.row.grid.rows.count;
          for (var i = 0; i < rowCount; i++) {
            var row2 = this.row.grid.rows.getRow(i);
            var colCount = row2.cells.count;
            for (var j = 0; j < colCount; j++) {
              var cell = row2.cells.getCell(j);
              cell.parent = this;
            }
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "rowSpan", {
      /**
       * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.
       * @private
       */
      get: function() {
        return this.gridRowSpan;
      },
      set: function(value) {
        if (value < 1) {
          throw new Error("ArgumentException : Invalid span specified, must be greater than or equal to 1");
        } else {
          this.gridRowSpan = value;
          this.row.rowSpanExists = true;
          this.row.grid.hasRowSpanSpan = true;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "style", {
      /**
       * Gets or sets the cell `style`.
       * @private
       */
      get: function() {
        if (this.cellStyle == null) {
          this.cellStyle = new PdfGridCellStyle();
        }
        return this.cellStyle;
      },
      set: function(value) {
        this.cellStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "height", {
      /**
       * Gets the `height` of the PdfGrid cell.[Read-Only].
       * @private
       */
      get: function() {
        if (this.cellHeight === 0) {
          this.cellHeight = this.measureHeight();
        }
        return this.cellHeight;
      },
      set: function(value) {
        this.cellHeight = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "columnSpan", {
      /**
       * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.
       * @private
       */
      get: function() {
        return this.colSpan;
      },
      set: function(value) {
        if (value < 1) {
          throw Error("Invalid span specified, must be greater than or equal to 1");
        } else {
          this.colSpan = value;
          this.row.columnSpanExists = true;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridCell2.prototype, "width", {
      /**
       * Gets the `width` of the PdfGrid cell.[Read-Only].
       * @private
       */
      get: function() {
        if (this.cellWidth === 0 || this.row.grid.isComplete) {
          this.cellWidth = this.measureWidth();
        }
        return Math.round(this.cellWidth);
      },
      set: function(value) {
        this.cellWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridCell2.prototype.measureWidth = function() {
      var width = 0;
      var layouter = new PdfStringLayouter();
      if (typeof this.objectValue === "string") {
        var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));
        width += slr.actualSize.width;
        width += (this.style.borders.left.width + this.style.borders.right.width) * 2;
      } else if (this.objectValue instanceof PdfGrid) {
        width = this.objectValue.size.width;
      } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
        width += this.objectValue.width;
      } else if (this.objectValue instanceof PdfTextWebLink) {
        var webLink = this.objectValue;
        var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));
        width += result.actualSize.width;
        width += (this.style.borders.left.width + this.style.borders.right.width) * 2;
      }
      if (!(this.objectValue instanceof PdfGrid)) {
        if (this.style.cellPadding != null) {
          width += this.style.cellPadding.left + this.style.cellPadding.right;
        } else {
          width += this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right;
        }
      } else {
        if (this.style.cellPadding != null || typeof this.style.cellPadding !== "undefined") {
          if (typeof this.style.cellPadding.left !== "undefined" && this.style.cellPadding.hasLeftPad) {
            width += this.style.cellPadding.left;
          }
          if (typeof this.style.cellPadding.right !== "undefined" && this.style.cellPadding.hasRightPad) {
            width += this.style.cellPadding.right;
          }
        } else {
          if (typeof this.row.grid.style.cellPadding.left !== "undefined" && this.row.grid.style.cellPadding.hasLeftPad) {
            width += this.row.grid.style.cellPadding.left;
          }
          if (typeof this.row.grid.style.cellPadding.right !== "undefined" && this.row.grid.style.cellPadding.hasRightPad) {
            width += this.row.grid.style.cellPadding.right;
          }
        }
      }
      width += this.row.grid.style.cellSpacing;
      return width;
    };
    PdfGridCell2.prototype.drawCellBackground = function(graphics, bounds) {
      var backgroundBrush = this.getBackgroundBrush();
      if (backgroundBrush != null) {
        graphics.save();
        graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);
        graphics.restore();
      }
      if (this.style.backgroundImage != null) {
        var image = this.getBackgroundImage();
        graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);
      }
    };
    PdfGridCell2.prototype.adjustContentLayoutArea = function(bounds) {
      var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
      if (!(this.objectValue instanceof PdfGrid)) {
        if (typeof this.style.cellPadding === "undefined" || this.style.cellPadding == null) {
          returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;
          returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;
          returnBounds.width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
          returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top;
          returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;
        } else {
          returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;
          returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;
          returnBounds.width -= this.style.cellPadding.right + this.style.cellPadding.left;
          returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;
          returnBounds.height -= this.style.cellPadding.bottom + this.style.cellPadding.top;
          returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;
          if (this.rowSpan === 1) {
            returnBounds.width -= this.style.borders.left.width;
          }
        }
      } else {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          if (typeof this.gridRow.grid.style.cellPadding.left !== "undefined" && this.gridRow.grid.style.cellPadding.hasLeftPad) {
            returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;
            returnBounds.width -= this.gridRow.grid.style.cellPadding.left;
          }
          if (typeof this.gridRow.grid.style.cellPadding.top !== "undefined" && this.gridRow.grid.style.cellPadding.hasTopPad) {
            returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;
            returnBounds.height -= this.gridRow.grid.style.cellPadding.top;
          }
          if (typeof this.gridRow.grid.style.cellPadding.right !== "undefined" && this.gridRow.grid.style.cellPadding.hasRightPad) {
            returnBounds.width -= this.gridRow.grid.style.cellPadding.right;
          }
          if (typeof this.gridRow.grid.style.cellPadding.bottom !== "undefined" && this.gridRow.grid.style.cellPadding.hasBottomPad) {
            returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;
          }
        } else {
          if (typeof this.style.cellPadding.left !== "undefined" && this.style.cellPadding.hasLeftPad) {
            returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;
            returnBounds.width -= this.style.cellPadding.left;
          }
          if (typeof this.style.cellPadding.top !== "undefined" && this.style.cellPadding.hasTopPad) {
            returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;
            returnBounds.height -= this.style.cellPadding.top;
          }
          if (typeof this.style.cellPadding.right !== "undefined" && this.style.cellPadding.hasRightPad) {
            returnBounds.width -= this.style.cellPadding.right;
          }
          if (typeof this.style.cellPadding.bottom !== "undefined" && this.style.cellPadding.hasBottomPad) {
            returnBounds.height -= this.style.cellPadding.bottom;
          }
        }
        returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;
        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;
      }
      return returnBounds;
    };
    PdfGridCell2.prototype.draw = function(graphics, bounds, cancelSubsequentSpans) {
      var isrowbreak = false;
      var result = null;
      if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {
        if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {
          if (this.row.rowOverflowIndex > 0 && this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1 || this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue) {
            return result;
          }
        } else {
          return result;
        }
      }
      bounds = this.adjustOuterLayoutArea(bounds, graphics);
      this.drawCellBackground(graphics, bounds);
      var textPen = this.getTextPen();
      var textBrush = this.getTextBrush();
      if (typeof textPen === "undefined" && typeof textBrush === "undefined") {
        textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var font = this.getTextFont();
      var strFormat = this.getStringFormat();
      var innerLayoutArea = bounds;
      if (innerLayoutArea.height >= graphics.clientSize.height) {
        if (this.row.grid.allowRowBreakAcrossPages) {
          innerLayoutArea.height -= innerLayoutArea.y;
          if (typeof this._rowHeight !== "undefined" && this._rowHeight !== null && innerLayoutArea.height > this._rowHeight) {
            innerLayoutArea.height = this._rowHeight;
          }
        }
      }
      innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);
      if (typeof this.objectValue === "string" || typeof this.remaining === "string") {
        var temp = void 0;
        var layoutRectangle = void 0;
        if (innerLayoutArea.height < font.height) layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);
        else layoutRectangle = innerLayoutArea;
        if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {
          var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;
          if (this.row.grid.splitChildRowIndex != -1) {
            this.fontSpilt = true;
            this.row.rowFontSplit = true;
          }
          if (height > 0 && height < font.height) layoutRectangle.height = height;
        }
        if (this.gridRow.grid.style.cellSpacing != 0) {
          layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;
          bounds.width -= this.gridRow.grid.style.cellSpacing;
        }
        if (this.isFinish) {
          temp = this.remaining === "" ? this.remaining : this.objectValue;
          graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);
          if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === "undefined") {
            this.remaining = "";
          }
        } else {
          if (typeof this.remaining == "undefined" || this.remaining === null) {
            this.remaining = "";
          }
          if (this.row.repeatFlag) {
            graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);
          }
          this.isFinish = true;
        }
        result = graphics.stringLayoutResult;
      } else if (this.objectValue instanceof PdfGrid) {
        var childGrid = this.objectValue;
        childGrid.isChildGrid = true;
        childGrid.ParentCell = this;
        var layoutRect = void 0;
        layoutRect = innerLayoutArea;
        if (this.gridRow.grid.style.cellSpacing != 0) {
          bounds.width -= this.gridRow.grid.style.cellSpacing;
        }
        var layouter = new PdfGridLayouter(childGrid);
        var format = new PdfGridLayoutFormat();
        if (this.row.grid.LayoutFormat != null) format = this.row.grid.LayoutFormat;
        else format.layout = PdfLayoutType.Paginate;
        var param = new PdfLayoutParams();
        if (graphics.layer != null) {
          param.page = graphics.page;
          param.bounds = layoutRect;
          param.format = format;
          childGrid.setSpan();
          childGrid.checkSpan();
          var childGridResult = layouter.Layouter(param);
          this.value = childGrid;
          if (this.row.grid.splitChildRowIndex !== -1) {
            this.height = this.row.rowBreakHeightValue;
          }
          if (param.page != childGridResult.page) {
            if (this.row.rowBreakHeightValue !== null && typeof this.row.rowBreakHeightValue !== "undefined") childGridResult.bounds.height = this.row.rowBreakHeightValue;
            if (this.row.rowBreakHeight == 0) this.row.NestedGridLayoutResult = childGridResult;
            else this.row.rowBreakHeight = this.row.rowBreakHeightValue;
          }
        }
      } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
        var imageBounds = void 0;
        if (this.objectValue.width <= innerLayoutArea.width) {
          imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);
        } else {
          imageBounds = innerLayoutArea;
        }
        graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);
      } else if (this.objectValue instanceof PdfTextWebLink) {
        this.objectValue.draw(graphics.currentPage, innerLayoutArea);
      } else if (typeof this.objectValue === "undefined") {
        this.objectValue = "";
        graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);
        if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {
          bounds.width -= this.style.borders.left.width + this.style.borders.right.width;
        }
        if (this.gridRow.grid.style.cellSpacing != 0) {
          bounds.width -= this.gridRow.grid.style.cellSpacing;
        }
      }
      if (this.style.borders != null) {
        if (!this.fontSpilt) this.drawCellBorders(graphics, bounds);
        else {
          if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {
            this.row.rowFontSplit = false;
            this.drawCellBorders(graphics, bounds);
          }
        }
      }
      return result;
    };
    PdfGridCell2.prototype.drawCellBorders = function(graphics, bounds) {
      if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {
        bounds.x += this.style.borders.left.width;
        bounds.y += this.style.borders.top.width;
        bounds.width -= this.style.borders.right.width;
        bounds.height -= this.style.borders.bottom.width;
      }
      var p1 = new PointF(bounds.x, bounds.y + bounds.height);
      var p2 = new PointF(bounds.x, bounds.y);
      var pen = this.cellStyle.borders.left;
      if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
      p1 = new PointF(bounds.x + bounds.width, bounds.y);
      p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);
      pen = this.cellStyle.borders.right;
      if (bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2) {
        p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y);
        p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height);
      }
      if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
      p1 = new PointF(bounds.x, bounds.y);
      p2 = new PointF(bounds.x + bounds.width, bounds.y);
      pen = this.cellStyle.borders.top;
      if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
      p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);
      p2 = new PointF(bounds.x, bounds.y + bounds.height);
      pen = this.cellStyle.borders.bottom;
      if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {
        p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);
        p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);
      }
      if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {
        pen.lineCap = PdfLineCap.Square;
      }
      if (pen.width !== 0) {
        graphics.drawLine(pen, p1, p2);
      }
    };
    PdfGridCell2.prototype.adjustOuterLayoutArea = function(bounds, g) {
      var isHeader = false;
      var cellSpacing = this.row.grid.style.cellSpacing;
      if (cellSpacing > 0) {
        bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);
      }
      var currentColIndex = this.row.cells.indexOf(this);
      if (this.columnSpan > 1 || this.row.rowOverflowIndex > 0 && currentColIndex == this.row.rowOverflowIndex + 1 && this.isCellMergeContinue) {
        var span = this.columnSpan;
        if (span == 1 && this.isCellMergeContinue) {
          for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {
            if (this.row.cells.getCell(j).isCellMergeContinue) span++;
            else break;
          }
        }
        var totalWidth = 0;
        for (var i = currentColIndex; i < currentColIndex + span; i++) {
          if (this.row.grid.style.allowHorizontalOverflow) {
            var width = void 0;
            var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;
            if (this.row.grid.size.width > g.clientSize.width) {
              width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;
            } else {
              width = totalWidth + this.row.grid.columns.getColumn(i).width;
            }
            if (width > compWidth) {
              break;
            }
          }
          totalWidth += this.row.grid.columns.getColumn(i).width;
        }
        totalWidth -= this.row.grid.style.cellSpacing;
        bounds.width = totalWidth;
      }
      if (this.rowSpan > 1 || this.row.rowSpanExists) {
        var span = this.rowSpan;
        var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);
        if (currentRowIndex == -1) {
          currentRowIndex = this.row.grid.headers.indexOf(this.row);
          if (currentRowIndex != -1) {
            isHeader = true;
          }
        }
        var totalHeight = 0;
        var max = 0;
        for (var i = currentRowIndex; i < currentRowIndex + span; i++) {
          totalHeight += isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height;
          var row2 = this.row.grid.rows.getRow(i);
          var rowIndex = this.row.grid.rows.rowCollection.indexOf(row2);
        }
        var cellIndex = this.row.cells.indexOf(this);
        totalHeight -= this.row.grid.style.cellSpacing;
        bounds.height = totalHeight;
        if (!this.row.rowMergeComplete) {
          bounds.height = totalHeight;
        }
      }
      return bounds;
    };
    PdfGridCell2.prototype.getTextFont = function() {
      if (typeof this.style.font !== "undefined" && this.style.font != null) {
        return this.style.font;
      } else if (typeof this.row.style.font !== "undefined" && this.row.style.font != null) {
        return this.row.style.font;
      } else if (typeof this.row.grid.style.font !== "undefined" && this.row.grid.style.font != null) {
        return this.row.grid.style.font;
      } else {
        return PdfDocument.defaultFont;
      }
    };
    PdfGridCell2.prototype.getTextBrush = function() {
      if (typeof this.style.textBrush !== "undefined" && this.style.textBrush != null) {
        return this.style.textBrush;
      } else if (typeof this.row.style.textBrush !== "undefined" && this.row.style.textBrush != null) {
        return this.row.style.textBrush;
      } else {
        return this.row.grid.style.textBrush;
      }
    };
    PdfGridCell2.prototype.getTextPen = function() {
      if (typeof this.style.textPen !== "undefined" && this.style.textPen != null) {
        return this.style.textPen;
      } else if (typeof this.row.style.textPen !== "undefined" && this.row.style.textPen != null) {
        return this.row.style.textPen;
      } else {
        return this.row.grid.style.textPen;
      }
    };
    PdfGridCell2.prototype.getBackgroundBrush = function() {
      if (typeof this.style.backgroundBrush !== "undefined" && this.style.backgroundBrush != null) {
        return this.style.backgroundBrush;
      } else if (typeof this.row.style.backgroundBrush !== "undefined" && this.row.style.backgroundBrush != null) {
        return this.row.style.backgroundBrush;
      } else {
        return this.row.grid.style.backgroundBrush;
      }
    };
    PdfGridCell2.prototype.getBackgroundImage = function() {
      if (typeof this.style.backgroundImage !== "undefined" && this.style.backgroundImage != null) {
        return this.style.backgroundImage;
      } else if (typeof this.row.style.backgroundImage !== "undefined" && this.row.style.backgroundImage != null) {
        return this.row.style.backgroundImage;
      } else {
        return this.row.grid.style.backgroundImage;
      }
    };
    PdfGridCell2.prototype.getStringFormat = function() {
      if (typeof this.style.stringFormat !== "undefined" && this.style.stringFormat != null) {
        return this.style.stringFormat;
      } else {
        return this.stringFormat;
      }
    };
    PdfGridCell2.prototype.measureHeight = function() {
      var width = this.calculateWidth();
      if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
        width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
      } else {
        width -= this.style.cellPadding.right + this.style.cellPadding.left;
        width -= this.style.borders.left.width + this.style.borders.right.width;
      }
      var height = 0;
      var layouter = new PdfStringLayouter();
      if (typeof this.objectValue === "string" || typeof this.remaining === "string") {
        var currentValue = this.objectValue;
        if (!this.isFinish) currentValue = !(this.remaining === null || this.remaining === "" || typeof this.remaining === "undefined") ? this.remaining : this.objectValue;
        var slr = null;
        var cellIndex = this.row.cells.indexOf(this);
        if (this.gridRow.grid.style.cellSpacing != 0) {
          width -= this.gridRow.grid.style.cellSpacing * 2;
        }
        if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {
          if (this.gridRow.grid.isChildGrid) {
            if (width < 0) {
              this.tempval = width;
              if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
                this.tempval += this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
              } else {
                this.tempval += this.style.cellPadding.right + this.style.cellPadding.left;
                this.tempval += this.style.borders.left.width + this.style.borders.right.width;
              }
            } else {
              this.tempval = width;
            }
            slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));
            height += slr.actualSize.height;
          } else {
            slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));
            height += slr.actualSize.height;
          }
        }
        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
      } else if (this.objectValue instanceof PdfGrid) {
        var cellIndex = this.row.cells.indexOf(this);
        var internalWidth = 0;
        if (this.style.cellPadding != null || typeof this.style.cellPadding !== "undefined") {
          internalWidth = this.calculateWidth();
          if (typeof this.style.cellPadding.left !== "undefined" && this.style.cellPadding.hasLeftPad) {
            internalWidth -= this.style.cellPadding.left;
          }
          if (typeof this.style.cellPadding.right !== "undefined" && this.style.cellPadding.hasRightPad) {
            internalWidth -= this.style.cellPadding.right;
          }
        } else if (this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== "undefined") {
          internalWidth = this.calculateWidth();
          if (typeof this.row.grid.style.cellPadding.left !== "undefined" && this.row.grid.style.cellPadding.hasLeftPad) {
            internalWidth -= this.row.grid.style.cellPadding.left;
          }
          if (typeof this.row.grid.style.cellPadding.right !== "undefined" && this.row.grid.style.cellPadding.hasRightPad) {
            internalWidth -= this.row.grid.style.cellPadding.right;
          }
        } else {
          internalWidth = this.calculateWidth();
        }
        this.objectValue.tempWidth = internalWidth;
        if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {
          height = this.objectValue.size.height;
        } else {
          height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
        }
        if (this.gridRow.grid.style.cellSpacing !== 0) {
          width -= this.gridRow.grid.style.cellSpacing * 2;
        }
        if (this.style.cellPadding != null || typeof this.style.cellPadding !== "undefined") {
          if (typeof this.row.grid.style.cellPadding.top !== "undefined" && this.row.grid.style.cellPadding.hasTopPad) {
            height += this.row.grid.style.cellPadding.top;
          }
          if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== "undefined") {
            height += this.row.grid.style.cellPadding.bottom;
          }
        }
        height += this.objectValue.style.cellSpacing;
      } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
        height += this.objectValue.height;
      } else if (this.objectValue instanceof PdfTextWebLink) {
        var webLink = this.objectValue;
        var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));
        height += slr.actualSize.height;
        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
      } else if (typeof this.objectValue === "undefined") {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;
        } else {
          width -= this.style.cellPadding.right + this.style.cellPadding.left;
          width -= this.style.borders.left.width + this.style.borders.right.width;
        }
        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;
      }
      if (!(this.objectValue instanceof PdfGrid)) {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          height += this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom;
        } else {
          height += this.style.cellPadding.top + this.style.cellPadding.bottom;
        }
      } else {
        if (this.style.cellPadding == null || typeof this.style.cellPadding === "undefined") {
          if (typeof this.row.grid.style.cellPadding.top !== "undefined" && this.row.grid.style.cellPadding.hasTopPad) {
            height += this.row.grid.style.cellPadding.top;
          }
          if (typeof this.row.grid.style.cellPadding.bottom !== "undefined" && this.row.grid.style.cellPadding.hasBottomPad) {
            height += this.row.grid.style.cellPadding.bottom;
          }
        } else {
          if (typeof this.style.cellPadding.top !== "undefined" && this.style.cellPadding.hasTopPad) {
            height += this.style.cellPadding.top;
          }
          if (typeof this.style.cellPadding.bottom !== "undefined" && this.style.cellPadding.hasBottomPad) {
            height += this.style.cellPadding.bottom;
          }
        }
      }
      height += this.row.grid.style.cellSpacing;
      return height;
    };
    PdfGridCell2.prototype.calculateWidth = function() {
      var cellIndex = this.row.cells.indexOf(this);
      var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);
      var columnSpan = this.columnSpan;
      var width = 0;
      if (columnSpan === 1) {
        for (var i = 0; i < columnSpan; i++) {
          width += this.row.grid.columns.getColumn(cellIndex + i).width;
        }
      } else if (columnSpan > 1) {
        for (var i = 0; i < columnSpan; i++) {
          width += this.row.grid.columns.getColumn(cellIndex + i).width;
          if (i + 1 < columnSpan) {
            this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;
          }
        }
      }
      if (this.parent != null && this.parent.row.width > 0) {
        if (this.row.grid.isChildGrid && this.parent != null && this.row.width > this.parent.row.width) {
          width = 0;
          for (var j = 0; j < this.parent.columnSpan; j++) {
            width += this.parent.row.grid.columns.getColumn(j).width;
          }
          width = width / this.row.cells.count;
        }
      }
      return width;
    };
    return PdfGridCell2;
  }()
);
var PdfGridCellCollection = (
  /** @class */
  function() {
    function PdfGridCellCollection2(row2) {
      this.cells = [];
      this.gridRow = row2;
    }
    PdfGridCellCollection2.prototype.getCell = function(index) {
      if (index < 0 || index >= this.count) {
        throw new Error("IndexOutOfRangeException");
      }
      return this.cells[index];
    };
    Object.defineProperty(PdfGridCellCollection2.prototype, "count", {
      /**
       * Gets the cells `count`.[Read-Only].
       * @private
       */
      get: function() {
        return this.cells.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridCellCollection2.prototype.add = function(cell) {
      if (typeof cell === "undefined") {
        var tempcell = new PdfGridCell();
        this.add(tempcell);
        return cell;
      } else {
        cell.row = this.gridRow;
        this.cells.push(cell);
      }
    };
    PdfGridCellCollection2.prototype.indexOf = function(cell) {
      return this.cells.indexOf(cell);
    };
    return PdfGridCellCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-column.js
var PdfGridColumn = (
  /** @class */
  function() {
    function PdfGridColumn2(grid) {
      this.columnWidth = 0;
      this.grid = grid;
    }
    Object.defineProperty(PdfGridColumn2.prototype, "width", {
      /**
       * Gets or sets the `width` of the 'PdfGridColumn'.
       * @private
       */
      get: function() {
        return this.columnWidth;
      },
      set: function(value) {
        this.isCustomWidth = true;
        this.columnWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridColumn2.prototype, "format", {
      /**
       * Gets or sets the information about the text `formatting`.
       * @private
       */
      get: function() {
        if (this.stringFormat == null) {
          this.stringFormat = new PdfStringFormat();
        }
        return this.stringFormat;
      },
      set: function(value) {
        this.stringFormat = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridColumn2;
  }()
);
var PdfGridColumnCollection = (
  /** @class */
  function() {
    function PdfGridColumnCollection2(grid) {
      this.internalColumns = [];
      this.columnWidth = 0;
      this.grid = grid;
      this.internalColumns = [];
    }
    PdfGridColumnCollection2.prototype.add = function(count2) {
      for (var i = 0; i < count2; i++) {
        this.internalColumns.push(new PdfGridColumn(this.grid));
        for (var index = 0; index < this.grid.rows.count; index++) {
          var row2 = this.grid.rows.getRow(index);
          var cell = new PdfGridCell();
          cell.value = "";
          row2.cells.add(cell);
        }
      }
    };
    Object.defineProperty(PdfGridColumnCollection2.prototype, "count", {
      /**
       * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].
       * @private
       */
      get: function() {
        return this.internalColumns.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridColumnCollection2.prototype, "width", {
      /**
       * Gets the `widths`.
       * @private
       */
      get: function() {
        if (this.columnWidth === 0) {
          this.columnWidth = this.measureColumnsWidth();
        }
        if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {
          this.columnWidth = this.grid.initialWidth;
          this.grid.isPageWidth = true;
        }
        return this.columnWidth;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridColumnCollection2.prototype, "columns", {
      /**
       * Gets the `array of PdfGridColumn`.[Read-Only]
       * @private
       */
      get: function() {
        return this.internalColumns;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridColumnCollection2.prototype.getColumn = function(index) {
      if (index >= 0 && index <= this.columns.length) {
        return this.columns[index];
      } else {
        throw Error("can not get the column from the index: " + index);
      }
    };
    PdfGridColumnCollection2.prototype.measureColumnsWidth = function() {
      var totalWidth = 0;
      this.grid.measureColumnsWidth();
      for (var i = 0, count2 = this.internalColumns.length; i < count2; i++) {
        totalWidth += this.internalColumns[i].width;
      }
      return totalWidth;
    };
    PdfGridColumnCollection2.prototype.getDefaultWidths = function(totalWidth) {
      var widths = [];
      var summ = 0;
      var subFactor = this.count;
      for (var i = 0; i < this.count; i++) {
        if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {
          this.internalColumns[i].width = 0;
        } else {
          widths[i] = this.internalColumns[i].width;
          if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {
            totalWidth -= this.internalColumns[i].width;
            subFactor--;
          } else {
            widths[i] = 0;
          }
        }
      }
      for (var i = 0; i < this.count; i++) {
        var width = totalWidth / subFactor;
        if (widths[i] <= 0) {
          widths[i] = width;
        }
      }
      return widths;
    };
    return PdfGridColumnCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-row.js
var PdfGridRow = (
  /** @class */
  function() {
    function PdfGridRow2(grid) {
      this.gridRowOverflowIndex = 0;
      this.rowHeight = 0;
      this.rowWidth = 0;
      this.isrowFinish = false;
      this.isRowSpanRowHeightSet = false;
      this.noOfPageCount = 0;
      this.isRowHeightSet = false;
      this.isPageBreakRowSpanApplied = false;
      this.isRowMergeComplete = true;
      this.repeatFlag = false;
      this.rowFontSplit = false;
      this.isHeaderRow = false;
      this.pdfGrid = grid;
    }
    Object.defineProperty(PdfGridRow2.prototype, "rowSpanExists", {
      //Properties
      /**
       * Gets or sets a value indicating [`row span exists`].
       * @private
       */
      get: function() {
        return this.bRowSpanExists;
      },
      set: function(value) {
        this.bRowSpanExists = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "cells", {
      /**
       * Gets the `cells` from the selected row.[Read-Only].
       * @private
       */
      get: function() {
        if (this.gridCells == null) {
          this.gridCells = new PdfGridCellCollection(this);
        }
        return this.gridCells;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "grid", {
      /**
       * Gets or sets the parent `grid`.
       * @private
       */
      get: function() {
        return this.pdfGrid;
      },
      set: function(value) {
        this.pdfGrid = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "style", {
      /**
       * Gets or sets the row `style`.
       * @private
       */
      get: function() {
        if (typeof this.rowStyle === "undefined") {
          this.rowStyle = new PdfGridRowStyle();
          this.rowStyle.setParent(this);
        }
        return this.rowStyle;
      },
      set: function(value) {
        this.rowStyle = value;
        for (var i = 0; i < this.cells.count; i++) {
          this.cells.getCell(i).style.borders = value.border;
          if (typeof value.font !== "undefined") {
            this.cells.getCell(i).style.font = value.font;
          }
          if (typeof value.backgroundBrush !== "undefined") {
            this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;
          }
          if (typeof value.backgroundImage !== "undefined") {
            this.cells.getCell(i).style.backgroundImage = value.backgroundImage;
          }
          if (typeof value.textBrush !== "undefined") {
            this.cells.getCell(i).style.textBrush = value.textBrush;
          }
          if (typeof value.textPen !== "undefined") {
            this.cells.getCell(i).style.textPen = value.textPen;
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowBreakHeight", {
      /**
       * `Height` of the row yet to be drawn after split.
       * @private
       */
      get: function() {
        if (typeof this.gridRowBreakHeight === "undefined") {
          this.gridRowBreakHeight = 0;
        }
        return this.gridRowBreakHeight;
      },
      set: function(value) {
        this.gridRowBreakHeight = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowOverflowIndex", {
      /**
       * `over flow index` of the row.
       * @private
       */
      get: function() {
        return this.gridRowOverflowIndex;
      },
      set: function(value) {
        this.gridRowOverflowIndex = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "height", {
      /**
       * Gets or sets the `height` of the row.
       * @private
       */
      get: function() {
        if (!this.isRowHeightSet) {
          this.rowHeight = this.measureHeight();
        }
        return this.rowHeight;
      },
      set: function(value) {
        this.rowHeight = value;
        this.isRowHeightSet = true;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "width", {
      /**
       * Gets or sets the `width` of the row.
       * @private
       */
      get: function() {
        if (this.rowWidth === 0 || typeof this.rowWidth === "undefined") {
          this.rowWidth = this.measureWidth();
        }
        return this.rowWidth;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "NestedGridLayoutResult", {
      /**
       * Gets or sets the row `Nested grid Layout Result`.
       * @private
       */
      get: function() {
        return this.gridResult;
      },
      set: function(value) {
        this.gridResult = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "columnSpanExists", {
      /**
       * Gets or sets a value indicating [`column span exists`].
       * @private
       */
      get: function() {
        return this.bColumnSpanExists;
      },
      set: function(value) {
        this.bColumnSpanExists = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowMergeComplete", {
      /**
       * Check whether the Row `has row span or row merge continue`.
       * @private
       */
      get: function() {
        return this.isRowMergeComplete;
      },
      set: function(value) {
        this.isRowMergeComplete = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRow2.prototype, "rowIndex", {
      /**
       * Returns `index` of the row.
       * @private
       */
      get: function() {
        return this.grid.rows.rowCollection.indexOf(this);
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRow2.prototype.measureHeight = function() {
      var rowSpanRemainingHeight = 0;
      var rowHeight2;
      var maxHeight = 0;
      if (this.cells.getCell(0).rowSpan > 1) {
        rowHeight2 = 0;
      } else {
        rowHeight2 = this.cells.getCell(0).height;
      }
      for (var i = 0; i < this.cells.count; i++) {
        var cell = this.cells.getCell(i);
        if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {
          rowSpanRemainingHeight = cell.rowSpanRemainingHeight;
        }
        this.rowMergeComplete = false;
        if (cell.rowSpan > 1) {
          var cellIn = i;
          var rowin = this.isHeaderRow ? this.grid.headers.indexOf(this) : this.grid.rows.rowCollection.indexOf(this);
          for (var j = 0; j < cell.rowSpan; j++) {
            if (j + 1 < cell.rowSpan) {
              (this.isHeaderRow ? this.grid.headers.getHeader(rowin + j + 1) : this.grid.rows.getRow(rowin + j + 1)).cells.getCell(cellIn).hasRowSpan = true;
            }
          }
          if (maxHeight < cell.height) {
            maxHeight = cell.height;
          }
          continue;
        }
        rowHeight2 = Math.max(rowHeight2, cell.height);
      }
      if (maxHeight > rowHeight2) {
        rowHeight2 = maxHeight;
      }
      if (rowHeight2 === 0) {
        rowHeight2 = maxHeight;
      } else if (rowSpanRemainingHeight > 0) {
        rowHeight2 += rowSpanRemainingHeight;
      }
      return rowHeight2;
    };
    PdfGridRow2.prototype.measureWidth = function() {
      var rowWid = 0;
      for (var i = 0; i < this.grid.columns.count; i++) {
        var column = this.grid.columns.getColumn(i);
        rowWid += column.width;
      }
      return rowWid;
    };
    return PdfGridRow2;
  }()
);
var PdfGridRowCollection = (
  /** @class */
  function() {
    function PdfGridRowCollection2(grid) {
      this.rows = [];
      this.grid = grid;
    }
    Object.defineProperty(PdfGridRowCollection2.prototype, "count", {
      //Properties
      /**
       * Gets the number of header in the `PdfGrid`.[Read-Only].
       * @private
       */
      get: function() {
        return this.rows.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridRowCollection2.prototype, "rowCollection", {
      //Implementation
      /**
       * Return the row collection of the `grid`.
       * @private
       */
      get: function() {
        return this.rows;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridRowCollection2.prototype.addRow = function(arg) {
      if (typeof arg === "undefined") {
        var temprow = new PdfGridRow(this.grid);
        this.addRow(temprow);
        return temprow;
      } else {
        arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);
        arg.style.setFont(this.grid.style.font);
        arg.style.setTextBrush(this.grid.style.textBrush);
        arg.style.setTextPen(this.grid.style.textPen);
        if (arg.cells.count === 0) {
          for (var i = 0; i < this.grid.columns.count; i++) {
            arg.cells.add(new PdfGridCell());
          }
        }
        this.rows.push(arg);
      }
    };
    PdfGridRowCollection2.prototype.getRow = function(index) {
      return this.rows[index];
    };
    return PdfGridRowCollection2;
  }()
);
var PdfGridHeaderCollection = (
  /** @class */
  function() {
    function PdfGridHeaderCollection2(grid) {
      this.rows = [];
      this.grid = grid;
      this.rows = [];
    }
    PdfGridHeaderCollection2.prototype.getHeader = function(index) {
      return this.rows[index];
    };
    Object.defineProperty(PdfGridHeaderCollection2.prototype, "count", {
      /**
       * Gets the `number of header` in the 'PdfGrid'.[Read-Only]
       * @private
       */
      get: function() {
        return this.rows.length;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridHeaderCollection2.prototype.add = function(arg) {
      if (typeof arg === "number") {
        var row2 = void 0;
        for (var i = 0; i < arg; i++) {
          row2 = new PdfGridRow(this.grid);
          row2.isHeaderRow = true;
          for (var j = 0; j < this.grid.columns.count; j++) {
            row2.cells.add(new PdfGridCell());
          }
          this.rows.push(row2);
        }
        return this.rows;
      } else {
        this.rows.push(arg);
      }
    };
    PdfGridHeaderCollection2.prototype.indexOf = function(row2) {
      return this.rows.indexOf(row2);
    };
    return PdfGridHeaderCollection2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js
var __extends73 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGrid = (
  /** @class */
  function(_super) {
    __extends73(PdfGrid2, _super);
    function PdfGrid2() {
      var _this = _super.call(this) || this;
      _this.gridSize = new SizeF(0, 0);
      _this.isGridSplit = false;
      _this.isRearranged = false;
      _this.pageBounds = new RectangleF();
      _this.listOfNavigatePages = [];
      _this.parentCellIndex = 0;
      _this.tempWidth = 0;
      _this.breakRow = true;
      _this.splitChildRowIndex = -1;
      _this.hasRowSpanSpan = false;
      _this.hasColumnSpan = false;
      _this.isSingleGrid = true;
      return _this;
    }
    Object.defineProperty(PdfGrid2.prototype, "raiseBeginCellDraw", {
      //Properties
      /**
       * Gets a value indicating whether the `start cell layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.beginCellDraw !== "undefined" && typeof this.beginCellDraw !== null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "raiseEndCellDraw", {
      /**
       * Gets a value indicating whether the `end cell layout event` should be raised.
       * @private
       */
      get: function() {
        return typeof this.endCellDraw !== "undefined" && typeof this.endCellDraw !== null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "repeatHeader", {
      /**
       * Gets or sets a value indicating whether to `repeat header`.
       * @private
       */
      get: function() {
        if (this.bRepeatHeader == null || typeof this.bRepeatHeader === "undefined") {
          this.bRepeatHeader = false;
        }
        return this.bRepeatHeader;
      },
      set: function(value) {
        this.bRepeatHeader = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "allowRowBreakAcrossPages", {
      /**
       * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.
       * @private
       */
      get: function() {
        return this.breakRow;
      },
      set: function(value) {
        this.breakRow = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "columns", {
      /**
       * Gets the `column` collection of the PdfGrid.[Read-Only]
       * @private
       */
      get: function() {
        if (this.gridColumns == null || typeof this.gridColumns === "undefined") {
          this.gridColumns = new PdfGridColumnCollection(this);
        }
        return this.gridColumns;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "rows", {
      /**
       * Gets the `row` collection from the PdfGrid.[Read-Only]
       * @private
       */
      get: function() {
        if (this.gridRows == null) {
          this.gridRows = new PdfGridRowCollection(this);
        }
        return this.gridRows;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "headers", {
      /**
       * Gets the `headers` collection from the PdfGrid.[Read-Only]
       * @private
       */
      get: function() {
        if (this.gridHeaders == null || typeof this.gridHeaders === "undefined") {
          this.gridHeaders = new PdfGridHeaderCollection(this);
        }
        return this.gridHeaders;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "initialWidth", {
      /**
       * Indicating `initial width` of the page.
       * @private
       */
      get: function() {
        return this.gridInitialWidth;
      },
      set: function(value) {
        this.gridInitialWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "style", {
      /**
       * Gets or sets the `grid style`.
       * @private
       */
      get: function() {
        if (this.gridStyle == null) {
          this.gridStyle = new PdfGridStyle();
        }
        return this.gridStyle;
      },
      set: function(value) {
        if (this.gridStyle == null) {
          this.gridStyle = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "isPageWidth", {
      /**
       * Gets a value indicating whether the grid column width is considered to be `page width`.
       * @private
       */
      get: function() {
        return this.ispageWidth;
      },
      set: function(value) {
        this.ispageWidth = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "isChildGrid", {
      /**
       * Gets or set if grid `is nested grid`.
       * @private
       */
      get: function() {
        return this.ischildGrid;
      },
      set: function(value) {
        this.ischildGrid = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "size", {
      /**
       * Gets or set if grid ' is split or not'
       * @public
       */
      // public get isGridSplit() : boolean {
      //     return this.isgridSplit;
      // }
      // public set isGridSplit(value : boolean) {
      //     this.isgridSplit = value;
      // }public get isGridSplit() : boolean {
      //     return this.isgridSplit;
      // }
      // public set isGridSplit(value : boolean) {
      //     this.isgridSplit = value;
      // }
      /**
       * Gets the `size`.
       * @private
       */
      get: function() {
        if ((this.gridSize.width === 0 || typeof this.gridSize.width === "undefined") && this.gridSize.height === 0) {
          this.gridSize = this.measure();
        }
        return this.gridSize;
      },
      set: function(value) {
        this.gridSize = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "ParentCell", {
      get: function() {
        return this.parentCell;
      },
      set: function(value) {
        this.parentCell = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGrid2.prototype, "LayoutFormat", {
      get: function() {
        return this.layoutFormat;
      },
      enumerable: true,
      configurable: true
    });
    PdfGrid2.prototype.draw = function(arg1, arg2, arg3, arg4) {
      if (arg2 instanceof PointF && typeof arg2.width === "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2.x, arg2.y);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        return this.drawHelper(arg1, arg2, arg3, null);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2, null);
      } else if (arg2 instanceof PointF && typeof arg2.width === "undefined" && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg1, arg2.x, arg2.y, arg3);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {
        var width = arg1.graphics.clientSize.width - arg2;
        var layoutRectangle = new RectangleF(arg2, arg3, width, 0);
        return this.drawHelper(arg1, layoutRectangle, arg4);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "boolean") {
        return this.drawHelper(arg1, arg2, null);
      } else {
        return this.drawHelper(arg1, arg2, arg3);
      }
    };
    PdfGrid2.prototype.measure = function() {
      var height = 0;
      var width = this.columns.width;
      for (var i = 0; i < this.headers.count; i++) {
        var row2 = this.headers.getHeader(i);
        height += row2.height;
      }
      for (var i = 0; i < this.rows.count; i++) {
        var row2 = this.rows.getRow(i);
        height += row2.height;
      }
      return new SizeF(width, height);
    };
    PdfGrid2.prototype.onBeginCellDraw = function(args) {
      if (this.raiseBeginCellDraw) {
        this.beginCellDraw(this, args);
      }
    };
    PdfGrid2.prototype.onEndCellDraw = function(args) {
      if (this.raiseEndCellDraw) {
        this.endCellDraw(this, args);
      }
    };
    PdfGrid2.prototype.layout = function(param) {
      var width = param.bounds.width;
      var height = param.bounds.height;
      var hasChanged = false;
      if (typeof param.bounds.width === "undefined" || param.bounds.width === 0) {
        width = param.page.getClientSize().width - param.bounds.x;
        hasChanged = true;
      }
      if (typeof param.bounds.height === "undefined" || param.bounds.height === 0) {
        height = param.page.getClientSize().height - param.bounds.y;
        hasChanged = true;
      }
      if (hasChanged) {
        param.bounds = new RectangleF(param.bounds.x, param.bounds.y, width, height);
      }
      if (this.rows.count !== 0) {
        var currentRow = this.rows.getRow(0).cells.getCell(0).style;
        if (currentRow.borders != null && (currentRow.borders.left != null && currentRow.borders.left.width !== 1 || currentRow.borders.top != null && currentRow.borders.top.width !== 1)) {
          var x = currentRow.borders.left.width / 2;
          var y = currentRow.borders.top.width / 2;
          if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {
            var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);
            param.bounds = newBound;
          }
        }
      }
      this.setSpan();
      this.checkSpan();
      this.layoutFormat = param.format;
      this.gridLocation = param.bounds;
      var layouter = new PdfGridLayouter(this);
      var result = layouter.Layouter(param);
      return result;
    };
    PdfGrid2.prototype.setSpan = function() {
      var colSpan = 1;
      var rowSpan = 1;
      var currentCellIndex = 0;
      var currentRowIndex = 0;
      var maxSpan = 0;
      var rowCount = this.headers.count;
      for (var i = 0; i < rowCount; i++) {
        var row2 = this.headers.getHeader(i);
        maxSpan = 0;
        var colCount = row2.cells.count;
        for (var j = 0; j < colCount; j++) {
          var cell = row2.cells.getCell(j);
          maxSpan = Math.max(maxSpan, cell.rowSpan);
          if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
            if (cell.columnSpan + j > row2.cells.count) {
              throw new Error("Invalid span specified at row " + j.toString() + " column " + i.toString());
            }
            if (cell.rowSpan + i > this.headers.count) {
              throw new Error("Invalid span specified at Header " + j.toString() + " column " + i.toString());
            }
            if (cell.columnSpan > 1 && cell.rowSpan > 1) {
              colSpan = cell.columnSpan;
              rowSpan = cell.rowSpan;
              currentCellIndex = j;
              currentRowIndex = i;
              cell.isCellMergeStart = true;
              cell.isRowMergeStart = true;
              while (colSpan > 1) {
                currentCellIndex++;
                row2.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                row2.cells.getCell(currentCellIndex).isRowMergeContinue = true;
                row2.cells.getCell(currentCellIndex).rowSpan = rowSpan;
                colSpan--;
              }
              currentCellIndex = j;
              colSpan = cell.columnSpan;
              while (rowSpan > 1) {
                currentRowIndex++;
                this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                rowSpan--;
                while (colSpan > 1) {
                  currentCellIndex++;
                  this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;
                  this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                  colSpan--;
                }
                colSpan = cell.columnSpan;
                currentCellIndex = j;
              }
            } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {
              colSpan = cell.columnSpan;
              currentCellIndex = j;
              cell.isCellMergeStart = true;
              while (colSpan > 1) {
                currentCellIndex++;
                row2.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                colSpan--;
              }
            } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {
              rowSpan = cell.rowSpan;
              currentRowIndex = i;
              while (rowSpan > 1) {
                currentRowIndex++;
                this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                rowSpan--;
              }
            }
          }
        }
        row2.maximumRowSpan = maxSpan;
      }
    };
    PdfGrid2.prototype.checkSpan = function() {
      var cellcolSpan;
      var cellrowSpan = 1;
      var cellmaxSpan = 0;
      var currentCellIndex;
      var currentRowIndex = 0;
      cellcolSpan = cellrowSpan = 1;
      currentCellIndex = currentRowIndex = 0;
      if (this.hasRowSpanSpan || this.hasColumnSpan) {
        var rowCount = this.rows.count;
        for (var i = 0; i < rowCount; i++) {
          var row2 = this.rows.getRow(i);
          cellmaxSpan = 0;
          var colCount = row2.cells.count;
          for (var j = 0; j < colCount; j++) {
            var cell = row2.cells.getCell(j);
            cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);
            if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
              if (cell.columnSpan + j > row2.cells.count) {
                throw new Error("Invalid span specified at row  " + j.toString() + " column " + i.toString());
              }
              if (cell.rowSpan + i > this.rows.count) {
                throw new Error("Invalid span specified at row  " + j.toString() + " column " + i.toString());
              }
              if (cell.columnSpan > 1 && cell.rowSpan > 1) {
                cellcolSpan = cell.columnSpan;
                cellrowSpan = cell.rowSpan;
                currentCellIndex = j;
                currentRowIndex = i;
                cell.isCellMergeStart = true;
                cell.isRowMergeStart = true;
                while (cellcolSpan > 1) {
                  currentCellIndex++;
                  row2.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                  row2.cells.getCell(currentCellIndex).isRowMergeContinue = true;
                  cellcolSpan--;
                }
                currentCellIndex = j;
                cellcolSpan = cell.columnSpan;
                while (cellrowSpan > 1) {
                  currentRowIndex++;
                  this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                  cellrowSpan--;
                  while (cellcolSpan > 1) {
                    currentCellIndex++;
                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;
                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;
                    cellcolSpan--;
                  }
                  cellcolSpan = cell.columnSpan;
                  currentCellIndex = j;
                }
              } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {
                cellcolSpan = cell.columnSpan;
                currentCellIndex = j;
                cell.isCellMergeStart = true;
                while (cellcolSpan > 1) {
                  currentCellIndex++;
                  row2.cells.getCell(currentCellIndex).isCellMergeContinue = true;
                  cellcolSpan--;
                }
              } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {
                cellrowSpan = cell.rowSpan;
                currentRowIndex = i;
                while (cellrowSpan > 1) {
                  currentRowIndex++;
                  this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;
                  cellrowSpan--;
                }
              }
            }
          }
          row2.maximumRowSpan = cellmaxSpan;
        }
      }
    };
    PdfGrid2.prototype.measureColumnsWidth = function(bounds) {
      if (typeof bounds !== "undefined") {
        this.isPageWidth = false;
        var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);
        for (var i = 0, count2 = this.columns.count; i < count2; i++) {
          this.columns.getColumn(i).columnWidth = widths[i];
          this.tempWidth = widths[i];
        }
        if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {
          var padding = 0;
          var columnWidth = 0;
          var columnCount = this.columns.count;
          var childGridColumnWidth = 0;
          if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== "undefined") {
            if (typeof this.ParentCell.style.cellPadding.left != "undefined" && this.ParentCell.style.cellPadding.hasLeftPad) {
              padding += this.ParentCell.style.cellPadding.left;
            }
            if (typeof this.ParentCell.style.cellPadding.right != "undefined" && this.ParentCell.style.cellPadding.hasRightPad) {
              padding += this.ParentCell.style.cellPadding.right;
            }
          }
          for (var i = 0; i < this.ParentCell.columnSpan; i++) {
            columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;
          }
          for (var j = 0; j < this.columns.count; j++) {
            if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {
              columnWidth -= this.gridColumns.getColumn(j).width;
              columnCount--;
            }
          }
          if (this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != "undefined") {
            if (typeof this.ParentCell.row.grid.style.cellPadding.top != "undefined" && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {
              padding += this.ParentCell.row.grid.style.cellPadding.top;
            }
            if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != "undefined" && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {
              padding += this.ParentCell.row.grid.style.cellPadding.bottom;
            }
          }
          if (this.ParentCell.row.grid.style.cellSpacing != 0) {
            columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;
          }
          if (columnWidth > padding) {
            childGridColumnWidth = (columnWidth - padding) / columnCount;
            this.tempWidth = childGridColumnWidth;
            if (this.ParentCell != null) {
              for (var j = 0; j < this.columns.count; j++) {
                if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColumnWidth;
              }
            }
          }
        }
      } else {
        var widths = [this.columns.count];
        for (var n = 0; n < this.columns.count; n++) {
          widths[n] = 0;
        }
        var cellWidth = 0;
        var cellWidths = 0;
        if (typeof this.isChildGrid === "undefined" && typeof this.gridLocation !== "undefined" || this.isChildGrid === null && typeof this.gridLocation !== "undefined") {
          this.initialWidth = this.gridLocation.width;
        }
        if (this.headers.count > 0) {
          var colCount_1 = this.headers.getHeader(0).cells.count;
          var rowCount = this.headers.count;
          for (var i = 0; i < colCount_1; i++) {
            cellWidth = 0;
            for (var j = 0; j < rowCount; j++) {
              var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);
              cellWidth = Math.max(cellWidth, rowWidth);
            }
            widths[i] = cellWidth;
          }
        }
        cellWidth = 0;
        for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {
          for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {
            if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || this.rows.getRow(j).cells.getCell(i).value != null) {
              if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {
                var value = this.rows.getRow(j).grid.style.cellPadding.right + this.rows.getRow(j).grid.style.cellPadding.left + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;
              }
              var rowWidth = 0;
              rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;
              cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));
              cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);
            }
          }
          if (this.rows.count != 0) widths[i] = cellWidth;
          cellWidth = 0;
        }
        for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {
          for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {
            if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {
              var total = widths[j];
              for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {
                total += widths[j + k];
              }
            }
          }
        }
        for (var i = 0, count2 = this.columns.count; i < count2; i++) {
          if (this.columns.getColumn(i).width <= 0) this.columns.getColumn(i).columnWidth = widths[i];
          else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth) this.columns.getColumn(i).columnWidth = widths[i];
        }
        var padding = 0;
        var colWidth = 0;
        var colCount = this.columns.count;
        var childGridColWidth = 0;
        colWidth = this.tempWidth;
        for (var j = 0; j < this.columns.count; j++) {
          if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {
            colWidth -= this.gridColumns.getColumn(j).width;
            colCount--;
          }
        }
        if (colWidth > 0) {
          if (this.ParentCell.row.grid.style.cellSpacing != 0) {
            colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;
          }
        }
        if (colWidth > padding) {
          childGridColWidth = colWidth / colCount;
          if (this.ParentCell != null) {
            for (var j = 0; j < this.columns.count; j++) {
              if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColWidth;
            }
          }
        }
      }
    };
    return PdfGrid2;
  }(PdfLayoutElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js
var __extends74 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfGridLayouter = (
  /** @class */
  function(_super) {
    __extends74(PdfGridLayouter2, _super);
    function PdfGridLayouter2(baseFormat) {
      var _this = _super.call(this, baseFormat) || this;
      _this.gridInitialWidth = 0;
      _this.gridSize = new SizeF(0, 0);
      _this.parentCellIndex = 0;
      _this.tempWidth = 0;
      _this.childheight = 0;
      _this.isChildGrid = false;
      _this.hasRowSpanSpan = false;
      _this.isRearranged = false;
      _this.pageBounds = new RectangleF();
      _this.listOfNavigatePages = [];
      _this.flag = true;
      _this.columnRanges = [];
      _this.currentLocation = new PointF(0, 0);
      _this.breakRow = true;
      _this.slr = null;
      _this.remainderText = null;
      _this.isPaginate = false;
      _this.isOverloadWithPosition = false;
      return _this;
    }
    Object.defineProperty(PdfGridLayouter2.prototype, "Grid", {
      //Properties
      get: function() {
        return this.elements;
      },
      enumerable: true,
      configurable: true
    });
    PdfGridLayouter2.prototype.getFormat = function(format) {
      var f = format;
      return f;
    };
    PdfGridLayouter2.prototype.layoutInternal = function(param) {
      var format = this.getFormat(param.format);
      this.gridLayoutFormat = this.getFormat(param.format);
      this.currentPage = param.page;
      if (this.currentPage !== null) {
        var pageHeight = this.currentPage.getClientSize().height;
        var pageWidth = this.currentPage.getClientSize().width;
        this.currentPageBounds = this.currentPage.getClientSize();
      } else {
        throw Error("Can not set page as null");
      }
      this.currentGraphics = this.currentPage.graphics;
      var index = 0;
      index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
      this.listOfNavigatePages.push(index);
      if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {
        this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));
      } else {
        this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);
      }
      if (this.Grid.rows.count !== 0) {
        this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;
      } else if (this.Grid.headers.count !== 0) {
        this.currentBounds.width = param.bounds.width;
      } else {
        throw Error("Please add row or header into grid");
      }
      this.startLocation = new PointF(param.bounds.x, param.bounds.y);
      if (param.bounds.height > 0 && !this.Grid.isChildGrid) {
        this.currentBounds.height = param.bounds.height;
      }
      if (!this.Grid.isChildGrid) {
        this.hType = this.Grid.style.horizontalOverflowType;
      }
      if (!this.Grid.style.allowHorizontalOverflow) {
        this.columnRanges = [];
        if (typeof this.Grid.isChildGrid !== "undefined" && typeof this.Grid.isChildGrid) {
          this.Grid.measureColumnsWidth(this.currentBounds);
        } else {
          this.Grid.measureColumnsWidth(new RectangleF(this.currentBounds.x, this.currentBounds.y, this.currentBounds.x + this.currentBounds.width, this.currentBounds.height));
        }
        this.columnRanges.push([0, this.Grid.columns.count - 1]);
      } else {
        this.Grid.measureColumnsWidth();
        this.determineColumnDrawRanges();
      }
      if (this.Grid.hasRowSpanSpan) {
        for (var i = 0; i < this.Grid.rows.count; i++) {
          if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {
            this.Grid.rows.getRow(i).isRowHeightSet = true;
          }
        }
      }
      var result = this.layoutOnPage(param);
      return result;
    };
    PdfGridLayouter2.prototype.determineColumnDrawRanges = function() {
      var startColumn = 0;
      var endColumn = 0;
      var cellWidths = 0;
      var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;
      for (var i = 0; i < this.Grid.columns.count; i++) {
        cellWidths += this.Grid.columns.getColumn(i).width;
        if (cellWidths >= availableWidth) {
          var subWidths = 0;
          for (var j = startColumn; j <= i; j++) {
            subWidths += this.Grid.columns.getColumn(j).width;
            if (subWidths > availableWidth) {
              break;
            }
            endColumn = j;
          }
          this.columnRanges.push([startColumn, endColumn]);
          startColumn = endColumn + 1;
          endColumn = startColumn;
          cellWidths = endColumn <= i ? this.Grid.columns.getColumn(i).width : 0;
        }
      }
      this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);
    };
    PdfGridLayouter2.prototype.layoutOnPage = function(param) {
      this.pageBounds.x = param.bounds.x;
      this.pageBounds.y = param.bounds.y;
      this.pageBounds.height = param.bounds.height;
      var format = this.getFormat(param.format);
      var endArgs = null;
      var result = null;
      var layoutedPages = new TemporaryDictionary();
      var startPage = param.page;
      var isParentCell = false;
      var cellBounds = [];
      for (var index = 0; index < this.columnRanges.length; index++) {
        var range = this.columnRanges[index];
        this.cellStartIndex = range[0];
        this.cellEndIndex = range[1];
        var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);
        this.currentBounds = returnObject.currentBounds;
        this.currentRowIndex = returnObject.currentRowIndex;
        var drawHeader = void 0;
        for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {
          var row2 = this.Grid.headers.getHeader(i_1);
          var headerHeight = this.currentBounds.y;
          this.isHeader = true;
          if (startPage != this.currentPage) {
            for (var k = this.cellStartIndex; k <= this.cellEndIndex; k++) {
              if (row2.cells.getCell(k).isCellMergeContinue) {
                row2.cells.getCell(k).isCellMergeContinue = false;
                row2.cells.getCell(k).value = "";
              }
            }
          }
          var headerResult = this.drawRow(row2);
          if (headerHeight === this.currentBounds.y) {
            drawHeader = true;
            if (PdfGridLayouter2.repeatRowIndex === -1) {
              PdfGridLayouter2.repeatRowIndex = i_1;
            }
          } else {
            drawHeader = false;
          }
          if (!headerResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && drawHeader) {
            this.startLocation.x = this.currentBounds.x;
            this.currentPage = this.getNextPageformat(format);
            this.startLocation.y = this.currentBounds.y;
            if (typeof format.paginateBounds !== "undefined" && format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0) this.currentBounds.x += this.startLocation.x;
            this.drawRow(row2);
          }
          this.isHeader = false;
        }
        var i = 0;
        var length_1 = this.Grid.rows.count;
        var repeatRow = void 0;
        var startingHeight = 0;
        var flag = true;
        cellBounds = [];
        for (var j = 0; j < this.Grid.rows.count; j++) {
          var row2 = this.Grid.rows.getRow(j);
          i++;
          this.currentRowIndex = i - 1;
          var originalHeight = this.currentBounds.y;
          startPage = this.currentPage;
          PdfGridLayouter2.repeatRowIndex = -1;
          if (flag && row2.grid.isChildGrid) {
            startingHeight = originalHeight;
            flag = false;
          }
          var rowResult = null;
          if (this.Grid.splitChildRowIndex == -1) {
            rowResult = this.drawRow(row2);
            row2.isrowFinish = true;
          } else {
            if (row2.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row2.rowIndex) {
              rowResult = this.drawRow(row2);
              row2.isrowFinish = true;
            } else if (row2.isrowFinish) {
              continue;
            } else {
              break;
            }
          }
          cellBounds.push(rowResult.bounds.width);
          if (originalHeight === this.currentBounds.y) {
            repeatRow = true;
            PdfGridLayouter2.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row2);
          } else {
            repeatRow = false;
            PdfGridLayouter2.repeatRowIndex = -1;
          }
          while (!rowResult.isFinish && startPage != null) {
            var tempResult = this.getLayoutResult();
            endArgs = this.raisePageLayouted(tempResult);
            if (endArgs.cancel || repeatRow) break;
            else if (this.Grid.allowRowBreakAcrossPages) {
              this.currentPage = this.getNextPageformat(format);
              originalHeight = this.currentBounds.y;
              var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);
              if (format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0 && this.startLocation.x === location_1.x && this.startLocation.y === location_1.y) {
                this.currentBounds.x += this.startLocation.x;
                this.currentBounds.y += this.startLocation.y;
              }
              if (this.isPaginate) {
                this.startLocation.y = this.currentBounds.y;
                this.isPaginate = false;
              }
              if (this.Grid.isChildGrid && row2.grid.ParentCell != null) {
                if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {
                  if (row2.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {
                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;
                  }
                }
              }
              if (row2.grid.ParentCell != null) {
                row2.grid.ParentCell.row.isRowBreaksNextPage = true;
                row2.grid.ParentCell.row.rowBreakHeightValue = row2.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
                for (var i_2 = row2.rowIndex + 1; i_2 < row2.grid.rows.count; i_2++) {
                  row2.grid.ParentCell.row.rowBreakHeightValue += row2.grid.rows.getRow(i_2).height;
                }
              }
              if (row2.grid.isChildGrid) {
                row2.isrowFinish = false;
                row2.grid.splitChildRowIndex = row2.rowIndex;
                row2.grid.ParentCell.row.grid.splitChildRowIndex = row2.grid.ParentCell.row.rowIndex;
                if (row2.grid.ParentCell.row.grid.isGridSplit) {
                  row2.grid.ParentCell.row.noOfPageCount += 1;
                  row2.grid.ParentCell.row.grid.isGridSplit = false;
                }
                break;
              }
              if (row2.noOfPageCount < 1) {
                if (row2.grid.splitChildRowIndex != -1) {
                  row2.grid.isGridSplit = true;
                }
                if (row2.style.border != null && (row2.style.border.left != null && row2.style.border.left.width !== 1 || row2.style.border.top != null && row2.style.border.top.width !== 1)) {
                  var x = row2.style.border.left.width / 2;
                  var y = row2.style.border.top.width / 2;
                  if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {
                    var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);
                    this.currentBounds = newBound;
                  }
                }
                if (this.Grid.repeatHeader) {
                  for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {
                    var headerRepeat = this.Grid.headers.getHeader(j_1);
                    this.drawRow(headerRepeat);
                  }
                }
                rowResult = this.drawRow(row2);
                if (row2.noOfPageCount >= 1) {
                  var temp = row2.rowBreakHeightValue;
                  for (var j_2 = 0; j_2 < row2.noOfPageCount; j_2++) {
                    var tempResult1 = this.getLayoutResult();
                    endArgs = this.raisePageLayouted(tempResult1);
                    this.currentPage = this.getNextPageformat(format);
                    originalHeight = this.currentBounds.y;
                    if (row2.grid.splitChildRowIndex != -1) {
                      row2.grid.isGridSplit = true;
                    }
                    this.currentBounds.y = 0.5;
                    if (this.Grid.repeatHeader) {
                      for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {
                        var header = this.Grid.headers.getHeader(i_3);
                        this.drawRow(header);
                      }
                    }
                    this.drawRow(row2);
                  }
                }
                row2.grid.splitChildRowIndex = -1;
                row2.grid.isGridSplit = false;
                rowResult.isFinish = this.checkIsFisished(row2);
                for (var i_4 = 0; i_4 < row2.cells.count; i_4++) {
                  if (row2.cells.getCell(i_4).value instanceof PdfGrid) {
                    row2.cells.getCell(i_4).value.splitChildRowIndex = -1;
                  }
                }
              }
            }
          }
          if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {
            this.startLocation.x = this.currentBounds.x;
            var isAddNextPage = false;
            this.currentPage = this.getNextPageformat(format);
            if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex).returnValue) {
              break;
            }
            if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.height > 0 && !this.Grid.isChildGrid) {
              this.currentBounds.height = param.bounds.height;
            }
            if (typeof param.format !== "undefined" && param.format != null && typeof param.format.usePaginateBounds !== "undefined" && !param.format.usePaginateBounds && !(param.format.paginateBounds.x === 0 && param.format.paginateBounds.y === 0 && param.format.paginateBounds.width === 0 && param.format.paginateBounds.height === 0) && param.format.paginateBounds.y === 0) {
              this.currentBounds.y = PdfBorders.default.top.width / 2;
            } else {
              this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;
              if (format != null && (format.paginateBounds.x !== 0 || format.paginateBounds.y !== 0 || format.paginateBounds.height !== 0 || format.paginateBounds.width !== 0)) {
                this.currentBounds.x = format.paginateBounds.x;
                this.currentBounds.width = format.paginateBounds.width;
                this.currentBounds.height = format.paginateBounds.height;
              }
            }
            if (typeof param.format !== "undefined" && param.format !== null && typeof param.format.usePaginateBounds !== "undefined" && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.y > 0 && !this.Grid.isChildGrid) {
              this.currentBounds.y = param.bounds.y;
            }
            this.startLocation.y = this.currentBounds.y;
            if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {
              this.currentBounds.x += this.startLocation.x;
            }
            if (this.currentBounds.x === PdfBorders.default.left.width / 2) {
              this.currentBounds.y += this.startLocation.x;
            }
            if (this.Grid.repeatHeader) {
              for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {
                var header = this.Grid.headers.getHeader(i_5);
                this.drawRow(header);
              }
            }
            this.drawRow(row2);
            if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {
              layoutedPages.add(this.currentPage, range);
            }
          }
          if (row2.NestedGridLayoutResult != null) {
            this.currentPage = row2.NestedGridLayoutResult.page;
            this.currentGraphics = this.currentPage.graphics;
            this.startLocation = new PointF(row2.NestedGridLayoutResult.bounds.x, row2.NestedGridLayoutResult.bounds.y);
            var recalHeight = this.ReCalculateHeight(row2, row2.NestedGridLayoutResult.bounds.height);
            this.currentBounds.y = recalHeight;
            if (startPage != this.currentPage) {
              var section = this.currentPage.section;
              var startIndex = section.indexOf(startPage) + 1;
              var endIndex = section.indexOf(this.currentPage);
              for (var page = startIndex; page < endIndex + 1; page++) {
                var pageGraphics = section.getPages()[page].graphics;
                var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);
                var height = page == endIndex ? row2.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;
                if (height <= pageGraphics.clientSize.height) height += param.bounds.y;
                location_2.y = format == null ? 0.5 : format.paginateBounds.y;
                for (var c = 0; c < row2.cells.count; c++) {
                  var cell = row2.cells.getCell(c);
                  var cellWidth = 0;
                  var totalwidth = 0;
                  if (cell.value instanceof PdfGrid) {
                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {
                      totalwidth += cell.value.columns.getColumn(i_6).columnWidth;
                    }
                  } else {
                    totalwidth = cell.width;
                  }
                  if (cell.columnSpan > 1) {
                    for (; c < cell.columnSpan; c++) cellWidth += row2.grid.columns.getColumn(c).width;
                  } else cellWidth = Math.max(totalwidth, row2.grid.columns.getColumn(c).width);
                  cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));
                  cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(this.Grid.rows.getRow(this.Grid.rows.count - 1).width, height)));
                  location_2.x += cellWidth;
                  c += cell.columnSpan - 1;
                }
              }
              startPage = this.currentPage;
            }
          }
        }
        var isPdfGrid = false;
        var maximumCellBoundsWidth = 0;
        if (cellBounds.length > 0) {
          maximumCellBoundsWidth = cellBounds[0];
        }
        var largeNavigatePage = [[1, 2]];
        for (var c = 0; c < this.Grid.rows.count; c++) {
          if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {
            var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;
            this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;
            isPdfGrid = true;
          }
        }
        if (!isPdfGrid && cellBounds.length > 0) {
          for (var c = 0; c < i - 1; c++) {
            if (maximumCellBoundsWidth < cellBounds[c]) {
              maximumCellBoundsWidth = cellBounds[c];
            }
          }
          this.rowLayoutBoundsWidth = maximumCellBoundsWidth;
        } else {
          this.rowLayoutBoundsWidth = largeNavigatePage[0][1];
        }
        if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage != null && format.layout != PdfLayoutType.OnePage) {
          isParentCell = this.Grid.isChildGrid;
          if (largeNavigatePage[0][0] != 0) {
            var section = this.currentPage.section;
            var pageIndex = section.indexOf(this.currentPage);
            this.currentGraphics = this.currentPage.graphics;
            this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());
            var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
          } else {
            this.currentPage = this.getNextPageformat(format);
          }
        }
        if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {
          this.currentPage = this.getNextPageformat(format);
          if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {
            this.currentBounds.x += this.startLocation.x;
            this.currentBounds.y += this.startLocation.y;
          }
        }
      }
      result = this.getLayoutResult();
      if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {
        this.reArrangePages(layoutedPages);
      }
      this.raisePageLayouted(result);
      return result;
    };
    PdfGridLayouter2.prototype.checkIsFisished = function(row2) {
      var result = true;
      for (var i = 0; i < row2.cells.count; i++) {
        if (!row2.cells.getCell(i).FinishedDrawingCell) {
          result = false;
        }
      }
      return result;
    };
    PdfGridLayouter2.prototype.getNextPageformat = function(format) {
      var section = this.currentPage.section;
      var nextPage = null;
      var index = section.indexOf(this.currentPage);
      this.flag = false;
      if (index === section.count - 1) {
        nextPage = section.add();
      } else {
        nextPage = section.getPages()[index + 1];
      }
      this.currentGraphics = nextPage.graphics;
      var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
      if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {
        this.listOfNavigatePages.push(pageindex);
      }
      this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());
      if (typeof format !== "undefined" && format != null && format.usePaginateBounds && typeof format.paginateBounds !== "undefined" && format.paginateBounds != null && format.paginateBounds.x !== format.paginateBounds.y && format.paginateBounds.y !== format.paginateBounds.height && format.paginateBounds.height !== format.paginateBounds.width && format.paginateBounds.width !== 0) {
        this.currentBounds.x = format.paginateBounds.x;
        this.currentBounds.y = format.paginateBounds.y;
        this.currentBounds.height = format.paginateBounds.height;
      }
      return nextPage;
    };
    PdfGridLayouter2.prototype.CheckIfDefaultFormat = function(format) {
      var defaultFormat = new PdfStringFormat();
      return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;
    };
    PdfGridLayouter2.prototype.RaiseBeforeCellDraw = function(graphics, rowIndex, cellIndex, bounds, value, style) {
      var args = null;
      if (this.Grid.raiseBeginCellDraw) {
        args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);
        this.Grid.onBeginCellDraw(args);
        style = args.style;
      }
      return style;
    };
    PdfGridLayouter2.prototype.raiseAfterCellDraw = function(graphics, rowIndex, cellIndex, bounds, value, cellstyle) {
      var args = null;
      if (this.Grid.raiseEndCellDraw) {
        args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);
        this.Grid.onEndCellDraw(args);
      }
    };
    PdfGridLayouter2.prototype.reArrangePages = function(layoutedPages) {
      var document2 = this.currentPage.document;
      var pages = [];
      var keys = layoutedPages.keys();
      var values = layoutedPages.values();
      for (var i = 0; i < keys.length; i++) {
        var page = keys[i];
        page.section = null;
        pages.push(page);
        document2.pages.remove(page);
      }
      for (var i = 0; i < layoutedPages.size(); i++) {
        var count2 = 0;
        for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {
          var page = pages[j];
          if (typeof page !== "undefined" && document2.pages.indexOf(page) === -1) {
            document2.pages.add(page);
          }
        }
      }
    };
    PdfGridLayouter2.prototype.getLayoutResult = function() {
      if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {
        for (var i = 0; i < this.Grid.rows.count; i++) {
          var row2 = this.Grid.rows.getRow(i);
          if (row2.rowBreakHeight > 0 && row2.repeatFlag) {
            this.startLocation.y = this.currentPage.origin.y;
          }
        }
      }
      var bounds;
      if (!this.isChanged) {
        bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));
      }
      return new PdfGridLayoutResult(this.currentPage, bounds);
    };
    PdfGridLayouter2.prototype.ReCalculateHeight = function(row2, height) {
      var newHeight = 0;
      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
        if (!(row2.cells.getCell(i).remainingString === null || row2.cells.getCell(i).remainingString === "" || typeof row2.cells.getCell(i).remainingString === "undefined")) {
          newHeight = Math.max(newHeight, row2.cells.getCell(i).measureHeight());
        }
      }
      return Math.max(height, newHeight);
    };
    PdfGridLayouter2.prototype.raiseBeforePageLayout = function(currentPage, currentBounds, currentRow) {
      var cancel = false;
      if (this.Grid.raiseBeginPageLayout) {
        var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);
        this.Grid.onBeginPageLayout(args);
        cancel = typeof args.cancel === "undefined" ? false : args.cancel;
        currentBounds = args.bounds;
        currentRow = args.startRowIndex;
      }
      return {
        returnValue: cancel,
        currentBounds,
        currentRowIndex: currentRow
      };
    };
    PdfGridLayouter2.prototype.raisePageLayouted = function(result) {
      var args = new PdfGridEndPageLayoutEventArgs(result);
      if (this.Grid.raiseEndPageLayout) {
        this.Grid.onEndPageLayout(args);
      }
      return args;
    };
    PdfGridLayouter2.prototype.drawRow = function(row2, result, height) {
      if (typeof result === "undefined") {
        var result_1 = new RowLayoutResult();
        var rowHeightWithSpan = 0;
        var location_3 = new PointF(0, 0);
        var size = new SizeF(0, 0);
        var isHeader = false;
        if (row2.rowSpanExists) {
          var maxSpan = 0;
          var currRowIndex = this.Grid.rows.rowCollection.indexOf(row2);
          if (currRowIndex === -1) {
            currRowIndex = this.Grid.headers.indexOf(row2);
            if (currRowIndex !== -1) {
              isHeader = true;
            }
          }
          for (var i = 0; i < row2.cells.count; i++) {
            var cell = row2.cells.getCell(i);
            maxSpan = Math.max(maxSpan, cell.rowSpan);
          }
          for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {
            rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;
          }
        }
        var calculatedHeight = row2.rowBreakHeight > 0 ? row2.rowBreakHeight : row2.height;
        if (typeof this.Grid.isChildGrid !== "undefined" && this.Grid.isChildGrid && typeof this.Grid.ParentCell !== "undefined" && this.Grid.ParentCell != null) {
          if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {
            if (typeof this.Grid.ParentCell.row.grid.LayoutFormat !== "undefined" && this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {
              PdfGridLayouter2.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row2);
              this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row2);
            }
            if (PdfGridLayouter2.repeatRowIndex > -1 && PdfGridLayouter2.repeatRowIndex === row2.rowIndex) {
              if (this.Grid.allowRowBreakAcrossPages) {
                result_1.isFinish = true;
                result_1.bounds = this.currentBounds;
                this.drawRowWithBreak(result_1, row2, calculatedHeight);
                row2.repeatFlag = true;
                row2.repeatRowNumber = PdfGridLayouter2.repeatRowIndex;
              }
            }
          } else {
            result_1.isFinish = true;
            if (row2.grid.ParentCell.row.rowBreakHeightValue > 0) {
              row2.repeatFlag = true;
            } else {
              row2.repeatFlag = false;
              calculatedHeight = row2.height;
            }
            if (this.Grid.isChildGrid && row2.rowBreakHeight > 0) {
              if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {
                calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
              }
            }
            this.drawRow(row2, result_1, calculatedHeight);
          }
        } else {
          if (calculatedHeight > this.currentPageBounds.height) {
            if (this.Grid.allowRowBreakAcrossPages) {
              result_1.isFinish = true;
              this.drawRowWithBreak(result_1, row2, calculatedHeight);
              row2.isrowFinish = true;
              row2.repeatFlag = true;
              if (row2.grid.splitChildRowIndex !== -1) {
                result_1.isFinish = false;
              }
            }
          } else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {
            var isFit = false;
            if (this.Grid.allowRowBreakAcrossPages && !this.Grid.repeatHeader && !row2.isRowHeightSet && !row2.rowMergeComplete) {
              if (this.Grid.LayoutFormat !== null && this.Grid.LayoutFormat.paginateBounds.height > 0) {
                isFit = this.isFitToCell(this.currentBounds.height + this.startLocation.y - this.currentBounds.y, this.Grid, row2);
              } else isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row2);
              if (isFit) {
                this.isPaginate = true;
              }
            } else if (this.Grid.allowRowBreakAcrossPages && this.Grid.LayoutFormat != null && this.Grid.LayoutFormat.layout == PdfLayoutType.Paginate && this.Grid.LayoutFormat.break != PdfLayoutBreakType.FitElement && row2.isRowHeightSet && this.currentBounds.y + height > this.currentPageBounds.height) {
              isFit = this.isFitToCell(this.currentPageBounds.height - this.currentBounds.y, this.Grid, row2);
              if (!isFit) isFit = !(this.slr !== null && this.slr.actualSize.height == 0 && this.slr.remainder != null && this.slr.remainder.length > 0 && this.remainderText == this.slr.remainder);
              if (isFit && this.slr != null && this.slr.lineCount > 1) {
                isFit = false;
              }
              this.remainderText = null;
            }
            if (PdfGridLayouter2.repeatRowIndex > -1 && PdfGridLayouter2.repeatRowIndex === row2.rowIndex || isFit) {
              if (this.Grid.allowRowBreakAcrossPages) {
                result_1.isFinish = true;
                this.drawRowWithBreak(result_1, row2, calculatedHeight);
                row2.repeatFlag = true;
                row2.repeatRowNumber = PdfGridLayouter2.repeatRowIndex;
                if (row2.grid.splitChildRowIndex !== -1) {
                  result_1.isFinish = false;
                }
              } else {
                result_1.isFinish = false;
                this.drawRow(row2, result_1, calculatedHeight);
              }
            } else {
              result_1.isFinish = false;
            }
          } else {
            result_1.isFinish = true;
            this.drawRow(row2, result_1, calculatedHeight);
            row2.repeatFlag = false;
          }
        }
        return result_1;
      } else {
        var skipcell = false;
        var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);
        result.bounds = new RectangleF(location_4, new SizeF(0, 0));
        height = this.ReCalculateHeight(row2, height);
        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
          var cancelSpans = i > this.cellEndIndex + 1 && row2.cells.getCell(i).columnSpan > 1;
          if (!cancelSpans) {
            for (var j = 1; j < row2.cells.getCell(i).columnSpan; j++) {
              row2.cells.getCell(i + j).isCellMergeContinue = true;
            }
          }
          var size = new SizeF(this.Grid.columns.getColumn(i).width, height);
          if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row2.cells.getCell(i).stringFormat)) {
            row2.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;
          }
          var cellstyle = row2.cells.getCell(i).style;
          var tempValue = typeof row2.cells.getCell(i).value === "string" && row2.cells.getCell(i).value !== null ? row2.cells.getCell(i).value : "";
          row2.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);
          if (!skipcell) {
            if (row2.cells.getCell(i).value instanceof PdfGrid) {
              var grid = row2.cells.getCell(i).value;
              grid.parentCellIndex = i;
            }
            var stringResult = row2.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);
            if (row2.grid.style.allowHorizontalOverflow && (row2.cells.getCell(i).columnSpan > this.cellEndIndex || i + row2.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row2.cells.count - 1) {
              row2.rowOverflowIndex = this.cellEndIndex;
            }
            if (row2.grid.style.allowHorizontalOverflow && row2.rowOverflowIndex > 0 && (row2.cells.getCell(i).columnSpan > this.cellEndIndex || i + row2.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row2.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {
              row2.cells.getCell(row2.rowOverflowIndex + 1).value = stringResult !== null ? stringResult.remainder !== void 0 ? stringResult.remainder : "" : "";
              row2.cells.getCell(row2.rowOverflowIndex + 1).stringFormat = row2.cells.getCell(i).stringFormat;
              row2.cells.getCell(row2.rowOverflowIndex + 1).style = row2.cells.getCell(i).style;
              row2.cells.getCell(row2.rowOverflowIndex + 1).columnSpan = row2.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;
            }
          }
          tempValue = typeof row2.cells.getCell(i).value === "string" && row2.cells.getCell(i).value !== null ? row2.cells.getCell(i).value : "";
          if (!cancelSpans) {
            this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row2.cells.getCell(i).style);
          }
          if (row2.cells.getCell(i).value instanceof PdfGrid) {
            var grid = row2.cells.getCell(i).value;
            if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {
              location_4.x = grid.rowLayoutBoundsWidth;
              location_4.x += grid.style.cellSpacing;
            } else {
              location_4.x += this.Grid.columns.getColumn(i).width;
            }
          } else {
            location_4.x += this.Grid.columns.getColumn(i).width;
          }
        }
        if (!row2.rowMergeComplete || row2.isRowHeightSet) {
          this.currentBounds.y += height;
        }
        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));
      }
    };
    PdfGridLayouter2.prototype.isFitToCell = function(currentHeight, grid, gridRow) {
      var isFit = false;
      var layouter = new PdfStringLayouter();
      for (var i = 0; i < gridRow.cells.count; i++) {
        var cell = gridRow.cells.getCell(i);
        if (typeof cell.value !== "undefined" && cell.value !== null && typeof cell.value === "string") {
          var font = null;
          if (typeof cell.style.font !== "undefined" && cell.style.font != null) {
            font = cell.style.font;
          } else if (typeof cell.row.style.font !== "undefined" && cell.row.style.font != null) {
            font = cell.row.style.font;
          } else if (typeof cell.row.grid.style.font !== "undefined" && cell.row.grid.style.font != null) {
            font = cell.row.grid.style.font;
          } else {
            font = PdfDocument.defaultFont;
          }
          this.remainderText = cell.value;
          var width = cell.width;
          var column = grid.columns.getColumn(i);
          if (column.isCustomWidth && cell.width > column.width) {
            width = column.width;
          }
          this.slr = layouter.layout(cell.value, font, cell.stringFormat, new SizeF(width, currentHeight), false, this.currentPageBounds);
          var height = this.slr.actualSize.height;
          if (cell.value !== "" && height === 0) {
            isFit = false;
            break;
          }
          if (cell.style !== null && cell.style.borders !== null && cell.style.borders.top !== null && cell.style.borders.bottom !== null) {
            height += (cell.style.borders.top.width + cell.style.borders.bottom.width) * 2;
          }
          if (this.slr.lineCount > 1 && cell.stringFormat != null && cell.stringFormat.lineSpacing != 0) {
            height += (this.slr.lineCount - 1) * cell.style.stringFormat.lineSpacing;
          }
          if (cell.style.cellPadding === null) {
            height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;
          } else {
            height += grid.style.cellPadding.top + grid.style.cellPadding.bottom;
          }
          height += grid.style.cellSpacing;
          if (currentHeight > height || typeof this.slr.remainder !== "undefined" && this.slr.remainder !== null) {
            isFit = true;
            break;
          }
        }
      }
      return isFit;
    };
    PdfGridLayouter2.prototype.drawRowWithBreak = function(result, row2, calculateHeight) {
      var location = new PointF(this.currentBounds.x, this.currentBounds.y);
      if (row2.grid.isChildGrid && row2.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {
        location.x = this.startLocation.x;
      }
      result.bounds = new RectangleF(location, new SizeF(0, 0));
      this.gridHeight = row2.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;
      if (row2.grid.style.cellPadding.top + this.currentBounds.y + row2.grid.style.cellPadding.bottom < this.currentPageBounds.height) {
        row2.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;
      }
      for (var i = 0; i < row2.cells.count; i++) {
        var cell = row2.cells.getCell(i);
        var cellHeight = cell.measureHeight();
        if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {
          row2.rowBreakHeight = 0;
        }
      }
      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
        var gridColumnWidth = this.Grid.columns.getColumn(i).width;
        var cancelSpans = row2.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row2.cells.getCell(i).columnSpan > 1;
        if (!cancelSpans) {
          for (var k = 1; k < row2.cells.getCell(i).columnSpan; k++) {
            row2.cells.getCell(i + k).isCellMergeContinue = true;
            gridColumnWidth += this.Grid.columns.getColumn(i + k).width;
          }
        }
        var size = new SizeF(gridColumnWidth, this.gridHeight > 0 ? this.gridHeight : this.currentPageBounds.height);
        var cellstyle1 = row2.cells.getCell(i).style;
        row2.cells.getCell(i).style = cellstyle1;
        var skipcell = false;
        var stringResult = null;
        if (!skipcell) {
          row2.cells.getCell(i)._rowHeight = row2.height;
          stringResult = row2.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);
        }
        if (row2.rowBreakHeight > 0) {
          if (stringResult != null && typeof stringResult.remainder !== "undefined") {
            row2.cells.getCell(i).FinishedDrawingCell = false;
            row2.cells.getCell(i).remainingString = stringResult.remainder == null ? " " : stringResult.remainder;
            row2.rowBreakHeight = calculateHeight - stringResult.actualSize.height;
          }
        }
        result.isFinish = !result.isFinish ? result.isFinish : row2.cells.getCell(i).FinishedDrawingCell;
        if (row2.cells.getCell(i).value instanceof PdfGrid) {
          var grid = row2.cells.getCell(i).value;
          this.rowBreakPageHeightCellIndex = i;
          if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {
            location.x = this.rowLayoutBoundsWidth;
            location.x += grid.style.cellSpacing;
          } else {
            location.x += this.Grid.columns.getColumn(i).width;
          }
        } else {
          location.x += this.Grid.columns.getColumn(i).width;
        }
      }
      this.currentBounds.y += this.gridHeight > 0 ? this.gridHeight : calculateHeight;
      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));
    };
    PdfGridLayouter2.repeatRowIndex = -1;
    return PdfGridLayouter2;
  }(ElementLayouter)
);
var PdfGridLayoutResult = (
  /** @class */
  function(_super) {
    __extends74(PdfGridLayoutResult2, _super);
    function PdfGridLayoutResult2(page, bounds) {
      return _super.call(this, page, bounds) || this;
    }
    return PdfGridLayoutResult2;
  }(PdfLayoutResult)
);
var PdfGridLayoutFormat = (
  /** @class */
  function(_super) {
    __extends74(PdfGridLayoutFormat2, _super);
    function PdfGridLayoutFormat2(baseFormat) {
      return _super.call(this, baseFormat) || this;
    }
    return PdfGridLayoutFormat2;
  }(PdfLayoutFormat)
);
var GridCellEventArgs = (
  /** @class */
  function() {
    function GridCellEventArgs2(graphics, rowIndex, cellIndex, bounds, value) {
      this.gridRowIndex = rowIndex;
      this.gridCellIndex = cellIndex;
      this.internalValue = value;
      this.gridBounds = bounds;
      this.pdfGraphics = graphics;
    }
    Object.defineProperty(GridCellEventArgs2.prototype, "rowIndex", {
      // Properties
      /**
       * Gets the value of current `row index`.
       * @private
       */
      get: function() {
        return this.gridRowIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "cellIndex", {
      /**
       * Gets the value of current `cell index`.
       * @private
       */
      get: function() {
        return this.gridCellIndex;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "value", {
      /**
       * Gets the actual `value` of current cell.
       * @private
       */
      get: function() {
        return this.internalValue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "bounds", {
      /**
       * Gets the `bounds` of current cell.
       * @private
       */
      get: function() {
        return this.gridBounds;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(GridCellEventArgs2.prototype, "graphics", {
      /**
       * Gets the instance of `current graphics`.
       * @private
       */
      get: function() {
        return this.pdfGraphics;
      },
      enumerable: true,
      configurable: true
    });
    return GridCellEventArgs2;
  }()
);
var PdfGridBeginCellDrawEventArgs = (
  /** @class */
  function(_super) {
    __extends74(PdfGridBeginCellDrawEventArgs2, _super);
    function PdfGridBeginCellDrawEventArgs2(graphics, rowIndex, cellIndex, bounds, value, style) {
      var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
      _this.style = style;
      return _this;
    }
    Object.defineProperty(PdfGridBeginCellDrawEventArgs2.prototype, "skip", {
      // Properties
      /**
       * Gets or sets a value indicating whether the value of this cell should be `skipped`.
       * @private
       */
      get: function() {
        return this.bSkip;
      },
      set: function(value) {
        this.bSkip = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfGridBeginCellDrawEventArgs2.prototype, "style", {
      /**
       * Gets or sets a `style` value of the cell.
       * @private
       */
      get: function() {
        return this.cellStyle;
      },
      set: function(value) {
        this.cellStyle = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridBeginCellDrawEventArgs2;
  }(GridCellEventArgs)
);
var PdfGridEndCellDrawEventArgs = (
  /** @class */
  function(_super) {
    __extends74(PdfGridEndCellDrawEventArgs2, _super);
    function PdfGridEndCellDrawEventArgs2(graphics, rowIndex, cellIndex, bounds, value, style) {
      var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
      _this.cellStyle = style;
      return _this;
    }
    Object.defineProperty(PdfGridEndCellDrawEventArgs2.prototype, "style", {
      // Propertise
      /**
       * Get the `PdfGridCellStyle`.
       * @private
       */
      get: function() {
        return this.cellStyle;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridEndCellDrawEventArgs2;
  }(GridCellEventArgs)
);
var PdfCancelEventArgs = (
  /** @class */
  function() {
    function PdfCancelEventArgs2() {
    }
    Object.defineProperty(PdfCancelEventArgs2.prototype, "cancel", {
      // Properties
      /**
       * Gets and Sets the value of `cancel`.
       * @private
       */
      get: function() {
        return this.isCancel;
      },
      set: function(value) {
        this.isCancel = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfCancelEventArgs2;
  }()
);
var BeginPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends74(BeginPageLayoutEventArgs2, _super);
    function BeginPageLayoutEventArgs2(bounds, page) {
      var _this = _super.call(this) || this;
      _this.bounds = bounds;
      _this.pdfPage = page;
      return _this;
    }
    Object.defineProperty(BeginPageLayoutEventArgs2.prototype, "bounds", {
      // Properties
      /**
       * Gets or sets value that indicates the lay outing `bounds` on the page.
       * @private
       */
      get: function() {
        return this.cellBounds;
      },
      set: function(value) {
        this.cellBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BeginPageLayoutEventArgs2.prototype, "page", {
      /**
       * Gets the `page` where the lay outing should start.
       * @private
       */
      get: function() {
        return this.pdfPage;
      },
      enumerable: true,
      configurable: true
    });
    return BeginPageLayoutEventArgs2;
  }(PdfCancelEventArgs)
);
var EndPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends74(EndPageLayoutEventArgs2, _super);
    function EndPageLayoutEventArgs2(result) {
      var _this = _super.call(this) || this;
      _this.layoutResult = result;
      return _this;
    }
    Object.defineProperty(EndPageLayoutEventArgs2.prototype, "result", {
      // Properties
      /**
       * Gets the lay outing `result` of the page.
       * @private
       */
      get: function() {
        return this.layoutResult;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(EndPageLayoutEventArgs2.prototype, "nextPage", {
      /**
       * Gets or sets a value indicating the `next page` where the element should be layout.
       * @private
       */
      get: function() {
        return this.nextPdfPage;
      },
      set: function(value) {
        this.nextPdfPage = value;
      },
      enumerable: true,
      configurable: true
    });
    return EndPageLayoutEventArgs2;
  }(PdfCancelEventArgs)
);
var PdfGridBeginPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends74(PdfGridBeginPageLayoutEventArgs2, _super);
    function PdfGridBeginPageLayoutEventArgs2(bounds, page, startRow) {
      var _this = _super.call(this, bounds, page) || this;
      _this.startRow = startRow;
      return _this;
    }
    Object.defineProperty(PdfGridBeginPageLayoutEventArgs2.prototype, "startRowIndex", {
      // Properties
      /**
       * Gets the `start row index`.
       * @private
       */
      get: function() {
        return this.startRow;
      },
      enumerable: true,
      configurable: true
    });
    return PdfGridBeginPageLayoutEventArgs2;
  }(BeginPageLayoutEventArgs)
);
var PdfGridEndPageLayoutEventArgs = (
  /** @class */
  function(_super) {
    __extends74(PdfGridEndPageLayoutEventArgs2, _super);
    function PdfGridEndPageLayoutEventArgs2(result) {
      return _super.call(this, result) || this;
    }
    return PdfGridEndPageLayoutEventArgs2;
  }(EndPageLayoutEventArgs)
);
var RowLayoutResult = (
  /** @class */
  function() {
    function RowLayoutResult2() {
      this.layoutedBounds = new RectangleF(0, 0, 0, 0);
    }
    Object.defineProperty(RowLayoutResult2.prototype, "isFinish", {
      /**
       * Gets or sets a value indicating whether this instance `is finish`.
       * @private
       */
      get: function() {
        return this.bIsFinished;
      },
      set: function(value) {
        this.bIsFinished = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RowLayoutResult2.prototype, "bounds", {
      /**
       * Gets or sets the `bounds`.
       * @private
       */
      get: function() {
        return this.layoutedBounds;
      },
      set: function(value) {
        this.layoutedBounds = value;
      },
      enumerable: true,
      configurable: true
    });
    return RowLayoutResult2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/shape-layouter.js
var __extends75 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ShapeLayouter = (
  /** @class */
  function(_super) {
    __extends75(ShapeLayouter2, _super);
    function ShapeLayouter2(element) {
      var _this = _super.call(this, element) || this;
      _this.olderPdfForm = 0;
      _this.shapeBounds = new RectangleF();
      _this.totalPageSize = 0;
      return _this;
    }
    Object.defineProperty(ShapeLayouter2.prototype, "element", {
      // Properties
      /**
       * Gets shape element.
       * @private
       */
      get: function() {
        return this.elements;
      },
      enumerable: true,
      configurable: true
    });
    ShapeLayouter2.prototype.layoutInternal = function(param) {
      var currentPage = param.page;
      var currentBounds = param.bounds;
      var shapeLayoutBounds = this.element.getBounds();
      shapeLayoutBounds.x = 0;
      shapeLayoutBounds.y = 0;
      var isEmpty = this.shapeBounds.x === this.shapeBounds.y && this.shapeBounds.y === this.shapeBounds.width && this.shapeBounds.width === this.shapeBounds.height && this.shapeBounds.height === 0 ? true : false;
      if (this.isPdfGrid && !isEmpty) {
        shapeLayoutBounds = this.shapeBounds;
      }
      var result = null;
      var pageResult = new ShapeLayoutResult();
      pageResult.page = currentPage;
      while (true) {
        var result1 = this.raiseBeforePageLayout(currentPage, currentBounds);
        currentBounds = result1.currentBounds;
        var endArgs = null;
        if (!result1.cancel) {
          pageResult = this.layoutOnPage(currentPage, currentBounds, shapeLayoutBounds, param);
          endArgs = this.raiseEndPageLayout(pageResult);
          result1.cancel = endArgs === null ? false : endArgs.cancel;
        }
        if (!pageResult.end && !result1.cancel) {
          currentBounds = this.getPaginateBounds(param);
          shapeLayoutBounds = this.getNextShapeBounds(shapeLayoutBounds, pageResult);
          currentPage = endArgs === null || endArgs.nextPage === null ? this.getNextPage(currentPage) : endArgs.nextPage;
          if (this.isPdfGrid) {
            result = this.getLayoutResult(pageResult);
            break;
          }
        } else {
          result = this.getLayoutResult(pageResult);
          break;
        }
      }
      return result;
    };
    ShapeLayouter2.prototype.raiseBeforePageLayout = function(currentPage, currentBounds) {
      var cancel = false;
      if (this.element.raiseBeginPageLayout) {
        var args = new BeginPageLayoutEventArgs(currentBounds, currentPage);
        this.element.onBeginPageLayout(args);
        cancel = args.cancel;
        currentBounds = args.bounds;
      }
      return {
        currentBounds,
        cancel
      };
    };
    ShapeLayouter2.prototype.raiseEndPageLayout = function(pageResult) {
      var args = null;
      if (this.element.raiseEndPageLayout) {
        var res = this.getLayoutResult(pageResult);
        args = new EndPageLayoutEventArgs(res);
        this.element.onEndPageLayout(args);
      }
      return args;
    };
    ShapeLayouter2.prototype.getLayoutResult = function(pageResult) {
      var result = new PdfLayoutResult(pageResult.page, pageResult.bounds);
      return result;
    };
    ShapeLayouter2.prototype.getNextShapeBounds = function(shapeLayoutBounds, pageResult) {
      var layoutedBounds = pageResult.bounds;
      shapeLayoutBounds.y = shapeLayoutBounds.y + layoutedBounds.height;
      shapeLayoutBounds.height = shapeLayoutBounds.height - layoutedBounds.height;
      return shapeLayoutBounds;
    };
    ShapeLayouter2.prototype.layoutOnPage = function(currentPage, curBounds, sBounds, param) {
      var result = new ShapeLayoutResult();
      curBounds = this.checkCorrectCurrentBounds(currentPage, curBounds, param);
      var fitToPage = this.fitsToBounds(curBounds, sBounds);
      var canDraw = !(param.format.break === PdfLayoutBreakType.FitElement && !fitToPage && currentPage === param.page);
      var shapeFinished = false;
      if (canDraw) {
        var drawRectangle = this.getDrawBounds(curBounds, sBounds);
        this.drawShape(currentPage.graphics, curBounds, drawRectangle);
        result.bounds = this.getPageResultBounds(curBounds, sBounds);
        shapeFinished = curBounds.height >= sBounds.height;
      }
      result.end = shapeFinished || param.format.layout === PdfLayoutType.OnePage;
      result.page = currentPage;
      return result;
    };
    ShapeLayouter2.prototype.getDrawBounds = function(currentBounds, shapeLayoutBounds) {
      var result = currentBounds;
      result.y = result.y - shapeLayoutBounds.y;
      result.height = result.height + shapeLayoutBounds.y;
      return result;
    };
    ShapeLayouter2.prototype.drawShape = function(g, currentBounds, drawRectangle) {
      var gState = g.save();
      try {
        g.setClip(currentBounds);
        this.element.drawGraphicsHelper(g, new PointF(drawRectangle.x, drawRectangle.y));
      } finally {
        g.restore(gState);
      }
    };
    ShapeLayouter2.prototype.checkCorrectCurrentBounds = function(currentPage, curBounds, param) {
      var pageSize = currentPage.graphics.clientSize;
      curBounds.width = curBounds.width > 0 ? curBounds.width : pageSize.width - curBounds.x;
      curBounds.height = curBounds.height > 0 ? curBounds.height : pageSize.height - curBounds.y;
      if (this.isPdfGrid) {
        curBounds.height = curBounds.height - this.bottomCellPadding;
      }
      return curBounds;
    };
    ShapeLayouter2.prototype.getPageResultBounds = function(currentBounds, shapeLayoutBounds) {
      var result = currentBounds;
      result.height = Math.min(result.height, shapeLayoutBounds.height);
      return result;
    };
    ShapeLayouter2.prototype.fitsToBounds = function(currentBounds, shapeLayoutBounds) {
      var fits = shapeLayoutBounds.height <= currentBounds.height;
      return fits;
    };
    ShapeLayouter2.index = 0;
    ShapeLayouter2.splitDiff = 0;
    ShapeLayouter2.last = false;
    ShapeLayouter2.borderWidth = 0;
    return ShapeLayouter2;
  }(ElementLayouter)
);
var ShapeLayoutResult = (
  /** @class */
  /* @__PURE__ */ function() {
    function ShapeLayoutResult2() {
    }
    return ShapeLayoutResult2;
  }()
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/pdf-shape-element.js
var __extends76 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfShapeElement = (
  /** @class */
  function(_super) {
    __extends76(PdfShapeElement2, _super);
    function PdfShapeElement2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PdfShapeElement2.prototype.getBounds = function() {
      var rect = this.getBoundsInternal();
      return rect;
    };
    PdfShapeElement2.prototype.drawGraphicsHelper = function(graphics, location) {
      if (graphics == null) {
        throw new Error("ArgumentNullException :graphics");
      }
      this.drawShapeHelper(graphics, location.x, location.y);
    };
    PdfShapeElement2.prototype.drawShapeHelper = function(graphics, x, y) {
      var bNeedSave = x !== 0.5 || y !== 0.5;
      var gState = null;
      if (bNeedSave) {
        gState = graphics.save();
        graphics.translateTransform(x, y);
      }
      this.drawInternal(graphics);
      if (bNeedSave) {
        graphics.restore(gState);
      }
    };
    PdfShapeElement2.prototype.layout = function(param) {
      var layouter = new ShapeLayouter(this);
      var result = layouter.layout(param);
      return result;
    };
    return PdfShapeElement2;
  }(PdfLayoutElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/draw-element.js
var __extends77 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfDrawElement = (
  /** @class */
  function(_super) {
    __extends77(PdfDrawElement2, _super);
    function PdfDrawElement2(pen) {
      var _this = _super.call(this) || this;
      if (typeof pen !== "undefined") {
        _this.mpen = pen;
      }
      return _this;
    }
    Object.defineProperty(PdfDrawElement2.prototype, "pen", {
      // Properties
      /**
       * Gets or sets a pen that will be used to draw the element.
       * @public
       */
      get: function() {
        return this.mpen;
      },
      set: function(value) {
        this.mpen = value;
      },
      enumerable: true,
      configurable: true
    });
    return PdfDrawElement2;
  }(PdfShapeElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/fill-element.js
var __extends78 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfFillElement = (
  /** @class */
  function(_super) {
    __extends78(PdfFillElement2, _super);
    function PdfFillElement2(arg1, arg2) {
      var _this = _super.call(this) || this;
      _this.mbrush = null;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof PdfPen) {
        _this = _super.call(this, arg1) || this;
      } else {
        _this.mbrush = arg2;
      }
      return _this;
    }
    Object.defineProperty(PdfFillElement2.prototype, "brush", {
      // Properties
      /**
       * Gets or sets a brush of the element.
       * @public
       */
      get: function() {
        return this.mbrush;
      },
      set: function(value) {
        this.mbrush = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfFillElement2.prototype.obtainPen = function() {
      return this.mbrush == null && this.pen == null ? new PdfPen(new PdfColor(0, 0, 0)) : this.pen;
    };
    return PdfFillElement2;
  }(PdfDrawElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/path.js
var __extends79 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfPath = (
  /** @class */
  function(_super) {
    __extends79(PdfPath2, _super);
    function PdfPath2(arg1, arg2, arg3, arg4) {
      var _this = _super.call(this) || this;
      _this.mpoints = null;
      _this.mpathTypes = null;
      _this.mStartFigure = true;
      _this.mfillMode = PdfFillMode.Alternate;
      _this.isBeziers3 = false;
      _this.isXps = false;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof PdfPen) {
        _this = _super.call(this, arg1) || this;
        if (arg2 instanceof PdfBrush) {
          _this = _super.call(this, arg1, arg2) || this;
          _this.fillMode = arg3;
        } else if (arg2 !== null && typeof arg2 !== "undefined" && arg3 !== null && typeof arg3 !== "undefined") {
          _this.addPath(arg2, arg3);
        }
      } else if (arg1 instanceof PdfBrush) {
        _this = _super.call(this, arg1) || this;
        if (arg2 !== null && typeof arg2 !== "undefined") {
          _this.fillMode = arg2;
        }
        if (arg3 !== null && typeof arg3 !== "undefined" && arg4 !== null && typeof arg4 !== "undefined") {
          _this.addPath(arg3, arg4);
        }
      } else {
        _this.addPath(arg1, arg2);
      }
      return _this;
    }
    Object.defineProperty(PdfPath2.prototype, "fillMode", {
      // Properties
      /**
       * Gets or sets the fill mode.
       * @public
       */
      get: function() {
        return this.mfillMode;
      },
      set: function(value) {
        this.mfillMode = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "pathPoints", {
      /**
       * Gets the path points.
       * @public
       */
      get: function() {
        return this.points;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "pathTypes", {
      /**
       * Gets the path point types.
       * @public
       */
      get: function() {
        return this.types;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "pointCount", {
      /**
       * Gets the point count.
       * @public
       */
      get: function() {
        var count2 = 0;
        if (this.mpoints != null) {
          count2 = this.mpoints.length;
        }
        return count2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "lastPoint", {
      /**
       * Gets the last points.
       * @public
       */
      get: function() {
        return this.getLastPoint();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "points", {
      /**
       * Gets the points list.
       * @private
       */
      get: function() {
        if (this.mpoints == null) {
          this.mpoints = [];
        }
        return this.mpoints;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPath2.prototype, "types", {
      /**
       * Gets the types.
       * @private
       */
      get: function() {
        if (this.mpathTypes == null) {
          this.mpathTypes = [];
        }
        return this.mpathTypes;
      },
      enumerable: true,
      configurable: true
    });
    PdfPath2.prototype.draw = function(arg1, arg2, arg3, arg4) {
      if (arg2 instanceof PointF && typeof arg2.width === "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2.x, arg2.y);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(arg1, arg2, null);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        return this.drawHelper(arg1, arg2, arg3, null);
      } else if (arg2 instanceof PointF && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg1, arg2.x, arg2.y, arg3);
      } else if (typeof arg2 === "number" && (arg4 instanceof PdfLayoutFormat || arg4 == null) && typeof arg3 === "number") {
        var widthValue = arg1.graphics.clientSize.width - arg2;
        var layoutRect = new RectangleF(arg2, arg3, widthValue, 0);
        return this.drawHelper(arg1, layoutRect, arg4);
      } else if (arg2 instanceof RectangleF && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(arg1, arg2, arg3);
      } else {
        return this.drawHelper(arg1, arg2, arg3);
      }
    };
    PdfPath2.prototype.addArc = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof RectangleF) {
        this.addArc(arg1.x, arg1.y, arg1.width, arg1.height, arg2, arg3);
      } else {
        var points = this.getBezierArcPoints(arg1, arg2, arg2 + arg3, arg2 + arg4, arg5, arg6);
        for (var i = 0; i < points.length; i = i + 8) {
          var point = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];
          this.addPoints(point, PathPointType.Bezier3);
        }
      }
    };
    PdfPath2.prototype.addBezier = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      if (arg1 instanceof PointF && arg2 instanceof PointF && arg3 instanceof PointF && arg4 instanceof PointF) {
        this.addBezier(arg1.x, arg1.y, arg2.x, arg2.y, arg3.x, arg3.y, arg4.x, arg4.y);
      } else {
        var points = [];
        points.push(arg1);
        points.push(arg2);
        points.push(arg3);
        points.push(arg4);
        points.push(arg5);
        points.push(arg6);
        points.push(arg7);
        points.push(arg8);
        this.addPoints(points, PathPointType.Bezier3);
      }
    };
    PdfPath2.prototype.addEllipse = function(arg1, arg2, arg3, arg4) {
      if (arg1 instanceof RectangleF) {
        this.addEllipse(arg1.x, arg1.y, arg1.width, arg1.height);
      } else {
        this.startFigure();
        this.addArc(arg1, arg2, arg3, arg4, 0, 360);
        this.closeFigure();
      }
    };
    PdfPath2.prototype.addLine = function(arg1, arg2, arg3, arg4) {
      if (arg1 instanceof PointF && arg2 instanceof PointF) {
        this.addLine(arg1.x, arg1.y, arg2.x, arg2.y);
      } else {
        var points = [];
        points.push(arg1);
        points.push(arg2);
        points.push(arg3);
        points.push(arg4);
        this.addPoints(points, PathPointType.Line);
      }
    };
    PdfPath2.prototype.addPath = function(arg1, arg2) {
      if (arg1 instanceof PdfPath2) {
        this.addPath(arg1.pathPoints, arg1.pathTypes);
      } else {
        if (arg1 == null) {
          throw new Error("ArgumentNullException:pathPoints");
        }
        if (arg2 == null) {
          throw new Error("ArgumentNullException:pathTypes");
        }
        var count2 = arg1.length;
        if (count2 !== arg2.length) {
          throw new Error("The argument arrays should be of equal length.");
        }
      }
    };
    PdfPath2.prototype.addPie = function(arg1, arg2, arg3, arg4, arg5, arg6) {
      if (arg1 instanceof RectangleF) {
        this.addPie(arg1.x, arg1.y, arg1.width, arg1.height, arg2, arg3);
      } else {
        this.startFigure();
        this.addArc(arg1, arg2, arg3, arg4, arg5, arg6);
        this.addPoint(new PointF(arg1 + arg3 / 2, arg2 + arg4 / 2), PathPointType.Line);
        this.closeFigure();
      }
    };
    PdfPath2.prototype.addPolygon = function(points) {
      var count2 = points.length * 2;
      var p = [];
      this.startFigure();
      for (var i = 0; i < points.length; i++) {
        p.push(points[i].x);
        p.push(points[i].y);
      }
      this.addPoints(p, PathPointType.Line);
      this.closeFigure();
    };
    PdfPath2.prototype.addRectangle = function(arg1, y, width, height) {
      if (arg1 instanceof RectangleF) {
        this.addRectangle(arg1.x, arg1.y, arg1.width, arg1.height);
      } else {
        var points = [];
        this.startFigure();
        points.push(arg1);
        points.push(y);
        points.push(arg1 + width);
        points.push(y);
        points.push(arg1 + width);
        points.push(y + height);
        points.push(arg1);
        points.push(y + height);
        this.addPoints(points, PathPointType.Line);
        this.closeFigure();
      }
    };
    PdfPath2.prototype.startFigure = function() {
      this.mStartFigure = true;
    };
    PdfPath2.prototype.closeAllFigures = function() {
      var startPath = this.pathPoints[0];
      for (var i = 0; i < this.mpathTypes.length; i++) {
        var pt = this.types[i];
        var flag = false;
        if (i !== 0 && pt === PathPointType.Start) {
          this.closeFigure(i - 1);
          flag = true;
        } else if (i === this.mpathTypes.length - 1 && !flag && this.isXps) {
          if (startPath.x === this.pathPoints[i].y) {
            this.closeFigure(i);
          }
        }
      }
    };
    PdfPath2.prototype.getLastPoint = function() {
      var lastPoint = new PointF(0, 0);
      var count2 = this.pointCount;
      if (count2 > 0 && this.mpoints != null) {
        lastPoint.x = this.mpoints[count2 - 1].x;
        lastPoint.y = this.mpoints[count2 - 1].y;
      }
      return lastPoint;
    };
    PdfPath2.prototype.getBezierArcPoints = function(x1, y1, x2, y2, s1, e1) {
      if (x1 > x2) {
        var tmp = void 0;
        tmp = x1;
        x1 = x2;
        x2 = tmp;
      }
      if (y2 > y1) {
        var tmp = void 0;
        tmp = y1;
        y1 = y2;
        y2 = tmp;
      }
      var fragAngle;
      var numFragments;
      if (Math.abs(e1) <= 90) {
        fragAngle = e1;
        numFragments = 1;
      } else {
        numFragments = Math.ceil(Math.abs(e1) / 90);
        fragAngle = e1 / numFragments;
      }
      var xcen = (x1 + x2) / 2;
      var ycen = (y1 + y2) / 2;
      var rx = (x2 - x1) / 2;
      var ry = (y2 - y1) / 2;
      var halfAng = fragAngle * (Math.PI / 360);
      var kappa = Math.abs(4 / 3 * (1 - Math.cos(halfAng)) / Math.sin(halfAng));
      var pointList = [];
      for (var i = 0; i < numFragments; i++) {
        var theta0 = (s1 + i * fragAngle) * (Math.PI / 180);
        var theta1 = (s1 + (i + 1) * fragAngle) * (Math.PI / 180);
        var cos0 = Math.cos(theta0);
        var cos1 = Math.cos(theta1);
        var sin0 = Math.sin(theta0);
        var sin1 = Math.sin(theta1);
        if (fragAngle > 0) {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        } else {
          pointList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);
        }
      }
      return pointList;
    };
    PdfPath2.prototype.getBoundsInternal = function() {
      var points = this.pathPoints;
      var bounds = new RectangleF(0, 0, 0, 0);
      if (points.length > 0) {
        var xmin = points[0].x;
        var xmax = points[0].x;
        var ymin = points[0].y;
        var ymax = points[0].y;
        for (var i = 1; i < points.length; i++) {
          var point = points[i];
          xmin = Math.min(point.x, xmin);
          xmax = Math.max(point.x, xmax);
          ymin = Math.min(point.y, ymin);
          ymax = Math.max(point.y, ymax);
        }
        bounds = new RectangleF(xmin, ymin, xmax - xmin, ymax - ymin);
      }
      return bounds;
    };
    PdfPath2.prototype.drawInternal = function(graphics) {
      if (graphics == null) {
        throw new Error("ArgumentNullException :graphics");
      }
      graphics.drawPath(this.obtainPen(), this.brush, this);
    };
    PdfPath2.prototype.addPoints = function(points, pointType, startIndex, endIndex) {
      if (typeof startIndex === "undefined" && typeof endIndex === "undefined") {
        this.addPoints(points, pointType, 0, points.length);
      } else {
        for (var i = startIndex; i < endIndex; i++) {
          var point = new PointF(points[i], points[i + 1]);
          if (i === startIndex) {
            if (this.pointCount <= 0 || this.mStartFigure) {
              this.addPoint(point, PathPointType.Start);
              this.mStartFigure = false;
            } else if (point.x !== this.lastPoint.x && point.y !== this.lastPoint.y && !this.isBeziers3) {
              this.addPoint(point, PathPointType.Line);
            } else if (point.x !== this.lastPoint.x && point.y !== this.lastPoint.y) {
              this.addPoint(point, PathPointType.Bezier3);
            }
          } else {
            this.addPoint(point, pointType);
          }
          i++;
        }
      }
    };
    PdfPath2.prototype.addPoint = function(point, pointType) {
      this.points.push(point);
      this.types.push(pointType);
    };
    PdfPath2.prototype.closeFigure = function(index) {
      if (typeof index === "undefined") {
        if (this.pointCount > 0) {
          this.closeFigure(this.pointCount - 1);
        }
        this.startFigure();
      } else {
        if (index < 0) {
          throw new Error("IndexOutOfRangeException()");
        }
        var pt = this.types[index];
        pt = pt | PathPointType.CloseSubpath;
        this.types[index] = pt;
      }
    };
    return PdfPath2;
  }(PdfFillElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/rectangle-area.js
var __extends80 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfRectangleArea = (
  /** @class */
  function(_super) {
    __extends80(PdfRectangleArea2, _super);
    function PdfRectangleArea2(arg1, arg2, arg3, arg4, arg5, arg6) {
      var _this = _super.call(this) || this;
      _this.bounds = new RectangleF(0, 0, 0, 0);
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof PdfPen) {
        _this = _super.call(this, arg1, arg2) || this;
        if (arg3 instanceof RectangleF) {
          _this.bounds = arg3;
        } else {
          _this.bounds = new RectangleF(arg3, arg4, arg5, arg6);
        }
      } else if (arg1 instanceof RectangleF) {
        _this.bounds = arg1;
      } else {
        _this.bounds = new RectangleF(arg1, arg2, arg3, arg4);
      }
      return _this;
    }
    Object.defineProperty(PdfRectangleArea2.prototype, "x", {
      //Properties
      /**
       * Gets or sets the X co-ordinate of the upper-left corner of this the element.
       * @public
       */
      get: function() {
        return this.bounds.x;
      },
      set: function(value) {
        this.bounds.x = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRectangleArea2.prototype, "y", {
      /**
       * Gets or sets the Y co-ordinate of the upper-left corner of this the element.
       * @public
       */
      get: function() {
        return this.bounds.y;
      },
      set: function(value) {
        this.bounds.y = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRectangleArea2.prototype, "width", {
      /**
       * Gets or sets the width of this element.
       * @public
       */
      get: function() {
        return this.bounds.width;
      },
      set: function(value) {
        this.bounds.width = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfRectangleArea2.prototype, "height", {
      /**
       * Gets or sets the height of this element.
       * @public
       */
      get: function() {
        return this.bounds.height;
      },
      set: function(value) {
        this.bounds.height = value;
      },
      enumerable: true,
      configurable: true
    });
    PdfRectangleArea2.prototype.getBoundsInternal = function() {
      return this.bounds;
    };
    return PdfRectangleArea2;
  }(PdfFillElement)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/ellipse-part.js
var __extends81 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfEllipsePart = (
  /** @class */
  function(_super) {
    __extends81(PdfEllipsePart2, _super);
    function PdfEllipsePart2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      var _this = _super.call(this) || this;
      _this.startAngle = 0;
      _this.sweepAngle = 0;
      if (typeof arg1 === "undefined") {
      } else if (arg1 instanceof RectangleF && typeof arg2 !== "undefined" && typeof arg3 !== "undefined") {
        _this = _super.call(this, arg1) || this;
        _this.startAngle = arg2;
        _this.sweepAngle = arg3;
      } else if (arg1 instanceof PdfPen) {
        if (arg3 instanceof RectangleF) {
          _this = _super.call(this, arg1, arg2, arg3) || this;
          _this.startAngle = arg4;
          _this.sweepAngle = arg5;
        } else {
          _this = _super.call(this, arg1, arg2, arg3, arg4, arg5, arg6) || this;
          _this.startAngle = arg7;
          _this.sweepAngle = arg8;
        }
      } else {
        _this = _super.call(this, arg1, arg2, arg3, arg4) || this;
        _this.startAngle = arg5;
        _this.sweepAngle = arg6;
      }
      return _this;
    }
    return PdfEllipsePart2;
  }(PdfRectangleArea)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/arc.js
var __extends82 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfArc = (
  /** @class */
  function(_super) {
    __extends82(PdfArc2, _super);
    function PdfArc2(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      var _this = this;
      if (typeof arg1 === "undefined") {
        _this = _super.call(this) || this;
      } else if (arg1 instanceof RectangleF) {
        _this = _super.call(this, arg1, arg2, arg3) || this;
      } else if (arg1 instanceof PdfPen) {
        if (arg2 instanceof RectangleF) {
          _this = _super.call(this, arg1, null, arg2, arg3, arg4) || this;
        } else if (typeof arg6 === "undefined" && typeof arg7 === "undefined") {
          _this = _super.call(this, arg1, null, 0, 0, arg2, arg3, arg4, arg5) || this;
        } else if (typeof arg6 !== "undefined" && typeof arg7 !== "undefined") {
          _this = _super.call(this, arg1, null, arg2, arg3, arg4, arg5, arg6, arg7) || this;
        }
      } else if (typeof arg1 !== "undefined" && typeof arg5 === "undefined" && typeof arg6 === "undefined") {
        _this = _super.call(this, 0, 0, arg1, arg2, arg3, arg4) || this;
      } else if (typeof arg1 !== "undefined" && typeof arg5 !== "undefined" && typeof arg6 !== "undefined") {
        _this = _super.call(this, arg1, arg2, arg3, arg4, arg5, arg6) || this;
      }
      return _this;
    }
    PdfArc2.prototype.draw = function(argu1, arg2, arg3, arg4) {
      if (arg2 instanceof PointF && typeof arg2.width === "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(argu1, arg2.x, arg2.y);
      } else if (arg2 instanceof RectangleF && typeof arg2.width !== "undefined" && typeof arg3 === "undefined") {
        return this.drawHelper(argu1, arg2, null);
      } else if (typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "undefined") {
        return this.drawHelper(argu1, arg2, arg3, null);
      } else if (arg2 instanceof PointF && arg3 instanceof PdfLayoutFormat) {
        return this.drawHelper(argu1, arg2.x, arg2.y, arg3);
      } else if (typeof arg2 === "number" && (arg4 instanceof PdfLayoutFormat || arg4 == null) && typeof arg3 === "number") {
        var widthValue = argu1.graphics.clientSize.width - arg2;
        var layoutRect = new RectangleF(arg2, arg3, widthValue, 0);
        return this.drawHelper(argu1, layoutRect, arg4);
      } else {
        return this.drawHelper(argu1, arg2, arg3);
      }
    };
    PdfArc2.prototype.drawInternal = function(graphics) {
      if (graphics == null) {
        throw new Error("ArgumentNullException : graphics");
      }
      graphics.drawArc(this.obtainPen(), this.bounds, this.startAngle, this.sweepAngle);
    };
    return PdfArc2;
  }(PdfEllipsePart)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-true-type-font.js
var __extends83 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PdfTrueTypeFont = (
  /** @class */
  function(_super) {
    __extends83(PdfTrueTypeFont2, _super);
    function PdfTrueTypeFont2(base64String, size, style) {
      var _this = _super.call(this, size) || this;
      _this.isEmbedFont = false;
      _this.isUnicode = true;
      if (style !== void 0) {
        _this.createFontInternal(base64String, style);
      } else {
        _this.createFontInternal(base64String, PdfFontStyle.Regular);
      }
      return _this;
    }
    PdfTrueTypeFont2.prototype.equalsToFont = function(font) {
      var result = false;
      return result;
    };
    PdfTrueTypeFont2.prototype.getLineWidth = function(line, format) {
      var width = 0;
      if (format !== null && typeof format !== "undefined" && format.textDirection !== PdfTextDirection.None) {
        var returnValue = this.getUnicodeLineWidth(
          line,
          /*out*/
          width,
          format
        );
        width = returnValue.width;
      } else {
        width = this.fontInternal.getLineWidth(line);
      }
      var size = this.metrics.getSize(format);
      width *= PdfFont.charSizeMultiplier * size;
      width = this.applyFormatSettings(line, format, width);
      return width;
    };
    PdfTrueTypeFont2.prototype.getCharWidth = function(charCode, format) {
      var codeWidth = this.fontInternal.getCharWidth(charCode);
      var size = this.metrics.getSize(format);
      codeWidth *= 1e-3 * size;
      return codeWidth;
    };
    PdfTrueTypeFont2.prototype.createFontInternal = function(base64String, style) {
      this.fontInternal = new UnicodeTrueTypeFont(base64String, this.size);
      this.calculateStyle(style);
      this.initializeInternals();
    };
    PdfTrueTypeFont2.prototype.calculateStyle = function(style) {
      var iStyle = this.fontInternal.ttfMetrics.macStyle;
      if ((style & PdfFontStyle.Underline) !== 0) {
        iStyle |= PdfFontStyle.Underline;
      }
      if ((style & PdfFontStyle.Strikeout) !== 0) {
        iStyle |= PdfFontStyle.Strikeout;
      }
      this.setStyle(iStyle);
    };
    PdfTrueTypeFont2.prototype.initializeInternals = function() {
      var equalFont = null;
      if (PdfDocument.enableCache) {
        equalFont = PdfDocument.cache.search(this);
      }
      var internals = null;
      if (equalFont !== null && equalFont !== void 0) {
        internals = equalFont.getInternals();
        var metrics = equalFont.metrics;
        metrics = metrics.clone();
        metrics.size = this.size;
        this.metrics = metrics;
        this.fontInternal = equalFont.fontInternal;
      } else {
        if (equalFont == null) {
          if (this.fontInternal instanceof UnicodeTrueTypeFont) {
            this.fontInternal.isEmbed = this.isEmbedFont;
          }
          this.fontInternal.createInternals();
          internals = this.fontInternal.getInternals();
          this.metrics = this.fontInternal.metrics;
        }
      }
      this.metrics.isUnicodeFont = true;
      this.setInternals(internals);
    };
    PdfTrueTypeFont2.prototype.setSymbols = function(text) {
      var internalFont = this.fontInternal;
      if (internalFont != null) {
        internalFont.setSymbols(text);
      }
    };
    Object.defineProperty(PdfTrueTypeFont2.prototype, "Unicode", {
      /**
       * Property
       *
       */
      get: function() {
        return this.isUnicode;
      },
      enumerable: true,
      configurable: true
    });
    PdfTrueTypeFont2.prototype.getUnicodeLineWidth = function(line, width, format) {
      width = 0;
      var glyphIndices = null;
      var rtlRender = new RtlRenderer();
      var result = rtlRender.getGlyphIndex(
        line,
        this,
        format.textDirection === PdfTextDirection.RightToLeft ? true : false,
        /*out*/
        glyphIndices,
        true
      );
      var resultGlyph = result.success;
      glyphIndices = result.glyphs;
      if (resultGlyph && glyphIndices !== null) {
        var ttfReader = this.fontInternal.ttfReader;
        for (var i = 0, len = glyphIndices.length; i < len; i++) {
          var glyphIndex = glyphIndices[i];
          var glyph = ttfReader.getGlyph(glyphIndex);
          if (glyph !== null && typeof glyph !== "undefined") {
            width += glyph.width;
          }
        }
      }
      return {
        success: resultGlyph,
        width
      };
    };
    return PdfTrueTypeFont2;
  }(PdfFont)
);

// node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-template-element.js
var PdfPageTemplateElement = (
  /** @class */
  function() {
    function PdfPageTemplateElement2(arg1, arg2, arg3, arg4, arg5) {
      if (arg1 instanceof RectangleF && typeof arg2 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg1.width, arg1.height, null);
      } else if (arg1 instanceof RectangleF && arg2 instanceof PdfPage && typeof arg3 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg1.width, arg1.height, arg2);
      } else if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg2.width, arg2.height, null);
      } else if (arg1 instanceof PointF && arg2 instanceof SizeF && arg3 instanceof PdfPage && typeof arg4 === "undefined") {
        this.InitiateBounds(arg1.x, arg1.y, arg2.width, arg2.height, arg3);
      } else if (arg1 instanceof SizeF && typeof arg2 === "undefined") {
        this.InitiateBounds(0, 0, arg1.width, arg1.height, null);
      } else if (typeof arg1 === "number" && typeof arg2 === "number" && typeof arg3 === "undefined") {
        this.InitiateBounds(0, 0, arg1, arg2, null);
      } else if (typeof arg1 === "number" && typeof arg2 === "number" && arg3 instanceof PdfPage && typeof arg4 === "undefined") {
        this.InitiateBounds(0, 0, arg1, arg2, arg3);
      } else if (typeof arg1 === "number" && typeof arg2 === "number" && typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "undefined") {
        this.InitiateBounds(arg1, arg2, arg3, arg4, null);
      } else {
        this.InitiateBounds(arg1, arg2, arg3, arg4, null);
      }
    }
    Object.defineProperty(PdfPageTemplateElement2.prototype, "dock", {
      // Properties
      /**
       * Gets or sets the `dock style` of the page template element.
       * @private
       */
      get: function() {
        return this.dockStyle;
      },
      set: function(value) {
        this.dockStyle = value;
        this.resetAlignment();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "alignment", {
      /**
       * Gets or sets `alignment` of the page template element.
       * @private
       */
      get: function() {
        return this.alignmentStyle;
      },
      set: function(value) {
        this.setAlignment(value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "foreground", {
      /**
       * Indicates whether the page template is located `in front of the page layers or behind of it`.
       * @private
       */
      get: function() {
        return this.isForeground;
      },
      set: function(value) {
        this.isForeground = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "background", {
      /**
       * Indicates whether the page template is located `behind of the page layers or in front of it`.
       * @private
       */
      get: function() {
        return !this.isForeground;
      },
      set: function(value) {
        this.isForeground = !value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "location", {
      /**
       * Gets or sets `location` of the page template element.
       * @private
       */
      get: function() {
        return this.currentLocation;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.currentLocation = value;
        } else {
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "x", {
      /**
       * Gets or sets `X` co-ordinate of the template element on the page.
       * @private
       */
      get: function() {
        var value = typeof this.currentLocation !== "undefined" ? this.currentLocation.x : 0;
        return value;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.currentLocation.x = value;
        } else {
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "y", {
      /**
       * Gets or sets `Y` co-ordinate of the template element on the page.
       * @private
       */
      get: function() {
        var value = typeof this.currentLocation !== "undefined" ? this.currentLocation.y : 0;
        return value;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.currentLocation.y = value;
        } else {
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "size", {
      /**
       * Gets or sets `size` of the page template element.
       * @private
       */
      get: function() {
        return this.template.size;
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.template.reset(value);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "width", {
      /**
       * Gets or sets `width` of the page template element.
       * @private
       */
      get: function() {
        return this.template.width;
      },
      set: function(value) {
        if (this.template.width !== value && this.type === TemplateType.None) {
          var size = this.template.size;
          size.width = value;
          this.template.reset(size);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "height", {
      /**
       * Gets or sets `height` of the page template element.
       * @private
       */
      get: function() {
        return this.template.height;
      },
      set: function(value) {
        if (this.template.height !== value && this.type === TemplateType.None) {
          var size = this.template.size;
          size.height = value;
          this.template.reset(size);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "graphics", {
      /**
       * Gets `graphics` context of the page template element.
       * @private
       */
      get: function() {
        return this.template.graphics;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "template", {
      /**
       * Gets Pdf `template` object.
       * @private
       */
      get: function() {
        return this.pdfTemplate;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "type", {
      /**
       * Gets or sets `type` of the usage of this page template.
       * @private
       */
      get: function() {
        return this.templateType;
      },
      set: function(value) {
        this.updateDocking(value);
        this.templateType = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PdfPageTemplateElement2.prototype, "bounds", {
      /**
       * Gets or sets `bounds` of the page template.
       * @public
       */
      get: function() {
        return new RectangleF(new PointF(this.x, this.y), this.size);
      },
      set: function(value) {
        if (this.type === TemplateType.None) {
          this.location = new PointF(value.x, value.y);
          this.size = new SizeF(value.width, value.height);
        }
      },
      enumerable: true,
      configurable: true
    });
    PdfPageTemplateElement2.prototype.InitiateBounds = function(arg1, arg2, arg3, arg4, arg5) {
      this.x = arg1;
      this.y = arg2;
      this.pdfTemplate = new PdfTemplate(arg3, arg4);
    };
    PdfPageTemplateElement2.prototype.updateDocking = function(type) {
      if (type !== TemplateType.None) {
        switch (type) {
          case TemplateType.Top:
            this.dock = PdfDockStyle.Top;
            break;
          case TemplateType.Bottom:
            this.dock = PdfDockStyle.Bottom;
            break;
          case TemplateType.Left:
            this.dock = PdfDockStyle.Left;
            break;
          case TemplateType.Right:
            this.dock = PdfDockStyle.Right;
            break;
        }
        this.resetAlignment();
      }
    };
    PdfPageTemplateElement2.prototype.resetAlignment = function() {
      this.alignment = PdfAlignmentStyle.None;
    };
    PdfPageTemplateElement2.prototype.setAlignment = function(alignment) {
      if (this.dock === PdfDockStyle.None) {
        this.alignmentStyle = alignment;
      } else {
        var canBeSet = false;
        switch (this.dock) {
          case PdfDockStyle.Left:
            canBeSet = alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.MiddleLeft || alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Top:
            canBeSet = alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.TopCenter || alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Right:
            canBeSet = alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.MiddleRight || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Bottom:
            canBeSet = alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.BottomCenter || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None;
            break;
          case PdfDockStyle.Fill:
            canBeSet = alignment === PdfAlignmentStyle.MiddleCenter || alignment === PdfAlignmentStyle.None;
            break;
        }
        if (canBeSet) {
          this.alignmentStyle = alignment;
        }
      }
    };
    PdfPageTemplateElement2.prototype.draw = function(layer, document2) {
      var page = layer.page;
      var bounds = this.calculateBounds(page, document2);
      layer.graphics.drawPdfTemplate(this.template, new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));
    };
    PdfPageTemplateElement2.prototype.calculateBounds = function(page, document2) {
      var result = this.bounds;
      if (this.alignmentStyle !== PdfAlignmentStyle.None) {
        result = this.getAlignmentBounds(page, document2);
      } else if (this.dockStyle !== PdfDockStyle.None) {
        result = this.getDockBounds(page, document2);
      }
      return result;
    };
    PdfPageTemplateElement2.prototype.getAlignmentBounds = function(page, document2) {
      var result = this.bounds;
      if (this.type === TemplateType.None) {
        result = this.getSimpleAlignmentBounds(page, document2);
      } else {
        result = this.getTemplateAlignmentBounds(page, document2);
      }
      return result;
    };
    PdfPageTemplateElement2.prototype.getSimpleAlignmentBounds = function(page, document2) {
      var bounds = this.bounds;
      var pdfSection = page.section;
      var actualBounds = pdfSection.getActualBounds(document2, page, false);
      var x = this.x;
      var y = this.y;
      switch (this.alignmentStyle) {
        case PdfAlignmentStyle.TopLeft:
          x = 0;
          y = 0;
          break;
        case PdfAlignmentStyle.TopCenter:
          x = (actualBounds.width - this.width) / 2;
          y = 0;
          break;
        case PdfAlignmentStyle.TopRight:
          x = actualBounds.width - this.width;
          y = 0;
          break;
        case PdfAlignmentStyle.MiddleLeft:
          x = 0;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleCenter:
          x = (actualBounds.width - this.width) / 2;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleRight:
          x = actualBounds.width - this.width;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.BottomLeft:
          x = 0;
          y = actualBounds.height - this.height;
          break;
        case PdfAlignmentStyle.BottomCenter:
          x = (actualBounds.width - this.width) / 2;
          y = actualBounds.height - this.height;
          break;
        case PdfAlignmentStyle.BottomRight:
          x = actualBounds.width - this.width;
          y = actualBounds.height - this.height;
          break;
      }
      bounds.x = x;
      bounds.y = y;
      return bounds;
    };
    PdfPageTemplateElement2.prototype.getTemplateAlignmentBounds = function(page, document2) {
      var result = this.bounds;
      var section = page.section;
      var actualBounds = section.getActualBounds(document2, page, false);
      var x = this.x;
      var y = this.y;
      switch (this.alignmentStyle) {
        case PdfAlignmentStyle.TopLeft:
          if (this.type === TemplateType.Left) {
            x = this.convertSign(actualBounds.x);
            y = 0;
          } else if (this.type === TemplateType.Top) {
            x = this.convertSign(actualBounds.x);
            y = this.convertSign(actualBounds.y);
          }
          break;
        case PdfAlignmentStyle.TopCenter:
          x = (actualBounds.width - this.width) / 2;
          y = this.convertSign(actualBounds.y);
          break;
        case PdfAlignmentStyle.TopRight:
          if (this.type === TemplateType.Right) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = 0;
          } else if (this.type === TemplateType.Top) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = this.convertSign(actualBounds.y);
          }
          break;
        case PdfAlignmentStyle.MiddleLeft:
          x = this.convertSign(actualBounds.x);
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleCenter:
          x = (actualBounds.width - this.width) / 2;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.MiddleRight:
          x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
          y = (actualBounds.height - this.height) / 2;
          break;
        case PdfAlignmentStyle.BottomLeft:
          if (this.type === TemplateType.Left) {
            x = this.convertSign(actualBounds.x);
            y = actualBounds.height - this.height;
          } else if (this.type === TemplateType.Bottom) {
            x = this.convertSign(actualBounds.x);
            y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          }
          break;
        case PdfAlignmentStyle.BottomCenter:
          x = (actualBounds.width - this.width) / 2;
          y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          break;
        case PdfAlignmentStyle.BottomRight:
          if (this.type === TemplateType.Right) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = actualBounds.height - this.height;
          } else if (this.type === TemplateType.Bottom) {
            x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
            y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          }
          break;
      }
      result.x = x;
      result.y = y;
      return result;
    };
    PdfPageTemplateElement2.prototype.getDockBounds = function(page, document2) {
      var result = this.bounds;
      if (this.type === TemplateType.None) {
        result = this.getSimpleDockBounds(page, document2);
      } else {
        result = this.getTemplateDockBounds(page, document2);
      }
      return result;
    };
    PdfPageTemplateElement2.prototype.getSimpleDockBounds = function(page, document2) {
      var result = this.bounds;
      var section = page.section;
      var actualBounds = section.getActualBounds(document2, page, false);
      var x = this.x;
      var y = this.y;
      var width = this.width;
      var height = this.height;
      switch (this.dockStyle) {
        case PdfDockStyle.Left:
          x = 0;
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Top:
          x = 0;
          y = 0;
          width = actualBounds.width;
          height = this.height;
          break;
        case PdfDockStyle.Right:
          x = actualBounds.width - this.width;
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Bottom:
          x = 0;
          y = actualBounds.height - this.height;
          width = actualBounds.width;
          height = this.height;
          break;
        case PdfDockStyle.Fill:
          x = 0;
          x = 0;
          width = actualBounds.width;
          height = actualBounds.height;
          break;
      }
      result = new RectangleF(x, y, width, height);
      return result;
    };
    PdfPageTemplateElement2.prototype.getTemplateDockBounds = function(page, document2) {
      var result = this.bounds;
      var section = page.section;
      var actualBounds = section.getActualBounds(document2, page, false);
      var actualSize = section.pageSettings.getActualSize();
      var x = this.x;
      var y = this.y;
      var width = this.width;
      var height = this.height;
      switch (this.dockStyle) {
        case PdfDockStyle.Left:
          x = this.convertSign(actualBounds.x);
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Top:
          x = this.convertSign(actualBounds.x);
          y = this.convertSign(actualBounds.y);
          width = actualSize.width;
          height = this.height;
          if (actualBounds.height < 0) {
            y = actualSize.height - actualBounds.y;
          }
          break;
        case PdfDockStyle.Right:
          x = actualBounds.width + section.getRightIndentWidth(document2, page, false) - this.width;
          y = 0;
          width = this.width;
          height = actualBounds.height;
          break;
        case PdfDockStyle.Bottom:
          x = this.convertSign(actualBounds.x);
          y = actualBounds.height + section.getBottomIndentHeight(document2, page, false) - this.height;
          width = actualSize.width;
          height = this.height;
          if (actualBounds.height < 0) {
            y -= actualSize.height;
          }
          break;
        case PdfDockStyle.Fill:
          x = 0;
          x = 0;
          width = actualBounds.width;
          height = actualBounds.height;
          break;
      }
      result = new RectangleF(x, y, width, height);
      return result;
    };
    PdfPageTemplateElement2.prototype.convertSign = function(value) {
      return value !== 0 || value === 0 && 1 / value === -Infinity ? -value : value;
    };
    return PdfPageTemplateElement2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/pdf-export.js
var PdfExport = (
  /** @class */
  function() {
    function PdfExport2(parent) {
      this.hideColumnInclude = false;
      this.currentViewData = false;
      this.customDataSource = false;
      this.isGrouping = false;
      this.headerOnPages = [];
      this.drawPosition = {
        xPosition: 0,
        yPosition: 0
      };
      this.parent = parent;
      this.helper = new ExportHelper(parent);
      this.gridPool = {};
    }
    PdfExport2.prototype.getModuleName = function() {
      return "PdfExport";
    };
    PdfExport2.prototype.init = function(parent) {
      this.exportValueFormatter = new ExportValueFormatter(parent.locale);
      this.pdfDocument = void 0;
      this.hideColumnInclude = false;
      this.currentViewData = false;
      this.parent = parent;
      this.isGrouping = false;
      this.isExporting = true;
      parent.id = getUid("main-grid");
      this.gridPool[parent.id] = false;
      this.pdfPageSettings = new PdfPageSettings();
    };
    PdfExport2.prototype.exportWithData = function(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport, reject) {
      var _this = this;
      this.init(parent);
      if (!isNullOrUndefined(pdfDoc)) {
        this.pdfDocument = pdfDoc;
      } else {
        this.pdfDocument = new PdfDocument();
      }
      this.processExport(parent, returnType, pdfExportProperties, isMultipleExport).then(function() {
        _this.isExporting = false;
        parent.trigger(pdfExportComplete, _this.isBlob ? {
          promise: _this.blobPromise
        } : {
          gridInstance: _this.parent
        });
        _this.parent.log("exporting_complete", _this.getModuleName());
        resolve(_this.pdfDocument);
      }).catch(function(e) {
        reject(_this.pdfDocument);
        _this.parent.trigger(actionFailure, e);
      });
    };
    PdfExport2.prototype.Map = function(parent, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
      var _this = this;
      this.data = new Data(this.parent);
      this.isBlob = isBlob;
      this.gridPool = {};
      var query = pdfExportProperties && pdfExportProperties.query ? pdfExportProperties.query : new Query();
      if ((parent.childGrid || parent.detailTemplate) && !(!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.hierarchyExportMode === "None")) {
        parent.expandedRows = getPrintGridModel(parent).expandedRows;
      }
      var args = {
        requestType: "beforePdfExport",
        cancel: false,
        headerPageNumbers: [],
        gridDrawPosition: {
          xPosition: 0,
          yPosition: 0
        },
        generateQuery: false
      };
      var gridObject = "gridObject";
      args["" + gridObject] = parent;
      var can = "cancel";
      var generateQuery2 = "generateQuery";
      var header = "headerPageNumbers";
      var drawPos = "gridDrawPosition";
      parent.trigger(beforePdfExport, args);
      if (args["" + can] === true) {
        return new Promise(function(resolve, reject) {
          return resolve();
        });
      }
      if (isExportColumns(pdfExportProperties)) {
        updateColumnTypeForExportColumns(pdfExportProperties, parent);
      }
      if (args["" + generateQuery2]) {
        query = ExportHelper.getQuery(parent, this.data);
      }
      this.headerOnPages = args["" + header];
      this.drawPosition = args["" + drawPos];
      this.parent.log("exporting_begin", this.getModuleName());
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)) {
        pdfExportProperties.dataSource = pdfExportProperties.dataSource instanceof DataManager ? pdfExportProperties.dataSource : new DataManager(pdfExportProperties.dataSource);
        if (isNullOrUndefined(query.isCountRequired) || parent.aggregates) {
          query.isCountRequired = true;
        }
        return new Promise(function(resolve, reject) {
          pdfExportProperties.dataSource.executeQuery(query).then(function(returnType) {
            _this.exportWithData(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport, reject);
          });
        });
      } else if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType === "CurrentPage" && !(this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote())) {
        return new Promise(function(resolve, reject) {
          _this.exportWithData(parent, pdfDoc, resolve, _this.parent.getCurrentViewRecords(), pdfExportProperties, isMultipleExport, reject);
        });
      } else {
        var allPromise_1 = [];
        var query_1 = ExportHelper.getQuery(parent, this.data);
        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote()) {
          if (isNullOrUndefined(pdfExportProperties)) pdfExportProperties = {
            hierarchyExportMode: "All"
          };
          pdfExportProperties.hierarchyExportMode = pdfExportProperties.hierarchyExportMode === "None" ? "None" : "All";
          if (pdfExportProperties.hierarchyExportMode === "All") query_1.lazyLoad = [];
        }
        allPromise_1.push(this.data.getData({}, query_1));
        allPromise_1.push(this.helper.getColumnData(parent));
        return new Promise(function(resolve, reject) {
          Promise.all(allPromise_1).then(function(e) {
            _this.init(parent);
            if (!isNullOrUndefined(pdfDoc)) {
              _this.pdfDocument = pdfDoc["document"];
            } else {
              _this.pdfDocument = new PdfDocument();
            }
            _this.processExport(parent, e[0], pdfExportProperties, isMultipleExport, pdfDoc).then(function(results) {
              _this.isExporting = false;
              parent.trigger(pdfExportComplete, _this.isBlob ? {
                promise: _this.blobPromise
              } : {
                gridInstance: _this.parent
              });
              _this.parent.log("exporting_complete", _this.getModuleName());
              if (pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") {
                resolve(results);
              } else {
                resolve(_this.pdfDocument);
              }
            }).catch(function(e2) {
              reject(_this.pdfDocument);
              _this.parent.trigger(actionFailure, e2);
            });
          });
        });
      }
    };
    PdfExport2.prototype.processExport = function(gObj, returnType, pdfExportProperties, isMultipleExport, pdfDoc) {
      var _this = this;
      var section = !(pdfDoc && pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") ? this.pdfDocument.sections.add() : null;
      var pdfGrid;
      this.processSectionExportProperties(section, pdfExportProperties);
      var pdfPage = pdfDoc && pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage" ? pdfDoc["result"].page : section.pages.add();
      return new Promise(function(resolve, reject) {
        pdfGrid = _this.processGridExport(gObj, returnType, pdfExportProperties);
        _this.globalResolve = resolve;
        _this.gridPool[gObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
      }).then(function() {
        var xPosition = _this.drawPosition["xPosition"];
        var yPosition;
        if (pdfDoc && pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") {
          yPosition = pdfDoc["result"].bounds.y + pdfDoc["result"].bounds.height;
          if (pdfExportProperties.multipleExport.blankSpace) {
            yPosition = pdfDoc["result"].bounds.y + pdfDoc["result"].bounds.height + pdfExportProperties.multipleExport.blankSpace;
          }
        } else {
          yPosition = _this.drawPosition["yPosition"];
        }
        var result;
        if (isMultipleExport) {
          var layoutFormat = new PdfGridLayoutFormat();
          layoutFormat.layout = PdfLayoutType.Paginate;
          layoutFormat.break = PdfLayoutBreakType.FitPage;
          layoutFormat.paginateBounds = new RectangleF(0, 0, pdfPage.getClientSize().width, pdfPage.getClientSize().height);
          result = pdfGrid.draw(pdfPage, xPosition, yPosition, layoutFormat);
        } else {
          result = pdfGrid.draw(pdfPage, xPosition, yPosition);
        }
        _this.drawHeader(pdfExportProperties);
        if (!isMultipleExport) {
          if (!_this.isBlob) {
            if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.fileName) {
              _this.pdfDocument.save(pdfExportProperties.fileName);
            } else {
              _this.pdfDocument.save("Export.pdf");
            }
          } else {
            _this.blobPromise = _this.pdfDocument.save();
          }
          _this.pdfDocument.destroy();
          delete gObj.expandedRows;
        }
        if (pdfExportProperties && pdfExportProperties.multipleExport && pdfExportProperties.multipleExport.type === "AppendToPage") {
          return {
            document: _this.pdfDocument,
            result
          };
        } else {
          return _this.pdfDocument;
        }
      });
    };
    PdfExport2.prototype.processSectionExportProperties = function(section, pdfExportProperties) {
      if (!isNullOrUndefined(section) && !isNullOrUndefined(pdfExportProperties) && (!isNullOrUndefined(pdfExportProperties.pageOrientation) || !isNullOrUndefined(pdfExportProperties.pageSize))) {
        this.pdfPageSettings.orientation = pdfExportProperties.pageOrientation === "Landscape" ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        this.pdfPageSettings.size = this.getPageSize(pdfExportProperties.pageSize);
        section.setPageSettings(this.pdfPageSettings);
      }
      return section;
    };
    PdfExport2.prototype.processGridExport = function(gObj, returnType, pdfExportProperties) {
      var allowHorizontalOverflow = true;
      if (!isNullOrUndefined(pdfExportProperties)) {
        this.gridTheme = pdfExportProperties.theme;
        allowHorizontalOverflow = isNullOrUndefined(pdfExportProperties.allowHorizontalOverflow) ? true : pdfExportProperties.allowHorizontalOverflow;
      }
      var helper = new ExportHelper(gObj, this.helper.getForeignKeyData());
      var dataSource = this.processExportProperties(pdfExportProperties, returnType.result);
      var columns = isExportColumns(pdfExportProperties) ? prepareColumns(pdfExportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(gObj.columns);
      columns = columns.filter(function(columns2) {
        return isNullOrUndefined(columns2.commands);
      });
      var isGrouping = false;
      if (gObj.groupSettings.columns.length) {
        isGrouping = true;
      }
      if ((gObj.childGrid || gObj.detailTemplate) && !isNullOrUndefined(pdfExportProperties)) {
        gObj.hierarchyPrintMode = pdfExportProperties.hierarchyExportMode || "Expanded";
      }
      var pdfGrid = new PdfGrid();
      var headerThemeStyle = this.getHeaderThemeStyle();
      var border = headerThemeStyle.border;
      var headerFont = headerThemeStyle.font;
      var headerBrush = headerThemeStyle.brush;
      var returnValue = helper.getHeaders(columns, this.hideColumnInclude);
      var gridColumns = returnValue.columns;
      pdfGrid = this.processGridHeaders(gObj.groupSettings.columns.length, pdfGrid, returnValue.rows, gridColumns, border, headerFont, headerBrush, gObj, allowHorizontalOverflow, columns);
      this.setColumnProperties(gridColumns, pdfGrid, helper, gObj, allowHorizontalOverflow);
      var captionThemeStyle = this.getSummaryCaptionThemeStyle();
      if (!isNullOrUndefined(dataSource) && dataSource.length) {
        if (isGrouping) {
          if (!isNullOrUndefined(captionThemeStyle.border)) {
            border = captionThemeStyle.border;
          }
          this.processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, 0, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, returnType, pdfExportProperties, helper, 0);
        } else {
          this.processRecord(border, gridColumns, gObj, dataSource, pdfGrid, 0, pdfExportProperties, helper, 0);
        }
        if (!isNullOrUndefined(returnType.aggregates)) {
          var summaryModel = new SummaryModelGenerator(gObj);
          var sRows = void 0;
          var column = summaryModel.getColumns();
          column = column.filter(function(col) {
            return isNullOrUndefined(col.commands) && col.type !== "checkbox";
          });
          if (gObj.aggregates.length && this.parent !== gObj) {
            gObj.aggregateModule.prepareSummaryInfo();
          }
          if (this.customDataSource) {
            sRows = summaryModel.generateRows(dataSource, returnType.aggregates, null, null, column);
          } else if (this.currentViewData) {
            sRows = summaryModel.generateRows(this.parent.getCurrentViewRecords(), returnType.aggregates);
          } else if (isGrouping) {
            sRows = summaryModel.generateRows(dataSource.records, returnType.aggregates);
          } else {
            sRows = summaryModel.generateRows(returnType.result, returnType.aggregates, null, null, column);
          }
          this.processAggregates(sRows, pdfGrid, border, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, false, null, null, null, isGrouping ? false : true);
        }
      } else {
        var row2 = pdfGrid.rows.addRow();
        row2.style.setBorder(border);
      }
      return pdfGrid;
    };
    PdfExport2.prototype.getSummaryCaptionThemeStyle = function() {
      if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.caption)) {
        var fontSize = !isNullOrUndefined(this.gridTheme.caption.fontSize) ? this.gridTheme.caption.fontSize : 9.75;
        var fontFamily = !isNullOrUndefined(this.gridTheme.caption.fontName) ? this.getFontFamily(this.gridTheme.caption.fontName) : PdfFontFamily.Helvetica;
        var fontStyle = this.getFontStyle(this.gridTheme.caption);
        var pdfColor = new PdfColor(0, 0, 0);
        if (!isNullOrUndefined(this.gridTheme.caption.fontColor)) {
          var penBrushColor = this.hexToRgb(this.gridTheme.caption.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        var borderCaption = this.gridTheme.caption.border ? this.getBorderStyle(this.gridTheme.caption.border) : null;
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridTheme.caption.font)) {
          font = this.gridTheme.caption.font;
        }
        return {
          font,
          brush: new PdfSolidBrush(pdfColor),
          backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246)),
          border: borderCaption
        };
      } else {
        return {
          font: new PdfStandardFont(PdfFontFamily.Helvetica, 9.75),
          brush: new PdfSolidBrush(new PdfColor(0, 0, 0)),
          backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246))
        };
      }
    };
    PdfExport2.prototype.getGridPdfFont = function(args) {
      var fontFamily = "fontFamily";
      var fontSize = "fontSize";
      var fontStyle = "fontStyle";
      var isTrueType = "isTrueType";
      var style = 0;
      if (args.header && args.header.font) {
        var headerFont = args.header.font["" + fontFamily];
        var headerSize = args.header.font["" + fontSize];
        var headerStyle = args.header.font["" + fontStyle];
        style = isNullOrUndefined(PdfFontStyle["" + headerStyle]) ? 0 : PdfFontStyle["" + headerStyle];
        if (args.header.font["" + isTrueType]) {
          args.header.font = new PdfTrueTypeFont(headerFont, headerSize, style);
        } else {
          var fontFamily_1 = !isNullOrUndefined(headerFont) ? this.getFontFamily(headerFont) : PdfFontFamily.Helvetica;
          args.header.font = new PdfStandardFont(fontFamily_1, headerSize, style);
        }
      }
      if (args.caption && args.caption.font) {
        var captionFont = args.caption.font["" + fontFamily];
        var captionSize = args.caption.font["" + fontSize];
        var captionStyle = args.caption.font["" + fontStyle];
        style = isNullOrUndefined(PdfFontStyle["" + captionStyle]) ? 0 : PdfFontStyle["" + captionStyle];
        if (args.caption.font["" + isTrueType]) {
          args.caption.font = new PdfTrueTypeFont(captionFont, captionSize, style);
        } else {
          var fontFamily_2 = !isNullOrUndefined(captionFont) ? this.getFontFamily(captionFont) : PdfFontFamily.Helvetica;
          args.caption.font = new PdfStandardFont(fontFamily_2, captionSize, style);
        }
      }
      if (args.record && args.record.font) {
        var recordFont = args.record.font["" + fontFamily];
        var recordSize = args.record.font["" + fontSize];
        var recordStyle = args.record.font["" + fontStyle];
        style = isNullOrUndefined(PdfFontStyle["" + recordStyle]) ? 0 : PdfFontStyle["" + recordStyle];
        if (args.record.font["" + isTrueType]) {
          args.record.font = new PdfTrueTypeFont(recordFont, recordSize, style);
        } else {
          var fontFamily_3 = !isNullOrUndefined(recordFont) ? this.getFontFamily(recordFont) : PdfFontFamily.Helvetica;
          args.record.font = new PdfStandardFont(fontFamily_3, recordSize, style);
        }
      }
    };
    PdfExport2.prototype.getHeaderThemeStyle = function() {
      var border = new PdfBorders();
      if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.header)) {
        var fontFamily = !isNullOrUndefined(this.gridTheme.header.fontName) ? this.getFontFamily(this.gridTheme.header.fontName) : PdfFontFamily.Helvetica;
        var fontStyle = this.getFontStyle(this.gridTheme.header);
        var fontSize = !isNullOrUndefined(this.gridTheme.header.fontSize) ? this.gridTheme.header.fontSize : 10.5;
        var pdfColor = new PdfColor();
        if (!isNullOrUndefined(this.gridTheme.header.fontColor)) {
          var penBrushColor = this.hexToRgb(this.gridTheme.header.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridTheme.header.font)) {
          font = this.gridTheme.header.font;
        }
        return {
          border: this.getBorderStyle(this.gridTheme.header.border),
          font,
          brush: new PdfSolidBrush(pdfColor)
        };
      } else {
        border.all = new PdfPen(new PdfColor(234, 234, 234));
        return {
          border,
          font: new PdfStandardFont(PdfFontFamily.Helvetica, 10.5),
          brush: new PdfSolidBrush(new PdfColor(102, 102, 102))
        };
      }
    };
    PdfExport2.prototype.processGroupedRecords = function(pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index) {
      var _this = this;
      var groupIndex = level;
      var _loop_1 = function(dataSourceItems2) {
        var row2 = pdfGrid.rows.addRow();
        var col = gObj.getColumnByField(dataSourceItems2.field);
        var args = {
          value: dataSourceItems2.key,
          column: col,
          style: void 0,
          isForeignKey: col.isForeignColumn()
        };
        var value = gObj.getColumnByField(dataSourceItems2.field).headerText + ": " + (!col.enableGroupByFormat ? this_1.exportValueFormatter.formatCellValue(args) : dataSourceItems2.key) + " - " + dataSourceItems2.count + (dataSource.count > 1 ? " items" : " item");
        var cArgs = {
          captionText: value,
          type: "PDF",
          data: dataSourceItems2,
          style: void 0
        };
        this_1.parent.trigger(exportGroupCaption, cArgs, function(cArgs2) {
          row2.cells.getCell(groupIndex).value = cArgs2.captionText;
          row2.cells.getCell(groupIndex).style.stringFormat = new PdfStringFormat(PdfTextAlignment.Left);
          row2.style.setBorder(border);
          row2.style.setFont(font);
          row2.style.setTextBrush(brush);
          row2.style.setBackgroundBrush(backgroundBrush);
          if (!isNullOrUndefined(cArgs2.style)) {
            _this.processCellStyle(row2.cells.getCell(groupIndex), cArgs2);
          }
          var sRows;
          var captionSummaryModel = new CaptionSummaryModelGenerator(gObj);
          if (!isNullOrUndefined(dataSourceItems2.items.records)) {
            sRows = captionSummaryModel.generateRows(dataSourceItems2.items.records, dataSourceItems2);
          } else {
            sRows = captionSummaryModel.generateRows(dataSourceItems2.items, dataSourceItems2);
          }
          if (!isNullOrUndefined(sRows) && sRows.length === 0) {
            row2.cells.getCell(groupIndex + 1).columnSpan = pdfGrid.columns.count - (groupIndex + 1);
          }
          if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row2, groupIndex, null, null, gObj);
            _this.processGroupedRecords(pdfGrid, dataSourceItems2.items, gridColumns, gObj, border, groupIndex + 1, font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index);
            index = _this.rowIndex;
            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);
            sRows = groupSummaryModel.generateRows(dataSourceItems2.items.records, dataSourceItems2);
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);
          } else {
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row2, groupIndex, null, null, gObj);
            index = _this.processRecord(border, gridColumns, gObj, dataSourceItems2.items, pdfGrid, groupIndex + 1, pdfExportProperties, helper, index);
            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);
            sRows = groupSummaryModel.generateRows(dataSourceItems2.items, dataSourceItems2);
            var isGroupedFooter = true;
            _this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false, null, null, isGroupedFooter, null, gObj);
          }
        });
      };
      var this_1 = this;
      for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
        var dataSourceItems = dataSource_1[_i];
        _loop_1(dataSourceItems);
      }
    };
    PdfExport2.prototype.processGridHeaders = function(childLevels, pdfGrid, rows, gridColumn, border, headerFont, headerBrush, grid, allowHorizontalOverflow, eCols) {
      var _this = this;
      var columnCount = gridColumn.length + childLevels;
      var depth = measureColumnDepth(eCols);
      var cols = eCols;
      var index = 0;
      var rowNumber = [];
      for (var i = 0; i < rows.length; i++) {
        rowNumber[parseInt(i.toString(), 10)] = 0;
      }
      if (grid.groupSettings.columns.length) {
        index = grid.groupSettings.columns.length - 1;
        columnCount = columnCount - 1;
      }
      pdfGrid.columns.add(columnCount);
      pdfGrid.headers.add(rows.length);
      var applyTextAndSpan = function(rowIdx, colIdx, col, rowSpan, colSpan) {
        var gridHeader2 = pdfGrid.headers.getHeader(rowIdx);
        var pdfCell = gridHeader2.cells.getCell(colIdx);
        var cell = rows[parseInt(rowIdx.toString(), 10)].cells[grid.groupSettings.columns.length ? colIdx : rowNumber[parseInt(rowIdx.toString(), 10)]];
        rowNumber[parseInt(rowIdx.toString(), 10)] = rowNumber[parseInt(rowIdx.toString(), 10)] + 1;
        if (!isNullOrUndefined(col.headerTextAlign)) {
          pdfCell.style.stringFormat = _this.getHorizontalAlignment(col.headerTextAlign);
        }
        if (rowSpan > 0) {
          pdfCell.rowSpan = rowSpan;
          pdfCell.style.stringFormat = _this.getVerticalAlignment("Bottom", pdfCell.style.stringFormat, col.textAlign);
        }
        if (colSpan > 0) {
          pdfCell.columnSpan = colSpan;
        }
        gridHeader2.style.setBorder(border);
        gridHeader2.style.setFont(headerFont);
        gridHeader2.style.setTextBrush(headerBrush);
        pdfCell.value = col.headerText;
        if (!isNullOrUndefined(cell) && (cell.cellType === CellType.HeaderIndent || cell.cellType === CellType.DetailHeader)) {
          pdfCell.value = "";
          pdfCell.width = 20;
        }
        var args = {
          cell: pdfCell,
          gridCell: cell,
          style: pdfCell.style
        };
        _this.parent.trigger(pdfHeaderQueryCellInfo, args);
        var evtArgs = args;
        var setCellBorder = args.style.borders;
        var setCellFont = args.style.font;
        var setHeaderBrush = args.style.textBrush;
        if (!isNullOrUndefined(setCellBorder)) {
          gridHeader2.style.setBorder(setCellBorder);
        }
        if (!isNullOrUndefined(setCellFont)) {
          gridHeader2.style.setFont(setCellFont);
        }
        if (!isNullOrUndefined(setHeaderBrush)) {
          gridHeader2.style.setTextBrush(setHeaderBrush);
        }
        if (!isNullOrUndefined(evtArgs.style.verticalAlignment)) {
          pdfCell.style.stringFormat = _this.getVerticalAlignment(evtArgs.style.verticalAlignment, pdfCell.style.stringFormat);
        }
        if (!isNullOrUndefined(evtArgs.image)) {
          pdfCell.value = new PdfBitmap(evtArgs.image.base64);
        }
        if (!isNullOrUndefined(evtArgs.hyperLink)) {
          pdfCell.value = _this.setHyperLink(evtArgs);
        }
      };
      var recuHeader = function(cols2, depth2, spanCnt, colIndex, rowIndex, isRoot) {
        var cidx = 0;
        for (var i2 = 0; i2 < cols2.length; i2++) {
          if (isRoot) {
            cidx = cidx + spanCnt + (i2 === 0 ? 0 : -1);
            colIndex = cidx;
            spanCnt = 0;
          }
          if (!isRoot && !cols2[parseInt(i2.toString(), 10)].visible) {
            colIndex = colIndex - 1;
          }
          if (cols2[parseInt(i2.toString(), 10)].columns && cols2[parseInt(i2.toString(), 10)].columns.length) {
            var newSpanCnt = recuHeader(cols2[parseInt(i2.toString(), 10)].columns, depth2 - 1, 0, i2 + colIndex, rowIndex + 1, false);
            applyTextAndSpan(rowIndex, i2 + colIndex + index, cols2[parseInt(i2.toString(), 10)], 0, newSpanCnt);
            spanCnt = spanCnt + newSpanCnt;
            colIndex = colIndex + newSpanCnt - 1;
          } else if (cols2[parseInt(i2.toString(), 10)].visible || _this.hideColumnInclude) {
            spanCnt++;
            applyTextAndSpan(rowIndex, i2 + colIndex + index, cols2[parseInt(i2.toString(), 10)], depth2, 0);
          }
        }
        return spanCnt;
      };
      recuHeader(cols, depth, 0, 0, 0, true);
      if (pdfGrid.columns.count >= 6 && allowHorizontalOverflow) {
        pdfGrid.style.allowHorizontalOverflow = true;
      }
      return pdfGrid;
    };
    PdfExport2.prototype.processExportProperties = function(pdfExportProperties, dataSource) {
      if (!isNullOrUndefined(pdfExportProperties)) {
        if (!isNullOrUndefined(pdfExportProperties.theme)) {
          this.gridTheme = pdfExportProperties.theme;
        }
        var clientSize = this.pdfPageSettings.size;
        this.drawHeader(pdfExportProperties);
        if (!isNullOrUndefined(pdfExportProperties.footer)) {
          var footer = pdfExportProperties.footer;
          var position = new PointF(0, clientSize.width - 80 - footer.fromBottom * 0.75);
          var size = new SizeF(clientSize.width - 80, footer.height * 0.75);
          var bounds = new RectangleF(position, size);
          this.pdfDocument.template.bottom = this.drawPageTemplate(new PdfPageTemplateElement(bounds), footer);
        }
        if (!isNullOrUndefined(pdfExportProperties.includeHiddenColumn) && !this.isGrouping) {
          this.hideColumnInclude = pdfExportProperties.includeHiddenColumn;
        }
        if (!isNullOrUndefined(pdfExportProperties.dataSource)) {
          this.customDataSource = true;
          this.currentViewData = false;
        } else if (!isNullOrUndefined(pdfExportProperties.exportType)) {
          if (pdfExportProperties.exportType === "CurrentPage") {
            dataSource = this.parent.groupSettings && this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && !this.parent.getDataModule().isRemote() ? dataSource : this.parent.currentViewData;
            this.currentViewData = true;
            this.customDataSource = false;
          } else {
            this.currentViewData = false;
            this.customDataSource = false;
          }
        } else {
          this.currentViewData = false;
          this.customDataSource = false;
        }
      } else {
        this.currentViewData = false;
        this.customDataSource = false;
      }
      return dataSource;
    };
    PdfExport2.prototype.drawHeader = function(pdfExportProperties) {
      var _this = this;
      var clientSize = this.pdfPageSettings.size;
      if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.header)) {
        var header = pdfExportProperties.header;
        var position = new PointF(0, header.fromTop);
        var size = new SizeF(clientSize.width - 80, header.height * 0.75);
        var bounds = new RectangleF(position, size);
        if (!this.headerOnPages.length) {
          this.pdfDocument.template.top = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
        } else {
          var headerTemplate_1 = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
          this.headerOnPages.filter(function(index) {
            if (index - 1 >= 0 && index - 1 <= _this.pdfDocument.pages.count - 1) {
              _this.pdfDocument.pages.getPageByIndex(index - 1).graphics.drawPdfTemplate(headerTemplate_1.template, new PointF(0, 0));
            }
          });
        }
      }
    };
    PdfExport2.prototype.drawPageTemplate = function(template, element) {
      for (var _i = 0, _a = element.contents; _i < _a.length; _i++) {
        var content2 = _a[_i];
        this.processContentValidation(content2);
        switch (content2.type) {
          case "Text":
            if (content2.value === "" || content2.value === void 0 || content2.value === null || typeof content2.value !== "string") {
              throw new Error("please enter the valid input value in text content...");
            }
            this.drawText(template, content2);
            break;
          case "PageNumber":
            this.drawPageNumber(template, content2);
            break;
          case "Image":
            if (content2.src === void 0 || content2.src === null || content2.src === "") {
              throw new Error("please enter the valid base64 string in image content...");
            }
            this.drawImage(template, content2);
            break;
          case "Line":
            this.drawLine(template, content2);
            break;
          default:
            throw new Error("Please set valid content type...");
        }
      }
      return template;
    };
    PdfExport2.prototype.processContentValidation = function(content2) {
      if (content2.type === void 0 || content2.type === null) {
        throw new Error("please set valid content type...");
      } else {
        if (content2.type === "Line") {
          if (content2.points === void 0 || content2.points === null) {
            throw new Error("please enter valid points in " + content2.type + " content...");
          } else {
            if (content2.points.x1 === void 0 || content2.points.x1 === null || typeof content2.points.x1 !== "number") {
              throw new Error("please enter valid x1 co-ordinate in " + content2.type + " points...");
            }
            if (content2.points.y1 === void 0 || content2.points.y1 === null || typeof content2.points.y1 !== "number") {
              throw new Error("please enter valid y1 co-ordinate in " + content2.type + " points...");
            }
            if (content2.points.x2 === void 0 || content2.points.x2 === null || typeof content2.points.x2 !== "number") {
              throw new Error("please enter valid x2 co-ordinate in " + content2.type + " points...");
            }
            if (content2.points.y2 === void 0 || content2.points.y2 === null || typeof content2.points.y2 !== "number") {
              throw new Error("please enter valid y2 co-ordinate in " + content2.type + " points...");
            }
          }
        } else {
          if (content2.position === void 0 || content2.position === null) {
            throw new Error("please enter valid position in " + content2.type + " content...");
          } else {
            if (content2.position.x === void 0 || content2.position.x === null || typeof content2.position.x !== "number") {
              throw new Error("please enter valid x co-ordinate in " + content2.type + " position...");
            }
            if (content2.position.y === void 0 || content2.position.y === null || typeof content2.position.y !== "number") {
              throw new Error("please enter valid y co-ordinate in " + content2.type + " position...");
            }
          }
        }
      }
    };
    PdfExport2.prototype.drawText = function(pageTemplate, content2) {
      var font = this.getFont(content2);
      var brush = this.getBrushFromContent(content2);
      var pen = null;
      if (!isNullOrUndefined(content2.style.textPenColor)) {
        var penColor = this.hexToRgb(content2.style.textPenColor);
        pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
      }
      if (brush == null && pen == null) {
        brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var value = content2.value.toString();
      var x = content2.position.x * 0.75;
      var y = content2.position.y * 0.75;
      var format = new PdfStringFormat();
      if (!isNullOrUndefined(content2.style.stringFormat)) {
        format.alignment = content2.style.stringFormat.alignment;
      }
      var result = this.setContentFormat(content2, format);
      if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
        pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);
      } else {
        pageTemplate.graphics.drawString(value, font, pen, brush, x, y, format);
      }
    };
    PdfExport2.prototype.drawPageNumber = function(documentHeader, content2) {
      var font = this.getFont(content2);
      var brush = null;
      if (!isNullOrUndefined(content2.style.textBrushColor)) {
        var brushColor = this.hexToRgb(content2.style.textBrushColor);
        brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
      } else {
        brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
      }
      var pageNumber = new PdfPageNumberField(font, brush);
      pageNumber.numberStyle = this.getPageNumberStyle(content2.pageNumberType);
      var compositeField;
      var format;
      if (!isNullOrUndefined(content2.format)) {
        var total = "$total";
        var current = "$current";
        if (content2.format.indexOf(total) !== -1 && content2.format.indexOf(current) !== -1) {
          var pageCount = new PdfPageCountField(font);
          pageCount.numberStyle = this.getPageNumberStyle(content2.pageNumberType);
          if (content2.format.indexOf(total) > content2.format.indexOf(current)) {
            format = content2.format.replace(current, "0");
            format = format.replace(total, "1");
          } else {
            format = content2.format.replace(current, "1");
            format = format.replace(total, "0");
          }
          compositeField = new PdfCompositeField(font, brush, format, pageNumber, pageCount);
        } else if (content2.format.indexOf(current) !== -1 && content2.format.indexOf(total) === -1) {
          format = content2.format.replace(current, "0");
          compositeField = new PdfCompositeField(font, brush, format, pageNumber);
        } else {
          var pageCount = new PdfPageCountField(font);
          format = content2.format.replace(total, "0");
          compositeField = new PdfCompositeField(font, brush, format, pageCount);
        }
      } else {
        format = "{0}";
        compositeField = new PdfCompositeField(font, brush, format, pageNumber);
      }
      var x = content2.position.x * 0.75;
      var y = content2.position.y * 0.75;
      var result = this.setContentFormat(content2, compositeField.stringFormat);
      if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
        compositeField.stringFormat = result.format;
        compositeField.bounds = new RectangleF(x, y, result.size.width, result.size.height);
      }
      compositeField.draw(documentHeader.graphics, x, y);
    };
    PdfExport2.prototype.drawImage = function(documentHeader, content2) {
      var x = content2.position.x * 0.75;
      var y = content2.position.y * 0.75;
      var width = !isNullOrUndefined(content2.size) ? content2.size.width * 0.75 : void 0;
      var height = !isNullOrUndefined(content2.size) ? content2.size.height * 0.75 : void 0;
      var image = new PdfBitmap(content2.src);
      if (!isNullOrUndefined(width)) {
        documentHeader.graphics.drawImage(image, x, y, width, height);
      } else {
        documentHeader.graphics.drawImage(image, x, y);
      }
    };
    PdfExport2.prototype.drawLine = function(documentHeader, content2) {
      var x1 = content2.points.x1 * 0.75;
      var y1 = content2.points.y1 * 0.75;
      var x2 = content2.points.x2 * 0.75;
      var y2 = content2.points.y2 * 0.75;
      var pen = this.getPenFromContent(content2);
      if (!isNullOrUndefined(content2.style) && content2.style !== null) {
        if (!isNullOrUndefined(content2.style.penSize) && content2.style.penSize !== null && typeof content2.style.penSize === "number") {
          pen.width = content2.style.penSize * 0.75;
        }
        pen.dashStyle = this.getDashStyle(content2.style.dashStyle);
      }
      documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);
    };
    PdfExport2.prototype.processAggregates = function(sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow, groupIndex, isGroupedFooter, isAggregate, gObj) {
      for (var _i = 0, sRows_1 = sRows; _i < sRows_1.length; _i++) {
        var row2 = sRows_1[_i];
        var leastCaptionSummaryIndex = -1;
        var index = 0;
        var isEmpty = true;
        var value = [];
        var aggIdx = isAggregate ? 0 : 1;
        var gridRow = void 0;
        if (isNullOrUndefined(captionRow)) {
          gridRow = pdfGrid.rows.addRow();
          gridRow.style.setBorder(border);
          gridRow.style.setFont(font);
          gridRow.style.setTextBrush(brush);
          gridRow.style.setBackgroundBrush(backgroundBrush);
        }
        for (var i = 0; i < pdfGrid.columns.count + aggIdx; i++) {
          var cell = row2.cells[parseInt(index.toString(), 10)];
          if (cell.cellType === CellType.DetailFooterIntent) {
            i--;
            index++;
            continue;
          }
          if (!this.hideColumnInclude) {
            while (cell.visible === void 0) {
              if (cell.cellType === CellType.DetailFooterIntent) {
                continue;
              }
              if (!isNullOrUndefined(captionRow)) {
                if (!isNullOrUndefined(captionRow.cells.getCell(i).value)) {
                  value.push(captionRow.cells.getCell(i).value);
                  isEmpty = false;
                  if (!isCaption) {
                    i += 1;
                  }
                } else {
                  value.push("");
                }
              } else {
                value.push("");
              }
              i += 1;
              index = index + 1;
              cell = row2.cells[parseInt(index.toString(), 10)];
            }
            while (!isNullOrUndefined(cell.visible) && !cell.visible) {
              index = index + 1;
              cell = row2.cells[parseInt(index.toString(), 10)];
            }
          }
          if (cell.isDataCell) {
            var templateFn = {};
            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);
            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);
            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);
            if (footerTemplate || groupCaptionTemplate || groupFooterTemplate) {
              var result = this.getTemplateFunction(templateFn, i, leastCaptionSummaryIndex, cell);
              templateFn = result.templateFunction;
              leastCaptionSummaryIndex = result.leastCaptionSummaryIndex;
              var txt = void 0;
              var data = row2.data[cell.column.field ? cell.column.field : cell.column.columnName];
              if ((this.parent.isReact || this.parent.isVue || this.parent.isVue3 || this.parent.isAngular) && !(typeof cell.column.footerTemplate === "string" || typeof cell.column.groupFooterTemplate === "string" || typeof cell.column.groupCaptionTemplate === "string")) {
                txt = data[cell.column.type];
                txt = !isNullOrUndefined(txt) ? txt : "";
              } else {
                txt = templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent);
                txt = !isNullOrUndefined(txt[0]) ? txt[0].textContent : "";
              }
              isEmpty = false;
              var args = {
                row: row2,
                type: footerTemplate ? "Footer" : groupFooterTemplate ? "GroupFooter" : "GroupCaption",
                style: isNullOrUndefined(captionRow) ? gridRow.cells : captionRow.cells,
                cell,
                value: txt
              };
              this.parent.trigger(pdfAggregateQueryCellInfo, args);
              value.push(args.value);
            } else {
              var result = this.getSummaryWithoutTemplate(row2.data[cell.column.field]);
              if (!isNullOrUndefined(result)) {
                value.push(result);
              }
            }
          } else {
            value.push("");
          }
          if (isEmpty && value[parseInt(i.toString(), 10)] !== "" && !isNullOrUndefined(value[parseInt(i.toString(), 10)]) && value[parseInt(i.toString(), 10)] !== null) {
            isEmpty = false;
          }
          index += 1;
        }
        if (!isAggregate) {
          if (!isCaption) {
            value.splice(0, 1);
          } else {
            for (var i = gObj.groupSettings.columns.length; i < value.length - 1; i++) {
              value[parseInt(i.toString(), 10)] = value[i + 1];
              value[i + 1] = value[i + 2] ? value[i + 2] : "";
            }
          }
        }
        if (!isEmpty) {
          if (!isCaption) {
            for (var i = 0; i < pdfGrid.columns.count; i++) {
              gridRow.cells.getCell(i).value = value[parseInt(i.toString(), 10)].toString();
            }
          } else {
            for (var i = 0; i < pdfGrid.columns.count; i++) {
              captionRow.cells.getCell(i).value = value[parseInt(i.toString(), 10)].toString();
              if (i === groupIndex && leastCaptionSummaryIndex !== -1 && leastCaptionSummaryIndex !== 1) {
                captionRow.cells.getCell(i).columnSpan = leastCaptionSummaryIndex - 1 - groupIndex;
              } else if (i === groupIndex && leastCaptionSummaryIndex === -1) {
                captionRow.cells.getCell(i).columnSpan = pdfGrid.columns.count - groupIndex;
              }
            }
          }
        }
      }
    };
    PdfExport2.prototype.getTemplateFunction = function(templateFn, index, leastCaptionSummaryIndex, cell) {
      if (!isNullOrUndefined(cell.column.footerTemplate) && cell.cellType === CellType.Summary) {
        templateFn[getEnumValue(CellType, CellType.Summary)] = compile(cell.column.footerTemplate);
      } else if (!isNullOrUndefined(cell.column.groupCaptionTemplate)) {
        if (leastCaptionSummaryIndex === -1) {
          leastCaptionSummaryIndex = index;
        }
        templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = compile(cell.column.groupCaptionTemplate);
      } else {
        templateFn[getEnumValue(CellType, CellType.GroupSummary)] = compile(cell.column.groupFooterTemplate);
      }
      return {
        templateFunction: templateFn,
        leastCaptionSummaryIndex
      };
    };
    PdfExport2.prototype.getSummaryWithoutTemplate = function(data) {
      if (!isNullOrUndefined(data.Sum)) {
        return data.Sum;
      } else if (!isNullOrUndefined(data.Average)) {
        return data.Average;
      } else if (!isNullOrUndefined(data.Max)) {
        return data.Max;
      } else if (!isNullOrUndefined(data.Min)) {
        return data.Min;
      } else if (!isNullOrUndefined(data.Count)) {
        return data.Count;
      } else if (!isNullOrUndefined(data.TrueCount)) {
        return data.TrueCount;
      } else if (!isNullOrUndefined(data.FalseCount)) {
        return data.FalseCount;
      } else if (!isNullOrUndefined(data.Custom)) {
        return data.Custom;
      }
    };
    PdfExport2.prototype.setColumnProperties = function(gridColumns, pdfGrid, helper, gObj, allowHorizontalOverflow) {
      var startIndex = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;
      for (var i = 0; i < startIndex; i++) {
        pdfGrid.columns.getColumn(i).width = 20;
      }
      for (var i = 0; i < gridColumns.length; i++) {
        if (!isNullOrUndefined(gridColumns[parseInt(i.toString(), 10)].textAlign)) {
          pdfGrid.columns.getColumn(i + startIndex).format = this.getHorizontalAlignment(gridColumns[parseInt(i.toString(), 10)].textAlign);
        }
        if (pdfGrid.style.allowHorizontalOverflow && !isNullOrUndefined(gridColumns[parseInt(i.toString(), 10)].width) && allowHorizontalOverflow) {
          pdfGrid.columns.getColumn(i + startIndex).width = typeof gridColumns[parseInt(i.toString(), 10)].width === "number" ? gridColumns[parseInt(i.toString(), 10)].width * 0.75 : helper.getConvertedWidth(gridColumns[parseInt(i.toString(), 10)].width) * 0.75;
        }
      }
    };
    PdfExport2.prototype.setRecordThemeStyle = function(row2, border) {
      if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.record)) {
        var fontFamily = !isNullOrUndefined(this.gridTheme.record.fontName) ? this.getFontFamily(this.gridTheme.record.fontName) : PdfFontFamily.Helvetica;
        var fontSize = !isNullOrUndefined(this.gridTheme.record.fontSize) ? this.gridTheme.record.fontSize : 9.75;
        var fontStyle = this.getFontStyle(this.gridTheme.record);
        var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
        if (!isNullOrUndefined(this.gridTheme.record.font)) {
          font = this.gridTheme.record.font;
        }
        row2.style.setFont(font);
        var pdfColor = new PdfColor();
        if (!isNullOrUndefined(this.gridTheme.record.fontColor)) {
          var penBrushColor = this.hexToRgb(this.gridTheme.record.fontColor);
          pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
        }
        row2.style.setTextBrush(new PdfSolidBrush(pdfColor));
      } else {
        row2.style.setTextBrush(new PdfSolidBrush(new PdfColor(0, 0, 0)));
      }
      var borderRecord = this.gridTheme && this.gridTheme.record && this.gridTheme.record.border ? this.getBorderStyle(this.gridTheme.record.border) : border;
      row2.style.setBorder(borderRecord);
      return row2;
    };
    PdfExport2.prototype.processRecord = function(border, columns, gObj, dataSource, pdfGrid, startIndex, pdfExportProperties, helper, rowIndex) {
      var rows = helper.getGridRowModel(columns, dataSource, gObj, rowIndex);
      for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row2 = rows_1[_i];
        rowIndex++;
        this.rowIndex = rowIndex;
        var gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
        var cellLength = row2.cells.length;
        for (var j = 0; j < cellLength; j++) {
          var gridCell = row2.cells[parseInt(j.toString(), 10)];
          if (gridCell.cellType !== CellType.Data) {
            continue;
          }
          var column = gridCell.column;
          var field = column.field;
          var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row2.data, column) : "";
          var value = !isNullOrUndefined(cellValue) ? cellValue : "";
          var foreignKeyData2 = void 0;
          if (column.isForeignColumn && column.isForeignColumn()) {
            foreignKeyData2 = helper.getFData(value, column);
            value = getValue(column.foreignKeyValue, foreignKeyData2);
          }
          var data = row2.data;
          var cell = gridRow.cells.getCell(j);
          var args = {
            data,
            value,
            column,
            style: void 0,
            colSpan: 1,
            cell
          };
          args.value = args.column.type === "boolean" && typeof args.value === "string" ? args.value : this.exportValueFormatter.formatCellValue(args);
          this.parent.trigger(pdfQueryCellInfo, args);
          if (!isNullOrUndefined(args.image)) {
            args.value = new PdfBitmap(args.image.base64);
            args.value.height = args.image.height || args.value.height;
            args.value.width = args.image.width || args.value.width;
          }
          cell.value = args.value;
          if (!isNullOrUndefined(args.hyperLink)) {
            cell.value = this.setHyperLink(args);
          }
          if (!isNullOrUndefined(args.style)) {
            this.processCellStyle(cell, args);
          }
          if (args.colSpan > 1) {
            if (j + 1 + args.colSpan > gridRow.cells.count) {
              args.colSpan = gridRow.cells.count - (j + 1);
            }
            cell.columnSpan = args.colSpan;
            for (var i = 1; i < cell.columnSpan; i++) {
              var spanCell = gridRow.cells.getCell(j + i);
              spanCell.value = "";
            }
            j += args.colSpan - 1;
          }
        }
        if (row2.isExpand) {
          var gridRow_1 = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
          var startIndexVal = this.parent.childGrid || this.parent.detailTemplate ? 0 : startIndex;
          var cell = gridRow_1.cells.getCell(startIndexVal);
          cell.columnSpan = gridRow_1.cells.count - startIndexVal;
          cell.style.cellPadding = new PdfPaddings(10, 10, 10, 10);
          if (this.parent.childGrid) {
            gObj.isPrinting = true;
            var exportType = !isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType ? pdfExportProperties.exportType : "AllPages";
            var returnValue = this.helper.createChildGrid(gObj, row2, exportType, this.gridPool);
            var childGridObj = returnValue.childGrid;
            var element = returnValue.element;
            childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);
            var args = {
              childGrid: childGridObj,
              row: row2,
              cell,
              exportProperties: pdfExportProperties
            };
            this.parent.trigger(exportDetailDataBound, args);
            childGridObj.beforeDataBound = this.childGridCell(cell, childGridObj, pdfExportProperties);
            childGridObj.appendTo(element);
          } else if (this.parent.detailTemplate) {
            var args = {
              parentRow: row2,
              row: gridRow_1,
              value: {},
              action: "pdfexport",
              gridInstance: gObj
            };
            this.parent.trigger(exportDetailTemplate, args);
            cell.value = this.processDetailTemplate(args);
          }
        }
        this.parent.notify(exportRowDataBound, {
          type: "pdf",
          rowObj: row2
        });
      }
      return rowIndex;
    };
    PdfExport2.prototype.processDetailTemplate = function(templateData) {
      var _this = this;
      if (templateData.value.columnHeader || templateData.value.rows) {
        var pdfGrid = new PdfGrid();
        var headerThemeStyle = this.getHeaderThemeStyle();
        var border_1 = headerThemeStyle.border;
        var headerFont_1 = headerThemeStyle.font;
        var headerBrush_1 = headerThemeStyle.brush;
        var processRow = function(row3, gridRow2, isHeader) {
          if (isHeader) {
            gridRow2.style.setBorder(border_1);
            gridRow2.style.setFont(headerFont_1);
            gridRow2.style.setTextBrush(headerBrush_1);
          }
          for (var j = 0; j < row3.cells.length; j++) {
            var currentCell = row3.cells[parseInt(j.toString(), 10)];
            var pdfCell = gridRow2.cells.getCell(currentCell.index ? currentCell.index : j);
            if (currentCell.rowSpan > 0) {
              pdfCell.rowSpan = currentCell.rowSpan;
            }
            if (currentCell.colSpan > 0) {
              pdfCell.columnSpan = currentCell.colSpan;
            }
            pdfCell.value = currentCell.value;
            if (!isNullOrUndefined(currentCell.image)) {
              pdfCell.value = new PdfBitmap(currentCell.image.base64);
              pdfCell.value.height = currentCell.image.height;
              pdfCell.value.width = currentCell.image.width;
            }
            if (!isNullOrUndefined(currentCell.hyperLink)) {
              pdfCell.value = _this.setHyperLink(currentCell);
            }
            if (!isNullOrUndefined(currentCell.style)) {
              var cellStyle = {
                style: {
                  backgroundColor: currentCell.style.backColor,
                  textAlignment: currentCell.style.pdfTextAlignment,
                  verticalAlignment: currentCell.style.pdfVerticalAlignment,
                  textBrushColor: currentCell.style.fontColor,
                  textPenColor: currentCell.style.pdfTextPenColor,
                  fontFamily: currentCell.style.pdfFontFamily,
                  fontSize: currentCell.style.fontSize,
                  bold: currentCell.style.bold,
                  italic: currentCell.style.italic,
                  underline: currentCell.style.underline,
                  strikeout: currentCell.style.strikeThrough,
                  border: currentCell.style.pdfBorder,
                  paragraphIndent: currentCell.style.pdfParagraphIndent,
                  cellPadding: currentCell.style.pdfCellPadding
                }
              };
              _this.processCellStyle(pdfCell, cellStyle);
            }
          }
        };
        if (templateData.value.columnCount) {
          pdfGrid.columns.add(templateData.value.columnCount);
        } else {
          if (templateData.value.columnHeader && templateData.value.columnHeader.length) {
            pdfGrid.columns.add(templateData.value.columnHeader[0].cells.length);
          } else if (templateData.value.rows && templateData.value.rows.length) {
            pdfGrid.columns.add(templateData.value.rows[0].cells.length);
          }
        }
        if (templateData.value.columnHeader) {
          pdfGrid.headers.add(templateData.value.columnHeader.length);
          for (var i = 0; i < templateData.value.columnHeader.length; i++) {
            var gridHeader2 = pdfGrid.headers.getHeader(parseInt(i.toString(), 10));
            processRow(templateData.value.columnHeader[parseInt(i.toString(), 10)], gridHeader2, true);
          }
        }
        if (templateData.value.rows) {
          for (var _i = 0, _a = templateData.value.rows; _i < _a.length; _i++) {
            var row2 = _a[_i];
            var gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border_1);
            processRow(row2, gridRow, false);
          }
        }
        return pdfGrid;
      } else if (templateData.value.image) {
        return new PdfBitmap(templateData.value.image.base64);
      } else if (templateData.value.text) {
        return templateData.value.text;
      } else if (templateData.value.hyperLink) {
        return this.setHyperLink(templateData.value);
      }
      return "";
    };
    PdfExport2.prototype.setHyperLink = function(args) {
      var textLink = new PdfTextWebLink();
      textLink.url = args.hyperLink.target;
      textLink.text = args.hyperLink.displayText || args.hyperLink.target;
      textLink.font = new PdfStandardFont(PdfFontFamily.Helvetica, 9.75);
      textLink.brush = new PdfSolidBrush(new PdfColor(51, 102, 187));
      return textLink;
    };
    PdfExport2.prototype.childGridCell = function(cell, childGridObj, pdfExportProperties) {
      var _this = this;
      return function(result) {
        childGridObj.beforeDataBound = null;
        result.cancel = true;
        cell.value = _this.processGridExport(childGridObj, result, pdfExportProperties);
        childGridObj.destroy();
        detach(childGridObj.element);
        _this.gridPool[childGridObj.id] = true;
        _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);
        return cell;
      };
    };
    PdfExport2.prototype.processCellStyle = function(cell, args) {
      if (!isNullOrUndefined(args.style.backgroundColor)) {
        var backColor = this.hexToRgb(args.style.backgroundColor);
        cell.style.backgroundBrush = new PdfSolidBrush(new PdfColor(backColor.r, backColor.g, backColor.b));
      }
      if (!isNullOrUndefined(args.style.textAlignment)) {
        cell.style.stringFormat = this.getHorizontalAlignment(args.style.textAlignment);
      }
      if (!isNullOrUndefined(args.style.cellPadding)) {
        cell.style.cellPadding = args.style.cellPadding;
      }
      if (!isNullOrUndefined(args.style.verticalAlignment)) {
        cell.style.stringFormat = this.getVerticalAlignment(args.style.verticalAlignment, cell.style.stringFormat);
      }
      if (!isNullOrUndefined(args.style.textBrushColor)) {
        var textBrushColor = this.hexToRgb(args.style.textBrushColor);
        cell.style.textBrush = new PdfSolidBrush(new PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));
      }
      if (!isNullOrUndefined(args.style.textPenColor)) {
        var textPenColor = this.hexToRgb(args.style.textPenColor);
        cell.style.textPen = new PdfPen(new PdfColor(textPenColor.r, textPenColor.g, textPenColor.b));
      }
      if (!isNullOrUndefined(args.style.fontFamily) || !isNullOrUndefined(args.style.fontSize) || !isNullOrUndefined(args.style.bold) || !isNullOrUndefined(args.style.italic) || !isNullOrUndefined(args.style.underline) || !isNullOrUndefined(args.style.strikeout)) {
        cell.style.font = this.getFont(args);
      }
      if (!isNullOrUndefined(args.style.border)) {
        var border = new PdfBorders();
        var borderWidth = args.style.border.width;
        var width = !isNullOrUndefined(borderWidth) && typeof borderWidth === "number" ? borderWidth * 0.75 : void 0;
        var color = new PdfColor(196, 196, 196);
        if (!isNullOrUndefined(args.style.border.color)) {
          var borderColor = this.hexToRgb(args.style.border.color);
          color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
        }
        var pen = new PdfPen(color, width);
        if (!isNullOrUndefined(args.style.border.dashStyle)) {
          pen.dashStyle = this.getDashStyle(args.style.border.dashStyle);
        }
        border.all = pen;
        cell.style.borders = border;
      }
      if (!isNullOrUndefined(args.style.paragraphIndent)) {
        cell.style.stringFormat = new PdfStringFormat();
        cell.style.stringFormat.paragraphIndent = args.style.paragraphIndent;
      }
    };
    PdfExport2.prototype.getHorizontalAlignment = function(textAlign, format) {
      if (format === void 0) {
        format = new PdfStringFormat();
      }
      switch (textAlign) {
        case "Right":
          format.alignment = PdfTextAlignment.Right;
          break;
        case "Center":
          format.alignment = PdfTextAlignment.Center;
          break;
        case "Justify":
          format.alignment = PdfTextAlignment.Justify;
          break;
        case "Left":
          format.alignment = PdfTextAlignment.Left;
          break;
      }
      return format;
    };
    PdfExport2.prototype.getVerticalAlignment = function(verticalAlign, format, textAlign) {
      if (format === void 0) {
        format = new PdfStringFormat();
        format = this.getHorizontalAlignment(textAlign, format);
      }
      switch (verticalAlign) {
        case "Bottom":
          format.lineAlignment = PdfVerticalAlignment.Bottom;
          break;
        case "Middle":
          format.lineAlignment = PdfVerticalAlignment.Middle;
          break;
        case "Top":
          format.lineAlignment = PdfVerticalAlignment.Top;
          break;
      }
      return format;
    };
    PdfExport2.prototype.getFontFamily = function(fontFamily) {
      switch (fontFamily) {
        case "TimesRoman":
          return 2;
        case "Courier":
          return 1;
        case "Symbol":
          return 3;
        case "ZapfDingbats":
          return 4;
        default:
          return 0;
      }
    };
    PdfExport2.prototype.getFont = function(content2) {
      if (content2.font) {
        return content2.font;
      }
      var fontSize = !isNullOrUndefined(content2.style.fontSize) ? content2.style.fontSize * 0.75 : 9.75;
      var fontFamily = !isNullOrUndefined(content2.style.fontFamily) ? this.getFontFamily(content2.style.fontFamily) : PdfFontFamily.TimesRoman;
      var fontStyle = PdfFontStyle.Regular;
      if (!isNullOrUndefined(content2.style.bold) && content2.style.bold) {
        fontStyle |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(content2.style.italic) && content2.style.italic) {
        fontStyle |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(content2.style.underline) && content2.style.underline) {
        fontStyle |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(content2.style.strikeout) && content2.style.strikeout) {
        fontStyle |= PdfFontStyle.Strikeout;
      }
      return new PdfStandardFont(fontFamily, fontSize, fontStyle);
    };
    PdfExport2.prototype.getPageNumberStyle = function(pageNumberType) {
      switch (pageNumberType) {
        case "LowerLatin":
          return 2;
        case "LowerRoman":
          return 3;
        case "UpperLatin":
          return 4;
        case "UpperRoman":
          return 5;
        default:
          return 1;
      }
    };
    PdfExport2.prototype.setContentFormat = function(content2, format) {
      if (!isNullOrUndefined(content2.size)) {
        var width = content2.size.width * 0.75;
        var height = content2.size.height * 0.75;
        format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Middle);
        if (!isNullOrUndefined(content2.style.hAlign)) {
          switch (content2.style.hAlign) {
            case "Right":
              format.alignment = PdfTextAlignment.Right;
              break;
            case "Center":
              format.alignment = PdfTextAlignment.Center;
              break;
            case "Justify":
              format.alignment = PdfTextAlignment.Justify;
              break;
            default:
              format.alignment = PdfTextAlignment.Left;
          }
        }
        if (!isNullOrUndefined(content2.style.vAlign)) {
          format = this.getVerticalAlignment(content2.style.vAlign, format);
        }
        return {
          format,
          size: new SizeF(width, height)
        };
      }
      return null;
    };
    PdfExport2.prototype.getPageSize = function(pageSize) {
      switch (pageSize) {
        case "Letter":
          return new SizeF(612, 792);
        case "Note":
          return new SizeF(540, 720);
        case "Legal":
          return new SizeF(612, 1008);
        case "A0":
          return new SizeF(2380, 3368);
        case "A1":
          return new SizeF(1684, 2380);
        case "A2":
          return new SizeF(1190, 1684);
        case "A3":
          return new SizeF(842, 1190);
        case "A5":
          return new SizeF(421, 595);
        case "A6":
          return new SizeF(297, 421);
        case "A7":
          return new SizeF(210, 297);
        case "A8":
          return new SizeF(148, 210);
        case "A9":
          return new SizeF(105, 148);
        case "B0":
          return new SizeF(2836, 4008);
        case "B1":
          return new SizeF(2004, 2836);
        case "B2":
          return new SizeF(1418, 2004);
        case "B3":
          return new SizeF(1002, 1418);
        case "B4":
          return new SizeF(709, 1002);
        case "B5":
          return new SizeF(501, 709);
        case "Archa":
          return new SizeF(648, 864);
        case "Archb":
          return new SizeF(864, 1296);
        case "Archc":
          return new SizeF(1296, 1728);
        case "Archd":
          return new SizeF(1728, 2592);
        case "Arche":
          return new SizeF(2592, 3456);
        case "Flsa":
          return new SizeF(612, 936);
        case "HalfLetter":
          return new SizeF(396, 612);
        case "Letter11x17":
          return new SizeF(792, 1224);
        case "Ledger":
          return new SizeF(1224, 792);
        default:
          return new SizeF(595, 842);
      }
    };
    PdfExport2.prototype.getDashStyle = function(dashStyle) {
      switch (dashStyle) {
        case "Dash":
          return 1;
        case "Dot":
          return 2;
        case "DashDot":
          return 3;
        case "DashDotDot":
          return 4;
        default:
          return 0;
      }
    };
    PdfExport2.prototype.getPenFromContent = function(content2) {
      var pen = new PdfPen(new PdfColor(0, 0, 0));
      if (!isNullOrUndefined(content2.style) && content2.style !== null && !isNullOrUndefined(content2.style.penColor)) {
        var penColor = this.hexToRgb(content2.style.penColor);
        pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
      }
      return pen;
    };
    PdfExport2.prototype.getBrushFromContent = function(content2) {
      var brush = null;
      if (!isNullOrUndefined(content2.style.textBrushColor)) {
        var brushColor = this.hexToRgb(content2.style.textBrushColor);
        brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
      }
      return brush;
    };
    PdfExport2.prototype.hexToRgb = function(hex) {
      if (hex === null || hex === "" || hex.length !== 7) {
        throw new Error("please set valid hex value for color...");
      }
      hex = hex.substring(1);
      var bigint = parseInt(hex, 16);
      var r = bigint >> 16 & 255;
      var g = bigint >> 8 & 255;
      var b = bigint & 255;
      return {
        r,
        g,
        b
      };
    };
    PdfExport2.prototype.getFontStyle = function(theme) {
      var fontStyle = PdfFontStyle.Regular;
      if (!isNullOrUndefined(theme) && theme.bold) {
        fontStyle |= PdfFontStyle.Bold;
      }
      if (!isNullOrUndefined(theme) && theme.italic) {
        fontStyle |= PdfFontStyle.Italic;
      }
      if (!isNullOrUndefined(theme) && theme.underline) {
        fontStyle |= PdfFontStyle.Underline;
      }
      if (!isNullOrUndefined(theme) && theme.strikeout) {
        fontStyle |= PdfFontStyle.Strikeout;
      }
      return fontStyle;
    };
    PdfExport2.prototype.getBorderStyle = function(border) {
      var borders = new PdfBorders();
      if (!isNullOrUndefined(border)) {
        var borderWidth = border.width;
        var width = !isNullOrUndefined(borderWidth) && typeof borderWidth === "number" ? borderWidth * 0.75 : void 0;
        var color = new PdfColor(196, 196, 196);
        if (!isNullOrUndefined(border.color)) {
          var borderColor = this.hexToRgb(border.color);
          color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
        }
        var pen = new PdfPen(color, width);
        if (!isNullOrUndefined(border.dashStyle)) {
          pen.dashStyle = this.getDashStyle(border.dashStyle);
        }
        borders.all = pen;
      } else {
        borders.all = new PdfPen(new PdfColor(234, 234, 234));
      }
      return borders;
    };
    PdfExport2.prototype.destroy = function() {
    };
    return PdfExport2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/command-column-renderer.js
var __extends84 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CommandColumnRenderer = (
  /** @class */
  function(_super) {
    __extends84(CommandColumnRenderer2, _super);
    function CommandColumnRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.buttonElement = _this.parent.createElement("button", {});
      _this.unbounDiv = _this.parent.createElement("div", {
        className: "e-unboundcelldiv",
        styles: "display: inline-block"
      });
      _this.childRefs = [];
      _this.element = _this.parent.createElement("TD", {
        className: "e-rowcell e-unboundcell",
        attrs: {
          tabindex: "-1",
          role: "gridcell"
        }
      });
      _this.parent.on(destroy, _this.destroyButtons, _this);
      _this.parent.on(commandColumnDestroy, _this.destroyButtons, _this);
      return _this;
    }
    CommandColumnRenderer2.prototype.destroyButtons = function(args) {
      for (var i = 0; i < this.childRefs.length; i++) {
        if (this.childRefs[parseInt(i.toString(), 10)] && !this.childRefs[parseInt(i.toString(), 10)].isDestroyed && !(this.parent.editSettings.showAddNewRow && this.parent.enableVirtualization && parentsUntil(this.childRefs[parseInt(i.toString(), 10)].element, "e-addedrow"))) {
          this.childRefs[parseInt(i.toString(), 10)].destroy();
          if (this.childRefs[parseInt(i.toString(), 10)].element) {
            this.childRefs[parseInt(i.toString(), 10)].element.innerHTML = "";
          }
        }
      }
      this.childRefs = [];
      if (args.type === "refreshCommandColumn") {
        var elem = this.parent.element.querySelectorAll(".e-gridcontent .e-unboundcell");
        if (elem.length) {
          for (var i = 0; i < elem.length; i++) {
            if (elem[parseInt(i.toString(), 10)] && !(this.parent.editSettings.showAddNewRow && this.parent.enableVirtualization && parentsUntil(elem[parseInt(i.toString(), 10)], "e-addedrow"))) {
              if (elem[parseInt(i.toString(), 10)].querySelector(".e-unboundcelldiv")) {
                elem[parseInt(i.toString(), 10)].querySelector(".e-unboundcelldiv").innerHTML = "";
              }
              elem[parseInt(i.toString(), 10)].innerHTML = "";
            }
          }
          elem = null;
        }
      } else {
        this.parent.off(destroy, this.destroyButtons);
        this.parent.off(commandColumnDestroy, this.destroyButtons);
      }
    };
    CommandColumnRenderer2.prototype.render = function(cell, data, attributes2, isVirtualEdit) {
      var node = this.element.cloneNode();
      var uid2 = "uid";
      node.appendChild(this.unbounDiv.cloneNode());
      node.setAttribute("aria-label", this.localizer.getConstant("CommandColumnAria") + cell.column.headerText);
      if (cell.column.commandsTemplate) {
        if (this.parent.isReact && typeof cell.column.commandsTemplate !== "string") {
          var tempID = this.parent + "commandsTemplate";
          cell.column.getColumnTemplate()(data, this.parent, "commandsTemplate", tempID, null, null, node.firstElementChild);
          this.parent.renderTemplates();
        } else {
          appendChildren(node.firstElementChild, cell.column.getColumnTemplate()(data));
        }
      } else {
        for (var _i = 0, _a = cell.commands; _i < _a.length; _i++) {
          var command = _a[_i];
          node = this.renderButton(node, command, attributes2.index, command["" + uid2]);
        }
      }
      this.setAttributes(node, cell, attributes2);
      if (!this.parent.enableVirtualization && this.parent.isEdit && (!this.parent.editSettings.showAddNewRow || this.parent.editSettings.showAddNewRow && !this.parent.element.querySelector(".e-editedrow")) || isVirtualEdit) {
        addClass([].slice.call(node.getElementsByClassName("e-edit-delete")), "e-hide");
        removeClass([].slice.call(node.getElementsByClassName("e-save-cancel")), "e-hide");
      } else {
        addClass([].slice.call(node.getElementsByClassName("e-save-cancel")), "e-hide");
        removeClass([].slice.call(node.getElementsByClassName("e-edit-delete")), "e-hide");
      }
      if (this.parent.isFrozenGrid()) {
        addStickyColumnPosition(this.parent, cell.column, node);
      }
      return node;
    };
    CommandColumnRenderer2.prototype.renderButton = function(node, buttonOption, index, uid2) {
      var button = this.buttonElement.cloneNode();
      attributes(button, {
        "id": this.parent.element.id + (buttonOption.type || "") + "_" + index + "_" + uid2,
        "type": "button",
        title: !isNullOrUndefined(buttonOption.title) ? buttonOption.title : buttonOption.buttonOption.content || this.localizer.getConstant(buttonOption.type) || buttonOption.type,
        "data-uid": uid2
      });
      button.onclick = buttonOption.buttonOption.click;
      buttonOption.buttonOption.cssClass = this.parent.cssClass ? buttonOption.buttonOption.cssClass + " " + this.parent.cssClass : buttonOption.buttonOption.cssClass;
      var buttonObj = new Button(buttonOption.buttonOption, button);
      this.childRefs.push(buttonObj);
      buttonObj.commandType = buttonOption.type;
      node.firstElementChild.appendChild(buttonObj.element);
      switch (buttonOption.type) {
        case "Edit":
        case "Delete":
          addClass([button], ["e-edit-delete", "e-" + buttonOption.type.toLowerCase() + "button"]);
          break;
        case "Cancel":
        case "Save":
          addClass([button], ["e-save-cancel", "e-" + buttonOption.type.toLowerCase() + "button"]);
          break;
      }
      return node;
    };
    return CommandColumnRenderer2;
  }(CellRenderer)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/command-column.js
var CommandColumn = (
  /** @class */
  function() {
    function CommandColumn2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.initiateRender();
      this.addEventListener();
    }
    CommandColumn2.prototype.initiateRender = function() {
      var cellFac = this.locator.getService("cellRendererFactory");
      cellFac.addCellRenderer(CellType.CommandColumn, new CommandColumnRenderer(this.parent, this.locator));
    };
    CommandColumn2.prototype.commandClickHandler = function(e) {
      var gObj = this.parent;
      var target = closest(e.target, "button");
      if (!target || !closest(e.target, ".e-unboundcell")) {
        return;
      }
      var buttonObj = target.ej2_instances[0];
      var type = buttonObj.commandType;
      var uid2 = target.getAttribute("data-uid");
      var commandColumn;
      var row2 = gObj.getRowObjectFromUID(closest(target, "." + row).getAttribute("data-uid"));
      var cols = this.parent.columnModel;
      for (var i = 0; i < cols.length; i++) {
        if (cols[parseInt(i.toString(), 10)].commands) {
          var commandCols = cols[parseInt(i.toString(), 10)].commands;
          for (var j = 0; j < commandCols.length; j++) {
            var idInString = "uid";
            var typeInString = "type";
            if (commandCols[parseInt(j.toString(), 10)]["" + idInString] === uid2 && commandCols[parseInt(j.toString(), 10)]["" + typeInString] === type) {
              commandColumn = commandCols[parseInt(j.toString(), 10)];
            } else {
              var buttons = [].slice.call(closest(target, ".e-unboundcell").querySelectorAll("button"));
              var index = buttons.findIndex(function(ele) {
                return ele === target;
              });
              if (index < commandCols.length && commandCols[parseInt(index.toString(), 10)]["" + typeInString] === type && String(commandCols[parseInt(j.toString(), 10)]["" + idInString]) === uid2) {
                commandColumn = commandCols[parseInt(index.toString(), 10)];
              }
            }
          }
        }
      }
      var args = {
        cancel: false,
        target,
        commandColumn,
        rowData: isNullOrUndefined(row2) ? void 0 : row2.data
      };
      this.parent.trigger(commandClick, args, function(commandclickargs) {
        if (buttonObj.disabled || !gObj.editModule || commandclickargs.cancel) {
          return;
        }
        switch (type) {
          case "Edit":
            gObj.editModule.endEdit();
            gObj.editModule.startEdit(closest(target, "tr"));
            break;
          case "Cancel":
            gObj.editModule.closeEdit();
            break;
          case "Save":
            gObj.editModule.endEdit();
            break;
          case "Delete":
            if (gObj.editSettings.mode !== "Batch") {
              gObj.editModule.endEdit();
            }
            gObj.commandDelIndex = parseInt(closest(target, "tr").getAttribute(dataRowIndex), 10);
            gObj.clearSelection();
            gObj.selectRow(gObj.commandDelIndex, false);
            gObj.editModule.deleteRecord();
            gObj.commandDelIndex = void 0;
            break;
        }
      });
    };
    CommandColumn2.prototype.getModuleName = function() {
      return "commandColumn";
    };
    CommandColumn2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
    };
    CommandColumn2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(click, this.commandClickHandler);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(initialEnd, this.load);
      this.parent.off(destroy, this.destroy);
    };
    CommandColumn2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(click, this.commandClickHandler, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(initialEnd, this.load, this);
      this.parent.on(destroy, this.destroy, this);
    };
    CommandColumn2.prototype.keyPressHandler = function(e) {
      if (e.action === "enter" && closest(e.target, ".e-unboundcelldiv")) {
        this.commandClickHandler(e);
        e.preventDefault();
      }
    };
    CommandColumn2.prototype.load = function() {
      var uid2 = "uid";
      var col = this.parent.columnModel;
      for (var i = 0; i < col.length; i++) {
        if (col[parseInt(i.toString(), 10)].commands) {
          var commandCol = col[parseInt(i.toString(), 10)].commands;
          for (var j = 0; j < commandCol.length; j++) {
            commandCol[parseInt(j.toString(), 10)]["" + uid2] = getUid("gridcommand");
          }
        }
      }
    };
    return CommandColumn2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/context-menu.js
var menuClass = {
  header: "." + gridHeader,
  content: "." + gridContent,
  edit: ".e-inline-edit",
  batchEdit: ".e-editedbatchcell",
  editIcon: "e-edit",
  pager: ".e-gridpager",
  delete: "e-delete",
  save: "e-save",
  cancel: "e-cancel",
  copy: "e-copy",
  pdf: "e-pdfexport",
  group: "e-icon-group",
  ungroup: "e-icon-ungroup",
  csv: "e-csvexport",
  excel: "e-excelexport",
  fPage: "e-icon-first",
  nPage: "e-icon-next",
  lPage: "e-icon-last",
  pPage: "e-icon-prev",
  ascending: "e-icon-ascending",
  descending: "e-icon-descending",
  groupHeader: "e-groupdroparea",
  touchPop: "e-gridpopup"
};
var ContextMenu2 = (
  /** @class */
  function() {
    function ContextMenu3(parent, serviceLocator) {
      this.defaultItems = {};
      this.disableItems = [];
      this.hiddenItems = [];
      this.localeText = this.setLocaleKey();
      this.parent = parent;
      this.gridID = parent.element.id;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    ContextMenu3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(uiUpdate, this.enableAfterRenderMenu, this);
      this.parent.on(initialLoad, this.render, this);
      this.parent.on(destroy, this.destroy, this);
    };
    ContextMenu3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.render);
      this.parent.off(uiUpdate, this.enableAfterRenderMenu);
      this.parent.off(destroy, this.destroy);
      EventHandler.remove(this.element, "keydown", this.keyDownHandler.bind(this));
    };
    ContextMenu3.prototype.keyDownHandler = function(e) {
      if (e.code === "Tab" || e.which === 9) {
        this.contextMenu.close();
      }
      if (e.code === "Escape") {
        this.contextMenu.close();
        this.parent.notify(restoreFocus, {});
      }
    };
    ContextMenu3.prototype.render = function() {
      this.parent.element.classList.add("e-noselect");
      this.l10n = this.serviceLocator.getService("localization");
      this.element = this.parent.createElement("ul", {
        id: this.gridID + "_cmenu"
      });
      EventHandler.add(this.element, "keydown", this.keyDownHandler.bind(this));
      this.parent.element.appendChild(this.element);
      var target = "#" + this.gridID;
      this.contextMenu = new ContextMenu({
        items: this.getMenuItems(),
        enableRtl: this.parent.enableRtl,
        enablePersistence: this.parent.enablePersistence,
        locale: this.parent.locale,
        target,
        select: this.contextMenuItemClick.bind(this),
        beforeOpen: this.contextMenuBeforeOpen.bind(this),
        onOpen: this.contextMenuOpen.bind(this),
        onClose: this.contextMenuOnClose.bind(this),
        cssClass: this.parent.cssClass ? "e-grid-menu " + this.parent.cssClass : "e-grid-menu"
      });
      this.contextMenu.appendTo(this.element);
    };
    ContextMenu3.prototype.enableAfterRenderMenu = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        if (this.contextMenu) {
          this.contextMenu.destroy();
          remove(this.element);
          this.parent.element.classList.remove("e-noselect");
        }
        this.render();
      }
    };
    ContextMenu3.prototype.getMenuItems = function() {
      var menuItems = [];
      var exportItems = [];
      for (var _i = 0, _a = this.parent.contextMenuItems; _i < _a.length; _i++) {
        var item = _a[_i];
        if (typeof item === "string" && this.getDefaultItems().indexOf(item) !== -1) {
          if (item.toLocaleLowerCase().indexOf("export") !== -1) {
            exportItems.push(this.buildDefaultItems(item));
          } else {
            menuItems.push(this.buildDefaultItems(item));
          }
        } else if (typeof item !== "string") {
          menuItems.push(item);
        }
      }
      if (exportItems.length > 0) {
        var exportGroup = this.buildDefaultItems("export");
        exportGroup.items = exportItems;
        menuItems.push(exportGroup);
      }
      return menuItems;
    };
    ContextMenu3.prototype.getLastPage = function() {
      var totalpage = Math.floor(this.parent.pageSettings.totalRecordsCount / this.parent.pageSettings.pageSize);
      if (this.parent.pageSettings.totalRecordsCount % this.parent.pageSettings.pageSize) {
        totalpage += 1;
      }
      return totalpage;
    };
    ContextMenu3.prototype.contextMenuOpen = function() {
      this.isOpen = true;
    };
    ContextMenu3.prototype.contextMenuItemClick = function(args) {
      var item = this.getKeyFromId(args.item.id);
      switch (item) {
        case "AutoFitAll":
          this.parent.autoFitColumns([]);
          break;
        case "AutoFit":
          this.parent.autoFitColumns(this.targetColumn.field);
          break;
        case "Group":
          this.parent.groupColumn(this.targetColumn.field);
          break;
        case "Ungroup":
          this.parent.ungroupColumn(this.targetColumn.field);
          break;
        case "Edit":
          if (this.parent.editModule) {
            if (this.parent.editSettings.mode === "Batch") {
              if (this.row && this.cell && !isNaN(parseInt(this.cell.getAttribute(dataColIndex), 10))) {
                this.parent.editModule.editCell(
                  parseInt(this.row.getAttribute(dataRowIndex), 10),
                  // eslint-disable-next-line
                  this.parent.getColumns()[parseInt(this.cell.getAttribute(dataColIndex), 10)].field
                );
              }
            } else {
              this.parent.editModule.endEdit();
              this.parent.editModule.startEdit(this.row);
            }
          }
          break;
        case "Delete":
          if (this.parent.editModule) {
            if (this.parent.editSettings.mode !== "Batch") {
              this.parent.editModule.endEdit();
            }
            if (this.parent.getSelectedRecords().length === 1) {
              this.parent.editModule.deleteRow(this.row);
            } else {
              this.parent.deleteRecord();
            }
          }
          break;
        case "Save":
          if (this.parent.editModule) {
            this.parent.editModule.endEdit();
          }
          break;
        case "Cancel":
          if (this.parent.editModule) {
            this.parent.editModule.closeEdit();
          }
          break;
        case "Copy":
          this.parent.copy();
          break;
        case "PdfExport":
          this.parent.pdfExport();
          break;
        case "ExcelExport":
          this.parent.excelExport();
          break;
        case "CsvExport":
          this.parent.csvExport();
          break;
        case "SortAscending":
          this.isOpen = false;
          this.parent.sortColumn(this.targetColumn.field, "Ascending");
          break;
        case "SortDescending":
          this.isOpen = false;
          this.parent.sortColumn(this.targetColumn.field, "Descending");
          break;
        case "FirstPage":
          this.parent.goToPage(1);
          break;
        case "PrevPage":
          this.parent.goToPage(this.parent.pageSettings.currentPage - 1);
          break;
        case "LastPage":
          this.parent.goToPage(this.getLastPage());
          break;
        case "NextPage":
          this.parent.goToPage(this.parent.pageSettings.currentPage + 1);
          break;
      }
      args.column = this.targetColumn;
      args.rowInfo = this.targetRowdata;
      this.parent.trigger(contextMenuClick, args);
    };
    ContextMenu3.prototype.contextMenuOnClose = function(args) {
      var parent = "parentObj";
      if (args.items.length > 0 && args.items[0]["" + parent] instanceof ContextMenu) {
        this.updateItemStatus();
      }
      this.parent.notify(selectRowOnContextOpen, {
        isOpen: false
      });
    };
    ContextMenu3.prototype.getLocaleText = function(item) {
      return this.l10n.getConstant(this.localeText["" + item]);
    };
    ContextMenu3.prototype.updateItemStatus = function() {
      this.contextMenu.showItems(this.hiddenItems);
      this.contextMenu.enableItems(this.disableItems);
      this.hiddenItems = [];
      this.disableItems = [];
      this.isOpen = false;
    };
    ContextMenu3.prototype.contextMenuBeforeOpen = function(args) {
      var closestGrid = closest(args.event.target, ".e-grid");
      if (args.event && closestGrid && closestGrid !== this.parent.element) {
        args.cancel = true;
      } else if (args.event && (closest(args.event.target, "." + menuClass.groupHeader) || closest(args.event.target, "." + menuClass.touchPop) || closest(args.event.target, ".e-summarycell") || closest(args.event.target, ".e-groupcaption") || closest(args.event.target, ".e-filterbarcell")) || this.parent.editSettings.showAddNewRow && closest(args.event.target, ".e-addedrow") && this.parent.element.querySelector(".e-editedrow")) {
        args.cancel = true;
      } else {
        this.targetColumn = this.getColumn(args.event);
        if (parentsUntil(args.event.target, "e-grid")) {
          this.targetRowdata = this.parent.getRowInfo(args.event.target);
        }
        if (isNullOrUndefined(args.parentItem) && this.targetColumn) {
          if (this.targetRowdata.cell) {
            this.parent.notify(selectRowOnContextOpen, {
              isOpen: true
            });
            this.selectRow(args.event, this.targetRowdata.cell.classList.contains("e-selectionbackground") && this.parent.selectionSettings.type === "Multiple" ? false : true);
          }
        }
        var hideSepItems = [];
        var showSepItems = [];
        for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
          var item = _a[_i];
          var key = this.getKeyFromId(item.id);
          var dItem = this.defaultItems["" + key];
          if (this.getDefaultItems().indexOf(key) !== -1) {
            if (this.ensureDisabledStatus(key)) {
              this.disableItems.push(item.text);
            }
            if (args.event && (this.ensureTarget(args.event.target, menuClass.edit) || this.ensureTarget(args.event.target, menuClass.batchEdit))) {
              if (key !== "Save" && key !== "Cancel") {
                this.hiddenItems.push(item.text);
              }
            } else if (this.parent.editModule && this.parent.editSettings.mode === "Batch" && (closest(args.event.target, ".e-gridform") || this.parent.editModule.getBatchChanges()[changedRecords].length || this.parent.editModule.getBatchChanges()[addedRecords].length || this.parent.editModule.getBatchChanges()[deletedRecords].length) && (key === "Save" || key === "Cancel")) {
              continue;
            } else if (isNullOrUndefined(args.parentItem) && args.event && !this.ensureTarget(args.event.target, dItem.target)) {
              this.hiddenItems.push(item.text);
            }
          } else if (item.target && args.event && !this.ensureTarget(args.event.target, item.target)) {
            if (item.separator) {
              hideSepItems.push(item.id);
            } else {
              this.hiddenItems.push(item.text);
            }
          } else if (this.ensureTarget(args.event.target, item.target) && item.separator) {
            showSepItems.push(item.id);
          }
        }
        if (showSepItems.length > 0) {
          this.contextMenu.showItems(showSepItems, true);
        }
        this.contextMenu.enableItems(this.disableItems, false);
        this.contextMenu.hideItems(this.hiddenItems);
        if (hideSepItems.length > 0) {
          this.contextMenu.hideItems(hideSepItems, true);
        }
        this.eventArgs = args.event;
        args.column = this.targetColumn;
        args.rowInfo = this.targetRowdata;
        this.parent.trigger(contextMenuOpen, args);
        if (args.cancel || this.hiddenItems.length === args.items.length && !args.parentItem) {
          this.updateItemStatus();
          args.cancel = true;
        }
      }
      applyBiggerTheme(this.parent.element, this.contextMenu.element.parentElement);
    };
    ContextMenu3.prototype.ensureTarget = function(targetElement, selector) {
      var target = targetElement;
      if (this.ensureFrozenHeader(targetElement) && (selector === menuClass.header || selector === menuClass.content)) {
        target = closest(targetElement, selector === menuClass.header ? "thead" : tbody);
      } else if (selector === menuClass.content || selector === menuClass.header) {
        target = parentsUntil(closest(targetElement, "." + table), selector.substr(1, selector.length));
      } else {
        target = closest(targetElement, selector);
      }
      return target && parentsUntil(target, "e-grid") === this.parent.element;
    };
    ContextMenu3.prototype.ensureFrozenHeader = function(targetElement) {
      return this.parent.frozenRows && closest(targetElement, menuClass.header) ? true : false;
    };
    ContextMenu3.prototype.ensureDisabledStatus = function(item) {
      var status = false;
      switch (item) {
        case "AutoFitAll":
        case "AutoFit":
          status = !(this.parent.ensureModuleInjected(Resize) && !this.parent.isEdit) || this.targetColumn && !this.targetColumn.field && item === "AutoFit";
          break;
        case "Group":
          if (!this.parent.allowGrouping || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0 || this.targetColumn && !this.targetColumn.field) {
            status = true;
          }
          break;
        case "Ungroup":
          if (!this.parent.allowGrouping || !this.parent.ensureModuleInjected(Group) || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0) {
            status = true;
          }
          break;
        case "Edit":
        case "Delete":
        case "Save":
        case "Cancel":
          if (!this.parent.editModule || this.parent.getDataRows().length === 0) {
            status = true;
          }
          break;
        case "Copy":
          if (this.parent.getSelectedRowIndexes().length === 0 && this.parent.getSelectedRowCellIndexes().length === 0 || this.parent.getCurrentViewRecords().length === 0) {
            status = true;
          }
          break;
        case "export":
          if (!this.parent.allowExcelExport || !this.parent.excelExport || !this.parent.ensureModuleInjected(PdfExport) && !this.parent.ensureModuleInjected(ExcelExport)) {
            status = true;
          }
          break;
        case "PdfExport":
          if (!this.parent.allowPdfExport || !this.parent.ensureModuleInjected(PdfExport)) {
            status = true;
          }
          break;
        case "ExcelExport":
        case "CsvExport":
          if (!this.parent.allowExcelExport || !this.parent.ensureModuleInjected(ExcelExport)) {
            status = true;
          }
          break;
        case "SortAscending":
        case "SortDescending":
          if (!this.parent.allowSorting || !this.parent.ensureModuleInjected(Sort) || this.targetColumn && !this.targetColumn.field) {
            status = true;
          } else if (this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn) {
            var sortColumns = this.parent.sortSettings.columns;
            for (var i = 0; i < sortColumns.length; i++) {
              if (sortColumns[parseInt(i.toString(), 10)].field === this.targetColumn.field && sortColumns[parseInt(i.toString(), 10)].direction.toLowerCase() === item.toLowerCase().replace("sort", "").toLocaleLowerCase()) {
                status = true;
              }
            }
          }
          break;
        case "FirstPage":
        case "PrevPage":
          if (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) || this.parent.getCurrentViewRecords().length === 0 || this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === 1) {
            status = true;
          }
          break;
        case "LastPage":
        case "NextPage":
          if (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) || this.parent.getCurrentViewRecords().length === 0 || this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === this.getLastPage()) {
            status = true;
          }
          break;
      }
      return status;
    };
    ContextMenu3.prototype.getContextMenu = function() {
      return this.element;
    };
    ContextMenu3.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector("." + gridHeader) && !gridElement.querySelector("." + gridContent)) {
        return;
      }
      this.contextMenu.destroy();
      if (this.element.parentNode) {
        remove(this.element);
      }
      this.removeEventListener();
      this.parent.element.classList.remove("e-noselect");
    };
    ContextMenu3.prototype.getModuleName = function() {
      return "contextMenu";
    };
    ContextMenu3.prototype.generateID = function(item) {
      return this.gridID + "_cmenu_" + item;
    };
    ContextMenu3.prototype.getKeyFromId = function(id) {
      return id.replace(this.gridID + "_cmenu_", "");
    };
    ContextMenu3.prototype.buildDefaultItems = function(item) {
      var menuItem;
      switch (item) {
        case "AutoFitAll":
        case "AutoFit":
          menuItem = {
            target: menuClass.header
          };
          break;
        case "Group":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.group
          };
          break;
        case "Ungroup":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.ungroup
          };
          break;
        case "Edit":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.editIcon
          };
          break;
        case "Delete":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.delete
          };
          break;
        case "Save":
          menuItem = {
            target: menuClass.edit,
            iconCss: menuClass.save
          };
          break;
        case "Cancel":
          menuItem = {
            target: menuClass.edit,
            iconCss: menuClass.cancel
          };
          break;
        case "Copy":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.copy
          };
          break;
        case "export":
          menuItem = {
            target: menuClass.content
          };
          break;
        case "PdfExport":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.pdf
          };
          break;
        case "ExcelExport":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.excel
          };
          break;
        case "CsvExport":
          menuItem = {
            target: menuClass.content,
            iconCss: menuClass.csv
          };
          break;
        case "SortAscending":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.ascending
          };
          break;
        case "SortDescending":
          menuItem = {
            target: menuClass.header,
            iconCss: menuClass.descending
          };
          break;
        case "FirstPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.fPage
          };
          break;
        case "PrevPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.pPage
          };
          break;
        case "LastPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.lPage
          };
          break;
        case "NextPage":
          menuItem = {
            target: menuClass.pager,
            iconCss: menuClass.nPage
          };
          break;
      }
      this.defaultItems["" + item] = {
        text: this.getLocaleText(item),
        id: this.generateID(item),
        target: menuItem.target,
        iconCss: menuItem.iconCss ? "e-icons " + menuItem.iconCss : ""
      };
      return this.defaultItems["" + item];
    };
    ContextMenu3.prototype.getDefaultItems = function() {
      return ["AutoFitAll", "AutoFit", "Group", "Ungroup", "Edit", "Delete", "Save", "Cancel", "Copy", "export", "PdfExport", "ExcelExport", "CsvExport", "SortAscending", "SortDescending", "FirstPage", "PrevPage", "LastPage", "NextPage"];
    };
    ContextMenu3.prototype.setLocaleKey = function() {
      var localeKeys = {
        "AutoFitAll": "autoFitAll",
        "AutoFit": "autoFit",
        "Copy": "Copy",
        "Group": "Group",
        "Ungroup": "Ungroup",
        "Edit": "EditRecord",
        "Delete": "DeleteRecord",
        "Save": "Save",
        "Cancel": "CancelButton",
        "PdfExport": "Pdfexport",
        "ExcelExport": "Excelexport",
        "CsvExport": "Csvexport",
        "export": "Export",
        "SortAscending": "SortAscending",
        "SortDescending": "SortDescending",
        "FirstPage": "FirstPage",
        "LastPage": "LastPage",
        "PrevPage": "PreviousPage",
        "NextPage": "NextPage"
      };
      return localeKeys;
    };
    ContextMenu3.prototype.getColumn = function(e) {
      var cell = closest(e.target, "th.e-headercell");
      if (cell) {
        var uid2 = cell.querySelector(".e-headercelldiv, .e-stackedheadercelldiv").getAttribute("e-mappinguid");
        return this.parent.getColumnByUid(uid2);
      } else {
        var ele = this.parent.getRowInfo(e.target).column;
        return ele || null;
      }
    };
    ContextMenu3.prototype.selectRow = function(e, isSelectable) {
      this.cell = e.target;
      this.row = closest(e.target, "tr.e-row") || this.row;
      if (this.row && isSelectable && !parentsUntil(e.target, "e-gridpager")) {
        this.parent.selectRow(parseInt(this.row.getAttribute(dataRowIndex), 10));
      }
    };
    return ContextMenu3;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/freeze.js
var Freeze = (
  /** @class */
  function() {
    function Freeze2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.addEventListener();
    }
    Freeze2.prototype.getModuleName = function() {
      return "freeze";
    };
    Freeze2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Freeze2.prototype.instantiateRenderer = function() {
      this.parent.log("limitation", this.getModuleName());
    };
    Freeze2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(destroy, this.destroy);
    };
    Freeze2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return Freeze2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/column-menu.js
var ColumnMenu = (
  /** @class */
  function() {
    function ColumnMenu2(parent, serviceLocator) {
      this.defaultItems = {};
      this.localeText = this.setLocaleKey();
      this.disableItems = [];
      this.hiddenItems = [];
      this.isOpen = false;
      this.GROUP = "e-icon-group";
      this.UNGROUP = "e-icon-ungroup";
      this.ASCENDING = "e-icon-ascending";
      this.DESCENDING = "e-icon-descending";
      this.ROOT = "e-columnmenu";
      this.FILTER = "e-icon-filter";
      this.POP = "e-filter-popup";
      this.WRAP = "e-col-menu";
      this.COL_POP = "e-colmenu-popup";
      this.CHOOSER = "_chooser_";
      this.parent = parent;
      this.gridID = parent.element.id;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
      if (this.parent.enableAdaptiveUI) {
        this.setFullScreenDialog();
      }
    }
    ColumnMenu2.prototype.wireEvents = function() {
      if (!this.parent.enableAdaptiveUI) {
        var elements = this.getColumnMenuHandlers();
        for (var i = 0; i < elements.length; i++) {
          EventHandler.add(elements[parseInt(i.toString(), 10)], "mousedown", this.columnMenuHandlerDown, this);
        }
      }
    };
    ColumnMenu2.prototype.unwireEvents = function() {
      if (!this.parent.enableAdaptiveUI) {
        var elements = this.getColumnMenuHandlers();
        for (var i = 0; i < elements.length; i++) {
          EventHandler.remove(elements[parseInt(i.toString(), 10)], "mousedown", this.columnMenuHandlerDown);
        }
      }
    };
    ColumnMenu2.prototype.setFullScreenDialog = function() {
      if (this.serviceLocator) {
        this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isColMenu);
      }
    };
    ColumnMenu2.prototype.destroy = function() {
      var gridElement = this.parent.element;
      if (!gridElement.querySelector("." + gridContent) && !gridElement.querySelector("." + gridHeader) || !gridElement) {
        return;
      }
      if (this.columnMenu) {
        this.columnMenu.destroy();
      }
      this.removeEventListener();
      this.unwireFilterEvents();
      this.unwireEvents();
      if (!this.parent.enableAdaptiveUI && this.element.parentNode) {
        remove(this.element);
      }
    };
    ColumnMenu2.prototype.columnMenuHandlerClick = function(e) {
      if (e.target.classList.contains("e-columnmenu")) {
        if (this.parent.enableAdaptiveUI) {
          this.headerCell = this.getHeaderCell(e);
          var col = this.getColumn();
          this.responsiveDialogRenderer.isCustomDialog = true;
          this.parent.notify(renderResponsiveChangeAction, {
            action: 4
          });
          this.parent.notify(filterOpen, {
            col,
            target: e.target,
            isClose: null,
            id: null
          });
          this.responsiveDialogRenderer.showResponsiveDialog(null, col);
        } else {
          this.columnMenu.items = this.getItems();
          this.columnMenu.dataBind();
          if (this.isOpen && this.headerCell !== this.getHeaderCell(e) || document.querySelector(".e-grid-menu .e-menu-parent.e-ul")) {
            this.columnMenu.close();
            this.openColumnMenu(e);
          } else if (!this.isOpen) {
            this.openColumnMenu(e);
          } else {
            this.columnMenu.close();
          }
        }
      }
    };
    ColumnMenu2.prototype.openColumnMenuByField = function(field) {
      this.openColumnMenu({
        target: this.parent.getColumnHeaderByField(field).querySelector(".e-columnmenu")
      });
    };
    ColumnMenu2.prototype.afterFilterColumnMenuClose = function() {
      if (this.columnMenu) {
        this.columnMenu.items = this.getItems();
        this.columnMenu.dataBind();
        this.columnMenu.close();
      }
    };
    ColumnMenu2.prototype.openColumnMenu = function(e) {
      var contentRect = this.parent.getContent().getClientRects()[0];
      var headerEle = this.parent.getHeaderContent();
      var headerElemCliRect = headerEle.getBoundingClientRect();
      var pos = {
        top: 0,
        left: 0
      };
      this.element.style.cssText = "display:block;visibility:hidden";
      var elePos = this.element.getBoundingClientRect();
      var gClient = this.parent.element.getBoundingClientRect();
      this.element.style.cssText = "display:none;visibility:visible";
      this.headerCell = this.getHeaderCell(e);
      if (this.parent.enableRtl) {
        pos = this.parent.enableStickyHeader ? calculatePosition(this.headerCell, "left", "bottom", true) : calculatePosition(this.headerCell, "left", "bottom");
      } else {
        pos = this.parent.enableStickyHeader ? calculatePosition(this.headerCell, "right", "bottom", true) : calculatePosition(this.headerCell, "right", "bottom");
        pos.left -= elePos.width;
        if (headerEle.classList.contains("e-sticky")) {
          pos.top = this.parent.element.offsetTop + headerElemCliRect.top + headerElemCliRect.height;
          if (headerElemCliRect.top + headerElemCliRect.height > contentRect.top) {
            pos.top += headerElemCliRect.top + headerElemCliRect.height - contentRect.top;
          }
        } else if (this.parent.enableStickyHeader) {
          pos.top = this.parent.element.offsetTop + headerEle.offsetTop + headerElemCliRect.height;
        }
        if (pos.left + elePos.width + 1 >= gClient.right) {
          pos.left -= 35;
        }
      }
      this.columnMenu["open"](pos.top, pos.left);
      if (e.preventDefault) {
        e.preventDefault();
      }
      applyBiggerTheme(this.parent.element, this.columnMenu.element.parentElement);
    };
    ColumnMenu2.prototype.columnMenuHandlerDown = function() {
      this.isOpen = !(this.element.style.display === "none" || this.element.style.display === "");
    };
    ColumnMenu2.prototype.getColumnMenuHandlers = function() {
      return [].slice.call(this.parent.getHeaderTable().getElementsByClassName(this.ROOT));
    };
    ColumnMenu2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(headerRefreshed, this.wireEvents, this);
      this.parent.on(uiUpdate, this.enableAfterRenderMenu, this);
      this.parent.on(initialEnd, this.render, this);
      if (this.isFilterItemAdded()) {
        this.parent.on(filterDialogCreated, this.filterPosition, this);
      }
      this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
      this.parent.on(renderResponsiveChangeAction, this.renderResponsiveChangeAction, this);
      this.parent.on(click, this.columnMenuHandlerClick, this);
      this.parent.on(afterFilterColumnMenuClose, this.afterFilterColumnMenuClose, this);
      this.parent.on(keyPressed, this.keyPressHandler, this);
      this.parent.on(destroy, this.destroy, this);
    };
    ColumnMenu2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(headerRefreshed, this.unwireEvents);
      this.parent.off(uiUpdate, this.enableAfterRenderMenu);
      this.parent.off(initialEnd, this.render);
      if (this.isFilterItemAdded()) {
        this.parent.off(filterDialogCreated, this.filterPosition);
      }
      this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
      this.parent.off(renderResponsiveChangeAction, this.renderResponsiveChangeAction);
      this.parent.off(click, this.columnMenuHandlerClick);
      this.parent.on(afterFilterColumnMenuClose, this.afterFilterColumnMenuClose);
      this.parent.off(keyPressed, this.keyPressHandler);
      this.parent.off(destroy, this.destroy);
    };
    ColumnMenu2.prototype.keyPressHandler = function(e) {
      var gObj = this.parent;
      if (e.action === "altDownArrow") {
        var element = gObj.focusModule.currentInfo.element;
        if (element && element.classList.contains("e-headercell")) {
          var column = gObj.getColumnByUid(element.firstElementChild.getAttribute("e-mappinguid"));
          this.openColumnMenuByField(column.field);
        }
      }
    };
    ColumnMenu2.prototype.enableAfterRenderMenu = function(e) {
      if (e.module === this.getModuleName() && e.enable) {
        if (this.columnMenu) {
          this.columnMenu.destroy();
          remove(this.element);
        }
        if (!this.parent.enableAdaptiveUI) {
          this.render();
        }
      }
    };
    ColumnMenu2.prototype.render = function() {
      if (this.parent.enableAdaptiveUI) {
        return;
      }
      this.l10n = this.serviceLocator.getService("localization");
      this.element = this.parent.createElement("ul", {
        id: this.gridID + "_columnmenu",
        className: "e-colmenu"
      });
      this.element.setAttribute("aria-label", this.l10n.getConstant("ColumnMenuDialogARIA"));
      this.parent.element.appendChild(this.element);
      this.columnMenu = new ContextMenu({
        cssClass: this.parent.cssClass ? "e-grid-menu " + this.parent.cssClass : "e-grid-menu",
        enableRtl: this.parent.enableRtl,
        enablePersistence: this.parent.enablePersistence,
        locale: this.parent.locale,
        items: this.getItems(),
        select: this.columnMenuItemClick.bind(this),
        beforeOpen: this.columnMenuBeforeOpen.bind(this),
        onOpen: this.columnMenuOnOpen.bind(this),
        onClose: this.columnMenuOnClose.bind(this),
        beforeItemRender: this.beforeMenuItemRender.bind(this),
        beforeClose: this.columnMenuBeforeClose.bind(this)
      });
      if (this.element && parentsUntil(this.element, "e-popup")) {
        this.element.classList.add(this.COL_POP);
      }
      this.columnMenu.appendTo(this.element);
      this.wireFilterEvents();
    };
    ColumnMenu2.prototype.wireFilterEvents = function() {
      if (!Browser.isDevice && this.isFilterItemAdded()) {
        EventHandler.add(this.element, "mouseover", this.appendFilter, this);
      }
    };
    ColumnMenu2.prototype.unwireFilterEvents = function() {
      if (!Browser.isDevice && this.isFilterItemAdded() && !this.parent.enableAdaptiveUI) {
        EventHandler.remove(this.element, "mouseover", this.appendFilter);
      }
    };
    ColumnMenu2.prototype.beforeMenuItemRender = function(args) {
      var _a;
      if (this.isChooserItem(args.item)) {
        var field_1 = this.getKeyFromId(args.item.id, this.CHOOSER);
        var column = this.parent.columnModel.filter(function(col) {
          return col.field === field_1;
        });
        var check = createCheckBox(this.parent.createElement, false, {
          label: args.item.text,
          checked: column[0].visible
        });
        if (this.parent.enableRtl) {
          check.classList.add("e-rtl");
        }
        if (this.parent.cssClass) {
          if (this.parent.cssClass.indexOf(" ") !== -1) {
            (_a = check.classList).add.apply(_a, this.parent.cssClass.split(" "));
          } else {
            check.classList.add(this.parent.cssClass);
          }
        }
        args.element.innerHTML = "";
        args.element.appendChild(check);
      } else if (args.item.id && this.getKeyFromId(args.item.id) === "Filter") {
        args.element.appendChild(this.parent.createElement("span", {
          className: "e-icons e-caret"
        }));
        args.element.className += "e-filter-item e-menu-caret-icon";
      }
    };
    ColumnMenu2.prototype.columnMenuBeforeClose = function(args) {
      var colChooser = args.event ? closest(args.event.target, ".e-menu-item") : null;
      if (!isNullOrUndefined(args.parentItem) && this.getKeyFromId(args.parentItem.id) === "ColumnChooser" && colChooser && this.isChooserItem(colChooser)) {
        args.cancel = args.event && args.event.code === "Escape" ? false : true;
      } else if (args.event && (closest(args.event.target, "." + this.POP) || args.event.currentTarget && args.event.currentTarget.activeElement && parentsUntil(args.event.currentTarget.activeElement, "e-filter-popup") || parentsUntil(args.event.target, "e-popup") && parentsUntil(args.event.target, "e-colmenu-popup") || parentsUntil(args.event.target, "e-popup-wrapper")) && !Browser.isDevice) {
        args.cancel = true;
      } else if (args.event && args.event.target && args.event.target.classList.contains("e-filter-item") && args.event.key === "Enter") {
        args.cancel = true;
      }
    };
    ColumnMenu2.prototype.isChooserItem = function(item) {
      return item.id && item.id.indexOf("_colmenu_") >= 0 && this.getKeyFromId(item.id, this.CHOOSER).indexOf("_colmenu_") === -1;
    };
    ColumnMenu2.prototype.columnMenuBeforeOpen = function(args) {
      args.column = this.targetColumn = this.getColumn();
      this.parent.trigger(columnMenuOpen, args);
      for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
        var item = _a[_i];
        var key = this.getKeyFromId(item.id);
        var dItem = this.defaultItems["" + key];
        if (this.getDefaultItems().indexOf(key) !== -1 && this.ensureDisabledStatus(key) && !dItem.hide) {
          this.disableItems.push(item.text);
        }
        if (item.hide) {
          this.hiddenItems.push(item.text);
        }
      }
      this.columnMenu.enableItems(this.disableItems, false);
      this.columnMenu.hideItems(this.hiddenItems);
    };
    ColumnMenu2.prototype.columnMenuOnOpen = function(args) {
      if (args.element.className === "e-menu-parent e-ul ") {
        if (args.element.offsetHeight > window.innerHeight || this.parent.element.offsetHeight > window.innerHeight) {
          args.element.style.maxHeight = window.innerHeight * 0.8 + "px";
          args.element.style.overflowY = "auto";
          if (this.parent.enableStickyHeader) {
            args.element.style.position = "fixed";
          }
        }
      }
    };
    ColumnMenu2.prototype.ensureDisabledStatus = function(item) {
      var status = false;
      switch (item) {
        case "Group":
          if (!this.parent.allowGrouping || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0 || this.targetColumn && !this.targetColumn.allowGrouping) {
            status = true;
          }
          break;
        case "AutoFitAll":
        case "AutoFit":
          status = !this.parent.ensureModuleInjected(Resize);
          break;
        case "Ungroup":
          if (!this.parent.ensureModuleInjected(Group) || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0) {
            status = true;
          }
          break;
        case "SortDescending":
        case "SortAscending":
          if (this.parent.allowSorting && this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn && this.targetColumn.allowSorting) {
            var sortColumns = this.parent.sortSettings.columns;
            for (var i = 0; i < sortColumns.length; i++) {
              if (sortColumns[parseInt(i.toString(), 10)].field === this.targetColumn.field && sortColumns[parseInt(i.toString(), 10)].direction.toLocaleLowerCase() === item.toLocaleLowerCase().replace("sort", "")) {
                status = true;
              }
            }
          } else if (!this.parent.allowSorting || !this.parent.ensureModuleInjected(Sort) || this.parent.allowSorting && this.targetColumn && !this.targetColumn.allowSorting) {
            status = true;
          }
          break;
        case "Filter":
          if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar" && this.parent.ensureModuleInjected(Filter) && this.targetColumn && this.targetColumn.allowFiltering) {
            status = false;
          } else if (this.parent.ensureModuleInjected(Filter) && this.parent.allowFiltering && this.targetColumn && (!this.targetColumn.allowFiltering || this.parent.filterSettings.type === "FilterBar")) {
            status = true;
          }
      }
      return status;
    };
    ColumnMenu2.prototype.columnMenuItemClick = function(args) {
      var item = this.isChooserItem(args.item) ? "ColumnChooser" : this.getKeyFromId(args.item.id);
      switch (item) {
        case "AutoFit":
          this.parent.autoFitColumns(this.targetColumn.field);
          break;
        case "AutoFitAll":
          this.parent.autoFitColumns([]);
          break;
        case "Ungroup":
          this.parent.ungroupColumn(this.targetColumn.field);
          break;
        case "Group":
          this.parent.groupColumn(this.targetColumn.field);
          break;
        case "SortAscending":
          this.parent.sortColumn(this.targetColumn.field, "Ascending");
          break;
        case "SortDescending":
          this.parent.sortColumn(this.targetColumn.field, "Descending");
          break;
        case "ColumnChooser":
          var key = this.getKeyFromId(args.item.id, this.CHOOSER);
          var checkbox = args.element.querySelector(".e-checkbox-wrapper .e-frame");
          if (checkbox && checkbox.classList.contains("e-check")) {
            checkbox.classList.remove("e-check");
            this.parent.hideColumns(key, "field");
          } else if (checkbox) {
            this.parent.showColumns(key, "field");
            checkbox.classList.add("e-check");
          }
          break;
        case "Filter":
          this.getFilter(args.element, args.item.id);
          break;
      }
      args.column = this.targetColumn;
      this.parent.trigger(columnMenuClick, args);
    };
    ColumnMenu2.prototype.columnMenuOnClose = function(args) {
      var parent = "parentObj";
      if (args.items.length > 0 && args.items[0]["" + parent] instanceof ContextMenu) {
        this.columnMenu.enableItems(this.disableItems, false);
        this.disableItems = [];
        this.columnMenu.showItems(this.hiddenItems);
        this.hiddenItems = [];
        if (this.isFilterPopupOpen()) {
          this.getFilter(args.element, args.element.id, true);
        }
      }
      if (!isNullOrUndefined(args.parentItem) && this.getKeyFromId(args.parentItem.id) === "ColumnChooser" && this.columnMenu.element.querySelector(".e-selected")) {
        this.columnMenu.element.querySelector(".e-selected").focus();
      } else {
        this.parent.notify(restoreFocus, {});
      }
    };
    ColumnMenu2.prototype.getDefaultItems = function() {
      return ["AutoFitAll", "AutoFit", "SortAscending", "SortDescending", "Group", "Ungroup", "ColumnChooser", "Filter"];
    };
    ColumnMenu2.prototype.getItems = function() {
      var items = [];
      var defultItems = this.parent.columnMenuItems ? this.parent.columnMenuItems : this.getDefault();
      for (var _i = 0, defultItems_1 = defultItems; _i < defultItems_1.length; _i++) {
        var item = defultItems_1[_i];
        if (typeof item === "string") {
          if (item === "ColumnChooser") {
            var col = this.getDefaultItem(item);
            col.items = this.createChooserItems();
            items.push(col);
          } else {
            items.push(this.getDefaultItem(item));
          }
        } else {
          items.push(item);
        }
      }
      return items;
    };
    ColumnMenu2.prototype.getDefaultItem = function(item) {
      var menuItem = {};
      switch (item) {
        case "SortAscending":
          menuItem = {
            iconCss: this.ASCENDING
          };
          break;
        case "SortDescending":
          menuItem = {
            iconCss: this.DESCENDING
          };
          break;
        case "Group":
          menuItem = {
            iconCss: this.GROUP
          };
          break;
        case "Ungroup":
          menuItem = {
            iconCss: this.UNGROUP
          };
          break;
        case "Filter":
          menuItem = {
            iconCss: this.FILTER
          };
          break;
      }
      this.defaultItems["" + item] = {
        text: this.getLocaleText(item),
        id: this.generateID(item),
        iconCss: menuItem.iconCss ? "e-icons " + menuItem.iconCss : null
      };
      return this.defaultItems["" + item];
    };
    ColumnMenu2.prototype.getLocaleText = function(item) {
      return this.l10n.getConstant(this.localeText["" + item]);
    };
    ColumnMenu2.prototype.generateID = function(item, append2) {
      return this.gridID + "_colmenu_" + (append2 ? append2 + item : item);
    };
    ColumnMenu2.prototype.getKeyFromId = function(id, append2) {
      return id.indexOf("_colmenu_") > 0 && id.replace(this.gridID + "_colmenu_" + (append2 ? append2 : ""), "");
    };
    ColumnMenu2.prototype.getColumnMenu = function() {
      return this.element;
    };
    ColumnMenu2.prototype.getModuleName = function() {
      return "columnMenu";
    };
    ColumnMenu2.prototype.setLocaleKey = function() {
      var localeKeys = {
        "AutoFitAll": "autoFitAll",
        "AutoFit": "autoFit",
        "Group": "Group",
        "Ungroup": "Ungroup",
        "SortAscending": "SortAscending",
        "SortDescending": "SortDescending",
        "ColumnChooser": "Columnchooser",
        "Filter": "FilterMenu"
      };
      return localeKeys;
    };
    ColumnMenu2.prototype.getHeaderCell = function(e) {
      return closest(e.target, "th.e-headercell");
    };
    ColumnMenu2.prototype.getColumn = function() {
      if (this.headerCell) {
        var uid2 = this.headerCell.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
        return this.parent.getColumnByUid(uid2);
      }
      return null;
    };
    ColumnMenu2.prototype.createChooserItems = function() {
      var items = [];
      for (var _i = 0, _a = this.parent.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.showInColumnChooser && col.field) {
          items.push({
            id: this.generateID(col.field, this.CHOOSER),
            text: col.headerText ? col.headerText : col.field
          });
        }
      }
      return items;
    };
    ColumnMenu2.prototype.appendFilter = function(e) {
      var filter = "Filter";
      if (!this.defaultItems["" + filter]) {
        return;
      } else {
        var key = this.defaultItems["" + filter].id;
        if (closest(e.target, "#" + key) && !this.isFilterPopupOpen()) {
          this.getFilter(e.target, key);
        } else if (!closest(e.target, "#" + key) && this.isFilterPopupOpen()) {
          this.getFilter(e.target, key, true);
        }
      }
    };
    ColumnMenu2.prototype.getFilter = function(target, id, isClose) {
      var filterPopup = this.getFilterPop();
      if (filterPopup) {
        filterPopup.style.display = !Browser.isDevice && isClose ? "none" : "block";
      } else {
        this.parent.notify(filterOpen, {
          col: this.targetColumn,
          target,
          isClose,
          id
        });
      }
    };
    ColumnMenu2.prototype.setPosition = function(li, ul) {
      var gridPos = this.parent.element.getBoundingClientRect();
      var liPos = li.getBoundingClientRect();
      var left = liPos.left - gridPos.left;
      var top = liPos.top - gridPos.top;
      if (gridPos.height < top) {
        top = top - ul.offsetHeight + liPos.height;
      } else if (gridPos.height < top + ul.offsetHeight) {
        top = gridPos.height - ul.offsetHeight;
      }
      if (window.innerHeight < ul.offsetHeight + top + gridPos.top) {
        top = window.innerHeight - ul.offsetHeight - gridPos.top;
      }
      if (top + gridPos.top < 0) {
        top = 0;
      }
      left += this.parent.enableRtl ? -ul.offsetWidth : liPos.width;
      if (gridPos.width <= left + ul.offsetWidth) {
        left -= liPos.width + ul.offsetWidth;
        if (liPos.left < ul.offsetWidth) {
          left = liPos.left + ul.offsetWidth / 2;
        }
      } else if (left < 0) {
        left += ul.offsetWidth + liPos.width;
      }
      ul.style.top = top + "px";
      ul.style.left = left + "px";
    };
    ColumnMenu2.prototype.filterPosition = function() {
      var filterPopup = this.getFilterPop();
      if (this.parent.enableAdaptiveUI) {
        return;
      }
      filterPopup.classList.add(this.WRAP);
      if (!Browser.isDevice) {
        var disp = filterPopup.style.display;
        filterPopup.style.cssText += "display:block;visibility:hidden";
        var li = this.element.querySelector("." + this.FILTER);
        if (li) {
          this.setPosition(li.parentElement, filterPopup);
          filterPopup.style.cssText += "display:" + disp + ";visibility:visible";
        }
      }
    };
    ColumnMenu2.prototype.getDefault = function() {
      var items = [];
      if (this.parent.ensureModuleInjected(Resize)) {
        items.push("AutoFitAll");
        items.push("AutoFit");
      }
      if (this.parent.allowGrouping && this.parent.ensureModuleInjected(Group)) {
        items.push("Group");
        items.push("Ungroup");
      }
      if (this.parent.allowSorting && this.parent.ensureModuleInjected(Sort)) {
        items.push("SortAscending");
        items.push("SortDescending");
      }
      items.push("ColumnChooser");
      if (this.parent.allowFiltering && this.parent.filterSettings.type !== "FilterBar" && this.parent.ensureModuleInjected(Filter)) {
        items.push("Filter");
      }
      return items;
    };
    ColumnMenu2.prototype.isFilterPopupOpen = function() {
      var filterPopup = this.getFilterPop();
      return filterPopup && filterPopup.style.display !== "none";
    };
    ColumnMenu2.prototype.getFilterPop = function() {
      if (!isNullOrUndefined(this.targetColumn) && this.parent.filterSettings.type === "Menu" && Browser.isDevice) {
        return document.getElementById(this.targetColumn.uid + "-flmdlg");
      }
      return this.parent.element.querySelector("." + this.POP);
    };
    ColumnMenu2.prototype.isFilterItemAdded = function() {
      return this.parent.columnMenuItems && this.parent.columnMenuItems.indexOf("Filter") >= 0 || !this.parent.columnMenuItems;
    };
    ColumnMenu2.prototype.renderResponsiveChangeAction = function(args) {
      this.responsiveDialogRenderer.action = args.action;
    };
    return ColumnMenu2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/foreign-key.js
var __extends85 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ForeignKey = (
  /** @class */
  function(_super) {
    __extends85(ForeignKey2, _super);
    function ForeignKey2(parent, serviceLocator) {
      var _this = _super.call(this, parent, serviceLocator) || this;
      _this.parent = parent;
      _this.serviceLocator = serviceLocator;
      _this.initEvent();
      return _this;
    }
    ForeignKey2.prototype.initEvent = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initForeignKeyColumn, this.initForeignKeyColumns, this);
      this.parent.on(getForeignKeyData, this.getForeignKeyData, this);
      this.parent.on(generateQuery, this.generateQueryFormData, this);
    };
    ForeignKey2.prototype.initForeignKeyColumns = function(columns) {
      for (var i = 0; i < columns.length; i++) {
        columns[parseInt(i.toString(), 10)].dataSource = columns[parseInt(i.toString(), 10)].dataSource instanceof DataManager ? columns[parseInt(i.toString(), 10)].dataSource : isNullOrUndefined(columns[parseInt(i.toString(), 10)].dataSource) ? new DataManager() : "result" in columns[parseInt(i.toString(), 10)].dataSource ? columns[parseInt(i.toString(), 10)].dataSource : new DataManager(columns[parseInt(i.toString(), 10)].dataSource);
      }
    };
    ForeignKey2.prototype.eventfPromise = function(args, query, key, column) {
      var state = this.getStateEventArgument(query);
      var def = new Deferred();
      var deff = new Deferred();
      state.action = args.action;
      var dataModule = this.parent.getDataModule();
      if (!isNullOrUndefined(args.action) && args.action.requestType && dataModule.foreignKeyDataState.isDataChanged !== false) {
        dataModule.setForeignKeyDataState({
          isPending: true,
          resolver: deff.resolve
        });
        deff.promise.then(function() {
          def.resolve(column.dataSource);
        });
        state.setColumnData = this.parent.setForeignKeyData.bind(this.parent);
        this.parent.trigger(columnDataStateChange, state);
      } else {
        dataModule.setForeignKeyDataState({});
        def.resolve(key);
      }
      return def;
    };
    ForeignKey2.prototype.getForeignKeyData = function(args) {
      var _this = this;
      var foreignColumns = args.column ? [args.column] : this.parent.getForeignKeyColumns();
      var allPromise = [];
      var _loop_1 = function(i2) {
        var promise = void 0;
        var query = args.isComplex ? this_1.genarateColumnQuery(foreignColumns[parseInt(i2.toString(), 10)]) : this_1.genarateQuery(foreignColumns[parseInt(i2.toString(), 10)], args.result.result, false, true);
        query.params = this_1.parent.query.params;
        var dataSource = foreignColumns[parseInt(i2.toString(), 10)].dataSource;
        if (dataSource && "result" in dataSource) {
          var def = this_1.eventfPromise(args, query, dataSource, foreignColumns[parseInt(i2.toString(), 10)]);
          promise = def.promise;
        } else if (!dataSource.ready || dataSource.dataSource.offline) {
          promise = dataSource.executeQuery(query);
        } else {
          promise = dataSource.ready.then(function() {
            return dataSource.executeQuery(query);
          });
        }
        allPromise.push(promise);
      };
      var this_1 = this;
      for (var i = 0; i < foreignColumns.length; i++) {
        _loop_1(i);
      }
      Promise.all(allPromise).then(function(responses) {
        for (var i2 = 0; i2 < responses.length; i2++) {
          foreignColumns[parseInt(i2.toString(), 10)].columnData = responses[parseInt(i2.toString(), 10)].result;
          if (foreignColumns[parseInt(i2.toString(), 10)].editType === "dropdownedit" && "result" in foreignColumns[parseInt(i2.toString(), 10)].dataSource) {
            foreignColumns[parseInt(i2.toString(), 10)].edit.params = extend(foreignColumns[parseInt(i2.toString(), 10)].edit.params, {
              dataSource: responses[parseInt(i2.toString(), 10)].result,
              query: new Query(),
              fields: {
                value: foreignColumns[parseInt(i2.toString(), 10)].foreignKeyField || foreignColumns[parseInt(i2.toString(), 10)].field,
                text: foreignColumns[parseInt(i2.toString(), 10)].foreignKeyValue
              }
            });
          }
        }
        args.promise.resolve(args.result);
      }).catch(function(e) {
        var errorMsg = e;
        if (!errorMsg.error) {
          errorMsg = {
            error: errorMsg
          };
        }
        _this.parent.log(["actionfailure", "foreign_key_failure"], errorMsg);
        if (args.promise && args.promise.reject) {
          args.promise.reject(e);
        }
        return e;
      });
    };
    ForeignKey2.prototype.generateQueryFormData = function(args) {
      args.predicate.predicate = this.genarateQuery(args.column, args.column.columnData, true);
    };
    ForeignKey2.prototype.genarateQuery = function(column, e, fromData, needQuery) {
      var gObj = this.parent;
      var predicates = [];
      var query = new Query();
      var field = fromData ? column.foreignKeyField : column.field;
      if (gObj.allowPaging || gObj.enableVirtualization || fromData) {
        e = new DataManager(gObj.allowGrouping && gObj.groupSettings.columns.length && !fromData ? e.records : e).executeLocal(new Query().select(field));
        var filteredValue = DataUtil.distinct(e, field, false);
        field = fromData ? column.field : column.foreignKeyField;
        for (var i = 0; i < filteredValue.length; i++) {
          if (filteredValue[parseInt(i.toString(), 10)] && filteredValue[parseInt(i.toString(), 10)].getDay) {
            predicates.push(getDatePredicate({
              field,
              operator: "equal",
              value: filteredValue[parseInt(i.toString(), 10)],
              matchCase: false
            }));
          } else {
            predicates.push(new Predicate(field, "equal", filteredValue[parseInt(i.toString(), 10)], false));
          }
        }
      }
      if (needQuery) {
        return predicates.length ? query.where(Predicate.or(predicates)) : query;
      }
      return predicates.length ? Predicate.or(predicates) : {
        predicates: []
      };
    };
    ForeignKey2.prototype.genarateColumnQuery = function(column) {
      var gObj = this.parent;
      var query = new Query();
      var queryColumn = this.isFiltered(column);
      if (queryColumn.isTrue) {
        query = this.filterQuery(query, queryColumn.column, true);
      }
      if (gObj.searchSettings.key.length) {
        var sSettings = gObj.searchSettings;
        if (column.dataSource instanceof DataManager && column.dataSource.adaptor.getModuleName && column.dataSource.adaptor.getModuleName() === "ODataV4Adaptor") {
          query = this.searchQuery(query, column, true);
        } else {
          query.search(sSettings.key, column.foreignKeyValue, sSettings.operator, sSettings.ignoreCase);
        }
      }
      return query;
    };
    ForeignKey2.prototype.isFiltered = function(column) {
      var filterColumn = this.parent.filterSettings.columns.filter(function(fColumn) {
        return fColumn.field === column.foreignKeyValue && fColumn.uid === column.uid;
      });
      return {
        column: filterColumn,
        isTrue: !!filterColumn.length
      };
    };
    ForeignKey2.prototype.getModuleName = function() {
      return "foreignKey";
    };
    ForeignKey2.prototype.destroy = function() {
      this.destroyEvent();
    };
    ForeignKey2.prototype.destroyEvent = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initForeignKeyColumn, this.initForeignKeyColumns);
      this.parent.off(getForeignKeyData, this.getForeignKeyData);
      this.parent.off(generateQuery, this.generateQueryFormData);
    };
    return ForeignKey2;
  }(Data)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js
var InfiniteScroll = (
  /** @class */
  function() {
    function InfiniteScroll2(parent, serviceLocator) {
      this.infiniteCache = {};
      this.infiniteCurrentViewData = {};
      this.isDownScroll = false;
      this.isUpScroll = false;
      this.isScroll = true;
      this.enableContinuousScroll = false;
      this.initialRender = true;
      this.isRemove = false;
      this.isInitialCollapse = false;
      this.prevScrollTop = 0;
      this.actions = ["filtering", "searching", "grouping", "ungrouping", "reorder", "sorting", "refresh"];
      this.keys = [downArrow, upArrow, enter, shiftEnter];
      this.rowTop = 0;
      this.virtualInfiniteData = {};
      this.isCancel = false;
      this.emptyRowData = {};
      this.isNormaledit = false;
      this.isInfiniteScroll = false;
      this.isLastPage = false;
      this.isInitialRender = true;
      this.isFocusScroll = false;
      this.isGroupCollapse = false;
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.isNormaledit = this.parent.editSettings.mode === "Normal";
      this.addEventListener();
      this.widthService = serviceLocator.getService("widthService");
      this.rowModelGenerator = new RowModelGenerator(this.parent);
    }
    InfiniteScroll2.prototype.getModuleName = function() {
      return "infiniteScroll";
    };
    InfiniteScroll2.prototype.addEventListener = function() {
      this.parent.on(dataReady, this.onDataReady, this);
      this.parent.on(dataSourceModified, this.dataSourceModified, this);
      this.parent.on(infinitePageQuery, this.infinitePageQuery, this);
      this.parent.on(infiniteScrollHandler, this.infiniteScrollHandler, this);
      this.parent.on(beforeCellFocused, this.infiniteCellFocus, this);
      this.parent.on(appendInfiniteContent, this.appendInfiniteRows, this);
      this.parent.on(removeInfiniteRows, this.removeInfiniteCacheRows, this);
      this.parent.on(resetInfiniteBlocks, this.resetInfiniteBlocks, this);
      this.parent.on(setInfiniteCache, this.setCache, this);
      this.parent.on(initialCollapse, this.ensureIntialCollapse, this);
      this.parent.on(keyPressed, this.infiniteCellFocus, this);
      this.parent.on(infiniteShowHide, this.setDisplayNone, this);
      this.parent.on(virtualScrollEditActionBegin, this.editActionBegin, this);
      this.parent.on(getVirtualData, this.getVirtualInfiniteData, this);
      this.parent.on(editReset, this.resetInfiniteEdit, this);
      this.parent.on(virtualScrollEditSuccess, this.infiniteEditSuccess, this);
      this.parent.on(refreshVirtualCache, this.refreshInfiniteCache, this);
      this.parent.on(refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);
      this.parent.on(infiniteEditHandler, this.infiniteEditHandler, this);
      this.parent.on(virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);
      this.parent.on(modelChanged, this.modelChanged, this);
      this.parent.on(refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(contentReady, this.selectNewRow, this);
      this.parent.on(captionActionComplete, this.captionActionComplete, this);
      this.parent.on(setVirtualPageQuery, this.setGroupCollapsePageQuery, this);
      this.parent.on(infiniteScrollComplete, this.onActionComplete, this);
      this.actionBeginFunction = this.actionBegin.bind(this);
      this.actionCompleteFunction = this.actionComplete.bind(this);
      this.dataBoundFunction = this.dataBound.bind(this);
      this.parent.addEventListener(actionBegin, this.actionBeginFunction);
      this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
      this.parent.addEventListener(dataBound, this.dataBoundFunction);
    };
    InfiniteScroll2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(dataReady, this.onDataReady);
      this.parent.off(dataSourceModified, this.dataSourceModified);
      this.parent.off(infinitePageQuery, this.infinitePageQuery);
      this.parent.off(infiniteScrollHandler, this.infiniteScrollHandler);
      this.parent.off(beforeCellFocused, this.infiniteCellFocus);
      this.parent.off(appendInfiniteContent, this.appendInfiniteRows);
      this.parent.off(removeInfiniteRows, this.removeInfiniteCacheRows);
      this.parent.off(resetInfiniteBlocks, this.resetInfiniteBlocks);
      this.parent.off(setInfiniteCache, this.setCache);
      this.parent.off(initialCollapse, this.ensureIntialCollapse);
      this.parent.off(keyPressed, this.infiniteCellFocus);
      this.parent.off(infiniteShowHide, this.setDisplayNone);
      this.parent.off(virtualScrollEditActionBegin, this.editActionBegin);
      this.parent.off(getVirtualData, this.getVirtualInfiniteData);
      this.parent.off(editReset, this.resetInfiniteEdit);
      this.parent.off(virtualScrollEditSuccess, this.infiniteEditSuccess);
      this.parent.off(refreshVirtualCache, this.refreshInfiniteCache);
      this.parent.on(refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);
      this.parent.off(infiniteEditHandler, this.infiniteEditHandler);
      this.parent.off(virtualScrollAddActionBegin, this.infiniteAddActionBegin);
      this.parent.off(modelChanged, this.modelChanged);
      this.parent.off(refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);
      this.parent.off(destroy, this.destroy);
      this.parent.off(contentReady, this.selectNewRow);
      this.parent.off(captionActionComplete, this.captionActionComplete);
      this.parent.off(setVirtualPageQuery, this.setGroupCollapsePageQuery);
      this.parent.off(infiniteScrollComplete, this.onActionComplete);
      this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
      this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
      this.parent.removeEventListener(dataBound, this.dataBoundFunction);
    };
    InfiniteScroll2.prototype.dataBound = function() {
      if (this.groupCaptionAction === "collapse") {
        this.groupCaptionAction = "refresh";
        this.makeGroupCollapseRequest();
      } else if (this.groupCaptionAction === "refresh") {
        this.parent.hideSpinner();
        this.groupCaptionAction = this.empty;
      }
    };
    InfiniteScroll2.prototype.setGroupCollapsePageQuery = function(args) {
      var gObj = this.parent;
      if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {
        args.skipPage = true;
        this.isGroupCollapse = false;
        if (this.groupCaptionAction === "collapse") {
          var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);
          var rowObjs = gObj.getRowsObject();
          var childCount = 0;
          for (var i = rowObjs.length - 1; i >= 0; i--) {
            if (rowObjs[parseInt(i.toString(), 10)].indent === captionRow.indent) {
              break;
            }
            if (rowObjs[parseInt(i.toString(), 10)].isDataRow) {
              childCount++;
            }
          }
          var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);
          var pred = generateExpandPredicates(key.fields, key.keys, this);
          var predicateList = getPredicates(pred);
          pred = predicateList[predicateList.length - 1];
          for (var i = predicateList.length - 2; i >= 0; i--) {
            pred = pred.and(predicateList[parseInt(i.toString(), 10)]);
          }
          args.query.where(pred);
          args.query.skip(childCount);
          this.parentCapUid = this.empty;
        } else {
          var rows = gObj.getRows();
          var size = gObj.pageSettings.pageSize;
          var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;
          var additionalCnt = skip - skip % size + size - skip;
          if (skip % size === 0) {
            additionalCnt = 0;
          }
          args.query.skip(skip);
          args.query.take(gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize + additionalCnt);
        }
      }
    };
    InfiniteScroll2.prototype.captionActionComplete = function(args) {
      var gObj = this.parent;
      if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {
        var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();
        var tableReact = gObj.contentModule.getTable().getBoundingClientRect();
        if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {
          this.parentCapUid = args.parentUid;
          this.groupCaptionAction = "collapse";
          gObj.showSpinner();
          var caption = gObj.getRowObjectFromUID(args.parentUid);
          var childCount = this.getCaptionChildCount(caption);
          if (!childCount) {
            this.groupCaptionAction = "refresh";
            this.makeGroupCollapseRequest();
          } else {
            this.makeGroupCollapseRequest(args.parentUid);
          }
        }
      }
    };
    InfiniteScroll2.prototype.makeGroupCollapseRequest = function(parentUid) {
      var gObj = this.parent;
      var captionRows = [].slice.call(gObj.getContentTable().querySelectorAll("tr"));
      var rows = gObj.groupSettings.enableLazyLoading ? captionRows : gObj.getRows();
      var index = !gObj.groupSettings.enableLazyLoading ? getRowIndexFromElement(rows[rows.length - 1]) : gObj.contentModule["visibleRows"].length - 1;
      var prevPage = this.parent.pageSettings.currentPage;
      var nextPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;
      if (prevPage >= this.maxPage || nextPage > this.maxPage) {
        gObj.hideSpinner();
        return;
      }
      this.parent.pageSettings.currentPage = nextPage;
      var scrollArg = {
        requestType: "infiniteScroll",
        currentPage: this.parent.pageSettings.currentPage,
        prevPage,
        startIndex: index + 1,
        direction: "down",
        isCaptionCollapse: true,
        parentUid
      };
      this.isGroupCollapse = true;
      this.parent.notify("model-changed", scrollArg);
    };
    InfiniteScroll2.prototype.getCaptionChildCount = function(caption) {
      var rowObj = this.parent.getRowsObject();
      var index = rowObj.indexOf(caption);
      var make = false;
      for (var i = index; i < rowObj.length; i++) {
        if ((rowObj[parseInt(i.toString(), 10)].indent === caption.indent || rowObj[parseInt(i.toString(), 10)].indent < caption.indent) && rowObj[parseInt(i.toString(), 10)].data.key !== caption.data.key) {
          break;
        }
        if (rowObj[parseInt(i.toString(), 10)].isCaptionRow && !this.childCheck(rowObj, rowObj[parseInt(i.toString(), 10)], i)) {
          make = true;
          break;
        }
      }
      return make;
    };
    InfiniteScroll2.prototype.childCheck = function(rowObj, row2, index) {
      var childCount = 0;
      for (var i = index + 1; i < rowObj.length; i++) {
        if (rowObj[parseInt(i.toString(), 10)].indent === row2.indent) {
          break;
        }
        if (rowObj[parseInt(i.toString(), 10)].indent === row2.indent + 1 && rowObj[parseInt(i.toString(), 10)].parentUid === row2.uid) {
          childCount++;
        }
      }
      return row2.data.count === childCount;
    };
    InfiniteScroll2.prototype.updateCurrentViewData = function() {
      var gObj = this.parent;
      if (gObj.groupSettings.columns.length) {
        return;
      }
      var keys = Object.keys(this.infiniteCurrentViewData);
      gObj.currentViewData = [];
      var page = gObj.pageSettings.currentPage;
      var isCache = gObj.infiniteScrollSettings.enableCache;
      var blocks = gObj.infiniteScrollSettings.maxBlocks;
      var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);
      var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;
      var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;
      for (var i = start; i <= end; i++) {
        if (this.infiniteCurrentViewData[parseInt(i.toString(), 10)]) {
          gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[parseInt(i.toString(), 10)]);
        }
      }
    };
    InfiniteScroll2.prototype.refreshInfiniteCurrentViewData = function(e) {
      if (e.args.action === "add" && e.args.requestType === "save") {
        this.parent.pageSettings.currentPage = Math.ceil(e.args["index"] / this.parent.pageSettings.pageSize) ? Math.ceil(e.args["index"] / this.parent.pageSettings.pageSize) : 1;
      }
      var page = this.parent.pageSettings.currentPage;
      var size = this.parent.pageSettings.pageSize;
      var blocks = this.parent.infiniteScrollSettings.initialBlocks;
      var keys = Object.keys(this.infiniteCurrentViewData);
      var cache = this.parent.infiniteScrollSettings.enableCache;
      if (!this.parent.groupSettings.columns.length) {
        var isAdd = e.args.requestType === "save" && !(this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length || this.parent.searchSettings.key);
        var isDelete = e.args.requestType === "delete";
        if (!cache && (isAdd || isDelete)) {
          if (isAdd) {
            var indexCount = 0;
            for (var i = 1; i <= keys.length; i++) {
              indexCount += this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1;
              if (e.args.index <= indexCount) {
                this.resetCurrentViewData(i);
                this.infiniteCurrentViewData[parseInt(i.toString(), 10)].splice(e.args.index, 0, e.args.data);
                break;
              }
            }
          } else {
            this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);
          }
        } else {
          if (blocks > 1 && e.data.length === blocks * size) {
            this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === "delete", true);
          } else {
            this.infiniteCurrentViewData[parseInt(page.toString(), 10)] = e.data.slice();
          }
        }
      }
    };
    InfiniteScroll2.prototype.resetCurrentViewData = function(startIndex) {
      var keys = Object.keys(this.infiniteCurrentViewData);
      for (var i = startIndex; i <= keys.length; i++) {
        var lastViewData = this.infiniteCurrentViewData[parseInt(i.toString(), 10)][this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1];
        if (this.infiniteCurrentViewData[i + 1]) {
          this.infiniteCurrentViewData[i + 1].splice(0, 0, lastViewData);
        }
        this.infiniteCurrentViewData[parseInt(i.toString(), 10)].pop();
      }
    };
    InfiniteScroll2.prototype.modelChanged = function(args) {
      var rows = this.parent.getRows();
      if (args.requestType === "save" && args.index && args.data) {
        this.addRowIndex = args.index;
      }
      if (rows && rows.length && args.requestType !== "infiniteScroll" && (args.requestType === "delete" || this.requestType === "add")) {
        this.firstIndex = getRowIndexFromElement(rows[0]);
        this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);
        this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);
        if (args.requestType === "delete") {
          var rowObj = this.parent.getRowsObject();
          args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;
        } else {
          args.startIndex = this.firstIndex;
        }
        if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === "delete") {
          this.isLastPage = true;
          this.lastIndex = this.lastIndex - 1;
        }
      }
    };
    InfiniteScroll2.prototype.infiniteAddActionBegin = function(args) {
      if (this.isNormaledit) {
        this.isAdd = true;
        if (this.parent.infiniteScrollSettings.enableCache) {
          if (!Object.keys(this.emptyRowData).length) {
            this.createEmptyRowdata();
          }
          if (this.parent.pageSettings.currentPage > 1) {
            args.startEdit = false;
            this.resetInfiniteBlocks({}, true);
            this.makeRequest({
              currentPage: 1
            });
          }
        }
      }
    };
    InfiniteScroll2.prototype.infiniteEditHandler = function(args) {
      if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === "delete" || args.e.requestType === "save" && this.requestType === "add")) {
        var rowElms = this.parent.getRows();
        var rows = this.parent.getRowsObject();
        if (this.ensureRowAvailability(rows, args.result[0])) {
          if (rowElms.length && !(this.addRowIndex && this.addRowIndex >= rowElms.length)) {
            this.resetRowIndex(rows, args.e, rowElms, this.requestType === "add", true);
          }
          if (!this.isLastPage) {
            this.createRow(rows, args);
          } else {
            this.isLastPage = false;
            this.parent.pageSettings.currentPage = this.maxPage;
            if (this.parent.selectionModule.index < this.parent.frozenRows) {
              remove(rowElms[this.parent.frozenRows - 1]);
              this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);
              setRowElements(this.parent);
            }
          }
        }
        this.parent.hideSpinner();
        this.parent.notify(refreshInfinitePersistSelection, {});
        if (this.requestType === "delete") {
          this.parent.notify(deleteComplete, args.e);
        } else {
          this.parent.notify(saveComplete, args.e);
        }
      }
      this.parent.notify(freezeRender, {
        case: "refreshHeight"
      });
    };
    InfiniteScroll2.prototype.createRow = function(rows, args, isMovable, isFrozenRows, isFrozenRight) {
      var row2 = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;
      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
      this.parent.removeMaskRow();
      if (args.e.requestType === "save" && args.e.index && args.e.data) {
        row2[0].index = this.addRowIndex;
        this.addRowIndex = null;
        if (row2[0].index >= rows.length) {
          return;
        }
      }
      var tbody2;
      tbody2 = this.parent.getContent().querySelector(tbody);
      if (this.parent.frozenRows) {
        tbody2 = isFrozenRows && this.requestType !== "add" || !isFrozenRows && this.requestType === "add" ? this.parent.getHeaderContent().querySelector(tbody) : tbody2;
      }
      var notifyArgs = {
        rows,
        cancel: false,
        args,
        isMovable,
        isFrozenRows,
        isFrozenRight: isFrozenRows,
        row: row2
      };
      this.parent.notify(infiniteCrudCancel, notifyArgs);
      if (!notifyArgs.cancel) {
        for (var i = row2.length - 1; i >= 0; i--) {
          if (this.requestType === "delete") {
            tbody2.appendChild(rowRenderer.render(row2[parseInt(i.toString(), 10)], this.parent.getColumns()));
          } else {
            tbody2.insertBefore(rowRenderer.render(row2[parseInt(i.toString(), 10)], this.parent.getColumns()), tbody2.rows[args.e.index]);
          }
        }
      }
      if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === "add")) {
        var rowElems = this.parent.getRows();
        var index = (isMovable || isFrozenRight) && this.requestType === "add" ? this.parent.frozenRows : this.parent.frozenRows - 1;
        remove(rowElems[parseInt(index.toString(), 10)]);
        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true, false);
      }
      if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {
        setRowElements(this.parent);
        this.parent.contentModule.visibleRows = this.requestType === "add" ? row2.concat(rows) : rows.concat(row2);
      }
    };
    InfiniteScroll2.prototype.ensureRowAvailability = function(rows, data) {
      var resume = true;
      if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === "add") {
        var key = this.parent.getPrimaryKeyFieldNames()[0];
        for (var i = 0; i < rows.length; i++) {
          if (rows[parseInt(i.toString(), 10)].data["" + key] === data["" + key]) {
            resume = false;
            break;
          }
        }
      }
      return resume;
    };
    InfiniteScroll2.prototype.generateRows = function(data, args) {
      return this.rowModelGenerator.generateRows(data, args);
    };
    InfiniteScroll2.prototype.resetRowIndex = function(rows, args, rowElms, isAdd, isFrozen) {
      var _this = this;
      var keyField = this.parent.getPrimaryKeyFieldNames()[0];
      var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);
      if (isAdd) {
        if (isRemove) {
          if (isFrozen && !this.parent.groupSettings.columns.length) {
            this.swapCurrentViewData(1, true);
          }
          remove(rowElms[rows.length - 1]);
          rowElms.splice(rows.length - 1, 1);
          rows.splice(rows.length - 1, 1);
        }
      } else {
        rows.filter(function(e, index) {
          if (e.data["" + keyField] === args.data[0]["" + keyField]) {
            if (isFrozen && !_this.parent.groupSettings.columns.length) {
              var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);
              _this.resetInfiniteCurrentViewData(page, index);
            }
            rows.splice(index, 1);
            var rowElement = _this.parent.getRowElementByUID(e.uid);
            if (rowElement) {
              var rowElementIndex = rowElms.indexOf(rowElement);
              remove(rowElement);
              rowElms.splice(rowElementIndex, 1);
            }
          }
        });
      }
      var startIndex = isAdd ? this.addRowIndex ? this.addRowIndex + 1 : 1 : 0;
      resetRowIndex(this.parent, rows, rowElms, startIndex, this.addRowIndex ? this.addRowIndex : 0);
    };
    InfiniteScroll2.prototype.resetInfiniteCurrentViewData = function(page, index) {
      index = index - (page - 1) * this.parent.pageSettings.pageSize;
      this.infiniteCurrentViewData[parseInt(page.toString(), 10)].splice(index, 1);
      this.swapCurrentViewData(page, false);
    };
    InfiniteScroll2.prototype.swapCurrentViewData = function(page, isAdd) {
      var keys = Object.keys(this.infiniteCurrentViewData);
      var end = isAdd ? keys.length + 1 : keys.length;
      for (var i = page; i < end; i++) {
        if (this.infiniteCurrentViewData[i + 1]) {
          var pageIndex = isAdd ? i : i + 1;
          var index = isAdd ? this.infiniteCurrentViewData[parseInt(i.toString(), 10)].length - 1 : 0;
          var data = this.infiniteCurrentViewData[parseInt(pageIndex.toString(), 10)].splice(index, 1);
          if (isAdd) {
            this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);
            if (i + 1 === end - 1) {
              this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);
            }
          } else {
            this.infiniteCurrentViewData[parseInt(i.toString(), 10)].push(data[0]);
          }
        }
      }
      this.updateCurrentViewData();
    };
    InfiniteScroll2.prototype.setDisplayNone = function(args) {
      if (this.parent.infiniteScrollSettings.enableCache) {
        var keys = Object.keys(this.infiniteCache);
        for (var i = 1; i <= keys.length; i++) {
          var cache = this.infiniteCache[parseInt(i.toString(), 10)];
          cache.filter(function(e) {
            e.cells[args.index].visible = args.visible === "";
          });
        }
        this.resetContentModuleCache(this.infiniteCache);
      }
    };
    InfiniteScroll2.prototype.refreshInfiniteCache = function(args) {
      this.getEditedRowObject().data = args.data;
    };
    InfiniteScroll2.prototype.refreshInfiniteCacheRowVisibleLength = function(args, currentPage) {
      var cPageRowArray = args[parseInt(currentPage.toString(), 10)];
      if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
        var length_1 = 0;
        var vRowLen = 0;
        var hRowLen = 0;
        for (var i = 0; i < cPageRowArray.length; i++) {
          if (cPageRowArray[parseInt(i.toString(), 10)].visible || isNullOrUndefined(cPageRowArray[parseInt(i.toString(), 10)].visible)) {
            vRowLen++;
          } else {
            hRowLen++;
          }
        }
        if (hRowLen > vRowLen) {
          length_1 = hRowLen - vRowLen;
          if (length_1 > vRowLen) {
            length_1 = vRowLen;
          }
        } else {
          length_1 = vRowLen - hRowLen;
          if (length_1 > hRowLen) {
            length_1 = hRowLen;
          }
        }
        if (length_1 === 0) {
          length_1 = 1;
        }
        return length_1;
      } else {
        return cPageRowArray.length;
      }
    };
    InfiniteScroll2.prototype.refreshInfiniteEditrowindex = function(args) {
      this.editRowIndex = args.index;
    };
    InfiniteScroll2.prototype.getEditedRowObject = function() {
      var rowObjects = this.parent.getRowsObject();
      var editedrow;
      for (var i = 0; i < rowObjects.length; i++) {
        if (rowObjects[parseInt(i.toString(), 10)].index === this.editRowIndex) {
          editedrow = rowObjects[parseInt(i.toString(), 10)];
        }
      }
      return editedrow;
    };
    InfiniteScroll2.prototype.infiniteEditSuccess = function(args) {
      if (this.isNormaledit) {
        if (!this.isAdd && args.data) {
          this.updateCurrentViewRecords(args.data);
        }
        this.isAdd = this.parent.editSettings.showAddNewRow;
      }
    };
    InfiniteScroll2.prototype.updateCurrentViewRecords = function(data) {
      var index = getEditedDataIndex(this.parent, data);
      if (!isNullOrUndefined(index)) {
        this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)] = data;
      }
    };
    InfiniteScroll2.prototype.actionBegin = function(args) {
      if (args.requestType === "add" || args.requestType === "delete") {
        this.requestType = args.requestType;
      } else if (args.action === "add" && args.requestType === "save") {
        this.requestType = args.action;
      }
      if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === "searching" || args.requestType === "sorting" || args.requestType === "filtering") {
        this.isInitialRender = true;
      }
    };
    InfiniteScroll2.prototype.actionComplete = function(args) {
      if (args.requestType === "delete" || args.requestType === "save" || args.requestType === "cancel") {
        this.requestType = this.empty;
        this.isCancel = args.requestType === "cancel" || args.requestType === "save";
        this.isAdd = this.isEdit = this.parent.editSettings.showAddNewRow;
        if (this.isNormaledit) {
          this.editRowIndex = this.empty;
          this.virtualInfiniteData = {};
          this.parent.editModule.previousVirtualData = {};
        }
      }
    };
    InfiniteScroll2.prototype.onActionComplete = function(e) {
      var args = {
        type: actionComplete
      };
      this.parent.trigger(actionComplete, extend(e, args));
    };
    InfiniteScroll2.prototype.resetInfiniteEdit = function() {
      if (this.parent.enableInfiniteScrolling && this.isNormaledit) {
        if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {
          this.parent.isEdit = true;
        }
      }
    };
    InfiniteScroll2.prototype.getVirtualInfiniteData = function(data) {
      this.getVirtualInfiniteEditedData();
      data.virtualData = this.parent.enableColumnVirtualization && !this.parent.infiniteScrollSettings.enableCache ? data.virtualData : this.virtualInfiniteData;
      data.isAdd = this.isAdd;
      data.isCancel = this.isCancel;
    };
    InfiniteScroll2.prototype.editActionBegin = function(e) {
      this.isEdit = true;
      this.editRowIndex = e.index;
      var rowObject = extend({}, this.getEditedRowObject().data);
      e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;
    };
    InfiniteScroll2.prototype.dataSourceModified = function() {
      this.resetInfiniteBlocks({
        requestType: this.empty
      }, true);
    };
    InfiniteScroll2.prototype.onDataReady = function(e) {
      if (!isNullOrUndefined(e.count) && e.requestType !== "infiniteScroll") {
        this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);
      }
    };
    InfiniteScroll2.prototype.ensureIntialCollapse = function(isExpand) {
      this.isInitialCollapse = !isExpand;
    };
    InfiniteScroll2.prototype.infiniteScrollHandler = function(e) {
      this.restoreInfiniteEdit();
      this.restoreInfiniteAdd();
      var targetEle = e.target;
      var isInfinite = targetEle.classList.contains(content);
      if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {
        var scrollEle = this.parent.getContent().firstElementChild;
        var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
        this.prevScrollTop = scrollEle.scrollTop;
        var rows = this.parent.groupSettings.enableLazyLoading ? captionRows : this.parent.getRows();
        if (!rows.length) {
          return;
        }
        var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;
        var prevPage = this.parent.pageSettings.currentPage;
        var args = void 0;
        var offset = targetEle.scrollHeight - targetEle.scrollTop;
        var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);
        var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);
        if (floor > targetEle.clientHeight) {
          floor = floor - 1;
        }
        var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;
        if (!isNullOrUndefined(this.groupCaptionAction)) {
          return;
        }
        if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {
          if (this.parent.infiniteScrollSettings.enableCache) {
            this.isUpScroll = false;
            this.isDownScroll = true;
          }
          var rows_1 = [].slice.call(scrollEle.querySelectorAll(".e-row:not(.e-addedrow)"));
          var row2 = rows_1[rows_1.length - 1];
          var rowIndex = !(this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length) ? getRowIndexFromElement(row2) : this.parent.contentModule["visibleRows"].length - 1;
          this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;
          args = {
            requestType: "infiniteScroll",
            currentPage: this.parent.pageSettings.currentPage,
            prevPage,
            startIndex: index,
            direction: "down"
          };
          this.makeRequest(args);
        }
        if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {
          if (this.parent.infiniteScrollSettings.enableCache) {
            this.isDownScroll = false;
            this.isUpScroll = true;
          }
          var row2 = [].slice.call(scrollEle.getElementsByClassName(row));
          var rowIndex = getRowIndexFromElement(row2[this.parent.pageSettings.pageSize - 1]);
          var startIndex = getRowIndexFromElement(row2[0]) - this.parent.pageSettings.pageSize;
          this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;
          if (this.parent.pageSettings.currentPage) {
            args = {
              requestType: "infiniteScroll",
              currentPage: this.parent.pageSettings.currentPage,
              prevPage,
              startIndex,
              direction: "up"
            };
            this.makeRequest(args);
          }
        }
        if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {
          if (this.isDownScroll || this.isUpScroll) {
            scrollEle.scrollTop = this.top;
          }
        }
      }
    };
    InfiniteScroll2.prototype.makeRequest = function(args) {
      var _this = this;
      if (this.parent.pageSettings.currentPage !== args.prevPage) {
        var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;
        if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {
          this.isInfiniteScroll = true;
          if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {
            setTimeout(function() {
              _this.getVirtualInfiniteEditedData();
              _this.parent.notify("model-changed", args);
            }, 100);
          } else {
            setTimeout(function() {
              _this.getVirtualInfiniteEditedData();
              _this.parent.notify(refreshInfiniteModeBlocks, args);
            }, 100);
          }
        } else {
          this.parent.pageSettings.currentPage = this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && initBlocks >= this.maxPage ? 1 : this.maxPage;
        }
      }
    };
    InfiniteScroll2.prototype.infinitePageQuery = function(query) {
      if (this.initialRender) {
        this.initialRender = false;
        this.intialPageQuery(query);
      } else {
        if (this.requestType === "delete" || this.requestType === "add") {
          if (!this.isInfiniteScroll && !this.parent.groupSettings.enableLazyLoading) {
            this.editPageQuery(query);
          } else if (this.parent.groupSettings.enableLazyLoading && !this.parent.infiniteScrollSettings.enableCache) {
            if (this.parent.infiniteScrollSettings.initialBlocks < this.parent.pageSettings.currentPage) {
              query.page(1, this.parent.pageSettings.pageSize * this.parent.pageSettings.currentPage);
            } else {
              query.page(1, this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks);
            }
          } else {
            query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);
          }
        } else {
          query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);
        }
      }
    };
    InfiniteScroll2.prototype.editPageQuery = function(query) {
      var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;
      var isCache = this.parent.infiniteScrollSettings.enableCache;
      if (isCache) {
        this.infiniteCache = {};
        this.infiniteCurrentViewData = {};
        query.skip(this.firstIndex);
        query.take(initialBlocks * this.parent.pageSettings.pageSize);
      } else {
        if (this.parent.editSettings.mode === "Dialog") {
          this.parent.clearSelection();
        }
        var index = this.requestType === "delete" ? this.lastIndex : this.addRowIndex ? this.addRowIndex : this.firstIndex;
        query.skip(index);
        if (!isNullOrUndefined(this.parent.getDataModule().dataManager.dataSource.url) && this.parent.getDataModule().dataManager.dataSource.url !== "" && (this.requestType === "delete" || this.requestType === "add")) {
          query.take(initialBlocks * this.parent.pageSettings.pageSize);
        } else {
          query.take(1);
        }
      }
    };
    InfiniteScroll2.prototype.intialPageQuery = function(query) {
      if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {
        this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;
      }
      var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;
      query.page(1, pageSize);
    };
    InfiniteScroll2.prototype.scrollToLastFocusedCell = function(e) {
      var gObj = this.parent;
      var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === upArrow ? -1 : 1);
      var cellIdx = this.lastFocusInfo.cellIdx;
      var row2 = gObj.getRowByIndex(rowIdx);
      if (!row2) {
        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
        var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;
        gObj.pageSettings.currentPage = page;
        var cols = gObj.getColumns();
        remove(gObj.getContent().querySelector("tbody"));
        gObj.getContent().querySelector("table").appendChild(gObj.createElement("tbody", {
          attrs: {
            "role": "rowgroup"
          }
        }));
        var focusRows = [];
        for (var i = page === 1 || this.maxPage === page ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {
          var rows = this.infiniteCache[page + i];
          if (rows) {
            focusRows = focusRows.concat(rows);
            for (var j = 0; j < rows.length; j++) {
              gObj.getContent().querySelector("tbody").appendChild(rowRenderer.render(rows[parseInt(j.toString(), 10)], cols));
            }
          }
        }
        gObj.notify(contentReady, {
          rows: focusRows,
          args: {}
        });
        setRowElements(gObj);
      }
      row2 = gObj.getRowByIndex(rowIdx);
      var target = row2.cells[parseInt(cellIdx.toString(), 10)];
      gObj.focusModule.isInfiniteScroll = true;
      gObj.focusModule.onClick({
        target
      }, true);
      gObj.selectRow(rowIdx);
      target.focus();
      this.isFocusScroll = false;
      e.cancel = true;
    };
    InfiniteScroll2.prototype.setLastCellFocusInfo = function(e) {
      var cell = e.byClick && e.clickArgs.target || e.byKey && e.keyArgs.target || (!this.isFocusScroll && e).target;
      if (cell && cell.classList.contains("e-rowcell")) {
        var cellIdx = parseInt(cell.getAttribute("data-colindex"), 10);
        var rowIdx = parseInt(cell.parentElement.getAttribute("data-rowindex"), 10);
        this.lastFocusInfo = {
          rowIdx,
          cellIdx
        };
      }
    };
    InfiniteScroll2.prototype.infiniteCellFocus = function(e) {
      var gObj = this.parent;
      var cache = gObj.infiniteScrollSettings.enableCache;
      if (e.byKey) {
        if (cache && this.isFocusScroll) {
          this.scrollToLastFocusedCell(e);
          return;
        }
        var cell = document.activeElement;
        var rowIndex = getRowIndexFromElement(cell.parentElement);
        this.cellIndex = parseInt(cell.getAttribute(dataColIndex), 10);
        var content2 = gObj.getContent().firstElementChild;
        var totalRowsCount = this.maxPage * gObj.pageSettings.pageSize - 1;
        var visibleRowCount = Math.floor(content2.offsetHeight / this.parent.getRowHeight());
        var contentRect = content2.getBoundingClientRect();
        if (!isNaN(rowIndex)) {
          if (e.keyArgs.action === downArrow || e.keyArgs.action === enter) {
            this.rowIndex = rowIndex += 1;
            var row2 = gObj.getRowByIndex(rowIndex);
            var rowRect = row2 && row2.getBoundingClientRect();
            if (cache) {
              rowIndex = cell.parentElement.rowIndex + 1;
            }
            if (this.isFocusScroll || !row2 && rowIndex < totalRowsCount || rowRect && rowRect.bottom >= contentRect.bottom) {
              if (!this.isFocusScroll) {
                this.pressedKey = e.keyArgs.action;
              }
              this.isFocusScroll = false;
              content2.scrollTop = (rowIndex - visibleRowCount + 1) * this.parent.getRowHeight();
            } else if (!cache && row2) {
              if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {
                row2.cells[this.cellIndex].scrollIntoView();
              }
            }
          } else if (e.keyArgs.action === upArrow || e.keyArgs.action === shiftEnter) {
            this.rowIndex = rowIndex -= 1;
            var row2 = gObj.getRowByIndex(rowIndex);
            var rowRect = row2 && row2.getBoundingClientRect();
            if (cache) {
              rowIndex = cell.parentElement.rowIndex - 1;
            }
            if (!row2 || rowRect.top <= contentRect.top) {
              this.pressedKey = e.keyArgs.action;
              content2.scrollTop = rowIndex * this.parent.getRowHeight();
            }
          }
        }
      } else if (e.key === "PageDown" || e.key === "PageUp") {
        this.pressedKey = e.key;
      }
      this.setLastCellFocusInfo(e);
    };
    InfiniteScroll2.prototype.createEmptyRowdata = function() {
      var _this = this;
      this.parent.getColumns().filter(function(e) {
        _this.emptyRowData[e.field] = _this.empty;
      });
    };
    InfiniteScroll2.prototype.getVirtualInfiniteEditedData = function() {
      var editForm = this.parent.element.querySelector("." + editedRow);
      var addForm = this.parent.element.querySelector("." + addedRow);
      var gridForm = this.parent.element.querySelector(".e-gridform");
      if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {
        var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);
        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);
        var hiddenColumn = this.parent.getHiddenColumns();
        for (var i = 0; i < hiddenColumn.length; i++) {
          if (hiddenColumn[parseInt(i.toString(), 10)].defaultValue) {
            this.virtualInfiniteData[hiddenColumn[parseInt(i.toString(), 10)].field] = hiddenColumn[parseInt(i.toString(), 10)].defaultValue;
          }
        }
      }
    };
    InfiniteScroll2.prototype.restoreInfiniteEdit = function() {
      var content2 = this.parent.getContent().firstElementChild;
      var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;
      if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {
        if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {
          var row2 = this.parent.getRowByIndex(this.editRowIndex);
          if (Object.keys(this.virtualInfiniteData).length && row2 && !this.parent.getContent().querySelector("." + editedRow)) {
            var top_1 = row2.getBoundingClientRect().top;
            if (top_1 < content2.offsetHeight && top_1 > this.parent.getRowHeight()) {
              this.parent.isEdit = false;
              this.parent.editModule.startEdit(row2);
            }
          }
        }
      }
    };
    InfiniteScroll2.prototype.restoreInfiniteAdd = function() {
      var content2 = this.parent.getContent().firstElementChild;
      if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content2.querySelector("." + addedRow)) {
        var isTop = content2.scrollTop < this.parent.getRowHeight();
        if (isTop) {
          this.parent.isEdit = false;
          this.parent.addRecord();
        }
      }
    };
    InfiniteScroll2.prototype.appendInfiniteRows = function(e) {
      var scrollEle = this.parent.getContent().firstElementChild;
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === "infiniteScroll";
      if ((this.parent.isAngular || this.parent.isReact || this.parent.isVue || this.parent.isVue3) && isInfiniteScroll && !e.args.isFrozen && this.parent.infiniteScrollSettings.enableCache) {
        var isChildGrid = this.parent.childGrid && this.parent.element.querySelectorAll(".e-childgrid").length ? true : false;
        var rows = this.parent.getDataRows();
        this.parent.refreshReactTemplateTD(rows, isChildGrid);
      }
      if (isInfiniteScroll && !e.args.isFrozen || !isInfiniteScroll) {
        if (isInfiniteScroll && e.args.direction === "up") {
          e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);
        } else {
          e.tbody.appendChild(e.frag);
        }
      }
      this.parent.contentModule.getTable().appendChild(e.tbody);
      this.updateCurrentViewData();
      if (this.isInitialRender && !e.args.isFrozen) {
        this.isInitialRender = false;
        this.parent.scrollModule.setHeight();
      }
      if (!e.args.isFrozen) {
        this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;
        if (isInfiniteScroll) {
          if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {
            scrollEle.scrollTop = this.top;
          }
          setRowElements(this.parent);
        }
        this.restoreInfiniteAdd();
        this.isScroll = true;
      }
      this.isInfiniteScroll = false;
    };
    InfiniteScroll2.prototype.selectNewRow = function(args) {
      var _this = this;
      var gObj = this.parent;
      var row2 = gObj.getRowByIndex(this.rowIndex);
      var cache = gObj.infiniteScrollSettings.enableCache;
      if (row2 && this.keys.some(function(value) {
        return value === _this.pressedKey;
      })) {
        var content2 = gObj.getContent().firstElementChild;
        var rowHeight2 = gObj.getRowHeight();
        var target = row2.cells[this.cellIndex];
        if (this.pressedKey === downArrow || this.pressedKey === enter || cache && (this.pressedKey === upArrow || this.pressedKey === shiftEnter)) {
          if (!cache && this.pressedKey !== upArrow && this.pressedKey !== shiftEnter) {
            content2.scrollTop = content2.scrollTop + rowHeight2;
          }
          gObj.focusModule.isInfiniteScroll = true;
          gObj.focusModule.onClick({
            target
          }, true);
          gObj.selectRow(this.rowIndex);
        }
      } else if (this.lastFocusInfo && (this.pressedKey === pageDown || this.pressedKey === pageUp)) {
        var idx = cache ? 0 : this.lastFocusInfo.rowIdx;
        if (gObj.getRowByIndex(idx)) {
          var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);
          if (target) {
            this.isFocusScroll = true;
            if (!cache) {
              gObj.focusModule.isInfiniteScroll = true;
              gObj.focusModule.onClick({
                target
              }, true);
            } else {
              target.focus({
                preventScroll: true
              });
            }
          }
        }
      }
      this.pressedKey = void 0;
    };
    InfiniteScroll2.prototype.removeInfiniteCacheRows = function(e) {
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === "infiniteScroll";
      if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {
        var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(row));
        if (e.args.direction === "down") {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
            this.removeCaptionRows(captionRows, e.args);
          }
          var addRowCount = this.parent.element.querySelector("." + addedRow) ? 0 : 1;
          this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);
        }
        if (e.args.direction === "up") {
          if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll("tr"));
            this.removeCaptionRows(captionRows, e.args);
          } else {
            this.removeBottomRows(rows, rows.length - 1, e.args);
          }
        }
        this.isScroll = false;
        this.top = this.calculateScrollTop(e.args);
      }
    };
    InfiniteScroll2.prototype.calculateScrollTop = function(args) {
      var top = 0;
      var scrollCnt = this.parent.getContent().firstElementChild;
      if (args.direction === "down") {
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {
          top = this.captionRowHeight();
        }
        var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll("tr:not(.e-row)"));
        var captionCount = 0;
        if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {
          captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);
        }
        var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);
        var currentViewRowCount = 0;
        var i = 0;
        while (currentViewRowCount < scrollCnt.clientHeight) {
          i++;
          currentViewRowCount = i * this.parent.getRowHeight();
        }
        i = i - 1;
        top += (value - i) * this.parent.getRowHeight();
      }
      if (args.direction === "up") {
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {
          var len = this.refreshInfiniteCacheRowVisibleLength(this.infiniteCache, this.parent.pageSettings.currentPage);
          top = len * this.parent.getRowHeight();
        } else if (this.isInitialCollapse) {
          var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];
          var count2 = 0;
          for (var i = 0; i < groupedData.length; i++) {
            if (groupedData[parseInt(i.toString(), 10)].isCaptionRow) {
              count2++;
            }
          }
          top += Math.round(count2 / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();
        } else {
          top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();
        }
      }
      return top;
    };
    InfiniteScroll2.prototype.captionRowHeight = function() {
      var rows = [].slice.call(this.parent.getContent().querySelectorAll("tr:not(.e-row)"));
      return rows.length * this.parent.getRowHeight();
    };
    InfiniteScroll2.prototype.removeTopRows = function(rows, maxIndx) {
      for (var i = 0; i <= maxIndx; i++) {
        if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {
          continue;
        }
        remove(rows[parseInt(i.toString(), 10)]);
      }
    };
    InfiniteScroll2.prototype.removeBottomRows = function(rows, maxIndx, args) {
      var cnt = 0;
      var pageSize = this.parent.pageSettings.pageSize;
      if (this.infiniteCache[args.prevPage].length < pageSize) {
        cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;
      }
      for (var i = maxIndx; cnt < pageSize; i--) {
        cnt++;
        remove(rows[parseInt(i.toString(), 10)]);
      }
    };
    InfiniteScroll2.prototype.removeCaptionRows = function(rows, args) {
      var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(row));
      if (args.direction === "down") {
        var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];
        var lastRowIndex = getRowIndexFromElement(lastRow) - 1;
        var k = 0;
        for (var i = 0; k < lastRowIndex; i++) {
          if (!rows[parseInt(i.toString(), 10)].classList.contains(row)) {
            remove(rows[parseInt(i.toString(), 10)]);
          } else {
            k = getRowIndexFromElement(rows[parseInt(i.toString(), 10)]);
          }
        }
      }
      if (args.direction === "up") {
        var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);
        var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);
        var startIndex = 0;
        for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {
          startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;
        }
        for (var i = startIndex; i < rows.length; i++) {
          remove(rows[parseInt(i.toString(), 10)]);
        }
      }
    };
    InfiniteScroll2.prototype.resetInfiniteBlocks = function(args, isDataModified) {
      var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== "infiniteScroll";
      if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {
        if (this.actions.some(function(value) {
          return value === args.requestType;
        }) || isDataModified || args.requestType === "save" && (this.parent.sortSettings.columns.length || this.parent.filterSettings.columns.length || this.parent.groupSettings.columns.length || this.parent.searchSettings.key)) {
          var scrollEle = this.parent.getContent().firstElementChild;
          this.initialRender = true;
          scrollEle.scrollTop = 0;
          this.parent.pageSettings.currentPage = 1;
          this.infiniteCache = {};
          this.infiniteCurrentViewData = {};
          this.resetContentModuleCache({});
          this.isRemove = false;
          this.top = 0;
          this.isInitialCollapse = false;
          this.parent.contentModule.isRemove = this.isRemove;
          this.parent.contentModule.isAddRows = this.isRemove;
          this.parent.contentModule.visibleRows = [];
          this.parent.contentModule.visibleFrozenRows = [];
        }
      }
    };
    InfiniteScroll2.prototype.setCache = function(e) {
      if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
        var isEdit = e.args.requestType !== "infiniteScroll" && (this.requestType === "delete" || this.requestType === "add");
        var currentPage = this.parent.pageSettings.currentPage;
        if (!Object.keys(this.infiniteCache).length || isEdit) {
          this.setInitialCache(e.modelData, e.args, isEdit);
        }
        if (isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {
          this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;
          this.resetContentModuleCache(this.infiniteCache);
        }
        if (e.isInfiniteScroll && !this.isRemove) {
          this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;
          this.parent.contentModule.isRemove = this.isRemove;
        }
      }
    };
    InfiniteScroll2.prototype.setInitialCache = function(data, args, isEdit, isCurrentViewData) {
      var k = !isEdit ? 1 : isNullOrUndefined(this.firstBlock) ? 1 : this.firstBlock;
      for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {
        var startIndex = (i - 1) * this.parent.pageSettings.pageSize;
        var endIndex = i * this.parent.pageSettings.pageSize;
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {
          this.setInitialGroupCache(data, k, startIndex, endIndex);
        } else {
          if (isCurrentViewData) {
            this.infiniteCurrentViewData[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);
          } else {
            this.infiniteCache[parseInt(k.toString(), 10)] = data.slice(startIndex, endIndex);
            this.resetContentModuleCache(this.infiniteCache);
          }
        }
        k++;
      }
    };
    InfiniteScroll2.prototype.setInitialGroupCache = function(data, index, sIndex, eIndex) {
      var pageData = [];
      var startIndex = 0;
      for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {
        startIndex += this.infiniteCache[parseInt(i.toString(), 10)].length;
      }
      var k = sIndex;
      for (var i = startIndex; i < data.length && k < eIndex; i++) {
        if (data[parseInt(i.toString(), 10)].index < eIndex || data[parseInt(i.toString(), 10)].isCaptionRow) {
          k = data[parseInt(i.toString(), 10)].isCaptionRow ? k : data[parseInt(i.toString(), 10)].index;
          pageData.push(data[parseInt(i.toString(), 10)]);
        }
        if (data[parseInt(i.toString(), 10)].index >= eIndex || data[parseInt(i.toString(), 10)].index === eIndex - 1) {
          break;
        }
      }
      this.infiniteCache[parseInt(index.toString(), 10)] = pageData;
      this.resetContentModuleCache(this.infiniteCache);
    };
    InfiniteScroll2.prototype.resetContentModuleCache = function(data) {
      this.parent.contentModule.infiniteCache = data;
    };
    InfiniteScroll2.prototype.resetInfiniteCache = function(rowObjects) {
      var blockLength = Object.keys(this.infiniteCache).length;
      this.infiniteCache = {};
      for (var i = 1; i <= blockLength; i++) {
        var startIndex = (i - 1) * this.parent.pageSettings.pageSize;
        var endIndex = i * this.parent.pageSettings.pageSize;
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
          this.setInitialGroupCache(rowObjects, i, startIndex, endIndex);
        } else {
          this.infiniteCache[parseInt(i.toString(), 10)] = rowObjects.slice(startIndex, endIndex);
          this.resetContentModuleCache(this.infiniteCache);
        }
      }
    };
    InfiniteScroll2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return InfiniteScroll2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/group-lazy-load-renderer.js
var __extends86 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GroupLazyLoadRenderer = (
  /** @class */
  function(_super) {
    __extends86(GroupLazyLoadRenderer2, _super);
    function GroupLazyLoadRenderer2(parent, locator) {
      var _this = _super.call(this, parent, locator) || this;
      _this.childCount = 0;
      _this.scrollData = [];
      _this.isFirstChildRow = false;
      _this.isScrollDown = false;
      _this.isScrollUp = false;
      _this.groupCache = {};
      _this.cacheRowsObj = {};
      _this.startIndexes = {};
      _this.captionCounts = {};
      _this.rowsByUid = {};
      _this.objIdxByUid = {};
      _this.initialGroupCaptions = {};
      _this.requestType = ["paging", "columnstate", "reorder", "cancel", "save", "beginEdit", "add", "delete", "filterBeforeOpen", "filterchoicerequest", "infiniteScroll", "virtualscroll"];
      _this.scrollTopCache = void 0;
      _this.refRowsObj = {};
      _this.cacheMode = false;
      _this.cacheBlockSize = 5;
      _this.ignoreAccent = _this.parent.allowFiltering ? _this.parent.filterSettings.ignoreAccent : false;
      _this.allowCaseSensitive = false;
      _this.lazyLoadQuery = [];
      _this.locator = locator;
      _this.groupGenerator = new GroupModelGenerator(_this.parent);
      _this.summaryModelGen = new GroupSummaryModelGenerator(_this.parent);
      _this.captionModelGen = new CaptionSummaryModelGenerator(_this.parent);
      _this.rowRenderer = new RowRenderer(_this.locator, null, _this.parent);
      _this.eventListener();
      return _this;
    }
    GroupLazyLoadRenderer2.prototype.eventListener = function() {
      this.parent.addEventListener(actionBegin, this.actionBegin.bind(this));
      this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
      this.parent.on(initialEnd, this.setLazyLoadPageSize, this);
      this.parent.on(setGroupCache, this.setCache, this);
      this.parent.on(lazyLoadScrollHandler, this.scrollHandler, this);
      this.parent.on(columnVisibilityChanged, this.setVisible, this);
      this.parent.on(groupCollapse, this.collapseShortcut, this);
    };
    GroupLazyLoadRenderer2.prototype.captionExpand = function(tr) {
      var _this = this;
      var page = this.parent.pageSettings.currentPage;
      var rowsObject = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      this.refreshCaches();
      if ((!this.scrollTopCache || this.parent.scrollModule["content"].scrollTop > this.scrollTopCache) && !this.parent.enableVirtualization) {
        this.scrollTopCache = this.parent.scrollModule["content"].scrollTop;
      }
      var oriIndex = this.getRowObjectIndexByUid(uid2);
      var isRowExist = rowsObject[oriIndex + 1] ? rowsObject[parseInt(oriIndex.toString(), 10)].indent < rowsObject[oriIndex + 1].indent : false;
      if (this.parent.enableVirtualization) {
        isRowExist = this.cacheRowsObj["" + uid2] ? true : false;
      }
      var data = rowsObject[parseInt(oriIndex.toString(), 10)];
      var key = getGroupKeysAndFields(oriIndex, rowsObject);
      var e = {
        captionRowElement: tr,
        groupInfo: data,
        enableCaching: true,
        cancel: false
      };
      this.parent.trigger(lazyLoadGroupExpand, e, function(args) {
        if (args.cancel) {
          return;
        }
        args.keys = key.keys;
        args.fields = key.fields;
        args.rowIndex = tr.rowIndex;
        args.makeRequest = !args.enableCaching || !isRowExist;
        if (!args.enableCaching && isRowExist) {
          _this.clearCache([uid2]);
        }
        args.skip = 0;
        args.take = _this.pageSize;
        data.isExpand = true;
        if (_this.rowsByUid[parseInt(page.toString(), 10)][data.uid]) {
          _this.rowsByUid[parseInt(page.toString(), 10)][data.uid].isExpand = true;
        }
        _this.captionRowExpand(args);
      });
    };
    GroupLazyLoadRenderer2.prototype.captionCollapse = function(tr) {
      var _this = this;
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      var rowIdx = tr.rowIndex;
      var uid2 = tr.getAttribute("data-uid");
      this.refreshCaches();
      var captionIndex = this.getRowObjectIndexByUid(uid2);
      var e = {
        captionRowElement: tr,
        groupInfo: cache[parseInt(captionIndex.toString(), 10)],
        cancel: false
      };
      this.parent.trigger(lazyLoadGroupCollapse, e, function(args) {
        if (args.cancel) {
          return;
        }
        args.isExpand = false;
        for (var i = 0; i < _this.lazyLoadQuery.length; i++) {
          var query = _this.lazyLoadQuery[parseInt(i.toString(), 10)];
          var where = query[0];
          var removeCollapse = args.groupInfo.data;
          if (removeCollapse["key"] === where["value"]) {
            _this.lazyLoadQuery.splice(i, 1);
          }
        }
        _this.removeRows(captionIndex, rowIdx, uid2);
        if (_this.parent.enableInfiniteScrolling || _this.parent.enableVirtualization) {
          _this.groupCache[_this.parent.pageSettings.currentPage] = extend([], _this.refRowsObj[_this.parent.pageSettings.currentPage]);
          _this.refreshRowObjects([], captionIndex);
        }
      });
    };
    GroupLazyLoadRenderer2.prototype.setLazyLoadPageSize = function() {
      var scrollEle = this.parent.getContent().firstElementChild;
      var blockSize = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
      this.pageSize = this.pageSize ? this.pageSize : blockSize * 3;
      this.blockSize = Math.ceil(this.pageSize / 2);
    };
    GroupLazyLoadRenderer2.prototype.clearLazyGroupCache = function() {
      this.clearCache();
    };
    GroupLazyLoadRenderer2.prototype.clearCache = function(uids) {
      uids = uids ? uids : this.getInitialCaptionIndexes();
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      if (uids.length) {
        for (var i = 0; i < uids.length; i++) {
          var capIdx = this.getRowObjectIndexByUid(uids[parseInt(i.toString(), 10)]);
          var capRow = cache[parseInt(capIdx.toString(), 10)];
          if (!capRow) {
            continue;
          }
          if (this.captionCounts[this.parent.pageSettings.currentPage][capRow.uid]) {
            for (var i_1 = capIdx + 1; i_1 < cache.length; i_1++) {
              if (cache[parseInt(i_1.toString(), 10)].indent === capRow.indent || cache[parseInt(i_1.toString(), 10)].indent < capRow.indent) {
                delete this.captionCounts[this.parent.pageSettings.currentPage][capRow.uid];
                break;
              }
              if (cache[parseInt(i_1.toString(), 10)].isCaptionRow) {
                delete this.captionCounts[this.parent.pageSettings.currentPage][cache[parseInt(i_1.toString(), 10)].uid];
              }
            }
          }
          if (capRow.isExpand) {
            var tr = this.parent.getRowElementByUID(capRow.uid);
            if (!tr) {
              return;
            }
            this.parent.groupModule.expandCollapseRows(tr.querySelector(".e-recordplusexpand"));
          }
          var child = this.getNextChilds(capIdx);
          if (!child.length) {
            continue;
          }
          var subChild = [];
          if (child[child.length - 1].isCaptionRow) {
            subChild = this.getChildRowsByParentIndex(cache.indexOf(child[child.length - 1]), false, false, null, true, true);
          }
          var start = cache.indexOf(child[0]);
          var end = subChild.length ? cache.indexOf(subChild[subChild.length - 1]) : cache.indexOf(child[child.length - 1]);
          cache.splice(start, end - (start - 1));
          this.refreshCaches();
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.refreshCaches = function() {
      var page = this.parent.pageSettings.currentPage;
      var cache = this.groupCache[parseInt(page.toString(), 10)];
      if (this.parent.enableInfiniteScrolling) {
        this.rowsByUid[parseInt(page.toString(), 10)] = [];
        this.objIdxByUid[parseInt(page.toString(), 10)] = [];
      } else {
        this.rowsByUid = {};
        this.objIdxByUid = {};
      }
      for (var i = 0; i < cache.length; i++) {
        this.maintainRows(cache[parseInt(i.toString(), 10)], i);
      }
    };
    GroupLazyLoadRenderer2.prototype.getInitialCaptionIndexes = function() {
      var page = this.parent.pageSettings.currentPage;
      var uids = [];
      for (var i = 0; i < this.initialGroupCaptions[parseInt(page.toString(), 10)].length; i++) {
        uids.push(this.initialGroupCaptions[parseInt(page.toString(), 10)][parseInt(i.toString(), 10)].uid);
      }
      return uids;
    };
    GroupLazyLoadRenderer2.prototype.getRowObjectIndexByUid = function(uid2) {
      return this.objIdxByUid[this.parent.pageSettings.currentPage]["" + uid2];
    };
    GroupLazyLoadRenderer2.prototype.collapseShortcut = function(args) {
      if (this.parent.groupSettings.columns.length && args.target && parentsUntil(args.target, content) && args.target.parentElement.tagName === "TR") {
        if (!args.collapse && parentsUntil(args.target, row)) {
          return;
        }
        var row2 = args.target.parentElement;
        var uid2 = row2.getAttribute("data-uid");
        if (args.collapse) {
          var rowObj = this.getRowByUid(uid2);
          var capRow = this.getRowByUid(rowObj.parentUid);
          if (capRow.isCaptionRow && capRow.isExpand) {
            var capEle = this.getRowElementByUid(rowObj.parentUid);
            this.parent.groupModule.expandCollapseRows(capEle.cells[rowObj.indent - 1]);
          }
        } else {
          var capRow = this.getRowByUid(uid2);
          if (capRow.isCaptionRow && !capRow.isExpand) {
            var capEle = this.getRowElementByUid(uid2);
            this.parent.groupModule.expandCollapseRows(capEle.cells[capRow.indent]);
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.getRowByUid = function(uid2) {
      return this.rowsByUid[this.parent.pageSettings.currentPage]["" + uid2];
    };
    GroupLazyLoadRenderer2.prototype.actionBegin = function(args) {
      if (!args.cancel) {
        if (!this.requestType.some(function(value) {
          return value === args.requestType;
        })) {
          this.groupCache = {};
          this.resetRowMaintenance();
          if (this.parent.enableVirtualization) {
            this.parent.contentModule.currentInfo = {};
          }
        }
        if (args.requestType === "reorder" && this.parent.groupSettings.columns.length) {
          var keys = Object.keys(this.groupCache);
          for (var j = 0; j < keys.length; j++) {
            var cache = this.groupCache[keys[parseInt(j.toString(), 10)]];
            for (var i = 0; i < cache.length; i++) {
              if (cache[parseInt(i.toString(), 10)].isCaptionRow && !this.captionModelGen.isEmpty()) {
                this.changeCaptionRow(cache[parseInt(i.toString(), 10)], null, keys[parseInt(j.toString(), 10)]);
              }
              if (cache[parseInt(i.toString(), 10)].isDataRow) {
                var from = args.fromIndex + cache[parseInt(i.toString(), 10)].indent;
                var to = args.toIndex + cache[parseInt(i.toString(), 10)].indent;
                this.moveCells(cache[parseInt(i.toString(), 10)].cells, from, to);
              }
            }
          }
        }
        if (args.requestType === "delete" || args.action === "add" && args.requestType === "save") {
          this.groupCache = {};
          this.resetRowMaintenance();
          if (this.parent.enableVirtualization) {
            this.parent.contentModule.currentInfo = {};
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.actionComplete = function(args) {
      if (!args.cancel && args.requestType !== "columnstate" && args.requestType !== "beginEdit" && args.requestType !== "delete" && args.requestType !== "save" && args.requestType !== "reorder") {
        this.scrollReset();
      }
    };
    GroupLazyLoadRenderer2.prototype.resetRowMaintenance = function() {
      this.startIndexes = {};
      this.captionCounts = {};
      this.rowsByUid = {};
      this.objIdxByUid = {};
      this.initialGroupCaptions = {};
    };
    GroupLazyLoadRenderer2.prototype.moveCells = function(arr, from, to) {
      if (from >= arr.length) {
        var k = from - arr.length;
        while (k-- + 1) {
          arr.push(void 0);
        }
      }
      arr.splice(from, 0, arr.splice(to, 1)[0]);
    };
    GroupLazyLoadRenderer2.prototype.removeRows = function(idx, trIdx, uid2) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      var aggUid;
      var count2 = 0;
      if (this.parent.aggregates.length) {
        var agg = this.getAggregateByCaptionIndex(idx);
        aggUid = agg.length ? agg[agg.length - 1].uid : void 0;
      }
      var indent = rows[parseInt(idx.toString(), 10)].indent;
      this.addClass(this.getNextChilds(parseInt(idx.toString(), 10)));
      rows[parseInt(idx.toString(), 10)].isExpand = false;
      if (this.rowsByUid[parseInt(page.toString(), 10)][rows[parseInt(idx.toString(), 10)].uid]) {
        this.rowsByUid[parseInt(page.toString(), 10)][rows[parseInt(idx.toString(), 10)].uid].isExpand = false;
      }
      var capUid;
      for (var i = idx + 1; i < rows.length; i++) {
        if (rows[parseInt(i.toString(), 10)].indent === indent || rows[parseInt(i.toString(), 10)].indent < indent) {
          capUid = rows[parseInt(i.toString(), 10)].uid;
          break;
        }
        if (rows[parseInt(i.toString(), 10)].isCaptionRow && rows[parseInt(i.toString(), 10)].isExpand) {
          this.addClass(this.getNextChilds(i));
        }
      }
      for (var i = trIdx + 1; i < trs.length; i++) {
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === capUid) {
          break;
        } else if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === aggUid) {
          remove(trs[parseInt(i.toString(), 10)]);
          break;
        } else {
          remove(trs[parseInt(i.toString(), 10)]);
          this.refRowsObj[parseInt(page.toString(), 10)].splice(trIdx + 1, 1);
          count2 = count2 + 1;
        }
      }
      if (this.parent.enableVirtualization) {
        this.cacheRowsObj["" + uid2] = this.groupCache[parseInt(page.toString(), 10)].slice(idx + 1, idx + 1 + count2);
        this.groupCache[parseInt(page.toString(), 10)].splice(idx + 1, count2);
        this.parent.notify(refreshVirtualLazyLoadCache, {
          rows: [],
          uid: rows[parseInt(idx.toString(), 10)].uid,
          count: count2
        });
        this.parent.contentModule.setVirtualHeight();
        this.parent.islazyloadRequest = false;
      }
      if (this.parent.scrollModule["content"].scrollTop > this.scrollTopCache && !this.parent.enableVirtualization) {
        this.parent.scrollModule["content"].scrollTop = this.scrollTopCache;
      }
      if (this.parent.getContentTable().scrollHeight < this.parent.getContent().clientHeight && this.parent.height !== "auto") {
        this.parent.scrollModule.setLastRowCell();
      }
      this.parent.notify(refreshExpandandCollapse, {
        rows: this.refRowsObj[parseInt(page.toString(), 10)]
      });
    };
    GroupLazyLoadRenderer2.prototype.addClass = function(rows) {
      var last = rows[this.blockSize];
      if (last) {
        last.lazyLoadCssClass = "e-lazyload-middle-down";
      }
    };
    GroupLazyLoadRenderer2.prototype.getNextChilds = function(index, rowObjects) {
      var group = this.groupCache[this.parent.pageSettings.currentPage];
      var rows = rowObjects ? rowObjects : group;
      var indent = group[parseInt(index.toString(), 10)].indent + 1;
      var childRows = [];
      for (var i = rowObjects ? 0 : index + 1; i < rows.length; i++) {
        if (rows[parseInt(i.toString(), 10)].indent < indent) {
          break;
        }
        if (rows[parseInt(i.toString(), 10)].indent === indent) {
          childRows.push(rows[parseInt(i.toString(), 10)]);
        }
      }
      return childRows;
    };
    GroupLazyLoadRenderer2.prototype.lazyLoadHandler = function(args) {
      this.setStartIndexes();
      var tr = this.parent.getContent().querySelectorAll("tr")[args.index];
      var uid2 = tr.getAttribute("data-uid");
      var captionIndex = this.getRowObjectIndexByUid(uid2);
      var captionRow = this.groupCache[this.parent.pageSettings.currentPage][parseInt(captionIndex.toString(), 10)];
      var rows = args.isRowExist ? args.isScroll ? this.scrollData : this.parent.enableVirtualization ? this.cacheRowsObj["" + uid2] : this.getChildRowsByParentIndex(captionIndex, true, true, null, true) : [];
      this.scrollData = [];
      if (!args.isRowExist) {
        this.setRowIndexes(captionIndex, captionRow);
        this.refreshCaptionRowCount(this.groupCache[this.parent.pageSettings.currentPage][parseInt(captionIndex.toString(), 10)], args.count);
        if (Object.keys(args.data).indexOf("GroupGuid") !== -1) {
          for (var i = 0; i < args.data.length; i++) {
            var data = this.groupGenerator.generateCaptionRow(args.data[parseInt(i.toString(), 10)], args.level, captionRow.parentGid, void 0, 0, captionRow.uid);
            rows.push(data);
            if (this.parent.aggregates.length) {
              rows = rows.concat(this.summaryModelGen.generateRows(args.data[parseInt(i.toString(), 10)], {
                level: args.level + 1,
                parentUid: data.uid
              }));
            }
          }
        } else {
          this.groupGenerator.index = this.getStartIndex(captionIndex, args.isScroll);
          rows = this.groupGenerator.generateDataRows(args.data, args.level, captionRow.parentGid, 0, captionRow.uid);
        }
      }
      var trIdx = args.isScroll ? this.rowIndex : args.index;
      var nxtChild = this.getNextChilds(captionIndex, rows);
      var lastRow = !args.up ? this.hasLastChildRow(args.isScroll, args.count, nxtChild.length) : true;
      if (!args.isRowExist && !lastRow) {
        nxtChild[this.blockSize].lazyLoadCssClass = "e-lazyload-middle-down";
      }
      if (!lastRow) {
        nxtChild[nxtChild.length - 1].lazyLoadCssClass = "e-not-lazyload-end";
      }
      var aggregates = !args.isScroll && !args.isRowExist ? this.getAggregateByCaptionIndex(captionIndex) : [];
      if (!args.up) {
        if (!args.isRowExist || this.parent.enableVirtualization && args.isRowExist && this.cacheRowsObj["" + uid2]) {
          this.refreshRowObjects(rows, args.isScroll ? this.rowObjectIndex : captionIndex);
        }
      }
      if (this.parent.enableVirtualization) {
        var uid_1 = args.isScroll ? this.groupCache[this.parent.pageSettings.currentPage][this.rowIndex].uid : captionRow.uid;
        this.parent.notify(refreshVirtualLazyLoadCache, {
          rows,
          uid: uid_1
        });
        this.parent.contentModule.setVirtualHeight();
        this.parent.contentModule.isTop = false;
      }
      this.render(trIdx, rows, lastRow, aggregates);
      if (this.isFirstChildRow && !args.up) {
        this.parent.getContent().firstElementChild.scrollTop = rows.length * this.parent.getRowHeight();
      }
      this.isFirstChildRow = false;
      this.rowIndex = void 0;
      this.rowObjectIndex = void 0;
      this.childCount = 0;
      for (var i = 0; i < rows.length; i++) {
        this.refRowsObj[this.parent.pageSettings.currentPage].splice(captionIndex + i + 1, 0, rows[parseInt(i.toString(), 10)]);
      }
      if (lastRow && tr.querySelector(".e-lastrowcell")) {
        this.parent.groupModule.lastCaptionRowBorder();
      }
      this.parent.notify(refreshExpandandCollapse, {
        rows: this.refRowsObj[this.parent.pageSettings.currentPage]
      });
      if (this.parent.enableVirtualMaskRow) {
        this.parent.removeMaskRow();
      }
    };
    GroupLazyLoadRenderer2.prototype.setRowIndexes = function(capIdx, row2) {
      if (!this.captionCounts[this.parent.pageSettings.currentPage]) {
        this.captionCounts[this.parent.pageSettings.currentPage] = {};
      }
      if (row2.isCaptionRow) {
        this.captionCounts[this.parent.pageSettings.currentPage][row2.uid] = row2.data.count;
      }
    };
    GroupLazyLoadRenderer2.prototype.getStartIndex = function(capIdx, isScroll) {
      var page = this.parent.pageSettings.currentPage;
      var cache = this.groupCache[parseInt(page.toString(), 10)];
      if (isScroll) {
        return cache[this.rowObjectIndex].index + 1;
      }
      var count2 = 0;
      var idx = 0;
      var prevCapRow = this.getRowByUid(cache[parseInt(capIdx.toString(), 10)].parentUid);
      if (prevCapRow) {
        idx = this.prevCaptionCount(prevCapRow);
      }
      if (cache[parseInt(capIdx.toString(), 10)].indent > 0) {
        for (var i = capIdx - 1; i >= 0; i--) {
          if (cache[parseInt(i.toString(), 10)].indent < cache[parseInt(capIdx.toString(), 10)].indent) {
            break;
          }
          if (cache[parseInt(i.toString(), 10)].isCaptionRow && cache[parseInt(i.toString(), 10)].indent === cache[parseInt(capIdx.toString(), 10)].indent) {
            count2 = count2 + cache[parseInt(i.toString(), 10)].data.count;
          }
        }
      }
      var index = count2 + idx + this.startIndexes[parseInt(page.toString(), 10)][cache[parseInt(capIdx.toString(), 10)].parentGid];
      return index;
    };
    GroupLazyLoadRenderer2.prototype.prevCaptionCount = function(prevCapRow) {
      var page = this.parent.pageSettings.currentPage;
      var cache = this.groupCache[parseInt(page.toString(), 10)];
      var idx = 0;
      for (var i = cache.indexOf(prevCapRow) - 1; i >= 0; i--) {
        if (cache[parseInt(i.toString(), 10)].indent === 0) {
          break;
        }
        if (cache[parseInt(i.toString(), 10)].indent < prevCapRow.indent) {
          break;
        }
        if (cache[parseInt(i.toString(), 10)].isCaptionRow && cache[parseInt(i.toString(), 10)].indent === prevCapRow.indent) {
          var count2 = this.captionCounts[parseInt(page.toString(), 10)][cache[parseInt(i.toString(), 10)].uid];
          idx = idx + (count2 ? count2 : cache[parseInt(i.toString(), 10)].data.count);
        }
      }
      var capRow = this.getRowByUid(prevCapRow.parentUid);
      if (capRow) {
        idx = idx + this.prevCaptionCount(capRow);
      }
      return idx;
    };
    GroupLazyLoadRenderer2.prototype.setStartIndexes = function() {
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      if (!this.startIndexes[this.parent.pageSettings.currentPage]) {
        var indexes = [];
        var idx = void 0;
        for (var i = 0; i < cache.length; i++) {
          if (cache[parseInt(i.toString(), 10)].isCaptionRow) {
            if (!indexes.length) {
              indexes.push(0);
            } else {
              indexes.push(cache[parseInt(idx.toString(), 10)].data.count + indexes[indexes.length - 1]);
            }
            idx = i;
          }
        }
        this.startIndexes[this.parent.pageSettings.currentPage] = indexes;
      }
    };
    GroupLazyLoadRenderer2.prototype.hasLastChildRow = function(isScroll, captionCount, rowCount) {
      return isScroll ? captionCount === this.childCount + rowCount : captionCount === rowCount;
    };
    GroupLazyLoadRenderer2.prototype.refreshCaptionRowCount = function(row2, count2) {
      row2.data.count = count2;
    };
    GroupLazyLoadRenderer2.prototype.render = function(trIdx, rows, hasLastChildRow, aggregates) {
      var tr = this.parent.getContent().querySelectorAll("tr")[parseInt(trIdx.toString(), 10)];
      var scrollEle = this.parent.getContent().firstElementChild;
      var rowHeight2 = this.parent.getRowHeight();
      if (tr && aggregates.length) {
        for (var i = aggregates.length - 1; i >= 0; i--) {
          tr.insertAdjacentElement("afterend", this.rowRenderer.render(aggregates[parseInt(i.toString(), 10)], this.parent.getColumns()));
        }
      }
      if (tr && rows.length) {
        for (var i = rows.length - 1; i >= 0; i--) {
          if (this.confirmRowRendering(rows[parseInt(i.toString(), 10)])) {
            tr.insertAdjacentElement("afterend", this.rowRenderer.render(rows[parseInt(i.toString(), 10)], this.parent.getColumns()));
            if (this.isScrollDown) {
              scrollEle.scrollTop = scrollEle.scrollTop - rowHeight2;
            }
            if (this.isScrollUp) {
              scrollEle.scrollTop = scrollEle.scrollTop + rowHeight2;
            }
          }
        }
      }
      this.isScrollDown = false;
      this.isScrollUp = false;
    };
    GroupLazyLoadRenderer2.prototype.maintainRows = function(row2, index) {
      var page = this.parent.pageSettings.currentPage;
      if (!this.rowsByUid[parseInt(page.toString(), 10)]) {
        this.rowsByUid[parseInt(page.toString(), 10)] = {};
        this.objIdxByUid[parseInt(page.toString(), 10)] = {};
      }
      if (row2.uid) {
        this.rowsByUid[parseInt(page.toString(), 10)][row2.uid] = row2;
      }
      this.objIdxByUid[parseInt(page.toString(), 10)][row2.uid] = index;
    };
    GroupLazyLoadRenderer2.prototype.confirmRowRendering = function(row2) {
      var check = true;
      if (isNullOrUndefined(row2.indent) && !row2.isDataRow && !row2.isCaptionRow) {
        var cap = this.getRowByUid(row2.parentUid);
        if (cap.isCaptionRow && !cap.isExpand) {
          check = false;
        }
      }
      return check;
    };
    GroupLazyLoadRenderer2.prototype.refreshRowObjects = function(newRows, index) {
      var page = this.parent.pageSettings.currentPage;
      var rowsObject = this.groupCache[parseInt(page.toString(), 10)];
      this.rowsByUid[parseInt(page.toString(), 10)] = {};
      this.objIdxByUid[parseInt(page.toString(), 10)] = {};
      var newRowsObject = [];
      var k = 0;
      for (var i = 0; i < rowsObject.length; i++) {
        if (i === index) {
          this.maintainRows(rowsObject[parseInt(i.toString(), 10)], k);
          newRowsObject.push(rowsObject[parseInt(i.toString(), 10)]);
          k++;
          for (var j = 0; j < newRows.length; j++) {
            this.maintainRows(newRows[parseInt(j.toString(), 10)], k);
            newRowsObject.push(newRows[parseInt(j.toString(), 10)]);
            k++;
          }
        } else {
          this.maintainRows(rowsObject[parseInt(i.toString(), 10)], k);
          newRowsObject.push(rowsObject[parseInt(i.toString(), 10)]);
          k++;
        }
      }
      this.groupCache[this.parent.pageSettings.currentPage] = extend([], newRowsObject);
      this.updateCurrentViewData();
    };
    GroupLazyLoadRenderer2.prototype.getAggregateByCaptionIndex = function(index) {
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      var parent = cache[parseInt(index.toString(), 10)];
      var indent = parent.indent;
      var uid2 = parent.uid;
      var agg = [];
      for (var i = index + 1; i < cache.length; i++) {
        if (cache[parseInt(i.toString(), 10)].indent === indent) {
          break;
        }
        if (isNullOrUndefined(cache[parseInt(i.toString(), 10)].indent) && cache[parseInt(i.toString(), 10)].parentUid === uid2) {
          agg.push(cache[parseInt(i.toString(), 10)]);
        }
      }
      return agg;
    };
    GroupLazyLoadRenderer2.prototype.getChildRowsByParentIndex = function(index, deep, block, data, includeAgg, includeCollapseAgg) {
      var cache = data ? data : this.groupCache[this.parent.pageSettings.currentPage];
      var parentRow = cache[parseInt(index.toString(), 10)];
      var agg = [];
      if (!parentRow.isCaptionRow || parentRow.isCaptionRow && !parentRow.isExpand && !includeCollapseAgg) {
        return [];
      }
      if (includeAgg && this.parent.aggregates.length) {
        agg = this.getAggregateByCaptionIndex(index);
      }
      var indent = parentRow.indent;
      var uid2 = parentRow.uid;
      var rows = [];
      var count2 = 0;
      for (var i = index + 1; i < cache.length; i++) {
        if (cache[parseInt(i.toString(), 10)].parentUid === uid2) {
          if (isNullOrUndefined(cache[parseInt(i.toString(), 10)].indent)) {
            continue;
          }
          count2++;
          rows.push(cache[parseInt(i.toString(), 10)]);
          if (deep && cache[parseInt(i.toString(), 10)].isCaptionRow) {
            rows = rows.concat(this.getChildRowsByParentIndex(i, deep, block, data, includeAgg));
          }
          if (block && count2 === this.pageSize) {
            break;
          }
        }
        if (cache[parseInt(i.toString(), 10)].indent === indent) {
          break;
        }
      }
      return rows.concat(agg);
    };
    GroupLazyLoadRenderer2.prototype.initialGroupRows = function(isReorder) {
      var rows = [];
      var cache = this.groupCache[this.parent.pageSettings.currentPage];
      if (isReorder) {
        return this.getRenderedRowsObject();
      }
      for (var i = 0; i < cache.length; i++) {
        if (cache[parseInt(i.toString(), 10)].indent === 0) {
          rows.push(cache[parseInt(i.toString(), 10)]);
          rows = rows.concat(this.getChildRowsByParentIndex(i, true, true, cache, true));
        }
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.getRenderedRowsObject = function() {
      var rows = [];
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      for (var i = 0; i < trs.length; i++) {
        rows.push(this.getRowByUid(trs[parseInt(i.toString(), 10)].getAttribute("data-uid")));
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.getCacheRowsOnDownScroll = function(index) {
      var rows = [];
      var rowsObject = this.groupCache[this.parent.pageSettings.currentPage];
      var k = index;
      for (var i = 0; i < this.pageSize; i++) {
        if (!rowsObject[parseInt(k.toString(), 10)] || rowsObject[parseInt(k.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent) {
          break;
        }
        if (rowsObject[parseInt(k.toString(), 10)].indent === rowsObject[parseInt(index.toString(), 10)].indent) {
          rows.push(rowsObject[parseInt(k.toString(), 10)]);
          if (rowsObject[parseInt(k.toString(), 10)].isCaptionRow && rowsObject[parseInt(k.toString(), 10)].isExpand) {
            rows = rows.concat(this.getChildRowsByParentIndex(k, true, true, null, true));
          }
        }
        if (rowsObject[parseInt(k.toString(), 10)].indent > rowsObject[parseInt(index.toString(), 10)].indent || isNullOrUndefined(rowsObject[parseInt(k.toString(), 10)].indent)) {
          i--;
        }
        k++;
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.getCacheRowsOnUpScroll = function(start, end, index) {
      var rows = [];
      var rowsObject = this.groupCache[this.parent.pageSettings.currentPage];
      var str = false;
      for (var i = 0; i < rowsObject.length; i++) {
        if (str && (!rowsObject[parseInt(i.toString(), 10)] || rowsObject[parseInt(i.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent || rowsObject[parseInt(i.toString(), 10)].uid === end)) {
          break;
        }
        if (!str && rowsObject[parseInt(i.toString(), 10)].uid === start) {
          str = true;
        }
        if (str && rowsObject[parseInt(i.toString(), 10)].indent === rowsObject[parseInt(index.toString(), 10)].indent) {
          rows.push(rowsObject[parseInt(i.toString(), 10)]);
          if (rowsObject[parseInt(i.toString(), 10)].isCaptionRow && rowsObject[parseInt(i.toString(), 10)].isExpand) {
            rows = rows.concat(this.getChildRowsByParentIndex(i, true, true, null, true));
          }
        }
      }
      return rows;
    };
    GroupLazyLoadRenderer2.prototype.scrollHandler = function(e) {
      if (this.parent.isDestroyed || this.childCount) {
        return;
      }
      var downTrs = [].slice.call(this.parent.getContent().getElementsByClassName("e-lazyload-middle-down"));
      var upTrs = [].slice.call(this.parent.getContent().getElementsByClassName("e-lazyload-middle-up"));
      var endTrs = [].slice.call(this.parent.getContent().getElementsByClassName("e-not-lazyload-end"));
      var tr;
      var lazyLoadDown = false;
      var lazyLoadUp = false;
      var lazyLoadEnd = false;
      if (e.scrollDown && downTrs.length) {
        var result = this.findRowElements(downTrs);
        tr = result.tr;
        lazyLoadDown = result.entered;
      }
      if (!e.scrollDown && endTrs) {
        for (var i = 0; i < endTrs.length; i++) {
          var top_1 = endTrs[parseInt(i.toString(), 10)].getBoundingClientRect().top;
          var scrollHeight = this.parent.getContent().scrollHeight;
          if (top_1 > 0 && top_1 < scrollHeight) {
            tr = endTrs[parseInt(i.toString(), 10)];
            lazyLoadEnd = true;
            this.rowIndex = tr.rowIndex;
            break;
          }
        }
      }
      if (!e.scrollDown && upTrs.length && !lazyLoadEnd) {
        var result = this.findRowElements(upTrs);
        tr = result.tr;
        lazyLoadUp = result.entered;
      }
      if (tr && !tr.classList.contains("e-masked-row")) {
        if (lazyLoadDown && e.scrollDown && lazyLoadDown && tr) {
          this.scrollDownHandler(tr);
        }
        if (!e.scrollDown && lazyLoadEnd && tr) {
          this.scrollUpEndRowHandler(tr);
        }
        if (this.cacheMode && !e.scrollDown && !lazyLoadEnd && lazyLoadUp && tr) {
          this.scrollUpHandler(tr);
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollUpEndRowHandler = function(tr) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      var index = this.rowObjectIndex = this.getRowObjectIndexByUid(uid2);
      var idx = index;
      var childRow = rows[parseInt(index.toString(), 10)];
      var parentCapRow = this.getRowByUid(childRow.parentUid);
      var capRowObjIdx = this.getRowObjectIndexByUid(parentCapRow.uid);
      var captionRowEle = this.parent.getContent().querySelector("tr[data-uid=" + parentCapRow.uid + "]");
      var capRowEleIndex = captionRowEle.rowIndex;
      var child = this.getChildRowsByParentIndex(capRowObjIdx);
      var childIdx = child.indexOf(childRow);
      var currentPage = Math.ceil(childIdx / this.pageSize);
      if (currentPage === 1) {
        return;
      }
      this.childCount = currentPage * this.pageSize;
      index = this.getCurrentBlockEndIndex(childRow, index);
      if (this.childCount < parentCapRow.data.count) {
        tr.classList.remove("e-not-lazyload-end");
        childRow.lazyLoadCssClass = "";
        var isRowExist = rows[index + 1] ? childRow.indent === rows[index + 1].indent : false;
        this.scrollData = isRowExist ? this.getCacheRowsOnDownScroll(index + 1) : [];
        var key = getGroupKeysAndFields(capRowObjIdx, rows);
        var args = {
          rowIndex: capRowEleIndex,
          makeRequest: !isRowExist,
          groupInfo: parentCapRow,
          fields: key.fields,
          keys: key.keys,
          skip: this.childCount,
          take: this.pageSize,
          isScroll: true
        };
        if (this.cacheMode && this.childCount >= this.pageSize * this.cacheBlockSize) {
          var child_1 = this.getChildRowsByParentIndex(capRowObjIdx);
          var currenBlock = Math.ceil(child_1.indexOf(rows[parseInt(idx.toString(), 10)]) / this.pageSize);
          var removeBlock = currenBlock - (this.cacheBlockSize - 1);
          this.removeBlock(uid2, isRowExist, removeBlock, child_1);
          args.cachedRowIndex = removeBlock * this.pageSize;
        }
        this.captionRowExpand(args);
      } else {
        this.childCount = 0;
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollDownHandler = function(tr) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      var index = this.getRowObjectIndexByUid(uid2);
      var idx = index;
      var childRow = rows[parseInt(index.toString(), 10)];
      var parentCapRow = this.getRowByUid(childRow.parentUid);
      var capRowObjIdx = this.getRowObjectIndexByUid(parentCapRow.uid);
      var captionRowEle = this.getRowElementByUid(parentCapRow.uid);
      var capRowEleIndex = captionRowEle.rowIndex;
      var child = this.getChildRowsByParentIndex(capRowObjIdx);
      if (child.length === 0) {
        return;
      }
      var childIdx = child.indexOf(childRow);
      var currentPage = Math.ceil(childIdx / this.pageSize);
      this.childCount = currentPage * this.pageSize;
      if (isNullOrUndefined(child[this.childCount - 1])) {
        return;
      }
      if (this.parent.enableVirtualization) {
        this.parent.islazyloadRequest = true;
      }
      index = this.rowObjectIndex = this.getRowObjectIndexByUid(child[this.childCount - 1].uid);
      var lastchild = rows[parseInt(index.toString(), 10)];
      var lastRow = this.getRowElementByUid(lastchild.uid);
      this.rowIndex = lastRow.rowIndex;
      index = this.getCurrentBlockEndIndex(lastchild, index);
      if (this.childCount === parentCapRow.data.count) {
        this.parent.islazyloadRequest = false;
      }
      if (this.childCount < parentCapRow.data.count) {
        var isRowExist = rows[index + 1] ? childRow.indent === rows[index + 1].indent : false;
        if (isRowExist && !isNullOrUndefined(this.getRowElementByUid(rows[index + 1].uid))) {
          this.parent.islazyloadRequest = false;
          this.childCount = 0;
          return;
        }
        if (currentPage > 1 || !this.cacheMode) {
          tr.classList.remove("e-lazyload-middle-down");
          lastRow.classList.remove("e-not-lazyload-end");
          lastchild.lazyLoadCssClass = "";
        }
        this.scrollData = isRowExist ? this.getCacheRowsOnDownScroll(this.rowObjectIndex + 1) : [];
        var query = getGroupKeysAndFields(capRowObjIdx, rows);
        var args = {
          rowIndex: capRowEleIndex,
          makeRequest: !isRowExist,
          groupInfo: parentCapRow,
          fields: query.fields,
          keys: query.keys,
          skip: this.childCount,
          take: this.pageSize,
          isScroll: true
        };
        if (this.cacheMode && this.childCount - this.pageSize >= this.pageSize * this.cacheBlockSize) {
          this.isScrollDown = true;
          var child_2 = this.getChildRowsByParentIndex(capRowObjIdx);
          var currenBlock = Math.ceil(child_2.indexOf(rows[parseInt(idx.toString(), 10)]) / this.pageSize) - 1;
          var removeBlock = currenBlock - (this.cacheBlockSize - 1) + 1;
          this.removeBlock(uid2, isRowExist, removeBlock, child_2, lastchild);
          args.cachedRowIndex = removeBlock * this.pageSize;
        }
        this.captionRowExpand(args);
      } else {
        this.childCount = 0;
        this.parent.islazyloadRequest = false;
      }
    };
    GroupLazyLoadRenderer2.prototype.getCurrentBlockEndIndex = function(row2, index) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      if (row2.isCaptionRow) {
        if (row2.isExpand) {
          var childCount = this.getChildRowsByParentIndex(index, true).length;
          this.rowIndex = this.rowIndex + childCount;
        }
        var agg = this.getAggregateByCaptionIndex(index);
        this.rowObjectIndex = this.rowObjectIndex + agg.length;
        var idx = index;
        for (var i = idx + 1; i < rows.length; i++) {
          if (rows[parseInt(i.toString(), 10)].indent === rows[parseInt(index.toString(), 10)].indent || rows[parseInt(i.toString(), 10)].indent < rows[parseInt(index.toString(), 10)].indent) {
            index = idx;
            break;
          } else {
            idx++;
          }
        }
      }
      return index;
    };
    GroupLazyLoadRenderer2.prototype.removeBlock = function(uid2, isRowExist, removeBlock, child, lastchild) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid1 = child[(removeBlock + 1) * this.pageSize - 1 - this.blockSize].uid;
      var uid22 = child[removeBlock * this.pageSize - this.pageSize].uid;
      var uid3 = child[removeBlock * this.pageSize].uid;
      var firstIdx = this.getRowObjectIndexByUid(uid1);
      rows[parseInt(firstIdx.toString(), 10)].lazyLoadCssClass = "e-lazyload-middle-up";
      this.getRowElementByUid(uid1).classList.add("e-lazyload-middle-up");
      if (lastchild) {
        this.getRowElementByUid(uid3).classList.add("e-not-lazyload-first");
        this.getRowByUid(uid3).lazyLoadCssClass = "e-not-lazyload-first";
        this.getRowByUid(uid22).lazyLoadCssClass = "";
      }
      if (isRowExist) {
        this.removeTopRows(lastchild ? lastchild.uid : uid2, uid22, uid3);
      } else {
        this.uid1 = uid22;
        this.uid2 = uid3;
        this.uid3 = lastchild ? lastchild.uid : uid2;
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollUpHandler = function(tr) {
      var page = this.parent.pageSettings.currentPage;
      var rows = this.groupCache[parseInt(page.toString(), 10)];
      var uid2 = tr.getAttribute("data-uid");
      var row2 = this.getRowByUid(uid2);
      var index = this.rowObjectIndex = this.getRowObjectIndexByUid(uid2);
      var parentCapRow = this.getRowByUid(row2.parentUid);
      var capRowObjIdx = this.rowIndex = this.getRowObjectIndexByUid(parentCapRow.uid);
      var captionRowEle = this.parent.getRowElementByUID(parentCapRow.uid);
      var capRowEleIndex = captionRowEle.rowIndex;
      var child = this.getChildRowsByParentIndex(capRowObjIdx);
      var childIdx = child.indexOf(rows[parseInt(index.toString(), 10)]);
      var currenBlock = Math.floor(childIdx / this.pageSize);
      var idx = this.blockSize;
      if (this.blockSize * 2 > this.pageSize) {
        idx = this.blockSize * 2 - this.pageSize;
        idx = this.blockSize - idx;
      }
      var start = child[childIdx - (idx - 1) - this.pageSize].uid;
      var end = child[childIdx - (idx - 1)].uid;
      this.scrollData = this.getCacheRowsOnUpScroll(start, end, index - (idx - 1));
      this.isFirstChildRow = currenBlock > 1;
      if (this.isFirstChildRow) {
        this.scrollData[0].lazyLoadCssClass = "e-not-lazyload-first";
      }
      this.getRowByUid(end).lazyLoadCssClass = "";
      this.getRowElementByUid(end).classList.remove("e-not-lazyload-first");
      var removeBlock = currenBlock + this.cacheBlockSize;
      if (child.length !== parentCapRow.data.count && removeBlock * this.pageSize > child.length) {
        this.isFirstChildRow = false;
        this.scrollData[0].lazyLoadCssClass = "";
        this.getRowElementByUid(end).classList.add("e-not-lazyload-first");
        return;
      }
      var count2 = removeBlock * this.pageSize > parentCapRow.data.count ? parentCapRow.data.count : removeBlock * this.pageSize;
      var size = removeBlock * this.pageSize > parentCapRow.data.count ? this.pageSize - (this.pageSize * removeBlock - parentCapRow.data.count) : this.pageSize;
      var childRows = this.getChildRowsByParentIndex(rows.indexOf(child[count2 - 1]), true, false, null, true);
      var uid1 = childRows.length ? childRows[childRows.length - 1].uid : child[count2 - 1].uid;
      var uid22 = child[count2 - size].uid;
      var uid3 = child[count2 - size - 1].uid;
      var lastIdx = this.objIdxByUid[parseInt(page.toString(), 10)]["" + uid22] - idx;
      if (rows[parseInt(lastIdx.toString(), 10)].lazyLoadCssClass === "e-lazyload-middle-down") {
        var trEle = this.getRowElementByUid(rows[parseInt(lastIdx.toString(), 10)].uid);
        if (trEle) {
          trEle.classList.add("e-lazyload-middle-down");
        }
      }
      this.getRowByUid(uid1).lazyLoadCssClass = "";
      this.getRowByUid(uid3).lazyLoadCssClass = "e-not-lazyload-end";
      this.getRowElementByUid(uid3).classList.add("e-not-lazyload-end");
      this.removeBottomRows(uid1, uid22, uid3);
      this.rowIndex = tr.rowIndex - idx;
      if (tr.classList.length > 1) {
        tr.classList.remove("e-lazyload-middle-up");
      } else {
        tr.removeAttribute("class");
      }
      if (!isNullOrUndefined(this.getRowElementByUid(start))) {
        this.childCount = 0;
        this.scrollData = [];
        return;
      }
      var key = getGroupKeysAndFields(this.getRowObjectIndexByUid(parentCapRow.uid), rows);
      var args = {
        rowIndex: capRowEleIndex,
        makeRequest: false,
        groupInfo: parentCapRow,
        fields: key.fields,
        keys: key.keys,
        skip: this.childCount,
        take: this.pageSize,
        isScroll: true,
        scrollUp: true
      };
      this.isScrollUp = true;
      this.captionRowExpand(args);
    };
    GroupLazyLoadRenderer2.prototype.findRowElements = function(rows) {
      var entered = false;
      var tr;
      for (var i = 0; i < rows.length; i++) {
        var rowIdx = rows[parseInt(i.toString(), 10)].rowIndex;
        if (this.parent.enableVirtualization) {
          var currentInfo = this.parent.contentModule.currentInfo;
          if (currentInfo && currentInfo.blockIndexes && currentInfo.blockIndexes[0] > 1) {
            rowIdx = rowIdx + this.parent.contentModule.offsets[currentInfo.blockIndexes[0] - 1] / this.parent.getRowHeight();
          }
        }
        if (isRowEnteredInGrid(rowIdx, this.parent)) {
          entered = true;
          this.rowIndex = rowIdx;
          tr = rows[parseInt(i.toString(), 10)];
          break;
        }
      }
      return {
        entered,
        tr
      };
    };
    GroupLazyLoadRenderer2.prototype.getRowElementByUid = function(uid2) {
      return this.parent.getContent().querySelector("tr[data-uid=" + uid2 + "]");
    };
    GroupLazyLoadRenderer2.prototype.removeTopRows = function(uid1, uid2, uid3) {
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      var start = false;
      for (var i = 0; i < trs.length; i++) {
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid3) {
          var tr = this.parent.getContent().querySelector("tr[data-uid=" + uid1 + "]");
          if (tr) {
            this.rowIndex = tr.rowIndex;
          }
          break;
        }
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid2) {
          start = true;
        }
        if (start) {
          remove(trs[parseInt(i.toString(), 10)]);
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.removeBottomRows = function(uid1, uid2, uid3) {
      var trs = [].slice.call(this.parent.getContent().querySelectorAll("tr"));
      var trigger = false;
      for (var i = 0; i < trs.length; i++) {
        if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid2) {
          trigger = true;
        }
        if (trigger) {
          remove(trs[parseInt(i.toString(), 10)]);
          if (trs[parseInt(i.toString(), 10)].getAttribute("data-uid") === uid1) {
            break;
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.setCache = function(e) {
      var page = this.parent.pageSettings.currentPage;
      if (this.parent.enableVirtualization) {
        this.parent.lazyLoadRender = this;
      }
      if (this.parent.enableInfiniteScrolling && e.args.requestType === "infiniteScroll" && e.args["prevPage"] !== e.args["currentPage"]) {
        this.groupCache[parseInt(page.toString(), 10)] = this.initialGroupCaptions[parseInt(page.toString(), 10)] = this.groupCache[e.args["prevPage"]].concat(extend([], e.data));
        var groupCacheKeys = Object.keys(this.groupCache);
        for (var i = 0; i < groupCacheKeys.length; i++) {
          if (e.args["currentPage"] !== parseInt(groupCacheKeys[parseInt(i.toString(), 10)], 10)) {
            delete this.groupCache["" + groupCacheKeys[parseInt(i.toString(), 10)]];
            delete this.initialGroupCaptions["" + groupCacheKeys[parseInt(i.toString(), 10)]];
          }
        }
      } else {
        this.groupCache[parseInt(page.toString(), 10)] = this.initialGroupCaptions[parseInt(page.toString(), 10)] = extend([], e.data);
      }
    };
    GroupLazyLoadRenderer2.prototype.captionRowExpand = function(args) {
      var _this = this;
      var captionRow = args.groupInfo;
      var level = this.parent.groupSettings.columns.indexOf(captionRow.data.field) + 1;
      var pred = generateExpandPredicates(args.fields, args.keys, this);
      var predicateList = getPredicates(pred);
      var lazyLoad = {
        level,
        skip: args.skip,
        take: args.take,
        where: predicateList
      };
      args.lazyLoadQuery = lazyLoad;
      args.requestType = "onDemandGroupInfo";
      if (args.makeRequest) {
        var query = this.parent.renderModule.data.generateQuery(true);
        if (!query.isCountRequired) {
          query.isCountRequired = true;
        }
        query.lazyLoad.push({
          key: "onDemandGroupInfo",
          value: lazyLoad
        });
        this.lazyLoadQuery.push(lazyLoad["where"]);
        if (args.isScroll && this.parent.enableVirtualMaskRow) {
          this.parent.showMaskRow();
        } else {
          this.parent.showSpinner();
        }
        this.parent.renderModule.data.getData(args, query).then(function(e) {
          if (_this.parent.enableVirtualization) {
            _this.parent.islazyloadRequest = true;
          }
          _this.parent.hideSpinner();
          _this.parent.removeMaskRow();
          if (e.result.length === 0) {
            return;
          }
          if (_this.cacheMode && _this.uid1 && _this.uid2) {
            _this.removeTopRows(_this.uid3, _this.uid1, _this.uid2);
            _this.uid1 = _this.uid2 = _this.uid3 = void 0;
          }
          _this.lazyLoadHandler({
            data: e.result,
            count: e.count,
            level,
            index: args.rowIndex,
            isRowExist: false,
            isScroll: args.isScroll,
            up: false,
            rowIndex: args.cachedRowIndex
          });
        }).catch(function(e) {
          return _this.parent.renderModule.dataManagerFailure(e, {
            requestType: "grouping"
          });
        });
      } else {
        this.lazyLoadHandler({
          data: null,
          count: args.groupInfo.data.count,
          level,
          index: args.rowIndex,
          isRowExist: true,
          isScroll: args.isScroll,
          up: args.scrollUp,
          rowIndex: args.cachedRowIndex
        });
      }
    };
    GroupLazyLoadRenderer2.prototype.scrollReset = function(top) {
      this.parent.getContent().firstElementChild.scrollTop = top ? this.parent.getContent().firstElementChild.scrollTop + top : 0;
    };
    GroupLazyLoadRenderer2.prototype.updateCurrentViewData = function() {
      var records = [];
      this.getRows().filter(function(row2) {
        if (row2.isDataRow) {
          records[row2.index] = row2.data;
        }
      });
      this.parent.currentViewData = records.length ? records : this.parent.currentViewData;
    };
    GroupLazyLoadRenderer2.prototype.getGroupCache = function() {
      return this.groupCache;
    };
    GroupLazyLoadRenderer2.prototype.getRows = function() {
      return this.groupCache[this.parent.pageSettings.currentPage] || [];
    };
    GroupLazyLoadRenderer2.prototype.getRowElements = function() {
      return [].slice.call(this.parent.getContent().getElementsByClassName(row));
    };
    GroupLazyLoadRenderer2.prototype.getRowByIndex = function(index) {
      var tr = [].slice.call(this.parent.getContent().getElementsByClassName(row));
      var row2;
      for (var i = 0; !isNullOrUndefined(index) && i < tr.length; i++) {
        if (tr[parseInt(i.toString(), 10)].getAttribute(dataRowIndex) === index.toString()) {
          row2 = tr[parseInt(i.toString(), 10)];
          break;
        }
      }
      return row2;
    };
    GroupLazyLoadRenderer2.prototype.setVisible = function(columns) {
      var gObj = this.parent;
      var rows = this.getRows();
      var testRow;
      rows.some(function(r) {
        if (r.isDataRow) {
          testRow = r;
        }
        return r.isDataRow;
      });
      var contentrows = this.getRows().filter(function(row2) {
        return !row2.isDetailRow;
      });
      for (var i = 0; i < columns.length; i++) {
        var column = columns[parseInt(i.toString(), 10)];
        var idx = this.parent.getNormalizedColumnIndex(column.uid);
        var colIdx = this.parent.getColumnIndexByUid(column.uid);
        var displayVal = column.visible === true ? "" : "none";
        if (idx !== -1 && testRow && idx < testRow.cells.length) {
          setStyleAttribute(this.getColGroup().childNodes[parseInt(idx.toString(), 10)], {
            "display": displayVal
          });
        }
        this.setDisplayNone(gObj.getDataRows(), colIdx, displayVal, contentrows, idx);
        if (!this.parent.invokedFromMedia && column.hideAtMedia) {
          this.parent.updateMediaColumns(column);
        }
        this.parent.invokedFromMedia = false;
      }
    };
    GroupLazyLoadRenderer2.prototype.setDisplayNone = function(tr, idx, displayVal, rows, oriIdx) {
      if (!this.parent.groupSettings.columns.length) {
        setDisplayValue(tr, idx, displayVal, rows);
      } else {
        var keys = Object.keys(this.groupCache);
        for (var j = 0; j < keys.length; j++) {
          var uids = this.rowsByUid[keys[parseInt(j.toString(), 10)]];
          var idxs = Object.keys(uids);
          for (var i = 0; i < idxs.length; i++) {
            var tr_1 = this.parent.getContent().querySelector("tr[data-uid=" + idxs[parseInt(i.toString(), 10)] + "]");
            var row2 = uids[idxs[parseInt(i.toString(), 10)]];
            if (row2.isCaptionRow) {
              if (!this.captionModelGen.isEmpty()) {
                this.changeCaptionRow(row2, tr_1, keys[parseInt(j.toString(), 10)]);
              } else {
                row2.cells[row2.indent + 1].colSpan = displayVal === "" ? row2.cells[row2.indent + 1].colSpan + 1 : row2.cells[row2.indent + 1].colSpan - 1;
                if (tr_1) {
                  tr_1.cells[row2.indent + 1].colSpan = row2.cells[row2.indent + 1].colSpan;
                }
              }
            }
            if (row2.isDataRow) {
              this.showAndHideCells(tr_1, idx, displayVal, false);
              row2.cells[parseInt(oriIdx.toString(), 10)].visible = displayVal === "" ? true : false;
            }
            if (!row2.isCaptionRow && !row2.isDataRow && isNullOrUndefined(row2.indent)) {
              row2.cells[parseInt(oriIdx.toString(), 10)].visible = displayVal === "" ? true : false;
              row2.visible = row2.cells.some(function(cell) {
                return cell.isDataCell && cell.visible;
              });
              this.showAndHideCells(tr_1, idx, displayVal, true, row2);
            }
          }
        }
      }
    };
    GroupLazyLoadRenderer2.prototype.changeCaptionRow = function(row2, tr, index) {
      var capRow = row2;
      var captionData = row2.data;
      var data = this.groupGenerator.generateCaptionRow(captionData, capRow.indent, capRow.parentGid, void 0, capRow.tIndex, capRow.parentUid);
      data.uid = row2.uid;
      data.isExpand = row2.isExpand;
      data.lazyLoadCssClass = row2.lazyLoadCssClass;
      this.rowsByUid[parseInt(index.toString(), 10)][row2.uid] = data;
      this.groupCache[parseInt(index.toString(), 10)][this.objIdxByUid[parseInt(index.toString(), 10)][row2.uid]] = data;
      if (tr) {
        var tbody2 = this.parent.getContentTable().querySelector(tbody);
        tbody2.replaceChild(this.rowRenderer.render(data, this.parent.getColumns()), tr);
      }
    };
    GroupLazyLoadRenderer2.prototype.showAndHideCells = function(tr, idx, displayVal, isSummary, row2) {
      if (tr) {
        var cls = isSummary ? "td.e-summarycell" : "td.e-rowcell";
        setStyleAttribute(tr.querySelectorAll(cls)[parseInt(idx.toString(), 10)], {
          "display": displayVal
        });
        if (tr.querySelectorAll(cls)[parseInt(idx.toString(), 10)].classList.contains("e-hide")) {
          removeClass([tr.querySelectorAll(cls)[parseInt(idx.toString(), 10)]], ["e-hide"]);
        }
        if (isSummary) {
          if (row2.visible && tr.classList.contains("e-hide")) {
            removeClass([tr], ["e-hide"]);
          } else if (!row2.visible) {
            addClass([tr], ["e-hide"]);
          }
        }
      }
    };
    return GroupLazyLoadRenderer2;
  }(ContentRender)
);

// node_modules/@syncfusion/ej2-grids/src/grid/actions/lazy-load-group.js
var LazyLoadGroup = (
  /** @class */
  function() {
    function LazyLoadGroup2(parent, serviceLocator) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
      this.addEventListener();
    }
    LazyLoadGroup2.prototype.getModuleName = function() {
      return "lazyLoadGroup";
    };
    LazyLoadGroup2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(destroy, this.destroy, this);
    };
    LazyLoadGroup2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(destroy, this.destroy);
    };
    LazyLoadGroup2.prototype.instantiateRenderer = function() {
      if (this.parent.height === "auto") {
        this.parent.height = this.parent.pageSettings.pageSize * this.parent.getRowHeight();
      }
      var renderer = this.serviceLocator.getService("rendererFactory");
      if (this.parent.groupSettings.enableLazyLoading) {
        renderer.addRenderer(RenderType.Content, new GroupLazyLoadRenderer(this.parent, this.serviceLocator));
      }
      if (this.parent.enableVirtualization) {
        this.parent.lazyLoadRender = new GroupLazyLoadRenderer(this.parent, this.serviceLocator);
      }
    };
    LazyLoadGroup2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return LazyLoadGroup2;
  }()
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/autocomplete-edit-cell.js
var __extends87 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AutoCompleteEditCell = (
  /** @class */
  function(_super) {
    __extends87(AutoCompleteEditCell2, _super);
    function AutoCompleteEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoCompleteEditCell2.prototype.write = function(args) {
      this.column = args.column;
      var isInlineEdit = this.parent.editSettings.mode !== "Dialog";
      this.object = new AutoComplete(extend({
        dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
        query: new Query().select(args.column.field),
        enabled: isEditable(args.column, args.requestType, args.element),
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        // enableRtl: this.parentect.enableRtl,
        actionComplete: this.selectedValues.bind(this),
        placeholder: isInlineEdit ? "" : args.column.headerText,
        floatLabelType: isInlineEdit ? "Never" : "Always"
      }, args.column.edit.params));
      this.object.appendTo(args.element);
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
    };
    AutoCompleteEditCell2.prototype.selectedValues = function(valObj) {
      valObj.result = DataUtil.distinct(valObj.result, this.object.fields.value, true);
      if (this.column.dataSource) {
        this.column.dataSource.dataSource.json = valObj.result;
      }
    };
    return AutoCompleteEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/combobox-edit-cell.js
var __extends88 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ComboboxEditCell = (
  /** @class */
  function(_super) {
    __extends88(ComboboxEditCell2, _super);
    function ComboboxEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComboboxEditCell2.prototype.write = function(args) {
      this.column = args.column;
      var isInlineMode = this.parent.editSettings.mode !== "Dialog";
      this.obj = new ComboBox(extend({
        dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
        query: new Query().select(args.column.field),
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        enableRtl: this.parent.enableRtl,
        actionComplete: this.finalValue.bind(this),
        placeholder: isInlineMode ? "" : args.column.headerText,
        floatLabelType: isInlineMode ? "Never" : "Always",
        enabled: isEditable(args.column, args.requestType, args.element),
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    ComboboxEditCell2.prototype.finalValue = function(val) {
      val.result = DataUtil.distinct(val.result, this.obj.fields.value, true);
      if (this.column.dataSource) {
        this.column.dataSource.dataSource.json = val.result;
      }
    };
    return ComboboxEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/multiselect-edit-cell.js
var __extends89 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MultiSelectEditCell = (
  /** @class */
  function(_super) {
    __extends89(MultiSelectEditCell2, _super);
    function MultiSelectEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiSelectEditCell2.prototype.write = function(args) {
      this.column = args.column;
      var isInline = this.parent.editSettings.mode !== "Dialog";
      this.obj = new MultiSelect(extend({
        fields: {
          text: args.column.field,
          value: args.column.field
        },
        value: getValue(args.column.field, args.rowData),
        enableRtl: this.parent.enableRtl,
        placeholder: isInline ? "" : args.column.headerText,
        popupHeight: "200px",
        floatLabelType: isInline ? "Never" : "Always",
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
      args.element.setAttribute("name", getComplexFieldID(args.column.field));
    };
    return MultiSelectEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/timepicker-edit-cell.js
var __extends90 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimePickerEditCell = (
  /** @class */
  function(_super) {
    __extends90(TimePickerEditCell2, _super);
    function TimePickerEditCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TimePickerEditCell2.prototype.write = function(args) {
      var isInlineEdit = this.parent.editSettings.mode !== "Dialog";
      var rowDataValue = getObject(args.column.field, args.rowData);
      rowDataValue = rowDataValue ? new Date(rowDataValue) : null;
      this.obj = new TimePicker(extend({
        floatLabelType: isInlineEdit ? "Never" : "Always",
        value: rowDataValue,
        placeholder: isInlineEdit ? "" : args.column.headerText,
        enableRtl: this.parent.enableRtl,
        enabled: isEditable(args.column, args.requestType, args.element),
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    return TimePickerEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/toggleswitch-edit-cell.js
var __extends91 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ToggleEditCell = (
  /** @class */
  function(_super) {
    __extends91(ToggleEditCell2, _super);
    function ToggleEditCell2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.activeClasses = ["e-selectionbackground", "e-active"];
      return _this;
    }
    ToggleEditCell2.prototype.create = function(args) {
      var clsNames = "e-field e-boolcell";
      if (args.column.type === "checkbox") {
        clsNames = "e-field e-boolcell e-edit-checkselect";
      }
      return createEditElement(this.parent, args.column, clsNames, {
        type: "checkbox",
        value: args.value
      });
    };
    ToggleEditCell2.prototype.read = function(element) {
      return element.checked;
    };
    ToggleEditCell2.prototype.write = function(args) {
      var chkBoxElement = !isNullOrUndefined(args.row) && args.row.querySelector(".e-edit-checkselect");
      var data = getObject(args.column.field, args.rowData);
      var checkState = data && JSON.parse(data.toString().toLowerCase());
      if (!isNullOrUndefined(chkBoxElement)) {
        this.editType = this.parent.editSettings.mode;
        this.editRow = args.row;
        if (args.requestType !== "add") {
          var row2 = this.parent.getRowObjectFromUID(args.row.getAttribute("data-uid"));
          checkState = row2 ? row2.isSelected : false;
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.getElementsByClassName(rowCell)), checkState].concat(this.activeClasses));
      }
      this.obj = new Switch(extend({
        label: this.parent.editSettings.mode !== "Dialog" ? " " : args.column.headerText,
        checked: checkState,
        disabled: !isEditable(args.column, args.requestType, args.element),
        enableRtl: this.parent.enableRtl,
        change: this.switchModeChange.bind(this),
        cssClass: this.parent.cssClass ? this.parent.cssClass : ""
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    ToggleEditCell2.prototype.switchModeChange = function(args) {
      if (this.editRow && this.editType !== "Dialog") {
        var addClass2 = false;
        if (!args.checked) {
          this.editRow.removeAttribute("aria-selected");
        } else {
          addClass2 = true;
          this.editRow.setAttribute("aria-selected", addClass2.toString());
        }
        addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.getElementsByClassName(rowCell)), addClass2].concat(this.activeClasses));
      }
    };
    return ToggleEditCell2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-grids/src/grid/renderer/inputmask-edit-cell.js
var __extends92 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MaskedTextBoxCellEdit = (
  /** @class */
  function(_super) {
    __extends92(MaskedTextBoxCellEdit2, _super);
    function MaskedTextBoxCellEdit2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MaskedTextBoxCellEdit2.prototype.write = function(args) {
      this.column = args.column;
      var isInlineEdit = this.parent.editSettings.mode !== "Dialog";
      this.obj = new MaskedTextBox(extend({
        fields: {
          value: args.column.field
        },
        value: getObject(args.column.field, args.rowData),
        floatLabelType: isInlineEdit ? "Never" : "Always",
        mask: "000-000-0000",
        enabled: isEditable(args.column, args.requestType, args.element),
        cssClass: this.parent.cssClass ? this.parent.cssClass : null
      }, args.column.edit.params));
      this.obj.appendTo(args.element);
    };
    return MaskedTextBoxCellEdit2;
  }(EditCellBase)
);

// node_modules/@syncfusion/ej2-angular-grids/fesm2020/syncfusion-ej2-angular-grids.mjs
var _c0 = ["template"];
var _c1 = ["headerTemplate"];
var _c2 = ["commandsTemplate"];
var _c3 = ["filterItemTemplate"];
var _c4 = ["editTemplate"];
var _c5 = ["filterTemplate"];
var _c6 = ["footerTemplate"];
var _c7 = ["groupFooterTemplate"];
var _c8 = ["groupCaptionTemplate"];
var _c9 = ["rowTemplate"];
var _c10 = ["emptyRecordTemplate"];
var _c11 = ["detailTemplate"];
var _c12 = ["toolbarTemplate"];
var _c13 = ["pagerTemplate"];
var _c14 = ["editSettingsTemplate"];
var _c15 = ["groupSettingsCaptionTemplate"];
var input$3 = ["allowEditing", "allowFiltering", "allowGrouping", "allowReordering", "allowResizing", "allowSearching", "allowSorting", "autoFit", "clipMode", "columns", "commands", "customAttributes", "dataSource", "defaultValue", "disableHtmlEncode", "displayAsCheckBox", "edit", "editTemplate", "editType", "enableGroupByFormat", "field", "filter", "filterBarTemplate", "filterTemplate", "foreignKeyField", "foreignKeyValue", "format", "formatter", "freeze", "headerTemplate", "headerText", "headerTextAlign", "headerValueAccessor", "hideAtMedia", "index", "isFrozen", "isIdentity", "isPrimaryKey", "lockColumn", "maxWidth", "minWidth", "showColumnMenu", "showInColumnChooser", "sortComparer", "template", "textAlign", "type", "uid", "validationRules", "valueAccessor", "visible", "width"];
var outputs$5 = [];
var StackedColumnDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$5);
    this.directivePropList = input$3;
  }
};
StackedColumnDirective.ɵfac = function StackedColumnDirective_Factory(t) {
  return new (t || StackedColumnDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
StackedColumnDirective.ɵdir = ɵɵdefineDirective({
  type: StackedColumnDirective,
  selectors: [["e-stacked-column"]],
  contentQueries: function StackedColumnDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
      ɵɵcontentQuery(dirIndex, _c2, 5);
      ɵɵcontentQuery(dirIndex, _c3, 5);
      ɵɵcontentQuery(dirIndex, _c4, 5);
      ɵɵcontentQuery(dirIndex, _c5, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filter_itemTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterTemplate = _t.first);
    }
  },
  inputs: {
    allowEditing: "allowEditing",
    allowFiltering: "allowFiltering",
    allowGrouping: "allowGrouping",
    allowReordering: "allowReordering",
    allowResizing: "allowResizing",
    allowSearching: "allowSearching",
    allowSorting: "allowSorting",
    autoFit: "autoFit",
    clipMode: "clipMode",
    columns: "columns",
    commands: "commands",
    customAttributes: "customAttributes",
    dataSource: "dataSource",
    defaultValue: "defaultValue",
    disableHtmlEncode: "disableHtmlEncode",
    displayAsCheckBox: "displayAsCheckBox",
    edit: "edit",
    editTemplate: "editTemplate",
    editType: "editType",
    enableGroupByFormat: "enableGroupByFormat",
    field: "field",
    filter: "filter",
    filterBarTemplate: "filterBarTemplate",
    filterTemplate: "filterTemplate",
    foreignKeyField: "foreignKeyField",
    foreignKeyValue: "foreignKeyValue",
    format: "format",
    formatter: "formatter",
    freeze: "freeze",
    headerTemplate: "headerTemplate",
    headerText: "headerText",
    headerTextAlign: "headerTextAlign",
    headerValueAccessor: "headerValueAccessor",
    hideAtMedia: "hideAtMedia",
    index: "index",
    isFrozen: "isFrozen",
    isIdentity: "isIdentity",
    isPrimaryKey: "isPrimaryKey",
    lockColumn: "lockColumn",
    maxWidth: "maxWidth",
    minWidth: "minWidth",
    showColumnMenu: "showColumnMenu",
    showInColumnChooser: "showInColumnChooser",
    sortComparer: "sortComparer",
    template: "template",
    textAlign: "textAlign",
    type: "type",
    uid: "uid",
    validationRules: "validationRules",
    valueAccessor: "valueAccessor",
    visible: "visible",
    width: "width"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], StackedColumnDirective.prototype, "template", void 0);
__decorate([Template()], StackedColumnDirective.prototype, "headerTemplate", void 0);
__decorate([Template()], StackedColumnDirective.prototype, "commandsTemplate", void 0);
__decorate([Template()], StackedColumnDirective.prototype, "filter_itemTemplate", void 0);
__decorate([Template()], StackedColumnDirective.prototype, "editTemplate", void 0);
__decorate([Template()], StackedColumnDirective.prototype, "filterTemplate", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StackedColumnDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-columns>e-column>e-stacked-columns>e-stacked-column",
      inputs: input$3,
      outputs: outputs$5,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }],
    headerTemplate: [{
      type: ContentChild,
      args: ["headerTemplate"]
    }],
    commandsTemplate: [{
      type: ContentChild,
      args: ["commandsTemplate"]
    }],
    filter_itemTemplate: [{
      type: ContentChild,
      args: ["filterItemTemplate"]
    }],
    editTemplate: [{
      type: ContentChild,
      args: ["editTemplate"]
    }],
    filterTemplate: [{
      type: ContentChild,
      args: ["filterTemplate"]
    }]
  });
})();
var StackedColumnsDirective = class extends ArrayBase {
  constructor() {
    super("columns");
  }
};
StackedColumnsDirective.ɵfac = function StackedColumnsDirective_Factory(t) {
  return new (t || StackedColumnsDirective)();
};
StackedColumnsDirective.ɵdir = ɵɵdefineDirective({
  type: StackedColumnsDirective,
  selectors: [["e-stacked-columns"]],
  contentQueries: function StackedColumnsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, StackedColumnDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StackedColumnsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-columns>e-column>e-stacked-columns",
      queries: {
        children: new ContentChildren(StackedColumnDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input$2 = ["allowEditing", "allowFiltering", "allowGrouping", "allowReordering", "allowResizing", "allowSearching", "allowSorting", "autoFit", "clipMode", "columns", "commands", "customAttributes", "dataSource", "defaultValue", "disableHtmlEncode", "displayAsCheckBox", "edit", "editTemplate", "editType", "enableGroupByFormat", "field", "filter", "filterBarTemplate", "filterTemplate", "foreignKeyField", "foreignKeyValue", "format", "formatter", "freeze", "headerTemplate", "headerText", "headerTextAlign", "headerValueAccessor", "hideAtMedia", "index", "isFrozen", "isIdentity", "isPrimaryKey", "lockColumn", "maxWidth", "minWidth", "showColumnMenu", "showInColumnChooser", "sortComparer", "template", "textAlign", "type", "uid", "validationRules", "valueAccessor", "visible", "width"];
var outputs$4 = [];
var ColumnDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    this.tags = ["columns"];
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$4);
    this.directivePropList = input$2;
  }
};
ColumnDirective.ɵfac = function ColumnDirective_Factory(t) {
  return new (t || ColumnDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
ColumnDirective.ɵdir = ɵɵdefineDirective({
  type: ColumnDirective,
  selectors: [["e-column"]],
  contentQueries: function ColumnDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
      ɵɵcontentQuery(dirIndex, _c1, 5);
      ɵɵcontentQuery(dirIndex, _c2, 5);
      ɵɵcontentQuery(dirIndex, _c3, 5);
      ɵɵcontentQuery(dirIndex, _c4, 5);
      ɵɵcontentQuery(dirIndex, _c5, 5);
      ɵɵcontentQuery(dirIndex, StackedColumnsDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filter_itemTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childColumns = _t.first);
    }
  },
  inputs: {
    allowEditing: "allowEditing",
    allowFiltering: "allowFiltering",
    allowGrouping: "allowGrouping",
    allowReordering: "allowReordering",
    allowResizing: "allowResizing",
    allowSearching: "allowSearching",
    allowSorting: "allowSorting",
    autoFit: "autoFit",
    clipMode: "clipMode",
    columns: "columns",
    commands: "commands",
    customAttributes: "customAttributes",
    dataSource: "dataSource",
    defaultValue: "defaultValue",
    disableHtmlEncode: "disableHtmlEncode",
    displayAsCheckBox: "displayAsCheckBox",
    edit: "edit",
    editTemplate: "editTemplate",
    editType: "editType",
    enableGroupByFormat: "enableGroupByFormat",
    field: "field",
    filter: "filter",
    filterBarTemplate: "filterBarTemplate",
    filterTemplate: "filterTemplate",
    foreignKeyField: "foreignKeyField",
    foreignKeyValue: "foreignKeyValue",
    format: "format",
    formatter: "formatter",
    freeze: "freeze",
    headerTemplate: "headerTemplate",
    headerText: "headerText",
    headerTextAlign: "headerTextAlign",
    headerValueAccessor: "headerValueAccessor",
    hideAtMedia: "hideAtMedia",
    index: "index",
    isFrozen: "isFrozen",
    isIdentity: "isIdentity",
    isPrimaryKey: "isPrimaryKey",
    lockColumn: "lockColumn",
    maxWidth: "maxWidth",
    minWidth: "minWidth",
    showColumnMenu: "showColumnMenu",
    showInColumnChooser: "showInColumnChooser",
    sortComparer: "sortComparer",
    template: "template",
    textAlign: "textAlign",
    type: "type",
    uid: "uid",
    validationRules: "validationRules",
    valueAccessor: "valueAccessor",
    visible: "visible",
    width: "width"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], ColumnDirective.prototype, "template", void 0);
__decorate([Template()], ColumnDirective.prototype, "headerTemplate", void 0);
__decorate([Template()], ColumnDirective.prototype, "commandsTemplate", void 0);
__decorate([Template()], ColumnDirective.prototype, "filter_itemTemplate", void 0);
__decorate([Template()], ColumnDirective.prototype, "editTemplate", void 0);
__decorate([Template()], ColumnDirective.prototype, "filterTemplate", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ColumnDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-columns>e-column",
      inputs: input$2,
      outputs: outputs$4,
      queries: {
        childColumns: new ContentChild(StackedColumnsDirective)
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }],
    headerTemplate: [{
      type: ContentChild,
      args: ["headerTemplate"]
    }],
    commandsTemplate: [{
      type: ContentChild,
      args: ["commandsTemplate"]
    }],
    filter_itemTemplate: [{
      type: ContentChild,
      args: ["filterItemTemplate"]
    }],
    editTemplate: [{
      type: ContentChild,
      args: ["editTemplate"]
    }],
    filterTemplate: [{
      type: ContentChild,
      args: ["filterTemplate"]
    }]
  });
})();
var ColumnsDirective = class extends ArrayBase {
  constructor() {
    super("columns");
  }
};
ColumnsDirective.ɵfac = function ColumnsDirective_Factory(t) {
  return new (t || ColumnsDirective)();
};
ColumnsDirective.ɵdir = ɵɵdefineDirective({
  type: ColumnsDirective,
  selectors: [["e-columns"]],
  contentQueries: function ColumnsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ColumnDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ColumnsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-columns",
      queries: {
        children: new ContentChildren(ColumnDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input$1 = ["columnName", "customAggregate", "field", "footerTemplate", "format", "groupCaptionTemplate", "groupFooterTemplate", "type"];
var outputs$3 = [];
var AggregateColumnDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$3);
    this.directivePropList = input$1;
  }
};
AggregateColumnDirective.ɵfac = function AggregateColumnDirective_Factory(t) {
  return new (t || AggregateColumnDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
AggregateColumnDirective.ɵdir = ɵɵdefineDirective({
  type: AggregateColumnDirective,
  selectors: [["e-column"]],
  contentQueries: function AggregateColumnDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c6, 5);
      ɵɵcontentQuery(dirIndex, _c7, 5);
      ɵɵcontentQuery(dirIndex, _c8, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupFooterTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupCaptionTemplate = _t.first);
    }
  },
  inputs: {
    columnName: "columnName",
    customAggregate: "customAggregate",
    field: "field",
    footerTemplate: "footerTemplate",
    format: "format",
    groupCaptionTemplate: "groupCaptionTemplate",
    groupFooterTemplate: "groupFooterTemplate",
    type: "type"
  },
  features: [ɵɵInheritDefinitionFeature]
});
__decorate([Template()], AggregateColumnDirective.prototype, "footerTemplate", void 0);
__decorate([Template()], AggregateColumnDirective.prototype, "groupFooterTemplate", void 0);
__decorate([Template()], AggregateColumnDirective.prototype, "groupCaptionTemplate", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AggregateColumnDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-aggregates>e-aggregate>e-columns>e-column",
      inputs: input$1,
      outputs: outputs$3,
      queries: {}
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    footerTemplate: [{
      type: ContentChild,
      args: ["footerTemplate"]
    }],
    groupFooterTemplate: [{
      type: ContentChild,
      args: ["groupFooterTemplate"]
    }],
    groupCaptionTemplate: [{
      type: ContentChild,
      args: ["groupCaptionTemplate"]
    }]
  });
})();
var AggregateColumnsDirective = class extends ArrayBase {
  constructor() {
    super("columns");
  }
};
AggregateColumnsDirective.ɵfac = function AggregateColumnsDirective_Factory(t) {
  return new (t || AggregateColumnsDirective)();
};
AggregateColumnsDirective.ɵdir = ɵɵdefineDirective({
  type: AggregateColumnsDirective,
  selectors: [["e-columns"]],
  contentQueries: function AggregateColumnsDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, AggregateColumnDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AggregateColumnsDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-aggregates>e-aggregate>e-columns",
      queries: {
        children: new ContentChildren(AggregateColumnDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var input = ["columns"];
var outputs$2 = [];
var AggregateDirective = class extends ComplexBase {
  constructor(viewContainerRef) {
    super();
    this.viewContainerRef = viewContainerRef;
    this.tags = ["columns"];
    setValue2("currentInstance", this, this.viewContainerRef);
    this.registerEvents(outputs$2);
    this.directivePropList = input;
  }
};
AggregateDirective.ɵfac = function AggregateDirective_Factory(t) {
  return new (t || AggregateDirective)(ɵɵdirectiveInject(ViewContainerRef));
};
AggregateDirective.ɵdir = ɵɵdefineDirective({
  type: AggregateDirective,
  selectors: [["e-aggregate"]],
  contentQueries: function AggregateDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, AggregateColumnsDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childColumns = _t.first);
    }
  },
  inputs: {
    columns: "columns"
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AggregateDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-aggregates>e-aggregate",
      inputs: input,
      outputs: outputs$2,
      queries: {
        childColumns: new ContentChild(AggregateColumnsDirective)
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, null);
})();
var AggregatesDirective = class extends ArrayBase {
  constructor() {
    super("aggregates");
  }
};
AggregatesDirective.ɵfac = function AggregatesDirective_Factory(t) {
  return new (t || AggregatesDirective)();
};
AggregatesDirective.ɵdir = ɵɵdefineDirective({
  type: AggregatesDirective,
  selectors: [["e-aggregates"]],
  contentQueries: function AggregatesDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, AggregateDirective, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AggregatesDirective, [{
    type: Directive,
    args: [{
      selector: "ejs-grid>e-aggregates",
      queries: {
        children: new ContentChildren(AggregateDirective)
      }
    }]
  }], function() {
    return [];
  }, null);
})();
var inputs$1 = ["aggregates", "allowExcelExport", "allowFiltering", "allowGrouping", "allowKeyboard", "allowMultiSorting", "allowPaging", "allowPdfExport", "allowReordering", "allowResizing", "allowRowDragAndDrop", "allowSelection", "allowSorting", "allowTextWrap", "autoFit", "childGrid", "clipMode", "columnChooserSettings", "columnMenuItems", "columnQueryMode", "columns", "contextMenuItems", "cssClass", "currencyCode", "currentAction", "currentViewData", "dataSource", "detailTemplate", "editSettings", "ej2StatePersistenceVersion", "emptyRecordTemplate", "enableAdaptiveUI", "enableAltRow", "enableAutoFill", "enableColumnVirtualization", "enableHeaderFocus", "enableHover", "enableHtmlSanitizer", "enableImmutableMode", "enableInfiniteScrolling", "enablePersistence", "enableRtl", "enableStickyHeader", "enableVirtualMaskRow", "enableVirtualization", "exportGrids", "filterSettings", "frozenColumns", "frozenRows", "gridLines", "groupSettings", "height", "hierarchyPrintMode", "infiniteScrollSettings", "loadingIndicator", "locale", "pageSettings", "pagerTemplate", "parentDetails", "printMode", "query", "queryString", "resizeSettings", "rowDropSettings", "rowHeight", "rowRenderingMode", "rowTemplate", "searchSettings", "selectedRowIndex", "selectionSettings", "showColumnChooser", "showColumnMenu", "showHider", "sortSettings", "textWrapSettings", "toolbar", "toolbarTemplate", "width"];
var outputs$1 = ["actionBegin", "actionComplete", "actionFailure", "batchAdd", "batchCancel", "batchDelete", "beforeAutoFill", "beforeBatchAdd", "beforeBatchDelete", "beforeBatchSave", "beforeCopy", "beforeDataBound", "beforeExcelExport", "beforeOpenAdaptiveDialog", "beforeOpenColumnChooser", "beforePaste", "beforePdfExport", "beforePrint", "beginEdit", "cellDeselected", "cellDeselecting", "cellEdit", "cellSave", "cellSaved", "cellSelected", "cellSelecting", "checkBoxChange", "columnDataStateChange", "columnDeselected", "columnDeselecting", "columnDrag", "columnDragStart", "columnDrop", "columnMenuClick", "columnMenuOpen", "columnSelected", "columnSelecting", "commandClick", "contextMenuClick", "contextMenuOpen", "created", "dataBound", "dataSourceChanged", "dataStateChange", "destroyed", "detailDataBound", "excelAggregateQueryCellInfo", "excelExportComplete", "excelHeaderQueryCellInfo", "excelQueryCellInfo", "exportDetailDataBound", "exportDetailTemplate", "exportGroupCaption", "headerCellInfo", "keyPressed", "lazyLoadGroupCollapse", "lazyLoadGroupExpand", "load", "pdfAggregateQueryCellInfo", "pdfExportComplete", "pdfHeaderQueryCellInfo", "pdfQueryCellInfo", "printComplete", "queryCellInfo", "recordClick", "recordDoubleClick", "resizeStart", "resizeStop", "resizing", "rowDataBound", "rowDeselected", "rowDeselecting", "rowDrag", "rowDragStart", "rowDragStartHelper", "rowDrop", "rowSelected", "rowSelecting", "toolbarClick", "dataSourceChange"];
var twoWays$1 = ["dataSource"];
var GridComponent = class GridComponent2 extends Grid {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.tags = ["columns", "aggregates"];
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    try {
      let mod = this.injector.get("GridsFilter");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsPage");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsSelection");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsSort");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsGroup");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsReorder");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsRowDD");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsDetailRow");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsToolbar");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsAggregate");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsSearch");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsVirtualScroll");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsEdit");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsResize");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsExcelExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsPdfExport");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsCommandColumn");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsContextMenu");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsFreeze");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsColumnMenu");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsColumnChooser");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsForeignKey");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsInfiniteScroll");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    try {
      let mod = this.injector.get("GridsLazyLoadGroup");
      if (this.injectedModules.indexOf(mod) === -1) {
        this.injectedModules.push(mod);
      }
    } catch {
    }
    this.registerEvents(outputs$1);
    this.addTwoWay.call(this, twoWays$1);
    setValue2("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.tagObjects[0].instance = this.childColumns;
    if (this.childAggregates) {
      this.tagObjects[1].instance = this.childAggregates;
    }
    this.context.ngAfterContentChecked(this);
  }
};
GridComponent.ɵfac = function GridComponent_Factory(t) {
  return new (t || GridComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
GridComponent.ɵcmp = ɵɵdefineComponent({
  type: GridComponent,
  selectors: [["ejs-grid"]],
  contentQueries: function GridComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c9, 5);
      ɵɵcontentQuery(dirIndex, _c10, 5);
      ɵɵcontentQuery(dirIndex, _c11, 5);
      ɵɵcontentQuery(dirIndex, _c12, 5);
      ɵɵcontentQuery(dirIndex, _c13, 5);
      ɵɵcontentQuery(dirIndex, _c14, 5);
      ɵɵcontentQuery(dirIndex, _c15, 5);
      ɵɵcontentQuery(dirIndex, ColumnsDirective, 5);
      ɵɵcontentQuery(dirIndex, AggregatesDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rowTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.emptyRecordTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.detailTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.pagerTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.editSettings_template = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupSettings_captionTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childColumns = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.childAggregates = _t.first);
    }
  },
  inputs: {
    aggregates: "aggregates",
    allowExcelExport: "allowExcelExport",
    allowFiltering: "allowFiltering",
    allowGrouping: "allowGrouping",
    allowKeyboard: "allowKeyboard",
    allowMultiSorting: "allowMultiSorting",
    allowPaging: "allowPaging",
    allowPdfExport: "allowPdfExport",
    allowReordering: "allowReordering",
    allowResizing: "allowResizing",
    allowRowDragAndDrop: "allowRowDragAndDrop",
    allowSelection: "allowSelection",
    allowSorting: "allowSorting",
    allowTextWrap: "allowTextWrap",
    autoFit: "autoFit",
    childGrid: "childGrid",
    clipMode: "clipMode",
    columnChooserSettings: "columnChooserSettings",
    columnMenuItems: "columnMenuItems",
    columnQueryMode: "columnQueryMode",
    columns: "columns",
    contextMenuItems: "contextMenuItems",
    cssClass: "cssClass",
    currencyCode: "currencyCode",
    currentAction: "currentAction",
    currentViewData: "currentViewData",
    dataSource: "dataSource",
    detailTemplate: "detailTemplate",
    editSettings: "editSettings",
    ej2StatePersistenceVersion: "ej2StatePersistenceVersion",
    emptyRecordTemplate: "emptyRecordTemplate",
    enableAdaptiveUI: "enableAdaptiveUI",
    enableAltRow: "enableAltRow",
    enableAutoFill: "enableAutoFill",
    enableColumnVirtualization: "enableColumnVirtualization",
    enableHeaderFocus: "enableHeaderFocus",
    enableHover: "enableHover",
    enableHtmlSanitizer: "enableHtmlSanitizer",
    enableImmutableMode: "enableImmutableMode",
    enableInfiniteScrolling: "enableInfiniteScrolling",
    enablePersistence: "enablePersistence",
    enableRtl: "enableRtl",
    enableStickyHeader: "enableStickyHeader",
    enableVirtualMaskRow: "enableVirtualMaskRow",
    enableVirtualization: "enableVirtualization",
    exportGrids: "exportGrids",
    filterSettings: "filterSettings",
    frozenColumns: "frozenColumns",
    frozenRows: "frozenRows",
    gridLines: "gridLines",
    groupSettings: "groupSettings",
    height: "height",
    hierarchyPrintMode: "hierarchyPrintMode",
    infiniteScrollSettings: "infiniteScrollSettings",
    loadingIndicator: "loadingIndicator",
    locale: "locale",
    pageSettings: "pageSettings",
    pagerTemplate: "pagerTemplate",
    parentDetails: "parentDetails",
    printMode: "printMode",
    query: "query",
    queryString: "queryString",
    resizeSettings: "resizeSettings",
    rowDropSettings: "rowDropSettings",
    rowHeight: "rowHeight",
    rowRenderingMode: "rowRenderingMode",
    rowTemplate: "rowTemplate",
    searchSettings: "searchSettings",
    selectedRowIndex: "selectedRowIndex",
    selectionSettings: "selectionSettings",
    showColumnChooser: "showColumnChooser",
    showColumnMenu: "showColumnMenu",
    showHider: "showHider",
    sortSettings: "sortSettings",
    textWrapSettings: "textWrapSettings",
    toolbar: "toolbar",
    toolbarTemplate: "toolbarTemplate",
    width: "width"
  },
  outputs: {
    actionBegin: "actionBegin",
    actionComplete: "actionComplete",
    actionFailure: "actionFailure",
    batchAdd: "batchAdd",
    batchCancel: "batchCancel",
    batchDelete: "batchDelete",
    beforeAutoFill: "beforeAutoFill",
    beforeBatchAdd: "beforeBatchAdd",
    beforeBatchDelete: "beforeBatchDelete",
    beforeBatchSave: "beforeBatchSave",
    beforeCopy: "beforeCopy",
    beforeDataBound: "beforeDataBound",
    beforeExcelExport: "beforeExcelExport",
    beforeOpenAdaptiveDialog: "beforeOpenAdaptiveDialog",
    beforeOpenColumnChooser: "beforeOpenColumnChooser",
    beforePaste: "beforePaste",
    beforePdfExport: "beforePdfExport",
    beforePrint: "beforePrint",
    beginEdit: "beginEdit",
    cellDeselected: "cellDeselected",
    cellDeselecting: "cellDeselecting",
    cellEdit: "cellEdit",
    cellSave: "cellSave",
    cellSaved: "cellSaved",
    cellSelected: "cellSelected",
    cellSelecting: "cellSelecting",
    checkBoxChange: "checkBoxChange",
    columnDataStateChange: "columnDataStateChange",
    columnDeselected: "columnDeselected",
    columnDeselecting: "columnDeselecting",
    columnDrag: "columnDrag",
    columnDragStart: "columnDragStart",
    columnDrop: "columnDrop",
    columnMenuClick: "columnMenuClick",
    columnMenuOpen: "columnMenuOpen",
    columnSelected: "columnSelected",
    columnSelecting: "columnSelecting",
    commandClick: "commandClick",
    contextMenuClick: "contextMenuClick",
    contextMenuOpen: "contextMenuOpen",
    created: "created",
    dataBound: "dataBound",
    dataSourceChanged: "dataSourceChanged",
    dataStateChange: "dataStateChange",
    destroyed: "destroyed",
    detailDataBound: "detailDataBound",
    excelAggregateQueryCellInfo: "excelAggregateQueryCellInfo",
    excelExportComplete: "excelExportComplete",
    excelHeaderQueryCellInfo: "excelHeaderQueryCellInfo",
    excelQueryCellInfo: "excelQueryCellInfo",
    exportDetailDataBound: "exportDetailDataBound",
    exportDetailTemplate: "exportDetailTemplate",
    exportGroupCaption: "exportGroupCaption",
    headerCellInfo: "headerCellInfo",
    keyPressed: "keyPressed",
    lazyLoadGroupCollapse: "lazyLoadGroupCollapse",
    lazyLoadGroupExpand: "lazyLoadGroupExpand",
    load: "load",
    pdfAggregateQueryCellInfo: "pdfAggregateQueryCellInfo",
    pdfExportComplete: "pdfExportComplete",
    pdfHeaderQueryCellInfo: "pdfHeaderQueryCellInfo",
    pdfQueryCellInfo: "pdfQueryCellInfo",
    printComplete: "printComplete",
    queryCellInfo: "queryCellInfo",
    recordClick: "recordClick",
    recordDoubleClick: "recordDoubleClick",
    resizeStart: "resizeStart",
    resizeStop: "resizeStop",
    resizing: "resizing",
    rowDataBound: "rowDataBound",
    rowDeselected: "rowDeselected",
    rowDeselecting: "rowDeselecting",
    rowDrag: "rowDrag",
    rowDragStart: "rowDragStart",
    rowDragStartHelper: "rowDragStartHelper",
    rowDrop: "rowDrop",
    rowSelected: "rowSelected",
    rowSelecting: "rowSelecting",
    toolbarClick: "toolbarClick",
    dataSourceChange: "dataSourceChange"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function GridComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
__decorate([Template()], GridComponent.prototype, "rowTemplate", void 0);
__decorate([Template()], GridComponent.prototype, "emptyRecordTemplate", void 0);
__decorate([Template()], GridComponent.prototype, "detailTemplate", void 0);
__decorate([Template()], GridComponent.prototype, "toolbarTemplate", void 0);
__decorate([Template()], GridComponent.prototype, "pagerTemplate", void 0);
__decorate([Template()], GridComponent.prototype, "editSettings_template", void 0);
__decorate([Template()], GridComponent.prototype, "groupSettings_captionTemplate", void 0);
GridComponent = __decorate([ComponentMixins([ComponentBase])], GridComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GridComponent, [{
    type: Component,
    args: [{
      selector: "ejs-grid",
      inputs: inputs$1,
      outputs: outputs$1,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {
        childColumns: new ContentChild(ColumnsDirective),
        childAggregates: new ContentChild(AggregatesDirective)
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, {
    rowTemplate: [{
      type: ContentChild,
      args: ["rowTemplate"]
    }],
    emptyRecordTemplate: [{
      type: ContentChild,
      args: ["emptyRecordTemplate"]
    }],
    detailTemplate: [{
      type: ContentChild,
      args: ["detailTemplate"]
    }],
    toolbarTemplate: [{
      type: ContentChild,
      args: ["toolbarTemplate"]
    }],
    pagerTemplate: [{
      type: ContentChild,
      args: ["pagerTemplate"]
    }],
    editSettings_template: [{
      type: ContentChild,
      args: ["editSettingsTemplate"]
    }],
    groupSettings_captionTemplate: [{
      type: ContentChild,
      args: ["groupSettingsCaptionTemplate"]
    }]
  });
})();
var GridModule = class {
};
GridModule.ɵfac = function GridModule_Factory(t) {
  return new (t || GridModule)();
};
GridModule.ɵmod = ɵɵdefineNgModule({
  type: GridModule,
  declarations: [GridComponent, StackedColumnDirective, StackedColumnsDirective, ColumnDirective, ColumnsDirective, AggregateColumnDirective, AggregateColumnsDirective, AggregateDirective, AggregatesDirective],
  imports: [CommonModule],
  exports: [GridComponent, StackedColumnDirective, StackedColumnsDirective, ColumnDirective, ColumnsDirective, AggregateColumnDirective, AggregateColumnsDirective, AggregateDirective, AggregatesDirective]
});
GridModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GridModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [GridComponent, StackedColumnDirective, StackedColumnsDirective, ColumnDirective, ColumnsDirective, AggregateColumnDirective, AggregateColumnsDirective, AggregateDirective, AggregatesDirective],
      exports: [GridComponent, StackedColumnDirective, StackedColumnsDirective, ColumnDirective, ColumnsDirective, AggregateColumnDirective, AggregateColumnsDirective, AggregateDirective, AggregatesDirective]
    }]
  }], null, null);
})();
var FilterService = {
  provide: "GridsFilter",
  useValue: Filter
};
var PageService = {
  provide: "GridsPage",
  useValue: Page
};
var SelectionService = {
  provide: "GridsSelection",
  useValue: Selection
};
var SortService = {
  provide: "GridsSort",
  useValue: Sort
};
var GroupService = {
  provide: "GridsGroup",
  useValue: Group
};
var ReorderService = {
  provide: "GridsReorder",
  useValue: Reorder
};
var RowDDService = {
  provide: "GridsRowDD",
  useValue: RowDD
};
var DetailRowService = {
  provide: "GridsDetailRow",
  useValue: DetailRow
};
var ToolbarService = {
  provide: "GridsToolbar",
  useValue: Toolbar2
};
var AggregateService = {
  provide: "GridsAggregate",
  useValue: Aggregate
};
var SearchService = {
  provide: "GridsSearch",
  useValue: Search
};
var VirtualScrollService = {
  provide: "GridsVirtualScroll",
  useValue: VirtualScroll
};
var EditService = {
  provide: "GridsEdit",
  useValue: Edit
};
var ResizeService = {
  provide: "GridsResize",
  useValue: Resize
};
var ExcelExportService = {
  provide: "GridsExcelExport",
  useValue: ExcelExport
};
var PdfExportService = {
  provide: "GridsPdfExport",
  useValue: PdfExport
};
var CommandColumnService = {
  provide: "GridsCommandColumn",
  useValue: CommandColumn
};
var ContextMenuService = {
  provide: "GridsContextMenu",
  useValue: ContextMenu2
};
var FreezeService = {
  provide: "GridsFreeze",
  useValue: Freeze
};
var ColumnMenuService = {
  provide: "GridsColumnMenu",
  useValue: ColumnMenu
};
var ColumnChooserService = {
  provide: "GridsColumnChooser",
  useValue: ColumnChooser
};
var ForeignKeyService = {
  provide: "GridsForeignKey",
  useValue: ForeignKey
};
var InfiniteScrollService = {
  provide: "GridsInfiniteScroll",
  useValue: InfiniteScroll
};
var LazyLoadGroupService = {
  provide: "GridsLazyLoadGroup",
  useValue: LazyLoadGroup
};
var GridAllModule = class {
};
GridAllModule.ɵfac = function GridAllModule_Factory(t) {
  return new (t || GridAllModule)();
};
GridAllModule.ɵmod = ɵɵdefineNgModule({
  type: GridAllModule,
  imports: [CommonModule, GridModule],
  exports: [GridModule]
});
GridAllModule.ɵinj = ɵɵdefineInjector({
  providers: [FilterService, PageService, SelectionService, SortService, GroupService, ReorderService, RowDDService, DetailRowService, ToolbarService, AggregateService, SearchService, VirtualScrollService, EditService, ResizeService, ExcelExportService, PdfExportService, CommandColumnService, ContextMenuService, FreezeService, ColumnMenuService, ColumnChooserService, ForeignKeyService, InfiniteScrollService, LazyLoadGroupService],
  imports: [[CommonModule, GridModule], GridModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GridAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, GridModule],
      exports: [GridModule],
      providers: [FilterService, PageService, SelectionService, SortService, GroupService, ReorderService, RowDDService, DetailRowService, ToolbarService, AggregateService, SearchService, VirtualScrollService, EditService, ResizeService, ExcelExportService, PdfExportService, CommandColumnService, ContextMenuService, FreezeService, ColumnMenuService, ColumnChooserService, ForeignKeyService, InfiniteScrollService, LazyLoadGroupService]
    }]
  }], null, null);
})();
var inputs = ["cssClass", "currentPage", "customText", "enableExternalMessage", "enablePagerMessage", "enablePersistence", "enableQueryString", "enableRtl", "externalMessage", "locale", "pageCount", "pageSize", "pageSizes", "template", "totalRecordsCount"];
var outputs = ["click", "created", "dropDownChanged", "currentPageChange", "pageSizeChange", "pageCountChange", "pageSizesChange"];
var twoWays = ["currentPage", "pageSize", "pageCount", "pageSizes"];
var PagerComponent = class PagerComponent2 extends Pager {
  constructor(ngEle, srenderer, viewContainerRef, injector) {
    super();
    this.ngEle = ngEle;
    this.srenderer = srenderer;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.element = this.ngEle.nativeElement;
    this.injectedModules = this.injectedModules || [];
    this.registerEvents(outputs);
    this.addTwoWay.call(this, twoWays);
    setValue2("currentInstance", this, this.viewContainerRef);
    this.context = new ComponentBase();
  }
  ngOnInit() {
    this.context.ngOnInit(this);
  }
  ngAfterViewInit() {
    this.context.ngAfterViewInit(this);
  }
  ngOnDestroy() {
    this.context.ngOnDestroy(this);
  }
  ngAfterContentChecked() {
    this.context.ngAfterContentChecked(this);
  }
};
PagerComponent.ɵfac = function PagerComponent_Factory(t) {
  return new (t || PagerComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector));
};
PagerComponent.ɵcmp = ɵɵdefineComponent({
  type: PagerComponent,
  selectors: [["ejs-pager"]],
  contentQueries: function PagerComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, _c0, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    cssClass: "cssClass",
    currentPage: "currentPage",
    customText: "customText",
    enableExternalMessage: "enableExternalMessage",
    enablePagerMessage: "enablePagerMessage",
    enablePersistence: "enablePersistence",
    enableQueryString: "enableQueryString",
    enableRtl: "enableRtl",
    externalMessage: "externalMessage",
    locale: "locale",
    pageCount: "pageCount",
    pageSize: "pageSize",
    pageSizes: "pageSizes",
    template: "template",
    totalRecordsCount: "totalRecordsCount"
  },
  outputs: {
    click: "click",
    created: "created",
    dropDownChanged: "dropDownChanged",
    currentPageChange: "currentPageChange",
    pageSizeChange: "pageSizeChange",
    pageCountChange: "pageCountChange",
    pageSizesChange: "pageSizesChange"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 0,
  vars: 0,
  template: function PagerComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
__decorate([Template()], PagerComponent.prototype, "template", void 0);
PagerComponent = __decorate([ComponentMixins([ComponentBase])], PagerComponent);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PagerComponent, [{
    type: Component,
    args: [{
      selector: "ejs-pager",
      inputs,
      outputs,
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      queries: {}
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }];
  }, {
    template: [{
      type: ContentChild,
      args: ["template"]
    }]
  });
})();
var PagerModule = class {
};
PagerModule.ɵfac = function PagerModule_Factory(t) {
  return new (t || PagerModule)();
};
PagerModule.ɵmod = ɵɵdefineNgModule({
  type: PagerModule,
  declarations: [PagerComponent],
  imports: [CommonModule],
  exports: [PagerComponent]
});
PagerModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PagerModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [PagerComponent],
      exports: [PagerComponent]
    }]
  }], null, null);
})();
var PagerAllModule = class {
};
PagerAllModule.ɵfac = function PagerAllModule_Factory(t) {
  return new (t || PagerAllModule)();
};
PagerAllModule.ɵmod = ɵɵdefineNgModule({
  type: PagerAllModule,
  imports: [CommonModule, PagerModule],
  exports: [PagerModule]
});
PagerAllModule.ɵinj = ɵɵdefineInjector({
  providers: [],
  imports: [[CommonModule, PagerModule], PagerModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PagerAllModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PagerModule],
      exports: [PagerModule],
      providers: []
    }]
  }], null, null);
})();
export {
  Aggregate,
  AggregateColumnDirective,
  AggregateColumnsDirective,
  AggregateDirective,
  AggregateService,
  AggregatesDirective,
  AutoCompleteEditCell,
  BatchEdit,
  BatchEditRender,
  BooleanEditCell,
  BooleanFilterUI,
  Cell,
  CellRenderer,
  CellRendererFactory,
  CellType,
  CheckBoxFilter,
  CheckBoxFilterBase,
  Clipboard,
  Column,
  ColumnChooser,
  ColumnChooserService,
  ColumnDirective,
  ColumnMenu,
  ColumnMenuService,
  ColumnsDirective,
  ComboboxEditCell,
  CommandColumn,
  CommandColumnModel,
  CommandColumnRenderer,
  CommandColumnService,
  ContentRender,
  ContextMenu2 as ContextMenu,
  ContextMenuService,
  Data,
  DateFilterUI,
  DatePickerEditCell,
  DefaultEditCell,
  DetailRow,
  DetailRowService,
  DialogEdit,
  DialogEditRender,
  DropDownEditCell,
  Edit,
  EditCellBase,
  EditRender,
  EditService,
  EditSettings,
  ExcelExport,
  ExcelExportService,
  ExcelFilter,
  ExcelFilterBase,
  ExportHelper,
  ExportValueFormatter,
  ExternalMessage,
  Filter,
  FilterCellRenderer,
  FilterService,
  FilterSettings,
  FlMenuOptrUI,
  ForeignKey,
  ForeignKeyService,
  Freeze,
  FreezeService,
  Global,
  Grid,
  GridAllModule,
  GridColumn,
  GridComponent,
  GridModule,
  Group,
  GroupCaptionCellRenderer,
  GroupCaptionEmptyCellRenderer,
  GroupLazyLoadRenderer,
  GroupModelGenerator,
  GroupService,
  GroupSettings,
  HeaderCellRenderer,
  HeaderRender,
  IndentCellRenderer,
  InfiniteScroll,
  InfiniteScrollService,
  InfiniteScrollSettings,
  InlineEdit,
  InlineEditRender,
  InterSectionObserver,
  LazyLoadGroup,
  LazyLoadGroupService,
  LoadingIndicator,
  Logger,
  MaskedTextBoxCellEdit,
  MultiSelectEditCell,
  NormalEdit,
  NumberFilterUI,
  NumericContainer,
  NumericEditCell,
  Page,
  PageService,
  Pager,
  PagerAllModule,
  PagerComponent,
  PagerDropDown,
  PagerMessage,
  PagerModule,
  PdfExport,
  PdfExportService,
  Predicate2 as Predicate,
  Print,
  Render,
  RenderType,
  Reorder,
  ReorderService,
  Resize,
  ResizeService,
  ResizeSettings,
  ResponsiveDialogAction,
  ResponsiveDialogRenderer,
  ResponsiveToolbarAction,
  Row,
  RowDD,
  RowDDService,
  RowDropSettings,
  RowModelGenerator,
  RowRenderer,
  Scroll,
  Search,
  SearchService,
  SearchSettings,
  Selection,
  SelectionService,
  SelectionSettings,
  ServiceLocator,
  Sort,
  SortDescriptor,
  SortService,
  SortSettings,
  StackedColumn,
  StackedColumnDirective,
  StackedColumnsDirective,
  StackedHeaderCellRenderer,
  StringFilterUI,
  TextWrapSettings,
  TimePickerEditCell,
  ToggleEditCell,
  Toolbar2 as Toolbar,
  ToolbarItem,
  ToolbarService,
  ValueFormatter,
  VirtualContentRenderer,
  VirtualElementHandler,
  VirtualHeaderRenderer,
  VirtualRowModelGenerator,
  VirtualScroll,
  VirtualScrollService,
  accessPredicate,
  actionBegin,
  actionComplete,
  actionFailure,
  addBegin,
  addBiggerDialog,
  addComplete,
  addDeleteAction,
  addFixedColumnBorder,
  addRemoveActiveClasses,
  addRemoveEventListener,
  addStickyColumnPosition,
  addedRecords,
  addedRow,
  afterContentRender,
  afterFilterColumnMenuClose,
  appendChildren,
  appendInfiniteContent,
  applyBiggerTheme,
  applyStickyLeftRightPosition,
  ariaColIndex,
  ariaRowIndex,
  autoCol,
  batchAdd,
  batchCancel,
  batchCnfrmDlgCancel,
  batchDelete,
  batchEditFormRendered,
  batchForm,
  beforeAutoFill,
  beforeBatchAdd,
  beforeBatchCancel,
  beforeBatchDelete,
  beforeBatchSave,
  beforeCellFocused,
  beforeCheckboxRenderer,
  beforeCheckboxRendererQuery,
  beforeCheckboxfilterRenderer,
  beforeCopy,
  beforeCustomFilterOpen,
  beforeDataBound,
  beforeExcelExport,
  beforeFltrcMenuOpen,
  beforeFragAppend,
  beforeOpen,
  beforeOpenAdaptiveDialog,
  beforeOpenColumnChooser,
  beforePaste,
  beforePdfExport,
  beforePrint,
  beforeRefreshOnDataChange,
  beforeStartEdit,
  beginEdit,
  bulkSave,
  cBoxFltrBegin,
  cBoxFltrComplete,
  calculateAggregate,
  cancelBegin,
  capitalizeFirstLetter,
  captionActionComplete,
  cellDeselected,
  cellDeselecting,
  cellEdit,
  cellFocused,
  cellSave,
  cellSaved,
  cellSelected,
  cellSelecting,
  cellSelectionBegin,
  cellSelectionComplete,
  change,
  changedRecords,
  checkBoxChange,
  checkDepth,
  checkScrollReset,
  checkVirtualSort,
  clearReactVueTemplates,
  click,
  closeBatch,
  closeEdit,
  closeFilterDialog,
  closeInline,
  colGroup,
  colGroupRefresh,
  columnChooserCancelBtnClick,
  columnChooserOpened,
  columnDataStateChange,
  columnDeselected,
  columnDeselecting,
  columnDrag,
  columnDragStart,
  columnDragStop,
  columnDrop,
  columnMenuClick,
  columnMenuOpen,
  columnPositionChanged,
  columnSelected,
  columnSelecting,
  columnSelectionBegin,
  columnSelectionComplete,
  columnVisibilityChanged,
  columnWidthChanged,
  columnsPrepared,
  commandClick,
  commandColumnDestroy,
  compareChanges,
  componentRendered,
  content,
  contentReady,
  contextMenuClick,
  contextMenuOpen,
  create,
  createCboxWithWrap,
  createEditElement,
  createVirtualValidationForm,
  created,
  crudAction,
  customFilterClose,
  dataBound,
  dataColIndex,
  dataReady,
  dataRowIndex,
  dataSourceChanged,
  dataSourceModified,
  dataStateChange,
  dblclick,
  deleteBegin,
  deleteComplete,
  deletedRecords,
  destroy,
  destroyAutoFillElements,
  destroyChildGrid,
  destroyForm,
  destroyed,
  detailDataBound,
  detailIndentCellInfo,
  detailLists,
  detailStateChange,
  dialogDestroy,
  distinctStringValues,
  doesImplementInterface,
  doubleTap,
  downArrow,
  editBegin,
  editComplete,
  editNextValCell,
  editReset,
  editedRow,
  endAdd,
  endDelete,
  endEdit,
  ensureFirstRow,
  ensureLastRow,
  enter,
  enterKeyHandler,
  eventPromise,
  excelAggregateQueryCellInfo,
  excelExportComplete,
  excelHeaderQueryCellInfo,
  excelQueryCellInfo,
  expandChildGrid,
  exportDataBound,
  exportDetailDataBound,
  exportDetailTemplate,
  exportGroupCaption,
  exportRowDataBound,
  extend2 as extend,
  extendObjWithFn,
  filterAfterOpen,
  filterBeforeOpen,
  filterBegin,
  filterCboxValue,
  filterChoiceRequest,
  filterCmenuSelect,
  filterComplete,
  filterDialogClose,
  filterDialogCreated,
  filterMenuClose,
  filterOpen,
  filterSearchBegin,
  findCellIndex,
  fltrPrevent,
  focus,
  foreignKeyData,
  freezeRefresh,
  freezeRender,
  frozenContent,
  frozenDirection,
  frozenHeader,
  frozenHeight,
  frozenLeft,
  frozenRight,
  generateExpandPredicates,
  generateQuery,
  getActualPropFromColl,
  getActualProperties,
  getActualRowHeight,
  getAggregateQuery,
  getCellByColAndRowIndex,
  getCellFromRow,
  getCellsByTableName,
  getCloneProperties,
  getCollapsedRowsCount,
  getColumnByForeignKeyValue,
  getColumnModelByFieldName,
  getColumnModelByUid,
  getComplexFieldID,
  getCustomDateFormat,
  getDatePredicate,
  getEditedDataIndex,
  getElementIndex,
  getExpandedState,
  getFilterBarOperator,
  getFilterMenuPostion,
  getForeignData,
  getForeignKeyData,
  getGroupKeysAndFields,
  getNumberFormat,
  getObject,
  getParsedFieldID,
  getPosition,
  getPredicates,
  getPrintGridModel,
  getPrototypesOfObj,
  getRowHeight,
  getRowIndexFromElement,
  getScrollBarWidth,
  getScrollWidth,
  getStateEventArgument,
  getTransformValues,
  getUid,
  getUpdateUsingRaf,
  getVirtualData,
  getVisiblePage,
  getZIndexCalcualtion,
  gridChkBox,
  gridContent,
  gridFooter,
  gridHeader,
  groupAggregates,
  groupBegin,
  groupCaptionRow,
  groupCaptionRowLeftRightPos,
  groupCollapse,
  groupComplete,
  groupReorderRowObject,
  headerCellInfo,
  headerContent,
  headerDrop,
  headerRefreshed,
  headerValueAccessor,
  hierarchyPrint,
  immutableBatchCancel,
  inArray,
  inBoundModelChanged,
  infiniteCrudCancel,
  infiniteEditHandler,
  infinitePageQuery,
  infiniteScrollComplete,
  infiniteScrollHandler,
  infiniteShowHide,
  initForeignKeyColumn,
  initialCollapse,
  initialEnd,
  initialFrozenColumnIndex,
  initialLoad,
  isActionPrevent,
  isChildColumn,
  isComplexField,
  isEditable,
  isExportColumns,
  isGroupAdaptive,
  isRowEnteredInGrid,
  ispercentageWidth,
  iterateArrayOrObject,
  iterateExtend,
  keyPressed,
  lazyLoadGroupCollapse,
  lazyLoadGroupExpand,
  lazyLoadScrollHandler,
  leftRight,
  load,
  measureColumnDepth,
  menuClass,
  modelChanged,
  movableContent,
  movableHeader,
  nextCellIndex,
  onEmpty,
  onResize,
  open,
  padZero,
  pageBegin,
  pageComplete,
  pageDown,
  pageUp,
  pagerRefresh,
  parents,
  parentsUntil,
  partialRefresh,
  pdfAggregateQueryCellInfo,
  pdfExportComplete,
  pdfHeaderQueryCellInfo,
  pdfQueryCellInfo,
  performComplexDataOperation,
  prepareColumns,
  preventBatch,
  preventFrozenScrollRefresh,
  printComplete,
  printGridInit,
  pushuid,
  queryCellInfo,
  recordAdded,
  recordClick,
  recordDoubleClick,
  recursive,
  refreshAggregateCell,
  refreshAggregates,
  refreshComplete,
  refreshCustomFilterClearBtn,
  refreshCustomFilterOkBtn,
  refreshExpandandCollapse,
  refreshFilteredColsUid,
  refreshFooterRenderer,
  refreshForeignData,
  refreshFrozenColumns,
  refreshFrozenHeight,
  refreshFrozenPosition,
  refreshHandlers,
  refreshInfiniteCurrentViewData,
  refreshInfiniteEditrowindex,
  refreshInfiniteModeBlocks,
  refreshInfinitePersistSelection,
  refreshResizePosition,
  refreshSplitFrozenColumn,
  refreshVirtualBlock,
  refreshVirtualCache,
  refreshVirtualEditFormCells,
  refreshVirtualFrozenHeight,
  refreshVirtualFrozenRows,
  refreshVirtualLazyLoadCache,
  refreshVirtualMaxPage,
  registerEventHandlers,
  removeAddCboxClasses,
  removeElement,
  removeEventHandlers,
  removeInfiniteRows,
  renderResponsiveChangeAction,
  renderResponsiveCmenu,
  renderResponsiveColumnChooserDiv,
  reorderBegin,
  reorderComplete,
  resetCachedRowIndex,
  resetColandRowSpanStickyPosition,
  resetColspanGroupCaption,
  resetColumns,
  resetInfiniteBlocks,
  resetRowIndex,
  resetVirtualFocus,
  resizeClassList,
  resizeStart,
  resizeStop,
  restoreFocus,
  row,
  rowCell,
  rowDataBound,
  rowDeselected,
  rowDeselecting,
  rowDrag,
  rowDragAndDrop,
  rowDragAndDropBegin,
  rowDragAndDropComplete,
  rowDragStart,
  rowDragStartHelper,
  rowDrop,
  rowModeChange,
  rowPositionChanged,
  rowSelected,
  rowSelecting,
  rowSelectionBegin,
  rowSelectionComplete,
  rowsAdded,
  rowsRemoved,
  rtlUpdated,
  saveComplete,
  scroll,
  scrollToEdit,
  searchBegin,
  searchComplete,
  selectRowOnContextOpen,
  selectVirtualRow,
  setChecked,
  setColumnIndex,
  setComplexFieldID,
  setCssInGridPopUp,
  setDisplayValue,
  setFormatter,
  setFreezeSelection,
  setFullScreenDialog,
  setGroupCache,
  setHeightToFrozenElement,
  setInfiniteCache,
  setInfiniteColFrozenHeight,
  setInfiniteFrozenHeight,
  setReorderDestinationElement,
  setRowElements,
  setStyleAndAttributes,
  setValidationRuels,
  setVirtualPageQuery,
  shiftEnter,
  shiftTab,
  showAddNewRowFocus,
  showEmptyGrid,
  sliceElements,
  sortBegin,
  sortComplete,
  stickyScrollComplete,
  summaryIterator,
  tab,
  table,
  tbody,
  templateCompiler,
  textWrapRefresh,
  toogleCheckbox,
  toolbarClick,
  toolbarRefresh,
  tooltipDestroy,
  uiUpdate,
  ungroupBegin,
  ungroupComplete,
  upArrow,
  updateColumnTypeForExportColumns,
  updateData,
  updatecloneRow,
  valCustomPlacement,
  validateVirtualForm,
  valueAccessor,
  virtaulCellFocus,
  virtaulKeyHandler,
  virtualScrollAddActionBegin,
  virtualScrollEdit,
  virtualScrollEditActionBegin,
  virtualScrollEditCancel,
  virtualScrollEditSuccess,
  wrap
};
//# sourceMappingURL=@syncfusion_ej2-angular-grids.js.map
